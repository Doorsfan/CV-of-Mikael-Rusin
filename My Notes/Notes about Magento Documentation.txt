Magento architecture principles:

OOP Architechture and programming principles:

OOP design allows for maximum flexibility and extensibility of software components, permitting
you to design and implement highly customized web sites. The advantages of OOP principles include
incorporate of industry-standard programming design patterns and the strict seperation of business
logic from presentation.

Object inheritance is important, too: in keeping with classic object-oriented programming methodology
the Magento platform provides core components with base functionality that can be inherited by custom
components for a specific web site or application.

Strongly layered product architechture:

This supports the seperation of visual presentation from business logic. This compartmentalization
simplifies customization of store appearance and behavior. Architechtural layer also provides programmers
with a high level-model for understanding the optimal placement of features and code in a complex system.

Magento tweaks the classic Model-View-Controller architechtural model, though: files within modules
are typically grouped by functionality rather than file type.

The Magento Framework defines the fundamental concepts and rules for how the components of the web site
can behave. The Magento framework contains libraries that modules access but no business logic components.
It accepts HTTP requests and routes them to the appropiate module.

Integration with architechtural layers:

Presentation Layer:

THe Presentation Layer provides both view components (layouts, blocks, templates) and controllers, which process
commands to and from the user interface. The presentation layer can also include web API service bindings. 

(We include these service bindings in this discussion of the presentation layer model because web API calls
come in through HTTP just like browser requests, and can be made via AJAX calls from the user interface.
Consequently, while web API calls can originate from an external application, they can also originate
from the user interface).

Service Layer:

Through the use of service contracts, the Service layer defines the overall interface for interacting
with business logic (for example, creating customers and getting tax rates). Service contracts simplify
the process of replacing or modifying (via plugins) services.

Domain Layer:

The Domain layer (also referred to as the Business Logic Layer) provides business logic and functionality in
base classes, resource models, and data access capabilities that you can extend and customize.

Ease of extensibility:

Magento uses dependency injection and service contracts  to simplify the process of supplying a new implementation
of a defined API.

Dependency injection benefits include:

The client that uses a module or service can remain ignorant of the module's or service's implementation details

You can modify a module without altering the client from anywhere you use the dependency injection framework to
wire application logic together.

Service Contracts provide a new way to access public API endpoints. These PHP interfaces to modules streamline
the use of APIs for most modules.

Modularity:

A module is a basic functional unit of a Magento system. Magento modules contain the logic to execute required
actions and functions. You extend the core feature set of Magento by writing and incorporating new modules
into your installation. Use Magento themes and language packages to create your store's visual design and language
capabilities.

Highly customizable store branding:

Extend and customize the core components of your Magento store's PHP-, HTML5 and CSS3 based default themes
and language packages to precisely control your site's behavior and look-and-feel.

Strong stack of open-source techs:

The Magento tech stack supplies a robust toolset for deploying large, distributed storefronts and for customizing
the product for your particular needs. THe Magento stack includes popular open-source techs such as Linux, Apache/Nginx, MySQL, Zend and Composer.

The technology stack of Magento overall, is as follows:

Web servers:

Apache

nginx

PHP:

Composer (dependency management package for PHP)

Database:

MySQL

MySQL Percona

HTTP accelerator:

Varnish

Cache Storage:

Redis

Memcache

Search:

Solr (Magento Enterprise Edition only)

Elasticsearch (Magento Enterprise Edition version 2.1.x only)

Additional Techs:

HTML5

CSS3 (LESS CSS pre-processor)

jQuery (primary JS lib)

RequireJS (lib that helps load JS resources on demand)

Knockout.js (simplifies JS Uis with the Model-View-View Model pattern)

Third-party libs (ZF1, ZF2, Symfony)

Coding standards PSR-0 (autoloading standard), PSR-1 (basic coding standards), and PSR-2 (coding style guide),
PSR-3, PSR-4.

Optional stack components:

Varnish (caching)

Redis (used for page caching)

Solr (search engine)

Elasticsearch (search engine)

Magento is compatible with but not supported for:

HHVM 3.9 PHP interpeter

Automated Testing:

Magneto also provides automated testing suites that include unit, integration, functional and performance test scripts,
as well as JavaScript tests and tools for static code analysis. Components include PHPUnit for the unit test framework
and Selenium for the functional test framework.

This framework is located in the dev/tests directory. The functional testing framework mtf can be found in a separate
repo <link> on devsdocs for magento. For more info ,see the Functional Testing Framework guide.

Between Magento 2.0 and 2.1, there is not a massive difference, apart from some earlier PHP versions not being supported anymore.

The general layout holds true for Magento 2.0 and 2.1:

OS: Linux (RedHat, CentOS, Ubuntu, Debian, etc.)

Memory req:

2GB ram

Composer (latest version):

Composer is required for developers who wish to contribute to the Magento 2 codebase or anyone who wishes to 
develop Magento extensions.

Web Servers:

Apache 2.2 or 2.4

In addition, the apache mod_rewrite module must be enabled. mod_rewrite enables the server to perform URL rewriting
For more info, see Apache documentation.

nginx >= 1.8 or latest mainline version.

Database:

MySQL 5.6

Magento 2.1 apps and later are compatible with 5.7

MariaDB and Percona are compatible with Magento because we support MySQL 5.6 APIs.

What follows, is some instructions on how to Install PHP on Ubuntu:

apt-get -y update
add-apt-repository ppa:ondrej/php
apt-get -y update
apt-get -y install php5.6 php5.6-mcrypt php5.6-mbstring php5.6-curl php5.6-cli php5.6-mysql php5.6-gd php5.6-intl php5.6-xsl

Check to see that the right version is installed:

php -v

We should get:

PHP 5.6.22-4+deb.sury.org~trusty+1 (cli)
Copyright (c) 1997-2016 The PHP group
Zend Engine v2.6.0, Copyright (c) 1998-2016 Zend Technologies
with Zend OPache v7.0.6-dev, Copyright (c) 1999-2016, by Zend Technologies

Make sure that you have compiled PHP with --enable-opcache

Once compiled, we can use the zend_extension configuration directive to load the OPcache extension
into PHP. This can be done with zend_extension=/full/path/to/opcache.so on non-windows OS.

To get the 7.0 version of PHP:

sudo apt-get -y update
sudo add-apt-repository ppa:ondej/php
sudo apt-get -y update
sudo apt-get install -y php7.0 libapache2-mod-php7.0 php7.0 php7.0-common php7.0-gd php7.0-mysql php7.0-mcrypt php7.0-curl php7.0-intl php7.0-xsl
php7.0-mbstring php7.0-zip php7.0-bcmath php7.0-iconv

The bcmath extension is required for Magento EE.

Required PHP Settings:

This topic discusses how to set required PHP options.

About required and recommended PHP options:

Set the system time zone for PHP; otherwise errors like the following display during the installation and time-related
operations like cron might not work:

PHP warning: date(): It is not safe to rely on the system's timezone settins. [more messages follow]

Set always_populate_raw_post_data = -1:

always_populate_raw_post_data is deprecated in PHP 5.6 and is dropped in PHP 7.0.x. This setting causes PHP to
always populate $HTTP_RAW_POST_DATA with raw POST data. Failure to set this properly in PHP 5.5 or 5.6 results in
errors when connecting to the DB.

Set the PHP memory limit:

Our detailed recommendations are:

Compiling code or deploying static assets, 756M

Installing and Updating Magento components from Magento Marketplace, 2G

Testing, 2G

Disable asp_tags:

If enabled, errors display while accessing PHTML templates.

asp_tags are removed in PHP 7.0

Enable opcache.save_comments, which is required for Magento >= 2.1:

NOTE: THese can be found in php.ini 

We recommend you enable the PHP OpCache for performance reasons. The OPcache is enabled in many PHP
distributions.

Magento >= 2.1 and later uses PHP code comments in the getDocComment validation call in the getExtensionAttributes
method in Magento\Framework\Api\ExtensionAttributesFactory.php

To avoid issues during installation and upgrade, we strongly recommend you apply the same PHP settings to both
the PHP command-line configuration and to the PHP web server plug-in's configuration. For more info,
see the next section.

Step 1: Find PHP configuration files:

This section discusses how you find the coniguration files necessary to update required settings.

To find the PHP configuraiton file, php.ini:

To find the web server configuration, run a phpinfo.php file in your web browser and look for the Loaded COnfiguration
File.

To get the phpinfo:

<?php

phpinfo(); //in web servers docroot

To view the results:

http://<web server host or IP>/phpinfo.php

If 404:

Start the web server if needed

assert firewalls portfowards 80

To locate it from cmd line:

php --ini

Use the value of the Loaded configuration file.

If we have more than one, make the changes in all of the php.ini files. Do this to avoid unpredictable performance.

To find OPCache configuration settings:

PHP OPCache settings are typically located either in php.ini or opcache.ini. The location might depend on your
OS and PHP version. The OPcache configuration file might have an [opcache] section or settings like opcache.enable.

Use the following guidelines to find it:

Apache Web server:

For Ubuntu with Apache, OPcache settings are typically located in php.ini

For CentOS with Apache or nginx, OPcache settings are typically located in /etc/php.d/opcache.ini

If not, use the following command to find it:

sudo find / -name 'opcache.ini'

nginx web server with PHP-FPM: /etc/php5/fpm/php.ini

If we have more than one opcache.ini, modify all of them.

Step 2: How to set PHP options:

open a php.ini in a text editor.

Locate your server's time zone in the available time zone settings. //This is a link on the PHP site

Locate the following setting and uncomment it if necessary:

date.timezone =  Europe/Amsterdam //Example

Change memory_limit to be:

memory_limit=2G

Find and uncomment/change always_populate_raw_post_data:

always_populate_raw_post_data = -1

Locate and change:

asp_tags = Off

If there are more than one php.ini, open them, change them.

Step 3: Set OPcache options

To set opcache.ini options:

Open your OpCache configuration file in a text editor:

opcache.ini (CentOS)

php.ini (Ubuntu)

/etc/php5/fpm/php.ini (nginx web server (CentOS or Ubuntu))

Locate opcache.save_comments and uncomment if necessary.

Set value of opcache.save_comments = 1

Restart the server:

Apache, Ubuntu: service apache2 restart

Apache, CentOS: service httpd restart

nginx, Ubuntu and CentOS: service nginx restart

Required PHP extensions:

bc-math - Arbitrary Precision Mathematics:

Compile php with --enable-bcmath

Has the following settings in php.ini:

bcmath.scale <integer> //defaults to 0, number of decimal digits for all bcmath functions

Has the following functions:

string bcadd ( string $left_operand, string $right_operand [, int $scale = 0 ] )

Sums left and right operand.

Example:

<?php

$a = '1.234';
$b = '5';

echo bcadd($a, $b); //6
echo bcadd($a, $b, 4); //6.2340

?>

Another example, homemade:

<?php

function Add($Num1, $Num2, $Scale=null) {
	//Check if they're valid positive numbers, extract the whole numbers and decimals
	if(!preg_match("/^\+?(\d)(\.\d+)?$/",$Num1, $Tmp1) || !preg_match("/^\+?(\d+)(\.\d+)?$/",$Num2, $Tmp2)) return('0');

	//This is where the result is stored
	$Output=array();

	//Remove ending zeroes from decimals and remove point
	$Dec1=isset($Tmp1[2])?rtrim(substr($Tmp1[2],1),'0'):'';
	$Dec2=isset($Tmp2[2])?rtrim(substr($Tmp2[2],1), '0'):'';

	//calculate the longest length of decimals
	$DLen=max(strlen($Dec1),strlen($Dec2));

	//If $Scale is null, automatically set it to the amount of decimal places for accuracy
	if($Scale==null) $Scale=$DLen;

	//Remove leading zeroes and reverse the whole numbers, then append padded decimals on the end
	$Num1=strrev(ltrim($Tmp1[1],'0').str_pad($Dec1,$DLen,'0'));
	$Num2=strrev(ltrim($Tmp2[1],'0').str_pad($Dec2,$DLen,'0'));

	//calculate the longest length we need to process
	$MLen=max(strlen($Num1),strlen($Num2));

	//pad the two numbers so they are of equal length (both equal to $MLen)
	$Num1=str_pad($Num1,$MLen,'0');
	$Num2=str_pad($Num2,$MLen,'0');

	//process each digit, keep the ones, carry the tens (remainders)
	for($i=0;$i<$MLen;$i++) {
		$Sum=((int)$Num1{$i}+(int)$Num2{$i});
		if(isset($Output[$i])) $Sum+=$Output[$i];
		$Output[$i]=$Sum%10;
		if($Sum>9) $Output[$i+1]=1;
	}

	//Convert the array to string and reverse it
	$Output=strrev(implode($Output));

	//substring the decimal digits from the result, pad if necessary (if $Scale > amount of actual decimals)
	//next, since actual zero values can cause a problem with the substring values, if so, just simply give '0'
	//next, append the decimal value, if $Scale is defined, and return result
	$Decimal=str_pad(substr($Output,-$DLen,$Scale),$Scale,'0');
	$Output=(($MLen-$DLen<1)?'0':substr($Output,0,-$DLen));
	$Output.=(($Scale>0)?".{$Decimal}":'');
	return($Output);
}

$A="5650175242.508133742";
$B="308437806.831153821478770";

printf("   Add(%s,%s);\r\n// %s\r\n\r\n", $A, $B,  Add($A, $B));
printf("BCAdd(%s,%s);\r\n// %s\r\n\r\n",$A,$B, BCAdd($A,$B));

/*
 This produces an expected result et.c
*/

?>

bccomp:

int bccomp( string $left_operand, string $right_operand [, int $scale = 0 ] )

Compares the left operand to the right operand and results in an int.

Returns 1 if left > right, 0 if two are equal, -1 otherwise.

Example:

<?php

echo bccomp('1', '2') . "\n"; //-1
echo bccomp('1.00001', '1', 3); //0
echo bccomp('1.00001', '1', 5); //1

?>

bcdiv:

string bcdiv ( string $left_operand, string $right_operand [, int $scale = 0 ] )

Returns divison as string, Null if right operand is 0.

Example:

<?php

echo bcdiv('105', '6.55957', 3); //16.007

?>

bcmod:

Get the modulus of the left_operand using modulus.

string bcmod ( string $left_operand, string $modulus )

Get the modulus of the left_operand using modulus.

Returns modulus as string, or NULL if modulus is 0.

Example:

<?php
echo bcmod('4','2'); //0
echo bcmod('2', '4'); //2
?>

Modulus only works for integer.

bcmul:

Multiply two arbitrary precision numbers:

string bcmul ( string $left_operand, string $right_operand [, int $scale = 0 ] )

Multiplies left oeprand with right operand.

If the scale optional param is omitted, it defaults to scale set globally with the bcscale function,  or fallback to
0 if it has not been set.

Example:

<?php
echo bcmul('1.34747474747474', '35', 3); //47.161
echo bcmul('2', '4'); //8
?>

Another example, but using homemade solution:

<?php

function Mul($Num1='0', $Num2='0') {
	//Check if they're both plain numbers
	if(!preg_match("/^\d+$/", $Num1) || !preg_match("/^\d+$/", $Num2)) return(0);

	//remove zeroes from beginning of numbers
	for($i=0;$i<strlen($Num1);$i++) if(@$Num1{$i}!='0') {$Num1=substr($Num1,$i);break;}
	for($i=0;$i<strlen($Num2);$i++) if(@$Num2{$i}!='0') {$Num2=substr($Num2,$i);break;}

	//get both number lengths
	$Len1=strlen($Num1);
	$Len2=strlen($Num2);

	// $Rema is for storing the calculated numbers and $Rema2 is for carrying the remainders
	$Rema=$Rema2=array();

	//We start by making a $Len1 by $Len2 table (array)
	for($y=$i=0;$y<$Len1;$y++)
		for($x=0;$x<$Len2;$x++)
			//we use the classic lattice method for calculating the multiplicaiton
			//This will multiply each number in $Num1 with each number in $Num2 and store it accordingly
			@$Rema[$i++%$Len2].=sprintf('%02d',(int)$Num1{$y}*(int)$Num2{$x});

	//Cycle through each stored number
	for($y=0;$y<$Len2;$y++)
		for($x=0;$x<$Len1*2;$x++)
			//Add up numbers in the diagional fashion the lattice method uses
			@$Rema2[Floor(($x-1)/2)+1+$y]+=(int)$Rema[$y]{$x};

	//reverse the results around
	$Rema2=array_reverse($Rema2);

	//cycle through all the results again
	for($i=0;$i<count($Rema2);$i++) {
		//reverse this item, split, keep the first digit, spread the other digits down the array
		$Rema3=str_split(strrev($Rema2[$i]));
		for($o=0;$o<count($Rema3);$o++)
			if($o==0) @$Rema2[$i+$o]=$Rema3[$o];
			else @$Rema2[$i+$o]+=$Rema3[$o];
	}

	//implode $Rema2 so it's a string and reverse it, this is the result
	$Rema2=strrev(implode($Rema2));

	//Just to make sure, we delete the zeros form the beginning of the result and return
	while(strlen($Rema2)>1&&$Rema2{0}=='0') $Rema2=substr($Rema2,1);

	return($Rema2);
}

$A='<bla>';
$B='<bla>';

printf("  Mul(%s,%s); // %s\r\n",$A,$B, Mul($A,$B));
printf("BCMul(%s,%s); // %s\r\n",$A,$B,BCMul($A,$B)); //build-in function

?>

bcpow:

Raises an arbitrary precision number to another

string bcpow( string $left_operand, string $right_operand [, int $scale = 0 ] )

Example:

<?php

echo bcpow('4.2', '3', 2); // 74.08

?>

Note: bcpow can returns less decimals than defined by scale if they are deemed unessecary (trailing 0's)

bcpowmod:

raise an arbitrary precision number to another, reduced by a specific modulus

string bcpowmod ( string $left_operand, string $right_operand, string $modulus [, int $scale = 0 ] )

returns result as string, null if modulus is 0.

Given that this uses %, using - ints might give unexpected results.

bcscale:

bool bcscale ( int $scale )

Returns True on success and False on Failure.

Example:

<?php

//Default scale : 3
bcscale(3);
echo bcdiv('105', '6.55957'); // 16.007

//This is the same without bcscale()
echo bcdiv('105', '6.55957', 3); //16.007

?>

This does NOT round off the calculation, it just cuts off the trailing.

To do a rounding:

<?php
		function bcround($number, $scale=0) {
				$fix = "5";
				for ($i=0;$i<$scale;$i++) $fix="0$fix";
				$number = bcadd($number, "0.$fix", $scale+1);
				return 	  bcdiv($number, "1.0", $scale);
		}
?>

bcsqrt:

Get the square root of an arbitrary precision number.

string bcsqrt ( string $operand [, int $scale = 0 ] )

Returns square root of the operand.

Example:

<?php

echo bcsqrt('2', 3); // 1.414

?>

bcsub:

Subtract one arbitrary precision number from another.

string bcsub ( string $left_operand, string $right_operand [, int $scale = 0 ] )

Example:

<?php

$a = '1.234';
$b = '5';

echo bcsub($a, $b); //-3
echo bcsub($a, $b, 4); // -3.7660

?>

cURL:

To use curl, compile PHP with --with-curl[=DIR], where DIR is the directory containing the lib and
include directories. In the include directory, there should be a folder named curl which should contain
the easy.h and curl.h files.

There should be a file named libcurl.a located in the lib directory.

There may be additional steps for configuring on Windows.

Runtime configurations:

curl.cainfo <string> //A default value for the CURLOPT_CAINFO option. Required to be an absolute path.

Can be found in php.ini

Predefined Constants:

The constants below are defined by this extension, and will only be available when the extension has either
been compiled into PHP or dynamically loaded at runtime.

Descriptions and uses for these constants are described within the curl_setopt(), curl_multi_setopt() and curl_getinfo() documentation.

CURLOPT_AUTOREFERER(int)

CURLOPT_COOKIESESSION(int)

CURLOPT_DNS_USE_GLOBAL_CACHE(int)

CURLOPT_DNS_CACHE_TIMEOUT(int)

CURLOPT_FTP_SSL(int)

CURLFTP_CREATE_DIR(int)

CURLFTP_CREATE_DIR_NONE(int)

CURLFTP_CREATE_DIR_RETRY(int)

CURLFTPSSL_TRY(int)

CURLFTPSSL_ALL(int)

CURLFTPSSL_CONTROL(int)

CURLFTPSSL_NONE(int)

CURLOPT_PRIVATE(int)

CURLOPT_FTPSSLAUTH(int)

CURLOPT_PORT(int)

CURLOPT_FILE(int)

CURLOPT_INFILE(int)

CURLOPT_INFILESIZE(int)

CURLOPT_URL(int)

CURLOPT_PROXY(int)

CURLOPT_VERBOSE(int)

CURLOPT_HEADER(int)

CURLOPT_HTTPHEADER(int)

CURLOPT_NOPROGRESS(int)

CURLOPT_NOBODY(int)

CURLOPT_FAILONERROR(int)

CURLOPT_UPLOAD(int)

CURLOPT_POST(int)

CURLOPT_FTPLISTONLY(int)

CURLOPT_FTPAPPEND(int)

CURLOPT_FTP_CREATE_MISSING_DIRS(int)

CURLOPT_NETRC(int)

CURLOPT_FOLLOWLOCATION(int) //Not available when open_basedir or safe_mode are enabled.

CURLOPT_FTPASCII(int)

CURLOPT_PUT(int)

CURLOPT_MUTE(int)

CURLOPT_USERPWD(int)

CURLOPT_PROXYUSERPWD(int)

CURLOPT_RANGE(int)

CURLOPT_TIMEOUT(int)

CURLOPT_TIMEOUT_MS(int)

CURLOPT_TCP_NODELAY(int)

CURLOPT_POSTFIELDS(int)

CURLOPT_PROGRESSFUNCTION(int)

CURLOPT_REFERER(int)

CURLOPT_USERAGENT(int)

CURLOPT_FTPPORT(int)

CURLOPT_FTP_USE_EPSV(int)

CURLOPT_LOW_SPEED_LIMIT(int)

CURLOPT_LOW_SPEED_TIME(int)

CURLOPT_RESUME_FROM(int)

CURLOPT_COOKIE(int)

CURLOPT_SSLCERT(int)

CURLOPT_SSLCERTPASSWD(int)

CURLOPT_WRITEHEADER(int)

CURLOPT_SSL_VERIFYHOST(int)

CURLOPT_COOKIEFILE(int)

CURLOPT_SSLVERSION(int)

CURL_SSLVERSION_DEFAULT(int)

CURL_SSLVERSION_TLSv1(int)

CURL_SSLVERSION_SSLv2(int)

CURL_SSLVERSION_SSLv3(int)

CURL_SSLVERSION_TLSv1_0(int)

CURL_SSLVERSION_TLSv1_1(int)

CURL_SSLVERSION_TLSv2_2(int)

CURLOPT_TIMECONDITION(int)

CURLOPT_TIMEVALUE(int)

CURLOPT_CUSTOMREQUEST(int)

CURLOPT_STDERR(int)

CURLOPT_TRANSFERTEXT(int)

CURLOPT_RETURNTRANSFER(int)

CURLOPT_QUOTE(int)

CURLOPT_POSTQUOTE(int)

CURLOPT_INTERFACE(int)

CURLOPT_KRB4LEVEL(int)

CURLOPT_HTTPPROXYTUNNEL(int)

CURLOPT_FILETIME(int)

CURLOPT_WRITEFUNCTION(int)

CURLOPT_READFUNCTION(int)

CURLOPT_PASSWDFUNCTION(int)

CURLOPT_HEADERFUNCTION(int)

CURLOPT_MAXREDIRS(int)

CURLOPT_MAXCONNECTS(int)

CURLOPT_CLOSEPOLICY(int)

CURLOPT_FRESH_CONNECT(int)

CURLOPT_FORBID_REUSE(int)

CURLOPT_RANDOM_FILE(int)

CURLOPT_EGDSOCKET(int)

CURLOPT_CONNECTTIMEOUT(int)

CURLOPT_CONNECTTIMEOUT_MS(int)

CURLOPT_SSL_VERIFYPEER(int)

CURLOPT_CAINFO(int)

CURLOPT_CAPATH(int)

CURLOPT_COOKIEJAR(int)

CURLOPT_SSL_CIPHER_LIST(int)

CURLOPT_BINARYTRANSFER(int)

CURLOPT_NOSIGNAL(int)

CURLOPT_PROXYTYPE(int)

CURLOPT_BUFERSIZE(int)

CURLOPT_HTTPGET(int)

CURLOPT_HTTP_VERSION(int)

CURLOPT_SSLKEY(int)

CURLOPT_SSLKEYTYPE(int)

CURLOPT_SSLKEYPASSWD(int)

CURLOPT_SSLENGINE(int)

CURLOPT_SSLENGINE_DEFAULT(int)

CURLOPT_SSLCERTTYPE(int)

CURLOPT_CRLF(int)

CURLOPT_ENCODING(int)

CURLOPT_PROXYPORT(int)

CURLOPT_UNRESTRICTED_AUTH(int)

CURLOPT_FTP_USE_EPRT(int)

CURLOPT_HTTP200ALIASES(int)

CURLOPT_HTTPAUTH(int)

CURLAUTH_BASIC(int)

CURLAUTH_DIGEST(int)

CURLAUTH_GSSNEGOTIATE(int)

CURLAUTH_NEGOTIATE(int)

CURLAUTH_NTLM(int)

CURLAUTH_NTLM_WB(int)

CURLAUTH_ANY(int)

CURLAUTH_ANYSAFE(int)

CURLOPT_PROXYAUTH(int)

CURLOPT_MAX_RECV_SPEED_LARGE(int)

CURLOPT_MAX_SEND_SPEED_LARGE(int)

CURLOPT_HEADEROPT(int)

CURLOPT_PROXYHEADER(int)

CURLCLOSEPOLICY_LEAST_RECENTLY_USED(int) //removed in php 5.6

CURLCLOSEPOLICY_LEAST_TRAFFIC(int) //removed in php 5.6

CURLCLOSEPOLICY_SLOWEST(int) //removed in php 5.6

CURLCLOSEPOLICY_CALLBACK(int) //removed in php 5.6

CURLCLOSEPOLICY_OLDEST(int) //removed in php 5.6

CURLINFO_PRIVATE(int)

CURLINFO_EFFECTIVE_URL(int)

CURLINFO_HTTP_CODE(int)

CURLINFO_HEADER_OUT(int)

CURLINFO_HEADER_SIZE(int)

CURLINFO_REQUEST_SIZE(int)

CURLINFO_TOTAL_TIME(int)

CURLINFO_NAMELOOKUP_TIME(int)

CURLINFO_CONNECT_TIME(int)

CURLINFO_PRETRANSFER_TIME(int)

CURLINFO_SIZE_UPLOAD(int)

CURLINFO_SIZE_DOWNLOAD(int)

CURLINFO_SPEED_DOWNLOAD(int)

CURLINFO_SPEED_UPLOAD(int)

CURLINFO_FILETIME(int)

CURLINFO_SSL_VERIFYRESULT(int)

CURLINFO_CONTENT_LENGTH_DOWNLOAD(int)

CURLINFO_CONTENT_LENGTH_UPLOAD(int)

CURLINFO_STARTTRANSFER_TIME(int)

CURLINFO_CONTENT_TYPE(int)

CURLINFO_REDIRECT_TIME(int)

CURLINFO_REDIRECT_COUNT(int)

CURLINFO_REDIRECT_URL(string)

CURLINFO_PRIMARY_IP(string)

CURLINFO_PRIMARY_PORT(int)

CURLINFO_LOCAL_IP(string)

CURLINFO_LOCAL_PORT(int)

CURL_PUSH_OK(int)

CURL_PUSH_DENY(int)

CURL_REDIR_POST_301(int)

CURL_REDIR_POST_302(int)

CURL_REDIR_POST_303(int)

CURL_REDIR_POST_ALL(int)

CURL_TIMECOND_IFMODSINCE(int)

CURL_TIMECOND_IFUNMODSINCE(int)

CURL_TIMECOND_LASTMOD(int)

CURL_VERSION_IPV6(int)

CURL_VERSION_KERBEROS4(int)

CURL_VERSION_KERBEROS5(int)

CURL_VERSION_HTTP2(int)

CURL_VERSION_PSL(int)

CURL_VERSION_SSL(int)

CURL_VERSION_UNIX_SOCKETS(int)

CURL_VERSION_LIBZ(int)

CURLVERSION_NOW(int)

CURLE_OK(int)

CURLE_UNSUPPORTED_PROTOCOL(int)

CURLE_FAILED_INIT(int)

CURLE_URL_MALFORMAT(int)

CURLE_URL_MALFORMAT_USER(int)

CURLE_COULDNT_RESOLVE_PROXY(int)

CURLE_COULDNT_RESOLVE_HOST(int)

CURSE_COULDNT_CONNECT(int)

CURLE_FTP_WEIRD_SERVER_REPLY(int)

CURLE_FTP_ACCESS_DENIED(int)

CURLE_FTP_USER_PASSWORD_INCORRECT(int)

CURLE_FTP_WEIRD_PASS_REPLY(int)

CURLE_FTP_WEIRD_USER_REPLY(int)

CURLE_FTP_WEIRD_PASV_REPLY(int)

CURLE_FTP_WEIRD_227_FORMAT(int)

CURLE_FTP_CANT_GET_HOST(int)

CURLE_FTP_CANT_RECONNECT(int)

CURLE_FTP_COULDNT_SET_BINARY(int)

CURLE_PARTIAL_FILE(int)

CURLE_FTP_COULDNT_RETR_FILE(int)

CURLE_FTP_WRITE_ERROR(int)

CURLE_FTP_QUOTE_ERROR(int)

CURLE_HTTP_NOT_FOUND(int)

CURLE_WRITE_ERROR(int)

CURLE_MALFORMAT_USER(int)

CURLE_FTP_COULDNT_STOR_FILE(int)

CURLE_READ_ERROR(int)

CURLE_OUT_OF_MEMORY(int)

CURLE_OPERATION_TIMEOUTED(int)

CURLE_FTP_COULDNT_SET_ASCII(int)

CURLE_FTP_PORT_FAILED(int)

CURLE_FTP_COULDNT_USE_REST(int)

CURLE_FTP_COULDNT_GET_SIZE(int)

CURLE_HTTP_RANGE_ERROR(int)

CURLE_HTTP_POST_ERROR(int)

CURLE_SSL_CONNECT_ERROR(int)

CURLE_FTP_BAD_DOWNLOAD_RESUME(int)

CURLE_FILE_COULDNT_READ_FILE(int)

CURLE_LDAP_CANNOT_BIND(int)

CURLE_LDAP_SEARCH_FAILED(int)

CURLE_LIBRARY_NOT_FOUND(int)

CURLE_FUNCTION_NOT_FOUND(int)

CURLE_ABORTED_BY_CALLBACK(int)

CURLE_BAD_FUNCTION_ARGUMENT(int)

CURLE_BAD_CALLING_ORDER(int)

CURLE_HTTP_PORT_FAILED(int)

CURLE_BAD_PASSWORD_ENTERED(int)

CURLE_TOO_MANY_REDIRECTS(int)

CURLE_UNKNOWN_TELNET_OPTION(int)

CURLE_TELNET_OPTION_SYNTAX(int)

CURLE_OBSOLETE(int)

CURLE_SSL_PEER_CERTIFICATE(int)

CURLE_GOT_NOTHING(int)

CURLE_SSL_ENGINE_NOTFOUND(int)

CURLE_SSL_ENGINE_SETFAILED(int)

CURLE_SEND_ERROR(int)

CURLE_RECV_ERROR(int)

CURLE_SHARE_IN_USE(int)

CURLE_SSL_CERTPROBLEM(int)

CURLE_SSL_CIPHER(int)

CURLE_SSL_CACERT(int)

CURLE_BAD_CONTENT_ENCODING(int)

CURLE_LDAP_INVALID_URL(int)

CURLE_FILESIZE_EXCEEDED(int)

CURLE_FTP_SSL_FAILED(int)

CURLE_SSH(int)

CURLFTPAUTH_DEFAULT(int)

CURLFTPAUTH_SSL(int)

CURLFTPAUTH_TLS(int)

CURLPROXY_HTTP(int)

CURLPROXY_HTTP_1_0(int)

CURLPROXY_SOCKS4(int)

CURLPROXY_SOCKS5(int)

CURL_NETRC_OPTIONAL(int)

CURL_NETRC_IGNORED(int)

CURL_NETRC_REQUIRED(int)

CURL_HTTP_VERSION_NONE(int)

CURL_HTTP_VERSION_1_0(int)

CURL_HTTP_VERSION_1_1(int)

CURL_HTTP_VERSION_2(int)

CURL_HTTP_VERSION_2TLS(int)

CURL_HTTP_VERSION_2_PRIOR_KNOWLEDGE(int)

CURLM_CALL_MULTI_PERFORM(int)

CURLM_OK(int)

CURLM_BAD_HANDLE(int)

CURLM_BAD_EASY_HANDLE(int)

CURLM_OUT_OF_MEMORY(int)

CURLM_INTERNAL_ERROR(int)

CURLMSG_DONE(int)

CURLOPT_KEYPASSWD(int)

CURLOPT_SSH_AUTH_TYPES(int)

CURLOPT_SSH_HOST_PUBLIC_KEY_MD5(int)

CURLOPT_SSH_PRIVATE_KEYFILE(int)

CURLOPT_SSH_PUBLIC_KEYFILE(int)

CURLOPT_SSL_OPTIONS(int)

CURLSSLOPT_ALLOW_BEAST(int)

CURLSSLOPT_NO_REVOKE(int) // since php 7.0.7

CURLOPT_USERNAME(int)

CURLOPT_SASL_IR(int) //Since php 7.0.7 v

CURLOPT_DNS_INTERFACE(int)

CURLOPT_DNS_LOCAL_IP4(int)

CURLOPT_DNS_LOCAL_IP6(int)

CURLOPT_XOAUTH2_BEARER(int)

CURLOPT_LOGIN_OPTIONS(int)

CURLOPT_EXPECT_100_TIMEOUT_MS(int)

CURLOPT_SSL_ENABLE_ALPN(int)

CURLOPT_SSL_ENABLE_NPN(int)

CURLOPT_PINNEDPUBLICKEY(int)

CURLOPT_UNIX_SOCKET_PATH(int)

CURLOPT_SSL_VERIFYSTATUS(int)

CURLOPT_PATH_AS_IS(int)

CURLOPT_SSL_FALSESTART(int)

CURLOPT_PIPEWAIT(int)

CURLOPT_PROXY_SERVICE_NAME(int)

CURLOPT_SERVICE_NAME(int)

CURLOPT_DEFAULT_PROTOCOL(int)

CURLOPT_STREAM_WEIGHT(int)

CURLOPT_TFTP_NO_OPTIONS(int)

CURLOPT_CONNECT_TO(int)

CURLOPT_TCP_FASTOPEN(int)

CURLMOPT_PIPELINING(int)

CURLMOPT_MAXCONNECTS(int)

CURLMOPT_CHUNK_LENGTH_PENALTY_SIZE(int)

CURLMOPT_CONTENT_LENGTH_PENALTY_SIZE(int)

CURLMOPT_MAX_HOST_CONNECTIONS(int)

CURLMOPT_MAX_PIPELINE_LENGTH(int)

CURLMOPT_MAX_TOTAL_CONNECTIONS(int)

CURLMOPT_PUSHFUNCTION(int)

CURLSSH_AUTH_AGENT(int)

Section of PHP 7.0.7 ends here, no verisning req begins here

CURLSSH_AUTH_ANY(int)

CURLSSH_AUTH_DEFAULT(int)

CURLSSH_AUTH_HOST(int)

CURLSSH_AUTH_KEYBOARD(int)

CURLSSH_AUTH_NONE(int)

CURLSSH_AUTH_PASSWORD(int)

CURLSSH_AUTH_PUBLICKEY(int)

CURL_WRAPPERS_ENABLED(int) //Defined if PHP configured with --with-curlwrappers. Moved to PECL in PHP 5.5.0

CURLPAUSE_ALL(int)

CURLPAUSE_CONT(int)

CURLPAUSE_RECV(int)

CURLPAUSE_RECV_CONT(int)

CURLPAUSE_SEND(int)

CURLPAUSE_SEND_CONT(int)

CURLPIPE_NOTHING(int) //php 7.0

CURLPIPE_HTTP1(int) //php 7.0

CURLPIPE_MULTIPLEX(int) //php 7.0

CURLPROXY_SOCKS4A(int) 

CURLPROXY_SOCKS5_HOSTNAME(int)

CURLHEADER_SEPARATE(int) //php 7.0

CURLHEADER_UNIFIED(int) //php 7.0

CURLPROTO_SMB(int) //PHP 7.0

CURLPROTO_SMBS(int) //PHP 7.0

Basic Curl Example:

Once you've compiled PHP with cURL support, you can begin using the cURL functions. The basic idea behind teh cURL functions
is that you initalize a cURL session using the curl_init(), then you can set all your options for the transfer via the
curl_setopt().

We execute the session with curl_exec(), and finish the session with curl_close(). An example of fetching an
example.com homepage into a file:

<?php

$ch = curl_init("http://www.example.com/");
$fp = fopen("example_homepage.txt", "w");

curl_setopt($ch, CURLOPT_FILE, $fp);
curl_setopt($ch, CURLOPT_HEADER, 0);

curl_exec($ch);
curl_close($ch);
fclose($fp);
?>


cURL functions:

curl_close: 

void curl_close( resource $ch )

Closes a cURL session and frees all resources. The cURL handle, ch, is also deleted.

Example:

<?php
//Create new cURL resource
$ch = curl_init();

//Set URL and otehr appropiate options
curl_setopt($ch, CURLOPT_URL, "http://www.example.com/");
curl_setopt($ch, CURLOPT_HEADER, 0);

//Grab URL and pass it to the browser
curl_exec($ch);

//Close cURL resource, and free up system resources
curl_close($ch);
?>

curl_copy_handle:

resource curl_copy_handle( resource $ch )

Copies a cURL handle keeping the same preferences.

An example:

<?php
//Create new cURL resource
$ch = curl_init();

//Set URL and other appropiate options
curl_setopt($ch, CURLOPT_URL, 'http://www.example.com/');
curl_setopt($ch, CURLOPT_HEADER, 0);

//Copy the handle
$ch2 = curl_copy_handle($ch);

//Grab URL (http://www.example.com/) and pass it to the browser
curl_exec($ch2);

//Close cURL resources, and free up system resources
curl_close($ch2);
curl_close($ch);
?>

curl_errno:

Returns the last error number.

int curl_errno( resource $ch )

Returns 0 if no error occured, otherwise, last error number.

Example:

<?php
//Create a curl handle to a non-existant site
$ch = curl_init('http://404.php.net/');

//Execute
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
curl_exec($ch);

//Check if any error ocurred
if(curl_errno($ch))
{
	echo 'Curl error: ' . curl_error($ch);
}

//Close handle
curl_close($ch);
?>

Some of the curl error codes:

<?php
$error_codes=array(
[1] => 'CURLE_UNSUPPORTED_PROTOCOL',
[2] => 'CURLE_FAILED_INIT',
[3] => 'CURLE_URL_MALFORMAT',
[4] => 'CURLE_URL_MALFORMAT_USER',
[5] => 'CURLE_COULDNT_RESOLVE_PROXY',
[6] => 'CURLE_COULDNT_RESOLVE_HOST',
[7] => 'CURLE_COULDNT_CONNECT',
[8] => 'CURLE_FTP_WEIRD_SERVER_REPLY',
[9] => 'CURLE_REMOTE_ACCESS_DENIED',
[11] => 'CURLE_FTP_WEIRD_PASS_REPLY',
[13] => 'CURLE_FTP_WEIRD_PASV_REPLY',
[14] => 'CURLE_FTP_WEIRD_227_FORMAT',
[15] => 'CURLE_FTP_CANT_GET_HOST',
[17] => 'CURLE_FTP_COULDNT_SET_TYPE',
[18] => 'CURLE_PARTIAL_FILE',
[19] => 'CURLE_FTP_COULDNT_RETR_FILE',
[21] => 'CURLE_QUOTE_ERROR',
[22] => 'CURLE_HTTP_RETURNED_ERROR',
[23] => 'CURLE_WRITE_ERROR',
[25] => 'CURLE_UPLOAD_FAILED',
[26] => 'CURLE_READ_ERROR',
[27] => 'CURLE_OUT_OF_MEMORY',
[28] => 'CURLE_OPERATION_TIMEDOUT',
[30] => 'CURLE_FTP_PORT_FAILED',
[31] => 'CURLE_FTP_COULDNT_USE_REST',
[33] => 'CURLE_RANGE_ERROR',
[34] => 'CURLE_HTTP_POST_ERROR',
[35] => 'CURLE_SSL_CONNECT_ERROR',
[36] => 'CURLE_BAD_DOWNLOAD_RESUME',
[37] => 'CURLE_FILE_COULDNT_READ_FILE',
[38] => 'CURLE_LDAP_CANNOT_BIND',
[39] => 'CURLE_LDAP_SEARCH_FAILED',
[41] => 'CURLE_FUNCTION_NOT_FOUND',
[42] => 'CURLE_ABORTED_BY_CALLBACK',
[43] => 'CURLE_BAD_FUNCTION_ARGUMENT',
[45] => 'CURLE_INTERFACE_FAILED',
[47] => 'CURLE_TOO_MANY_REDIRECTS',
[48] => 'CURLE_UNKNOWN_TELNET_OPTION',
[49] => 'CURLE_TELNET_OPTION_SYNTAX',
[51] => 'CURLE_PEER_FAILED_VERIFICATION',
[52] => 'CURLE_GOT_NOTHING',
[53] => 'CURLE_SSL_ENGINE_NOTFOUND',
[54] => 'CURLE_SSL_ENGINE_SETFAILED',
[55] => 'CURLE_SEND_ERROR',
[56] => 'CURLE_RECV_ERROR',
[58] => 'CURLE_SSL_CERTPROBLEM',
[59] => 'CURLE_SSL_CIPHER',
[60] => 'CURLE_SSL_CACERT',
[61] => 'CURLE_BAD_CONTENT_ENCODING',
[62] => 'CURLE_LDAP_INVALID_URL',
[63] => 'CURLE_FILESIZE_EXCEEDED',
[64] => 'CURLE_USE_SSL_FAILED',
[65] => 'CURLE_SEND_FAIL_REWIND',
[66] => 'CURLE_SSL_ENGINE_INITFAILED',
[67] => 'CURLE_LOGIN_DENIED',
[68] => 'CURLE_TFTP_NOTFOUND',
[69] => 'CURLE_TFTP_PERM',
[70] => 'CURLE_REMOTE_DISK_FULL',
[71] => 'CURLE_TFTP_ILLEGAL',
[72] => 'CURLE_TFTP_UNKNOWNID',
[73] => 'CURLE_REMOTE_FILE_EXISTS',
[74] => 'CURLE_TFTP_NOSUCHUSER',
[75] => 'CURLE_CONV_FAILED',
[76] => 'CURLE_CONV_REQD',
[77] => 'CURLE_SSL_CACERT_BADFILE',
[78] => 'CURLE_REMOTE_FILE_NOT_FOUND',
[79] => 'CURLE_SSH',
[80] => 'CURLE_SSL_SHUTDOWN_FAILED',
[81] => 'CURLE_AGAIN',
[82] => 'CURLE_SSL_CRL_BADFILE',
[83] => 'CURLE_SSL_ISSUER_ERROR',
[84] => 'CURLE_FTP_PRET_FAILED',
[85] => 'CURLE_RTSP_CSEQ_ERROR',
[86] => 'CURLE_RTSP_SESSION_ERROR',
[87] => 'CURLE_FTP_BAD_FILE_LIST',
[88] => 'CURLE_CHUNK_FAILED');

?>

curl_error:

Return a string containing the last error for teh current session.

Returns the error message last occured, or "" if none occurred.

<?php
//Create a curl handle to a non-existing location
$ch = curl_init('http://404.php.net/');
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);

if(curl_exec($ch) === false)
{
	echo 'Curl error: ' . curl_error($ch);
}
else
{
	echo 'Operation completed without any errors';
}

//Close handle
curl_close($ch);
?>

curl_escape:

URL encodes the given string.

string curl_escape( resource $ch, string $str )

Encodes a given string to escaped variant.

Example:

<?php
//Create a curl handle
$ch = curl_init();

//Escape a string used as a GET parameter
$location = curl_escape($ch, 'Hofbräuhaus / München');
// Result: hofbr%C3%A4uhaus%20%2F%20m%C3%BCnchen

//Same can be done for URLs
$url = "http://example.com/add_location.php?location={$location}";

//Send HTTP request and close the handle
curl_setopt($ch, CURLOPT_URL, $url);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
curl_exec($ch);
curl_close($ch);
?>

curl_exec:

mixed curl_exec ( resource $ch )

Execute the given cURL session.

This function should be called after initializing a cURL session and all the options for the session are set.

Returne true on success, false on failure. However, if the CURLOPT_RETURNTRANSFER option is set, it will return
the result on success, false on failure.

This may return just the bool false, or a value equivilant to False, but not a boolean. Use ===.

Example:

<?php
//Create a new cURL resource
$ch = curl_init();

//Set URL and other appropiate options
curl_setopt($ch, CURLOPT_URL, "http://www.example.com/");
curl_setopt($ch, CURLOPT_HEADER, 0);

//Grab URL and pass it to the browser
curl_exec($ch);

//Close cURL resource, and free up system resources
curl_close($ch);
?>

Another example, but of doing POST and GET queries with cURL:

<?php

/**
* Send a POST request using cURL
* @param string $url to request
* @param array $post values to send
* @param array $options for cURL
* @return string
*/
function curl_post($url, array $post = NULL, array $options = array())
{
	$defaults = array(
		CURLOPT_POST => 1,
		CURLOPT_HEADER => 0,
		CURLOPT_URL => $url,
		CURLOPT_FRESH_CONNECT => 1,
		CURLOPT_RETURNTRASNFER => 1,
		CURLOPT_FORBID_REUSE => 1,
		CURLOPT_TIMEOUT => 4,
		CURLOPT_POSTFIELDS => http_build_query($post)
	);

	$ch = curl_init();
	curl_setopt_array($ch, ($options + $defaults));
	if( ! $result = curl_exec($ch))
	{
		trigger_error(curl_error($ch));
	}
	curl_close($ch);
	return $result;
}

/**
* Send a GET request using cURL
* @param string $url to request
* @param array $get values to send
* @param array $options for cURL
* @return string
*/
function curl_get($url, array $get = NULL, array $options = array())
{
	$defaults = array(
		CURLOPT_URL => $url. (strpos($url, '?') === FALSE ? '?' : ''). http_build_query($get),
		CURLOPT_HEADER => 0,
		CURLOPT_RETURNTRANSFER => TRUE;
		CURLOPT_TIMEOUT => 4
	);

	$ch = curl_init();
	curl_setopt_array($ch, ($options + $defaults));
	if( ! $result = curl_exec($ch))
	{
		trigger_error(curl_error($ch));
	}
	curl_close($ch);
	return $result;
}
?>

curl_file_create:

Creates a CURLFile object, is an alias for CURLFile::__construct()

curl_getinfo:

Gets information regarding a specific transfer.

mixed curl_getinfo ( resource $ch [, int $opt ] )

The opt parameter:

Can be one of the following constants:

CURLINFO_EFFECTIVE_URL - Last effective URL

CURLINFO_HTTP_CODE 	- Last received HTTP code

CURLINFO_FILETIME - Remote time of the retrieved document, with the CURLOPT_FILETIME enabled; if -1
is returned the time of the document is unknown

CURLINFO_TOTAL_TIME - Total transaction time in seconds for last transfer

CURLINFO_NAMELOOKUP_TIME - Time in seconds until name resolving was complete

CURLINFO_CONNECT_TIME - Time in seconds it took to establish the connection.

CURLINFO_PRETRANSFER_TIME - Time in seconds from start until just before file transfer begins

CURLINFO_STARTTRANSFER_TIME - Time in seconds until the first byte is about to be transferred

CURLINFO_REDIRECT_COUNT - Number of redirects, with the CURLOPT_FOLLOWLOCATION option enabled

CURLINFO_REDIRECT_TIME - Time in seconds of all redirection steps before final transaction was started
with the CURLOPT_FOLLOWLOCATION option enabled.

CURLINFO_REDIRECT_URL - With the CURLOPT_FOLLOWLOCATION option disabled: redirect URL found in the last
transaction, that should be requested manually next. 

With the CURLOPT_FOLLOWLOCATION option enabled: this is empty. The redirect URL in this case is available
in CURLINFO_EFFECTIVE_URL.

CURLINFO_PRIMARY_IP - IP address of the most recent connection

CURLINFO_PRIMARY_PORT - Destination port of the most recent connection

CURLINFO_LOCAL_IP - Local (source) IP address of the most recent connection

CURLINFO_LOCAL_PORT - Local (source) port of the most recent connection

CURLINFO_SIZE_UPLOAD - Total number of bytes uploaded

CURLINFO_SIZE_DOWNLOAD - Total number of bytes downloaded

CURLINFO_SPEED_DOWNLOAD - Average download speed

CURLINFO_SPEED_UPLOAD - Average upload speed

CURLINFO_HEADER_SIZE - Total size of all headers received

CURLINFO_HEADER_OUT - The request string sent. For this to work, add the CURLINFO_HEADER_OUT option to the handle
by calling curl_setopt()

CURLINFO_REQUEST_SIZE - Total size of issued requests, currently only for HTTP requests

CURLINFO_SSL_VERIFYRESULT - Result of SSL certification verification requested by setting CURLOPT_SSL_VERIFYPEER

CURLINFO_CONTENT_LENGTH_DOWNLOAD - Content length of download, read from Content-length field.

CURLINFO_CONTENT_LENGTH_UPLOAD - Specified size of upload

CURLINFO_CONTENT_TYPE - Content-Type: of the requested document. NULL indicates server did not send valid Content-type header

CURLINFO_PRIVATE - Private associated with this cURL handle, previously set with the CURLOPT_PRIVATE option of curl_setopt()

CURLINFO_RESPONSE_CODE - The last response code

CURLINFO_HTTP_CONNECTCODE - The CONNECT response code

CURLINFO_HTTPAUTH_AVAIL - Bitmask indicating the authentication method(s) available according to the previous response

CURLINFO_PROXYAUTH_AVAIL - Bitmask indicating the proxy authentication method(s) available according to the previous response

CURLINFO_OS_ERRNO - Errno from a connection failure. The number is OS and system specific

CURLINFO_NUM_CONNECTS - Number of connections curl had to create to acheive the previous transfer

CURLINFO_SSL_ENGINES - OpenSSL crypto-engines supported

CURLINFO_COOKIELIST - All known cookies

CURLINFO_FTP_ENTRY_PATH - Entry path in FTP server

CURLINFO_APPCONNECT_TIME - Time in seconds it took from the start until the SSL/SSH connect/handshake to the remote host
was completed

CURLINFO_CERTINFO - TLS certificate chain

CURLINFO_CONDITION_UNMET - Info on unmet time conditional

CURLINFO_RTSP_CLIENT_CSEQ - Next RTSP client CSeq

CURLINFO_RTSP_CSEQ_RECV - Recently received CSeq

CURLINFO_RTSP_SERVER_CSEQ - Next RTSP server CSeq

CURLINFO_RTSP_SESSION_ID - RTSP session ID

Return Values:

If opt is given, return its value. Otherwise, return an associative array with the following elements (which correspond to opt)
or FALSE on failure:

"url"
"content_Type"
"http_code"
"header_Size"
"request_size"
"filetime"
"ssl_verify_result"
"redirect_count"

"total_time"
"namelookup_time"
"connect_time"
"pretransfer_time"
"size_upload"
"size_download"
"speed_download"

"speed_upload"
"download_content_length"
"upload_content_length"
"starttransfer_time"
"redirect_time"

"certinfo"
"primary_ip"
"primary_port"
"local_ip"
"local_port"
"redirect_url"
"request_header" (This is only set if the CURLINFO_HEADER_OUT is set by a previous call to curl_setopt())

Note that the private data is not included in the associative array and must be retrieved individually with the CURLINFO_PRIVATE Option.

Example #1: curl_getinfo() example:

<?php
//Create a cURL handle
$ch = curl_init('http://www.example.com/');

//Execute
curl_exec($ch);

//Check if any error occurred
if (!curl_errno($ch)) {
	$info = curl_getinfo($ch);
	echo 'Took '. $info['total_time']. ' seconds to send a request to '. $info['url']. "\n";
}

//Close handle
curl_close($ch);
?>

Example #2 curl_getinfo() example with opt parameter:

<?php
//Create a cURL handle
$ch = curl_init('http://www.example.com/');

//Execute
curl_exec($ch);

//Check HTTP status code
if (!curl_errno($ch)) {
	switch ($http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE)) {
		case 200: #Ok
			break;
		default:
			echo 'Unexpected HTTP code: '. $http_code. "\n"; //Could be , instea dof . , uncertain
	}
}

//Close handle
curl_close($ch);
?>

curl_init:

Initializes a cURL session.

resource curl_init([ string $url = NULL ] )

Initialies a new session and returns a cURL handle for use with curl_setopt(), curl_exec(), and curl_close() function.

Returns a cURL handle on success, FALSE on errors.

Example #1 initializing a new cURL session and fetching a web page:

<?php
//Create a new cURL resource
$ch = curl_init();

//Set URL and other appropiate options
curl_setopt($ch, CURLOPT_URL, "http://www.example.com/");
curl_setopt($ch, CURLOPT_HEADER, 0);

//grab URL nad pass it to the browser
curl_exec($ch);

//Close cURL resource, and free up resources
curl_close($ch);
?>

Spaces in the url needs to be replaced with %20, spaces in query need to be replaced with +

curl_multi_add_handle:

Add a normal cURL handle to a cURL multi handle

int curl_multi_add_handle ( resource $mh , resource $ch )

Adds the cURL handle t o the multi handle

Returns 0 on success, or one of the CURLM_XXX error codes on failure.

Example #1 curl_multi_add_handle() example:

This example will add two cURL handles, add them to a multi handle, and process them asynch.

<?php
//Create both cURL resources
$ch1 = curl_init();
$ch2 = curl_init();

//set URL and other appropiate options
curl_setopt($ch1, CURLOPT_URL, "http://www.example.com/");
curl_setopt($ch1, CURLOPT_HEADER, 0);
curl_setopt($ch2, CURLOPT_URL, "http://www.php.net/");
curl_setopt($ch2, CURLOPT_HEADER, 0);

//Create the multiple cURL handle
$mh = curl_multi_init();

//Add the two handles
curl_multi_add_handle($mh, $ch1);
curl_multi_add_handle($mh, $ch2);

$running=null;
//Execute the handles
do {
	curl_multi_exec($mh, $running);
} while($running > 0);

//Close all the handles
curl_multi_remove_handle($mh, $ch1);
curl_multi_remove_handle($mh, $ch2);
curl_multi_close($mh);
?>

Note: Do while loop is faulty, use example on curl_multi_exec() to see example of blocking while doing downloads not wasting cycles

curl_multi_close:

closes a set of cURL handles.

void curl_multi_close( resource $mh )

Example:

<?php
//creat both cURL resources
$ch1 = curl_init();
$ch2 = curl_init();

//Set URL and other appropiate options
curl_setopt($ch1, CURLOPT_URL, "http://www.example.com/");
curl_setopt($ch1, CURLOPT_HEADER, 0);
curl_setopt($ch2, CURLOPT_URL, "http://www.php.net/");
curl_setopt($ch2, CURLOPT_HEADER, 0);

//Create the multiple curl handle
$mh = curl_multi_init();

//Add the two handles
curl_multi_add_handle($mh, $ch1);
curl_multi_add_handle($mh, $ch2);

$running=null;
//Execute the handles
do {
	curl_multi_exec($mh,$running);
} while ($running > 0);

//Close the handles
curl_multi_remove_handle($mh, $ch1);
curl_close($ch1);
curl_multi_remove_handle($mh, $ch2);
curl_close($ch2);
curl_multi_close($mh);

?>

curl_multi_exec:

Run the sub-connections of the current cURL handle

int curl_multi_exec ( resource $mh, int &$still_running )

Processes each of the handles in the stack. THis method can be called whether or not a handle
needs to read or write data.

The return value is a cURL code defined in predefiend constants. THis only returns errors regarding the whole stack.
Even if individual ones fail, this can still return CURLM_OK.

An example, creatwe two cURL handles and process them asynch from a multi-handle:

<?php
//Create both cURL rresources
$ch1 = curl_init();
$ch2 = curl_init();

//set URL and other appropiate options
curl_setopt($ch1, CURLOPT_URL, "http://lxr.php.net/");
curl_setopt($ch1, CURLOPT_HEADER, 0);
curl_setopt($ch2, CURLOPT_URL, "Http://www.php.net/");
curl_setopt($ch2, CURLOPT_HEADER, 0);

//Create the multiple curl handle
$mh = curl_multi_init();

//Add the two handles
curl_multi_add_handle($mh, $ch1);
curl_multi_add_handle($mh, $ch2);

$active = null;
//Executes the handles
do {
	$mrc = crl_multi_exec($mh, $active);
} while ($mrc == CURLM_CALL_MULTI_PERFORM);

while ($active && $mrc == CURLM_OK) {
	if (curl_multi_select($mh) != -1) {
		do {
			$mrc = curl_multi_exec($mh, $active);
		} while ($mrc == CURLM_CALL_MULTI_PERFORM);
	}
}

//Close the handles
curl_multi_remove_handle($mh, $ch1);
curl_multi_remove_handle($mh, $ch2);
curl_multi_close($mh);

?>

//ASsumedly, a simple do while loop can resolve the 100% CPU usage issue, but i am uncertain of if it does not lead to infinite loops:

<?php

do {
	curl_multi_exec($mh, $running);
	curl_multi_select($mh);
} while ($running > 0);

?>

curl_multi_getcontent:

Return the content of a cURL handle if CURLOPT_RETURNTRANSFER is set.

string curl_multi_getcontent ( resource $ch )

if CURLOPT_RETURNTRANSFER is an option that is set for a specific handle, then this function will return the
content of that cURL handle in the form of a string.

An example of usage:

<?
	$aURLs = array("http://www.php.net", "http://www.w3schools.com"); //array of URLs
	$mh = curl_multi_init(); //init the curl multi

	$aCurlHandles = array(); //create an array for the individual curl handles

	foreach ($aURLs as $id=>$url) { //add the handles for each url
		$ch = curl_setup($url,$socks5_proxy,$usernamepass);
		$ch = curl_init(); //init curl, and then setup your options

		curl_setopt($ch, CURLOPT_URL, $url);
		curl_setopt($ch, CURLOPT_RETURNTRANSFER,1); //returns the result - very important
		curl_setopt($ch, CURLOPT_HEADER, 0); //No headers in the output

		$aCurlHandles[$url] = $ch;
		curl_multi_add_handle($mh,$ch);
	}

	$active = null;
	//Execute the handles
	do {
		$mrc = curl_multi_exec($mh, $active);
	}
	while ($mrc == CURL_CALL_MULTI_PERFORM);

	while ($active && $mrc == CURLM_OK) {
		if (curl_multi_select($mh) != -1) {
			do {
				$mrc = curl_multi_exec($mh, $active);
			} while ($mrc == CURLM_CALL_MULTI_PERFORM);
		}
	}

	/* This is the relevant bit */
	//Iterate through the handlesa nd get your content
	foreach ($aCurlHandles as $url=>$ch) {
		$html = curl_multi_getcontent($ch); //get the content
		//Do what you want with the html

		curl_multi_remove_handle($mh, $ch); //Remove the handle (assuming you are done with it)
	}
	/* End of relevant bit */

	curl_multi_close($mh); //Close the curl multi handler
?>

curl_multi_info_read:

Get information about the current transfers.

array curl_multi_info_read( resource $mh [, int &$msgs_in_queue = NULL ] )

Ask the multi handle if there are any messages or information from the individual transfers. Messages
may include information such as an error code from the transfer or just the fact that a transfer is completed.

Repeated calls to this function will return a new result each time, until a FALSE is returned as a signal that
there is no more to get at this point. The integer pointed to with msgs in queue, contains the number of messages
after this function was called.

The data the returned resource points to, will not survive calling curl_multi_remove_handle().

On sucess, returns an associative array for the message, FALSE on failure.

Contents of the returned array:

msg 	The CURLMSG_DONE constant. Other return values are currently not available

result 	One of the CURLE_* constants. If everything is OK, the CURLE_OK will be the result

handle 	Resource of type curle indicates the handle which it concerns.

Example:

<?php

$urls = array(
	"http://www.cnn.com/",
	"http://www.bbc.co.uk/",
	"http://www.yahoo.com/"
);

$mh = curl_multi_init();

foreach ($urls as $i => $url) {
	$conn[$i] = curl_init($url);
	curl_setopt($conn[$i], CURLOPT_RETURNTRANSFER, 1);
	curl_multi_add_handle($mh, $conn[$i]);
}

do {
	$status = curl_multi_exec($mh, $active);
	$info = curl_multi_info_read($mh);
	if (false !== $info) {
		var_dump($info);
	}
} while ($status === CURLM_CALL_MULTI_PERFORM || $active);

foreach ($urls as $i => $url) {
	$res[$i] = curl_multi_getcontent($conn[$i]);
	curl_close($conn[$i]);
}

var_dump(curl_multi_info_read($mh));

?>

The above will output something akin to:

array(3) {
	["msg"]=>
	int(1)
	["result"]=>
	int(0)
	["handle"]=>
	resource(5) of type (curl)
}
array(3) {
	["msg"]=>
	int(1)
	["result"]=>
	int(0)
	["handle"]=>
	resource(7) of type (curl)
}
array(3) {
	["msg"]=>
	int(1)
	["result"]=>
	int(0)
	["handle"]=>
	resource(6) of type (curl)
}
bool(false)

curl_multi_init:

Returns a new cURL multi handle

resource curl_multi_init( void )

allows processing of multiple cURL handles asynch.

Returns a cURL multi handle resource on sucess, FALSE on failure.

Example:

<?php
//Create both cURL resources
$ch1 = curl_init();
$ch2 = curl_init();

//Set URL and other appropiate options
curl_setopt($ch1, CURLOPT_URL, "http://lxr.php.net/");
curl_setopt($ch1, CURLOPT_HEADER, 0);
curl_setopt($ch2, CURLOPT_URL, "http://www.php.net/");
curl_setopt($ch2, CURLOPT_HEADER, 0);

//Create the multiple cURL handle
$mh = curl_multi_init();

//Add the two handles
curl_multi_add_handle($mh, $ch1);
curl_multi_add_handle($mh, $ch2);

$active = null;
//Execute the handles
do {
	$mrc = curl_multi_exec($mh, $active);
} while ($mrc == CURLM_CALL_MULTI_PERFORM);

while ($active && $mrc == CURLM_OK) {
	if (curl_multi_select($mh) != -1) {
		do {
			$mrc = curl_multi_exec($mh, $active);
		} while ($mrc == CURLM_CALL_MULTI_PERFORM);
	}
}

//Close the handles
curl_multi_remove_handle($mh, $ch1);
curl_multi_remove_handle($mh, $ch2);
curl_multi_close($mh);

?>

For this to work on windows for php 5.3, if curl_multi_Select returns -1 causing a timeout, we just add our own sleep:

<?php
while ($active && $mrc == $CURLM_OK) {
	if (curl_multi_select($mh) == -1) {
		usleep(100);
	}
	do {
		$mrc = curl_multi_exec($mh, $active);
	} while ($mrc == CURLM_CALL_MULTI_PERFORM);
}
?>

curl_multi_remove_handle:

Remove a multi handle from a set of cURL handles.

int curl_multi_remove_handle ( resource $mh , resource $ch )

Removes a given CH handle from the given mh. When the ch handle has been removed, it is again perfectly legal to
run curl_exec() on this handle. Removing the ch handle while being used, will effectively halt the transfer in progress
involving that handle.

Returns 0 on sucess, or one of the CURLM_XXX error codes on failure.

curl_multi_select:

Wait for activity on any curl_multi_connection

int curl_multi_select ( resource $mh [, float $timeout = 1.0 ] )

Blocks until there is activity on any of the curl multi connections

On success, returns the number of descriptors contained in the descriptor sets. This may be 0 if there was no
activity on any of the descriptors. On failure, this action returns -1 on a select failure (from the underlying select system call).

multi_Select still returns -1, thus, we should put in a wait (can be -1):

<?php

		//While we're still active, execute curl
		$active = null;
		do {
			$mrc = curl_multi_exec($multi, $active);
		} while ($mrc == CURLM_CALL_MULTI_PERFORM);

		while ($active && $mrc == CURML_OK) {
			//Wait for activity on any curl-connection
			if (curl_multi_select($multi) == -1) {
				usleep(1);
			}

			//Continue to exec until curl is ready to give us more data
			do{
				$mrc = curl_multi_exec($multi, $active);
			} while ($mrc == CURLM_CALL_MULTI_PERFORM);
		}
?>

curl_multi_setopt:

Set an option for the cURL multi handle

bool curl_multi_setopt ( resource $mh, int $option, mixed $value )

Option: One of the CURLMOPT_* constants

Value: The value to be set to an option. value should be an int for the following values of the option param:

CURLMOPT_PIPELINING: 	Pass 1 to Enable or 0 to disable. Enabling pipelining on a multi handle will make it attempt
						to perform HTTP Pipelining as far as possible for transfers using this handle.

						This means that if you add a second request that can use an already existing connection,
						the second request will be "piped" on the same connection. As of cURL 7.43.0 you can
						also pass 2 to try to multiplex the new transfer over an existing HTTP/2 connection if possible.
						Instead of int literals, you can use the CURLPIPE_* constants if available.

CURLMOPT_MAXCONNECTS 	Pass a number that will be used as the maximum amount of simultaneously open connections
						that libcurl may cache. By default the size will be enlarged to fit four times the number
						of handles via curl_multi_add_handle(). When the cache is full, curl closes the oldest one
						in the cache to prevent the number of open connections from increasing.

CURLMOPT_CHUNK_LENGTH_PENALTY_SIZE Pass a number that specifies the chunk length threshhold for pipelining in bytes

CURLMOPT_CONTENT_LENGTH_PENALTY_SIZE Pass a number that specifies the size threshhold for pipelining penalty in bytes

CURLMOPT_MAX_HOST_CONNECTIONS Pass a number that specifies the maximum number of connections to a single host.

CURLMOPT_MAX_PIPELINE_LENGTH  Pass a number that specifies the maximum number of requests in a pipeline

CURLMOPT_MAX_TOTAL_CONNECTIONS Pass a number that specifies the maximum number of simultaneous open connections

CURLMOPT_PUSHFUNCTION 	Pass a callable that will be registered to handle server pushes and should have the following
						signature:

						int pushfunction ( resource $parent_ch, resource $pushed_cd, array $headers )

						parent_ch : The parent cURL handle (the request the client made)

						pushed_ch : a new cURL handle for the pushed request

						headers : The push promise headers

						The push function is supposed to return either CURL_PUSH_OK if it can handle the push,
						or CURL_PUSH_DENY to reject it.

Returns ture on success, FALSE on failure.

curl_multi_strerror:

Return string describing error code

string curl_multi_strerror ( int $errornum )

Returns a text error message describing the given CURLM error code.

Returns error string for valid error code, NULL otehrwise.

Example:

<?php
//Create cURL handles
$ch1 = curl_init("http://example.com/");
$ch2 = curl_init("http://php.net/");

//Create a cURL multi handle
$mh = curl_multi_init();

//Add the handles to the multi handle
curl_multi_add_handle($mh, $ch1);
curl_multi_add_handle($mh, $ch2);

//Execute the multi handle
do {
	$status = curl_multi_exec($mh, $active);
	//Check for errors
	if($status > 0) {
		//Display error messages
		echo "ERROR!\n " . curl_multi_strerror($status);
	}
} while ($status === CURLM_CALL_MULTI_PERFORM || $active);
?>

curl_pause:

Pause and Unpause a connection

int curl_pause( resource $ch, int $bitmask )

bitmask: One of CURLPAUSE_* constants.

Returns an error code (CURLE_OK if no error code)

A connection can be paused by using this function or by letting the read or the write callbacks return the proper
magic return code (CURL_READFUNC_PAUSE and CURL_WRITEFUNC_PAUSE). 

A write callback that returns pause signals to the library that it could not take care of any data at all,
 and that data will then be delivered again to the callback when the writing is later unpaused.

While it may be tempting, you cannot call this function from another thread.
To unpause, you may for example call it from the progress callback (CURLOPT_PROGRESSFUNCTION),
which gets called at least once per second, even if the connection is paused.

When this function is called to unpause reading, the chance is high that you will get your write
callback called before this function returns.

The bitmask argument it set to bits that sets teh new state of the connection. The following can be used:

CURLPAUSE_RECV - Pause receiving data. There will be no data received on this connection until this function
is called again without this bit set. Thus, the write callback (CURLOPT_WRITEFUNCTION) won't be called.

CURLPAUSE_SEND - Pause sending data. There will be no data sent on this connection until this function
is called again without this bit set. Thus, the read callback (CURLOPT_READFUNCTION) won't be called.

CURLPAUSE_ALL - Convenience define that pauses both directions

CURLPAUSE_CONT - Convenience define that unpauses both directions.

The pausing of transfers does not work with protocols that works without network connectivity, like FILE://
Trying to pause such a one, will cause problems, or just an error in best case.

When pausing a read by returning the magic return code from a write callback, the read data is already in
libcrurls internal buffers so itll have to keep it in an allocated buffer until the reading is again unpaused
using this function.

If the downloaded data is compressed data and is asked to get uncompressed automatically on download,
libcurl will continue to uncompress the entire downloaded chunk and it will cache the data uncompressed.

This has the side-effect that if you download something that is compressed a lot, it can result in
a very large data amount needing to be allocated to save the data during the pause.

Thus, do not pause reading if we allow libcurl to uncompress data automatically.

curl_reset:

Reset all options of a libcurl session handle

void curl_reset ( resource $ch )

This function re-initializes all options set on given cURL handle to the default values.

Example:

<?php
//Create a curl handle
$ch = curl_init();

//set CURL_OPT_USERAGENT option
curl_setopt($ch, CURLOPT_USERAGENT, "My test user-agent");

//Reset all previously set options
curl_reset($ch);

//Send HTTP request
curl_setopt($ch, CURLOPT_URL, 'http://example.com/');
curl_exec($ch); //The previously set user-agent will eb nto sent, it has been reset by curl_reset

//Close the handle
curl_close($ch);
?>

If we are annoyed with having to do this manually, we can just encapsulate the cURL handling into a class:

<?php
class cUrlicue {
	
	protected $curl;

	/* Create the cURL handle */

	function __construct() {
		$this->curl = curl_init();
		$this->curl_init_opts();
		curl_exec($this->curl);
	}

	/* Reload your base options */

	function curl_init_opts() {
		$opts[CURLOPT_PROTOCOLS] 		= CURLPROTO_FTP;
		$opts[CURLOPT_RETURNTRANSFER] 	= true;
		$opts[CURLOPT_USERPWD] 			= 'user:pass';
		//...
		curl_setopt_array($this->curl, $opts);
	}

	/* Use when making a new cURL call */

	function curl_exec($opts) {
		curl_reset($this->curl); //Clears all old options
		$this->curl_init_opts(); //Sets base options again
		curl_setopt_array($this->curl, $opts); //sets your new options
		return curl_exec($this->curl);
	}

	/* Your whatever curl method, put whatever oyu need here */

	function curl_get_whatever() {
		$opts[CURLOPT_URL] = 'ftp://.../whatever';
		//...
		$result = $this->curl_exec($opts);
		//...

	}
}

?>

The above structure just rebuilds the curl with options and allows us to use it with the given structure of what we want, without
having to manually reset every time.

curl_setopt_array:

Set multiple options for a cURL transfer

bool curl_setop_array( resource $ch , arary $options )

Returns true if all options were successfully set. If an option could not be set, FALSE Is returned, ignoring any future
options in the options array.

Example of fetching a web page:

<?php
//Create a new cURL resource
$ch = curl_init();

//Set URL and other appropiate options
$options = array(CURLOPT_URL => 'http://www.example.com/',
				 CURLOPT_HEADER => false
				 );

curl_setopt_array($ch, $options);

//Grab URL and pass it to the browser
curl_exec($ch);

//close cURL resource, and free up system resources
curl_close($ch);
?>

If we wish to read SSL page content from https with curl, we could use something akin to:

<?php

function get_web_page( $url, $curl_data )
{
	$options = array(
		CURLOPT_RETURNTRANSFER => true, 			//Return web page
		CURLOPT_HEADER 		   => false, 			//doint return headers
		CURLOPT_FOLLOWLOCATION => true, 			//Follow redirects
		CURLOPT_ENCODING 	   => "", 				//handle all encodings
		CURLOPT_USERAGENT 	   => "spider", 		//user
		CURLOPT_AUTOREFERER    => true, 			//Set referer on redirect
		CURLOPT_CONNECTTIMEOUT => 120, 				//Timeout on connect
		CURLOPT_TIMEOUT 	   => 120, 				//Timeout on response
		CURLOPT_MAXREDIRS 	   => 10, 				//stop after 10 redirects
		CURLOPT_POST 		   => 1, 				//i am sending data with post
		CURLOPT_POSTFIELDS 	   => $curl_data, 		//This are my post vars
		CURLOPT_SSL_VERIFYHOST => 0, 				//Don't verify SSL
		CURLOPT_SSL_VERIFYPEER => true, 			//Prevent man in teh middle attacks
		CURLOPT_VERBOSE 	   => 1, 				// Run verbose
	);

	$ch 		= curl_init($url);
	curl_setopt_array($ch,$options);
	$content 	= curl_exec($ch);
	$err 		= curl_errno($ch);
	$errmsg 	= curl_error($ch);
	$header 	= curl_getinfo($ch);
	curl_close($ch);

	// $header['errno'] 	= $err;
	// $header['errmsg'] 	= $errmsg;
	// $header['content'] 	= $content;

	return $header;
}

$curl_data = "var1=60&var2=test";
$url = "https://www.example.com";
$response = get_web_page($url,$curl_data);

print '<pre>';
print_r($response);

?>

To merge options , we have to cast our options to an array and add it with +, instead of array_merge() //array merge causes all keys to be running numbers.

<?php
function post($url, $options = array) {
	$ch = curl_init();
	curl_setopt_array($ch, array(
		CURLOPT_HEADER => 1,
		CURLOPT_RETURNTRANSFER => 1,
		.....
	) + (array) $options);
}
?>


curl_setopt:

Sets an option for a cURL transfer.

bool curl_setopt ( resource $ch , int $option , mixed $value )

option: The CURLOPT_XXX option to set.

value: The value to be set on option.

Value should be a bool for one of the following option params:

CURLOPT_AUTOREFERER 		True to automatically set the Referer: field in requests where it follows a Location: redirect

CURLOPT_BINARYTRANSFER 		True to return the raw output when CURLOPT_RETURNTRANSFER is used. 

CURLOPT_COOKIESESSION 		True to mark this as a new cookie "session". It will force libcurl to ignore all cookies it is about
							to load that are "session cookies" from the previous session. By default, libcurl always stores and loads
							all cookies, independant if they are session cookies or not.

							Session cookies are cookies without expiry date and they are meant to be alive and existing for this 
							"session" only.

CURLOPT_CERTINFO 			True to output SSL certification information to STDERR on secure transfers. Requires CURLOPT_VERBOSE to have an effect.

CURLOPT_CONNECT_ONLY 		True tells the library to perform all the required proxy authentication and connection setup, but no data transfer.
							This is implemented for HTTP, SMTP and POP3.

CURLOPT_CRLF 				True to convert Unix newlines to CRLF newlines on transfers

CURLOPT_DNS_USE_GLOBAL_CACHE True to use the global DNS cache. Not thread safe and is on by default.

CURLOPT_FAILONERROR 		True to fail verbosely if the HTTP code returned is greater than or equal to 400.
							Default is to ignore code and return page normally.

CURLOPT_SSL_FALSESTART 		True to enable TLS false start.

CURLOPT_FILETIME 			True to attempt to retrieve the modification date of the remote document.
							This value can be retrieved using the CURLINFO_FILETIME option with curl_getinfo().

CURLOPT_FOLLOWLOCATION 		True to follow any "Location: " header that the server sends as part of the HTTP header
							(note this is recursive, PHP will follow as many "Location: " headers that present,
							unless CURLOPT_MAXREDIRS is set).

CURLOPT_FORBID_REUSE 		True to force the connection to explicitly close when it has finished processing and 
							not be pooled for reuse.

CURLOPT_FRESH_CONNECT 		True to force the use of a new connection instead of a cached one.

CURLOPT_FTP_USE_EPRT 		True to use EPRT (and LPRT) when doing active FTP downloads. Use False to disable EPRT and LPRT
							and use port only.

CURLOPT_FTP_USE_EPSV 		True to first try an EPSV command for FTP transfers before reverting back to PASV. Set to FALSE to disable
							EPSV.

CURLOPT_FTP_CREATE_MISSING_DIRS 	True to create missing dirs when an FTP operation encounters a path that currently does not exist.

CURLOPT_FTPAPPEND 			True to append to the remote file instead of overwriting it

CURLOPT_TCP_NODELAY 		True to disable TCP's Nagle algo, which tries to minimize the number of small packets on the network

CURLOPT_FTPASCII 			An alias of CURLOPT_TRANSFERTEXT. Use that instead.

CURLOPT_FTPLISTONLY 		TRUE to only list the names of an FTP directory

CURLOPT_HEADER 				True to include the header in the output

CURLINFO_HEADER_OUT 		True to track the handle's request string

CURLOPT_HTTPGET 			True to reset the HTTP request method to GET. Since GET is the default, this is only needed if the method has been changed.

CURLOPT_HTTPPROXYTUNNEL 	True to tunnel through a given HTTP proxy

CURLOPT_MUTE 				True to be completely silent with regards to the cURL functions.  //REmoved, use CURLOPT_RETURNTRANSFER instead

CURLOPT_NETRC 				True to scan the /.netrc file to find a username and password for the remote site that a connection is being established with.

CURLOPT_NOBODY 				True to exclude the body from the output. Request method is then set to HEAD. Changing this to false 
							does not change it to GET.

CURLOPT_NOPROGRESS 			TRUE to disable the progress meter for cURL transfers.
							
							PHP automatically sets this option to true, this should only be changed for debugging.

CURLOPT_NOSIGNAL 			True to ignore any cURL function that causes a signal to be sent to the PHP process.
							THis is turned on by default in multi-threaded SAPIs so timeout options can still be used.

CURLOPT_PATH_AS_IS 			True to not handle dot dot sequences

CURLOPT_PIPEWAIT 			True to wait for pipelining/multiplexing

CURLOPT_POST 				True to do a regular HTTP POST. This POST is the normal application/x-www-form-urlencoded kind,
							most commonly used by HTML forms.

CURLOPT_PUT 				True to HTTP PUT a file. The file to PUT must be set with CURLOPT_INFILE and CURLOPT_INFILESIZE.

CURLOPT_RETURNTRANSFER 		TRUE to return the transfer as a string of the return value of curl_exec() instead of outputting it directly.

CURLOPT_SAFE_UPLOAD 		True to disable support for the @ prefix for uploading files in CURLOPT_POSTFIELDS, which means that values
							starting with @ can be safely passed as fields. CURLFile may be used for uploads instead. //REmove in php 7.0
							//Is default to true in 5.6

CURLOPT_SASL_IR 			True to enable sending the initial response in the first packet.

CURLOPT_SSL_ENABLE_ALPN 	FALSE to disable ALPN in the SSL handshake (if the SSL backend libcurl is built to use supports it)
							which can be used to negotaite HTTP2.

CURLOPT_SSL_ENABLE_NPN 		FALSE to disable NPN in the SSL handshake (if the SSL backend libcurl is built to use supports it)
							which can be used to negotiate HTTP2.

CURLOPT_SSL_VERIFYPEER 		FALSE to stop cURL from verifying the peer's certificate. Alternate certficaites to verify against
							can be specified with the CURLOPT_CAINFO option or a certificate directory can be specified
							with the CURLOPT_CAPATH option.

CURLOPT_SSL_VERIFYSTATUS 	True to verify the certificate's status. 

CURLOPT_TCP_FASTOPEN 		True to enable TCP Fast Open.

CURLOPT_TFTP_NO_OPTIONS 	True to not send TFTP options requests.

CURLOPT_TRANSFERTEXT 		True to use ASCII mode for FTP transfers. For LDAP,
							it retrieves data in plain text instead of HTML. On Windows
							OS, it will not set STDOUT to binary mode.

CURLOPT_UNRESTRICTED_AUTH 	True to keep sending teh username and PW when following locations 
							(using CURLOPT_FOLLOWLOCATION), even when the hostname has changed.

CURLOPT_UPLOAD 				True to prepare for an upload

CURLOPT_VERBOSE 			True to output verbose information. Writes output to STDERR,
							or the file specified using CURLOPT_STDERR.

Value should be an integer for the following values of the option param:

CURLOPT_BUFFERSIZE 			The size of the buffer to use for each read. There is no guarantee this request will
							be fullfilled, however.

CURLOPT_CONNECTTIMEOUT 		The number of seconds to wait while trying to connect. Use 0 to wait indefinitly.

CURLOPT_CONNECTTIMEOUT_MS 	The number of milliseconds to wait while trying to connect. use 0 to wait indefinitly.
							If libcurl is built to use the standard system name resolver, that portion of the connect
							will still use full-second resolution, where minimum is 1 sec.

CURLOPT_DNS_CACHE_TIMEOUT 	The number of seconds to keep DNS entries in memory. This option is set to 120 (2 mins by default)

CURLOPT_EXPECT_100_TIMEOUT_MS The timeout for Expect: 100-continue responses in MS. Defaults to 1k.

CURLOPT_FTPSSLAUTH 			The FTP authentication method (when is activated): CURLFTPAUTH_SSL(try SSL first),
							CURLFTPAUTH_TLS (try TLS first), or CURLFTPAUTH_DEFAULT (let cURL decide).

CURLOPT_HEADEROPT 			How to deal with headers. One of the following constants: 

							CURLHEADER_UNIFIED: The headers specified in CURLOPT_HTTPHEADER will be used in
							requests both to servers and proxies. With this option enabled, CURLOPT_PROXYHEADER
							will not have any effect. 

							CURLHEADER_SEPARATE: Makes CURLOPT_HTTPHEADER headers only get sent to a server and 
							not to a proxy. Proxy headers must be set with CURLOPT_PROXYHEADER to get used.

							Note that if a non-CONNECT request is sent to a proxy, libcurl will send both server
							headers and proxy headers. When doing CONNECT, libcurl will send CURLOPT_PROXYHEADER
							headers only to the proxy and then CURLOPT_HTTPHEADER headers only to the server.

							Defaults to CURLHEADER_SEPARATE as of cURL 7.42.1, and CURLHEADER_UNIFIED before.

CURLOPT_HTTP_VERSION 		CURL_HTTP_VERSION_NONE (default, lets CURL decide which version to use),
							CURL_HTTP_VERSION_1_0 (forces HTTP/1.0) or CURL_HTTP_VERSION_1_1 (forces HTTP/1.1)

CURLOPT_HTTPAUTH 			The HTTP authentication method(s) to use. The options are: CURLAUTH_BASIC,
							CURLAUTH_DIGEST, CURLAUTH_GSSNEGOTIATE, CURLAUTH_NTLM, CURLAUTH_ANY and 
							CURLAUTH_ANYSAFE.

							The bitwise | (or) can be used to combine more than one method. If this is done,
							cURL will poll the server to see what methods it supports and pick the besto ne.

							CURLAUTH_ANY is an alias for CURLAUTH_BASIC | CURLAUTH_DIGEST | CURLAUTH_GSSNEGOTIATE
							| CURLAUTH_NTLM

							CURLAUTH_ANYSAFE is an lias for CURLAUTH_DIGEST | CURLAUTH_GSSNEGOTIATE | CURLAUTH_NTLM.

CURLOPT_INFILESIZE 			The expected size, in bytes, of the file when uploading a file to a remote site.
							note that using this option will not stop libcurl from sending more data, as exactly
							what is sent depends on CURLOPT_READFUNCTION.

CURLOPT_LOW_SPEED_LIMIT 	The transfer speed, in bytes per second, that the transfer should be below during
							the count of CURLOPT_LOW_SPEED_TIME seconds before PHP considers the transfer too slow
							and aborts.

CURLOPT_LOW_SPEED_TIME 		The number of seconds the transfer speed should be below CURLOPT_LOW_SPEED_LIMIT before PHP
							considers the the transfer too slow and aborts.

CURLOPT_MAXCONNECTS 		The maximum amount of persistent connections that are allowed. When the limit is reached,
							CURLOPT_CLOSEPOLICY is used to determine which connection to close.

CURLOPT_MAXREDIRS 			The maximum amount of HTTP redirections to follow. Use this option alongside CURLOPT_FOLLOWLOCATION.

CURLOPT_PORT 				An alternative port number to connect to

CURLOPT_POSTREDIR 			A bitmask of 1 (301 moved permnently), 2 (302 found), and 4 (303 See Other) if the 
							HTTP POST method should be maintained when CURLOPT_FOLLOWLOCATION is set and a 
							specific type of redirect occurs.

CURLOPT_PROTOCOLS 			Bitmask of CURLPROTO_* values. If used, this bitmask limits what protocols libcurl
							may use in the transfer. This allows you to have a libcurl built to support a wide
							range of protocols but still limit specific transfers to only be allowed to use
							a subset of them. By default, libcurl will accept all protocols it supports.

							See also CURLOPT_REDIR_PROTOCOLS.

							Valid protocol options are: CURLPROTO_HTTP, CURLPROTO_HTTPS, CURLPROTO_FTP,
							CURLPROTO_FTPS, CURLPROTO_SCP, CURLPROTO_SFTP, CURLPROTO_TELNET, CURLPROTO_LDAP,
							CURLPROTO_LDAPS, CURLPROTO_DICT, CURLPROTO_FILE, CURLPROTO_TFTP, CURLPROTO_ALL

CURLOPT_PROXYAUTH 			The HTTP authentication method(s) to use for proxy connection. Use the same bitmasks
							as described in CURLOPT_HTTPAUTH. For proxy authentication, only CURLAUTH_BASIC and
							CURLAUTH_NTLM are currently supported.

CURLOPT_PROXYPORT 			The port number of the proxy to connect to. This port number can also be set in CURLOPT_PROXY.

CURLOPT_REDIR_PROTOCOLS 	Bitmask of CURLPROTO_* values. If used, this bitmask limits what protocols libcurl may use
							in a trasnfer that it follows to in a redirect when CURLOPT_FOLLOWLOCATION is enabled.
							This allows you to limit specific transfers to only be allowed to use a subset of protocols
							in redirections.

							By default, libcurl will allow all protocols except for FILE and SCP. This is a difference
							compared to pre-7.19.4 versions which uncondtionally would follow to all protocols supported.
							See also CURLOPT_PROTOCOLS for protocol constant values.

CURLOPT_RESUME_FROM 		The offset, in bytes, to resume a transfer from.

CURLOPT_SSL_OPTIONS 		Set SSL behavior options, which is a bitmask of any of the following constants:
							CURLSSOPT_ALLOW_BEAST: Do not attempt to use any workarounds for a security flaw
							in the SSL3 and TSL1.0 protocols. 

							CURLSSLOPT_NO_REVOKE: disable certificate revocation checks for those SSL backends where such behavior is present.

CURLOPT_SSL_VERIFYHOST 		1 to check the existence of a common name in SSL peer certificate. 2 to check the existence
							of a common name and also verify that it matches the hostname provided. 0 to not check
							the names. In production environments, the value of this should be kept at 2 (default).

CURLOPT_SSLVERSION 			One of CURL_SSLVERSION_DEFAULT(0),CURL_SSLVERSION_TLSv1(1), CURL_SSLVERSION_SSLv2(2),
							CURL_SSLVERSION_SSLv3(3), CURL_SSLVERSION_TLSv1_0(4), CURL_SSLVERSION_TLSv1_1(5) or 
							CURL_SSLVERSION_TLSv1_2(6).

							Do not set this. just let it be default. Given known vurnabilities of SSL verisonings.

CURLOPT_STREAM_WEIGHT 		Set the numerical stream weight (a number between 1 and 256).

CURLOPT_TIMECONDITION 		How CURLOPT_TIMEVALUE is treated. Use CURL_TIMECOND_IFMODSINCE to return
							the page only if it has been modified since the time specified in CURLOPT_TIMEVALUE.
							If it has not been modified, a 304 not modified header will be returned assuming
							CURLOPT_HEADER is true.

							use CURL_TIMECOND_IFUNMODSINCE for the reverse effect. CURL_TIMECOND_IFMODSINCE
							is the default.

CURLOPT_TIMEOUT 			The maximum number of seconds to allow cURL functions to execute.

CURLOPT_TIMEOUT_MS 			The maximum number of milliseconds to allow cURL functions to execute. If licurl
							is built to use the standard system name resolver, that portion of the connect will
							still use full-second resolution for timeouts with a minimum timeout allowed of one second.

CURLOPT_TIMEVALUE 			The time in seconds since Jan 1:st 1970. The time will be used by CURLOPT_TIMECONDITION.
							BY default, CURL_TIMECOND_IFMODSINCE is used.

CURLOPT_MAX_RECV_SPEED_LARGE If a download exceeds this speed (counted in b/s) on cumulative average during the transfer,
							the transfer will pause to keep the average rate less than or equal to the param value.
							Defaults to unlimited.

CURLOPT_MAX_SEND_SPEED_LARGE If an upload exceeds this speed (counted in b/s) on cumulative average during teh transfer,
							the transfer will pause to keep the average rate less than or equal to the param value.
							Defaults to unlimited.

CURLOPT_SSH_AUTH_TYPES 		A bitmask consisting of one or more of CURLSSH_AUTH_PUBLICKEY, CURLSSH_AUTH_PASSWORD,
							CURLSSH_AUTH_HOST, CURLSSH_AUTH_KEYBOARD. Set to CURLSSH_AUTH_ANY to let libcurl pick one.

CURLOPT_IPRESOLVE 			Allows an application to select what kind of IP addresses to use when resolving host names.
							This is only interesting when using host names that resolve addresses using more than one
							version of IP, possible values are CURL_IPRESOLVE_WHATEVER, CURL_IPRESOLVE_V4, CURL_IPRESOLVE_V6,
							by default it is CURL_IPRESOLVE_WHATEVER.

CURLOPT_FTP_FILEMETHOD 		Tell curl which method to use to reach a file on a FTP(S) server. Possible values are 
							CURLFTPMETHOD_MULTICWD, CURLFTPMETHOD_NOCWD and CURLFTPMETHOD_SINGLECWD.

Value should be a string for the following values of the option param:

CURLOPT_CAINFO 				The name of a file holding one or more certificates to verify the peer with.
							This only makes sense when used in combination with CURLOPT_SSL_VERIFYPEER.

CURLOPT_CAPATH 				A directory that holds multiple CA certificates. use this option alongside CURLOPT_SSL_VERIFYPEER.

CURLOPT_COOKIE 				The contents of the "Cookie: " header to be used in the HTTP request. Note that 
							multiple cookies are separeted with a semicolon followed by a space (e.g,
							"fruit=apple; colour=red")

CURLOPT_COOKIEFILE 			The name of the file containing the cookie data. The cookie file can be in
							Netscape format, or just plain HTTP-style headers dumped into a file. If the name
							is an empty string, no cookies are loaded, but cookie handling is still enabled.

CURLOPT_COOKIEJAR 			The name of a file to save all internal cookies to when the handle is closed, e.g,
							after a call to curl_close.

CURLOPT_CUSTOMREQUEST 		A custom request method to use instead of "GET" or "HEAD" when doing a HTTP request.
							This is useful for doing "DELETE" or other, more obscure HTTP requests. 

							Valid values are things like "GET", "POST", "CONNECT" etc. Do not enter an
							entire HTTP request line (like GET/index.html HTTP/1.0\r\n\r\n)

CURLOPT_DEFAULT_PROTOCOL 	The default protocol to use if the URL is missing a scheme name.

CURLOPT_DNS_INTERFACE 		Set the name of the network interface that the DNS resolver should bind to.
							This must be an interface name (nto an address).

CURLOPT_DNS_LOCAL_IP4 		Set the local IPv4 address that the resolver should bind to. The argument should
							contain a single numerical IPv4 address as a string.

CURLOPT_DNS_LOCAL_IP6 		Sets the local IPv6 address that the resolver should bind to. The argument should 
							contain a single numerical IPv6 address as a string.

CURLOPT_EGDSOCKET 			Like CURLOPT_RANDOM_FILE, except a filename to an Entropy Gathering Daemon socket.

CURLOPT_ENCODING 			The contents of the "Accept-Encoding" header. This enables decoding of the response.
							Supported encodings are "identity", "deflate", and "gzip". If an empty string "",
							is set, a header containing all supported encoding types is sent.

CURLOPT_FTPPORT 			The value which will be used to get the IP address to use for the FTP "PORT" instruction.
							The "PORT" instruction tells the remote server to connect to our specified IP Address.
							The string may be a plain IP address, a hostname, a network interface name (under unix),
							or just a plain '-' to use systems default IP address.

CURLOPT_INTERFACE 			The name of the outgoing network interface to use. This can be interface name, an IP address
							or a host name.

CURLOPT_KEYPASSWD 			The password required to use the CURLOPT_SSLKEY or CURLOPT_SSH_PRIVATE_KEYFILE private key.

CURLOPT_KRB4LEVEL 			The KRB4 (Kerberos 4) security level. Any of the following values (in order from
							least to most powerful) are valid: "clear", "safe", "confidential", "private".

							If the string does not match one of these, "private" is used. Setting this to NULL,
							will disable the KRB4 security. Currently only supported for FTP transactions.

CURLOPT_LOGIN_OPTIONS 		Can be used to set protocol specific login options, such as the preferred authentication
							mechanism via "AUTH=NTLM" or "AUTH=*", and should be used in conjunction with the 
							CURLOPT_USERNAME option.

CURLOPT_PINNEDPUBLICKEY 	Set the pinned public key. The string can be the file name of your pinned public
							key. The file format expected is "PEM" or "DER". The string can also be any number
							of base64 encoded sha256 hashes preceded by "sha256//" and separated by ","

CURLOPT_POSTFIELDS 			The full data to post in a HTTP "POST" operation. To post a file, prepend a filename with
							@ and use the full path. The filetype can be explicitly specified by following the filename
							with the type in the format of ";type=mimetype". This param can either be passed as a 
							urlencoded string like 'para1=val1&para2=val2&...' or as an array with the field name as key
							and field data as value.

							This option is deprecated, use CURLFile for sending files.

CURLOPT_PRIVATE 			Any data that should be associated with this cURL handle. This data can subsequently be
							retrieved with the CURLINFO_PRIVATE option of curl_getinfo().
							cURL does nothing with this data.  When using a cURL multi handle, this private data is 
							typically a unique key to identify a standard cURL handle.

CURLOPT_PROXY 				The HTTP proxy to tunnel requests through.

CURLOPT_PROXY_SERVICE_NAME 	The proxy authentication service name.

CURLOPT_PROXYUSERPWD 		A username and password formatted as "[username]:[password]" to use for the connection to the proxy

CURLOPT_RANDOM_FILE 		A filename to be used to seed the random number generator for SSL.

CURLOPT_RANGE 				Range(s) of data to retrieve in the format "X-Y" where X or Y are optional. HTTP 
							transfers also support several intervals, separated by commas in the format "X-Y,N-M"

CURLOPT_REFERER 			The contents of the "Referer: " header to be used in a HTTP request.

CURLOPT_SERVICE_NAME 		The authentication service name.

CURLOPT_SSL_HOST_PUBLIC_KEY_MD5 A string containing 32 hexadecimal digits. The string should be the MD5 checksum of the remote host's
							public key, and libcurl will reject the connection to the host unless the md5summs match. This option
							is only for SCP and SFTP transfers.

CURLOPT_SSH_PUBLIC_KEYFILE 	THe file name of your public key. If not used, libcurl defaults to $HOME/.ssh/id_dsa.pub if the HOME env
							var is set, and just "id_dsa.pub" in the CD if HOME is not set.

CURLOPT_SSH_PRIVATE_KEYFILE The file name of your private key. If not used, libcurl defaults to $HOME/.ssh/id_dsa if the HOME environment
							variable is set, and just "id_dsa" in the current dir if HOME is not set. If the file is PW protected, set the PW
							with CURLOPT_KEYPASSWD.

CURLOPT_SSL_CIPHER_LIST 	A list of ciphers to use for SSL. For example, RC4-SHA and TLSv1 are valid cipher lists.

CURLOPT_SSLCERT 			The name of a file containing a PEM formatted certificate.

CURLOPT_SSLCERTPASSWD 		The password required to use the CURLOPT_SSLCERT certificate.

CURLOPT_SSLCERTTYPE 		The format of the certificate. Supported formats are "PEM" (default), "DER", and "ENG".

CURLOPT_SSLENGINE 			The identifier for the crypto engine of the private SSL key specified in CURLOPT_SSLKEY.

CURLOPT_SSLENGINE_DEFAULT 	The identifier for the crypto engine used for asymmetric crypto operations.

CURLOPT_SSLKEY 				The name of a file containing a private SSL key.

CURLOPT_SSLKEYPASSWD 		The secret PW needed to use the private SSL key specified in CURLOPT_SSLKEY.
							Keep the file that htis is contained in, safe.

CURLOPT_SSLKEYTYPE 			The key type of the private SSL key specified in CURLOPT_SSLKEY. Supported key types are
							"PEM" (default), "DER" and "ENG".

CURLOPT_UNIX_SOCKET_PATH 	Enables the use of Unix domain sockets as connection endpoint and sets the path to the given string.

CURLOPT_URL 				The URL to fetch. This can also be set when initializing a session with curl_init()

CURLOPT_USERAGENT 			The contents of the "User-Agent: " header to be used in a HTTP request.

CURLOPT_USERNAME 			The user name to use in authentication

CURLOPT_USERPWD 			A username and PW formatted as "[username]:[password]" to use for the connection.

CURLOPT_XOAUTH2_BEARER 		Specifies the OAuth 2.0 access token.

value should be an array for the following values of the option parameter:

CURLOPT_CONNECT_TO 			Connect to a specific host and port instead of the URL's host and port. Accepts
							an array of strings with the format HOST:PORT:CONNECT-TO-HOST:CONNECT-TO-PORT.

CURLOPT_HTTP200ALIASES 		An array of HTTP 200 responses that will be treated as valid responses and not 
							as errors.

CURLOPT_HTTPHEADER 			An array of HTTP headers fields to set, in the format array('Content-type: text/plain', 'Content-length: 100')

CURLOPT_POSTQUOTE 			An array of FTP commands to execute on the server after the FTP request has been performed.

CURLOPT_PROXYHEADER 		An array of custom HTTP headers to pass to proxies.

CURLOPT_QUOTE 				An array of FTP commands to execute on the server prior to the FTP request.

value should be a stream resource (using fopen() for example) for the following values of the option param:

CURLOPT_FILE 				The file that the transfer should be written to. The default is STDOUT (the browser window)

CURLOPT_INFILE 				The file taht the transfer should be read from when uploading.

CURLOPT_STDERR 				An alternative location to output errors instead of STDERR.

CURLOPT_WRITEHEADER 		The file that the header part of the transfer is written to.

Value should be the name of a valid function or a Closure for the following values of the option param:

CURLOPT_HEADERFUNCTION 		A callback accepting two params. The first is the cURL resource, the second is
							a string with the header data to be written. The header data must be written by this
							callback. Return the number of bytes written.

CURLOPT_PASSWDFUNCTION 		A callback accepting three params. The first is the cURL resource, the second is a string
							containing a password prompt, and teh third is the maximum PW length. Return the string containing
							the PW.

CURLOPT_PROGRESSFUNCTION 	A callback accepting five parameters. The first is the cURL resource, the second is the total number of
							bytes expected to be downloaded in this transfer, the third is the number of bytes downloaded so far,
							the fourth is the total number of bytes expected to be uploaded in this transfer, and the fifth
							is the number of bytes uploaded so far.

							The callback is only called when the CURLOPT_NOPROGRESS option is set to FALSE.

							Return a non-zero value to abort the transfer. In which case, the transfer will set 
							a CRULE_ABORTED_BY_CALLBACK error.

CURLOPT_READFUNCTION 		A callback accepting three params. The first is the cURL resource, the second is a stream
							resource provided to cURL through the option CURLOPT_INFILE, and the third is the maximum
							amount of data to be read.

							The callback must return a string with a length equal to or smaller than the amount of data
							requested, typically by reading it from the passed stream resource. It should return an 
							empty string to signal EOF.

CURLOPT_WRITEFUNCTION 		A callback accepting two params. The first is the cURL resource, and the second is a string
							with the data to be written. The data must be saved by this callback. It must return the 
							exact number of bytes written or the transfer will be aborted with an error.

CURLOPT_SHARE 				A result of curl_share_init(). Makes the cURL handle to use the data from the shared handle.

Returns true on success, false on failure.

curl_share_close:

Close a cURL share handle.

void curl_share_close ( resource $sh )

Closes a cURL share handle and frees all resources.

Example: This example will create a cURL share handle, add two cURL handles to it, and then run them with cookie data sharing.

<?php
//Create cURL share handle and set it to share cookie data
$sh = curl_share_init();
curl_share_setopt($sh, CURLSHOPT_SHARE, CURL_LOCK_DATA_COOKIE);

//initializes the first cURL handle and assign the share handle to it
$ch1 = curl_init("http://example.com/");
curl_setopt($ch1, CURLOPT_SHARE, $sh);

//Execute the first cURL handle
curl_exec($ch1);

//Initializes the second cURL handle and assign the share handle to it
$ch2 = curl_init("http://php.net/");
curl_setopt($ch2, CURLOPT_SHARE, $sh);

//Execute the second cURL handle
// all cookies from $ch1 handle are shared with $ch2 handle
curl_exec($ch2);

//Closes the cURL share handle
curl_share_close($sh);

//Close the cURL handles
curl_close($ch1);
curl_close($ch2);
?>

curl_share_init:

Initialize a cURL share handle.

resource curl_share_init ( void )

Allows to share data between cURL handles.

Returns resource type of "cURL Share Handle"

This example will create a cURL share handle, add two cURL handles to it, and then run them with cookie data sharing.

<?php
//Create cURL share handle and set it to share cookie data
$sh = curl_share_init();
curl_share_setopt($sh, CURLSHOPT_SHARE, CURL_LOCK_DATA_COOKIE);

//intialize the first cURL handle and assign the share handle to it
$ch1 = curl_init("http://example.com/");

//Cookie handling is disabled by default. You need to enable it prior to CURLOPT_SHARE
curl_setopt($ch1, CURLOPT_COOKIEFILE, "");
curl_setopt($ch1, CURLOPT_SHARE, $sh);

//Execute the first cURL handle
curl_exec($ch1);

//Initialize the second cURL handle and assign the share handle to it
$ch2 = curl_init("http://php.net/");
curl_setopt($ch2, CURLOPT_COOKIEFILE, "");
curl_setopt($ch2, CURLOPT_SHARE, $sh);

//Execute the second cURL handle
// all cookies from $ch1 handle are shared with $ch2 handle
curl_exec($ch2);

//Close the cURL share handle
curl_share_close($sh);

//Close the cURL handles
curl_close($ch1);
curl_close($ch2);
?>

NOTE: Do not use CURLOPT_SHARE with curl_setopt_array, this can cause error of ordering, causing to failure.

curl_share_setopt:

Set an option for a cURL share handle.

bool curl_share_setopt ( resource $sh , int $option , string $value )

The options are:

CURLSHOPT_SHARE 	Specifies a type of data that should be shared

CURLSHOPT_UNSHARE 	Specifies a type of data that will be no longer shared.

value:

CURL_LOCK_DATA_COOKIE Shares cookie data.

CURL_LOCK_DATA_DNS 	  Shares DNS cache. Note that when you use cURL multi handles, all handles added to the same multi handle
					  will share DNS cache by default.

CURL_LOCK_DATA_SSL_SESSION Shares SSL session IDs, reducing the time spent on the SSL handshake when reconnecting to the 
					  same server. Note that SSL session IDs are reused within the same handle by default.

Returns TRUE on succes, FALSE on failure.

curl_strerror:

Return string describing the given error code.

string curl_strerror ( int $errornum )

Returns error desc or null if error code is wrong.

Example:

<?php
//Create a curl handle with a misspelled protocol in URL
$ch = curl_init("htp://example.com/");

//Send request
curl_exec($ch);

//Check for errors and display the err msg
if($errno = curl_errno($ch)) {
	$error_message = curl_strerror($errno);
	echo "cURL error ({$errno}):\n {$error_message}";
}

//Close the handle
curl_close($ch);
?>

The above would output:

cURL error (1):
	Unsupported protocol

curl_unescape:

Decodes the given URL encoded string.

string curl_unescape ( resource $ch , string $str )

Returns decoded string or FALSE on failure.

example:

<?php
//Create a curl handle
$ch = curl_init('http://example.com/redirect.php');

//Send HTTP request and follow redirections
curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
curl_exec($ch);

//Get the last effective URL
$effective_url = curl_getinfo($ch, CURLINFO_EFFECTIVE_URL);
// ie. "http://example.com/show_location.php?loc=M%C3%BCnchen"

//Decode the URL
$effective_url_decoded = curl_unescape($ch, $effective_url);
//"http://example.com/show_location.php?loc=München"

//Close the handle
curl_close($ch);
?>

Note: curl_unescape does not decode + into spaces, urldecode() does.

curl-version:

Gets cURL version info.

array curl_version ([ int $age = CURLVERSION_NOW ] )

Returns information about the cURL version.

Returns an associative array with the following things:

version_number 				cURL 24 bit version number

version 					cURL version number, as a string

ssl_version_number 			OpenSSL 24 bit version number

ssl_version 				OpenSSL version number, as a string

libz_version 				zlib version number, as a string

host 						Information about the host where cURL was built

age

features 					A bitmask of the CURL_VERSION_XXX constants

protocols 					An array of protocols names supported by cURL

This example will check which features that are available in cURL build by using the "features" bitmask
returned by curl_version().

<?php
//Get curl version array
$version = curl_version();

//These are the bitfields that can be used
//to check for features in the curl build
$bitfields = Array(
			'CURL_VERSION_IPV6',
			'CURL_VERSION_KERBEROS4',
			'CURL_VERSION_SSL',
			'CURL_VERSION_LIBZ'
			);

foreach($bitfields as $feature)
{
	echo $feature . ($version['features'] & constant($feature) ? ' matches' : ' does not match');
	echo PHP_EOL;
}

?>

Image Processing and GD:

To install GD, write sudo apt-get install php<version>-gd && sudo service apache2 restart

Image functions are very high memory. Set an appropiate upper limit.

Runtime configs:

Found in php.ini:

name 							Default 		Changeable 		Changelog

gd.jpeg_ignore_warning 			"1" 			PHP_INI_ALL 	Available since PHP 5.1.3

Resource Types:

gd 		Image resource, used by functions like imagecreatefrompng()

gd font Font resource returned by imageloadfont()

gd PS font PostScript Type 1 font resource, returned by imagepsloadfont() //Removed in php 7

gd PS encoding PostScript Type 1 encoding resource, returned by imagepsencodefront() //removed in php 7

Predefined Constants:

GD_VERSION <string>: The GD version PHP was compiled against.

GD_MAJOR_VERSION <int>: The GD major version PHP was compiled against.

GD_MINOR_VERSION <int>: The GD minor version PHP was compiled against.

GD_RELEASE_VERSION <int>: The GD release version PHP was compiled against.

GD_EXTRA_VERSION <int>: The GD "extra" version (beta/rc) PHP was compiled against.

GD_BUNDLED <int>: When the bundled version of GD is used this is 1 otherwise its set to 0.

IMG_BMP <int>: Used as return value by imagetypes()

IMG_GIF <int>: Used as a return value by imagetypes()

IMG_JPG <int>: Used as a return value by imagetypes()

IMG_JPEG <int>: Used as a return value by imagetypes() //same as IMG_JPG

IMG_PNG <int>: Used as a return value by imagetypes()

IMG_WBMP <int>: Used as a return value by imagetypes()

IMG_XPM <int>: Used as a return value by imagetypes()

IMG_WEBP <int>: Used as a return value by imagetypes()

IMG_COLOR_TILED <int>: Special color option which can be used instead of a color allocated with imagecolorallocate() or imagecolorallocatealpha()

IMG_COLOR_STYLED <int>: ^

IMG_COLOR_BRUSHED <int>: ^

IMG_COLOR_STYLEDBRUSHED <int>: ^

IMG_COLOR_TRANSPARENT <int>: ^

IMG_AFFINE_TRANSLATE <int>: An affine transformation type constant used by imageaffinematrixget() function.

IMG_AFFINE_SCALE <int>: ^

IMG_AFFINE_ROTATE <int>: ^

IMG_AFFINE_SHEAR_HORIZONTAL <int>: ^

IMG_AFFINE_SHEAR_VERTICAL <int>: ^

IMG_ARC_ROUNDED <int>: A style constant used by imagefilledarc() function. //Same as IMG_ARC_PIE

IMG_ARC_CHORD <int>: ^

IMG_ARC_NOFILL <int>: ^

IMG_ARC_EDGED <int>: ^

IMG_GD2_RAW <int>: A type constant used by imagegd2() function.

IMG_GD2_COMPRESSED <int>: ^

//ON NOTE; GOING TO SKIP CONSTANTS CAUSE I FEEL LIKE THEY ARE KIND OF A WASTE OF TIME.
//STILL COVERING FUNCTIONS AND EXAMPLES, CAUSE THEY ARE IMPORTANT! (USAGE IS IMPORTANT)

Examples of Usage:

PNG creation with PHP:

<?php

header("Content-type: image/png");
$string = $_GET['text'];
$im 	= imagecreatefrompng("images/button1.pgn");
$orange = imagecolorallocate($im, 220, 210, 60);
$px 	= (imagesx($im) - 7.5 * strlen($string)) / 2;
imagestring($im, 3, $px, 9, $string, $orange);
imagepng($im);
imagedestroy($im);

?>

The above code could be used in a tag like <img src="button.php?text=text">, where it would take the text arg
and overlay it over a image, such as the button image, in this case. 

What follows, is a example of a PHP Script that can generate a random png image:

<img src="create_image.php?s=008080_F_1000_200&t=Sample%20Image%20Drawn%20By%20PHP" alt="GD Library Example Image" >

The create_image.php script:

<?php
$setting = isset($_GET['s']) ? $_GET['s'] : "FFF_111_100_100";
$setting = explode("_", $setting);
$img = array();

switch ($n = count($setting)) {
	case $n > 4:
	case 3:
		$setting[3] = $setting[2];
	case 4:
		$img['width'] = (int) $setting[2];
		$img['height'] = (int) $setting[3];
	case 2:
		$img['color'] = $setting[1];
		$img['background'] = $setting[0];
		break;
	default:
		list($img['background'],$img['color'],$img['width'],$img['height']) = array('F', '0', 100,100);
		break;
} 

$background = explode(",",hex2rgb($img['background']));
$color = explode(",",hex2rgb($img['color']));
$width = empty($img['width']) ? 100 : $img['width'];
$height = empty($img['height']) ? 100 : $img['height'];
$string = (string) isset($_GET['t']) ? $_GET['t'] : $width ."x". $height;

header("Content-Type: image/png");
$image = @imagecreate($width, $height)
	or die("Cannot Initialize new GD image stream");

$background_color = imagecolorallocate($image, $background[0], $background[1], $background[2]);
$text_color = imagecolorallocate($image, $color[0], $color[1], $color[2]);

imagestring($image, 5, 5, 5, $string, $text_color);
imagepng($image);
imagedestroy($image);

function hex2rgb($hex) {
	//Copied
	$hex = str_replace("#", "", $hex);

	switch (strlen($hex)) {
		case 1:
			$hex = $hex.$hex;
		case 2:
			$r = hexdec($hex);
			$g = hexdec($hex);
			$b = hexdec($hex);
			break;

		case 3:
			$r = hexdec(substr($hex,0,1).substr($hex,0,1));
			$g = hexdec(substr($hex,1,1).substr($hex,1,1));
			$b = hexdec(substr($hex,2,1).substr($hex,2,1));
			break;

		default:
			$r = hexdec(substr($hex,0,2));
			$g = hexdec(substr($hex,2,2));
			$b = hexdec(substr($hex,4,2));
			break;
	}

	$rgb = array($r, $g, $b);
	return implode(",", $rgb);
}

Adding watermarks to images using alpha channels:

<?php
//load the stamp and the photo to apply the watermark to
$stamp = imagecreatefrompng('stamp.png');
$im = imagecreatefromjpeg('photo.jpeg');

//Set the margins for the stamp and get the height/width of the stamp image
$marge_right = 10;
$marge_bottom = 10;
$sx = imagesx($stamp);
$sy = imagesy($stamp);

//Copy the stamp image onto our photo using the margin offsets and the photo
// width to caluclate positioning of the stamp
imagecopy($im, $stamp, imagesx($im) - $sx - $marge_right, imagesy($im) - $sy - $marge_bottom, 0, 0, imagesx($stamp), imagesy($stamp));

//Ouput and free memory
header('Content-type: image/png');
imagepng($im);
imagedestroy($im);
?>

This example is a common way to add watermarks and stamps to photos and copyrighted images. Note that hte presence of 
an alpha channel in the stmap img as the text is anti-aliased. THis is preserverd during copying.

Using imagecopymerge() to create a translucent watermark:

<?php
//load the stamp and the photo to apply the watermark to
$im = imagecreatefromjpeg('photo.jpeg');

//First we create our stamp image manually from GD
$stamp = imagecreatetruecolor(100, 70);
imagefilledrectangle($stamp, 0, 0, 99, 69, 0x0000FF);
imagefilledrectangle($stamp, 9, 9, 90, 60, 0xFFFFFF);
imagestring($stamp, 5, 20, 20, 'libGD', 0x0000FF);
imagestring($stamp, 3, 20, 40, '(c) 2007-9', 0x0000FF);

//Set the margins for the stamp and get the height/width of the stamp image
$marge_right = 10;
$marge_bottom = 10;
$sx = imagesx($stamp);
$sy = imagesy($stamp);

//merge the stamp onto our photo with an opacity of 50%
imagecopymerge($im, $stamp, $imagesx($im) - $sx - $marge_right, imagesy($im) - $sy - marge_bottom, 0, 0, imagesx($stamp), imagesy($stamp), 50);

//Save the image to file and free memory
imagepng($im, 'photo_stamp.png');
imagedestroy($im);

?>

This is useful, cause 50% opacity is hard to remove and allows viewers to see it.

GD and Image Functions:

gd_info: Retrieve info about the currently installed GF library

array gd_info( void )

Returns an associative array with the following attributes:

GD Version 		String value describing the installed libgd version.

FreeType Support Boolean. True if FreeType support is installed

FreeType Linkage String. Describing the way in which FreeType was linked. Expected values are: 'with freetype', 'with TFT library',
						 and 'with unknown library'. This element will only be defined if FreeType Support evaluated to True

T1Lib Support 	Boolean. TRUE if T1Lib support is included

GIF Read Support Boolean. True if support for reading GIF images is included.

GIF Create Support Boolean. True if support for creating GIF images is included.

JPEG Support Boolean. True if JPEG support is included

PNG Support Boolean. True if PNG support is included

WBMP Support boolean. True if WBMP support is included

XBM Support Boolean. True if XBM support is included.

WebP Support Boolean. True if WebP support is included.

Example:

<?php
var_dump(gd_info());
?>

//Gets an array of all associated values

getimagesize:

array getimagesize ( string $filename [, array &$imageinfo ] )

The getimagesize() function will determine the size of any supported given image file and return the dimensions along with
the file type and a height/width text string to be used inside a normal HTML IMG tag and the correspondent HTTP content type.

getimagesize() can also return some information in imageinfo parameter.

Note: THis function expects filename to be a valid image file. If a non-image file is supplied, it may be incorrectly
detected as an image and the function will return successfully, but the array may contain non-sensical values.

Do not use getimagesize() to check that a given file is a valid image. Use a purpose-built solution such as the Fileinfo
extension instead.

Note that JPC and Jp2 are capable of having components with different bit depths. In this case, the values for "bits"
is the highest bit depth encountered. Also, JP2 files may contain multiple JPEG 2000 codestreams.

In this case, getimagesize() returns the values for codestream it encounters in the root of the file.
The information about icons are retrieved from the icon with the higest bitrate.

Params:

filename: This param specifies the file you wish to retrieve info about. It can reference a local file or (config permitting)
a remote file using one of the supported streams.

imageinfo: This optionap aram allows you to extract some extended info from teh image file. Currently, this will return the
different JPG APP markers as an associative array. Some programs use these APP markers to embed text info in images.

A very common one is to embed IPTC information in the APP13 marker. You can use the iptcparse() function to parse the
binary APP13 marker into something readable.

Return Values:

Returns an array with up to 7 elements. Not all image types will include the channels and bits elements.

Index 0 and 1 contains respectively the width and height of the image.

Some formats may contain no image or may contain multiple images. In these cases, getimagesize() might not be able
to properly determine the image size. getimagesize() will return zero for width and height in these cases.

Index 2 is one of the IMAGETYPE_XXX constants indicating the type of the image.

INdex 3 is a text string with the correct height="yyy" width="xxx" string that can be used directly in a IMG tag.

mime is the correspondant MIME type of the image. This information can be used to deliver images with the correct HTTP
Content-Type header.

Example of getimagesize() and MIME types:

<?php
$size = getimagesize($filename);
$fp = fopen($filename, "rb");
if ($size && $fp) {
	header("Content-type: {$size['mime']}");
	fpassthru($fp);
	exit;
} else {
	// error
}
?>

Channels will be 3 for RGB pictures and 4 for CMYK pictures.

Bits is the number of bits fore ach color.

For some image types, the presence of channels and bits values can be a bit confusing. As an example, GIF always
uses 3 channels per pixel, but the number of bits per pixel cannot be calculated for an animated GIF with a global color table.

On failure, FALSE is returned.

Errors/Exceptions:

If accessing filename image is impossible getimagesize() will generate an error of level E_WARNING. On read error, getimagesize()
will generate an error of level E_NOTICE.

Example of getimagesize():

<?php
list($width, $height, $type, $attr) = getimagesize("img/flag.jpg");
echo "<img src=\ "img/flag.jpg\" $attr alt=\"getimagesize() example\" />";
?>

Example of getimagesize(URL):

<?php
$size = getimagesize("http://www.example.com/gifs/logo.gif");

//if the file name has space in it, encode them properly
$size = getimagesize("http://www.example.com/gifs/lo%20go.gif");

?>

getimagesize() returning IPTC:

<?php
$size = getimagesize("testimg.jpg", $info);
if (isset($info["APP13"])) {
	$iptc = iptcparse($info["APP13"]);
	var_dump($iptc);
}
?>

As noted, getimagesize will download the entire file first before checking the requested info. This can be extremely
slow for larger files that are accessed remotly. What follows is a function that streams bytes until it finds out
width and height, which is one of the first parts of the byte stream:

<?php
//Retreive JPEG width and height without downloading/reading entire image
function getjpegsize($img_loc) {
	$handle = fopen($img_loc, "rb") or die("Invalid file stream.");
	$new_block = NULL;
	if(!feof($handle)) {
		$new_block = fread($handle, 32);
		$i = 0;
		if($new_block[$i]=="\xFF" && $new_block[$i+1]=="\xD8" && $new_block[$i+2]=="\xFF" && $new_block[$i+3]=="\xE0")
		{
			$i += 4;
			if($new_block[$i+2]=="\x4A" && $new_block[$i+3]=="\x46" && $new_block[$i+4]=="\x49" && $new_block[$i+5]=="\x46" && $new_block[$i+6]=="\x00")
			{
				//Read block size and skip ahead to begin cycling through blocks in search of SOF marker
				$block_size = unpack("H*", $new_block[$i] . $new_block[$+1]);
				$block_size = hexdec($block_size[1]);
				while(!feof($handle)) {
					$i += $block_size;
					$new_block .= fread($handle, $block_size);
					if($new_block[$i]=="\xFF") {
						//New block detected, check for SOF marker
						$sof_marker = array("\xC0", "\xC1", "\xC2", "\xC3", "\xC5", "\xC6", "\xC7", "\xC8", "\xC9", "\xCA", "\xCB", "\xCD", "\xCE", "\xCF");
						if(in_array($new_block[$i+1], $sof_marker)) {
							//Sof marker detected. Width and height info is contained in bytes 4-7 after this byte
							$size_data = $new_block[$i+2] . $new_block[$i+3] . $new_block[$i+4] . $new_block[$i+5] .
							$new_block[$i+6] . $new_block[$i+7] . $new_block[$i+8];
							$unpacked = unpack("H*", $size_data);
							$unpacked = $unpacked[1];

							$height = hexdec($unpacked[6] . $unpacked[7] . $unpacked[8] . $unpacked[9]);
							$width = hexdec($unpacked[10] . $unpacked[11] . $unpacked[12] . $unpacked[13]);
							return array($width, $height);
						} else {
							//Skip block marker and read block size
							$i += 2;
							$block_size = unpack("H*", $new_block[$i] . $new_block[$i+1]);
							$block_size = hexdec($block_size[1]);
						}
					} else {
						return FALSE;
					}
				}
			}
		}
	}
	return FALSE;
}
?>

An example of resizing a image with code:

<?php

$new_file = img_resize("./img/", "test.jpg", "copy_test.jpg", 300);
echo "<IMG src = '$new_file'>";

function img_resize($path,$tmp_name,$new_name,$new_width){
	if (!file_exists($path.$filename)){
		echo "File not found!";
		exit;
	}
	if (!is_writable($path)){
		echo "error:permission denied!";
		exit;
	}
	list($width, $height) = getimagesize($path . $tmp_name);
	$new_height = abs($new_width * $height / $width);
	$image_p = imagecreatetruecolor($new_width, $new_height);
	$image = imagecreatefromjpeg($path . $tmp_name);
	imagecopyresampled($image_p, $image, 0, 0, 0, 0, 
						$new_width, $new_height, $width, $height);
	imagejpeg($image_p, $path . $new_name);
	return $path.$new_name;
}

?>

getimagesizefromstring:

gets the size of an image from a string.

array getimagesizefromstring ( string $imagedata [, array &$imageinfo ] )

Identical to getimagesize(), except that getimagesizefromstring() accepts a string instead of a file name as the first param.

An example:

<?php
$img = '/path/to/test.png';

//Open as a file
$size_info1 = getimagesize($img);

//or open as a string
$data 		= file_get_contents($img);
$size_info2 = getimagesizefromstring($data);
?>

image_type_to_extension:

Gets file extension for image type

string image_type_to_extension ( int $imagetype [, bool $include_dot = TRUE ] )

Returns the extension for the given IMAGETYPE_XXX constant.

Example:

<?php
//Create image instance
$im = imagecreatetruecolor(100, 100);

//save image
imagepng($im, './test' . image_type_to_extension(IMAGETYPE_PNG));
imagedestroy($im);
?>

image_type_to_mime_type:

Get Mime-Type for image-type returned by getimagesize, exif_read_data, exif_thumbnail, exif_imagetype

string image_type_to_mime_type( int $imagetype )

The returned for respective input values, are as follows:

IMAGETYPE_GIF 				image/gif

IMAGETYPE_JPEG 				image/jpeg

IMAGETYPE_PNG 				image/png

IMAGETYPE_SWF 				application/x-shockwave-flash

IMAGETYPE_PSD 				image/psd

IMAGETYPE_BMP 				image/bmp

IMAGETYPE_TIFF_II 			image/tiff

IMAGETYPE_TIFF_MM 			image/tiff

IAMGETYPE_JPC 				application/octet-stream

IMAGETYPE_JP2 				image/jp2

IMAGETYPE_JPX 				application/octet-stream

IMAGETYPE_JB2 				application/octet-stream

IMAGETYPE_SWC 				application/x-shockwave-flash

IMAGETYPE_IFF 				image/iff

IMAGETYPE_WBMP 				image/vnd.wap.wbmp

IMAGETYPE_XBM 				image/xbm

IMAGETYPE_ICO 				image/vnd.microsoft.icon

IMAGETYPE_WEBP 				image/webp

Example:

<?php
header("Content-type: " . image_type_to_mime_type(IMAGETYPE_PNG));
?>

image2wbmp:

bool image2wbmp ( resource $image [, string $filename [, int $threshold ]] )

outputs a WBMP version of the given image.

params:

image: image resource, returned by one of the image creation functions, such as imagecreatetruecolor()

filename: Path to the saved file. If not given, the raw image stream will be output directly.

threshold: TH value between 0 and 255.

returns True on success, false on failure.

Example:

<?php
$file = 'php.png';
$image = imagecreatefrompng($file);

header('Content-Type: ' . image_type_to_mime_type(IMAGETYPE_WBMP));
image2wbmp($image); //output the stream directly
imagedestroy($image);
?>

imageaffine:

Return an image containing the affine transformed src image, using an optional clipping area.

resource imageaffine ( resource $image, array $affine [, array $clip ] )

Parms:

image: An image resource, returned by one of the image creation functions, such as imagecreatetruecolor()

affine: Array with keys 0 to 5

clip: Array with keys "x", "y", "width" and "height".

Return values:

Affined image resource on success, FAILED on failure.

Affine is a geometric transformation operation involving MATRICES, covering both 2D and 3D environment.
Transformations are often used in linear algebra and computer graphics.

In geometric transformations of images, the pixel coordinate is mapped.

This means that each pixel is localized by two coords, in the rectangular domain of the image.
Without going into more details about pixel mapping, let's get to what really matters: The AFFINE transformations.

There are several classes of pixel mapping, one is called "affine".
Affine transformations include: scaling, rotation, shearing and translation.

PHP 5.5+ like "libart" uses ARRAYS of six floating points elements to do the job.

The AFFINE ARRAY is defined as follows:

$affine = [ a0, a1, b0, b1, a2, b2 ];

where, they are all floating point values represented by equations:

x' = a0x + a1y + a2

y' = b0x + b1y + b2

IDENTITY,no change made in path of points:

$affine = [ 1, 0, 0, 1, 0, 0 ];

Equations remapping:

x' = 1x + 0y + y = x

y' = 0x + 1y = 0 = y

TRANSLATION:

$affine = [ 1, 0, 0, 1, H, V ];

equations remapping:

x' = 1x + 0y + H = X + H

y' = 0x + 1y = V = y + V

Each point is moved H units horizontaly and V units vertically.

SCALE:

$affine = [ M, 0, N, 1, 0, 0 ];

equations remapping:

x' = Mx + 0y + 0 = Mx

y' = 0x + Ny = 0 = Ny

Each point will stretch or compress its path, horizontally, or vertically, according M and N; negative or positive values.

SHEARING, parallel to x axis:

$affine = [ 1, K, 0, 1, 0, 0 ];

equations remapping:

x' = 1x + Ky + 0 = x + Ky

y' = 0x + 1y = 0 = y

SHEARING, parallel to y axis:

$affine = [ K, 0, 0, 1, 0, 0 ];

equations remapping:

x' = 1x + 0y + 0 = x

y' = Kx + 1 = 0 = y + Kx

ROTATION, clockwise:

$affine = [ cos Ø, sin Ø, -sin Ø, cos Ø, 0, 0 ];

equations remapping:

x' = x cos Ø + y sin Ø + 0 = x cos Ø + y sin Ø

y' = -x sin Ø + y cos Ø = 0 = y cos Ø - x sin Ø

ROTATION, counterclockwise:

$affine = [cos Ø, -sin Ø, sin Ø, cos Ø, 0, 0 ];

equations remapping:

x' = x cos Ø - y sin Ø + 0 = x cos Ø - y sin Ø

y' = x sin Ø + y cos Ø = 0 = y sin Ø - x cos Ø

An example:

<?php

if (!function_exists('imageaffine'))
{
	echo 'FUNCTION NOT DEFINED IN THIS VERSION OF PHP';
	exit;
}

$base_img = 'affine.png';

$tgt_img1 = 'triangle1.png';

$tgt_img2 = 'triangle2.png';

$arr_affine = [
[ 1, 0, 0, 1, 0, 0 ],
[ 1, 0, 0, 1, 150, 0 ],
[ 1.2, 0, 0, 0.6, 0, 0 ],
[ -1.2, 0, 0, -0.6, 0, 0 ],
[1, 2, 0, 1, 0 , 0 ],
[ 2, 1, 0, 1, 0, 0 ],
[ cos(15), sin(15), -sin(15), cos(15), 0, 0 ],
[ cos(15), -sin(15), sin(15), cos(15), 0, 0 ]
];

$RSR_base = imagecreatetruecolor(400, 300);
$w = imagesx($RSR_base);
$h = imagesy($RSR_base);

$arr_clip = [ 'x' => 0, 'y' => 0, 'width' => $w, 'height' => $h ];

$fillcolor = imagecolorallocate($RSR_base, 0, 0, 0);

imagefill($RSR_base, $base_img);

$drawcolor = imagecolorallocate($RSR_base, 255, 0, 0);

$triangle = [ 50, 50, 50, 150, 200, 150 ];
$points = 3;

imageantialias($RSR_base, 1);

$drawtriangle = imagefilledpolygon($RSR_base, $triangle, $points, $drawcolor);

imagepng($RSR_base, $tgt_img1);

$select = mt_rand(0, 7);

$RSRaff2 = imageaffine($RSR_base, $arr_affine[$select], $arr_clip);

imagepng($RSRaff2, $tgt_img2, 9);

?>

SUPPORT IMAGE<br><br>
<img src="<?php echo $base_img; ?>" alt="*" /><br><br>

BASE IMAGE<br><br>
<img src="<?php echo $tgt_img1; ?>" alt="*" /><br><br>

RESULT IMAGE<br><br>
<img src="<?php echo $tgt_img2; ?>" alt="*" />

imageaffinematrixconcat:

COncatenate two affine transformation matrices

array imageaffinematrixconcat ( array $m1, array $m2 )

Returns the concatenation of two affine transformation matrices, what is useful if multiple transformations
should be applied to the same image in one go.

Return values:

An affine transformation matrix (an array with keys 0 to 5 and float values), or FALSE On failure.

Example:

<?php
$m1 = imageaffinematrixget(IMG_AFFINE_TRANSLATE, array('x' = 2, 'y' => 3));
$m2 = imageaffinematrixget(IMG_AFFINE_SCALE, array('x' = 4, 'y' => 5));
$matrix = imageaffinematrixconcat($m1, $m2);
print_r($matrix);
?>

Will output:

Array
(
	[0] => 4
	[1] => 0
	[2] => 0
	[3] => 5
	[4] => 8
	[5] => 15
)

imageaffinematrixget:

Get an affine transformation matrix

array imageaffinematrixget ( int $type, mixed $options )

Returns an affine transformation matrix

Params: 

type: One of the IMG_AFFINE_* constants

options: If type is IMG_AFFINE_TRANSLATE or IMG_AFFINE_SCALE, options has to be an array with keys x and y, both having float values.

If type is IMG_AFFINE_ROTATE, IMG_AFFINE_SHEAR_HORIZONTAL or IMG_AFFINE_SHEAR_VERTICAL, options has to be a float specifying
the angle.

Returns an affine transformation matrix (an array with keys 0 to 5, and float values) or FALSE on failure.

Example:

<?php
$matrix = imageaffinematrixget(IMG_AFFINE_TRANSLATE, array('x' = 2, 'y' => 3));
print_r($matrix);
?>

imagealphablending:

Set the blending mode for an image

bool imagealphablending ( resource $image, bool $blendmode )

imagealphablending() allows for two different modes of drawing on truecolor images. In blending mode, the alpha channel
component of the color supplied to all drawing function, such as imagesetpixel() determines how much of the underlying color
should be allowed to shine through.

As a result, gd automatically blends the existing color at that point with the drawing color, and stores the result in the
image. The resulting pixel is opaque. In a non-blending mode, the drawing color is copied literally with its alpha channel
info, replacing the destination pixel.

Blending mode is not avaialble when drawing on palette images.

Params:

image: An image resource, returned by one of the image creation functions, such as imagecreatetruecolor()

blendmode: Whether to enable the blending mode or not. On true color images the default value is TRUE otherwise
the default value is FALSE.

Returns TRUE on success or FALSE on failure.

Example:

<?php
//Create image
$im = imagecreatetruecolor(100, 100);

//Set alphablending to on
imagealphablending($im, true);

//Draw a square
imagefilledrectangle($im, 30, 30, 70, 70, imagecolorallocate($im, 255, 0, 0));

//output
header('Content-type: image/png');

imagepng($im);
imagedestroy($im);
?>

imageantialias:

Should antialias functions be used or not

bool imageantialias ( resource $image , bool $enabled )

Activate the fast drawing antialiased methods for lines and wired polygons. It does not support alpha components.
It works using a direct blend operation. It works only with truecolor images.

Thickness and styled are not supported.

Using antialiased primitives with transparent background color can end with some unexpected results. The blend
method uses the background color as any other colors. The lack of alpha component support does not allow an
alpha based AA method.

Returns ture on success, false on failure.

Example:

<?php
//Setup an anti-aliased image and a normal image
$aa = imagecreatetruecolor(400, 100);
$normal = imagecreatetruecolor(200, 100);

//Switch antialiasing on for one image
imageantialias($aa, true);

//Allocate colors
$red = imagecolorallocate($normal, 255, 0, 0);
$red_aa = imagecolorallocate($aa, 255, 0, 0);

//Draw two lines, one with AA enabled
imageline($normal, 0, 0, 200, 100, $red);
imageline($aa, 0, 0, 200, 100, $red_aa);

//merge the two iamges side by side for output (AA: left, Normal: Right)
imagecopymerge($aa, $normal, 200, 0, 0, 0, 200, 100, 100);

//output image
header('Content-type: image/png');

imagepng($aa);
imagedestroy($aa);
imagedestroy($normal);
?>

imagearc:

Draws an arc

bool imagearc ( resource $image , int $cx , int $cy , int $width , int $height , int $start , int $end , int $color )

Draws an arc of circle centered at given coords.

Returns TRUE on success, FALSE on failure.

Example:

<?php

//Create a 200*200 img
$img = imagecreatetruecolor(200, 200);

//Allocate some colors
$white = imagecolorallocate($img, 255, 255, 255);
$red   = imagecolorallocate($img, 255, 0, 0);
$green = imagecolorallocate($img, 0, 255, 0);
$blue = imagecolorallocate($img, 0, 0, 255);

//draw the head
imagearc($img, 100, 100, 200, 200, 0, 360, $white);
//mouth
imagearc($img, 100, 100, 150, 150, 25, 155, $red);

//left and right eye
imagearc($img, 60, 75, 50, 50, 0, 360, $green);
imagearc($img, 140, 75, 50, 50, 0, 360, $blue);

//Output an img in the browser
header("Content-type: image/png");
imagepng($img);

//Free memory
imagedestroy($img);

?>

The precision of imagearc is 1 degree (it rounds to the nearest one).

Another example of using imagearc:

<?php
//Example PHP script of imagearc functions
$image_width=360;$image_height=360;
$img = imagecreatetruecolor($image_width,$image_height); //	make image variable

//Create a BG color by making a filled rectangle
$color = imagecolorallocate($img,255, 255,255);
imagefilledrectangle($img, 0, 0, $image_width, $image_height, $color);

$r=$image_width/2 - $image_width/32; //radius
$cx=$image_width/2;
$cy=$image_height/2;

$color = imagecolorallocate($img,0,0,0);
imagearc($img, $cx, $cy, $r*2, $r*2, 0, 360, $color); //Regular outlines arc

imagefilledarc($img, $cx, $cy, $r*1, $r*1, 0, 90, $color, IMG_ARC_CHORD); //Filled rectangle with chord of circle
imagefilledarc($img, $cx, $cy, $r*1, $r*1, 180, 270, $color, IMG_ARC_PIE); //pie slice

$font_number=5; //can use built in fonts numbered 1 to 5
$string="Hello World!";
imagestring($img, $font_number, $cx-(imagefontwidth($font_number)*strlen($string))/2, $cy-120, $string, $color);

header("Content-type: image/png");
imagepng($img); //output image in the browser

$filename="imagearc";
imagepng($img,"./frames/$filename.png",9); //make highly compressed png

imagedestroy($img);
?>

imagebmp:

Output a BMP image to browser or file

bool imagebmp ( resource $image, mixed $to [, bool $compressed = TRUE ] )

Outputs or saves a BMP version of the given image.

return values: Returns TRUE on success, FALSE on failure.

Example:

<?php
//Create a blank image and add some text
$im = imagecreatetruecolor(120, 20);
$text_color = imagecolorallocate($im, 233, 14, 91);

imagestring($im, 1, 5, 5, 'BMP with PHP', $text_color);

//SAve the image
imagebmp($im, 'php.bmp');

//Free up memory
imagedestroy($im);
?>

imagechar:

Draw a char horizontally

bool imagechar ( resource $image, int $font, int $x, int $y, string $c, int $color )

Draws the first char of c in the image identified by image with its upper-left at x,y with the color Color.

Returns true on success, false on failure.

Example:

<?php

$im = imagecreate(100, 100);

$string = 'PHP';

$bg = imagecolorallocate($im, 255, 255, 255);
$black = imagecolorallocate($im, 0, 0, 0);

//prints a black "P" in the top left corner
imagechar($im, 1, 0, 0, $string, $black);

header('Content-type: image/png');
imagepng($im);

?>

imagecharup:

Draw a character vertically

bool imagecharup ( resource $image, int $font, int $x, int $y, string $c, intt $color )

Draws the char c at given coords of image.

Only thing that stands is, is the font: accepts 1,2,3,4,5 (larger is larger font), defaults to latin2 encoding,
can be set wtih imageloadfont().

Returns true on success, false on failure.

Example:

<?php

$im = imagecreate(100, 100);

$string = 'Note that the first letter is a N';

$bg = imagecolorallocate($im, 255, 255, 255);
$black = imagecolorallocate($im, 0, 0, 0);

//prints a black "Z" on a white bg
imagecharup($im, 3, 10, 10, $string, $black);

header('Content-type: image/png');
imagepng($im);

?>

imagecolorallocate:

Allocate a color for an image

img imagecolorallocate ( resource $image, int $red, int $green, int $blue )

Returns a color identifier representing the color composed of the given RGB components.

Returns FALSE if the allocation failed.

Example:

<?php

$im = imagecreate(100, 100);

background = imagecolorallocate($im, 255, 0, 0);

$white = imagecolorallocate($im, 255, 255, 255);
$black = imagecolorallocate($im, 0, 0, 0);

//hexa way
$white = imagecolorallocate($im, 0xFF, 0xFF, 0xFF);
$black = imagecolorallocate($im, 0x00, 0x00, 0x00);

?>

We can only assign 255 colors to an image palette. And imagecolorallocate will allocate a new color,
even if the same color already exists.

We can use imagecolorstotal() to see how many colors are allocated.

imagecolorallocatealpha:

Allocate color for an image

int imagecolorallocatealpha ( resource $image, int $red, int $green, int $blue, int $alpha )

Alpha works as opacity, 0 to 127. 0 is opaque, 127 is transparent.

Returns failed if fails.

Example of usage:

<?php
$size = 300;
$image=imagecreatetruecolor($size, $size);

//Something to get a white background with black border
$back = imagecolorallocate($image, 255, 255, 255);
$border = imagecolorallocate($image, 0, 0, 0);
imagefilledrectangle($image, 0, 0, $size - 1, $size - 1, $back);
imagerectangle($image, 0, 0, $size - 1, $size - 1, $border);

$yellow_x = 100;
$yellow_y = 75;
$red_x = 120;
$red_y = 165;
$blue_x = 187;
$blue_y = 125;
$radius = 150;

//Allocate colors with alpha values
$yellow = imagecolorallocatealpha($image, 255, 255, 0, 75);
$red 	= imagecolorallocatealpha($image, 255, 0, 0, 75);
$blue 	= imagecolorallocatealpha($image, 0, 0, 255, 75);

//Drawing 3 overlapped circles
imagefilledeclipse($image, $yellow_x, $yellow_y, $radius, $radius, $yellow);
imagefilledeclipse($image, $red_x, $red_y, $radius, $radius, $red);
imagefilledeclipse($image, $blue_x, $blue_y, $radius, $radius, $blue);

//Don't forget to output to a correct header
header('Content-type: image/png');

//And finally, output the result
imagepng($image);
imagedestroy($image);
?>

imagecolorat:

Get the index of the color of a pixel

int imagecolorat ( resource $image, int $x, int $y )

Returns the index of the color of the pixel at the specified location in the image specified by image.

If the image is a truecolor image, this functions returns the RGB value of that pixel as an int.
Use bitshifting and masking to access the distinct red, green and blue component values.

Example of accessing distinct RGB values:

<?php
$im = imagecreatefrompng("php.png");
$rgb = imagecolorat($im, 10, 15);
$r = ($rgb >> 16) & 0xFF;
$g = ($rgb >> 8) & 0xFF;
$b = $rgb & 0xFF;

var_dump($r, $g, $b);
?>

Where as Human-readable RGB values using imagecolorsforindex():

<?php
$im = imagecreatefrompng("php.png");
$rgb = imagecolorat($im, 10, 15);

$colors = imagecolorsforindex($im, $rgb);

var_dump($colors);
?>

The above outputs an associate array of colors n stuff.

imagecolorclosest:

Get the index of the closest color to the specified color.

img imagecolorcloset ( resource $image, int $red, int $green, int $blue )

Returns the index of the color in the palette of the image which is "closest" to the specified RGB.

The "distance" between the desired color and each color in the palette is calculated as if the RGB values
represented points in 3d space.

An example:

<?php
//Start with an image and convert it to palette-based image
$im = imagecreatefrompng('figures/imagecolorclosest.png');
imagetruecolorpalette($im, false, 255);

//Searh colors (RGB)
$colors = array(
	array(254, 145, 154),
	array(153, 145, 188),
	array(153, 90, 145),
	array(255, 137, 92)
);

//Loop through each search and find the closest color in the palette.
//Return the search number, the search RGB and converted RGB match
foreach($colors as $id => $rgb)
{
	$result = imagecolorclosest($im, $rgb[0], $rgb[1], $rgb[2]);
	$result = imagecolorsforindex($im, $result);
	$result = "({$result['red']}, {$result['green']}, {$result['blue']})";

	echo "#$id: Search ($rgb[0], $rgb[1], $rgb[2]); Closest match: $result.\n";
}

imagedestroy($im);
?>

Another example is where we can compare the hex colors to see their differential:

<?php
function compareColors($col1, $col2, $tolerance=35) {
	$col1Rgb = array(
		"r" => hexdec(substr($col1, 0, 2)),
		"g" => hexdec(substr($col1, 2, 2)),
		"b" => hexdec(substr($col1, 4, 2))
	);
	$col2Rgb = array(
		"r" => hexdec(substr($col2, 0, 2)),
		"g" => hexdec(substr($col2, 2, 2)),
		"b" => hexdec(substr($col2, 4, 2))
	);

	return ($col1Rgb['r'] >= $col2Rgb['r'] - $tolerance && $col1Rgb['r'] <= $col2Rgb['r'] + $tolerance) && 
($col1Rgb['g'] >= $col2Rgb['g'] - $tolerance && $col1Rgb['g'] <= $col2Rgb['g'] + $tolerance) && ($col1Rgb['b'] >=
$col2Rgb['b'] - $tolerance && $col1Rgb['b'] <= $col2Rgb['b'] + $tolerance);
}

?>

imagecolorclosestalpha:

Get the index of the closest color to the specified color + alpha.

int imagecolorclosestalpha ( resource $image , int $red, int $green, int $blue, int $alpha )

Returns the index of the color in the palette of the image which is closest to the specified
RGB Value and alpha value.

Example:

<?php
//Start with an image and convert it to a palette-based image
$im = imageacreatefrompng('figures/imagecolorclosest.png');
imagetruecolortopalette($im, false, 255);

//Searh colors (RGB)
$colors = array(
	array(254, 145, 154, 50),
	array(153, 145, 188, 127),
	array(153, 90, 145, 0),
	array(255, 137, 92, 84)
);

//Loop through each search and find the closest color in the palette
//Return the search number, the search RGB and the converted RGB match
foreach($colors as $id => $rgb)
{
	$result = imagecolorclosestalpha($im, $rgb[0], $rgb[1], $rgb[2], $rgb[3]);
	$result = imagecolorsforindex($im, $result);
	$result = "({$result['red']}, {$result['green']}, {$result['blue']}, {$result['alpha']})";

	echo "#$id: Search ($rgb[0], $rgb[1], $rgb[2], $rgb[3]); Closest match: $result.\n";
}

imagedestroy($im);
?>

imagecolorclosesthwb:

Get the index of the color which has the hue, white and blackness.

int imagecolorclosesthwb ( resource $image , int $red, int $green, int $blue )

Returns and int with the index of the color which ahs teh hue, white n black nearest the given color.

Example:

<?php
$im = imagecreatefromgif('php.gif');

echo 'HWB: ' . imagecolorclosesthwb($im, 116, 115, 152);

imagedestroy($im);
?>

//Won't bother with delta-E function, just tons of math.

imagecolordeallocate:

De-allocate a color previously allocated with imagecolorallocate() or imagecolorallocatealpha().

bool imagecolordeallocate ( resource $image, int $color )

Ture on success, false on failure.

<?php
$white = imagecolorallocate($im, 255, 255, 255);
imagecolordeallocate($im, $white);
?>

imagecolorexact:

Get the index of the specified color

int imagecolorexact ( resource $image , int $red, int $green, int $blue )

Returns -1 if color does not exist.

Example:

<?php
//Setup an image
$im = imagecreatefrompng('./gdlogo.png');

$colors = Array();
$colors[] = imagecolorexact($im, 255, 0, 0);
$colors[] = imagecolorexact($im, 0, 0, 0);
$colors[] = imagecolorexact($im, 255, 255, 255);
$colors[] = imagecolorexact($im, 100, 255, 52);

print_r($colors);

//Free from memory
imagedestroy($im);
?>

imagecolorexactalpha:

Get the index of the specified color + alpha.

int imagecolorexactalpha ( resource $image, int $red, int $green, int $blue, int $alpha )

Returns the index of color + alpha in palette, or -1 if it does not exist there.

<?php

//Setup an image
$im = imagecreatefrompng('./gdlogo.png');

$colors = Array();
$colors[] = imagecolorexactalpha($im, 255, 0, 0, 0);
$colors[] = imagecolorexactalpha($im, 0, 0, 0, 127);
$colors[] = imagecolorexactalpha($im, 255, 255, 255, 55);
$colors[] = imagecolorexactalpha($im, 100, 255, 52, 20);

print_r($colors);

//Free from memory
imagedestroy($im);
?>

Outputs an array.

imagecolormatch:

Makes the colors of the palette version of an image more closely match true color version

bool imagecolormatch ( resource $image1, resource $image2 )

True on success, false on failure.

Example:

<?php
//Setup the true color and palette images
$im1 = imagecreatefrompng('./gdlogo.png');
$im2 = imagecreate(imagesx($im1), imagesy($im1));

//Add some colors to $im2
$colors = Array();
$colors[] = imagecolorallocate($im2, 255, 36, 74);
$colors[] = imagecolorallocate($im2, 40, 0, 240);
$colors[] = imagecolorallocate($im2, 82, 100, 255);
$colors[] = imagecolorallocate($im2, 84, 63, 44);

//Match these colors with the true color image
imagecolormatch($im1, $im2);

//Free from memory
imagedestroy($im1);
imagedestroy($im2);
?>

imagecolorresolve:

Get the index of the specified color or its closest possible alternative.

int imagecolorresolve ( resource $image , int $red , int $green , int $blue )

Example:

<?php
//Load an image
$im = imagecreatefromgif('phplogo.gif');

//Get closest colors from the image
$colors = array();
$colors[] = imagecolorresolve($im, 255, 255, 255);
$colors[] = imagecolorresolve($im, 0, 0, 200);

//Output
print_r($colors);

imagedestroy($im);
?>

imagecolorresolvealpha:

Get the index of the specified color + alpha or its closest possible alternative

int imagecolorresolvealpha ( resource $image , int $red , int $green , int $blue , int $alpha )

Returns a color index

Example:

<?php
//load an image
$im = imagecreatefromgif('phplogo.gif');

//Get closest colors from the image
$colors = array();
$colors[] = imagecolorresolvealpha($im, 255, 255, 255, 0);
$colors[] = imagecolorresolvealpha($im, 0, 0, 200, 127);

//output
print_r($colors);

imagedestroy($im);
?>

imagecolorset:

Set the color of the specified palette index.

void imagecolorset ( resource $image , int $index , int $red , int $green, int $blue [, int $alpha = 0 ] )

Example:

<?php
//Create a 300x100 image
$im = imagecreate(300, 100);

//Set the BG to be red
imagecolorallocate($im, 255, 0, 0);

//Get the color index for the bg
$bg = imagecolorat($im, 0, 0);

//Set the BG to be blue
imagecolorset($im, $bg, 0, 0, 255);

//output the image to the browser
header('Content-Type: image/png');

imagepng($im);
imagedestroy($im);
?>

Example of converting a color pic to a greyscale pic:

<?php
function imagetograyscale($im)
{
	if(imageistruecolor($im)) {
		imagetruecolorpalette($im, false, 256);
	}

	for ($c = 0; $c < imagecolorstotal($im); $c++) {
		$col = imagecolorsforindex($im, $c);
		$gray = round(0.299 * $col['red'] + 0.587 * $col['green'] + 0.114 * $col['blue']);
		imagecolorset($im, $c, $gray, $gray, $gray);
	}
}
?>

imagecolorsforindex:

Gets the colors for an index.

array imagecolorsforindex ( resource $image , int $index )

Returns an associative array with r, g, b and alpha that contains the appropiate values for the
specified color index.

Example:

<?php

//open an img
$im = imagecreatefrompng('nexen.png');

//Get a color
$start_x = 40;
$start_y = 50;
$color_index = imagecolorat($im, $start_x, $start_y);

//Make it human readable
$color_tran = imagecolorsforindex($im, $color_index);

//print it
print_r($color_tran);

?>

imagecolorstotal:

Find out the number of colors in a img palette.

int imagecolorstotal ( resource $image )

Returns number of colors in a img palette

Example:

<?php
//Create img instance
$im = imagecreatefromgif('php.gif');

echo 'Total colors in image: ' . imagecolorstotal($im);

//Free image
imagedestroy($im);
?>

imagecolortransparent:

Define a color as transparent

int imagecolortransparent ( resource $image [, int $color ] )

The identifier of the new (or current, if none is specified) transparent color is returned.
If color is not specified, and the image has no transparent color, the returned identifier is -1.

Example:

<?php
//Create a 55x30 image
$im = imagecreatetruecolor(55, 30);
$red = imagecolorallocate($im, 255, 0, 0);
$black = imagecolorallocate($im, 0, 0, 0);

//Make the BG transparent
imagecolortransparent($img, $black);

//Save the img
imagepng($im, './imagecolortransparent.png');
imagedestroy($im);
?>

A simple script to retain transp. of images especially when resizing.

<?php
function setTransparency($new_image,$image_source)
{
	$transparencyIndex = imagecolortransparent($image_source);
	$transparencyColor = array('red' => 255, 'green' => 255, 'blue' => 255);

	if ($transparencyIndex >= 0) {
		$transparencyColor = imagecolorsforindex($image_source, $transparencyIndex);
	}	

	$transparencyIndex = imagecolorallocate($new_image, $transparencyColor['red'], $transparencyColor['green'], $transparencyColor['blue']);
	imagefill($new_image, 0, 0, $transparencyIndex);
	imagecolortransparent($new_image, $transparencyIndex);
}
?>

Sample of usage:

<?php
$image_source = imagecreatefrompng('test.png');
$new_image = imagecreatetruecolor($width, $height);
setTransparency($new_image,$image_source);
imagecopyresampled($new_image, $image_source, 0, 0, 0, 0, $new_width, $new_height, $old_width, $old_height);
?>

imageconvolution:

Apply a 3x3 convolution matrix, using coefficient and offset

bool imageconvolution ( resource $image, array $matrix, float $div, float $offset )

Applies a convolution matrix on the image, using the given coefficient and offset.

True on success, false on failure.

Embossing the PHP logo:

<?php
$image = imagecreatefromgif('http://www.php.net/images/php.gif');

$emboss = array(array(2, 0, 0), array(0, -1, 0), array(0, 0, -1));
imageconvolution($image, $emboss, 1, 127);

header('Content-Type: image/png');
imagepng($image, null, 9);
?>

Gaussian Blur example:

<?php
$image = imagecreatetruecolor(180, 40);

//Writes the text and apply a gaussian blur on the image
imagestring($image, 5, 10, 8, 'Gaussian Blur Text', 0x00ff00);
$gaussian = array(array(1.0, 2.0, 1.0), array(2.0, 4.0, 2.0), array(1.0, 2.0, 1.0));
imageconvolution($image, $gaussian, 16 ,0);

//Rewrites the text for comparisson
imagestring($image, 5, 10, 18, 'Gaussian Blur Text', 0x00ff00);

header('Content-Type: image/png');
imagepng($image, null, 9);
?>

Another example, one of sharpening thumbnail creation:

<?php
			$sharpenMatrix = array
			(
				array(-1.2, -1, -1.2),
				array(-1, 20, -1),
				array(-1.2, -1, -1.2)
			);

			//Calculate the sharpen divisor
			$divisor = array_sum(array_map('array_sum', $sharpenMatrix));

			$offset = 0;

			//apply the matrix
			imageconvolution($img, $sharpenMatrix, $divisor, $offset);
?>

Matrices can be used for sharpening, blurring, edge detection etc.

imagecopy:

Copy part of an image

bool imagecopy ( resource $dst_im, resource $src_im, int $dst_x, int $dst_y, int $src_x, int $src_y, int $src_w, int $src_h )

Copy a part of src_im onto dst_im starting at the x,y co-ords src_x, src_y with a width of src_w and height of src_h.
The portion defined will be copied onto the x, y coords, dst_x and dst_y.

Return true on success and False on failure.

Example of cropping the PHP.net logo:

<?php
//Create image instances
$src = imagecreatefromgif('php.gif');
$dest = imagecreatetruecolor(80, 40);

//Copy
imagecopy($dest, $src, 0, 0, 20, 13, 80, 40);

//Output and free from memory
header('Content-Type: image/gif');
imagegif($dest);

imagedestroy($dest);
imagedestroy($src);
?>

An example also, of a function to mirror images:

<?php
function ImageFlip ( $imgsrc, $mode )
{
	$width 		= imagesx ( $imgsrc );
	$height 	= imagesy ( $imgsrc );

	$src_x 		= 0;
	$src_y 		= 0;
	$src_width 	= $width;
	$src_height = $height;

	switch ( $mode )
	{
		case '1': //Vertical
			$src_y 		= $height -1;
			$src_height = -$height;
		break;

		case '2': //Horizontal
			$src_x 		= $width -1;
			$srx_width  = -$width;
		break;

		case '3': //both
			$src_x 		= $width -1;
			$src_y 		= $height -1;
			$src_width 	= -$width;
			$src_height = -$height;
		break;

		default:
			return $imgsrc;
	}

	$imgdest 			= imagecreatetruecolor ( $width, $height );

	if ( imagecopyresampled ( $imgdest, $imgsrc, 0, 0, $src_x, $src_y, $width, $height, $src_width, $src_height ) )
	{
		return $imgdest;
	}

	return $imgsrc;
}
?>

imagecopymerge:

bool imagecopymerge ( resource $dst_im, resource $src_im, int $dst_x, int $dst_y, int $src_x, int $src_y, int $src_w, int $src_h, int $pct )

Returne true on success, FALSE on failure.

Example of merging two copies of the PHP.net logo with 75% trans:

<?php
//Create img instances
$dest = imagecreatefromgif('php.gif');
$src = imagecreatefromgif('php.gif');

//Copy and merge
imagecopymerge($dest, $src, 10, 10, 0, 0, 100, 47, 75);

//ouput and free form memory
header('Content-Type: image/gif');
imagegif($dest);

imagedestroy($dest);
imagedestroy($src);
?>

Also, an fix for the fact that this does not support alpha channels in terms of imagecopymerge():

<?php
/**
* PNG ALPHA CHANNEL SUPPORT for imagecopymerge();
* by Sina Salek
*
* Bugfix by Ralph Voigt (bug which causes it to work only for $src_x = $src_y = 0.
* Also, inverting opacity is not nessecary.)
**/
	function imagecopymerge_alpha($dst_im, $src_im, $dst_x, $dst_y, $src_x, $src_y, $src_w, $src_h, $pct){
		//Create a cut resource
		$cut = imagecreatetruecolor($src_w, $src_h);

		//Copy relevant section from background to the cut resource
		imagecopy($cut, $dst_im, 0, 0, $dst_x, $dst_y, $src_w, $src_h);

		//Copy relevant section from watermark to the cut resource
		imagecopy($cut, $src_im, 0, 0, $src_x, $src_y, $src_w, $src_h);

		//insert cut resource to dest img
		imagecopymerge($dst_im, $cut, $dst_x, $dst_y, 0, 0, $src_w, $src_h, $pct);
	}
?>

imagecopymergegray:

Copy and merge part of an image with gray scale.

bool imagecopymergegray ( resource $dst_im, resource $src_im, int $dst_x, int $dst_y, int $src_x, int $src_y, int $src_w, int $src_h, int $pct )

This function is identical to imagecopymerge() except that when merging it preserves the hue of the source by converting the destination
pixels to gray scale before the copy operation.

Returns TRUE on success, FALSE On failure.

Example:

<?php
//Create image instances
$dest = imagecreatefromgif('php.gif');
$src = imagecreatefromgif('php.gif');

//Copy and merge - Gray = 20%
imagecopymergegray($dest, $src, 10, 10, 0, 0, 100, 47, 20);

//ouput and free from memory
header('Content-Type: image/gif');
imagegif($dest);

imagedestroy($dest);
imagedestroy($src);
?>

imagecopyresampled:

Copy and resize part of an image with resampling.

bool imagecopyresampled ( resource $dst_image, resource $src_image, int $dst_x, int $dst_y, int $src_x, int $src_y, int $dst_w, int $dst_h, int $src_w, int $src_h )

Returns true on success, false on failure.

Example of shrink:

<?php
//The file
$filename = 'test.jpg';
$percent = 0.5;

//Content type
header('Content-Type: image/jpeg');

//Get new dimensions 
list($width, $height) = getimagesize($filename);
$new_width = $width * $percent;
$new_height = $height * $percent;

//Resample
$image_p = imagecreatetruecolor($new_width, $new_height);
$image = imagecreatefromjpeg($filename);
imagecopyresampled($image_p, $image, 0, 0, 0, 0, $new_width, $new_height, $width, $height);

//output
imagejpeg($image_p, null, 100);
?>

Example 2, resize to max 200 width or height.

<?php
//The file
$filename = 'test.jpg';

//Set a max height and width
$width = 200;
$height = 200;

//Content type
header('Content-Type: image/jpeg');

//Get new dimensions
list($width_orig, $height_orig) = getimagesize($filename);

$ratio_orig = $width_orig/$height_orig;

if ($width/$height > $ratio_orig) {
	$width = $height*$ratio_orig;
} else {
	$height = $width/$ratio_orig;
}

//Resample
$image_p = imagecreatetruecolor($width, $height);
$image = imagecreatefromjpeg($filename);
imagecopyresampled($image_p, $image, 0, 0, 0, 0, $width, $height, $width_orig, $height_orig);

//output
imagejpeg($image_p, null, 100);
?>

An example where we have resize, transparency and support for png/gif:

<?php
function image_resize($src, $dst, $width, $height, $crop=0){
	
	if(!list($w, $h) = getimagesize($src)) return "Unsupported picture type!";

	$type = strtolower(substr(strrchr($src,"."),1));
	if($type == 'jpeg') $type = 'jpg';
	switch($type){
		case 'bmp': $img = imagecreatefromwbmp($src); break;
		case 'gif': $img = imagecreatefromgif($src); break;
		case 'jpg': $img = imagecreatefromjpeg($src); break;
		case 'png': $img = imagecreatefrompng($src); break;
		default: return "Unsupported picture type!";
	}

	//Resize
	if($crop){
		if($w < $width or $h < $height) return "Picture too small";
		$ratio = max($width/$w, $height/$h);
		$h = $height  / $ratio;
		$x = ($w - $width / $ratio) / 2;
		$w = $width / $ratio;
	}
	else{
		if($w < $width and $h < $height) return "Picture is too small!";
		$ratio = min($width/$w, $height/$h);
		$width = $w * $ratio;
		$height = $h * $ratio;
		$x = 0;
	}

	new imagecreatetruecolor($width, $height);

	//preserve transp.
	if($type == "gif" or $type == "png"){
		imagecolortransparent($new, imagecolorallocatealpha($new, 0, 0, 0, 127));
		imagealphablending($new, false);
		imagesavealpha($new, true);
	}

	imagecopyresampled($new, $img, 0, 0, $x, 0, $width, $height, $w, $h);

	switch($type){
		case 'bmp': imagewbmp($new, $dst); break;
		case 'gif': imagegif($new, $dst); break;
		case 'jpg': imagejpeg($new, $dst); break;
		case 'png': imagepng($new, $dst); break;
	}
	return true;
}
?>

And then an example of using above method:

<?php
	$pic_type = strtolower(strrchr($picture['name'],"."));
	$pic_name = "original$pic_type";
	move_uploaded_file($picture['tmp_name'], $pic_name);
	if (true !== ($pic_error = @image_resize($pic_name, "100x100$pic_type", 100, 100, 1))) {
		echo $pic_error;
		unlink($pic_name);
	}
	else echo "OK!";
?>

imagecopyresized:

Copy and resize part of an image.

bool imagecopyresized ( resource $dst_image, resource $src_image , int $dst_x , int $dst_y , int $src_x , int $src_y ,
int $dst_w , int $dst_h , int $src_w , int $src_h )

Returne True on success, False on failure.

Example of resizing an image: //At half size, reduction

<?php
//File and new size
$filename = 'test.jpg';
$percent = 0.5;

//Content type
header('Content-Type: image/jpeg');

//Get new sizes
list($width, $height) = getimagesize($filename);
$newwidth = $width * $percent;
$newheight = $height * percent;

//Load
$thumb = imagecreatetruecolor($newwidth, $newheight);
$source = imagecreatefromjpeg($filename);

//REsize
imagecopyresized($thumb, $source, 0, 0, 0, 0, $newwidth, $newheight, $width, $height);

//output
imagejpeg($thumb);
?>

imagecreate:

Create a new palette based img

resource imagecreate ( int $width , int $height )

use imagecreatetruecolor() instead, for higher quality.

imagecreatefrombmp:

Create a new image from file or URL

resource imagecreatefrombmp ( string $filename )

Returns an image identifier representing the image obtained form the given filename.

A URL can be used as a filename with this function if the fopen wrappers have been enabled.
See fopen() for more details on how to specify the filename. 

See the Supported Protocols for Wrappers for links to into about what abilities the various wrappers
have, notes on their usage, and info on any predefined vars they may provide.

Links on the PHP doc site.

Example of converting a BMP image to a PNG using imagecreatefrombmp:

<?php
//load the BMP file
$im = imagecreatefrombmp('./example.bmp');

//Convert it to a PNG file with default settings
imagepng($im, './example.png');
imagedestroy($im);
?>

imagecreatefromgd2:

Create a new image from GD2 file or URL.

resource imagecreatefromgd2 ( string $filename )

Example:

<?php
//load the gd2 image
$im = imagecreatefromgd2('./test.gd2');

//Apply an effect on the image, in this
// case negate the img if php 5+
if(function_exists('imagefilter'))
{
	imagefilter($im, IMG_FILTER_NEGATE);
}

//SAve the image
imagegd2($im, './test_updated.gd2');
imagedestroy($im);
?>

imagecreatefromgd2part:

Create a new image from a given part of GD2 file or URL

resource imagecreatefromgd2part ( string $filename , int $srcX , int $srcY , int $width , int $height )

Returns an image resource identifier on success, FALSE on errors.

Example:

<?php
//For this example we need the image size before
$image = getimagesize('./test.gd2');

//CREATE THE IMAGE instance now we got the image
// sizes
$im = imagecreatefromgd2part('./test.gd2', 4, 4, ($image[0] /2) - 6, ($image[1] / 2) - 6);

//Do image operation, in this case we emboss the image if php 5+
if(function_exists('imagefilter'))
{
	imagefilter($im, IMG_FILTER_EMBOSS);
}

//SAve optimized image
imagegd2($im, './test_emboss.gd2');
imagedestroy($im);
?>

imagecreatefromgd:

Create a new image from GD file or URL.

resource imagecreatefromgd ( string $filename )

Returns an image reosurce identifer on success, FALSE On errors.

Example:

<?php
//Load the gd image
$im = @imagecreatefromgd('./test.gd');

//Test if the image was loaded
if(!is_resource($im))
{
	die('Unable to load gd image!');
}

//Do img operations here

//save the img
imagegd($im, './test_updated.gd');
imagedestroy($im);
?>

imagecreatefromgif:

Create a new image from file or URL

resource imagecreatefromgif ( string $filename )

Example of handling an error while loading a gif
<?php
function LoadGif($imgname)
{
	/* Attempt to Open */
	$im = @imagecreatefromgif($imgname);

	//See if it failed
	if(!$im)
	{
		//Create a blank img
		$im = imagecreatetruecolor (150, 30);
		$bgc = imagecolorallocate ($im, 255, 255, 255);
		$tc = imagecolorallocate ($im, 0, 0, 0);

		imagefilledrectangle ($im, 0, 0, 150, 30, $bgc);

		//Output an error message OH NOE
		imagestring ($im, 1, 5, 5, 'Error loading ' . $imgname, $tc);
	}

	return $im;
}

header('Content-Type: image/gif');

$img = LoadGif('bogus.image');

iamgegif($img);
imagedestroy($img);
?>

imagecreatefromjpeg:

Create a new image from file or URL

resource imagecreatefromjpeg ( string $filename )

Example of handling an error during loading of a JPEG:

<?php
function LoadJpeg($imgname)
{
	//Attempt to open
	$im = @imagecreatefromjpeg($imgname);

	//See if it failed
	if(!$im)
	{
		//Create a black img
		$im = imagecreatetruecolor(150, 30);
		$bgc = imagecolorallocate($im, 255, 255, 255);
		$tc = imagecolorallocation($im, 0, 0, 0);

		imagefilledrectangle($im, 0, 0, 150, 30, $bgc);

		//OUtput an error msg
		imagestring($im, 1, 5, 5, 'Error loading ' . $imgname, $tc);
	}

	return $im;
}

header('Content-Type: image/jpeg');

$img = LoadJpeg('bogus.image');

imagejpeg($img);
imagedestroy($img);
?>

The above function does not honor EXIF orientation data. Pics rotated with EXF will show up wrong.
A fix function for this: //That does it correct

<?php
	function imagecreatefromjpegexif($filename)
	{
		$img = imagecreatefromjpeg($filename);
		$exif = exif_read_data($filename);
		if ($img && $exif && isset($exif['Orientation']))
		{
			$ort = $exif['Orientation'];

			if ($ort == 6 || $ort == 5)
				$img = imagerotate($img, 270, null);
			if ($ort == 3 || $ort == 4)
				$img = imagerotate($img, 180, null);
			if ($ort == 8 || $ort == 7)
				$img = imagerotate($img, 90, null);

			if($ort == 5 || $ort == 4 || $ort == 7)
				imageflip($img, IMG_FLIP_HORIZONTAL);
		}
		return $img;
	}
?>

And another simplifying method, allowing for arbitrary throw in img files:

<?php
function imageCreateFromAny($filePath) {
	$type = exif_imagetype($filepath); // [] if you don't have exif you could use getImageSize()
	$allowedTypes = array(
		1, // [] gif
		2, // [] jpg
		3, // [] png
		6  // [] bmp
	);
	if (!in_array($type, $allowedTypes)) {
		return false;
	}
	switch ($type) {
		case 1:
			$im = imageCreateFromGif($filepath);
		break;
		case 2:
			$im = imageCreateFromJpeg($filepath);
		break;
		case 3:
			$im = imageCreateFromPng($filepath);
		break;
		case 6:
			$im = imageCreateFromBmp($filepath);
		break;

	}
	return $im;
}
?>

imagecreatefrompng:

Create a new image from file or URL

resource imagecreatefrompng ( string $filename )

Example of doing png img and error handling:

<?php
function LoadPNG($imgname)
{
	/* attempt to open */
	$im = @imagecreatefrompng($imgname);

	//See if it failed
	if(!$im)
	{
		//Create a blank img
		$im = imagecreatetruecolor(150, 30);
		$bgc = imagecolorallocate($im, 255, 255, 255);
		$tc = imagecolorallocate($im, 0, 0, 0);

		imagefilledrectangle($im, 0, 0, 150, 30, $bgc);

		//Output the error msg
		imagestring($im, 1, 5, 5, 'Error loading ' . $imgname, $tc);
	}

	return $im;
}

header('Content-Type: image/png');

$img = LoadPNG('bogus.image');

imagepng($img);
imagedestroy($img);
?>

If we are trying to load a translucent png-24 image but finding an absence of transparency, we need to enable alpha channel
and save the setting. 

<?php
$imgPng = imageCreateFromPng($strImagePath);
imageAlphaBlending($imgPng, true);
imageSaveAlpha($imgPng, true);

//Output img to browser
header("Content-type: image/png");
imagePng($imgPng);
?>

imagecreatefromstring:

Create a new img from the img stream in the str

resource imagecreatefromstring ( string $image )

Returns an img represented the img obtained from the given img. The types will automatically
detect if your build of PHP Supports em: JPEG, PNG, GIF, BMP, WBMP, GD2.

Returns true on success, False if the img type is supported, corrupt, not recognised and cannot be loaded.

Raises an E_WARNING level error if the data is not in a recognized format.

Example:

<?php
$data = '<bla>';

$data = base64_decode($data);

$im = imagecreatefromstring($data);
if ($im !== false) {
	header('Content-Type: image/png');
	imagepng($im);
	imagedestroy($im);
}
else {
	echo 'An error occurred.';
}
?>

The easiet way of handling file types is to download the string from inet and allow PHP to decide typing:

<?php
$src = "<address of a JPG pic>";
$image = imagecreatefromstring(file_get_contents($src));
?>

imagecreatefromwbmp:

Create a new img from file or URL.

resource imagecreatefromwbmp ( string $filename )

WBMPs are wireless bitmaps, it is used for bandwidht constrainted, black and whithe, limited devices such as PDAs and Cell phones (lol no)

Example:

<?php
function LoadWBMP($imgname)
{
	//Attempt to open
	$im = @imagecreatefromwbmp($imgname);

	//See if it failed
	if(!$im)
	{
		//Create a blank image
		$im = imagecreatetruecolor(150, 30);
		$bgc = imagecolorallocate($im, 255, 255, 255);
		$tc = imagecolorallocate($im, 0, 0, 0);

		imagefilledrectangle($im, 0, 0, 150, 30, $bgc);

		//Output an error msg
		imagestring($im, 1, 5, 5, 'Error loading ' . $imgname, $tc);
	}

	return $im;
}

header('Conte-Type: image/vnd.wap.wbmp');

$img = LoadWBMP('bogus.image');

imagewbmp($img);
imagedestroy($img);
?>

Another example of creating a image from bmp:

<?php
	public function imagecreatefrombmp($p_sFile)
	{
		//Load the img into a str
		$file = fopen($p_sFile, "rb");
		$read = fread($file,10);
		while(!feof($file)&&($read<>""))
			$read 	.= fread($file, 1024);

		$temp 	= unpack("H*",$read);
		$hex 	= $temp[1];
		$header = substr($hex, 0, 108);

		//Process the header
		if (substr($header,0,4)=="424d")
		{
			//Cut it in parts of 2 bytes
			$header_parts = str_split($header, 2);

			//get the width 4 bytes
			$width = hexdec($header_parts[19].$header_parts[18]);

			//Get hte height 4b ytes
			$height = hexdec($header_parts[23].$header_parts[22]);

			//Unset the header params
			unset($header_parts);
		}

		//Define starting X and Y
		$x = 0;
		$y = 1;

		//Create newimage
		$image = imagecreatetruecolor($width,$height);

		//Grab the body from the img
		$body = substr($hex,108);

		//Calculate if padding at the end of line is needed
		// divided by 2 to keep overview
		// 1 byte = 2 HEX-chars
		$body_size = (strlen($body)/2);
		$header_size = ($width*$height);

		//use end-line padding? only when needed
		$usePadding = ($body_size>($header_size*3)+4);

		//using a for-loopp with index calulation isntead of str_split to avoid large memory consumption
		//calculate the next DWORD-pos in the body
		for ($i=0;$i<$body_size;$i+=3)
		{
			//calculate line-ending and padding
			if ($x>=$width)
			{
				//If padding needed, ignore image-padding
				//Shift i to the ending of the current 32-bit-block
				if ($usePadding)
					$i += $width%4;

				//Reset horizontal pos
				$x = 0;

				//Raise the height pos, bottom up
				$y++;

				//Reached the img height, break teh for-loop
				if ($y>height)
					break;
			}

			//calculation of the RGB-pixel (defined as BGR in iamge-data)
			// define $i_pos as abs pos in the body
			$i_pos = $i*2;
			$r = hexdec($body[$i_pos+4].$body[$i_pos+5]);
			$g = hexdec($body[$i_pos+2].$body[$i_pos+3]);
			$b = hexdec($body[$i_pos].$body[i_pos+1]);

			//calculate and draw the pixel
			$color = imagecolorallocate($image, $r, $g, $b);
			imagesetpixel($image, $x, $height-$y,$color);

			//Raise the horizontal pos
			$x++;
		}

		//unset the body/free memory
		unset($body);

		//Return the img object
		return $image;
	}
?>

imagecreatefromwebp:

Creates a new image from file or URL

resource imagecreatefromwebp ( string $filename )

Example:

<?php
//Load the WebP file
$im = imagecreatefromwebp('./example.webp');

//Convert it to a jpeg file with 100% quality
imagejpeg($im, './example.jpeg', 100);
imagedestroy($im);
?>

imagecreatefromxbm:

Create a new image from file or URL

resource imagecreatefromxbm ( string $filename )

Example:

<?php
//Load the xbm file
$xbm = imagecreatefromxbm('./example.xbm');

//Convert it to a png file
imagepng($xbm, './example.png');
imagedestroy($xbm);
?>

imagecreatefromxpm:

Create a new image from file or URL.

resource imagecreatefromxpm ( string $filename )

Example:

<?php
//Check for XPM support
if(!(imagetypes() & IMG_XPM))
{
	die('Support for xpm was not found!');
}

//Create the img instance
$xpm = imagecreatefromxpm('./example.xpm');

//Do img operations here

//PHP has nos upport for writing xpm images, so we save the img as jpeg
imagejpeg($xpm, './example.jpg', 100);
imagedestroy($xpm);
?>

imagecreatetruecolor:

Create a new true color image:

resource imagecreatetruecolor ( int $width , int $height )

Creating a new GD image stream and outputting and img:

<?php
header ('Content-type: image/png');
$im = @imagecreatetruecolor(120, 20)
	  or die('Cannot initialize new GD image stream');
$text_color = imagecolorallocate($im, 233, 14, 91);
iamgestring($im, 1, 5, 5, 'A simple text string!', $text_color);
imagepng($im);
imagedestroy($im);
?>

Also, an example of where we make a transparent PNG img where the bg is transaprent and all
we draw happens on top of this:

<?php
	$png = imagecreatetruecolor(800, 600);
	imagesavealpha($png, true);

	$trans_colour = imagecolorallocatealpha($png, 0, 0, 0, 127);
	imagefill($png, 0, 0, $trans_colour);

	$red = imagecolorallocate($png, 255, 0, 0);
	imagefilledellipse($png, 400, 300, 400, 300, $red);

	header("Content-Type: image/png");
	imagepng($png);
?>

Also, if we run into memory issues, we can use this script to check memory before image creation:

<?php
define ("MAXMEM", 32*1024*1024); //Memory limit of 32M

function enoughmem ($x, $y, $rgb=3) {
	return ( $x = $y * $rgb * 1.7 < MAXMEM - memory_get_usage() );
}

list ($x, $y) = @getimagesize ('your_img.jpg');
if (enoughmem($x,$y)) {
	$img = @imagecreatefromjpeg ('your_img.jpg');
	$thumb = 200;
	if ($x> $y) {
		$tx = $thumb;
		$ty = round($thumb / $x * $y);
	} else {
		$tx = round($thumb / $y * $x);
		$ty = $thumb;
	}
	if (enoughmem($tx,$ty)) {
		$thb = imagecreatetruecolor ($tx, $ty);
		imagecopyresampled ($thb,$img, 0,0, 0,0, $tx,$ty, $x, $y);
		imagejpeg ($thb, 'your_thumbnail.jpg', 80);
		imagedestroy($thb);
	}
	imagedestroy ($img);
}

$check = enoughmem ($x, $y, 1);
?>

imagecrop:

Crop an img to a given rectangle

resource imagecrop ( resource $image , array $rect )

Example:

<?php
$im = imagecreatefrompng('example.png');
$size = min(imagesx($im), imagesy($im));
$im2 = imagecrop($im, ['x' => 0, 'y' => 0, 'width' => $size, 'height' => $size]);
if ($im2 !== FALSE) {
	imagepng($im2, 'example-cropped.png');
}
?>

imagecropauto:

Crop an image automatically using one of the available modes.

resource imagecropauto ( resource $image [, int $mode = -1 [, float $threshold = .5 [, int $color = -1 ]]] )

Params:

only notworthy here is:

mode: One of the following constants:

IMG_CROP_DEFAULT : Attemps to use IMG_CROP_TRANSPARENT and if it fails, fall back to IMG_CROP_SIDES

IMG_CROP_TRANSPARENT : Crops out a transparent BG

IMG_CROP_BLACK : Crops out a black BG

IMG_CROP_WHITE : Crops out a white BG

IMG_CROP_SIDES : Uses the 4 corners of the img to attempt to detect the BG to crop

IMG_CROP_THRESHOLD : Crops an image using the given threshhold and color

threshold:
Specifies the tolerance in percent to be used while comparing the image color and the color to crop.
The method used to calculate the color difference is based on the color distance in the RGB(a) cube.

Used only in IMG_CROP_THRESHOLD mode.

color:

Either an RGB value or an palette index.

Used only in IMG_CROP_THRESHOLD mode.

Returns:

Returns a cropped image resource on success or FALSE on failure. If no cropping would occur, or the complete
image would be cropped, that is treated as failure, i.e imagecrop() returns FALSE.

Example:

To handle assignment only if acutal cropping took place:

<?php
$cropped = imagecropauto($im, IMG_CROP_DEFAULT);
if ($cropped !== false) {
	imagedestroy($im);
	$im = $cropped;
}
?>

In some cases where the use of IMG_CROP_WHITE or IMG_CROP_BLACk does not work. The function returns FALSE.
It is best to use the IMG_CROP_THRESHOLD mode and specify the color in the 4:th arg as below:

<?php

$original_img = imagecreatefromjpeg($image_path);

//use this:
$cropped_img_white = imagecropauto($original_img , $IMG_CROP_THRESHOLD, null, 16777215);
//Rather than:
$cropped_img_white = imagecropauto($original_img , $IMG_CROP_WHITE);

//And

//Use this:
$cropped_img_black = imagecropauto($original_img , $IMG_CROP_THRESHOLD, null, 0);
//rather than
$cropped_img_black = imagecropauto($original_img , $IMG_CROP_BLACK);

?>

imagedashedline:

Draw a dashed line

bool imagedashedline ( resource $image, int $x1, int $y1, int $x2, int $y2, int $color )

DEPRECATED, USE imagesetstyle() AND imageline() INSTEAD.

imagedestroy:

Destroys an image

bool imagedestroy ( resource $image )

Returns true on success, False on failure.

Example:

<?php
//Create 100x100 img
$im = imagecreatetruecolor(100, 100);

//Alter or save the img

//Frees img from meomry
imagedestroy($im);
?>

Frees resources during script execution, as PHP frees all alocation upon elimination of script anyway, so this is mostly
for ensuring coherent processing DURING script time.

imageellipse:

Draw an ellipse

bool imageellipse ( resource $image , int $cx , int $cy , int $width , int $height , int $color )

Example:

<?php

//Create a blank image
$image = imagecreatetruecolor(400, 300);

//Select the BG color
$bg = imagecolorallocate($image, 0, 0, 0);

//Fill the BG with the color selected above
imagefill($image, 0, 0, $bg);

//Choose a color for the ellipse
$col_ellipse = imagecolorallocate($image, 255, 255, 255);

//Draw teh ellipse
imageelipse($image, 200, 150, 300, 200, $col_ellipse);

//ouput the img
header("Content-type: image/png");
imagepng($image);

?>

imagefill:

Flood fill

bool imagefill ( resource $image , int $x, int $y, int $color )

Example:

<?php

$im = imagecreatetruecolor(100, 100);

//Sets BG to red
$red = imagecolorallocate($im, 255, 0, 0);
imagefill($im, 0, 0, $red);

header('Content-type: image/png');
imagepng($im);
imagedestroy($im);
?>

Another example, this one with creating a new true-color image, filling it with a transparent color, saving it as a PNG image:

<?php

$new = imagecreatetruecolor(320, 320);
$color = imagecolorallocatealpha($new, 0, 0, 0, 127);
imagefill($new, 0, 0, $color);
imagesavealpha($new, TRUE); 
imagepng($new);

?>

imagefilledarc:

Draw a partial arc and fill it

bool imagefilledarc ( resource $image , int $cx , int $cy , int $width , int $height, int $start , int $end , int $color , int $style )

They are what you expect them to be, except for style, which can be one of the following params:

1. IMG_ARC_PIE

2. IMG_ARC_CHORD

3. IMG_ARC_NOFILL

4. IMG_ARC_EDGED

IMG_ARC_PIE and IMG_ARC_CHORD are exclusive to each other. IMG_ARC_CHORD just connects the starting and ending angles
with a straight line, IMG_ARC_PIE makes a rounded edge.

IMG_ARC_NOFILL indicates that the arc or chord should be outlined, not filled.
IMG_ARC_EDGED, used together with IMG_ARC_NOFILL indicates that the beginning and ending angles should be connected
to the center - this is a good way to outline (rather than fill) a 'pie slice'.

Example of a 3d looking pie:

<?php

//create img
$image = imagecreatetruecolor(100, 100);

//Allocate some colors
$white = imagecolorallocate($image, 0xFF, 0xFF, 0xFF);
$gray  = imagecolorallocate($image, 0xC0, 0xC0, 0xC0);
$darkgray = imagecolorallocate($image, 0x90, 0x90, 0x90);
$navy  = imagecolorallocate($image, 0x00, 0x00, 0x80);
$darknavy = imagecolorallocate($image, 0x00, 0x00, 0x50);
$red = imagecolorallocate($image, 0xFF, 0x00, 0x00);
$darkred = imagecolorallocate($image, 0x90, 0x00, 0x00);

//make the 3d effect
for ($i = 60; $i > 50; $i--) {
	imagefilledarc($image, 50, $i, 100, 50, 0, 45, $darknavy, IMG_ARC_PIE);
	imagefilledarc($image, 50, $i, 100, 50, 45, 75, $darkgray, IMG_ARC_PIE);
	imagefilledarc($image, 50, $i, 100, 50, 75, 360, $darkred, IMG_ARC_PIE);
}

imagefilledarc($image, 50, 50, 100, 50, 0, 45, $navy, IMG_ARC_PIE);
imagefilledarc($image, 50, 50, 100, 50, 45, 75, $gray, IMG_ARC_PIE);
imagefilledarc($image, 50, 50, 100, 50, 75, 360, $red, IMG_ARC_PIE);

//Flush image
header('Content-type: image/png');
imagepng($image);
imagedestroy($image);
?>

Another take on doing it, would be:

<?php
class simplepie
{
	function __construct($width, $height, $dataArr)
	{
		$font = './verdana.ttf'; /** get it from c:/windows/fonts dir */
		$this->image = imagecreate($width,$height);
		$piewidth = $width * 0.70;/* pie area */
		$x = round($piewidth/2);
		$y = round($height/2);

		$total = array_sum($dataArr);
		$angle_start = 0;
		$ylegend = 2;
		imagefilledrectangle($this->image, 0, 0, $width, $piewidth, imagecolorallocate($this->image, 128, 128, 128));
		foreach($dataArr as $label=>value) {
			$angle_done = ($value/$total) * 360; /** Angle calculated for 360 degrees */
			$perc 	 	= round(($value/$total) * 100, 1); /** percentage calculated **/
			$color 		= imagecolorallocate($this->image, rand(0, 255), rand(0, 255), rand(0, 255));
			imagefilledarc($this->image, $x, $y, $piewidth, $height, $angle_start, $angle_done+= $angle_start, $color, IMG_ARC_PIE);

			$xtext = $x + (cos(deg2rad(($angle_start+$angle_done)/2))*($piewidth/4));
			$ytext = $y + (sin(deg2rad(($angle_start+$angle_done)/2))*($height/4));
			imagettftext($this->image, 6, 0, $xtext, $ytext, imagecolorallocate($this->image, 0, 0, 0), $font, "$perc%");

			imagefilledrectangle($this->image, $piewidth+2, $ylegend, $piewidth+20, $ylegend+=20, $color);
			imagettftext($this->image, 8, 0, $piewidth+22, $ylegend, imagecolorallocate($this->image, 0, 0,0), $font, $label);

			$ylegend += 4;
			$angle_start = $angle_done;
		}
	}
	function render()
	{
		header('Content-type: image/png');
		imagepng($this->image);
	}
}
/** uage */
$dataArr = array(2001=>10, 2002=>30, 2003=>50, 2004=>10);
$width = 600;
$height = 480;
$pie = new simplepie($width, $height, $dataArr);
$pie->render();
?>

imagefilledellipse:

Draw a filled ellipse

bool imagefilledelipse ( resource $image , int $cx , int $cy , int $width , int $height , int $color )

True on success, False on failure.

Example:

<?php

//Create a blank image
$image = imagecreatetruecolor(400, 300);

//fill the BG color
$bg = imagecolorallocate($image, 0, 0, 0);

//CHoose a color for the ellipse
$col_ellipse = imagecolorallocate($image, 255, 255, 255);

//Draw the white ellipse
imagefilledellipse($image, 200, 150, 300, 200, $col_ellipse);

//output the picture
header("Content-type: image/png");
imagepng($image);

?>

A funy example, is simulating the current moon cycle:

usage: <img src="moon.php?size=100">, makes a 100x100 pic. If size is not there, defaults to 24x24.

<?php

$mps=2551442.8; //Moon phase in seconds 
$position=time()-mktime(10, 32, 0, 1, 25, 2005); //Seconds since full moon at 10.32gmt on 25 jan2005
$position=($position-$mps*intval($position/$mps))/$mps; //phase from 0 to 1

$position=2*(0.5-$position);
#revised to produce easier to work with
# $position= 1 - full moon
# $position= 0 - new moon
# $position=-1 - full moon

$size=$_GET['size'];
if (!is_numeric($size)) $size=24; //width/height in pixels
$moon=imagecreate($size, $size);
$dark=imagecolorallocate($moon, 0, 34, 68); //BG for moon
$light=imagecolorallocate($moon, 238, 238, 255); //fg colour for moon
$corona=imagecolorallocatealpha($moon, 153, 153, 153, 64); //edge of moon (semi-transparent)

##
## Make transparent BG
##
$background=imagecolorallocatealpha($moon, 0, 0, 0, 127);
imagefill($moon, 0, 0, $background);

##
## Make the moon!
##
imagefilledellipse($moon, round($size/2), round($size/2), $size, $size, $corona);
if ($position>-1/$size AND $position<1/$size) imagefilledellipse($moon, round($size/2), round($size/2), $size-2, $size-2, $dark); //new moon
elseif (abc($position)>1-1/$size) imagefilledellipse($moon, round($size/2), round($size/2), $size-2, $size-2, $light); //Full moon
elseif ($position>0) {
	imagefilledellipse($moon, round($size/2), round($size/2), $size-2, $size-2, $light);
	for ($i=0; $i<$size-2; $i++) {
		$xpos=($size-2)/2;
		$xpos=1-($i/$xpos);

		$xpos=sqrt(1-($xpos*$xpos));
		$xpos=($size/2)+($position-0.5)*$xpos*($size-2);
		imagesetpixel($moon, round($xpos), $i+1, $dark);
	}
	for ($i=0; $i<$size; $i++) {
		$set=0;
		for ($j=0; $j<$size; $j++) {
			if (!$set AND imagecolorat($moon, $j, $i)==$dark) $set=1;
			elseif ($set AND imagecolorat($moon, $j, $i)==$light) imagesetpixel($moon, $j, $i, $dark);
		}
	}
}
else {
	imagefilledellipse($moon, round($size/2), round($size/2), $size-2, $size-2, $dark);
	for ($i=0; $i<$size-2; $i++) {
		$xpos=($size-2)/2;
		$xpos=1-($i/$xpos);
		$xpos=sqrt(1-($xpos*xpos));
		$xpos=($size/2)+($position+0.5)*$xpos*($size-2);
		imagesetpixel($moon, round($xpos), $i+1, $light);
	}
	for ($i=0, $i<$size; $i++) {
		$set=0;
		for ($j=0; $j<$size; $j++){
			if (!$set AND imagecolorat($moon, $j, $i)==$light) $set=1;
			elseif ($set AND imagecolorat($moon, $j, $i)==$dark) imagesetpixel($moon, $j, $i, $light);
		}
	}
}

##
## And output pic
##
header ("Content-Type: image/png");
imagepng($moon);
imagedestroy($moon);
?>

imagefilledpolygon:

Draw a filled polygon

bool imagefilledpolygon ( resource $image, array $points , int $num_points , int $color )

Example:

<?php
//Set up array of points for polygon
$values = array(
			40, 50, //Point 1 (x, y)
			20, 240, // point 2 (x, y)
			60, 60, // point 3 (x, y)
			240, 20, // Point 4 (x, y)
			50, 40, // Point 5 (x, y)
			10, 10 // Point 6 (x, y)
			);

//Create image
$image = imagecreatetruecolor(250, 250);

//Allocate colors
$bg = imagecolorallocate($image, 0, 0, 0);
$blue = imagecolorallocate($image, 0, 0, 255);

//Fill teh BG
imagefilledrectangle($image, 0, 0, 249, 249, $bg);

//Draw a polygon
imagefilledpolygon($image, $values, 6, $blue);

//Flush image
header('Content-type: image/png');
imagepng($image);
imagedestroy($image);
?>

note, verticies truncates trailing decimals. Just round em off, it resolves it.

Another example, this one of making a five point star:

<?php

function _makeFiveSidedStar( $x, $y, $radius, $shape='polygon', $spiky=NULL ) {
	// $x, $y co-ords of origin (in pixels), $radius (in pixels), $shape - 'polygon' or 'star', $spikiness raito between 0 and 1
	$point = array();

	$angle = 360/5;

	$point[0]['x'] = $x;

	$point[0]['y'] = $y - $radius;

	$point[2]['x'] = $x + ( $radius * cos( deg2rad( 90 - $angle ) ) );
	$point[2]['y'] = $y - ( $radius * sin( deg2rad( 90 - $angle ) ) );
	$point[4]['x'] = $x + ( $radius * sin( deg2rad( 180 - ( $angle*2 ) ) ) );
	$point[4]['y'] = $y + ( $radius * cos( deg2rad( 180 - ( $angle*2 ) ) ) );
	$point[6]['x'] = $x - ( $radius * sin( deg2rad( 180 - ( $angle*2 ) ) ) );

	$point[6]['y'] = $y + ( $radius * cos( deg2rad( 180 - ( $angle*2 ) ) ) );
	$point[8]['x'] = $x - ( $radius * cos( deg2rad( 90 - $angle ) ) );

	$point[8]['y'] = $y - ( $radius * sin( deg2rad( 90 - $angle ) ) );
	if( $shape == 'star' ) {
		if( $spiky == NULL ) $spiky = 0.5; //Default to 0.5
		$indent = $radius * $spiky;
		$point[1]['x'] = $x + ( $indent * cos( deg2rad( 90 - $angle/2 ) ) );

		$point[1]['y'] = $y - ( $indent * sin( deg2rad( 90 - $angle/2 ) ) );

		$point[3]['x'] = $x + ( $indent * sin( deg2rad( 180 - $angle ) ) );

		$point[3]['y'] = $y - ( $indent * cos( deg2rad( 180 - $angle ) ) );
		$point[5]['x'] = $x;

		$point[5]['y'] = $y + ( $indent * sin( deg2rad( 180 - $angle ) ) );
		$point[7]['x'] = $x - ( $indent * sin( deg2rad( 180 - $angle ) ) );

		$point[7]['y'] = $y - ( $indent * cos( deg2rad( 180 - $angle ) ) );

		$point[9]['x'] = $x - ( $indent * cos( deg2rad( 90 - $angle/2) ) );

		$point[9]['y'] = $y - ( $indent * sin( deg2rad( 90 - $angle/2) ) );

	}
	ksort( $point );
	$coords = array();

	foreach( $point as $pKey=>$pVal ) {

		if( is_array( $pVal ) ) {
			foreach( $pVal as $pSubKey=>$pSubVal ) {
				if( !empty( $pSubVal ) ) array_push( $coords, $pSubVal );
			}
		}
	}

	return $coords;
}

$values = _makeFiveSidedStar( 100, 100, 50, 'star' );
//put values into imagepolygon function. You need to define the $image and $color, and flush it out
to an image type.
?>

imagefilledrectangle:

Draw a filled rectangle

bool imagefilledrectangle( resource $image, int $x1, int $y1, int $x2, int $y2, int $color )

makes a rectangle from point x1 and point y1, to point x2 and point y2.

<?php
//Create a 55x30 image
$im = imagecreatetruecolor(55, 30);
$white = imagecolorallocate($im, 255, 255, 255);

//Draw a white rectangle
imagefilledrectangle($im, 4, 4, 50, 25, $white);

//SAve the image
imagepng($im, './imagefilledrectangle.png');
imagedestroy($im);
?>

imagefilltoborder:

Flood fill to specific color

bool imagefilltoborder ( resource $image , int $x , int $y , int $border , int $color )

Example:

<?php
//Create the image handle, set the background to white
$im = imagecreatetruecolor(100, 100);
imagefilledrectangle($im, 0, 0, 100, 100, imagecolorallocate($im, 255, 255, 255));

//Draw an ellipse to fill with a black border
imageelipse($im, 50, 50, 50, 50, imagecolorallocate($im, 0, 0, 0));

//Set the border and fill colors
$border = imagecolorallocate($im, 0, 0, 0);
$fill = imagecolorallocate($im, 255, 0, 0);

//Fill the selection
imagefilltoborder($im, 50, 50, $border, $fill);

//Output and free memory
header('Content-type: image/png');
imagepng($im);
imagedestroy($im);
?>

imagefilter:

Applies a filter to an image

bool imagefilter ( resource $image , int $filtertype [, int $arg1 [, int $arg2 [, int $arg3 [, int $arg4 ]]]] )

The params are as follows:

image as per expected

filtertype: Can be one of the following things:

IMG_FILTER_NEGATE: Reverses all colors of the image.

IMG_FILTER_GRAYSCALE: Converts the image into grayscale.

IMG_FILTER_BRIGHTNESS: Changes the brightness of the image. Use arg1 to set the level of brightness. The range for brightness is
-255 to 255.

IMG_FILTER_CONTRAST: Changes the contrast of the image. Use arg1 to set the level of contrast. -100 max contrast, 0 no change, +100 min contrast.

IMG_FILTER_COLORIZE: Like IMG_FILTER_GRAYSCALE, except you can specify the color. use arg1, arg2, arg3 in the form of RGB, and arg4 for alpha.
Range is -255 to 255.

IMG_FILTER_EDGEDETECT: Uses edge detection to highlight the edges in the image.

IMG_FILTER_EMBOSS: Embosses the image.

IMG_FILTER_GAUSSIAN_BLUR: Blurs the image using the Gaussian method.

IMG_FILTER_SELECTIVE_BLUR: Blurs the image.

IMG_FILTER_MEAN_REMOVAL: Uses mean removal to achieve a "sketchy" effect.

IMG_FILTER_SMOOTH: Makes the image smoother. Use arg1 to set the level of smoothness.

IMG_FILTER_PIXELATE: Applies pixelation effect to their image, use arg1 to set the block size and arg2 to set the pixelation effect mode.

arg1:

IMG_FILTER_BRIGHTNESS: Brightness level

IMG_FILTER_CONTRAST: Contrast level

IMG_FILTER_COLORIZE: Value of red component

IMG_FILTER_SMOOTH: Smoothness level

IMG_FILTER_PIXELATE: Block size in pixels.

arg2:

IMG_FILTER_COLORIZE: Value of green component

IMG_FILTER_PIXELATE: Whether to use advanced pixelation effect or not (defaults to false).

arg3:

IMG_FILTER_COLORIZE: Value of blue component

arg4:

IMG_FILTER_COLORIZE: Alpha channel, A value between 0 and 127. 0 indicates completely opaque while 127 indicates
completely transparent.


Example 1, imagefilter() grayscale example:

<?php
$im = imagecreatefrompng('dave.png');

if($im && imagefilter($im, IMG_FILTER_GRAYSCALE))
{
	echo 'Image converted to grayscale';

	imagepng($im, 'dave.png');
}
else
{
	echo 'Conversion to grayscale failed.';
}

imagedestroy($im);
?>

Example 2, imagefilter() brightness example:

<?php
$im = imagecreatefrompng('sean.png');

if($im && imagefilter($im, IMG_FILTER_BRIGHTNESS, 20))
{
	echo 'Image brightness changed.';

	imagepng($im, 'sean.png');
	imagedestroy($im);
}
else
{
	echo 'Image brightness change failed';
}
?>

Imagefilter() colorize example:

<?php
$im = imagecreatefrompng('philip.png');

//Rgb, -255 to 255, subtracts or adds
if($im && imagefilter($im, IMG_FILTER_COLORIZE, 0, 255, 0))
{
	echo 'Image successfully shaded green.';

	imagepng($im, 'phillip.png');
	imagedestroy($im);
}
else
{
	echo 'Green shading failed.';
}
?>

imagefilter() negate example:

<?php
//Define our negate function so its portable for
// php versions without imagefilter()
function negate($im)
{
	if(function_exists('imagefilter'))
	{
		return imagefilter($im, IMG_FILTER_NEGATE);
	}

	for($x = 0; $x < imagesx($im); ++$x)
	{
		for($y = 0; $y < imagesy($im); ++$y)
		{
			$index = imagecolorat($im, $x, $y);
			$rgb = imagecolorsforindex($index);
			$color = imagecolorallocate($im, 255 - $rgb['red'], 255 - $rgb['green'], 255 - $rgb['blue']);

			imagesetpixel($im, $x, $y, $color);
		}
	}

	return(true);
}

$im = imagecreatefromjpeg('kalle.jpg');

if($im && negate($im))
{
	echo 'Image successfully converted to negative colors.';

	imagejpeg($im, 'kalle.jpg', 100);
	imagedestroy($im);
}
else
{
	echo 'Converting to negative colors failed';
}
?>

imagefilter() pixelate example:

<?php
//load the pHP logo, we need to create two isntances
// to show the differences
$logo1 = imagecreatefrompng('./php.png');
$logo2 = imagecreatefrompng('./php.png');

//Create the iamge instance we want to show the
// differences on
$output = imagecreatetruecolor(imagesx($logo1) * 2, imagesy($logo1));

//Apply pixelation to each instance, with a block size of 3
imagefilter($logo1, IMG_FILTER_PIXELATE, 3);
imagefilter($logo2, IMG_FILTER_PIXELATE, 3, true);

//merge the difference onto the output image
imagecopy($output, $logo1, 0, 0, 0, 0, imagesx($logo1) - 1, imagesy($logo1) - 1);
imagecopy($output, $logo2, imagesx($logo2), 0, 0, 0, imagesx($logo2) - 1, imagesy($logo2) - 1);
imagedestroy($logo1);
imagedestroy($logo2);

//output the differences
header('Content-Type: image/png');
imagepng($output);
imagedestroy($output);
?>

Another example, is a stronger blur than the Gaussian_blur:

<?php

function blur($gdImageResource, $blurFactor = 3)
{
	//blurFactor has to be an integer
	$blurFactor = round($blurFactor);

	$originalWidth = imagesx($gdImageResource);
	$originalHeight = imagesy($gdImageResource);

	$smallestWidth = ceil($originalWidth * pow(0.5, $blurFactor));
	$smallestHeight = ceil($originalHeight * pow(0.5, $blurFactor));

	//For the first run, the previous image is the original input
	$prevImage = $gdImageResource;
	$prevWidth = $originalWidth;
	$prevHeight = $originalHeight;

	//Scale way down and gradually scale back up, blurring all the way
	for($i = 0; $i < $blurFactor; $i += 1)
	{
		//Determine dimensions of next image
		$nextWidth = $smallestWidth * pow(2, $i);
		$nextHeight = $smallestHeight * pow(2, $i);

		//Resize previous image to next size
		$nextImage = imagecreatetruecolor($nextWidth, $nextHeight);
		imagecopyresized($nextImage, $prevImage, 0, 0, 0, 0, $nextWidth, $nextHeight, $prevWidth, $prevHeight);

		//Apply blur filter
		imagefilter($nextImage, IMG_FILTER_GAUSSIAN_BLUR);

		//Now the new image becomes the previous image for the next step
		$prevImage = $nextImage;
		$prevWidth = $nextWidth;
		$prevHeight = $nextHeight;
	}

	//scale back to original size and blur one more time
	imagecopyresized($gdImageResource, $nextImage, 0, 0, 0, 0, $originalWidth, $originalHeight, $nextWidth, $nextHeight);
	imagefilter($gdImageResource, IMG_FILTER_GAUSSIAN_BLUR);

	//Clean up
	iamgedestroy($prevImage);

	//Return result
	return $gdImageResource;
}
?>

Next up, an alternative to the IMG_FILTER_COLORIZE filter, but taking the alpha param of each pixel in account.

<?php
function rgba_colorize($img, $color)
{
	imagesavealpha($img, true);
	imagealphablending($img, true);

	$img_x = imagesx($img);
	$img_y = imagesy($img);
	for ($x = 0; $x < $img_x; ++$x)
	{
		for ($y = 0; $y < $img_y; ++$y)
		{
			$rgba = imagecolorsforindex($img, imagecolorat($img, $x, $y));
			$color_alpha = imagecolorallocatealpha($img, $color[0], $color[1], $color[2], $rgba['alpha']);
			imagesetpixel($img, $x, $y, $color_alpha);
			imagecolordeallocate($img, $color_alpha);
		}
	}
}
?>

imageflip:

Flips an image using a given mode.

bool imageflip ( resource $image, int $mode )

Mode:

IMG_FLIP_HORIZONTAL : Flips the image horizontally

IMG_FLIP_VERTICAL 	: Flips the image vertically

IMG_FLIP_BOTH 		: Flips the image both horizontally and vertically

Vertical flip example:

<?php
//File
$filename = 'phplogo.png';

//Content type
header('Content-type: image/png');

//load
$im = imagecreatefrompng($filename);

//Flip it vertically
imageflip($im, IMG_FLIP_VERTICAL);

//Output
imagejpeg($im);
imagedestroy($im);
?>

An example of flipping the image horizontally:

<?php
//File
$filename = 'phplogo.png';

//Content type
header('Content-type: image/png');

//Load
$im = imagecreatefrompng($filename);

//Flip it horizontally
imageflip($im, IMG_FLIP_HORIZONTAL);

//Output
imagejpeg($im);
imagedestroy($im);
?>

imagefontheight:

Get font height

int imagefontheight ( int $font )

Returns the pixel height of a char in the specified font.

Font can be 1,2,3,4,5 , larger being larger fonts.

Examples:

<?php
echo 'Font height: ' . imagefontheight(4);
?>

<?php
//load a .gdf font
$font = imageloadfont('anonymous.gdf');

echo 'Font height: ' . imagefontheight($font);
?>

Another example of writing out things in tandem with using font sizes, is as follows:

<?php
function errimg($error) {
	//$error is an array of error messages, each taking up one line 
	//initializaiton
	$font_size = 2;
	$text_width = imagefontwidth($font_size);
	$text_height = imagefontheight($font_size);
	$width = 0;

	//The height of the image will be the number of items in $error
	$height = count($error);

	//This gets the length of the longest string, in chars to determine
	//the width of the output image
	for($x = 0; $x < count($error); $x++) {
		if(strlen($error[$x]) > $width) {
			$width = strlen($error[$x]);
		}
	}

	//next, we turn the heighta nd width into pixel values
	$width = $width * $text_width;
	$height = $height * $text_height;

	//Create image with dimensions to fit text, plus two extra rows and
	// two extra columns for border
	$im = imagecreatetruecolor($width + ( 2 * $text_width),
							   $height + ( 2 * $text_height ) );
	if($im){
		//image creation success
		$text_color = imagecolorallocate($im, 233, 14, 91);
		//This loop outputs the the error messages to the image
		for($x = 0; $x < count($error); $x++) {
			// imagestring(image, font, x, y, msg, color)
			imagestring($im, $font_size, $text_width,
						$text_height + $x * $text_height, $error[$x],
						$text_color);
		}
		//Now, render your image using your favorite image function
		// (imagejpeg for instance)
		out($im, array(), $error); //out is not defined, define it for output
	} else {
		//image creation failed, so just dump the array with extra errors
		$error[] = "Is GD Installed?";
		die(var_dump($error));
	}
}
?>

imagefontwidth:

Get font width

int imagefontwidth ( int $font )

Can be 1,2,3,4,5 or any of our own params registered with imageloadfont()

Examples of usage:

<?php
echo 'Font width: ' . imagefontwidth(4);
?>

<?php
//Load a .gdf font
$font = imageloadfont('anonymous.gdf');

echo 'Font width: ' . imagefontwidth($font);
?>

In case we need not load the font, we can skip that part by using this function, making the process faster:

<?php
function ImageFontWidthByFilename($filename)
{
	$handle = @fopen($font_locations[$i], "r");
	$c_wid = @fread($handle,11);
	@fclose($handle);
	return(ord($c_wid{8})+ord($c_wid{9})+ord($c_wid{10})+ord($c_wid{11}));
}

echo "./font.gdf is ".ImageFontWidthByFilename("./font.gdf")." pixels wide";

?>

imageftbbox:

Give the bounding box of a text using fonts via freetype2

array imageftbbox ( float $size, float $angle , string $fontfile , string $text [, array $extrainfo ] )

The only outstanding param: fontfile 		Name of a TrueType font file (can be a URL). May attempt to search for files taht do not begin with / by appending ttf
and searching in the lib path

extrainfo: linespacing 		float 		Defines drawing linespacing

Returns an array with 8 elements representing 4 points making the bounding box of the text.

positions in the array is regardless of angle.

Example:

<?php
//Create a 300x150 image
$im = imagecreatetruecolor(300, 150);
$black = imagecolorallocate($im, 0, 0, 0);
$white = imagecolorallocate($im, 255, 255, 255);

//Set the BG to be white
imagefilledrectangle($im, 0, 0, 299, 299, $white);

//Path to our font file
$font = './arial.ttf';

//First we create our bounding box
$bbox = imageftbbox(10, 0, $font, 'The PHP Documentation Group');

//This is our cords for X and Y
$x = $bbox[0] + (imagesx($im) / 2) - ($bbox[4] / 2) - 5;
$y = $bbox[1] + (imagesy($im) / 2) - ($bbox[5] / 2) - 5;

imagefttext($im, 10, 0, $x, $y, $black, $font, 'The PHP Documentation Group');

//Output to browser
header('Content-Type: image/png');

imagepng($im);
imagedestroy($im);
?>

This function is only available if PHP was compiled with the --with-freetype-dir=DIR option

Also, if we wish to have a function that centers text:

function newText($im, $size, $angle= 0, $x, $y, $color, $font, $text,$align = "left",$border=false,$width=0,$height=0)
{
	if($align == "center")
	{
		if($border == true){
			imagerectangle($im, $x, $y, $x + $width, $y + $height, $color);
		}
		$bbox = imageftbbox($size, 0, $font, $text);

		$s_width  = $bbox[4];
		$s_height = $bbox[5];

		$y = $y + ($height-$s_height)/2;
		$x = $x + ($width-$s_width)/2; 
	}

	imagettftext($im, $size, $angle, $x, $y, $color, $font, $text);
}

imagefttext:

write text to the image using fonts using FreeType 2

array imagefttext ( resource $image , float $size , float $angle , int $x , int $y , int $color , string $fontfile , string $text [, array $extrainfo ] )

To account for possible earlier version bugging in terms of seperation chars for naming files, there is a trick to set the env char in the function
of where GD will search:

<?php
//Set teh environment variable for GD
putenv('GDFONTPATH=' . realpath('.'));

//name the font ot be used (note the lack of the .ttf extension)
$font = 'SomeFont';
?>

Returns an array of corner values.

Example of usage:

<?php
//Create a 300x100 img
$im = imagecreatetruecolor(300, 100);
$red = imagecolorallocate($im, 0xFF, 0x00, 0x00);
$black = imagecolorallocate($im, 0x00, 0x00, 0x00);

//Make the BG red
imagefilledrectangle($im, 0, 0, 299, 99, $red);

//Path to our ttf font file
$font_file = './arial.ttf';

//Draw the text 'PHP manual' using font size 13
imagefttext($im, 13, 0, 105, 55, $black, $font_file, 'PHP Manual');

//Output image to the browser
header('Content-Type: image/png');

imagepng($im);
imagedestroy($im);
?>

To switch off AA, use negative color values.

To have some spacing between chars, here is a function that sorts that out:

<?php
//Required header(assuming we use PNG images)
header("Content-type: image/png");

//Create a basic image with a dark bg
$image = imagecreatetruecolor(300, 20);
imagefill($image, 0, 0, imagecolorallocate($image, 21, 21, 21));

//Function call, arguments are the same as imagefttext, except that (array)#extrainfo takes a new param called  character_spacing
$imageBox = imagefttext2($image, 9, 0, 2, 15, imagecolorallocate($image, 255, 255, 255), 'tahomabold.ttf', 'The quick brown fox...', array('character_spacing' => 5));

//Output file and clear the resources
imagepng($image);
imagedestroy($image);

function imagefttext2($imageResource, $font_size, $text_angle, $start_x, $start_y, $color, $font_file, $text,
$extra_info = array()) {
	if($extra_info['character_spacing'] == NULL || !is_numeric($extra_info['character_spacing'])) {
		$extra_info['character_spacing'] = 0;
	}
	$lastX = $start_x - $extra_info['character_spacing'];
	foreach(str_split($text) as $v) {
		$coordinates = imagefttext($imageResource, $font_size, $text_angle, $lastX + $extra_info['character_encoding'],
$start_y, $color, $font_file, $v, $extra_info);
		$lastX = max($coordinates[2], $coordinates[4]);
	}
	//Return the newly generated image box coords
	return array($start_x, $start_y, $coordinates[2], $coordinates[3], $coordinates[4], $coordinates[5], $start_x, $coordinates[7]);
}
?>

imagegammacorrect:

Apply a gamma correction to a GD image

bool imagegammacorrect ( resource $image , float $inputgamma , float $outputgamma )

Returns True on success, False on failure.

Example:

<?php
//Create image instance
$im = imagecreatefromgif('php.gif');

//Correct gamma, out = 1.537
imagegammacorrect($im, 1.0, 1.537);

//Save and free image
imagegif($im, './php_gamma_corrected.gif');
imagedestroy($im);
?>

imagegd2:

Output GD2 image to browser or file

bool imagegd2 ( resource $image [, mixed $to = NULL [, int $chunk_size = 128 [, int $type = IMG_GD2_RAW ]]] )

Notable params:

to: The path or an open stream resource (which is automatically being closed after this function returns) to save the file
to. If not set or NULL, the raw image stream will be outputted directly.

type: Either IMG_GD2_RAW or IMG_GD2_COMPRESSED. Defaults to IMG_GD2_RAW

Example of outputting a GD2 image:

<?php
//Create a blank img and add some text
$im = imagecreatetruecolor(120, 20);
$text_color = imagecolorallocate($im, 233, 14, 91);
imagestring($im, 1, 5, 5, "A Simple Text String", $text_color);

//output the img
imagegd2($im);

//Free up memory
imagedestroy($im);
?>

Example of saving a GD2 image:

<?php
//Create a blank image nad add some text
$im = imagecreatetruecolor(120, 20);
$text_color = imagecolorallocate($im, 233, 14, 91);
imagestring($im, 1, 5, 5, "A simple text string", $text_color);

//Save the gd2 image
//The format is .gd2
imagegd2($im, 'simple.gd2');

//Free up memory
imagedestroy($im);
?>

Example of cloning a gd resource:

<?php
function cloneGD($gd)
{
	ob_start();
	imagegd2($gd);
	return imagecreatefromstring(ob_get_clean());
}
?>

imagegd:

Output GD image to browser or file

bool imagegd ( resource $image [, mixed $to = NULL ] )

Examples of usage:

Outputting GD image:

<?php
$im = imagecreatetruecolor(120, 20);
$text_color = imagecolorallocate($im, 233, 14, 91);
imagestring($im, 1, 5, 5, "A Simple Text String", $text_color);

//Output the image
imagegd($im);

//Free up memory
imagedestroy($im);
?>

Saving a GD image:

<?php
//Create a blank image and add some text
$im = imagecreatetruecolor(120, 20);
$text_color = imagecolorallocate($im, 233, 14, 91);
imagestring($im, 1, 5, 5, "A Simple Text String", $text_color);

//Save the gD image
//The file format is .gd
imagegd($im, 'simple.gd');

//Free up memory
imagedestroy($im);
?>

imagegetclip:

Get the clipping rectangle

array imagegetclip ( resource $im )

Returns an indexed array with co-ords of the clipping rectangle which has the following entries:

x and y cords for upper left/lower right corners

Example:

<?php
$im = imagecreate(100, 100);
imagesetclip($im, 10, 10, 89, 89);
print_r(imagegetclip($im));

imagegif:

Output image to browser or file

bool imagegif ( resource $image [, mixed $to ] )

Creates the GIF to the to arg from the image img. The arg img is the return from the imagecreate() or imagecreatefrom* function.

The image format is GIF87a unless it has been made transparent with imagecolortransparent() in which case the image format
will be GIF89a.

Outputting an image using imagegif():

<?php
//Create a new image instance
$im = imagecreatetruecolor(100, 100);

//Make the BG white
imagefilledrectangle($im, 0, 0, 99, 99, 0xFFFFFF);

//Draw a text string on the img
imagestring($im, 3, 40, 20, 'GB Library', 0xFFBA00);

//Output the img to browser
header('Content-Type: image/gif');

imagegif($im);
imagedestroy($im);
?>

Converting a PNG image to GIF using imagegif():

<?php

//Load the PNG
$png = imagecreatefrompng('./php.png');

//Save the IMG as gif
imagegif($png, './php.gif');

//Free from memory
imagedestroy($png);

//We're done
echo 'Converted PNG image to GIF with success';
?>

To see the presence of support of different images, use imagetypes():

<?php
if(imagetypes() & IMG_GIF)
{
	header('Content-Type: image/gif');
	imagegif($im);
}
elseif(imagetypes() & IMG_JPG)
{
	/*... etc. */
}
?>

imagegrabscreen:

Captures the whole screen

resource imagegrabscreen ( void )

Example of usage, grab a SS and save it as PNG:

<?php
$im = imagegrabscreen();
imagepng($im, "myscreenshot.png");
imagedestroy($im);
?>

For this to work, our Apache service must be set to 'Allow service to interact with Desktop', lest we get a blank img. To fix it,
Rightclick comp, select Manage/Services and Application/Services - find the apache service (Apache2), and right-click, select
properties - choose the Log on tab and check the 'Allow service to interact with desktop' checkbox. Restart Apache.

imagegrabwindow:

Captures a window

resource imagegrabwindow ( int $window_handle [, int $client_area = 0 ] )

Grabs a window or its client area using a windows handle

E_NOTICE is ISSUED if window_handle is invalid window handle. E_WARNING is used if Windows API is too old.

Example of grabbing a window without its content:

<?php
$browser = new COM("InternetExplorer.Application");
$handle = $browser->HWND;
$browser->Visible = true;
$im = imagegrabwindow($handle);
$browser->Quit();
imagepng($im, "iesnap.png");
imagedestroy($im);
?>

Capture a window but with its content:

<?php
$browser = new COM("InternetExplorer.Application");
$handle = $browser->HWND;
$browser->Visible = true;
$browser->Navigate("http://www.libgd.org");

/* Still working? */
while ($browser->Busy) {
	com_message_pump(4000);
}
$im = imagegrabwindow($handle, 0);
$browser->Quit();
imagepng($im, "iesnap.png");
imagedestroy($im);
?>

We can also modify the browser ot be fullscreen before doing it:

$browser->Fullscreen = true;

imageinterlace:

Enable or disable interlace

ing imageinterlace ( resource $image [, int $interlace = 0 ] )

if the interlace bit is set, and teh image used is a JPEG image, the image is created as a progressive JPEG.

Returns 1 if the interlace bit is set for the image, 0 otherwise

Turn on interlacing using imageinterlace():

<?php
//Create an image instance
$im = imagecreatefromgif('php.gif');

//Enable interlacing
imageinterlace($im, true);

//Save the interlaced image
imagegif($im, './php_interlaced.gif');
imagedestroy($im);
?>

imageistruecolor:

Finds whether an image is a truecolor image

bool imageistruecolor ( resource $image )

Example of Simple detection of true color image instances using imageistruecolor():

<?php
// $im is an image instance

// Check if image is an true image or not
if(!imageistruecolor($im))
{
	//Create a new true color image instance
	$tc = imagecreatetruecolor(imagesx($im), imagesy($im));

	//Copy over the pixels
	imagecopy($tc, $im, 0, 0, 0, 0, imagesx($im), imagesy($im));

	$im = $tc;
	$tc = NULL;

	//Or use imagepalettetotruecolor();
}

//Continue wokring on the image instance
?>

imagejpeg:

Output image to browser or file

bool imagejpeg ( resource $image [, mixed $to [, int $quality ]] )

The only interesting param is quality, which defaults to 75, can be between 0 and 100.
Higher is bigger file size.

Returns true on success, false on failure.

Example of outputting JPEG image to the browser:

<?php
//Create a blank image nad add some text
$im = imagecreatetruecolor(120, 20);
$text_color = imagecolorallocate($im, 233, 14, 91);
imagestring($im, 1, 5, 5, 'A Simple Text String', $text_color);

//Set the content type header - in this case image/jpeg
header('Content-Type: image/jpeg');

//Output the image
imagejpeg($im);

//Free up memory
imagedestroy($im);
?>

Saving a JPEG image to a file:

<?php
//Create a blank image and add some text
$im = imagecreatetruecolor(120, 20);
$text_color = imagecolorallocate($im, 233, 14, 91);
imagestring($im, 1, 5, 5, 'A Simple Text String', $text_color);

//Save the image as simpletext.jpg
imagejpeg($im, 'simpletext.jpg');

//Free up memory
imagedestroy($im);
?>

Outputting an image with 75% quality to the browser:

<?php
//Create a blank image and add some text
$im = imagecreatetruecolor(120, 20);
$text_color = imagecolorallocate($im, 233, 14, 91);
imagestring($im, 1, 5, 5, 'A Simple Text STring', $text_color);

//Set the content type header, in thsi case, image/jpeg
header('Content-Type: image/jpeg');

//Skip the to param using NULL, then set quality to 75%
imagejpeg($im, NULL, 75);

//Free up memory
imagedestroy($im);
?>

If the $filename exists, it will be oeverwritten.

Again, to is the path or an open stream resource (which is closed after function return) to save the file to.
if not set or NULL, the raw image stream will be outputted directly.

An example of reading any image from the file system (jpg png gif), scale it, save the scaled img to a BLOB field keepiung the original
img:

<?php

function scaleImageFileToBlob($file) {
	
	$source_pic = $file;
	$max_width = 200;
	$max_height = 200;

	list($width, $height, $image_type) = getimagesize($file);

	switch ($image_type)
	{
		case 1: $src = imagecreatefromgif($file); break;
		case 2: $src = imagecreatefromjpeg($file); break;
		case 3: $src = imagecreatefrompng($file); break;
		default: return ''; break;
	}

	$x_ratio = $max_width / $width;
	$y_ratio = $max_height / $height;

	if( ($width <= $max_width) && ($height <= $max_height) ){
		$tn_width = $width;
		$tn_height = $height;
		}elseif (($x_ratio * $height) < $max_height){
			$tn_height = ceil($x_ratio * $height);
			$tn_width = $max_width;
		}else{
			$tn_width = ceil($y_ratio * $width);
			$tn_height = $max_height;
	}

	$tmp = imagecreatetruecolor($tn_width,$tn_height);

	/* Check if this iamge is PNG or GIF, then set if Transparent */
	if(($image_type == 1) OR ($image_type==3))
	{
		imagealphablending($tmp, false);
		imagesavealpha($tmp, true);
		$transparent = imagecolorallocatealpha($tmp, 255, 255, 255, 127);
		imagefilledrectangle($tmp, 0, 0, $tn_width, $tn_height, $transparent);
	}
	imagecopyresampled($tmp, $src, 0, 0, 0, 0, $tn_width, $tn_height, $width, $height);

	/*
	 * imageXXX() only has two options, save as a file, or send to the browser
	 * It does not provide you the oppurtountiy to manipulate the final GIF/JPG/PNG file stream
	 * So i start the output buffering, use imageXXX() to output the data stream to the browser,
	 * get the contents of the stream, and use clean to silently discard the buffered contents
	 */
	ob_start();

	switch ($image_type)
	{
		case 1: imagegif($tmp); break;
		case 2: imagejpeg($tmp, NULL, 100); break; //best quality
		case 3: imagepng($tmp, NULL, 0); break; //no compression
		default: echo ''; break;
	}

	$final_image = ob_get_contents();

	ob_end_clean();

	return $final_image;
	
}

?>

Assuming we have a form where a user can upload a image, and we have to scale it and save it to our DB:

<?php

	[..] //The user has clicked the submitt button

	//Check if the user entered an image
	if ($_FILES['imagefile']['name'] != '') {
		$image = scaleImageFileToBlob($_FILES['imagefile']['tmp_name']);

		if ($image == '') {
			echo 'Image type not supported';
		} else {
			$image_type = $_FILES['imagefile']['type'];
			$image = addslashes($image);

			$query = "UPDATE yourtable SET image_type='$image_type', image='$image' WHERE ...";
			$result = mysql_query($query);
			if ($result) {
				echo 'Image scaled and uploaded';
			} else {
				echo 'Error running the query';
			}
		}
	}
?>

imagelayereffect:

Set the alpha bleinding flag to use layering effects

bool imagelayereffect ( resource $image , int $effect )

Effect is one of the following params:

IMG_EFFECT_REPLACE : Use pixel replacement (equivilant of passing TRUE to imagealphablending())

IMG_EFFECT_ALPHABLEND : Use normal pixel blending (equivilant of passing FALSE to imagealphablending())

IMG_EFFECT_NORMAL : Same as IMG_EFFECT_ALPHABLEND

IMG_EFFECT_OVERLAY : Overlay has the effect that black background pixels will remain black, white background
pixels will remain white, btu grey will take colour of the foreground pixel //Does not work with PHP 5.6 GD 2.1

IMG_EFFECT_MULTIPLY : Overlays with a multiply effect

An example:

<?php
//Setup an image
$im = imagecreatetruecolor(100, 100);

//Set a BG
imagefilledrectangle($im, 0, 0, 100, 100, imagecolorallocate($im, 220, 220, 220));

//Apply the overlay alpha blending flag
imagelayereffect($im, IMG_EFFECT_OVERLAY);

//Draw two gray ellipses
imagefilledellipse($im, 50, 50, 40, 40, imagecolorallocate($im, 100, 255, 100));
imagefilledellipse($im, 50, 50, 50, 80, imagecolorallocate($im, 100, 100, 255));
imagefilledellipse($im, 50, 50, 80, 50, imagecolorallocate($im, 255, 100, 100));

//Output
header('Content-type: image/png');

imagepng($im);
imagedestroy($im);
?>

imageline:

Draw a line

bool imageline ( resource $image , int $x1, int $y1, int $x2, int $y2, int $color )

Draw a line between two points

Drawing a thick line example:

<?php

function imagelinethick($image, $x1, $y1, $x2, $y2, $color, $thick = 1)
{
	if ($thick == 1) {
		return imageline($image, $x1, $y1, $x2, $y2, $color);
	}
	$t = $thick / 2 - 0.5;
	if ($x1 == $x2 || $y1 == $y2) {
		return imagefilledrectangle($image, round(min($x1, $x2) - $t), round(min($y, $y2) - $t), round(max($x1, $x2) + $t), round(max($y1, $y2) + $t), $color);
	}

	$k = ($y2 - $y1) / ($x2 - $x1); //y = kx + q
	$a = $t / sqrt(1 + pow($k, 2));
	$points = array(
		round($x1 - (1+$k)*$a), round($y1 + (1-$k)*$a),
		round($x1 - (1-$k)*$a), round($y1 - (1+$k)*$a),
		round($x2 + (1+$k)*$a), round($y2 - (1-$k)*$a),
		round($x2 + (1-$k)*$a), round($y2 + (1+$k)*$a),
	);
	imagefilledpolygon($image, $points, 4, $color);
	return imagepolygon($image, $points, 4, $color);
}

?>

Some examples:

Drawing a line with vectors:

<?php
$size = 600;
$img = imagecreatetruecolor($size, $size);

$white = imagecolorallocate($img, 255, 255, 255);
$black = imagecolorallocate($img, 0, 0, 0);

imagefilledrectangle($img, 0, 0, $size, $size, $white);

function Vector($palette,$startx,$starty,$angle,$length,$colour){
	$angle = deg2rad($angle);
	$endx = $startx+cos($angle)*$length;
	$endy = $starty-sin($angle)*$length;
	return(imageline($palette,$startx,$starty,$endx,$endy,$colour));
}

Vector($img,$size/2,$size/2, 30, 200, $black);

header("Content-type: image/png");
imagepng($img);

?>

There is tons of more functions to write here, but i won't bother, there is if one is needed.

imageloadfont:

Load a new font

int imageloadfont ( string $file )

Loads a user-defiend bitmap and returns its identifier

The file param: The font file format is binary and architechture dependent. This means you should generate the font files on
the same type of CPU as the machine you are running PHP on.

Byte position 		C data type 		desc

byte 0-3 			int 				number of chars in teh font

byte 4-7 			int 				value of first char in the font (often 32 for space)

byte 8-11 			int 				pixel width of each char

byte 12-15 			int 				pixel height of each char

byte 16- 			char 				array with character data, one byte per pixel in each char, for a total of (nchars*width*height) bytes.

Returns the font identifier which is always bigger than 5 to avoid conflicts with built-in fonts or FALSE on errors

example:

<?php
//Create a new image isntance
$im = imagecreatetruecolor(50, 20);
$black = imagecolorallocate($im, 0, 0, 0);
$white = imagecolorallocate($im, 255, 255, 255);

//Make the BG white
imagefilledrectangle($im, 0, 0, 49, 19, $white);

//Load the gd font and write 'Hello'
$font = imageloadfont('./04b.gdf');
imagestring($im, $font, 0, 0, 'Hello', $black);

//output to browser
header('Content-type: image/png');

imagepng($im);
imagedestroy($im);
?>

Can be used to do many things, as per usual.

imageopenpolygon:

Draws an open polygon

bool imageopenpolygon ( resource $image , array $points , int $num_points , int $color )

The relevant point is the points, which contains the arg of x0, y0, x1, y1

Example of usage:

<?php
//Create a blank image
$image = imagecreatetruecolor(400, 300);

//Allocate a color for the polygon
$col_poly = imagecolorallocate($image, 255, 255, 255);

//Draw the polyogn
imageopenpolygon($image, array(
		0, 0,
		100, 200,
		300, 200
	),
	3,
	$col_poly);

//output the pic to the browser
header('Content-type: image/png');

imagepng($image);
imagedestroy($image);
?>

imagepalettecopy:

Copies colours of palettes to the target img

void imagepalettecopy ( resource $destination , resource $source )

Example of usage:

<?php
//Create two palette images
$palette1 = imagecreate(100, 100);
$palette2 = imagecreate(100, 100);

//Allocate BG to be green
$green = imagecolorallocate($palette1, 0, 255, 0);

//Copy the palette from img 1 to img 2
imagepalettecopy($palette2, $palette1);

//Since the palette is now copied we can use the
// green color allocated to img 1 without using
// imagecolorallocate() twice
imagefilledrectangle($palette2, 0, 0, 99, 99, $green);

//output img to browser
header('Content-type: image/png');

imagepng($palette2);
imagedestroy($palette1);
imagedestroy($palette2);
?>

The order does not get copied. If we wish the exact order of colours, do as follows: //might fuck up the pic

<?
function imagepalettecopy_exact ( $dst_img, $src_img) {
	for( $c = 0 ; $c < imagecolorstotal($src_img); $c++) {
		$col = imagecolorsforindex($src_img,$c); //Get color at index c in the color table
		imagecolorset($dst_img,$c,$col[red],$col[green],$col[blue]);
	}
}

?>

imagepalettetotruecolor:

Converst a palette based img to true color

bool imagepalettetotruecolor ( resource $src )

Returns true if successful or already truecolor, false if failed.

Converts any image resource to true color:

<?php
//backward comp
if(!function_exists('imagepalettetotruecolor'))
{
	function imagepalettetotruecolor(&$src)
	{
		if(imageistruecolor($src))
		{
			return(true);
		}

		$dst = imagecreatetruecolor(imagesx($src), imagesy($src));

		imagecopy($dst, $src, 0, 0, 0, 0, imagesx($src), iamgesy($src));
		imagedestroy($src);

		$src = $dst;

		return(true);
	}
}

//Helper closure
$typeof = function() use($im)
{
	echo 'typeof($im) = ' . (imageistruecolor($im) ? 'true color' : 'palette'), PHP_EOL;
};

//Create a palette based img
$im = imagecreate(100, 100);
$typeof();

//Convert it to true color
imagepalettetotruecolor($im);
$typeof();

//Free the memory
imagedestroy($im);
?>

imagepng:

Output a PNG image to either the browser or a file

bool imagepng ( resource $image [, mixed $to [, int $quality [, int $filters ]]] )

Filters: allows reducing the PNG size. It is a bitmask field which may be set to any combo of the PNG_FILTER_XXX constants.
PNG_NO_FILTER or PNG_ALL_FILTERS may also be used to respectively disable or activate all filters.

Example:

<?php
$im = imagecreatefrompng("test.png");

header('Content-type: image/png');

imagepng($im);
imagedestroy($im);
?>

The quality param is compression, goes from 0 to 9. Default is 6.

A tip to how we can encode a pic to a string and save it:

ob_start();
imagepng($image);
$image_data = ob_get_contents();
ob_end_clean();

Now we can use $image_data to save to teh db, except we need to also use the mysql_escape_string.

If we are generating a pic dynamically based on post data and dont want to save to server, sending it to be 
displayed can cause problems as when the person tries to save it, the browser will request it again
from the server (causing any post data to be lost and probably a corrupted PNG).

To get around it, force download using the content disposition header:

<?php
header('Content-Disposition: Attachment;filename=image.png');
header('Content-type: image/png');
?>

imagepolygon:

Draws a polygon

bool imagepolygon ( resource $image , array $points , int $num_points , int $color )

Example of usage:

<?php
//Create a blank image
$image = imagecreatetruecolor(400, 300);

//Allocate a color for the polygon
$col_poly = imagecolorallocate($image, 255, 255, 255);

//Draw teh poly
imagepolygon($image, array(
		0, 0,
		100, 200,
		300, 200
	),
	3,
	$col_poly);

//Output the picture to the browser
header('Content-type: image/png');

imagepng($image);
imagedestroy($image);
?>

imagerectangle:

Draw a rectangle

bool imagerectangle ( resource $image , int $x1 , int $y1 , int $x2, int $y2, int $color )

//NOTE: PHP counts from 0

simple rectangle example:

<?php
//Create a 200 x 200 image
$canvas = imagecreatetruecolor(200, 200);

//Allocate colors
$pink = imagecolorallocate($canvas, 255, 105, 180);
$white = imagecolorallocate($canvas, 255, 255, 255);
$green = imagecolorallocate($canvas, 132, 135, 28);

//Draw three rectangles
imagerectangle($canvas, 50, 50, 150, 150, $pink);
imagerectangle($canvas, 45, 60, 120, 100, $white);
imagerectangle($canvas, 100, 120, 75, 160, $green);

//output and free memory
header('Content-type: image/jpeg');

imagejpeg($canvas);
imagedestroy($canvas);
?>

imageresolution:

Gets/Sets res of a image

mixed imageresolution ( resource $image [, int $res_x [, int $res_y ]] )

If none of the optional parms are given, it is returned as indexed array.

If only res_x is given, horizontal and vertical are set to this. If both are given,
horizontal and vertical reses are set, respectively.

The resolution is only used as meta info when images are read from and written to formats
supporting this kind of information (currently PNG and JPEG). It does not affect any drawing ops.

Default is 96 DPI.

True/False if getter, index array/false if setter.

Example of setting and getting res:

<?php
$im = imagecreatetruecolor(100, 100);
imageresolution($im, 200);
print_r(imageresolution($im));
imageresolution($im, 300, 72);
print_r(imageresolution($im));
?>

imagerotate:

Rotate an image with a given angle

resource imagerotate ( resource $image, float $angle, int $bgd_color [, int $ignore_transparent = 0 ] )

An example of rotation of 180 degrees:

<?php
//File and rotation
$filename = 'test.jpg';
$degrees = 180;

//Content type
header('Content-type: image/jpeg');

//Load
$source = imagecreatefromjpeg($filename);

//Rotate
$rotate = imagerotate($source, $degrees, 0);

//output
imagejpeg($rotate);

//Free the memory
imagedestroy($source);
imagedestroy($rotate);
?>

An example of rotating and img while preserving alpha channel transparency:

<?php
	$filename = 'YourFile.png';
	$rotang = 20;
	$source = imagecreatefrompng($filename) or die('Error opening file '.$filename);
	imagealphablending($source, false);
	imagesavealpha($source, true);

	$rotation = imagerotate($source, $rotang, imageColorAllocateAlpha($source, 0, 0, 0, 127));
	imagealphablending($rotation, false);
	imagesavealpha($rotation, true);

	header('Content-type: image/png');
	imagepng($rotation);
	imagedestroy($source);
	imagedestroy($rotation);
?>

If we run into memory allocation, increase it:

ini_set('memory_limit', '256M');

imagesavealpha:

Set the flag to save full alpha channel info (as opposed to single-color transparency) when saving PNG images

bool imagesavealpha ( resource $image , bool $saveflag )

We have to unset alphablending (imagealphablending($im, false)) to use this.

Alpha channel is not supported by all browsers

Example of usage:

<?php
//load a PNG image with alpha channels
$png = imagecreatefrompng('./alphachannel_example.png');

//Do required operations

//Turn off alpha blending and set alpha flag
imagealphablending($png, false);
imagesavealpha($png, true);

//output image to browser
header('Content-Type: image/png');

imagepng($png);
imagedestroy($png);
?>

If we wish to composite a png with a 8-bit alpha onto a jpg, we can do as follows:

<?php
//load the frame image (png with 8-bit transparency)
$frame = imagecreatefrompng('path/to/frame.png');

//load the thumbnail image
$thumb = imagecreatefromjpeg('path/to/thumbnail.jpg');

//Get the dimensions of the frame, which we will use for the composite final img
$width = imagesx( $frame );
$height = imagesy( $frame );

//Create the destination/output image
$img=imagecreatetruecolor( $width, $height );

//enable alpha blending on the dest image
imagealphablending($img, true);

//Allocate a transparent color and fill the new img with it.
//Without this the img will have black BG instead of being transparent
$transparent = imagecolorallocatealpha( $img, 0, 0, 0, 127 );
imagefill( $img, 0, 0, $transparent );

//Copy the thumbnail into the output image
imagecopyresampled($img,$thumb,32,30,0,0, 130, 100, imagesx( $thumb ), imagesy( $thumb ) );

//Copy the frame into the output image (layered on top of the thumbnail)
imagecopyresampled($img,$frame,0,0,0,0, $width,$height,$width,$height);

imagealphablending($img, false);

//save the alpha
imagesavealpha($img,true);

//emit the image
header('Content-type: image/png');
imagepng( $img );

//Dispose
imagedestroy($img);

//Done 
exit;
?>

imagescale:

Scale an image using the given new width and height.

resource imagescale ( resource $image , int $new_width [, int $new_height = -1 [, int $mode = IMG_BILINEAR_FIXED ]] )

mode: One of IMG_NEAREST_NEIGHBOUR, IMG_BILINEAR_FIXED, IMG_BICUBIC, IMG_BICUBIC_FIXED

Returns scaled image resource on success, False on failure

imagesetbrush:

Set the brush image for line drawing

bool imagesetbrush ( resource $image , resource $brush )

Sets the brush image to be used by all line drawing functions when drawing with the colors of IMG_COLOR_BRUSHED
or IMG_COLOR_STYLEDBRUSHED

True on success, False on failure

Example:

<?php
//load a mini php logo
$php = imagecreatefrompng('./php.png');

//Create the main image, 100x100
$im = imagecreatetruecolor(100, 100);

//Fill the BG with white
$white = imagecolorallocate($im, 255, 255, 255);
imagefilledrectangle($im, 0, 0, 299, 99, $white);

//Set the brush
imagesetbrush($im, $php);

//Draw a couple of brushes, each overlaying each
imageline($im, 50, 50, 50, 60, IMG_COLOR_BRUSHED);

//Output the img to the browser
header('Content-type: image/png');

imagepng($im);
imagedestroy($im);
imagedestroy($php);
?>

You need not take special actions when we are finished with a brush, but if we destroy the brush image, we may not use
the IMG_COLOR_BRUSHED or IMG_COLOR_STYLEDBRUSHED colors until we have set a new brush iamge

imagesetclip:

Set the clipping rectangle

bool imagesetclip ( resource $im , int $x1 , int $y1 , int $x2, int $y2 )

Upper left corner/lower right corner

imagesetinterpolation:

Set the interpolation method

bool imagesetinterpolation ( resource $image [, int $method = IMG_BILINEAR_FIXED ] )

Setting the interpolation method affects methods like imagerotate().

method args:

IMG_BELL : Bell filter

IMG_BESSEL : Bessel filter

IMG_BICUBIC: Bicubic interpolation

IMG_BICUBIC_FIXED: Fixed point implementation of the bicubic interpolation

IMG_BILINEAR_FIXED: Fixed point implementation of the bilinear interpolation (Default (also on image creation))

IMG_BLACKMAN: Blackman window function

IMG_BOX: Box blur filter

IMG_BSPLINE: Spline interpolation

IMG_CATMULLROM: Cubic Hermite spline interpolation

IMG_GAUSSIAN: Gaussian function

IMG_GENERALIZED_CUBIC: Generalized cubic spline fractal interpolation

IMG_HERMITE: Hermite interpolation

IMG_HAMMING: Hamming filter

IMG_HANNING: Hanning filter

IMG_MITCHELL: Mitchell filter

IMG_POWER: Power interpolation

IMG_QUADRATIC: Inverse quadratic interpolation

IMG_SINC: Sinc function

IMG_NEAREST_NEIGHBOUR: nearest neighbour interpolation

IMG_WEIGHTED4: Weighting filter

IMG_TRIANGLE: Triangle interpolation

Example of usage:

<?php
//Load an img
$im = imagecreate(500, 500);

//By default interpolation is IMG_BILINEAR_FIXED, switch
//to use the 'Mitchell' filter
imagesetinterpolation($im, IMG_MITCHELL);

//continue to work with the $im
?>

imagesetpixel:

Set a sinlge pixel

bool imagesetpixel ( resource $image , int $x , int $y , int $color )

Example of usage:

<?php

$x = 200;
$y = 200;

$gd = imagecreatetruecolor($x, $y);

$corners[0] = array('x' => 100, 'y' => 10);
$corners[1] = array('x' => 0, 'y' => 190);
$corners[2] = array('x' => 200, 'y' => 190);

$red = imagecolorallocate($gd, 255, 0, 0);

for ($i = 0; $i < 100000; $i++) {
	imagesetpixel($gd, round($x), round($y), $red);
	$a = rand(0,2);
	$x = ($x + $corners[$a]['x'])/2;
	$y = ($y + $corners[$a]['y'])/2;
}

header('Content-Type: image/png');
imagepng($gd);

?>

An example of making a white, or close to white background transparent:

<?php
function FloodFill($im, $x, $y)
{
	$rgb = imagecolorat($im, $x, $y);
	$r = ($rgb >> 16) & 0xFF;
	$g = ($rgb >> 8) & 0xFF;
	$b = $rgb & 0xFF;

	$counter = 0;
	$counter2=0;

	if($r >= 245){ $counter++;}
	if($g >= 245){ $counter++;}
	if($b >= 245){ $counter++;}
	if($r >= 240){ $counter2++;}
	if($g >= 240){ $counter2++;}
	if($b >= 240){ $counter2++;}

	if($counter >= 1 && $counter2 == 3){
		$background = imagecolorallocate($im, 180, 0, 255);
		imagesetpixel($im, $x, $y, $background);

		FloodFill ($im, $x, $y+1);
		FloodFill ($im, $x+1, $y);
		FloodFill ($im, $x, $y-1);
	}
}

$src = $_GET["src"];
$im = imagecreatefromjpeg($src);

//Draw border
$border = imagecolorallocate($im, 180, 0, 255);
drawBorder($im, $border, 1);

//Draw a border
function drawBorder($im, $color, $thickness = 1)
{
	$x1 = 0;
	$y1 = 0;
	$x2 = ImageSX($im) - 1;
	$y2 = ImageSY($im) - 1;

	for($i = 0;$i < $thickness; $i++)
	{
		ImageRectangle($im, $x1++, $y1++, $x2--, $y2--, $color);
	}
}

$rgb = imagecolorat($im, 0, 0);
FloodFill($im, 0, 0);
$color = imagecolorallocate($im, 180, 0, 255);
imagecolortransparent($im, $color);
header("Content-type: image/png");
imagepng($im);
imagedestroy($im);
?>

imagesetstyle:

Set the style for line drawing

bool imagesetstyle ( resource $image , array $style )

Sets the style to be used by all line drawing functions (such as imageline() and imagepolygon()) when drawing with
the special color IMG_COLOR_STYLED or lines of images with color IMG_COLOR_STYLEBRUSHED.

Style: An array of pixel colors. We can use IMG_COLOR_TRANSPARENT to add a transparent pixel. Must not be empty.

An example of a dashed line:

<?php
header("Content-type: image/jpeg");
$im = imagecreatetruecolor(100, 100);
$w 	= imagecolorallocate($im, 255, 255, 255);
$red = imagecolorallocate($im, 255, 0, 0);

//Draw a dashed line, 5 red, 5 white pixels
$style = array($red, $red, $red, $red, $red, $w, $w, $w, $w, $w);
imagesetstyle($im, $style);
imageline($im, 0, 0, 100, 100, IMG_COLOR_STYLED);

//Draw a line of happy faces using imagesetbrush() with imagesetstyle
$style = array($w, $w, $w, $w, $w, etc.... $red);
imagesetstyle($im, $style);

$brush = imagecreatefrompng("http://www.libpng.org/pub/png/images/smile.happy.png");
$w2 = imagecolorallocate($brush, 255, 255, 255);
imagecolortransparent($brush, $w2);
imagesetbrush($im, $brush);
imageline($im, 100, 0, 0, 100, IMG_COLOR_STYLEDBRUSHED);

imagejpeg($im);
imagedestroy($im);
?>

The total line length must be a exact divisor of the width. Meaning, if we have 10 pixels, the length must be a multiple of 10.

imagesetthickness:

Set the thickness for line drawing

bool imagesetthickness ( resource $image , int $thickness )

Example of usage:

<?php
//Create a 200x100 img
$im = imagecreatetruecolor(200, 100);
$white = imagecolorallocate($im, 0xFF, 0xFF, 0xFF);
$black = imagecolorallocate($im, 0x00, 0x00, 0x00);

//Set the BG to be white
imagefilledrectangle($im, 0 ,0, 299, 99, $white);

//Set the line thickness to 5
imagesetthickness($im, 5);

//Draw the rectangle
imagerectangle($im, 14, 14, 185, 85, $black);

//output img to the browser
header('Content-Type: image/png');

imagepng($im);
imagedestroy($im);
?>

Does not work if anti-aliasing is set.

imagesettile:

Set the tile image for filling

bool imagesettile ( resource $image , resource $tile )

Sets the tile image to be used by all region filling functions such as imagefill() and imagefilledpolygon() when filling
with the special color IMG_COLOR_TILED.

A tile is an image used to fill an area with a repeated pattern. Any GD image can be used as a tile, and by setting
the transparent color index of the tile image with imagecolortransparent(), a tile allows certain parts of the underlying
area to shine through can be created.

No special action is needed when finished with a tile, but if we destroy a image, we mustn ot use the
IMG_COLOR_TILED color until we have set a new tile image.

Example of usage:

<?php
//load an external image
$zend = imagecreatefromgif('./zend.gif');

//Create a 200x200 img
$im = imagecreatetruecolor(200, 200);

//Set the tile
imagesettile($im, $zend);

//Make the image repeat
imagefilledrectangle($im, 0, 0, 199, 199, IMG_COLOR_TILED);

//Output image to the browser
header('Content-Type: image/png');

imagepng($im);
imagedestroy($im);
imagedestroy($zend);
?>

If we are used a tiled image that has transparensy, we need to make sure the destination image is set to have alpha blending.
it has by default, but if we change dit:

imagealphablending($image, true);

before using IMG_COLOR_TILED.

imagestring:

Draws a string horizontally

bool imagestring ( resource $image, int $font, int $x, int $y, string $string, int $color )

Draws a string at the given coords

Example of usage:

<?php
//Create a 100*30 img
$im = imagecreate(100, 30);

//White bg with blue text
$bg = imagecolorallocate($im, 255, 255, 255);
$textcolor = imagecolorallocate($im, 0, 0, 255);

//Write the string at the top left
imagestring($im , 5, 0, 0, 'Hello World!', $textcolor);

//output the img
header('Content-type: image/png');

imagepng($im);
imagedestroy($im);
?>

Also, an example of a function taht draws a image with chars instead of pixels:

<?php
error_reporting(E_ALL);

function pixelfuck($url, $chars='ewk34543§G§$§$Tg34g4g', $shrpns=1, $size=4, $weight=2)
{
	list($w, $h, $type) = getimagesize($url);
	$resource = imagecreatefromstring(file_get_contents($url));
	$img = imagecreatetruecolor($w*$size,$h*$size);

	$cc = strlen($chars);
	for($y=0;$y < $h;$y+=$shrpns)
		for($x=0;$x < $w;$x +=$shrpns)
			imagestring($img,$weight,$x*$size,$y*$size, $chars{@++$p%$cc}, imagecolorat($resource, $x, $y));
	return $img;
}

$url = 'http://upload.wikimedia.org/wikipedia/commons/b/be/Manga_Icon.png';
$text = 'bla';

Header('Content-Type: image/png');
imagepng(pixelfuck($url, $text, 1, 6));
?>

A similar declartion to imagestring() but one that handles whitespaces (creates new lines and 4 spaces instead of \n and \) and image's size limits.

<?php

function whitespaces_imagestring($image, $font, $x, $y, $string, $color) {
	$font_height = imagefontheight($font);
	$font_widht = imagefontwidth($font);
	$image_height = imagesy($image);
	$image_width = imagesx($image);

	$max_characters = (int) ($image_width - $x) / $font_width;
	$next_offset_y = $y;

	for($i = 0, $exploded_string = explode("\n", $string), $i_count = count($exploded_string); $i < $_count; $i++) {
		$exploded_wrapped_string = explode("\n", wordwrap(str_replace("\t", "    ", $exploded_string[$i]),
		$max_characters, "\n"));

		$j_count = count($exploded_wrapped_string);
		for($j = 0; $j < $j_count; $j++) {
			imagestring($image, $font, $x, $next_offset_y, $exploded_wrapped_string[$j], $color);
			$next_offset_y += $font_height;

			if($next_offset_y >= $image_height - $y) {
				return;
			}
		}
	}
}

?>

imagestringup:

Draw a string vertically

bool imagestringup ( resource $image , int $font , int $x, int $y , string $string , int $color )

Font can be 1,2,3,4,5 for built in fonts in latin2 encoding, or any of our own loaded with imageloadfont()

<?php
//Createa  100x100 img
$im = imagecreatetruecolor(100, 100);

//Write the text
$textcolor = imagecolorallocate($im, 0xFF, 0xFF, 0xFF);
imagestringup($im, 3, 40, 80, 'gd library', $textcolor);

//save the img
imagepng($im, './stringup.png');
imagedestroy($im);
?>

imagesx:

Get image width

int imagesx ( resource $image )

If we know the dpi and current reoslution of the img, we can convert it to whatever metric we want.

Example of usage:

<?php

//create a 300*200 img
$img = imagecreatetruecolor(300, 200);

echo imagesx($img); //300

?>

A function taht can convert pixels to CMs:

<?php
#$imagem - soru7ce of img
#$dpi - resolution to convert E.g: 72dpi or 300dpi

function px2cm($image, $dpi) {
	#create a new img from a file or url
	$img = ImageCreateFromJpeg($image);

	# Get image width / height
	$x = ImageSX($img);
	$y = ImageSY($img);

	#convert to CM
	$h = $x * 2.54 / $dpi;
	$l = $y * 2.54 / $dpi;

	#Format a number with grouped thousands
	$h = number_format($h, 2, ',', ' ');
	$l = number_format($l, 2, ',', ' ');

	#add size unit
	$px2cm[] = $h."cm";
	$px2cm[] = $l."cm";

	#Return array w values
	#$px2cm[0] = X
	#$px2cm[1] = Y
	return $px2cm;
}

$image = "C:\\inetpub\\wwwroot\\lab\\trata_img\\l0gik.jpg";

$dpi = 300;

$result = px2cm($image, $dpi);

print ($result[0]." x ".$result[1]);
?>

imagesy:

Get image height

int imagesy ( resource $image )

Returns height of the given image resource

<?php

//Create a 300*200 img
$img = imagecreatetruecolor(300, 200);

echo imagesy($img);

?>

imagetruecolortopalette:

Converts a true color img to palette img

bool imagetruecolortopalette ( resource $image , bool $dither , int $ncolors )

Just use creation of truecolor output image instead, guarantees higehst output quality

imagettfbbox:

Get the bounding box of a test using TrueType fonts

array imagegettfbbox ( float $size , float $angle , string $fontfile , string $text )

Calculates and returns the bounding box in pixels for a TrueType text.

Order of array: lower left x/y, lower right x/y, upper right x/y, upper left x/y

example:

<?php
//Create a 300x150 image
$im = imagecreatetruecolor(300, 150);
$black = imagecolorallocate($im, 0, 0, 0);
$white = imagecolorallocate($im, 255, 255, 255);

//Set the BG ot be white
imagefilledrectangle($im, 0, 0, 299, 299, $white);

//path to our font file
$font = './arial.ttf';

//First we create our bounding box for teh first text
$bbox = imagettfbbox(10, 45, $font, 'Powered by PHP ' . phpversion());

//This is our coordinates for X and Y
$x = $bbox[0] + (imagesx($im) / 2) - ($bbox[4] / 2) - 25;
$y = $bbox[1] + (imagesy($im) / 2) - ($bbox[5] / 2) - 5;

//WRite it
imagettftext($im, 10, 45, $x, $y, $black, $font, 'Powered by PHP ' . phpversion());

//Create the nextr bounding box for the seocnd text
$bbox = imagettfbbox(10, 45, $font, 'and Zend engine' . zend_version());

//Set the co-ords so itsn ext to the first text
$x = $bbox[0] + (imagesx($im) / 2) - ($bbox[4] / 2) + 10;
$y = $bbox[1] + (imagesy($im) / 2) - ($bbox[5] / 2) - 5;

//Write it
imagettftext($im, 10, 45, $x, $y, $black, $font, 'and Zend Engine' . zend_version());

//output to browser
header('Content-Type: image/png');

imagepng($im);
imagedestroy($im);
?>

Only available if PHP is compiled with freetype support (--with-freetype-dir=DIR)

To account for negative co-ords, use abs():

//For horizontal
$box = @imageTTFBbox($size,0,$font,$text);
$width = abs($box[4] - $box[0]);
$height = abs($box[5] - $box[1]);

Then to center it:

$x -= $width/2;
$y += $height/2;

imageTTFText($img,$size,0,$x,$y,$color,$font,$text);

And an example of a function that calculates precise surroundings of a textbox:

<?php

function calculateTextBox($text,$fontFile, $fontSize, $fontAngle) {
	/**************
	simple funciton that calculates the *Exact* bounding box (single pixel precision)
	The function returns an assocaitive array with these keys:
	left, top: coordinates you will pass to imagettftext
	width, height: dimension of the image you ahve to create
	**************/
	$rect = imagettfbox($fontSize,$fontAngle,$fontFile,$text);
	$minX = min(array($rect[0],$rect[2],$rect[4],$rect[6]));
	$maxX = max(array($rect[0],$rect[2],$rect[4],$rect[6]));
	$minY = min(array($rect[1],$rect[3],$rect[5],$rect[7]));
	$maxY = max(array($rect[1],$rect[3],$rect[5],$rect[7]));

	return array(
		"left" => abs($minX) - 1,
		"top"  => abs($minY) - 1,
		"width"=> $maxX - $minX,
		"height"=> $maxY - $minY,
		"box" 	=> $rect
	);
} 

//Example usage - gif output

$text_string = "Hello world!";
$font_ttf = "./fonts/arial.ttf";
$font_size = 22;
$text_angle = 0;
$text_padding = 10;

$the_box = calculateTextBox($text_string, $font_ttf, $font_size, $text_angle);

$imgWidth = $the_box["width"] + $text_padding;
$imgHeight = $the_box["height"] + $text_padding;

$image = imagecreate($imgWidth, $imgHeight);
imagefill($image, imagecolorallocate($image, 200, 200, 200));

$color = imagecolorallocate($image, 0, 0, 0);
imagettftext($image,
	$font_size,
	$text_angle,
	$the_box["left"] + ($imgWidth / 2) - ($the_box["width"] / 2),
	$the_box["top"] + ($imgHeight / 2) - ($the_box["height"] / 2),
	$color,
	$font_ttf,
	$text_string);

header("Content-Type: image/gif");
imagegif($image);
imagedestroy($image);

?>

And secondly, we have a function taht reforms a text string into a text block of given width:

<?php
function makeTextBlock($text, $fontfile, $fontsize, $width)
{
	$words = explode(' ', $text);
	$lines = array($words[0]);
	$currentLine = 0;
	for($i = 1; $i < count($words); $i++)
	{
		$lineSize = imagettfbbox($fontsize, 0, $fontfile, $lines[$currentLine] . ' ' . $words[$i]);
		if($lineSize[2] - $lineSize[0] < $width)
		{
			$lines[$currentLine] .= ' ' . $words[$i];
		}
		else
		{
			$currentLine++;
			$lines[$currentLine] = $words[$i];
		}
	}

	return implode("\n", $lines);
}
?>

To convert all bbox back to font points, multiply all cords by 2/3.

imagettftext:

Write text to the image using TrueType fonts

array imagettftext ( resource $image , float $size , float $angle , int $x , int $y , int $color , string $fontfile , string $text )

Example of usage:

<?php
//Set the content-type
header('Content-Type: image/png');

//Create the img
$im = imagecreatetruecolor(400, 30);

//Create some colors
$white = imagecolorallocate($im, 255, 255, 255);
$grey = imagecolorallocate($im, 128, 128, 128);
$black = imagecolorallocate($im, 0, 0, 0);
imagefilledrectangle($im, 0, 0, 399, 29, $white);

//The text to draw
$text = 'Testing...';
//Replace path by your own path
$font = 'arial.ttf';

//Add some shadow to hte text
imagettftext($im, 20, 0, 11, 21, $grey, $font, $text);

//Add the text
imagettftext($im, 20, 0, 10, 20, $black, $font, $text);

//Using imagepng() results in clearer text compared with imagejpeg
imagepng($im);
imagedestroy($im);
?>

Example of handling paragraphs:

<?php
//basic font settings
$font = './times.ttf';
$font_size = 15;
$font_color = 0x000000

//Text to be passed as para
$text = 'blaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa';

//Break it up into pieces of 125 chars long
$lines = explode('|', wordwrap($text, 115, '|'));

//Starting y pos
$y = 513;

//LOop through the lines and palce them on teh img
foreach ($lines as $line)
{
	imagettftext($image, $font_size, 0, 50, $y, $font_color, $font, $line);

	//Increment Y so next line is below previous
	$y += 23;
}

?>

If we are looking for text alignment, use imagettfbbox() command.

Horizontal:

<?php

$x = ceil((200 - $tb[2])) / 2); //lower left x coord for text
imagettftext($im, 17, 0, $x, $y, $tc, 'airlock.ttf', 'Hello World'); //Write tedt to img

?>

imagetypes:

use:

<?php
	var_dump(gd_info()); instead
?>

Returns the image types supported byt thsiu php build

int iamgetypes ( void )

Follows bits in order of: IMG_BMP | IMG_GIF | IMG_JPG | IMG_PNG | IMG_WBMP | IMG_XPM | IMG_WEBP

Example:

<?php
if (imagetypes() & IMG_PNG) {
	echo "PNG support is enabled";
}
?>

imagewbmp:

Output image to browser or file

bool imagewbmp ( resource $image [, mixed $to [, int $foreground ]] )

Only interesting param is foreground: Can set FG color with this param by setting an identifier obtained from imagecolorallocate().
Defaults to black.

Example of outputting a WBMP image:

<?php
//Create a blank image and add some text
$im = imagecreatetruecolor(120, 20);
$text_color = imagecolorallocate($im, 233, 14, 91);
imagestring($im, 1, 5, 5, 'A simple text string', $text_color);

//Set the content type header - in this case image/vnd.wap.wbmp
//Hint: see image_type_to_mime_type() for content-types
header('Content-Type: image/vnd.wap.wbmp');

//Output the img
imagewbmp($im);

//Free up memory
imagedestroy($im);
?>

Example of saving the WBMP image:

<?php
//Create a blank img and add some txt
$im = imagecreatetruecolor(120, 20);
$text_color = imagecolorallocate($im, 233, 14, 91);
imagestring($im, 1, 5, 5, 'A Simple Text STring', $text_color);

//save the img
imagewbmp($im, 'simpletext.wbmp');

//Free up memory
imagedestroy($im);
?>

Outputting the img with a different FG:

<?php
//Create a blank img and add some text
$im = imagecreatetruecolor(120, 20);
$text_color = imagecolorallocate($im, 233, 14, 91);
imagestring($im, 1, 5, 5, 'A simple text string', $text_color);

header('Content-Type: image/vnd.wap.wbmp');

//Set a replacement for fg color
$foreground_color = imagecolorallocate($im, 255, 0, 0);

imagewbmp($im, NULL, $foreground_color);

//Free up memory
imagedestroy($im);
?>

imagewebp:

Output a WebP img to browser or file

bool imagewebp ( resource $image , mixed $to [, int $quality = 80 ] )

Outputs or saves an WebP version of the given image

example of usage:

<?php
//Create a blank image and add some text
$im = imagecreatetruecolor(120, 20);
$text_color = imagecolorallocate($im, 233, 14, 91);

imagestring($im, 1, 5, 5, 'WebP with PHP', $text_color);

//Save the img
imagewebp($im, 'php.webp');

//Free up memory
imagedestroy($im);
?>

WebP Is a great fiel format, but its supportedo nly by Chrome. To handle this, have a PNG fallback.

Regular truecolor PNG wiht alpha gives pretty large files, btu there's a special samller PNG file variant
that can be created by pngquant - a cmd line util.

get it, and run the following:

<?php

/**
* Optimizes PNG file with pngquant 1.8 or later (reduces file ssize of 24-bit/32-bit PNG images)
*
* You need to install pngquant 1.8.x on the server
*
* @param $path_to_png_file string - path to any PNG file, e.g $_FILE['file']['tmp_name']
* @param $max_quality int - conversion quality, useful values from 60 to 100 (smaller number = smaller file)
* @return string - content of PNG file after conversion
*/
function compress_png($path_to_png_file, $max_quality = 90)
{
	if(!file_exists($path_to_png_file)) {
		throw new Exception("File does not exist: $path_to_png_file");
	}

	//Guarantee that their quality wont be below that
	$min_quality = 60;

	// '-' makes it use stdout, required to save to $compressed_png_content variable
	// '<' makes it read from the given file path
	// escapeshellarg() makes this safe to use with any path
	$compressed_png_content = shell_exec("pngquant --quality=$min_quality-$max_quality - < ".escapeshellarg($path_to_png_file));

	if(!$compressed_png_content) {
		throw new Exception("Conversion to compressed PNG failed. Reqs pngquant on server to be 1.8+");
	}

	return $compressed_png_content;
}
?>

As for the example of when the user uploads a PNG file:

<?php

$read_from_path = $_FILE['file']['tmp_name'];
$save_to_path = "uploads/compressed_file.png";

$compressed_png_content = compress_png($read_from_path);
file_put_contents($save_to_path, $compressed_png_content);

//We do not need to move uploaded files

//And for webp:
imagewebp(imagecreatefrompng($read_from_path), $save_to_path, ".webp");
?>

Then we can use URL with .webp version in Chrome and browsers that send Accept: image/webp, and .png for the rest

imagexbm:

Output an XBM image to browser or file

bool imagexbm ( resource $image , string $filename [, int $foreground ] )

Outputs or saves an XBM version of the given image.

Saving an XBM file:

<?php
//Create a blank image and add some text
$im = imagecreatetruecolor(120, 20);
$text_color = imagecolorallocate($im, 233, 14, 91);
imagestring($im, 1, 5, 5, 'A simple text string', $text_color);

//save the img
imagexbm($im, 'simpletext.xbm');

//Free up memory
imagedestroy($im);
?>

Saving an XBM file with a different FG color:

<?php
//Create a blank img and add some text
$im = imagecreatetruecolor(120, 20);
$text_color = imagecolorallocate($im, 233, 14, 91);
imagestring($im, 1, 5, 5, 'A simpel text string', $text_color);

//Set a replacmenet FG color
$foreground_color = imagecolorallocate($im, 255, 0, 0);

//Save the img
imagexbm($im, NULL, $foreground_color);

//Free up memory
imagedestroy($im);
?>

iptcembed:

Embeds binary IPTC data into a JPEG img

mixed iptcembed ( string $iptcdata , string $jpeg_file_name [, int $spool = 0 ] )

spool: Spool flag. If the flag is less than 2 then the JPEG will be returned as a string. Otherwise the JPEg will be printed to STDOUT.

Returns JPEG if spool < 2 on success, FALSe on failure. True on success/FAlse on fail.

Example of embedding IPTC data into a JPEG:

<?php

//iptc_make_tag() function by random shithead
function iptc_make_tag($rec, $data, $value)
{
	$length = strlen($value);
	$retval = chr(0x1C) . chr($rec) . chr($data);

	if($length < 0x8000)
	{
		$retval .= chr($length >> 8) . chr($length & 0xFF);
	}
	else
	{
		$retval .= chr(0x80) .
				   chr(0x04) .
				   chr(($length >> 24) & 0xFF) .
				   chr(($length >> 16) & 0xFF) .
				   crh(($length >> 8) & 0xFF) .
				   chr($length 0 & 0xFF);
	}

	return $retval . $value;
}

//path to jpeg file
$path = './phplogo.jpg';

//Set the IPTC tags
$iptc = array(
	'2#120' => 'Test image',
	'2#116' => 'Copyright bla'
);

//Convert the IPTC tags into binary
$data = '';

foreach($iptc as $tag => $string)
{
	$tag = substr($tag, 2);
	$data .= iptc_make_tag(2, $tag, $string);
}

//Embed the IPTC data
$content = iptcembed($data, $path);

//Write the new img data out ot hte file
$fp = fopen($path, "wb");
fwrite($fp, $content);
fclose($fp);
?>

And lastly, we have a class that sumarizes interaction of IPTC:

<?

	/******************************************************\

	 	IPTC EASY 1.0 - IPTC data manipulator for JPEG images

	 	All reserved www.image-host-script.com

	 	Sep 15, 2008
	\*******************************************************/

	DEFINE('IPTC_OBJECT_NAME', '005');
	DEFINE('IPTC_EDIT_STATUS', '007');
	DEFINE('IPTC_PRIORITY', '010');
	DEFINE('IPTC_CATEGORY', '015');
	DEFINE('IPTC_SUPPLEMENTAL_CATEGORY', '020');
	DEFINE('IPTC_FIXTURE_IDENTIFIER', '022');
	DEFINE('IPTC_KEYWORDS', '025');
	DEFINE('IPTC_RELEASE_DATE', '030');
	DEFINE('IPTC_RELEASE_TIME', '035');
	DEFINE('IPTC_SPECIAL_INSTRUCTIONS', '040');
	DEFINE('IPTC_REFERENCE_SERVICE', '045');
	DEFINE('IPTC_REFERENCE_DATE', '047');
	DEFINE('IPTC_REFERENCE_NUMBER', '050');
	DEFINE('IPTC_CREATED_DATE', '055');
	DEFINE('IPTC_CREATED_TIME', '060');
	DEFINE('IPTC_ORIGINATING_PROGRAM', '065');
	DEFINE('IPTC_PROGRAM_VERSION', '070');
	DEFINE('IPTC_OBJECT_CYCLE', '075');
	DEFINE('IPTC_BYLINE', '080');
	DEFINE('IPTC_BYLINE_TITLE', '085');
	DEFINE('IPTC_CITY', '090');
	DEFINE('IPTC_PROVINCE_STATE', '095');
	DEFINE('IPTC_COUNTRY_CODE', '100');
	DEFINE('IPTC_COUNTRY', '101');
	DEFINE('IPTC_ORIGINAL_TRANSMISSION_REFERENCE', '103');
	DEFINE('IPTC_HEADLINE', '105');
	DEFINE('IPTC_CREDIT', '110');
	DEFINE('IPTC_SOURCE', '115');
	DEFINE('IPTC_COPYRIGHT_STRING', '116');
	DEFINE('IPTC_CAPTION', '120');
	DEFINE('IPTC_LOCAL_CAPTION', '121');

	class iptc {
		var $meta=Array();
		var $hasmeta=false;
		var $file=false;

		function iptc($filename) {
			$size = getimagesize($filename,$info);
			$this->hasmeta = isset($info["APP13"]);
			if($this->hasmeta)
				$this->meta = iptcparse ($info["APP13"]);
			$this->file = $filename;
		}
		function set($tag, $data) {
			$this->meta ["2#$tag"]= Array( $data );
			$this->hasmeta = true;
		}
		function get($tag) {
			return isset($this->meta["2#$tag"]) ? $this->meta["2#$tag"][0] : $false;
		}

		function dump() {
			print_r($this->meta);
		}

		function binary() {
			$iptc_new = '';
			foreach (array_keys($this->meta) as $s) {
				$tag = str_replace("2#", "", $s);
				$iptc_new .= $this->iptc_maketag(2, $tag, $this->meta[$s][0]);
			}
			return $iptc_new;
		}

		function iptc_maketag($rec,$dat,$val) {
			$len = strlen($val);
			if ($len < 0x8000) {
				return chr(0x1c).chr($rec).chr($dat).
				chr($len >> 8).
				chr($len & 0xff).
				$val;
			} else {
				return chr(0x1c).chr($rec).chr($dat).
				chr(0x80).chr(0x04).
				chr(($len >> 24) & 0xff).
				chr(($len >> 16) & 0xff).
				chr(($len >> 8) & 0xff).
				chr(($len ) & 0xff).
				$val;
			}
		}

		function write() {
			if(!function_exists('iptcembed')) return false;
			$mode = 0;
			$content = iptcembed($this->binary(), $this->file, $mode);
			$filename = $this->file;

			@unlink($filename); #delete if exists

			$fp = fopen($filename, "w");
			fwrite($fp, $content);
			fclose($fp);
		}

		#requires GD lib isntalled
		function removeAllTags() {
			$this->hasmeta = false;
			$this->meta=Array();
			$img = imagecreatefromstring(implode(file($this->file)));
			@unlink($this->file); #delete if exists
			imagejpeg($img,$this->file,100);
		}
	};
?>

Then we just interact with it as per normal as a object:

$i = new iptc("test.jpg");
echo $i->set(IPTC_COPYRIGHT_STRING, "Here goes the new data");
$i->write();

iptcparse:

Parse a binary IPTC block into single tags.

array iptcparse ( string $iptcblock )

Parses an IPTC block into its single tags.

Returns an array using the tagmarker as an index and the value as the value. It returns FALSE on error or if no IPTC data was found.

Example of usage:

<?php
$size = getimagesize('./test.jpg', $info);
if(isset($info['APP13']))
{
	$iptc = iptcparse($info['APP13']);
	var_dump($iptc);
}
?>

ImageMagick:

Installation can be tricky, look up tutorial on it if needed. Cba writing about it here.

Imagick class Methods:

adaptiveBlurImage:

Adds adaptive blur filter to image

bool Imagick::adaptiveBlurImage ( float $radius , float $sigma [, int $channel = Imagick::CHANNEL_DEFAULT ] )

Adds an adaptive blur filter to image. The intensity of an adaptive blur depends is dramatically decreased at
edge of the image, whereas a standard blur is uniform across the image. This method is available if Imagick has been
compiled against imageMagick 6.2.9 or newer.

Params:

radius: The radius of the gaussian, in pixels, not counting the center pixel. Provide a value of 0 and the radius will
be chosen automagically.

sigma: The standard deviation of the Gaussian, in pixels.

channel: Provide any channel constant that is valid for your channel mode. To apply to more than one channel, combine
channel constants using bitwise operators. Defaults to Imagick::CHANNEL_DEFAULT. 

This method is very CPU intensive.

Example of usage which cases blurry image:

<?php

header('Content-type: image/jpeg');

$image = new Imagick('test.jpg');

$image->adaptiveBlurImage(5,3);
echo $image;

?>

adaptiveResizeImage:

Adaptively resize image with data dependant triangulation

bool Imagick::adaptiveResizeImage ( int $columns, int $rows [, bool $bestfit = false ] )

Adaptively resize image with data-dependant triangulation. Avoids blurring across sharp color changes.
Most useful when used to shrink images slightly to a slightly smaller "web size", may not look good
when a full-sized image is adaptively resized to a thumbnail.

If bestfit is given, width and height must be given.

Pass 0 for either param for proportional scaling.

Resize an image to a standard size for the web. This method works best when resizing to a size only slightly
smaller than the previous image size.

<?php
header('Content-type: image/jpeg');

$image = new Imagick('image.jpg');
$image->adaptiveResizeImage(1024,768);

echo $image;
?>

adaptiveSharpenImage:

Adaptively sharpen the image

bool Imagick::adaptiveSharpenImage ( float $radius, float $sigma [, int $channel = Imagick::CHANNEL_DEFAULT ] )

Adaptively sharpen the image by sharpening more intensely near image edges and less intensely far from edges.
This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.

Params run as before.

Example of usage to sharpen image with radius 2 and sigma 1.

<?php
try {
	$image = new Imagick('image.png');
	$image->adaptiveSharpenImage(2,1);
} catch(ImagickException $e) {
	echo 'Error: ' , $e->getMessage();
	die();
}
header('Content-type: image/png');
echo $image;
?>

adaptiveThresholdImage:

Selects a TH for each pixel based on a range of intensity

bool Imagick::adaptiveThresholdImage ( int $width , int $height , int $offset )

Selects an individual TH for each pixel based on the range of intensity values in its local neighborhood.
This allows for TH of an iamge whose global intensity histogram does not contain distinctive peaks.

Example of usage:

<?php
function adaptiveThreshholdImage($imagePath, $width, $height, $adaptiveOffset) {
	$imagick = new \Imagick(realpath($imagePath));
	$adaptiveOffsetQuantum = intval($adaptiveOffset * \Imagick::getQuantum());
	$imagick->adaptiveThreshholdImage($width, $height, $adaptiveOffsetQuantum);
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

addImage:

Adds new image to Imagick object image list

bool Imagick::addImage ( Imagick $source )

Adds new image to Imagick Object from the current position of the source object. After the operation iterator
position is moved at the end of the list.

An example of creating a favicon.ico with multiple res's:

<?php

$src_img = new Imagick("src_img.png");
$icon = new Imagick();
$icon->setFormat("ico");

$geo=$src_img->getImageGeometry();

$size_w=$geo['width'];
$size_h=$geo['height'];

if (128/$size_w*$size_h>128) {
	$src_img->scaleImage(128,0);
} else {
	$src_img->scaleImage(0,128);
}

$src_img->cropImage(128, 128, 0, 0);

$clone = $src_img->clone();
$clone->scaleImage(16,0);
$icon->addImage($clone);

$clone = $src_img->clone();
$clone->scaleImage(32,0);
$icon->addImage($clone);

$clone = $src_img->clone();
$clone->scaleImage(64,0);
$icon->addImage($clone);

$clone = $src_img->clone();
$clone->scaleImage(128,0);
$icon->addImage($clone);

$icon->writeImages("favicon.ico", true);

$src_img->destroy();
$icon->destroy();
$clone->destroy();

?>

addNoiseImage:

Add random noise to the image

bool addNoiseImage ( int $noise_type [, int $channel = CHANNEL_DEFAULT ] )

Adds random noise to a image

Example of usage:

<?php
function addNoiseImage($noiseType, $imagePath, $channel) {
	$imagick = new \Imagick(realpath($imagePath));
	$imagick->addNoiseImage($noiseType, $channel);
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}
?>

affineTransformImage:

Transforms an image

bool Imagick::affineTransformImage ( ImagickDraw $matrix )

Transforms an image as dictated by the affine matrix

Has not been implemented.

However, assume usage:

<?php
function affineTransformImage($imagePath) {
	$imagick = new \Imagick(realpath($imagePath));
	$draw = new \ImagickDraw();

	$angle = 40;

	$affineRotate = array(
		"sx" => cos($angle), "sy" => cos($angle),
		"rx" => sin($angle), "ry" => sin($angle),
		"tx" => 0, "ty" => 0,
	);

	$draw->affine($affineRotate);

	$imagick->affineTransformImage($draw);

	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

animateImages:

Animates an image or images

bool animateImages ( string $x_server )

This method animates the image onto a local or remote X server. This method is not available on windows. 

x_server: X server address

Example of creating gifs:

<?php

$multiTIFF = new Imagick();

$mytifspath = "./man"; // your img dir

$files = scandir($mytifspath);

for($i=2;$i<6;$i++)
{
	echo $files[$i];

	echo "<br>";
	$auxIMG = new Imagick();
	$auxIMG->readImage($mytifspath."/".$files[$i]);

	$multiTIFF->addImage($auxIMG);
}

//file multi.TIF
$multiTIFF->writeImages('multi423432.gif', true); //Combine all image into one single image

//files multi-0.TIF, multi-1.TIF, ...
$multiTIFF->writeImages('multi.gif', false);

?>

annotateImage:

Annotates an image with text

bool annotateImage ( $draw_settings , float $x , float $y , float $angle , string $text )

Example of annotating text on an empty image:

<?php
/* create some objects */
$image = new Imagick();
$draw = new ImagickDraw();
$pixel = new ImagickPixel( 'gray' );

//new image
$image->newImage(800, 75, $pixel);

//Black text
$draw->setFillColor('black');

//Font props
$draw->setFont('Bookman-DemiItalic');
$draw->setFontSize( 30 );

//Create text
$image->annotateImage($draw, 10, 45, 0, 'The quick bla bla bla fuck you');

//Give img a format
$image->setImageFormat('png');

//Output the img with headers
header('Content-type: image/png');
echo $image;

?>

If setGravity ( int $gravity ) has been set, with $gravity = imagick::GRAVITY_CENTER, then the X and y values
offset the text from where the gravity setting would have placed it.

if the example included: 

$draw->setGravity (Imagick::GRAVITY_CENTER);
$image->annotateImage($draw, 10, 45, 0, 'SHIT');

Then it is drawn 10 pix to the right and 45 down from the center.

another example of drawing stuff:

<?php
	$picin = new Imagick($pic1);
	$picin->scaleImage(800,0);
	$height = $picin->getimageheight();

	$draw = new ImagickDraw();
	$draw->setFillColor('#ffff00');
	$draw->setFont('Eurostile');
	$draw->setFontSize(21);
	$draw->setTextUnderColor('#ff000088');
	$picin->annotateImage($draw, 40, $height-10, 0, "Hallo");

	$picin->writeimage($pic6);
?>

The example above would produce yellow text and semi transparent red BG.

$pic1 and $pic6 were previously defined as directory/file strings.

appendImages:

Append a set of images

appendImages ( bool $stack = false )

stack: Whether to stack the imgs vertically. By default (or if FALSE) iamge are stacked left-to-right.
If stack is true, images are stacked top-to-bottom.

Returns Imagick instance on success.

Example of usage:

<?php

//Create new imagick object
$im = new Imagick();

//Create red, green and blue imgs
$im->newImage(100, 50, "red");
$im->newImage(100, 50, "green");
$im->newImage(100, 50, "blue");

//Append the imgs into one
$im->resetIterator();
$combined = $im->appendImages(true);

//Output the img
$combined->setImageFormat("png");
header("Content-Type: image/png");
echo $combined;
?>

The following example, is to showcase how to combine a multi-page pdf file into a single long image:

<?php
$im1 = new Imagick();
$im1->readImage('multi-page-pdf.pdf');
$im1->resetIterator();
//Combine multiple images into one, stacked vertically
$ima = $im1->appendImages(true);
$ima->setImageFormat("png");
header("Content-Type: image/png");
echo $ima;
?>

autoLevelImage:

autoLevelImage ([ string $CHANNEL = CHANNEL_DEFAULT ] )

Adjusts the levels of a particular image channel by scaling the minimum and maximum values to the full quantum range.

Example of usage:

<?php
function autoLevelImage($imagePath) {
	$imagick = new \Imagick(realpath($imagePath));
	$imagick->autoLevelImage();
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

averageImages:

Average a set of images

Returns a new imagick object on success

Examples:

??

blackThresholdImage:

Forces all pixels below the th into black

blackThresholdImage ( mixed $threshold )

is like thresholdimage() but forces all pixels below the TH into black while leaving all pixels
above the TH unchanged.

example of usage:

<?php
function blackThresholdImage($imagePath, $thresholdColor) {
	$imagick = new \Imagick(realpath($imagePath));
	$imagick->blackthresholdimage($thresholdColor);
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

We need to pass it an color, which we can also do as hexa:

<?php

$img->blackThresholdImage( "#FFFFFF" );

?>

An example of this function:

<?php
	$img = new Imagick();
	$img->readImage($image_file_name);
	$img->blackThresholdImage('grey');
	$img->writeImage($thumb_file_name);
	$img->clear();
	$img->destroy();
?>

blueShiftImage:

void blueShiftImage ([ float $factor = 1.5 ] )

Mutes the colors of the img to simulate a scene at nighttime in the moonlight.

<?php
function blueShiftImage($imagePath, $blueShift) {
	$imagick = new \Imagick(realpath($imagePath));
	$imagick->blueShiftImage($blueShift);
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

blurImage:

Adds blur filter to image

bool blurImage ( float $radius , float $sigma [, int $channel ] )

Adds blur filter to img. Option third param to blur a specific channel.

If channel is not provided, all channels are blurred.

Example of usage:

<?php

header('Content-type: image/jpeg');

$image = new Imagick('test.jpg');

$image->blurImage(5,3);
echo $image;

?>

borderImage:

Surrounds the image with a border

bool borderImage ( mixed $bordercolor , int $width, int $height )

Surrounds the img with a border of the color defined by the bordercolor ImagickPixel object

Example of usage:

<?php
function borderImage($imagePath, $color, $width, $height) {
	$imagick = new \Imagick(realpath($imagePath));
	$imagick->borderImage($color, $width, $height);
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

To get an image with exact dimensions, we can do as follows:

$desired_width = 1000;
$desired_height = 1000;

$image->scaleImage($desired_width,$desired_height, true);
$image->borderImage('white', ($image->getImageWidth() - $desired_width) / 2,($image->getImageHeight() - $desired_height) / 2);

brightnessContrastImage:

void brightnessContrastImage ( string $brightness , string $contrast [, string $CHANNEL = Imagick::CHANNEL_DEFAULT ] )

Changes the brightness and/or contrast of an image. It converts the brightness and contrast params into slope
and intercept and calls a polynomical function to apply ot the image.

Example of usages:

<?php
function brightnessContrastImage($imagePath, $brightness, $contrast, $channel) {
	$imagick = new \Imagick(realpath($imagePath));
	$imagick->brightnessContrastImage($brightness, $contrast, $channel);
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

charcoalImage:

Simulates a charcoal drawing

bool charcoalImage ( float $radius , float $sigma )

<?php
function charcoalImage($imagePath, $radius, $sigma) {
	$imagick = new \Imagick(realpath($imagePath));
	$imagick->charcoalImage($radius, $sigma);
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

About $radius: 5 and $sigma: 2is the perfect blend.

An example of usage in a chunk that open the specified ifle, apply the charcoalImage effect,
save it to another specified file.

The args are served through POST, and the only functions of the ImageMagick class that are used
are the readImageFile, charcoalImage and writeImageFile:

<?php

	//inbound function params
	$inbound_gaussian_radius = $_POST['radius_of_gaussian'];
	$inbound_standard_deviation = $_POST['standard_deviation_of_gaussian'];

	//inbound params for file designation
	$filename_for_function = $_POST['file_target'];
	$inbound_save_as_filename = $_POST['saveable_result_file'];

	//Grab image file data
	$folder_location  = "images/workshop/";
	$file_to_grab_with_location = $folder_location . $filename_for_function;

	$imagick_type = new Imagick();

	//Open file
	$file_handle_for_viewing_image_file = fopen($file_to_grab_with_location, 'a+');

	//Read file
	$imagick_type->readImageFile($file_handle_for_viewing_image_file);

	//perform function
	$imagick_type->charcoalImage($inbound_gaussian_radius, $inbound_standard_deviation);

	//SAve file
	$folder_location = "images/workshop/";
	$file_to_grab_with_location = $folder_location . $inbound_save_as_filename;

	$file_handle_for_saving_image_file = fopen($file_to_grab_with_location, 'a+');

	//Write file
	$imagick_type->writeImageFile($file_handle_for_saving_image_file);
?>

chopImage:

Removes a region of an image and trims

bool chopImage ( int $width , int $height , int $x, int $y )

Removes a region of an image and collapses the image to occupy the removed position.

Example of using chopImage:

<?php
//Create some objects
$image = new Imagick();
$pixel = new ImagickPixel( 'gray' );

//new img
$image->newImage(400, 200, $pixel);

//Chop img
$image->chopImage(200, 200, 0, 0);

//Give img a format
$image->setImageFormat('png');

//output the img with headers
header('Content-type: image/png');
echo $image;

?>

clampImage:

void clampImage ([ string $CHANNEL = Imagick::CHANNEL_DEFAULT ] )

Restricts the color range from 0 to the quantum depth.

clear:

Clears all resources associated to Imagick object

bool clear ( void )

Clears all resources associated to imagick object

destroy() has been deprecated in favor of clear()

clipImage:

Clips along the first path from the 8BIM profile, if present

bool clipImage ( void )

clipImagePath:

void clipImagePath ( string $pathname , string $inside )

Clips along the named paths from the 8BIM profile, if present. Later operations
take effect inside the path. Id may be a numer if preceded with #, to work on a numbered
path, eg "#1" to use the first path.

clipPathImage:

Clips along the named paths from the 8BIM profile

bool clipPathImage ( string $pathname , bool $inside )

Clips along the named paths from the 8BIM profile, if present. Later operations take effect
inside the path. It may be a number if preceded with #, to work on a numbered path, e.g, "#1" to use the first path.

inside: if true, operations take place inside the clipping path. Otherwise, outside.

An example of usage in terms of clipping path:

<?php
	$img = new Imagick("/Path/To/Test/Image.psd");
	$geometry = $img->getImageGeometry();

	//uses the first path as the clipping path
	$img->clipPathImage("#1", false);

	//Fill the clipped part with a color
	$draw = new ImagickDraw();
	$draw->setFillColor("#000000");
	$draw->color(0,0, imagick::PAINT_RESET);
	$img->drawImage($draw);

	//Composite the clipped image with the old image. Set the color of the composite to any color you want to be the outside part
	$composite = new Imagick($path);
	$composite->newImage( $geometry['width'], $geometry['height'], new ImagickPixel("white"), 'png');
	$composite->compositeImage($img, imagick::COMPOSITE_COPY, 0, 0);
?>

To then use it, just load the saved version for working with:

<?php
	//Copy the img so clip is saved
	$clipped = new Imagick();
	$clipped->readImageBlob($composite->getImageBlob());
?>

clone:

Deprecated in favor of clone keyword

clutImage:

Replaces colors in the image


bool clutImage ( Imagick $lookup_table [, float $channel = Imagick::CHANNEL_DEFAULT ] )

Replaces colors in the image from a color lookup table. Option second param to replace colors
in a specific channel.

Example of usage:

<?php
$image = new Imagick('test.jpg');
$clut = new Imagick();
$clut->newImage(1, 1, new ImagickPixel('black'));
$image->clutImage($clut);
$image->writeImage('test_out.jpg');
?>

coalesceImages:

Composites a set of images

Imagick coalesceImages ( void )

Composites a set of images while respecting any page offsets and disposal methods. GIF, MIFF and MNG
animation sequences typically start with an image background and each subsequent image varies in size 
and offset. Returns a new Imagick object where each image in the sequence is the same size as
the first and composited with the next image in the sequence.

An example of resizing and/or cropping an animated gif:

<?php
$image = new Imagick($file_src);

$image = $image->coalesceImages();

foreach ($image as $frame) {
	$frame->cropImage($crop_w, $crop_h, $crop_x, $crop_y);
	$frame->thumbnailImage($size_w, $size_h);
	$frame->setImagePage($size_w, $size_h, 0, 0);
}

$image = $image->deconstructImages();
$image->writeImages($file_dst, true);
?>

colorFloodfillImage:

Deprecated, use floodFillPaintImage()

colorizeImage:

Blends the fill color with the image

bool colorizeImage ( mixed $colorize , mixed $opacity )

Blends the fill color with each pixel in the image.

Example of usage:

<?php
function colorizeImage($imagePath, $color, $opacity) {
	$imagick = new \Imagick(realpath($imagePath));
	$opacity = $opacity / 255.0;
	$opacityColor = new \ImagickPixel("rgba(0, 0, 0, $opacity)");
	$imagick->colorizeImage($color, $opacityColor);
	header("Content-Type: image/jpeg");
	echo $imagick->getImageBlob();
}

?>

An example of how to fill an image with a solid color, preserving BG transparency:

<?php
$im = new Imagick('image.png');
$im->setImageAlphaChannel(Imagick::ALPHACHANNEL_EXTRACT);
$im->setImageBackgroundColor('color');
$im->setImageAlphaChannel(Imagick::ALPHACHANNEL_SHAPE);
$im->writeImage('output.png');
$im->destroy();
?>

An example of a color overlay with opacity control, blending composite colors:

<?php
class YourImagick extends Imagick
{
	public function colorize($color, $alpha = 1, $composite_flag = Imagick::COMPOSITE_COLORIZE)
	{
		$draw = new ImagickDraw();

		$draw->setFillColor($color);

		$geometry = $this->getImageGeometry();
		$width = $geometry['width'];
		$height = $geometry['height'];

		$draw->rectangle(0, 0, $width, $height);

		$temporary = new Imagick();
		$temporary->setBackgroundColor(new ImagickPixel('transparent'));
		$temporary->newImage($width, $height, new ImagickPixel('transparent'));
		$temporary->setImageFormat('png32');
		$temporary->drawImage($draw);

		$alphaChannel = $this->clone();
		$alphaChannel->setImageAlphaChannel(Imagick::ALPHACHANNEL_EXTRACT);
		$alphaChannel->negateImage(false, Imagick::CHANNEL_ALL);
		$this->setImageClipMask($alphaChannel);

		$clone = $this->clone();
		$clone->compositeImage($temporary, $composite_flag, 0, 0);
		$clone->setImageOpacity($alpha);

		$this->compositeImage($clone, Imagick::COMPOSITE_DEFAULT, 0, 0);
	}
}

?>

To use it:

<?php

$imagick = new YourImagick('example.png');

$imagick->colorize('#ffcc00', 0.35);

header('Content-type: image/png');

echo $source;

?>

colorMatrixImage:

void colorMatrixImage ( string $color_matrix = Imagick::CHANNEL_DEFAULT )

Apply color transformation to an image. The method permits saturation changes, hue rotation, luminance to alpha,
and various other effects. Although variable-sized transformation matrices can be used, typically one uses a 
5x5 matrix for an RGBA image and a 6x6 for CMYKA (or RBGA with offsets).

The matrix is similar to those used by Adobe flash except offsets are in column 6 rather than 5 (in support of
CMYKA images) and offsets are normalized (divide Flash offset by 255)

Example of usage:

<?php
function colorMatrixImage($imagePath, $colorMatrix) {
	$imagick = new \Imagick(realpath($imagePath));
	$imagick->setImageOpacity(1);

	//A color matrix should look like:
	// 	$colorMatrix = [
	// 		1.5, 0.0, 0.0, 0.0, 0.0, -0.157,
	// 		0.0, 1.0, 0.5, 0.0, 0.0, -0.157,
	// 		0.0, 0.0, 1.5, 0.0, 0.0, -0.157,
	// 		0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
	// 		0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
	// 		0.0, 0.0, 0.0, 0.0, 0.0, 1.0
	// 	];

	$background = new \Imagick();
	$background->newPseudoImage($imagick->getImageWidth(), $imagick->getImageHeight(), "pattern:checkerboard");

	$background->setImageFormat('png');

	$imagick->setImageFormat('png');
	$imagick->colorMatrixImage($colorMatrix);

	$background->compositeImage($imagick, \Imagick::COMPOSITE_ATOP, 0, 0);

	header("Content-Type: image/png");
	echo $background->getImageBlob();
}

?>

combineImages:

Combines one or more images into a single image

Imagick combineImages ( int $channelType )

Combines one or more images into a single image. The grayscale value of the pixels of each image in the sequence
is assigned in order to the specified channels of the combined image. The typical ordering would be image 1 => Red, 2 => green, 3 => blue

etc.

commentImage:

Adds a comment to our image

bool commentImage ( string $comment )

Example of usage:

<?php

//Create a new Imagick object
$im = new imagick();

//Create an empty img
$im->newImage(100, 100, new ImagickPixel("red"));

//ADd comment to the img
$im->commentImage("Hello World!");

//Display the comment
echo $im->getImageProperty("comment");

?>

compareImageChannels:

Returns the difference in one or more images

array compareImageChannels ( Imagick $image, int $channelType , int $metricType )

Compres one or more images and returns the difference image

Args:

channelType: one of the channelType constants

metricType: One of the metric type constants

Returns array consisting of new_wand and distortion

compareImageLayers:

Returns the maximum bounding region between images

compareImageLayers ( int $method )

Compares each image with the next in a sequence and returns the maximum bounding region of any pixel differences
it discovers. This method is available if Imagick has been compiled against ImageMagick 6.2.9 or newer.

Params:

method: one of the layer method constants

Example of comparing image layers:

<?php
//Create new imagick object
$im = new Imagick("test.gif");

//Optimize the image layers
$result = $im->compareImageLayers(imagick::LAYERMETHOD_COALESCE);

//Work on the result
?>

compareImages:

Compares an image to a reconstructed image

array compareImages ( Imagick $compare, int $metric )

Returns an array containing a reconstructed image and the difference between images

THe images compared, must be the same dimensions, lest they throw Uncaught exception 'ImagickException' with message 'Compare images failed'.

Example of usage:

<?php

$image1 = new imagick("image1.png");
$image2 = new imagick("image2.png");

$result = $image1->compareImages($image2, Imagick::METRIC_MEANSQUAREERROR);
$result[0]->setImageFormat("png");

header("Content-Type: image/png");
echo $result[0];

?>

If we wish, we can also use the Absolute Error Metric, which can lead to us comparing desired fuzz factors:

<?php
//init the image objects
$image1 = new imagick();
$image2 = new imagick();

//Set the fuzz factor (must be done before reading in the images)
$image1->SetOption('fuzz', '2%');

//Read in the images
$image1->readImage("php_step29_actual.png");
$image2->readImage("php_step29_correct.png");

//Compare the images using METRIC=1 (Absolute error)
$result = $image1->compareImages($image2, 1);

//Print out the result
echo "The image comparison 2% Fuzz factor is: " . $result[1];
?>

compositeImage:

Composite one image onto another

bool compositeImage ( Imagick $composite_object , int $composite , int $x, int $y [, int $channel = Imagick::CHANNEL_ALL ] )

Composite one image onto another at the specific offset. Any extra arguments needed for the compose algorithm should
passed to setImageArtifact with 'compose:args' as the first parameter and the data as the second parameter.

Example of usage, where we composite two images with the mathematics compose method:

<?php

//equivilant of running the command
// convert src1.png src2.png -compose mathematics -define compose:args="1.0, -0.5,0.5" -composite output.png

$src1 = new \Imagick("./src1.png");
$src2 = new \Imagick("./src2.png");

$src1->setImageVirtualPixelMethod(Imagick::VIRTUALPIXELMETHOD_TRANSPARENT);
$src1->setImageArtifact('compose:args', "1,0,-0.5,0.5");
$src1->compositeImage($src2, Imagick::COMPOSITE_MATHEMATICS, 0, 0);
$src1->writeImage("./output.png");

?>

Another example of composing two images into a single one:

<?php
try
{
	//Let's check whether we can perform the magick
	if (TRUE !== extension_loaded('imagick'))
	{
		throw new Exception('Imagick class does not exist.');
	}

	//Let's find out where we are
	$dir = dirname(__FILE__);

	//Let's read the images
	$glasses = new Imagick();
	if (FALSE === $glasses->readImage($dir . '/glasses.png'))
	{
		throw new Exception();
	}

	$face = new Imagick();
	if (FALSE === $face->readImage($dir . '/face.jpg'));
	{
		throw new Exception();
	}

	//Let's put the glasses on (10 pixels from left, 20 pixels from top of face)
	$face->compositeImage($glasses, Imagick::COMPOSITE_DEFAULT, 10, 20);

	//Let's merge all layers (not mandatory)
	$face->flattenImages();

	//We do not want to overwrite face.jpg
	$face->setImageFileName($dir . '/face_and_glasses.jpg');

	//Let's write hte img
	if (FALSE == $face->writeImage())
	{
		throw new Exception();
	}
}

catch (Exception $e)
{
	echo 'Caught exception: ' . $e->getMessage() . "\n";
}

exit(0);
?>

We might also need to apply colorspacing when composing, or copy the alpha channel from one img to another:

<?php
//Creating two Imagick object
$first = new Imagick('first.jpg');
$second = new Imagick('second.jpg');

//Set the colorspace to the same value
$first->setImageColorspace($second->getImageColorspace());

//Second image is put on top of the first
$first->compositeImage($second, $second->getImageCompose(), 5, 5);

//new img is saved as final.jpg
$first->writeImage('final.jpg');
?>

To copy the alpha channel from one img to another, you can do the following:

<?php

$img1 = new Imagick("image1.png");
$img2 = new Imagick("image2.png");

$img1->compositeImage( $img2, imagick::COMPOSITE_COPYOPACITY, 0, 0);

header('Content-type: image/png');
echo $img1;

?>

__construct:

The Imagick constructor

__construct ( mixed $files )

Creates an Imagick instance for a specified  image or set of images

the files param: Can be path to a image or an array of paths. Paths can include wildcard for files names or can be URLs.

If we are using imagemagick, on windows, we can be forced to do full path of file:

<?php
	$incoming_file = '/Users/John/Desktop/file_loco.jpg';
	$img = new Imagick(realpath($incoming_file));
	//realpath will convert /Users/John/Desktop/file_loco.jpg to C:\Users\John\Desktop\file_loco.jpg
?>

If we wish to use PDFs as images, we can install ghostscript libs, and use them as follows:

<?php
$myurl = '/pdf/mypdf.pdf';
$image = new Imagick(realpath($myurl).'[0]'); //[0] indicates the number of the wanted page
$image->setResolution( 300, 300 );
$image->setImageFormat( "png" );
$image->writeImage(realpath('./mypdf.png'));
?>

If we try to load a icon that is not suffixed with .ico, we can fix that as follows, with the cmdline friendly integration:

<?php
$tmp = tempnam('cache/images', 'ico_');

if (copy('http://remote.url/favicon.ico', $tmp)) {
	$ico = new Imagick("ico:$tmp"); //Works great
}
?>

contrastImage:

Changes the contrast of the image

bool contrastImage ( bool $sharpen )

Enhances the intensity differences between the lighter and darker elements of the image. Set sharpen to a value
other than 0 to increase the image contrast otherwise the contrast is reduced.

Example of usage:

<?php
function contrastImage($imagePath, $contrastType) {
	$imagick = new \Imagick(realpath($imagePath));
	if ($contrastType != 2) {
		$imagick->contrastImage($contrastType);
	}

	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

Where as of, a function to sharpen or decrease contrast, would be as follows:

<?php
class Images {
public function contrastImage($contrast, $imagePath){
	
	$this->image = new Imagick();
	$this->image->readImage($imagePath);

	if($contrast > 0){
		for($i = 1; $i < $contrast; $i++){
			$this->image->contrastImage(1);
		}
	} else if ($contrast <= 0) {
		for ($i = 0; $i > $contrast; $i--) {
			$this->image->contrastImage(0);
			}
		}
	}
}
?>

contrastStretchImage:

Enhances the contrast of a color image

bool contrastStretchImage ( float $black_point , float $white_point [, int $channel = Imagick::CHANNEL_ALL ] )

Enhances the contrast of a color image by adjusting the pixels color to span the entire range of colors available.
This method is available if Imagick has been compiled against ImageMagick >= 6.2.9

An example of desaturating a picture (make it grey), darkest 90% of pixels are turned black, brightest 5% are turned
white, thoose between are made greyscale.

<?php
$im = new Imagick ("some_image.jpg");
list ($width, $height) = array_values ($im->getImageGeometry ());
$im->modulateImage (100, 0, 100);
$im->contrastStretchImage ($width * $height * 0.90, $width * $height * 0.95);
$im->writeImage("temp.jpg");
echo "<img src=\"temp.jpg\">";
?>

convolveImage:

Applies a custom convolution kernel to the image

bool convolveImage ( array $kernel [, int $channel = Imagick::CHANNEL_ALL ] )

Example of usage:

<?php
function convolveImage($imagePath, $bias, $kernelMatrix) {
	$imagick = new \Imagick(realpath($imagePath));
	//$edgeFindingKernel = [-1, -1, -1, -1, 8, -1, -1, -1, -1,];
	$imagick->setImageBias($bias * \Imagick::getQuantum());
	$imagick->convolveImage($kernelMatrix);
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

And an example of convolveimage:

<?php
//Run an edge detection filter on an image
$image = new imagick( "diana.png" );
$edgeArray = array(-1,-1,-1,-1,8,-1,-1,-1,-1);
$image->convolveImage ($edgeArray);
$image->thresholdImage(1);
header('Content-type: image/png');
echo $image;
?>

count:

Returns the number of images

void count ([ string $mode ] )

mode is an unsued arg just to provide coherence to the PHP language standard.
This method is unused.

cropImage:

Extracts a region of the image

bool cropImage ( int $width , int $height , int $x, int $y )

Example:

<?php
function cropImage($imagePath, $startX, $startY, $width, $height) {
	$imagick = new \Imagick(realpath($imagePath));
	$imagick->cropImage($width, $height, $startX, $startY);
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

If we intend to do more changes to a cropped image or gif, we can use the to remove the blank space:

$im->setImagePage(0, 0, 0, 0);

Also, an example of creating a simple thumbnail with an additional param to set the focus point:

<?php
function thumbnail($image, $new_w, $new_h, $focus = 'center')
{
	$w = $image->getImageWidth();
	$h = $image->getImageHeight();

	if ($w > $h) {
		$resize_w = $w * $new_h / $h;
		$resize_h = $new_h;
	}
	else {
		$resize_w = $new_w;
		$resize_h = $h * $new_w / $w;
	}

	$image->resizeImage($resize_w, $resize_h, Imagick::FILTER_LANCZOS, 0.9);

	switch ($focus) {
		case 'northwest':
			$image->cropImage($new_w, $new_h, 0, 0);
			break;

		case 'center':
			$image->cropImage($new_w, $new_h, ($resize_w - $new_w) /2, ($resize_h - $new_h) / 2);
			break;

		case 'northeast':
			$image->cropImage($new_w, $new_h, $resize_w - $new_w, 0);
			break;

		case 'southwest':
			$image->cropImage($new_w, $new_h, 0, $resize_h - $new_h);
			break;

		case 'southeast':
			$image->cropImage($new_w, $new_h, $resize_w - $new_w, $resize_h - $new_h);
			break;
	}
}
?>

cropThumbnailImage:

Creates a crop thumbnail

bool cropThumbnailImage ( int $width , int $height )

Creates a fixed size thumbnail by first scaling the image up or down and cropping a specified area from the center.

An example of a variation of cropping a thumbnail that returns a variation that does not vary the dimensions:

<?php
//Define widescreen dimensions
$width = 160;
$height = 90;

//Load an img
$i = new Imagick("your image file");
//Get the current img dimens
$geo = $i->getImageGeometry();

//crop the img
if(($geo['width']/$width) < ($geo['height']/$height))
{
	$i->cropImage($geo['width'], floor($height*$geo['width']/$width), 0, (($geo['height']-($height*$geo['width']/$width))/2));
}
else
{
	$i->cropImage(ceil($width*$geo['height']/$height), $geo['height'], (($geo['width']-($width*$geo['height']/$height))/2), 0);
}

//Thumbnail the img
$i->ThumbnailImage($width, $height, true);

//save or show or whatever the img
$i->setImageFormat("png");
header("Content-Type: image/png");
exit($i);
?>

Or another sample, actually using cropThumbnailImage:

<?php
//read the img
$im = new imagick( "test.png" );
//Create the thumbnail
$im->cropThumbnailImage( 80, 80 );
//write to a file
$im->writeImage( "th_80x80_test.png" );
?>

current:

Returns a reference to the current imagick object with img pointer at the correct sequence.

cycleColormapImage:

Displaces an image's colormap by a given number of positions. If you cycle the colormap a number of times,
you can produce a psychedelic effect

bool cycleColormapImage ( int $displace )

decipherImage:

Deciphers an image

bool decipherImage ( string $passphrase )

Deciphers image that has been enciphered before. The image encyphering must be used via encipherImage().

The arg is the passphrase.

deconstructImages:

Returns certain pixel differences between images

Imagick deconstructImages ( void )

compares each image with the next in a sequence and returns the maximum bounding region of any pixel
differences it discovers.

Returns a new Imagick object on success

deleteImageArtifact:

Delete image artifact

bool deleteImageArtifact ( string $artifact )

Deletes an artifact associated with the image. The difference between image props and image artifacts
is that props are public and artifacts are private.

deleteImageProperty:

void deleteImageProperty ( string $name )

Deletes an img property

deskewImage:

Removes skew from the image

bool deskewImage ( float $threshold )

This method can be used to remove skew from for example scanned images where the paper
was not properly placed on the scanning surface. 

Example of usage:

<?php
function deskewImage($threshold) {
	$imagick = new \Imagick(realpath("images/NYTimes-Page1-11-11-1918.jpg"));
	$deskewImagick = clone $imagick;

	//This is the only thing required for deskewing
	$deskewImagick->deskewImage($threshold);

	//The resto f this example is to make the result obvious
	$trim = 9;

	$deskewImagick->cropImage($deskewImagick->getImageWidth() - $trim, $deskewImagick->getImageHeight(), $trim, 0);

	$imagick->cropImage($imagick->getImageWidth() - $trim, $imagick->getImageHeight(), $trim, 0);

	$deskewImagick->resizeimage($deskewImagick->getImageWidth() / 2, $deskewImagick->getImageHeight() / 2, \Imagick::FILTER_LANCZOS, 1);

	$imagick->resizeimage($imagick->getImageWidth() /2, $imagick->getImageHeight() / 2, \Imagick::FILTER_LANCZOS, 1);

	$newCanvas = new \Imagick();
	$newCanvas->newimage($imagick->getImageWidth() + $deskewImagick->getImageWidth() + 20, $imagick->getImageHeight(), 'red', 'jpg');

	$newCanvas->compositeimage($imagick, \Imagick::COMPOSITE_COPY, 5, 0);
	$newCanvas->compositeimage($deskewImagick, \Imagick::COMPOSITE_COPY, $imagick->getImageWidth() + 10, 0);

	header("Content-Type: image/jpg");
	echo $newCanvas->getImageBlob();
}
?>

despeckleImage:

Reduces the speckle noise in an image

bool despeckleImage ( void )

Reduces the speckle noise in an image while preserving the edges of the original image

Example of usage:

<?php
function despeckleImage($imagePath) {
	$imagick = new \Imagick(realpath($imagePath));
	$imagick->despeckleImage();
	header("Content-type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

destroy:

Deprecated in favor of clear().

displayImage:

Displays an image on a X server.

bool displayImage ( string $servername )

displayImages:

Displays an image or image sequence on a X server

bool displayImages ( string $servername )


distortImage:

Distorts an image using various distortion methods

bool distortImage ( int $method , array $arguments , bool $bestfit )

Distorts an image using various distortion methods, by mapping color lookups of the source image to a new
destination image usually of the same size as the source image, unless 'bestfit' is set to TRUE.

If 'bestfit' is enabled, and disortion allows it, the destination image is adjusted to ensure the whole source
'image' will just fit within the final destionation image, which will be sized and offset accordingly.

Also in many cases the virtual offset of the source image will be taken into account in the mapping.

Example of usage:

<?php
//Create new object
$im = new Imagick();

//Create new checkboard pattern
$im->newPseudoImage(100, 100, "pattern:checkerboard");

//Set the image format to png
$im->setImageFormat('png');

//Fill new visible areas with transparent
$im->setImageVirtualPixelMethod(Imagick::VIRTUALPIXELMETHOD_TRANSPARENT);

//Activate matte
$im->setImageMatte(true);

//Control points for the distortion
$controlPoints = array( 10, 10,
						10, 5,
						10, $im->getImageHeight() - 20,
						10, $im->getImageHeight() - 5,
						$im->getImageWidth() - 10, 10,
						$im->getImageWidth() - 10, 20,

						$im->getImageWidth() - 10, $im->getImageHeight() - 10,
						$im->getImageWidth() - 10, $im->getImageHeight() - 30);

//Perform the distortion
$im->distortImage(Imagick::DISTORTION_PERSPECTIVE, $controlPoints, true);

//output the img
header("Content-Type: image/png");
echo $im;
?>

There are a number of distortion types taht we can do, as follows:

Affine:

<?php
$image = new imagick( "opossum.jpg" );
$points = array(
				0,0, 25, 25,
				100,0,100,50
				);
$image->setimagebackgroundcolor("#fad888");
$image->setImageVirtualPixelMethod( imagick::VIRTUALPIXELMETHOD_BACKGROUND );
$image->distortImage( Imagick::DISTORTION_AFFINE, $points, TRUE );
header( "Content-Type: image/jpeg" );
echo $image;
?>

Affine Projection:

<?php
$image = new imagick( "opossum.jpg" );
$points = array( 0.9,0.3,
				-0.2, 0.7,
				20,15);
$image->setimagebackgroundcolor("#fad888");
$image->setImageVirtualPixelMethod( imagick::VIRTUALPIXELMETHOD_BACKGROUND );
$image->distortImage( Imagick::DISTORTION_AFFINEPROJECTION, $points, TRUE );
header( "Content-Type: image/jpeg" );
echo $image;
?>

Arc:

<?php
$image = new imagick( "opossum.jpg" );
$draw = new imagickdraw();
$degrees = array( 180 );
$image->setimagebackgroundcolor("#fad888");
$image->setImageVirtualPixelMethod( imagick::VIRTUALPIXELMETHOD_BACKGROUND );
$image->distortImage( Imagick::DISTORTION_ARC, $degrees, TRUE );
header( "Content-Type: image/jpeg ");
echo $image;
?>

Rotated Arc:

<?php
$image = new imagick( "opossum.jpg" );
$draw = new imagickdraw();
$degrees = array( 180, 45, 100, 20 );
$image->setimagebackgroundcolor("#fad888");
$image->setImageVirtualPixelMethod( imagick::VIRTUALPIXELMETHOD_BACKGROUND );
$image->distortImage( Imagick::DISTORTION_ARC, $degrees, TRUE );
header( "Content-Type: image/jpeg" );
echo $image;
?>

Bilinear:

<?php
$image = new imagick( "opossum.jpg" );
$points = array(
				0,0,25,25, #top left
				176, 0, 126, 0, #top right
				0, 135, 0, 105, #bottom right
				176, 135, 176, 135 #bottom left
				);
$image->setimagebackgroundcolor("#fad888");
$image->setImageVirtualPixelMethod( imagick::VIRTUALPIXELMETHOD_BACKGROUND );
$image->distortImage( Imagick::DISTORTION_BILINEAR, $points, TRUE );
header( "Content-Type: image/jpeg" );
echo $image;
?>

Perspective:

<?php
$image = new imagick( "opossum.jpg" );
$points = array(
				0,0,25,25, #top left
				176, 0, 126, 0, #top right
				0, 135, 0, 105, # bottom right
				176, 135, 176, 135 #bottom left
				);
$image->setimagebackgroundcolor("#fad888");
image->setImageVirtualPixelMethod( imagick::VIRTUALPIXELMETHOD_BACKGROUND );
$image->distortImage( Imagick::DISTORTION_PERSPECTIVE, $points, TRUE );
header( "Content-Type: image/jpeg" );
echo $image;
?>

Scale Rotate Translate:

<?php
$image = new imagick( "opossum.jpg" );
$points = array(
				1.5, #scale 150%
				150 #rotate
			);
$image->setimagebackgroundcolor("#fad888");
$image->setImageVirtualPixelMethod( imagick::VIRTUALPIXELMETHOD_BACKGROUND );
$image->distortImage( imagick::DISTORTION_SCALEROTATETRANSLATE, $points, TRUE );
header( "Content-Type: iamge/jpeg" );
echo $image;
?>

There is more info on distortions and effects at imagemagick.org/Usage/distorts/

drawImage:

Renders the ImagickDraw object on the current img

bool drawImage ( ImagickDraw $draw )

edgeImage:

Enhances edges within an image

bool edgeImage ( float $radius )

Enhances edges within the img with a convolution filter of the given radius. use radius 0 and it iwll be
auto-selected.

Example of usage:

<?php
function edgeImage($imagePath, $radius) {
	$imagick = new \Imagick(realpath($imagePath));
	$imagick->edgeImage($radius);
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

embossImage:

Returns a grayscale image with a 3d effect

bool embossImage ( float $radius, float $sigma )

Returns a grayscale image with 3d effect. We convolve the img with a Gaussian operator of the given
radius and standard deviation (Sigma). For reasonable results, radius should be larger than sigma.
use a radius of 0 and it will choose a suitable radius for you.

Example of usage:

<?php
function embossImage($imagePath, $radius, $sigma) {
	$imagick = new \Imagick(realpath($imagePath));
	$imagick->embossImage($radius, $sigma);
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

encipherImage:

Enciphers an image

bool encipherImage ( string $passphrase )

Converts plain pixels to encipher pixels. The image is not readable until it has been deciphered using decipheredImage()

enhanceImage:

Improves the quality of a noisy image

bool enhanceImage ( void )

Applies a digital filter that improves the quality of a noisy image.

Example of usage:

<?php
function enhanceImage($imagePath) {
	$imagick = new \Imagick(realpath($imagePath));
	$imagick->enhanceImage();
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

equalizeImage:

Equalizes the image histogram

bool equalizeImage ( void )

Example of usage:

<?php
function equalizeImage($imagePath) {
	$imagick = new \Imagick(realpath($imagePath));
	$imagick->equalizeImage();
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

evaluateImage:

Applies an expression to an image

bool evaluateImage ( int $op , float $constant [, int $channel = CHANNEL_ALL ] )

Applys an arithmetic, relation or logical expression to an image. use these operators to ligthen or darken an image,
to increase or decrease contrast in an image, or to produce the "negative" of an image.

An example of how to use this to reduce opacity in an image:

<?php
//Create new object with the image
$im = new Imagick('example-alpha.png');

//Reduce the alpha by 50%
$im->evaluateImage(Imagick::EVALUATE_DIVIDE, 2, Imagick::CHANNEL_ALPHA);

//output the img
header("Content-Type: image/png");
echo $im;
?>

exportImagePixels:

Exports raw image pixels

array exportImagePixels ( int $x, int $y, int $width, int $height, string $map, int $STORAGE )

Export image pixels into an array. The map defines the ordering of the exported pixels. The size of the
returned array is width * height * strlen(map).

Noticeworthy params: 

map: Ordering of the exported pixels. For example "RGB". Valid chars for the map are R, G, B, A, O, C, Y, M, K, I and P.

Example of exporting image pixels into an array:

<?php

//Create new object
$im = new Imagick();

//Create new img
$im->newPseudoImage(0, 0, "magick:rose");

//Export the image pixels
$pixels = $im->exportImagePixels(10, 10, 2, 2, "RGB", Imagick::PIXEL_CHAR);

//OUtput
var_dump($pixels);
?>

Retrusn an array containing the pixel values

extentImage:

Set image size

bool extentImage ( int $width, int $height, int $x, int $y )

filter:

applies a custom convolution kernel to the image

void filter ( ImagicKernel $ImagicKernel [, int $CHANNEL = Imagick::CHANNEL_DEFAULT ] )

Example of usage:

<?php
function filter($imagePath) {
	$imagick = new \Imagick(realpath($imagePath));
	$matrix = [
		[-1, 0, -1],
		[0, 5, 0],
		[-1, 0, -1],
	];

	$kernel = \ImagicKernel::fromMatrix($matrix);
	$strength = 0.5;
	$kernel->scale($strength, \Imagick::NORMALIZE_KERNEL_VALUE);
	$kernel->addUnityKernel(1 - $strength);

	$imagick->filter($kernel);
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

flattenImages:

DEPRECATED, use mergeImageLayers() instead:

<?php
$im = $im->mergeImageLayers(Imagick::LAYERMETHOD_FLATTEN);
?>

flipImage:

Creates a vertical mirror image

bool flipImage ( void )

Example of usage:

<?php
function flipImage($imagePath) {
	$imagick = new \Imagick(realpath($imagePath));
	$imagick->flipImage();
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

Emulates a mirror image at the top or bottom of the picture

floodFillPaintImage:

Changes the color value of any pixel that matches target

bool floodFillPaintImage ( mixed $fill , float $fuzz , mixed $target , int $x , int $y , bool $invert [, int $channel = Imagick::CHANNEL_DEFAULT ] )

Example of usage:

<?php

//Create new imagick object
$im = new Imagick();

//Create red,green and blue images
$im->newImage(100, 50, "red");
$im->newImage(100, 50, "green");
$im->newImage(100, 50, "blue");

//Append the images into one
$im->resetIterator();
$combined = $im->appendImages(true);

//Save the intermediate image for comparison
$combined->writeImage("floodfillpaint_intermediate.png");

//The target pixel to paint
$x = 1;
$y = 1;

//Get the color we are painting
$target = $combined->getImagePixelColor($x, $y);

//paints pixel in position 1,1 black and all neighboring pixels
// that match the target color
$combined->floodfillPaintImage("black", 1, $target, $x, $y, false);

//Save the result
$combined->writeImage("floodfillpaint_result.png");
?>

flopImage:

Creates a horizontal mirror image

bool flopImage()

Creates a horizontal mirror image by reflecting the pixels around the central y-axis

Example of usage:

<?php
function flopImage($imagePath) {
	$imagick = new \Imagick(realpath($imagePath));
	$imagick->flopImage();
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

forwardFourierTransformImage:

void forwardFourierTransformimage ( bool $magnitude )

Implements the discrete Fourier transform (DFT) of the image either as a magnitude / phase
or real / imaginary image pair.

magnitude: If true, return as magnitude / phase pair otherwise a real / imaginary image pair.

Example of usage:

<?php
//utility function for forwardTransformImage
function createMask() {
	$draw = new \ImagickDraw();

	$draw->setStrokeOpacity(0);
	$draw->setStrokeColor('rgb(255, 255, 255)');
	$draw->setFillColor('rgb(255, 255, 255)');

	//Draw a circle on the y-axis, with its centre
	//at x, y that touches the origin
	$draw->circle(250, 250, 220, 250);

	$imagick = new \Imagick();
	$imagick->newImage(512, 512, "black");
	$imagick->drawImage($draw);
	$imagick->gaussianBlurImage(20, 20);
	$imagick->autoLevelImage();

	return $imagick;
}

function forwardFourierTransformImage($imagePath) {
	$imagick = new \Imagick(realpath($imagePath));
	$imagick->resizeimage(512, 512, \Imagick::FILTER_LANCZOS, 1);

	$mask = createMask();
	$imagick->forwardFourierTransformImage(true);

	@$imagick->setimageindex(0);
	$magnitude = $imagick->getimage();

	@$imagick->setimageindex(1);
	$imagickPhase = $imagick->getimage();

	if (true) {
		$imagickPhase->compositeImage($mask, \Imagick::COMPOSITE_MULTIPLY, 0, 0);
	}

	if (false) {
		$output = clone $imagickPhase;
		$output->setimageformat('png');
		header("Content-Type: image/png");
		echo $output->getImageBlob();
	}

	$magnitude->inverseFourierTransformImage($imagickPhase, true);

	$magntiude->setimageformat('png');
	header("Content-Type: image/png");
	echo $magnitude->getImageBlob();
}

?>

frameImage:

bool frameImage ( mixed $matte_color , int $width , int $height , int $inner_bevel , int $outer_bevel )

Adds a simulated 3d border around this image. The width and height specify the border width of the
vertical and horizontal side of the frame. The inner and outer bevels indicate the width of the inner
and outer shadows of the frame.

Example of usage:

<?php
function frameImage($imagePath, $color, $width, $height, $innerBevel, $outerBevel) {
	$imagick = new \Imagick(realpath($imagePath));

	$width = $width + $innerBevel + $outerBevel;
	$height = $height + $innerBevel + $outerBevel;

	$imagick->frameimage(
		$color,
		$width,
		$height,
		$innerBevel,
		$outerBevel
	);

	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

functionImage:

Apples a function on the image

bool functionImage ( int $function , array $arguments [, int $channel = Imagick::CHANNEL_DEFAULT ] )

Applies an arihmetic, relation or logical expression to a pseudo image

Some examples of usage:

Sinus gradient: 


<?php
$imagick = new Imagick();
$imagick->newPseudoImage(200, 200, 'gradient::black-white');
$arguments = array(3, -90);
$imagick->functionImage(Imagick::FUNCTION_SINUSOID, $arguments);

header("Content-Type: image/png");
$imagick->setImageFormat("png");
echo $imagick->getImagesBlob();
?>


Gradient from a polynomial:

<?php
$imagick = new Imagick();
$imagick->newPseudoImage(200, 200, 'gradient:black-white');
$arguments = array(4, -4, 1);
$imagick->functionImage(Imagick::FUNCTION_POLYNOMIAL, $arguments);

header("Content-Type: image/png");
$imagick->setimageformat("png");
echo $imagick->getImageBlob();
?>

Create a complex gradient from the polynomial (4x^2-4x^2+1) modulated by a sinusoidal gradient:

<?php
$imagick1 = new Imagick();
$imagick1->newPseudoImage(200, 200, 'gradient:black-white');
$arguments = array(9, -90);
$imagick1->functionImage(Imagick::FUNCTION_SINUSOID, $arguments);

$imagick2 = new Imagick();
$imagick2->newPseudoImage(200, 200, 'gradient:black-white');
$arguments = array(0.5, 0);
$imagick2->functionImage(Imagick::FUNCTION_SINUSOID, $arguments);
$imagick1->compositeimage($imagick2, Imagick::COMPOSITE_MULTIPLY, 0, 0);

header("Content-Type: image/png");
$imagick1->setImageFormat("png");
echo $imagick1->getImageBlob();
?>

fxImage:

Evaluate expression for each pixel in the image

Returns a new Imagick modified object

fxImage ( string $expression [, int $channel = Imagick::CHANNEL_ALL ] )

Example of usage:

<?php
function fxImage() {
	$imagick = new \Imagick();
	$imagick->newPseudoImage(200, 200, "xc:white");

	$fx = 'xx=i-w/2; yy=j-h/2; rr=hypot(xx,yy); (.5-rr/140)*1.2+.5';
	$fxImage = $imagick->fxImage($fx);

	header("Content-Type: image/png");
	$fxImage->setimageformat('png');
	echo $fxImage->getImageBlob();
}

?>

Another example of usage:

<?php
	$canvas = new Imagick();
	$canvas->newImage(256, 256, "white", "jpg");

	$gradient = new Imagick();
	$gradient->newPseudoImage(256, 256, "gradient:white-black");
	$canvas->compositeImage( $gradient, imagick::COMPOSITE_OVER, 0, 0);
	$canvas->rotateImage(new ImagickPixel(), 90);
	//instead of just $canvas->fxImage("floor(s*10+0.5)/10"); we must store the fxImage() result
	$canvas = $canvas->fxImage("floor(s*10+0.5)/10");

	header( "Content-Type: image/jpg" );
	echo $canvas;
?>

gammaImage:

Gamma-corrects an image

bool gammaImage ( float $gamma [, int $channel = Imagick::CHANNEL_ALL ] )

Gamma-corrects an image. The same image viewed on different devices will have perceptual
differences in the way the image's intensities are represented on the screen. Specify individual
gamma levels for red, green, and blue channels, or adjust all with the gamma param.

Values typically range from 0.8 to 2.3

Example of usage:

<?php
function gammaImage($imagePath, $gamma, $channel) {
	$imagick = new \Imagick(realpath($imagePath));
	$imagick->gammaImage($gamma, $channel);
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

gaussianBlurImage:

Blurs an image

bool gaussianBlurImage ( float $radius , float $sigma [, int $channel = Imagick::CHANNEL_ALL ] )

Blurs an image. We convolve the image with a Gaussian operator of the given radius and standard deviation
(sigma). For reasonable results, teh radius should be larger than sigma. Use a radius of 0 and it selects
a suitable radius for you.

Example of usage:

<?php
function gaussianBlurImage($imagePath, $radius, $sigma, $channel) {
	$imagick = new \Imagick(realpath($imagePath));
	$imagick->gaussianBlurImage($radius, $sigma, $channel);
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

getColorspace:

int getColorSpace()

´Gets the global colorscape value.

Returns an int which we can compare against COLORSPACE constants.

getCompression:

Gets the object compression type

int getCompression()

Retursn the compression constant

Returns a constant that is tied to a value, as follows:

imagick::COMPRESSION_UNDEFINED 0
imagick::COMPRESSION_NO 	1
imagick::COMPRESSION_BZIP   2
imagick::COMPRESSION_DXT1 	3
imagick::COMPRESSION_DXT3 	4
imagick::COMPRESSION_DXT5 	5
imagick::COMPRESSION_FAX 	6
imagick::COMPRESSION_GROUP4 7
imagick::COMPRESSION_JPEG 	8
imagick::COMPRESSION_JPEG2000 9
imagick::COMPRESSION_LOSSLESSJPEG 10
imagick::COMPRESSION_LZW 	11
imagick::COMPRESSION_RLE 	12
imagick::COMPRESSION_ZIP 	13

Example of usage:

<?php
	
	$imagick_type = new Imagick();

	//Open file
	$file_to_grab = "image_workshop_directory/test.bmp";

	$file_handle_for_viewing_image_file = fopen($file_to_grab, 'a+');

	//Grab file
	$imagick_type->readImageFile($file_handle_for_viewing_image_file);

	//Get quantum range
	$imagick_type_compression = $imagick_type->getCompression();

	//Print results
	print("<pre>");
	print($imagick_type_compression);
	print("</pre>");
?>

getCompressionQuality:

Gets the object compression quality

int getCompressionQuality()

Returns an int describing the compr. quality

getCopyright:

Returns the ImageMagick API copyright as a string

string getCopyright()

Returns the string containing copyright notice of ImageMagick and Magickwand C API

getFileName:

Deprecated, use getImageFilename() instead

getFont:

Gets font

string getFont()

Returns the objects font property. 

Returns font name in string if true, False if not set

getFormat:

Returns the format of the Imagick Object

string getFormat()

Returns the format of the image.

The getFormat merely returns the value of the image format, which is not automatically loaded when you read an
image. To see what formats it accepts, use the queryFormats method.

To get actual format of image, use getImageFormat()

Example of usage:

<?php

	$imagick_type = new Imagick();

	$file_to_grab = "image_workshop_directory/test.bmp";

	$file_handle_for_viewing_image_file = fopen($file_to_grab, 'a+');

	$imagick_type->readImageFile($file_handle_for_viewing_image_file);

	$imagick_type->setFormat("bmp");
	$imagick_type_format = $imagick_type->getFormat();

	print("<pre>");
	print($imagick_type_format);
	print("</pre>");
?>

getGravity:

Gets the global gravity property for the Imagick object

int getGravity()

getHomeURL:

Returns the ImageMagick home URL

string getHomeURL()

Returns a link to the imagemagick homepage

getImage:

Returns a new imagick object

Returns a new imagick object with the current image sequence.

getImageAlphaChannel:

Gets the image alpha channel

int getImageAlphaChannel()

Gets the image alpha channel value. The returned value is one of the alpha channel constants.

Returns a constant defining the current alpha channel value.

getImageArtifact:

Get image artifact

string getImageArtifact ( string $artifact )

Gets an artifact associated with the image. The difference between image props and artifacts is that props are public,
artis are private.

getImageAttribute():

string getImageAttribute( string $key )

Returns a named attribute

getImageBackgroundColor:

Returns the image background color

ImagickPixel getImageBackgroundColor()

Returns an ImagickPixel set to the BG color of the image.

getImageBlob():

Returns the image sequence as a blob

string getImageBlob()

Implements directs to memory image formats. Returns image sequence as string. Format of image determines
the format of the returned blob (GIF, JPEG, PNG, etc). To return a different format, use setImageFormat()

This method can return 0 length string if the data is too big (i.e, it does the work but its slow to do so).

Example of handling:

<?php
	$image = new Imagick();
	if (!$image->newImage(1000,1,'white')) throw new Exception();
	if (!$image->scaleImage(0,200)) throw new Exception();
	print "Image size: {$image->getImageWidth()},{$image->getImageHeight()}\n";
	if (!$image->setImageFormat("jpeg")) throw new Exception();
	$a = $image->getImageBlob();
	print "Rendered to ".strlen($a)." bytes\n";
?>

getImageBluePrimary:

Returns the chromatic blue primary point

array getImageBluePimary()

The array consists of x and y points.

getImageBorderColor:

Returns the image border color

ImagickPixel getImageBorderColor()

getImageChannelDepth:

Gets the depth for a particular image channel

int getImageChannelDepth ( int $channel )

The value returned is the number of bits used for the particular color channel within an image.

getImageChannelDistortion:

Compares image channels of an image to a reconstructed image

float getImageChannelDistortion ( Imagick $reference, int $channel, int $metric )

Compares one or more image channels of an image to a reconstructed image and returns the specified
distortion metric.

getImageChannelDistortions:

Gets channel distortions

float getImageChannelDistortions ( Imagick $reference , int $metric [, int $channel = Imagick::CHANNEL_DEFAULT ] )

Compares one or more image channels of an image to a reconstructed image and returns the specified distortion
metrics.

getImageChannelExtrema:

Gets the extrema for one or more image channels.

array getImageChannelExtrema ( int $channel )

returns array with associative values with keys of minima and maxima.

getImageChannelKurtosis:

The getImageChannelKurtosis purpose

array getImageChannelKurtosis ([ int $channel = Imagick::CHANNEL_DEFAULT ] )

Get the kurtosis and skewness of a specific channel. 

Returns an array with kurtosis and skewness members.

getImageChannelMean:

Gets the mean and standard deviation

array getImageChannelMean ( int $channel )

Gets the mean and standard deviation to one or more image channels. Return value is an associative
array with the keys "mean" and "standardDeviation"

getImageChannelRange:

Gets channel range

array getImageChannelRange ( int $channel )

Gets the range for one or more image channels. 

getImageChannelStatistics:

Returns statistics for each channel in the image

array getImageChannelStatistics ( void )

Returns statistics for each channel in the image. The statistics include the channel depth,
its minima, maxima, the mean and the standard deviation.

getImageClipMask:

Gets image clip mask

Imagick getImageClipMask ( void )

Returns the image clip mask. The clip is an Imagick object containing the clip mask.

getImageColormapColor:

Returns the color of the specified colormap index

ImagickPixel getImageColormapColor ( int $index )

getImageColors:

Gets the number of unique colors in teh image

int getImageColors ( void )

A improvised version of this method, that allocates amount of times a pixel occurs in a picture:

<?php

	$file_to_grab_with_location = "test.bmp";

	$imagick_type = new Imagick();

	$file_handle_for_viewing_image_file = fopen($file_to_grab_with_location, 'a+');
	$imagick_type->readImageFile($file_handle_for_viewing_image_file);

	$frequency_list_of_values = array();

	$image_resolution_width = $imagick_type->getImageWidth();
	$image_resolution_height = $imagick_type->getImageHeight();

	print("Image resolution: width - $image_resolution_width / Height - $image_resolution_height<br><br>");

	//Prase img otp to bottom
	for($y = 0; $y < $image_resolution_height; $y++)
	{

		//parse img left to right
		for($x = 0; $x < $image_resolution_width; $x++)
		{
			//Image pixel color
			$pixel_to_examine = $imagick_type->getImagePixelColor($x, $y);

			$pixel_to_examine_color_value_red = $pixel_to_examine->getColorValue(imagick::COLOR_RED);
			$pixel_to_examine_color_value_green = $pixel_to_examine->getColorValue(imagick::COLOR_GREEN);
			$pixel_to_examine_color_value_blue = $pixel_to_examine->getColorValue(imagick::COLOR_BLUE);

			//Set key value
			$key_value = $pixel_to_examine_color_value_red 		. 	" / " 	.
					$pixel_to_examine_color_value_green 		. 	" / " 	.
					$pixel_to_examine_color_value_blue 			      ;

			//Increment array entry for color

			if(isset($frequency_list_of_values[$key_value]) == TRUE)
			{
				$temp = $frequency_list_of_values[$key_value];
				$temp++;
				$frequency_list_of_values[$key_value] = $temp;

			}
			else
			{
				$frequency_list_of_values[$key_value] = 1;
			}
		}
	}

	//Print out array of values
	print("<pre>");
	print_r($frequency_list_of_values);
	print("</pre>");


?>

getImageColorspace:

Gets teh iamge colorspace

int getImageColorspace ( void )

Returns an int which can be compared aginst COLORSPACE Constants

getImageCompose:

Returns the composite oeprator associated with the image

int getImageCompose ( void )

getImageCompression:

Undefined, use getImageCompressionQuality() instead.

getImageCompressionQuality:

Gets the current image's compression quality

int getImageCompressionQuality ( void )

Returns int describing the images compression quality

getImageDelay:

Gets the image delay

int getImageDelay

An example of how to get the delay between frames in a gif:

<?php
$animation = new Imagick("file.gif");

foreach ($animation as $frame) {
	$delay = $animation->getImageDelay();

	echo $delay;
}
?>

getImageDepth:

Gets the image depth

int getImageDepth ( void )

getImageDispose:

Gets the image disposal method

int getImageDispose ( void )

getImageDistortion:

Compares an image to a reconstructed image

float getImageDistortion ( MagickWand $reference, int $metric )

Returns the specified distortion metric

getImageExtrema:

Gets the extrema for the image

array getImageExtrema( void )

Returns an assoc array with the keys "min" and "max".

getImageFilename:

Returns the filename of a particular image in a sequence

string getImageFilename ( void )

getImageFormat:

Returns the format of a particular image in a sequence

string getImageFormat ( void )

use queryFormats() to get a list of possible format names that might be returned by this function.

getImageGamma:

Gets the image Gamma

float getImageGamma ( void )

getImageGeometry:

Gets the width and height as an associative array

array getImageGeometry ( void )

Returns width and height as assoc array

Examples of usage:

<?php
function getImageGeometry($imagePath) {
	$imagick = new \Imagick(realpath($imagePath));
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

<?php
$image = new imagick($filename);

$geo=$image->getImageGeometry();

$sizex=$geo['width'];
$sizey=$geo['height'];
?>

getImageGravity:

Gets the image gravity

int getImageGravity ( void )

Gets the current gravity value of image. Unlike getGravity(), this method returns the gravity defined
for the current img sequence.

Returns the image gravity property,realted to gravity constants.

getImageGreenPrimary:

Returns the chromaticy green primary point

array getImageGreenPrimary ( void )

Returns an array with the keys "x" and "y". Throws an exception on failure.

getImageHeight:

Returns the image height

int getImageHeight ( void )

Returns the image height in pixels

Throws Exception on error.

Example of usage:

<?php

$im = new Imagick("c:/htdocs/rose.jpg");
$height=$image->getImageHeight();
print "Shit fok u".$height;

?>

getImageHistogram:

Gets teh img histogram

array getImageHistogram ( void )

Returns the image histogram as an array of ImagickPixel objects.

Example of usage:

<?php
function getColorStatistics($histogramElements, $colorChannel) {
	$colorStatistics = [];

	foreach ($histogramElements as $histogramElement) {
		$color = $histogramElement->getColorValue($colorChannel);
		$color = intval($color * 255);
		$count = $histogramElement->getColorCount();

		if (array_key_exists($color, $colorStatistics)) {
			$colorStatistics[$color] += $count;
		}
		else{
			$colorStatistics[$color] = $count;
		}
	}

	ksort($colorStatistics);

	return $colorStatistics;
}

function getImageHistogram($imagePath) {
	$backgroundColor = 'black';

	$draw = new \ImagickDraw();
	$draw->setStrokeWidth(0); //Make the lines as thing as possible

	$imagick = new \Imagick();
	$imagick->newImage(500, 500, $backgroundColor);
	$imagick->setImageFormat("png");
	$imagick->drawImage($draw);

	$histogramWidth = 256;
	$histogramHeight = 100; //height for each RGB Segment

	$imagick = new \Imagick(realpath($imagePath));


	//Resize the img to be small, otherwise PHP tends to run out of memory
	//This might lead to bad results for images that are pathologically "pixely"
	$imagick->adaptiveResizeImage(200, 200, true);
	$histogramElements = $imagick->getImageHistogram();

	$histogram = new \Imagick();
	$histogram->newpseudoimage($histogramWidth, $histogramHeight * 3, 'xc:black');
	$histogram->setImageFormat('png');

	$getMax = function ($carry, $item) {
		if ($item > $carry) {
			return $item;
		}
		return $carry;
	};

	$colorValues = [
		'red' => getColorStatistics($histogramElements, \Imagick::COLOR_RED),
		'lime' => getColorStatistics($histogramElements, \Imagick::COLOR_GREEN),
		'blue' => getColorStatistics($histogramElements, \Imagick::COLOR_BLUE),
	];

	$max = array_reduce($colorValues['red'], $getMax, 0);
	$max = array_reduce($colorValues['lime'], $getMax, $max);
	$max = array_reduce($colorValues['blue'], $getMax, $max);

	$scale = $histogramHeight / $max;

	$count = 0;
	foreach($colorValues as $color => $values) {
		$draw->setstrokecolor($color);

		$offset = ($count + 1) * $histogramHeight;

		foreach ($values as $index => $value) {
			$draw->line($index, $offset, $index, $offset - ($value * $scale));
		}
		$count++;
	}

	$histogram->drawImage($draw);

	header("Content-Type: image/png");
	echo $histogram;

}

?>

Another example of using it:

<?php
$image = new Imagick("thing.png");
$pixels=$image->getImageHistogram();
foreach($pixels as $p){
	$colors = $p->getColor();
	foreach($colors as $c){
		print ( "$c\t" );

	}
	print( "\t:\t" . $p->getColorCount() . "\n");
}
?>

getImageIndex:

Gets index of the current active image

int getImageIndex ( void )

Returns the index of the current active image within the Imagick object.

DEPRECATED, use getIteratorIndex()

getImageInterlaceScheme:

Gets the image interlace scheme

int getImageInterlaceScheme ( void )

Returns the interlace scheme as an int on success.

Some sample code of usage:

<?php
	
	$imagick_type = new Imagick();

	$file_to_grab = "image_workshop_directory/test.jpg";

	$file_handle_for_viewing_image_file = fopen($file_to_grab, 'a+');

	$imagick_type->readImageFile($file_handle_for_viewing_image_file);

	$imagick_rendering_intent = $imagick_type->getImageRenderingIntent();

	switch($imagick_rendering_intent)
	{
		case '0':
			$image_rendering_intent_evaluated = "Undefined";
			break;
		case '1':
			$image_rendering_intent_evaluated = "Saturation";
			break;

		case '2':
			$image_rendering_intent_evaluated = "Perceptual";
			break;

		case '3':
			$image_rendering_intent_evaluated = "Absolute";
			break;

		case '4':
			$image_rendering_intent_evaluated = "Relative";
			break;
	}

	print("# $imagick_rendering_intent - $image_rendering_intent_evaluated");

?>

getImageInterpolateMethod:

Returns the interpolate method

int getImageInterpolateMethod ( void )

Returns the interpolation method for the specified image. The method is one of the Imagick::INTERPOLATE_* constants.

getImageIterations:

gets the image iterations

int getImageIterations( void )

Return 0 for a still image, 1 for a animated gif

Example of usage:

<?php

	$imagick_type = new Imagick();

	$file_to_grab = "image_workshop_directory/test.gif";

	$file_handle_for_viewing_image_file = fopen($file_to_grab, 'a+');

	$imagick_type->readImageFile($file_handle_for_viewing_image_file);

	$image_iterations = $imagick_type->getImageIterations();

	if($image_iterations == 1)
	{
		print("$file_to_grab is an animated img.");
	}
	else
	{
		print("$file_to_grab is not an animated img.");
	}
?>

getImageLength:

Returns the iamge length in bytes

int getImageLength ( void )

Example:

<?php
$image = new Imagick('test.jpg');
echo $image->getImageLength() . ' bytes';
?>

getImageMagickLicense:

Returns string containing ImageMagick license

string getImageMagickLicense ( void )

getImageMatte:

Return if the image has a matte channel

bool getImageMatte ( void )

Returns true if image has a matte channel, flase otherwise.

getImageMatteColor:

Returns the image matte color

ImagickPixel getImageMatteColor ( void )

Returns ImagickPixel object on success.

getImageMimeType:

Returns the image mime-type

string getImageMimeType ( void )

getImageOrientation:

int getImageOrientation ( void )

Gets the image orientation. The return value is one of the orientation constants.

Example of using getImageOrientation() to auto-rotate images to their correct orientation:

<?php
function autoRotateImage($image) {
	$orientation = $image->getImageOrientation();

	switch($orientation) {
		case imagick::ORIENTATION_BOTTOMRIGHT:
			$image->rotateimage("#000", 180); //Rotrate 180 degrees
			break;

		case imagick::ORIENTATION_RIGHTTOP:
			$image->rotateimage("#000", 90); //Rotate 90 deg
			break;

		case imagick::ORIENTATION_LEFTBOTTOM:
			$image->rotateImage("#000", -90); //Rotate 90 deg CCW
			break;
	}

	//Now that its corrected in rotation, make sure the EXIF data is correct in case it gets saved with the img
	$image->setImageOrientation(imagick::ORIENTATION_TOPLEFT);
}
?>

Example of usage:

<?php
$image = new Imagick('my-image-file.jpg');
autoRotateImage($image);
//Do otehr stuff
$image->writeImage('result-image.jpg');
?>

getImagePage:

Returns the page geometry

array Imagick::getImagePage()

Returns associative array with keys width, height, x, y

getImagePixelColor:

Returns the color of the specified pixel

ImagickPixel getImagePixelColor ( int $x , int $y )

Returns an ImagickPixel instance for the color at the co-ords given

An example of using getImagePixelColor:

<?php
$hexcolor = '#00ff00';
$fuzz = '4000';
$x = 1;
$y = 1;
$pixel = $image->getImagePixelColor($x, $y);
$image->floodfillPaintImage($hexcolor, $fuzz, $pixel, $x, $y, false);
?>

To find out a color:

<?php
$colors = pixel->getColor();
print_r($colors); //array of Array([r]=>255, [g]=>255, [b]=>255, [a]=>1);

$pixel->getColorAsString(); //produces rgb(255, 255, 255);
?>

getImageProfile:

Returns the named image profile

string getImageProfile ( string $name )

Returns a string containing the image profile

getImageProfiles:

Returns the image profiles

array getImageProfiles ([ string $pattern = "*" [, bool $include_values = true ]] )

Returns all associated profiles that match the pattern. If false is passed as a second param, only
the profile name is returned.

getImageProperties:

Return the image properties

array getImageProperties ([ string $pattern = "*" [, bool $include_values = true ]] )

Returns all associated properties taht match the pattern. If false is passed as a second param,
only the property names are returned. 

Returns an array containing the image properties or property names.

Example of extracting EXIF information:

<?php

//Create the object
$im = new imagick("/path/to/example.jpg");

//Get the EXIF info
$exifArray = $im->getImageProperties("exif:*");

//Loop through the EXIf props
foreach ($exifArray as $name => $property)
{
	echo "{$name} => {$property}<br />\n";
}

?>

getImageProperty:

Returns the named image property

string getImageProperty ( string $name )

Returns the named image prop. 

Setting and getting img prop:

<?php
$image = new Imagick();
$image->newImage(300, 200, "Black");

$image->setImageProperty('Exif:Make', 'Imagick');
echo $image->getImageProperty('Exif:Make');
?>

To access a photogpraphs EXIf data, consider using the following:

<?php
	
	$exif_data = exif_read_data($pic1);
	$edate = $exif_data['DateTime'];
?>

getImageRedPrimary:

Returns the chromaticity red primary point

array getImageRedPrimary()

Returns the chromacity red primary points as an array with the keys "x" and "y".

getImageRegion:

Extracts a region of the image and returns it as a new Imagick object

Imagick getImageRegion ( int $width, int $height, int $x, int $y )

Has the same effect as operations that change the crop of the image -- the new
image preserves the old canvas and positioning info. For example, using annotateImage on the
new image will interpet the position args relative to the old image.

REset the  image to correct it:

<?php
$im->setImagePage(0, 0, 0, 0);
?>

getImageRenderingIntent:

Gets the image rendering intent

int getImageRenderingIntent()

Example of usage:

<?php

	$imagick_type = new Imagick();

	$file_to_grab = "image_workshop_directory/test.jpg";

	$file_handle_for_viewing_image_file = fopen($file_to_grab, 'a+');

	//Grab file
	$imagick_type->readImageFile($file_handle_for_viewing_image_file);

	//Get rendering intent values
	$imagick_rendering_intent = $imagick_type->getImageRenderingIntent();

	switch($imagick_rendering_intent)
	{
		case '0':
			$image_rendering_intent_evaluated = "Undefined";
			break;
		case '1':
			$image_rendering_intent_evaluated = "Saturation";
			break;
		case '2':
			$image_rendering_intent_evaluated = "Percpetual";
			break;
		case '3':
			$image_rendering_intent_evaluated = "Absolute";
			break;
		case '4':
			$image_rendering_intent_evaluated = "Relative";
			break;
	}

	//Print rendering intent values
	print("# $imagick_rendering_intent - $image_rendering_intent_evaluated");

?>

getImageResolution:

Gets the image X and Y resolution

array getImageResolution()

Returns the image density in terms of pixels per /cm

To get reoslution, use getImageGeometry().

getImagesBlob:

Returns all image sequences as a blob

string getImagesBlob()

Implements direct to memory image formats. It returns all image sequences as a string. The format
of the image determines the format of the returned blob (GIF, JPEG, PNG, etc.).

To return a different format, use setImageFormat()

returns a string containing all the images

getImageScene:

Gets the image scene

int getImageScene ()

Returns the iamge scene

getImageSignature:

Generates an SHA-256 message digest for the image pixel stream.

string getImageSignature()

Returns as tring containing the SHA-256 hash of the file.

Different versions of ImageMagick makes different signatures, even if handling the same image.

Some examples of hashing images:

<?php
	

	//Set file for hashing function
	$filename_with_folder_for_hashing = "image_workshop/test_file.bmp";

	//Aquire dynamic hashing algo list
	$php_dynamic_hash_algorithms = hash_algos();

	//Count dynamic hashing algos list
	$number_of_dynamic_hash_algorithms = count($php_dynamic_hash_algorithms);

	//Parse dynamic hashin algo list
	for($i = 0; $i < $number_of_dynamic_hash_algorithms; $i++)
	{
		//Get current hashing algo
		$current_hashing_algorithm = $php_dynamic_hash_algorithms[$i];

		//perform hashing on file
		$current_hashing_algorithm_hex_result = hash_file($current_hashing_algorithm, $filename_with_folder_for_hashing, FALSE);

		//print hashed results
		print("$current_hashing_algorithm Algorithm ::: $current_hashing_algorithm_hex_result");
		print("<br><br>");
	}
?>

getImageSize:

Returns the image length in bytes

int getImageSize()

Deprecated in favor of getImageLength()

getImageTicksPerSecond:

Gets the image ticks-per-second

int getImageTicksPerSecond()

Returns the iamge ticks-per-second

getImageTotalInkDensity:

Gets the image total ink density

float getImageTotalInkDensity()

Returns the image total ink density of the image.

getImageType:

Gets the potential image type

int getImageType()

Returns the potentional image types:

imagick::IMGTYPE_UNDEFINED

imagick::IMGTYPE_BITLEVEL

imagick::IMGTYPE_GRAYSCALE

imagick::IMGTYPE_GRAYSCALEMATTE

imagick::IMGTYPE_PALETTE

imagick::IMGTYPE_PALETTEMATTE

imagick::IMGTYPE_TRUECOLOR

imagick::IMGTYPE_TRUECOLORMATTE

imagick::IMGTYPE_COLORSEPARATION

imagick::IMGTYPE_COLORSEPARATIONMATTE

imagick::IMGTYPE_OPTIMIZE

Example of usage:

<?php

	//Imagick Type

	$imagick_type = new Imagick();

	//Open file

	$file_to_grab = "image_workshop_directory/test.bmp";

	$file_handle_for_viewing_image_file = fopen($file_to_grab, 'a+');

	//Grab file

	$imagick_type->readImageFile($file_handle_for_viewing_image_file);

	//Get image type value
	$image_type = $imagick_type->getImageType();

	//Interpet the image vlaue
	switch($image_type)
	{
		case imagick::IMGTYPE_UNDEFINED:
			$image_type_title = "Undefined";
			break;

		case imagick::IMGTYPE_BILEVEL:
			$image_type_title = "Bilevel";
			brak;

		case imagick::IMGTYPE_GRAYSCALE:
			$image_type_title = "Grayscale";
			break;

		case imagick::IMGTYPE_GRAYSCALEMATTE:
			$image_type_title = "Grayscale Matte";
			break;

		case imagick::IMGTYPE_PALETTE:
			$image_type_title = "Palette";
			break;

		case imagick::IMGTYPE_PALETTEMATTE:
			$image_type_title = "Palette Matte";
			break;

		case imagick::IMGTYPE_TRUECOLOR:
			$image_type_title = "Truecolor";
			break;

		case imagick::IMGTYPE_TRUECOLORMATTE:
			$image_type_tittle = "Truecolor Matte";
			break;

		case imagick::IMGTYPE_COLORSEPARATION:
			$image_type_title = "Color Separation";
			break;

		case imagick::IMGTYPE_COLORSEPARATIONMATTE:
			$image_type_title = "Color Separation Matte";
			break;

		case imagick::IMGTYPE_OPTIMIZE:
			$image_type_title = "Optimize";
			break;
	}

	print("# $image_type - $image_type_title");
?>

getImageUnits:

Gets the image units of resolution

int getImageUnits()

Returns the image units of resolution

getImageVirtualPixelMethod:

Returns the virtual pxel method

int getImageVirtualPixelMethod()

getImageWhitePoint:

Returns the chromaticity white point

array getImageWhitePoint()

Returns it asn associative array with x and y

getImageWidth:

Returns the image width

int getImageWidth()

Returns the image width

Returns the original size it was opened with, not after it has been modified.

getInterlaceScheme:

Gets the object interlace scheme

int getInterlaceScheme()

getIteratorIndex:

gets the index of the current active image

int getIteratorIndex()

Returns the index of the current active image within the Imagick object.

This will also retrieve which page number of a multipage document (PDF PSF etc.) file the Imagick instance is currently on.
By default for a PDF, it seems to be the last page.

An example of usage:

<?php
$im = new Imagick();
$im->newImage(100, 100, new ImagickPixel("red"));
$im->newImage(100, 100, new ImagickPixel("green"));
$im->newImage(100, 100, new ImagickPixel("blue"));

$im->setIteratorIndex(1);
echo $im->getIteratorIndex();
?>

getNumberImages:

Returns the number of images in the object

int getNumberImages()

Returns the number of imags associated with Imagick object.

Example of usage:

<?php
//Create the object
$image = new Imagick('YourImageLocation.tif');
$count = $image->getNumberImages();

echo "<h3 style=\"font: bold 12pt Arial\">Total Number of Images Extracted ". 
	 "from the TIF : ".$image->getNumberImages()."</h3>";

for ($x = 1;$x <= $image->getNumberImages(); $x++) {
	$image->previousImage();
	$image->thumbnailImage( 400, null );
	$image->writeImage('img'.$count.'.png');
	$count--;
}
?>

<html>
	<head>
		<title>Extracting Images from TIFF</title>
	</head>
	<body>
		<table cellspacing="10" style="background: #ddd"><tr>
			<?php
			for ($x = 1;$x <= $image->getNumberImages(); $x++) {
				echo "<td><img src=\"img$x.png\"<br /><p style=\"font: bold 12pt Arial;".
						"text-align: center\">image $x (png)</p></td>";
			}
			?>
		</tr></table>
	</body>
</html>

For PDFs, this accounts for the number of pages in it, not the amount of images in it.

Example of usage:

<?php

$document = new Imagick('2_pager.pdf');

var_dump($document->getNumberImages()); //Returns 2

$document = new Imagick('1_pager.pdf');

var_dump($document->getNumberImages()); //Returns 1

?>

getOption:

Returns a value associated with the specified key

string getOption ( string $key )

getPackageName:

Returns the ImageMagick package name

string getPackageName()

getPage:

Returns the page geometry

array getPage()

Returns the page geometry associated with the Imagick object in an associative array with the keys "width", "height", "x" and "y".

getPixelIterator:

Returns a MagickPixelIterator

ImagickPixelIterator getPixelIterator()

Example of usage:

<?php
function getPixelIterator($imagePath) {
	$imagick = new \Imagick(realpath($imagePath));
	$imageIterator = $imagick->getPixelIterator();

	foreach ($imageIterator as $row => $pixels) { //loop through pixel rows
		foreach ($pixels as $column => $pixel) {
			//@var $pixel \ImagickPixel
			if ($column % 2) {
				$pixel->setColor("rgba(0,0,0,0)"); //Paint every second pixel black
			}
		}
		$imageIterator->syncIterator(); //Sync the iterator, important to do on each iteration
	}

	header("Content-Type: image/jpg");
	echo $imagick;
}

?>

If we sync the PixelIterator regularly, it is not read-only:

<?php
	//Create new object with the img
	$im = new Imagick("strawberry.png");

	//get iterator
	$it = $im->getPixelIterator();

	//Loop through pixel rows
	foreach( $it as $row => $pixels )
	{
		//For every second row
		if ( $row % 2 )
		{
			//Loop through the pixels in the row (columns)
			foreach ( $pixels as $column => $pixel )
			{
				//Paint every second pixel black
				if ( $column % 2 )
				{
					$pixel->setColor( "black" );
				}
			}
		}

		//Sync the iterator, this is important to do on each iterator
		$it->syncIterator();
	}

	//Display the image
	header("Content-Type: image/png");
	echo $im;
?>

Basically they are the same, just differently written, lol.

getPixelRegionIterator:

get an ImagickPixelIterator for an image section

ImagickPixelIterator getPixelRegionIterator ( int $x, int $y , int $columns , int $rows )

Example of iterating over pixels in the top left of the image, changing them to black:

<?php
$im = new Imagick(realpath("./testImage.png"));
$areaIterator = $im->getPixelRegionIterator(0, 0, 10, 10);

foreach ($areaIterator as $rowIterator) {
	foreach ($rowIterator as $pixel) {
		//Paint every pixel black
		$pixel->setColor("rgba(0,0,0,0)");
	}
	$areaIterator->syncIterator();
}
$im->writeImage("./output.png");
?>

getPointSize:

Gets point size

float getPointSize()

Returns the object point size property. 

getQuantum:

int getQuantum()

Returns the ImageMagick quantum range as an int

getQuantumDepth:

Gets the quantum deptha as a string

array getQuantumDepth()

Simply gives us an array of two values where it is the bit of color depth, so if its 16, its 16^2 colours.

Example of usage:

<?php

	$imagick_type = new Imagick();

	$file_to_grab = new Imagick();

	$file_handle_for_viewing_image_file = fopen($file_to_grab, 'a+');

	$imagick_type->readImageFile($file_handle_for_viewing_image_file);

	$imagick_type_quantum_depth = $imagick_type->getQuantumDepth();

	print("<pre>");
	print_r($imagick_type_quantum_depth);
	print("</pre>");
?>

getQuantumRange:

Returns the imagick quantum range

array getQuantumRange()

The array contains 2 values, int and string, both resembling the same value

getRegistry:

string getRegistry ( string $key )

Get the StringRegistry entry for the named key or false if not set

getReleaseDate:

Returns the ImageMagick release date as a string

string getReleaseDate()

getResource:

Returns the specified resource's memory usage in MB

int getResource ( int $type )

getResourceLimit:

Returns the specified resource limit

int getResourceLimit ( int $type )

The param to this must be one of the constants of memory allocate places, and if the limit of these things is exceeded,
then the respective memory is stored in virtual memory instead, which is slower.

This is simply to indicate that stuff that gets put into VM is of lower prio in terms of server managing requests.

The functioning behind this is because the files are stored and open/closed on demand, meaning its a performance hit,
since it cannot be cached.

The values are as :

RESOURCETYPE_UNDEFINED

RESOURCETYPE_AREA : Maximum area in bytes of any one image that can reside in the pixel cache memory

RESOURCETYPE_DISK : maximum amount of disk space in bytes permitted to be allocated for the pixel cache

RESOURCETYPE_FILE 	: Maximum number of open pixel cache files

RESOURCETYPE_MAP : maximum amount of memory map in bytes to allocate for the pixel cache

RESOURCETYPE_MEMORY : maximum amount of memory in bytes to allocate for the pixel cache


An example of usage:

<?php

	$imagick_type = new Imagick();

	$file_to_grab = "image_workshop_directory/test.gif";

	$file_handle_for_viewing_image_file = fopen($file_to_grab, 'a+');

	$imagick_type->readImageFile($file_handle_for_viewing_image_file);

	print("Undefined: ");
	print($imagick_type->getResourceLimit(imagick::RESOURCETYPE_UNDEFINED));

	print("<br><br>Area: ");
	print($imagick_type->getResourceLimit(imagick::RESOURCETYPE_AREA));

	print("<br><br>Disk: ");
	print($imagick_type->getResourceLimit(imagick::RESOURCETYPE_DISK));

	print("<br><br>File: ");
	print($imagick_type->getResourceLimit(imagick::RESOURCETYPE_FILE));

	print("<br><br>Map: ");
	print($imagick_type->getResourceLimit(imagick::RESOURCETYPE_MAP));

	print("<br><br>Memory: ");
	print($imagick_type->getResourceLimit(imagick::RESOURCETYPE_MEMORY));
?>

getSamplingFactors:

Gets the horizontal and vertical sampling factor

array getSamplingFactors()

Returns an associative array with the horizontal and vertical sampling factors of the image

getSize:

Returns the size associated with the Imagick Object

array getSize()

Get the size in pixels associated with the Imagick object, previously set by Imagick::setSize()

This just returns the size set by setSize(), not actual width and height, to get thoose, use getImageWidth()
and getImageHeight()

Example of usage:

<?php
//Set size first and then load the raw image
$img = new Imagick();
$img->setSize(200, 400);
$img->readImage("image.rgb");

$img->scaleImage(400, 800);

$size = $img->getSize();
print_r($size);

echo "$img->getImageWidth()."x".$img->getImageHeight();
?>

getSizeOffset:

Returns the size offset associated with the imagick object

int getSizeOffset()

getVersion:

Returns the ImageMagick API version as a string and as a number

array getVersion()

An example of checking and matching version:

<?php
$v = Imagick::getVersion();
preg_match('/ImageMagick ([0-9]+\.[0-9]+\.[0-9]+)/', $v['versionString'], $v);
if(version_compare($v[1], '6.2.8')<=0){
	print "Your ImageMagick Version {$v[1]} is '6.2.8' or older, please upgrade!";
}
?>

haldClutImage:

Replaces colors in the image using a Hald lookup table. hald images can be created using
HALD Color coder.

bool haldClutImage ( Imagick $clut [, int $channel = Imagick::CHANNEL_DEFAULT ] )

Example of usage:

<?php
function haldClutImage($imagePath) {
	$imagick = new \Imagick(realpath($imagePath));
	$imagickPalette = new \Imagick(realpath("images/hald/hald_8.png"));
	$imagickPalette->sepiatoneImage(55);
	$imagick->haldClutImage($imagickPalette);
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

hasNextImage:

Checks if the object has more images

bool hasNextImage()

Returns true if the objecth as more images when traversing list in forward direction,
FALSe if there are no more.

hasPreviousImage:

Checks if the object has a previous image

bool hasPreviousImage()

True if there are more objects when traversing backwards, false otherwise

identifyFormat:

string|false identifyFormat ( string $embedText )

Replaces any embedded formating chars with the appropiate img prop and returns 
the interpeted text.

Example of usage:

<?php
	$output = "Output of 'Trim Box: %@ number of unique colors: %k' is: <br/>";
	$imagick = new \Imagick(realpath("./images/artifact/mask.png"));
	$output .= $imagick->identifyFormat("Trim box: %@ number of unique colors: %k");
?>

identifyImage:

Identifies an image and fetches attributes

array identifyImage ([ bool $appendRawOutput = false ] )

The returned attributes include width, height, size and others.

implodeImage:

Creates a new image as a copy of an existing one with the image pixels "imploded" by the specified percentage

bool implodeImage ( float $radius )

Example of usage:

<?php
function implodeImage($imagePath){
	$imagick = new \Imagick(realpath($imagePath));
	$imagick->implodeImage(0.0001);
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

importImagePixels:

bool imagick::importImagePixels ( int $x, int $y, int $width, int $height, string $map, int $storage, arary
	$pixels)

Imports pixels from an array into an image. The map is usually RGB. This method imposes the following
constraints for the params: amount of pixels int hte array must match width x and heigth x lenght of the map.

Notable params:

map. Map of pixels ordering a string. This can be for example RGB. The value can be any combination of
order of R = red, G = green, B = blue, A = alpha (0 is for transparent), O = opacity (0 is opaque), C = cyan, Y = yellow,
M = magenta, K = black, I = intensity (for grayscale), P = pad

storage: The pixel storage method. List of pixel constants related

Example of usage:

<?php

//generate array of pixels, 2000 pixels per color stripe
$count = 2000 * 3;

$pixels =
	array_merge(array_pad(array(), $count, 0),
				array_pad(array(), $count, 255),
				array_pad(array(), $count, 0),
				array_pad(array(), $count, 255),
				array_pad(array(), $count, 0));

//Width and height. The area is amount of pixels divided
// by three. Three comes from RGB. Three values per pixels
$width = $height = pow((count($pixels) / 3), 0.5);

//Create empty image
$im = new Imagick();
$im->newImage($width, $height, 'gray');

//import hte pixels into image
//width * height * strlen("RGB") must match count($pixels)
$im->importImagePixels(0,0, $width, $height, "RGB", Imagick::PIXEL_CHAR, $pixels);

//Outputs as JPEG img
$im->setImageFormat('jpg');
header("Content-Type: image/jpg");
echo $im;

?>

inverseFourierTransformImage:

Implements the inverse discrete fourier transform (DFT) of the iamge eitehr as a magnitude/phase or real/imaginary image pair.

void inverseFourierTransformImage( string $complement, stirng $magnitude )

labelImage:

Adds a label to an image

bool labelImage ( string $label )

levelImage:

Adjusts the levels of an image

bool levelImage ( float $blackPoint , float $gamma, float $whitePoint [, int $channel = Imagick::CHANNEL_ALL ] )

Adjusts the levels of an image by scaling the colors falling between specified white and black points to the full
available quantum range. The paramaters provided represent the black, mid and white points. The black points specifies
the darkest colors in teh image. COlors darker than the black point are set to zero.

Mid point specifies a gamma correction to apply to the img. White point specifies the lightest color in the 
image. Colors brightere than the white point are set to maximum quantum value.

The quantum range is not 0 to 255, it is 0 to 65535

Example of usage:

<?php
function levelImage($blackPoint, $gamma, $whitePoint) {
	$imagick = new \Imagick();
	$imagick->newPseudoimage(500, 500, 'gradient:black-white');

	$imagick->setFormat('png');
	$quantum = $imagick->getQuantum();
	$imagick->levelImage($blackPoint / 100, $gamma, $quantum * $whitePoint / 100);

	header("Content-Type: image/png");
	echo $imagick->getImageBlob();
}


?>

linearStretchImage:

Stretches with saturation the image intensity

bool linearStretchImage ( float $blackPoint , float $whitePoint )

Example of usage:

<?php
function linearStretchImage($imagePath, $blackThreshold, $whiteThreshold) {
	$imagick = new \Imagick(realpath($imagePath));
	$pixels = $imagick->getImageWidth() * $imagick->getImageHeight();
	$imagick->linearStretchImage($blackThreshold * $pixels, $whiteThreshold * $pixels);

	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

An example of turning the 90% of darkest pixels black and the brightest 5% white:

<?php
$im = new Imagick("some_image.png");
list ($width, $height) = array_values ($im->getImageGeometry());
$px = $width * $height;
$im->modulateImage(100, 0, 100);
$im->linearStretchImage ($px * 0.9 ,$px * 0.05);
$im->writeImage("temp.jpg");
?>

liquidRescaleImage:

Animates an image or images

bool liquidRescaleImage ( int $width, int $height, float $delta_x, float $rigidity )

This method scales the images using liquid rescaling method. This method is an implementation
of a techinque called seam carving. In order for this method to work as expected ImageMagick
must be compiled with libqr support. 

Params:

delta_x : How much the seam can traverse on x-axis. If 0, causes the seams to be straight

rigidity : Introduces a bias for non-straight streams. This param is typically 0

listRegistry:

array listRegistry()

List all the registry settings. Returns an array of all key/value pairs in the registry.

magnifyImage:

Scales an image proportionally 2x

bool magnifyImage()

Example of usage:

<?php
function magnifyImage($imagePath) {
	$imagick = new \Imagick(realpath($imagePath));
	$imagick->magnifyImage();
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

mapImage:

Replaces the colors of an image with the closest color from a reference image.

bool mapImage ( Imagick $map , bool $dither )

matteFloodfillImage:

Changes the transparency value of a color

bool matteFloodfillImage ( float $alpha , float $fuzz , mixed $bordercolor , int $x, int $y )

Changes the transparency value of any pixel that matches target and is an immediate neighbor.
If the method FillToBorderMethod is specified, the transparency value is changed for any neighbor
pixel that does not match the bordercolor member of image.

medianFilterImage:

Applies a digital filter

bool medianFilterImage ( float $radius )

applies a digital filter that improves the quality of a noisy image. 
Each pixel is replaced by the median in a set of neighboring pixels as defined
by radius.

Example of usage:

<?php
function medianFilterImage($radius, $imagePath) {
	$imagick = new \Imagick(realpath($imagePath));
	@$imagick->medianFilterImage($radius);
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

mergeImageLayers:

Merges image layers

Imagick mergeImageLayers ( int $layer_method )

Merges image layers into one. This method is useful when working with image
formats that use multiple layers such as PSD. The merging is controlled using
the layer_method which defines how the layers are merged.

The layer_method param is one of the LAYERMETHOD_* constants

<?php
function mergeImageLayers($layerMethodType, $imagePath1, $imagePath2) {
	$imagick = new \Imagick(realpath($imagePath));

	$imagick2 = new \Imagick(realpath($imagePath2));

	$imagick->addImage($imagick2);
	$imagick->setImageFormat('png');

	$result = $imagick->mergeImageLayers($layerMethodType);
	header("Content-Type: image/png");
	echo $result->getImageBlob();
}

?>

minifyImage:

Scales an image proportionally to half its size

bool minifyImage()

modulateImage:

Controls the brightness, saturation and hue

bool modulateImage ( float $brightness , float $saturation , float $hue )

Let's you control the brightness, saturation, and hue of an image. Hue is the % of absolute rotation from the
current position. For example 50 results in a counter-clockwise rotation of 90 degrees, 150 results in a 
clockwise rotation of 90 degrees, with 0 and 200 both resulting in 180 degrees of rotation.

Example of usage:

<?php
function modulateImage($imagePath, $hue, $brightness, $saturation) {
	$imagick = new \Imagick(realpath($imagePath));
	$imagick->modulateImage($brightness, $saturation, $hue);
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

montageImage:

Creates a composite image

Imagick montageImage ( ImagickDraw $draw , string $tile_geometry , string $thumbnail_geometry, int $mode ,
	string $frame )

Creates a composite image by combining several separate images. The images are tiled on the composite image
with the name of the image optionally appearing just below the individual tile.

Params:

Draw: font name, size, color óbtained from this object

tile_geometry: The number of tiles per row and page (e.g. 6x4+0+0)

thumbnail_geometry: Preferred image size and border size of each thumbnail (e.g 120x120+4+3>)

mode: THumbnail framing mode, relats to Montage Mode constnats

frame: Surround the image with an ornamental border (eg 15x15+3+3). The frame color is the thumbnails 
matte color.

morphImages:

Method morphs a set of images

Imagick morphImages ( int $number_frames )

Method morphs a set of images. Both the image pixels and size are linearly interpolated to give the appearance
of a meta-morphosis from one image to the next.

number_frames: The number of in-between images to generate.

morphology:

void morphology ( int $morphologyMethod , int $iterations , ImagickKernel $ImagickKernel [, string $CHANNEL ] )

Applies a user supplied kernel to the image according to the given morphology method.

Params:

morphologyMethod: Which morphology method to use one of the \Imagick::MORPHOLOGY_* constants

iterations: THe number of iteration to apply the morphology function.A value of -1 means loop until no change found.
How this is applied may depend on the morphology method. Typically this is a value of 1.

Examples:

Convolve Imagick::morphology():

<?php
	$imagick = $this->getCharacter();
	$kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_GAUSSIAN, "5,1");
	$imagick->morphology(\Imagick::MORPHOLOGY_CONVOLVE, 2, $kernel);
	header("Content-Type: image/png");
	echo $imagick->getImageBlob();
?>

Correlate Imagick::morhpology():

<?php
	//Top-left pixel must be black
	// Bottom right pixel must be white
	// We don't care about the rest

	$imagick = $this->getCharacterOutline();
	$kernel = \ImagickKernel::fromMatrix(self::$correlateMatrix, [2, 2]);
	$imagick->morphology(\Imagick::MORPHOLOGY_CORRELATE, 1, $kernel);
	header("Content-Type: image/png");
	echo $imagick->getImageBlob();
?>

Erode Imagick::morhpology():

<?php
	$canvas = $this->getCharacterOutline();
	$kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_OCTAGON, "3");
	$canvas->morphology(\Imagick::MORPHOLOGY_ERODE, 2, $kernel);
	header("Content-Type: image/png");
	echo $canvas->getImageBlob();
?>

Erode Intensity Imagick::morhpology():

<?php
	$canvas = $this->getCharacter();
	$kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_OCTAGON, "1");
	$canvas->morphology(\Imagick::MORPHOLOGY_ERODE_INTENSITY, 2, $kernel);
	header("Content-Type: image/png");
	echo $canvas->getImageBlob();
?>

Dilate Imagick::morphology():

<?php
	$canvas = $this->getCharacterOutline();
	$kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_OCTAGON, "3");
	$canvas->morphology(\Imagick::MORPHOLOGY_DILATE, 4, $kernel);
	header("Content-Type: image/png");
	echo $canvas->getImageBlob();
?>

Dilate intensity Imagick::morphology():

<?php
	$canvas = $this->getCharacter();
	$kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_OCTAGON, "1");
	$canvas->morphology(\Imagick::MORPHOLOGY_DILATE_INTENSITY, 4, $kernel);
	header("Content-Type: image/png");
	echo $canvas->getImageBlob();
?>

Distance with Chebyshev kernel Imagick::morphology():

<?php
	$canvas = $this->getCharacterOutline();
	$kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_CHEBYSHEV, "3");
	$canvas->morphology(\Imagick::MORPHOLOGY_DISTANCE, 3, $kernel);
	$canvas->autoLevelImage();
	header("Content-Type: image/png");
	echo $canvas->getImageBlob();
?>

Distance with Manhattan kernel Imagick::morphology():

<?php
	$canvas = $this->getCharacterOutline();
	$kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_MANHATTAN, "5");
	$canvas->morphology(\Imagick::MORPHOLOGY_DISTANCE, 3, $kernel);
	$canvas->autoLevelImage();
	header("Content-Type: image/png");
	echo $canvas->getImageBlob();
?>

Distance with octagonal kernal Imagick::morphology():

<?php
	$canvas = $this->getCharacterOutline();
	$kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_OCTAGONAL, "5");
	$canvas->morphology(\Imagick::MORPHOLOGY_DISTANCE, 3, $kernel);
	$canvas->autoLevelImage();
	header("Content-Type: image/png");
	echo $canvas->getImageBlob();
?>

Distance with Euclidean kernel Imagick::morphology():

<?php
	$canvas = $this->getCharacterOutline();
	$kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_EUCLIDEAN, "4");
	$canvas->morphology(\Imagick::MORPHOLOGY_DISTANCE, 3, $kernel);
	$canvas->autoLevelImage();
	header("Content-Type: image/png");
	echo $canvas->getImageBlob();
?>

Edge Imagick::morphology():

<?php
	$canvas = $this->getCharacterOutline();
	$kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_OCTAGON, "3");
	$canvas->morphology(\Imagick::MORPHOLOGY_EDGE, 1, $kernel);
	header("Content-Type: image/png");
	echo $canvas->getImageBlob();
?>

Open Imagick::morphology():

<?php
	//As a result you will see that 'Open' smoothed the outline, by rounding off any sharp points, and remove any
	//parts that is smaller than the shape used. It will also disconnect or open any thin bridges
	$canvas = $this->getCharacterOutline();
	$kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_DISK, "6");
	$canvas->morphology(\Imagick::MORPHOLOGY_OPEN, 1, $kernel);
	header("Content-Type: image/png");
	echo $canvas->getImageBlob();
?>

Open intensity imagick::morphology():

<?php
	//same as above
	$canvas = $this->getCharacter();
	$kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_DISK, "6");
	$canvas->morphology(\Imagick::MORPHOLOGY_OPEN_INTENSITY, 1, $kernel);
	header("Content-Type: image/png");
	echo $canvas->getImageBlob();
?>

Close Imagick::morphology():

<?php
	//The basic use of the 'close' method is to reduce or remove any 'holes' or 'gaps' about the size of the
	// kernel 'Structure Element'. that is 'close' parts of the background that are about taht size
	$canvas = $this->getCharacterOutline();
	$kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_DISK, "6");
	$canvas->morphology(\Imagick::MORPHOLOGY_CLOSE, 1, $kernel);
	header("Content-Type: image/png");
	echo $canvas->getImageBlob();
?>

Close Intensity Imagick::morphology():

<?php
	//The basic useo f the 'Close' method is to reduce or remove any 'holes' or 'gaps' about the size of the
	// kernel 'Structure Element'. Thati s 'close' parts of the BG that are about that size
	$canvas = $this->getCharacter();
	$kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_DISK, "6");
	$canvas->morphology(\Imagick::MORPHOLOGY_CLOSE_INTENSITY, 1, $kernel);
	header("Content-Type: image/png");
	echo $canvas->getImageBlob();
?>

Smooth Imagick::morphology():

<?php
	$canvas = $this->getCharacterOutline();
	$kernel  = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_OCTAGON, "3");
	$canvas->morphology(\Imagick::MORPHOLOGY_SMOOTH, 1, $kernel);
	header("Content-Type: image/png");
	echo $canvas->getImageBlob();
?>

Edge in Imagick::morphology():

<?php
	$canvas = $this->getCharacterOutline();
	$kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_OCTAGON, "3");
	$canvas->morphology(\Imagick::MORPHOLOGY_EDGE_IN, 1, $kernel);
	header("Content-Type: image/png");
	echo $canvas->getImageBlob();
?>

Edge out Imagick::morphology():

<?php
	$canvas = $this->getCharacterOutline();
	$kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_OCTAGON, "3");
	$canvas->morphology(\Imagick::MORPHOLOGY_EDGE_OUT, 1, $kernel);
	header("Content-Type: image/png");
	echo $canvas->getImageBlob();
?>

TopHat, returns the pixels that were removed by a Opening of the shape, that is the pixels
that were removed to round off the points, and the connecting bridges between shapes.

<?php
	$canvas = $this->getCharacterOutline();
	$kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_DISK, "5");
	$canvas->morphology(\Imagick::MORPHOLOGY_TOP_HAT, 1, $kernel);
	header("Content-Type: image/png");
	echo $canvas->getImageBlob();
?>

BottomHat, returns the pixels that were added in closing gaps and bridges etc.
<?php
	$canvas = $this->getCharacterOutline();
	$kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_DISK, "5");
	$canvas->morphology(\Imagick::MORPHOLOGY_BOTTOM_HAT, 1, $kernel);
	header("Content-Type: image/png");
	echo $canvas->getImageBlob();
?>

Hit and Miss imagick::morphology():

<?php
	$canvas = $this->getCharacterOutline();
	//This finds all the pixels with 3 pixels of the right edge
	$matrix = [[1, false, false, 0]];
	$kernel = \ImagickKernel::fromMatrix(
		$matrix,
		[0,0]
	);

	$canvas->morphology(\Imagick::MORPHOLOGY_HIT_AND_MISS, 1, $kernel);
	header("Content-Type: image/png");
	echo $canvas->getImageBlob();
?>

Thinning Imagick::morphology():

<?php
	$canvas = $this->getCharacterOutline();
	$leftEdgeKernel = \ImagickKernel::fromMatrix([[0,1]], [1,0]);
	$rightEdgeKernel = \ImagickKernel::fromMatrix([[1,0]], [0,0]);
	$leftEdgeKernel->addKernel($rightEdgeKernel);

	$canvas->morphology(\Imagick::MORPHOLOGY_THINNING, 3, $leftEdgeKernel);
	header("Content-Type: image/png");
	echo $canvas->getImageBlob();
?>

Thicken imagick::morphology():

<?php
	$canvas = $this->getCharacterOutline();
	$leftEdgeKernel = \ImagickKernel::fromMatrix([[0, 1]], [1,0]);
	$rightEdgeKernel = \ImagickKernel::fromMatrix([1, 0]], [0,0]);
	$leftEdgeKernel->addKernel($rightEdgeKernel);

	$canvas->morphology(\Imagick::MORPHOLOGY_THICKEN, 3, $leftEdgeKernel);
	header("Content-Type: image/png");
	echo $canvas->getImageBlob();
?>

Thick to generate a convex hull Imagick::morphology():

<?php
	$canvas = $this->getCharacterOutline();
	$diamondKernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_DIAMOND, "1");
	$convexKernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_CONVEX_HULL, "");

	//The thicken morp does not handle small gaps. We close them with
	// the close morph
	$canvas->morphology(\Imagick::MORPHOLOGY_CLOSE, 1, $diamondKernel);
	$canvas->morphology(\Imagick::MORPHOLOGY_THICKEN, -1, $convexKernel);
	$canvas->morphology(\Imagick::MORPHOLOGY_CLOSE, 1, $diamondKernel);

	header("Content-Type: image/png");
	echo $canvas->getImageBlob();
?>

iterative morphology Imagick::morphology()

<?php
	$canvas = $this->getCharacterOutline();
	$kernel = \ImagickKernel::fromBuiltIn(\Imagick::KERNEL_DISK, "2");
	$canvas->morphology(\Imagick::MORPHOLOGY_ITERATIVE, 3, $kernel);
	$canvas->autoLevelImage();
	header("Content-Type: image/png");
	echo $canvas->getImageBlob();
?>

Helper function to get an image silouhette Imagick::morphology():

<?php
	private function getCharacterOutline() {
		$imagick = new \Imagick(realpath("./images/character.png"));
		$character = new \Imagick();
		$character->newPseudoImage(
			$imagick->getImageWidth(),
			$imagick->getImageHeight(),
			"canvas:white"
		);
		$canvas = new \Imagick();
		$canvas->newPseudoImage(
			$imagick->getImageWidth(),
			$imagick->getImageHeight(),
			"canvas:black"
		);

		$character->compositeimage(
			$imagick,
			\Imagick::COMPOSITE_COPYOPACITY,
			0,0
		);

		$canvas->compositeimage(
			$character,
			\Imagick::COMPOSITE_ATOP,
			0,0
		);

		$canvas->setFormat('png');

		return $canvas;
	}
?>

mosaicImages:

Forms a mosaic from images

Imagick mosaicImages()

Inlays an image sequence to form a single coherent picture. It returns a wand with each image in the sequence
composited at the location defined by the page offset of the image.

motionBlurImage:

Simulates motion blur

bool Imagick::motionBlurImage ( float $radius, float $sigma, float $angle [, int $channel = Imagick::CHANNEL_DEFAULT ] );

Simulatesm otion blur. We convolve the image with a GAussian operator of the given and standard deviation (sigma).
For reasonable results, radius should be larger than sigma. Use a radius of 0 and MotionBlurImage() seelcts a 
suitable radius for you.

Angle gives the angle for the blurring motion.

Params:

radius: the radius of the Gaussian, in pixels, not counting the center pixel.

sigma: The standard deviation of the Gaussian, in pixels.

angle: Apply the effect along this angle.

channel: Provide any channel constant that is valid for your channel mode. To apply more tha none channel, combine
channeltype constants using bitwise operators.

Example of usage:

<?php
function motionBlurImage($imagePath, $radius, $sigma, $angle, $channel) {
	$imagick = new \Imagick(realpath($imagePath));
	$imagick->motionBlurImage($radius, $sigma, $angle, $channel);
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

negateImage:

Negates the colors in the reference image

bool negateImage ( bool $gray [, int $channel = Imagick::CHANNEL_ALL ] )

The GrayScale option means that only grayscale values within the image are negated.

Example of usage:

<?php
function negateImage($imagePath, $grayOnly, $channel) {
	$imagick = new \Imagick(realpath($imagePath));
	$imagick->negateImage($grayOnly, $channel);
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

newImage:

Creates a new image

bool newImage ( int $cols , int $rows , mixed $background [, string $format ])

Creates a new img and associates value as BG color

The color value for transparency is "none":

<?php
	
$image = new Imagick();
$image->newImage(100, 100, new ImagickPixel('red'));
$image->setImageFormat('png');

header('Content-Type: image/png');
echo $image;

?>

newPseudoImage:

Creates a new image

bool newPseudoImage ( int $columns , int $rows , string $pseudoString )

Creates a new Image using ImageMagick pseudo-formats

Example of usage:

<?php
function newPseudoImage($canvasType) {
	$imagick = new \Imagick();
	$imagick->newPseudoImage(300, 300, $canvasType);
	$imagick->setImageFormat("png");
	header("Content-Type: image/png");
	echo $imagick->getImageBlob();
}

//newPseudoImage('gradient:red-rgba(64, 255, 255, 0.5)');
//newPseudoImage("radial-gradient:red-blue");
newPseudoImage("plasma:fractal");

?>

nextImage:

Moves to the next image

bool Imagick::nextImage()

Associates the next image in teh image list with an Imagick Object.

normalizeImage:

Enhances the contrast of a color image

bool normalizeImage ([ int $channel = Imagick::CHANNEL_ALL ] )

Enhances the contrast of a color image by adjusting pixel color to span teh entire range of 
colors available.

Example of usage:

<?php
function normalizeImage($imagePath, $channel) {
	$imagick = new \Imagick(realpath($imagePath));
	$original = clone $imagick;
	$original->cropimage($original->getImageWidth() / 2, $original->getImageHeight(), 0, 0);
	$imagick->normalizeImage($channel);
	$imagick->compositeimage($original, \Imagick::COMPOSITE_ATOP, 0, 0);
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

oilPaintImage:

Simulates an oil painting

bool oilPaintImage ( float $radius )

Apples a special effect filter that simulates an oil painting. Each pixel is replaced by the most frequent color 
occurring in a circular region defined by radius.

Example of usage:

<?php
function oilPaintImage($imagePath, $radius) {
	$imagick = new \Imagick(realpath($imagePath));
	$imagick->oilPaintImage($radius);
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

opaquePaintImage:

Changes the color value of any pixel that matches target

bool opaquePaintImage ( mixed $target, mixed $fill , float $fuzz , bool $invert , [ int $channel = Imagick::CHANNEL_DEFAULT ] )

Changes any pixel that matches color with the color defined by fill.

optimizeImageLayers:

Removes repeated portions of images to optimize

bool optimizeImageLayers()

Compares each image the GIF disposed forms of the previous image in the sequence. From this it attempt to select
the smallest cropped image to replace each frame, while preserving the results of the animation.


Example of reading, optimizing and writing a gif IMAGE:

<?php
//Crewate new img object
$im = new Imagick("test.gif");

//Optimize the img layers
$im->optimizeLayers();

//Write the img back
$im->writeImages("test_optimized.gif", true);
?>

orderedPosterizeImage:

Performs an ordered dither

bool orderedPosterizeImage ( string $threshold_map [, int $channel = Imagick::CHANNEL_ALL ] )

performs an ordered ditehr based on a number of pre-defined dithering th maps, but over multiple intensity
levels, which can be different for different channels, according to input args.

Example of usage:

<?php
function orderedPosterizeImage($imagePath, $orderedPosterizeType) {
	$imagick = new \Imagick(realpath($imagePath));

	$imagick->orderedPosterizeImage($orderedPosterizeType);
	$imagick->setImageFormat('png');

	header("Content-Type: image/png");
	echo $imagick->getImageBlob();
}

//orderedPosterizeImage($imagePath, 'o4x4, 3,3');
//orderedPosterizeImage($imagePath, 'o8x8,6,6');
orderedPosterizeImage($imagePath, 'h8x8a');

?>

paintFloodfillImage:

Changes the color value of any pixel that matches target

bool paintFloodfillImage ( mixed $fill, float $fuzz , mixed $bordercolor , int $x , int $y [, int $channel = Imagick::CHANNEL_ALL ] )

Changes the color of any pixel that matches target and is an immediate neighbour.

DEPRECATED, use floodfillPaintImage() instead

Example of using floodfillPaintImage():

<?php
$img = new Imagick('/tmp/test.png');
$img->floodfillPaintImage('green', 10, 'white', 100, 100, false);
$img->writeImage('/tmp/out.png');
$img->clear();
$img->destroy();
?>

paintOpaqueImage:

Change any pixel that matches color defined by fill.

bool paintOpaqueImage ( mixed $target , mixed $fill , float $fuzz [, int $channel = Imagick::CHANNEL_ALL ] )

paintTransparentImage:

Changes any pixel that matches color with the color defined by fill

bool paintTransparentImage (mixed $target, float $alpha, float $fuzz )

args:

target: Changes this taarget to specified opacity value within the image

alpha: level of transparency, 1.0 full opaque, 0.0 full trasparent

fuzz: How much tolerance before saying two colors are the same.

In order to apply the fuzz in a % range, use the following method:

class SaneImagick extends Imagick
{
	public function paintTransparentImage($target, $alpha, $fuzz)
	{
		$iQuantumDepth = pow(2, $this->getQuantumDepth()['quantumDepthLong']);
		return parent::paintTransparentImage($target, $alpha, $fuzz * $iQuantumDepth);
	}
}

pingImage:

Fetch basic attributes about the image

bool pingImage ( string $filename )

Can be used to query image width, height,size and format without reading the whole image into memory.

Example of usage:

<?php
	$image = new Imagick();
	$image->pingImage($file);
	$width = $image->getImageWidth();
	$height = $image->getImageHeight();
?>

pingImageBlob:

Quickly fetch attributes

bool pingImageBlob ( string $image )

This method can be used to query image width, height, size and format without reading the whole image to memory.

Example of usage:

<?php
//Read image contents
$image = file_get_contents("test.jpg");

//Create new img object
$im = new Imagick();

//pass the string to the imagick object
$im->pingImageBlob($image);

//Output img width and height
echo $im->getImageWidth() . 'x' . $im->getImageHeight();
?>

pingImageFile:

Get basic image attributes in a lightweight manner

bool pingImageFile ( resource $filehandle [, string $fileName ] )

This method can be used to query image width, height, size and format without reading the whole
image to memory.

An example of opening a remote location:

<?php
//fopen a remote location
$fp = fopen("http://example.com/test.jpg");

//Create new imagick object
$im = new Imagick();

//poass the handle to imagick
$im->pingImageFiles($fp);
?>

polaroidImage:

Simulates a polaroid picture

bool polaroidImage ( ImagickDraw $properties , float $angle )

Example of usage:

<?php
//Create the object
$image = new Imagick('source.png');

//Set the opacity
$image->polaroidImage(new ImagickDraw(), 25);

//Output the img
header('Content-type: image/png');
echo $image;

?>

posterizeImage:

Reduces the image to a limited number of color level

bool posterizeImage ( int $levels , bool $dither )

Example of usage:

<?php
function posterizeImage($imagePath, $posterizeType, $numberLevels) {
	$imagick = new \Imagick(realpath($imagePath));
	$imagick->posterizeImage($numberLevels, $posterizeType);
	$imagick->setImageFormat('png');
	header("Content-Type: image/png");
	echo $imagick->getImageBlob();
}

posterizeImage($imagePath, \Imagick::DITHERMETHOD_RIEMERSMA, 8);

?>

previewImages:

Quickly pin-point appropiate params for image processing

bool previewImages ( int $preview )

Tiles 9 thumbnails of the specified image with an image processing operation applied at varying strengths.
This is helpful to quickly pinpoint an appropiate param for an image processing operation

previousImage:

Move to the previous image in the object

bool previousImage()

Associates the previous img in an image list with the Imagick object.

profileImage:

Adds or removes a profile from an image

bool profileImage ( string $name, string $profile )

Adds or removes a ICC, IPTC, or generic profile from an image. If the profile is NULL, it is removed from the
image or otherwise added. Use a name of '*' and a profile of NULL to remove all profiles from the image.

If this method doesn othing, and inverted colors during a CMYK > RGB convers is a sign of this, check
that ImageMagick has the lcms delegate available.

From cmd prompt:

convert -list configure | grep DELEGATES

If you do not see lcms in the list then Imagick won't do any color profile conversions and won't
give any warnings about this. In that case, install the Little CMS lib and recompile ImageMagick.

If you need to convert images that are of the CMYK format into RGB and want to preserve colour
information, this may be helpful:

<?php
$image = new Imagick("CMYK_image.jpg"); //Loadi mg
$profiles = $image->getImageProfiles('*', false); //get profiles
$has_icc_profile = (array_search('icc', $profiles) !== false); //We're interested if ICC profiles exist

if ($has_icc_profile === false)
{
	//Image does not have a CMYK ICC profile, we add one
	$icc_cmyk = file_get_contents('/path/to/icc/SomeCMYKProfile.icc');
	$image->profileImage('icc', $icc_cmyk);
}

//Then wen eed to add RGB profile
$icc_rgb = file_get_contents('/path/to/icc/SomeRGBProfile.icc');
$image->profileImage('icc', $icc_rgb);

$image->setImageColorSpace(Imagick::COLORSPACE_RGB);

$image->writeImage("RGB_image.jpg");

?>

quantizeImage:

Analyzes the colors within a reference image

bool quantizeImage ( int $numberColors , int $colorspace , int $treedepth , bool $dither , bool $measureError )

Example of usage:

<?php
function quantizeImage($imagePath, $numberColors, $colorSpace, $treeDepth, $dither) {
	$imagick = new \Imagick(realpath($imagePath));
	$imagick->quantizeImage($numberColors, $colorSpace, $treeDepth, $dither, false);
	$imagick->setImageFormat('png');
	header("Content-Type: image/png");
	echo $imagick->getImageBlob();
}

?>

quantizeImages:

Analyzes teh colors within a sequence of images

bool quantizeImages ( int $numberColors , int $colorspace , int $treedepth , bool $dither , bool $measureError)

queryFontMetrics:

Returns an multi-dimensional array representing the font metrics

array queryFontMetrics ( ImagickDraw $properties , string $text [, bool $multiline ] )

Example of usage:

<?php
//Create a new imagick object
$im = new Imagick();

//Create an ImagickDraw object
$draw = new ImagickDraw();

//Set the font
$draw->setFont('/path/to/font.ttf');

//Dump the font metrics, autodetect multiline
var_dump($im->queryFontMetrics($draw, "Hello World!"));
?>

The possible params and their meanings, are as follows:

characterWidth and characterHeight:

These seem to be related to size you have specified for the font and do not seem to differ from font to font
(at the same size). These are not a reliable indicator of how much space a font will take.

ascender:

The ascender is part of the font that is above the baseline. It is not character related - the ascender value
is the same for every character in teh font.

descender:

The descender is part of the font that is below the baseline. it is represented as a negative figure.
Adding the absolute values of the ascender and the descender gives you the textHeight.

textHeight:

This is the total height available to the font. It is the same for every character in the font
irrespective of its case or how much space teh character seems to occupy. This can be used
to determined the line height when outputting paragraphs etc.

textWidth:

This value varies from character to character and is the width of the character. This is useful
if the boundingBox does not provide usable values (see Bounding box below). When positioning characters
one by one - don't use textWidth, use originX.

maxHorizontalAdvance:

The same for eveyr character in the font. Unkonwn usage.

boundingBox:

This returns an associative array describing the four points (x1, y1, x2, y2) of a rectangle that contain the
char. These values are relative to the origin (i.e the co-ords of where you are drawing the char within 
an image).

The returned rectangle is very accurate and encloses all parts of the printed character completely - but
the boundingBox only works on single chars. It will not give accurate figures for multiple chars.
When drawing a box you need to ADD "x" values to the origin and SUBTRACT "y" values from the origin.

You cannot rely on boundingBox for the space char, textWidth comes in handy here.

originX and originY:

These are inaccurately titled. The values returned in originX and originY are actually advanceX and advanceY.
These values give you the position of the next char relative to teh current one.

queryFonts:

Returns the configured fonts

array queryFonts ([ string $pattern = "*" ] )

Example of usage:

<?php
	
	$output = '';
	$output .= "Fonts that match 'Helvetica' are:<br/>";

	$fontList = \Imagick::queryFonts("Helvetica");

	foreach ($fontList as $fontName) {
		$output .= '<li>'. $fontName."</li>";
	}

	return $output;

?>

If we wish to create a graphical output of the configured/embedded fonts:

function outputFont( $fontName = 'Courier' ) {
	$image = new Imagick();
	$draw = new ImagickDraw();

	$draw->setGravity( Imagick::GRAVITY_CENTER );
	$draw->setFont( $fontName );
	$draw->setFontSize( 12 );
	$draw->setFillColor( 'black' );

	$image->newImage( 300, 20, new ImagickPixel( 'lightblue' ) );
	$image->annotateImage( $draw, 0, 0, 0, $fontName );
	$image->setImageFormat( 'png' );

	$src = 'data: ' . mime_content_type( $image ) . ';base64,' . base64_encode( $image );
	return '<img src="' . $src . '"> ' . $fontName . '<br>';
}

echo '<style>img{vertical-align: middle; margin-bottom: 1px;}</style>';
$fontList = \Imagick::queryFonts( '*' );
foreach ( $fontList as $fontName ) {
	echo outputFont( $fontName );
}

queryFormats:

Returns formats supported by Imagick

array queryFormats ([ string $pattern = "*" ] )

Returns an array containing the formats supported by imagick.

Example of usage:

<?php
	function render() {
		$output = "";
		$input = \Imagick::queryformats();
		$columns = 6;

		$output .= "<table border='2'>";

		for ($i=0; $i < count($input); $i += $columns) {
			$output .= "<tr>";
			for ($c=0; $c<$columns; $c++) {
				$output .= "<td>";
				if (($i + $c) < count($input)) {
					$output .= $input[$i + $c];
				}
				$output .= "</td>";
			}
			$output .= "</tr>";
		}

		$output .= "</table>";

		return $output;
	}
?>

radialBlurImage:

Radial blurs an image

bool radialBlurImage ( float $angle [, int $channel = Imagick::CHANNEL_ALL ] )

Example of usage:

<?php
function radialBlurImage($imagePath) {
	$imagick = new \Imagick(realpath($imagePath));
	//Blur 3 times with different radii
	$imagick->radialBlurImage(3);
	$imagick->radialBlurImage(5);
	$imagick->radialBlurImage(7);
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

raiseImage:

Creates a simulated 3d button-like effect

bool raiseImage ( int $width , int $height, int $x , int $y , bool $raise)

Creates a simulated 3d button-like effect by lightening and darkening the edges of teh image.
Members width and height of raise_info define the width of the vertical and horizontal edge
of the effect.

Example of usage:

<?php
function raiseImage($imagePath, $width, $height, $x, $y, $raise) {
	$imagick = new \Imagick(realpath($imagePath));

	//X and y do nothing?, wat
	$imagick->raiseImage($width, $height, $x, $y, $raise);
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

randomThresholdImage:

Creates a high-contrast, two-color image

bool randomThresholdImage ( float $low , float $high [, int $channel = Imagick::CHANNEL_ALL ] )

Changes the value of individual pixels based on the intensity of each pixel compared to TH.
The result is a high-contrast, two color image. 

Example of usage:

<?php
function randomThresholdimage($imagePath, $lowThreshold, $highThreshold, $channel) {
	$imagick = new \Imagick(realpath($imagePath));

	$imagick->randomThresholdimage(
		$lowThreshold * \Imagick::getQuantum(),
		$highThreshold * \Imagick::getQuantum(),
		$channel
	);
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

readImage:

Reads image from filename

bool readImage ( string $filename )

use the following to convert all pages of a PDF to jpg:

<?php
$imagick = new Imagick();
$imagick->readImage('myfile.pdf');
$imagick->writeImages('converted.jpg', false);
?>

If we need a better quality, we can try by adding $imagick->setResolution(150, 150); before reading the file.

If you experience transparency problems when converting PDF to JPEG (black BG), try flattening your file:

<?php
$imagick = new Imagick();
$imagick->readImage('myfile.pdf[0]');
$imagick = $imagick->flattenImages();
$imagick->writeFile('pageone.jpg');
?>

To read specific images, just specify the index:

<?php
$imagick = new Imagick();
$imagick->readImage('test.pdf[0]');
$imagick->writeImage('page_one.jpg');
?>

An example of generating an iamge of the first page of a PDF:

$filename = getSafeFileName($uploaddir,basename($_FILES['brochure_pdf']['name'], $overwrite));
$uploadfile = $uploaddir . $filename;
if (move_uploaded_file($_FILES['brochure_pdf']['tmp_name'], $uploadfile)) {
	$brochure_pdf = $filename;
	$im = new Imagick();
	$im->setResolution(80,80);
	$im->readimage($uploadfile."[0]");
	$im->setImageFormat('jpeg');
	$image_name = "save_as_name.jpg";
	$imageprops = $im->getImageGeometry();
	if ($imageprops['width'] <= 175 && $imageprops['height'] <= 300) {
		//Do not upscale
	} else {
		$im->resizeImage(175,300, imagick::FILTER_LANCZOS, 0.9, true);
	}

	$im->writeImage($uploaddir .$image_name);
	$im->clear();
	$im->destroy();
}

readImageBlob:

Reads image from a binary string

bool readImageBlob ( string $image [, string $filename ] )

Example of usage:

<?php
function readImageBlob() {
	$base64 = "<bla>";

	$imageBlob = base64_decode($base64);

	$imagick = new Imagick();
	$imagick->readImageBlob($imageBlob);

	header("Content-Type: image/png");
	echo $imagick;
}

?>

readImageFile:

Reads image from open filehandle

bool readImageFile ( resource $filehandle [, string $fileName = NULL ] )

An example of reading a image file from an URL using a handle returned by fopen():

<?php
$handle = fopen('http://example.com/foo.jpg', 'rb');
$img = new Imagick();
$img->readImageFile($handle);
$img->resizeImage(128,128,0,0);
$img->writeImage('images/foo.jpg');
?>

The second param will update getFilename() if set. Otherwise, getFilename() retains
its original value, prior to calling readImageFile().

readimages:

Imagick readImages ( string $filenames )

Reads images from an array of filenames. All the images are held in a single Imagick object.

Returns the Imagick object that contains all the images.

recolorImage:

Recolors image

bool recolorImage ( array $matrix )

Translate, scale, shear, or rotate image colors. This method supports variable sized matrices but normally
5x5 matrix is used for RGBA and 6x6 is used for CMYK. The last row should contain the normalized values.

Examples of usage:

<?php
function recolorImage($imagePath) {
	$imagick = new \Imagick(realpath($imagePath));
	$remapColor = [ 1, 0, 0,
		0, 0, 1,
		0, 1, 0,];

//$remapColor = [
// 	1.438, -0.122, -0.016, 0, 0, -0.03,
//  -0.062, 1.378, -0.016, 0, 0, 0.05,
//  -0.062, -0.122, 1.483, 0, 0, -0.02,
//];

	@$imagick->recolorImage($remapColor);

	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

Another example of usage:

<?php

$image = new Imagick('test.jpg');

$CMYK_color_model = array(0, 100, 0, 0);

$image->recolorImage($CMYK_color_model);

header('Content-type: image/jpg');

echo $image
?>

reduceNoiseImage:

Smooths the contours of an image

bool reduceNoiseImage ( float $radius )

Smooths the contours of an image while still preserving edge information. The algorithm works by replacing
each pixel with its neighbor closest in value. A neighbor is defined by radius. Use a radius of 0 and
Imagick::reduceNoiseImage() selects a suitable radius for you.

Example of usage:

<?php
function reduceNoiseImage($imagePath, $reduceNoise) {
	$imagick = new \Imagick(realpath($imagePath));
	@$imagick->reduceNoiseImage($reduceNoise);
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

remapImage:

Remaps image colors

bool remapImage ( Imagick $replacement, int $DITHER )

Replaces colors an image with those defined by replacement. The colors are replaced wth the closest
possible color. 

Args:

replacement: An Imagick obj with the colors for replacement

$DITHER: dither method constant

removeImage:

Removes an image from the image list

bool removeImage()

removeImageProfile:

Removes the named image profile and returns it

string removeImageProfile ( string $name )

render:

Renders all preceding drawing commands

bool render()

resampleImage:

Resample image to desired resolution

bool resampleImage ( float $x_resolution , float $y_resolution, int $filter, float $blur )

Example of usage:

<?php
function resampleImage($imagePath) {
	$imagick = new \Imagick(realpath($imagePath));

	$imagick->resampleImage(200, 200, \Imagick::FILTER_LANCZOS, 1);
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

Note that a blurring of 1, does nothing, effectively.

resetImagePage:

Reset image page

bool resetImagePage ( string $page )

The page definition as a string. The string is formatted as WxH+x+y.

You set the size of the page and position the top left corner (x,y) in it.

Example:

7168x5147+0+0

resizeImage:

Scales an image to the desired dimensions with a filter.

bool resizeImage ( int $columns , int $rows , int $filter , float $blur [, bool $bestfit = false ] )

Example of usage:

<?php
function resizeImage($imagePath, $width, $height, $filterType, $blur, $bestFit, $cropZoom) {
	//The blur factor where &gt 1 is blurry and &lt; 1 is sharp
	$imagick = new \Imagick(realpath($imagePath));

	$imagick->resizeImage($width, $height, $filterType, $blur, $bestFit);

	$cropWidth = $imagick->getImageWidth();
	$cropHeight = $imagick->getImageHeight();

	if ($cropZoom) {
		$newWidth = $cropWidth / 2;
		$newHeight = $cropHeight / 2;

		$imagick->cropimage(
			$newWidth,
			$newHeight,
			($cropWidth - $newWidth) / 2,
			($cropHeight - $newHeight) / 2
		);

		$imagick->scaleimage(
			$imagick->getImageWidth() * 4,
			$imagick->getImageHeight() * 4
		);
	}

	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

The speed of the filter transformations made in terms of resizing, are as follows:

			  Seconds

FILTER_POINT: 0.3345329761151 

FILTER_BOX: 0.777871131897 

FILTTER_TRIANGLE: 1.3695909977

FILTER_HERMITE: 1.35866093636

FILTER_HANNING: 4.88722896576

FILTER_BLACKMAN: 4.89026689529

FILTER_GAUSSIAN: 1.93553304672

FILTER_QUADRATIC: 1.93322920799

FILTER_CUBIC: 2.58396601677

FILTER_CATROM: 2.58508896828

FILTER_MITCHELL: 2.58368492126

FILTER_LANCZOS: 3.74232912064

FILTER_BESSEL: 4.03305602074

FILTER_SINC: 4.90098690987

in terms of resizing pictures, use scaleImage instead of resizeImage, since perforamnce is a lot better.

Note that some algorithms cause artifacts on lower blur values (smaller than 0.25), to avoid this, and if you
are FORCED to use some algorithms, use 0.5 instead.

Examples of creating thumbnails:

<?php

$thumb = new Imagick();
$thumb->readImage('myimage.gif'); $thumb->resizeImage(320,240, Imagick::FILTER_LANCZOS,1);
$thumb->writeImage('mythumb.gif');
$thumb->clear();
$thumb->destroy();

?>

<?php

$thumb = new Imagick('myimage.gif');
$thumb->resizeImage(320,240,Imagick::FILTER_LANCZOS,1);
$thumb->writeImage('mythumb.gif');

$thumb->destroy();

?>

A script that tries different blur values:

<?php
	$imgPath = 'imgtest/test.jpg'; //set your image file
	$testBlurs = [0, 0.1, 0.2, 0.5]; //test these blur values

	$im = new IMagick();
	$im->readImage($imgPath);

	foreach ((new ReflectionClass('IMagick'))->getConstants() as $n => $f) {
		if (strncmp($n, 'FILTER_', 7) === 0) { //Get available IMagick filters
			$filterName == strtolower(substr($n, 7)); //Extract filter name from constant
			foreach ($testBlurs as $blur) {
				$imSize = clone $im;
				$imSize->resizeImage(500, 500, $f, $blur, true);
				$imSize->writeImage(sprintf("%s-%s-%.1f.jpg", $imgPath, $filterName, $blur));
				$imSize->destroy();
			}
		}
	}
?>

rollImage:

Offfsets an image defined by x and y

bool rollImage( int $x, int $y )

Example of usage:

<?php
function rollImage($imagePath, $rollX, $rollY) {
	$imagick = new \Imagick(realpath($imagePath));
	$imagick->rollimage($rollX, $rollY);
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

rotateImage:

Rotates an image the specified number of degrees. Empty triangles left over from rotating the image are filled with the BG color.

bool rotateImage ( mixed $background , float $degrees )


Example of usage:

<?php
function rotateImage($imagePath, $angle, $color) {
	$imagick = new \Imagick(realpath($imagePath));
	$imagick->rotateimage($color, $angle);
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

To leave transparency behind in leftover tirangles:

<?php $im->rotateImage(new ImagickPixel('#00000000'), 75); ?>

The degrees for imagick and GD is different.

An example of a function that calculates this differential:

<?php
function calculateCounterClockwise($value)
{
	if ($value == 0 || $value == 180) {
		return $value;
	}
	if ($value < 0 || $value > 360) {
		$value = 90;
	}

	$total_degree = 360;
	$output = intval($total_degree-$value);
	return $output;
} 

echo '1 = '.calculateCounterClockwise(1).'<br>';
echo '90 = '.calculateCounterClockwise(90).'<br>';
echo '270 = '.calculateCounterClockwise(270).'<br>';
echo '359 = '.calculateCounterClockwise(359).'<br>';
echo '360 = '.calculateCounterClockwise(360).'<br>';
?>

In erms of cropping, we have to update the picture before we crop it, lest the remember co-ords are not right in accordance
with the new img:

<?php
$Image = new Imagick($sourceImagePath);

$transparent = '#00000000';
$Image->rotateImage(new \ImagickPixel(), 45); //This makes resulting image bigger

//Set page to be of full size of new image, starting at top left corner 
$Image->setImagePage($Image->getImageWidth(), $Image->getImageHeight(), 0, 0);

$Image->cropImage($crop_w, $crop_h, $crop_x, $crop_y);
?>

rotationalBlurImage:

void rotationalBlurImage ( string $angle [, string $CHANNEL = Imagick::CHANNEL_DEFAULT ] )

Rotationally blurs an image

Example of usage:

<?php
function rotationalBlurImage($imagePath) {
	$imagick = new \Imagick(realpath($imagePath));
	$imagick->rotationalBlurImage(3);
	$imagick->rotationalBlurImage(5);
	$imagick->rotationalBlurImage(7);
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

roundCorners:

Rounds image corners. The first two params control the amount of rounding and the three last params can be used to fine-tune
the rounding process.

bool roundCorners ( float $x_rounding , float $y_rounding [, float $stroke_width = 10 [, float $displace = 5 [, float $size_correction = -6 ]]] )


Example of usage:

<?php

$image = new Imagick();
$image->newPseudoImage(100, 100, "magick:rose");
$image->setImageFormat("png");

$image->roundCorners(5, 3);
$image->writeImage("rounded.png");
?>

sampleImage:

Scales an image with pixel sampling

bool sampleImage ( int $columns , int $rows )

SCales an image to the desired dimensions with pixel sampling. Unlike other scaling methods,
this method does not introduce any additional color into the scaled image.

scaleImage:

Scales the size of an image

bool scaleImage ( int $cols , int $rows [, bool $bestfit = false ] )

Scales the size of an given image to the given dimensions. The other parameter will be calculated if 0 is passed
as either param.

Example of usage:

<?php
function scaleImage($imagePath) {
	$imagick = new \Imagick(realpath($imagePath));
	$imagick->scaleImage(150, 150, true);
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

When we provide height or width to be 0, but specify the other, it automatically calculates respective attribute to keep
aspect ratio.

When using the fit argument, the image will only ever scale down. Not up.

This method may blur your edges in possibly unexpected ways. For better control, use resizeImage, instead.

An example of resizing an animated gif:

$picture = new Imagick('animated_gif.gif');

foreach($picture as $frame){
	$frame->scaleImage($width, $height);
}

Also, an example of a function that converts into 800x600 areas with 72ppi:

<?php
	$img = new Imagick($img_loc.$file);
	$img->setImageResolution(72,72);
	$img->resampleImage(72,72,imagick::FILTER_UNDEFINED,1);
	$img->scaleImage(800,0);
	$d = $img->getImageGeometry();
	$h = $d['height'];
	if($h > 600) {
		$img->scaleImage(0,600);
		$img->writeImage($resized_loc.$file);
	} else {
		$img->writeImage($resized_loc.$file);
	}
	$img->destroy();
?>

segmentImage:

Segments an image

bool segmentImage ( int $COLORSPACE , float $cluster_threshold , float $smooth_threshold [, bool $verbose = false ] )

Analyses the image and identifies units that are similar.

Example of usage:

<?php
function segmentImage($imagePath, $colorSpace, $clusterThreshold, $smoothThreshold) {
	$imagick = new \Imagick(realpath($imagePath));
	$imagick->segmentImage($colorSpace, $clusterThreshold, $smoothThreshold);
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

segmentImage($imagePath, \Imagick::COLORSPACE_RGB, 5, 5);

?>

selectiveBlurImage:

void selectiveBlurImage ( float $radius , float $sigma , float $threshold , int $channel )

Selectively blurs an image within a contrast TH. It is similar to the unsharpen mask that sharpens
everything with contrast above a certain TH.

Example of usage:

<?php
function selectiveBlurImage($imagePath, $radius, $sigma, $threshold, $channel) {
	$imagick = new \Imagick(realpath($imagePath));
	$imagick->selectiveBlurImage($radius, $sigma, $threshold, $channel);
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

separateImageChannel:

Separates a channel from the image and returns a grayscale image. A channel is a particular
color component of each pixel in the image.

bool separateImageChannel ( int $channel )


Example of usage:

<?php
function separateImageChannel($imagePath, $channel) {
	$imagick = new \Imagick(realpath($imagePath));
	$imagick->separateimagechannel($channel);
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

separateImageChannel($imagePath, \Imagick::CHANNEL_GREEN);

?>

sepiaToneImage:

Sepia tones an image

bool sepiaToneImage ( float $threshold )

Applies a special effect to the image, similar to the effect achieved in a photo darkroom by
sepia toning. TH ranges from 0 to QuantumRange and is a measure of the extent of the sepia toning.

A TH of 80 is a good starting point for a reasonable tone.

Example of usage:

<?php
function sepiaToneImage($imagePath, $sepia) {
	$imagick = new \Imagick(realpath($imagePath));
	$imagick->sepiaToneImage($sepia);
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

setBackgroundColor:

Sets the object's default background color

bool setBackgroundColor ( mixed $background )

Be cautious and set bgcolor BEFORE importing a SVG with transparency:

<?php

$im = new Imagick();
$im->setBackgroundColor(new ImagickPixel('transparent'));

$im->readImage('carte_Alain2.svg');

$im->setImageFormat("png32");

header('Content-type: image/png');
echo $im;
?>

setColorSpace:

bool setColorspace( int $COLORSPACE )

Sets the global colorspace value for the object. 

This function does not work,m use modulateImage instead for converting to gray scale:

<?php

$image = new Imagick("input.jpg");

$image->modulateImage(100, 0, 100);

$image->writeImage("output.jpg");

$image->clear();

?>

setCompression:


Sets the objects default compression type

bool setCompression ( int $compression )

setCompressionQuality:

Sets the object's default compression quality

bool setCompressionQuality ( int $quality )

This only works for new images those created through Imagick::newPseudoImage.
For existing ones, use setImageCompressionQuality()

Example of usage:

<?php
function setCompressionQuality($imagePath, $quality) {
	$backgroundImagick = new \Imagick(realpath($imagePath));
	$imagick = new \Imagick();
	$imagick->setCompressionQuality($quality);
	$imagick->newPseudoImage(
		$backgroundImagick->getImageWidth(),
		$backgroundImagick->getImageHeight(),
		'canvas:white'
	);

	$imagick->compositeImage(
		$backgroundImagick,
		\Imagick::COMPOSITE_ATOP,
		0,
		0
	);

	$imagick->setFormat("jpg");
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

If it does not work, use the following instead:

<?php
$img->setImageCompression(Imagick::COMPRESSION_JPEG);
$img->setImageCompressionQuality(80);
?>

setFileName:

Sets the filename before you read or write an image file

bool setFilename ( string $filename )

setFirstIterator:

Sets the imagick iterator to the first image

bool setFirstIterator()

setFont:

Sets font

bool setFont ( string $font )

Sets object's from property. This method can be used for example to set font for caption: pseudo-format.
The font needs to be configured in ImageMagick configuration or a file by name of font must exist.


Should not be confused with ImagickDraw::setFont()

Example of usage:

<?php
//Create new imagick object
$im = new Imagick();

//Sets the font for the object
$im->setFont("example.ttf");

//Create new caption
$im->newPseudoImage(100, 100, "caption:Hello");

//Do something with the image
?>

setFormat:

Sets the format of the imagick object

bool setFormat ( string $format )

We can only set format listed in $imgic->queryFormats()

setGravity:

Sets the gravity

bool setGravity ( int $gravity )

Sets the global gravity property for the Imagick object. 

setImage:

Replaces the current image sequence with the image from the replace object

bool setImage ( Imagick $replace )

Example of usage:

<?php
//Create the objects
$image = new Imagick('source.jpg');
$replace = new Imagick('replace.jpg');

//Source.jpg is replaced with replace.jpg
$image->setImage($replace);

//output the image
header("Content-Type: image/jpeg");
echo $image;

?>

setImageAlphaChannel:

Sets image alpha channel

bool setImageAlphaChannel ( int $mode )

Activate or deactivate image alpha channel. The mode is one of the Imagick::ALPHACHANNEL_* constants.

setImageArtifact:

Set image artifact

bool setImageArtifact ( string $artifact, string $value )

Associates an artifact with the image. The difference between image properties and image artifacts
is that properties are public and artifacts are private.

Example of usage:

<?php
function setImageArtifact() {
	
	$src1 = new \Imagick(realpath("./images/artifact/source1.png"));
	$src2 = new \Imagick(realpath("./images/artifact/source2.png"));

	$src2->setImageVirtualPixelMethod(\Imagick::VIRTUALPIXELMETHOD_TRANSPARENT);
	$src2->setImageArtifact('compose:args', "1,0,-0.5,0.5");
	$src1->compositeImage($src2, Imagick::COMPOSITE_MATHEMATICS, 0, 0);

	$src1->setImageFormat('png');
	header("Content-Type: image/png");
	echo $src1->getImagesBlob();
}

?>

setImageAttribute:

void setImageAttribute ( string $key , string $value )

setImageBackgroundColor:

Sets the image background color

bool setImageBackgroundColor ( mixed $background )

setImageBias:

Sets the image bias for any method that convolves an image

bool setImageBias ( float $bias )

Example of usage:

<?php
//Requries ImageMagick version 6.9.0-1 to ahve an effect on convolveImage
function setImageBias($bias) {
	$imagick = new \Imagick(realpath("images/stack.jpg"));

	$xKernel = array(
		-0.70, 0, 0.70,
		-0.70, 0, 0.70,
		-0.70, 0, 0.70
	);

	$imagick->setImageBias($bias * \Imagick::getQuantum());
	$imagick->convolveImage($xKernel, \Imagick::CHANNEL_ALL);

	$imagick->setImageFormat('png');

	header('Content-Type: image/png');

	echo $imagick->getImageBlob();
}

?>

setImageBiasQuantum:

void setImageBiasQuantum ( string $bias )

setImageBluePrimary:

Sets the image chromaticity blue primary point

bool setImageBluePrimary ( float $x , float $y )

setImageBorderColor:

Sets the image border color

bool setImageBorderColor ( mixed $border )

setImageChannelDepth:

Sets the depth of a particular iamge channel

bool setImageChannelDepth ( int $channel , int $depth )

setImageClipMask:

Sets image clip mask

bool setImageClipMask ( Imagick $clip_mask )

Sets image clip mask from another Imagick object. 

Example of usage:

<?php
function setImageClipMask($imagePath) {
	$imagick = new \Imagick();
	$imagick->readImage(realpath($imagePath));

	$width = $imagick->getImageWidth();
	$height = $imagick->getImageHeight();

	$clipMask = new \Imagick();
	$clipMask->newPseudoImage(
		$width,
		$height,
		"canvas:transparent"
	);

	$draw = new \ImagickDraw();
	$draw->setFillColor('white');
	$draw->circle(
		$width / 2,
		$height / 2,
		($width / 2) + ($width / 4),
		$height / 2
	);

	$clipMask->drawImage($draw);
	$imagick->setImageClipMask($clipMask);

	$imagick->negateImage(false);
	$imagick->setFormat("png");

	header("Content-Type: image/png");
	echo $imagick->getImagesBlob();
}

?>

setImageColormapColor:

Sets the color of the specified colormap index

bool setImageColormapColor ( int $index , ImagickPixel $color )

setImageColorspace:

Sets the image colorspace. This should be used when creating new images. To change the colorspace of an
existing image, you should use Imagick::transformImageColorspace().

bool setImageColorspace ( int $colorspace )


Example of converting from CMYK to RGB:

<?php
if ($jpeg->getImageColorspace() == \Imagick::COLORSPACE_CMYK) {
	$jpeg->transformimagecolorspace(\Imagick::COLORSPACE_SRGB);
}

?>

Another example of a workaround:

<?php
if($img->getImageColorspace() == Imagick::COLORSPACE_CMYK) {
	$profiles = $img->getImageProfiles('*', false);

	//We're only interested if ICC profiles exist
	$has_icc_profile = (array_search('icc', $profiles) !== false);
	//If it does not have a CMYK icc profile, we add one
	if ($has_icc_profile === false) {
		$icc_cmyk = file_get_contents(dirname(__FILE__).'/USWebUncoated.icc');
		$img->profileImage('icc', $icc_cmyk);
		unset($icc_cmyk);
	}

	//Then we add an RGB profile
	$icc_rgb = file_get_contents(dirname(__FILE__).'/sRGB_v4_ICC_preference.icc');
	$img->profileImage('icc', $icc_rgb);
	unset($icc_rgb);
}

$img->stripimage(); //Drops down size of image by removing all profiles
?>

The colorspaces of the int $colorspace arg, are as follows:

0 - UndefinedColorspace

1 - RGBColorspace

2 - GRAYColorspace

3 - TransparentColorspace

4 - OHTAColorspace

5 - LABColorspace

6 - XYZColorspace

7 - YCbCrColorspace

8 - YCCColorspace

9 - YIQColorspace

10 - YPbPrColorspace

11 - YUVColorspace

12 - CMYKColorspace

13 - sRGBColorspace

14 - HSBColorspace

15 - HSLColorspace

16 - HWBColorspace

setImageCompose:

Sets the image composite operator

bool setImageCompose ( int $compose )

Sets the image composite operator, useful for specifying how to composite the image thumbnail when using
the Imagick::montageImage() method.

setImageCompression:

Sets the image compression to be used upon compression

bool setImageCompression ( int $compression )

Example of usage:

<?php
	$image = 'jpeg_image.jpg';
	$compression_type = Imagick::COMPRESSION_JPEG;

	$im = new Imagick($image);
	$im->setImageCompression($compression_type);
?>

To compress the image, use setImageCompressionQuality()

setImageCompressionQuality:

Sets the image compression quality

bool setImageCompressionQuality ( int $quality )

Example of usage:

<?php
function setImageCompressionQuality($imagePath, $quality) {
	$imagick = new \Imagick(realpath($imagePath));
	$imagick->setImageCompressionQuality($quality);
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

To save space, use stripImage() on the image, also set image depth ot 8.

setImageDelay:

Sets the image delay

bool setImageDelay ( int $delay )

For an animated image this is the amount of time that this frame of the image should
be displayed for, before displaying the next frame.

The delay can be set individually for each frame in a image.

Example of usage:

<?php

//Modify an animated GIF so that it's frames are played at a variable speed,
//varying between being shown from 50ms down to 0ms, which will cause the frame
// to be skipped in most browsers.
$imagick = new Imagick(realpath("Test.gif"));
$imagick = $imagick->coalesceImages();

$frameCount = 0;

foreach ($imagick as $frame) {
	$imagick->setImageDelay((($frameCount % 11) * 5));
	$frameCount++;
}

$imagick = $imagick->deconstructImages();

$imagick->writeImages("/path/to/save/output.gif", true);

?>

setImageDepth:

sets the image depth

bool setImageDepth ( int $depth )

Depth is a number of bits. Float is accepted.

Use it to specify the depth of raw images whose depth is unknown such as GRAY, RGB or CMYK, or to change
the depth of any image after it has been read.

setImageDispose:

Sets the image disposal method

bool setImageDispose ( int $dispose )

The layer disposal method defines the way each the displayed image is to be modified after the current
'frame' of an animation has finished being displayed (after its 'delayed' period), but before the next
frame of an animation is to be overlaid onto the display.

Values of $dipose:

Undefined: 0 -> No disposal specified (same as 'none')

None: 1 -> Do not dispose, just overlay the next frame image

Background: 2 -> Clear the frame area with the BG color

Previous: 3 -> Clear to the image prior to this frames overlay

setImageExtent:

Sets image size

bool setImageExtent ( int $columns, int $rows )

setImageFilename:

Sets the filename of a particular image in a sequence

bool setImageFilename ( string $filename )

setImageFormat:

Sets the format of a particular image

bool setImageFormat ( string $format )

Example of usage:

<?php
$im = new Imagick("image.jpg");

//Change format to png
$im->setImageFormat( "png" );

//Output the image to browser as a png
header( "Content-Type: image/png" );
echo $im;

//Or you could output the image to a file
//$im->writeImage( "image.png" );
?>

THis method only affects individual loaded/Consturcted images.

To set the format of the entire object, use the Imagick::setFormat method, e.g load TIFF files,
then use setFormat('pdf') on the Imagick object, then writeImagesFile('foo.pdf') or getImagesBlob()

If we use writeFile or writeFiles without setting the format, it is automatically set according
to the file extension used  within the parameter of writeFile.

If the image was loaded at object construction time, we use setXXX, if we loaded it after the
fact such as via readImageBlob, then we use setImageXXX

Example of usage:

<?php
	$image = new Imagick();
	$image->setResolution(300, 300);
	$image->readImageBlob(...);

	//Convert the output to JPEG
	$image->setImageFormat('jpeg');
	$image->setImageCompressionQuality(90);
?>

An example of a sitaution where, when using setImageFormat('jpeg') on pdf causes color image
invertion. This can be resolved by image color spacing:

<?php
//read page 1
$im = new Imagick( 'test.pdf[0]' );

//Conver to jpg
$im->setImageColorspace(255);
$im->setCompression(Imagick::COMPRESSION_JPEG);
$im->setCompressionQuality(60);
$im->setImageFormat('jpeg');

//Resize
$im->resizeImage(290, 375, imagick::FILTER_LANCZOS, 1);

//write image on server
$im->writeImage('thumb.jpg');
$im->clear();
$im->destroy();
?>

The quality of jpeg images is defined by setCompressionQuality()

setImageGamma:

Sets the image gamma

bool setImageGamma ( float $gamma )

setImageGravity:

Sets the image gravity

bool setImageGravity ( int $gravity )

Sets the gravity prop for the current image. This method can be used to set the grav prop 
for a single image sequence.

setImageGreenPrimary:

Sets the image chromaticity green primary point

bool setImageGreenPrimary ( float $x , float $y )

setImageIndex:

Sets the iterator position

bool setImageIndex ( int $index )

Set the iterator to the position in the image list specified with the index param

DEPRECATED, use setIteratorIndex();

setImageInterlaceScheme:

Sets the image compression

bool setImageInterlaceScheme ( int $interlace_scheme )

setImageInterpolateMethod:

Sets the image interpolate pixel method

bool setImageInterpolateMethod ( int $method )

setImageIterations:

Sets the image iterations

bool setImageIterations ( int $iterations )

Sets the number of iterations an animated image is repeated.

Example of usage:

<?php

$imagick = new Imagick(realpath("Test.gif"));

$imagick = $imagick->coalesceImages();
$imagick->setImageIterations(1);
$imagick = $imagick->deconstructImages();

$imagick->writeImages('/path/to/save/OnceOnly.gif', true);

?>

setImageMatte:

Sets the iamge matte channel

bool setImageMatte ( bool $matte )

This method is needed when creating a font / image mask, and needs to be set to false otherwise
the mask won't take effect.

An example:

<?php

//Create objects
$image = new Imagick('myImage.png');
$watermark = new Imagick();
$mask = new Imagick();
$draw = new ImagickDraw();

//Define dimensions
$width = $image->getImageWidth();
$height = $image->getImageHeight();

//Create some palettes
$watermark->newImage($width, $height, new ImagickPixel('grey30'));
$mask->newImage($width, $height, new ImagickPixel('black'));

//Watermark text
$text = 'Copyright';

//Set font props
$draw->setFont('Bookman-Demi');
$draw->setFontSize(20);
$draw->setFillColor('grey70');

//Position text
$draw->setGravity(Imagick::GRAVITY_SOUTHEAST);

//Draw text on the watermark palette
$watermark->annotateImage($draw, 10, 12, 0, $text);

//Draw text on the mask palette
$draw->setFillColor('white');
$mask->annotateImage($draw, 11, 13, 0, $text);
$mask->annotateImage($draw, 10, 12, 0, $text);
$draw->setFillColor('black');
$mask->annotateImage($draw, 9, 11, 0, $text);

//This is needed for the mask to work
$mask->setImageMatte(false);

//Apply mask to watermark
$watermark->compositeImage($mask, Imagick::COMPOSITE_COPYOPACITY, 0, 0);

//Overlay watermark on img
$image->compositeImage($watermark, Imagick::COMPOSITE_DISSOLVE, 0, 0);

//Set output image format
$image->setImageFormat('png');

//output new img
header('Content-Type: image/png');
echo $image;

?>

setImageMatteColor:

Sets the image matte color

bool setImageMatteColor ( mixed $matte )

setImageOpacity:

Sets the image opacity level

bool setImageOpacity ( float $opacity )

Sets the image to the specified opacity level. This method works on all channels, meaning that for examåple
opacity 0.5 will set all transparent areas to partially opaque.

To add transparency to areas that are not already transparent use Imagick::evaluateImage()

1.0 is fully opaque, 0.0 is fully transparent

Example of usage:

<?php
	//Create the object
	$image = new Imagick('source.png');

	//Set the opacity
	$image->setImageOpacity(0.7);

	//OUtput the image
	header('Content-Type: image/png');
	echo $image;
?>

setImageOrientation:

Sets the EXIF rotation, embedded info about the rotation. Note that many webbrowsers and image processing
things ignore this info, and is not actual rotation of the image. It is rather meta-data to refer to
preferential of auto-rotation, if regarded.

bool setImageOrientation ( int $orientation )

Example of usage:

<?php
//Does not appear to do anything
function setImageOrientation($imagePath, $orientationType) {
	$imagick = new \Imagick(realpath($imagePath));
	$imagick->setImageOrientation($orientationType);
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

This function is best used for correct EXIF rotation info before saving an iamge.

then saving the rotation:

$image->setImageOrientation(imagick::ORIENTATION_TOPLEFT);

setImagePage:

Sets the page geometry of the image

bool setImagePage ( int $width , int $height , int $x , int $y )

An example of what consistutes as +repage in ImageMagick:

<?php
	$ImagickObj = new Imagick($sourceImagePath);
	$ImagickObj->cropImage($_POST['w'], $_POST['h'], $_POST['x'], $_POST['y']);
	$ImagickObj->setImagePage($_POST['w'], $_POST['h'], 0, 0);
	$ImagickObj->writeImage($cropFilePath);
?>

setImageProfile:

Adds a named profile to the Imagick object

bool setImageProfile ( string $name , string $profile )

adds a named profile to the Imagick object. If a profile with the same
already exists, it is replaced. This differs from the ProfileImage() method in that
it does not apply any CMS Color profiles.

setImageProperty:

Sets an image property

bool setImageProperty ( string $name , string $value )

Sets a named property to the image. 

Example of usage:

<?php
$image = new Imagick();
$image->newImage(300, 200, "black");

$image->setImageProperty('Exif:Make', 'Imagick');
echo $image->getImageProperty('Exif:Make');
?>

setImageRedPrimary:

Sets the image chromaticity red primary point

bool setImageRedPrimary ( float $x, float $y )

setImageRenderingIntent:

Sets the image rendering intent

bool setImageRenderingIntent ( int $rendering_intent )

setImageResolution:

sets the image resolution

bool setImageResolution ( float $x_resolution , float $y_resolution )

Example of usage:

<?php
function setImageResolution($imagePath) {
	$imagick = new \Imagick(realpath($imagePath));
	$imagick->setImageResolution(50, 50);

	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

ANy changes to resolution must be made before specifying the file,so construct the image with no file path,
then use $object->readImage('path/to/file');

setImageScene:

Sets the image scene

bool setImageScene ( int $scene )

setImageTicksPerSecond:

Sets the image ticks per-second

bool setImageTicksPerSecond( int $ticks_per_second )

Adjuts the amount of time that a frame of an animated image is displayed for.

For animated gifs, this function doesn ot change the number of image-ticks per second,
which always is defiend as 100. Instead it adjusts the amount of time that the frame is 
displayed for to simulate the change in 'ticks per second'.

For example, for an animated GIF where each frame is displayed for 20 ticks (1/5 of a second)
when this method is called on each frame of that image with an arg of 50 the frames are adjusted
to be displayed for 40 ticks, (2/5 of a second), and the animation will play at half original speed.

Example of usage:

<?php
//modify an animated GIF so that the first half of the gif is played at half the
// speed it currently is, and the second half to be played at double the speed
// it currently is

$imagick = new Imagick(realpath("Test.gif"));
$imagick = $imagick->coalesceImages();

$totalFrames = $imagick->getNumberImages();

$frameCount = 0;

foreach ($imagick as $frame) {
	$imagick->setImageTicksPerSecond(50);

	if ($frameCount < ($totalFrames / 2)) {
		//Modify the frame to be displayed for twice as long as it currently is
		$imagick->setImageTicksPerSecond(50);
	} else {
		//Modify the frame to be displayed for half as long as it currentlyi s
		$imagick->setImageTicksPerSecond(200);
	}

	$frameCount++;
}

$imagick = $imagick->deconstructImages();

$imagick->writeImages("/path/to/save/output.gif", true);

?>

setImageType:

Sets the iamge type

bool setImageType( int $image_type )

This function can be used to desaturate an image, i.e to convert a coloured image into a greyscale:

<?php

$im = new Imagick ("image.jpg");
$im->setImageType (2);
//Is now in 256 shades of gray

?>

The image type constant follows the constants or image type constants

setImageUnits:

Sets the image units of resolution

bool setImageUnits ( int $units )

We should use the PHP Imagick Constants to correctly set the Image UNits, as follows:

RESOLUTION CONSTANTS:

imagick::RESOLUTION_UNDEFINED (integer)

imagick::RESOLUTION_PIXELSPERINCH (integer)

imagick::RESOLUTION_PIXELSPERCENTIMETER (integer)

setImageVirtualPixelMethod:

Sets the image virtual pixel method

bool setImageVirtualPixelMethod ( int $method )

setImageWhitePoint:

Sets the image chromaticity white point

bool setImageWhitePoint ( float $x , float $y )

setInterlaceScheme:

Sets the image compression

bool setInterlaceScheme ( int $interlace_scheme )

An example of saving a progressive jpeg:

<?php

$image = new Imagick('image.jpg');
$image->thumbnailImage(500, 0);

$image->setInterlaceScheme(Imagick::INTERLACE_PLANE);

$image->writeImage('progressive.jpg');

?>

setIteratorIndex:

Set the iterator position

bool setIteratorIndex ( int $index )

Set the iterator to the position in the image list with the specified index param.

Upon failure, throws an exception. (expected)

Example of usage:

<?php
$im = new Imagick();
$im->newImage(100, 100, new ImagickPixel("red"));
$im->newImage(100 ,100, new ImagickPixel("green"));
$im->newImage(100, 100, new ImagickPixel("blue"));

$im->setIteratorIndex(1);
echo $im->getIteratorIndex();
?>

setLastIterator:

Sets the Imagick Iterator to the last image

bool setLastIterator()

setOption:

Set an option

bool setOption ( string $key , string $value )

Associates one or more options with the wand

Example of Attempt to reach '$extent' sizeImagick::setOption():

<?php
	function renderJPG($extent) {
		$imagePath = $this->control->getImagePath();
		$imagick = new \Imagick(realpath($imagePath));
		$imagick->setImageFormat('jpg');
		$imagick->setOption('jpeg:extent', $extent);
		header("Content-Type: image/jpg");
		echo $imagick->getImageBlob();
	}
?>

Example of setOption:

<?php
	function renderPNG($imagePath, $format) {
		$imagick = new \Imagick(realpath($imagePath));
		$imagick->setImageFormat('png');
		$imagick->setOption('png:format', $format);
		header("Content-Type: image/png");
		echo $imagick->getImageBlob();
	}

	//save as 64bit PNG
	renderPNG($imagePath, 'png64');
?>

<?php
	function renderCustomBitDepthPNG() {
		$imagePath = $this->control->getImagePath();
		$imagick = new \Imagick(realpath($imagePath));
		$imagick->setImageFormat('png');

		$imagick->setOption('png:bit-depth', '16');
		$imagick->setOption('png:color-type', 6);
		header("Content-Type: image/png");
		$crash = true;
		if ($crash) {
			echo $imagick->getImageBlob();
		}
		else {
			$tempFilename = tempnam('./', 'imagick');
			$imagick->writeimage(realpath($tempFilename));
			echo file_get_contents($tempFilename);
		}
	}

?>

If we wish to extract a preview from a PDF file using the CropBox instead of whole document, setOption()
is the right method:

<?php
$handler = new Imagick();
$handler->setOption('pdf:use-cropbox', 'true');
$handler->readImage($imageFileName);
$handler->thumbnailImage(200, 200, true);
$handler->setImageFormat('jpeg');
$handler->writeImage($destThumbFileName);
?>

it is the equivilant of -define pdf:use-cropbox=true for the convert cmd line tool. 
pdf:use-trimbox is also available

Might need to call these before the readImage.

setPage:

Sets the page geometry of the imagick object

bool setPage ( int $width , int $height , int $x , int $y )

setPointSize:

Sets point size

bool setPointSize ( float $point_size )

Sets object's point size property. This method can be used for example to set font size for caption:
pseudo-format.

Example of usage:

<?php
//Create new imagick object
$im = new Imagick();

//Set the font of the object
$im->setFont("example.ttf");

//Set the point size
$im->setPointSize(12);

//Create new caption
$im->newPseudoImage(100,100, "caption:Hello");

//Do something with the img
?>

setProgressMonitor:

void setProgressMonitor ( callable $callback )

Sets a callback that will be called during the processing of the Imagick image

The params:

callback: The progress function to call. It should return ture if image processing should continue, false if it should be cancelled.
The offset param indicates the progress and the span param indicates the total amount of work needed to be done.

bool callback ( mixed $offset, mixed $span )

The values passed to the callback function are not consistent. In particular, the span param
can increase during image processing. Because of this calculating the precentage compelte of an img opr
is not tirvial.

An example of usage:

<?php
	
	$abortReason = null;

	try {
		$imagick = new \Imagick(realpath($this->control->getImagePath()));
		$startTime = time();

		$callback = function ($offset, $span) use ($startTime, &$abortReason) {
			if (((100 * $offset) / $span) > 20) {
				$abortReason = "Processing reached 20%";
				return false;
			}

			$nowTime = time();

			if ($nowTime - $startTime > 5) {
				$abortReason = "Image processing took more than 5 seconds!";
				return false;
			}
			if (($offset % 5) == 0) {
				echo "Progress: $offset / $span <br/>";
			}
			return;
		};

		$imagick->setProgressMonitor($callback);

		$imagick->waveImage(2, 15);

		echo "Data len is: ".strlen($imagick->getImageBlob());

	}
	catch(\ImagickException $e) {
		if ($abortReason != null) {
			echo "Image processing was aborted: ".$abortReason."<br/>";
		}
		else {
			echo "ImagickException caught: ".$e->getMessage()." Exception type is ".get_class($e);
		}
	}
?>

setRegistry:

void setRegistry ( string $key, string $value )

Sets the ImageMagick registry entry named key to value. This is most useful for setting "temporary-path" which controls where
ImageMagick creates temporary images e.g. while processing PDFs.

setResolution:

Sets the image resolution

bool setResolution ( float $x_resolution, float $y_resolution )

This method uses the "convert -density {$x_resolution}x{$y_resolution}" param. However, it is much more alike
the "convert -density" option rather than setImageResolution();

Prior to reaidng a image, use setResolution(). It does not affect the image. However, it declares the prefered
size in relation to images inherit resolution. With this method you are able to affect the real pixel-size of
an iamge after reading. Eg your image has a size of 100x100 pixels and a inherit res of 72. Setting the set to
144 and reading this img results in a new img with 200x200.

Example of this:

<?php
$im = new Imagick();
$im->setResolution(144,144);
$im->readImage("test.eps");
$im->setImageFormat("png");
header("Content-Type: image/png");
echo $im;
?>

Use Imagick::setImageResolution() to alter the res of an already read image. This method does not
actually change the size of the img. But it has influence to methods which depends on a given 
image res like resampleImage(). E.g your image has a size of 100x100, and a res of 72. 
You setImageResolution to 144, it does nothing, unless you resample afterwards in relation to the 
ImageResolution we set, example of this:

<?php
$im = new Imagick();
$im->readImage("test.eps");
$im->setImageResolution(144,144);
$im->resampleimage (288, 288, imagick::FILTER_UNDEFINED, 1);
$im->stImageFormat("png");
header("Content-Type: image/png");
echo $im;
?>

Which actually does the same as:

<?php
$im = new Imagick();
$im->readImage("test.eps");
$im->setImageResolution(72,72);
$im->resampleImage(144,144,imagick::FILTER_UNDEFINED,1);
$im->setImageFormat("png");
header("Content-Type: image/png");
echo $im;
?>

Example of setting resolution, not defining one defaults to 72x72:

<?php
$img = new Imagick();

$img->setResolution(300, 300);
$img->newimage(100,100, 'none');
$img->setImageFormat('png');

$img->setImageUnits(imagick::RESOLUTION_PIXELSPERINCH);

print_r($img->identifyImage());

?>

setResourceLimit:

Sets the limit for a particular resource in MB

bool setResourceLimit ( int $type, int $limit )

Used to modify the resource limits of the underlying ImageMagick lib.

We can do a number of things with this, such as limit the amount of threads:

<?php
IMagick::setResourceLimit(6, 2);
?>

Other then that, we also have:

IMagick::RESOURCETYPE_AREA (integer) //Equivilant of MAGICK_AREA_LIMIT

IMagick::RESOURCETYPE_DISK (integer) //equivilant of MAGICK_DISK_LIMIT

IMagick::RESOURCETYPE_FILE (integer) //equivilant of MAGICK_FILE_LIMIT

IMagick::RESOURCETYPE_MAP (integer) //equivilant of MAGICK_MAP_LIMIT

IMagick::RESOURCETYPE_MEMORY (integer) //equivalent of MAGICK_MEMORY_LIMIT

The limtis are given in bytes, not in MBs.

We can verify this through:

<?php echo Imagick::getResourceLimit(Imagick::RESOURCETYPE_MEMORY); ?>

setSamplingFactors:

Sets the image sampling factors

bool setSamplingFactors ( array $factors )

Example of usage:

<?php
function setSamplingFactors($imagePath) {
	
	$imagePath = "../imagick/images/FineDetail.png";
	$imagick = new \Imagick(realpath($imagePath));
	$imagick->setImageFormat('jpg');
	$imagick->setSamplingFactors(array('2x2', '1x1', '1x1'));

	$compressed = $imagick->getImageBlob();

	$reopen = new \Imagick();
	$reopen->readImageBlob($compressed);

	$reopen->resizeImage(
		$reopen->getImageWidth() * 4,
		$reopen->getImageHeight() * 4,
		\Imagick::FILTER_POINT,
		1
	);

	header("Content-Type: image/jpg");
	echo $reopen->getImageBlob();
}

?>

setSize:

Sets the size of the Imagick object

bool setSize ( int $columns, int $rows )

Set it before you read raw image formats such as RGB, GRAY or CMYK.

Calling it before reading it, means we handle it upon load, meaning perofmrance is increased.

Example of usage:

<?php

$image = new Imagick();
$image->setSize(800,600);
$image->readImage($file);

?>

setSizeOffset:

Sets the size and offset of the Imagick object

bool setSizeOffset ( int $columns , int $rows , int $offset )

use before you read in raw formats such as RGB, GRAY or CMYK.

setType:

Sets the image type attribute

bool setType ( int $image_type )

shadeImage:

Creates a 3d Effect

bool shadeImage ( bool $gray, float $azimuth, float $elevation )

Shines a distant light on a image to create a 3d effect. You control the positioning of the light
with azimuth and elevation, azimuth is measured in degrees of the x axis and elevation is measured
in pixels above teh Z axis.

Example of usage:

<?php
function shadeImage($imagePath) {
	$imagick = new \Imagick(realpath($imagePath));
	$imagick->shadeImage(true, 45, 20);
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

shadowImage:

Simulates an image shadow

bool shadowImage ( float $opacity , float $sigma , int $x , int $y )

Example of usage:

<?php
function shadowImage($imagePath) {
	$imagick = new \Imagick(realpath($imagePath));
	$imagick->shadowImage(0.4, 10, 50, 5);
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

Another example of usage:

<?php
//Read the img into the object
$im = new Imagick( 'a.jpg' );
$im->setImageFormat("png");

//Make the image a little smaller, maintain aspect ratio
$im->thumbnailImage( 200, null );

//Clone the current object
$shadow = $im->clone();

//Set image BG color to black, this is the color of the shadow
$shadow->setImageBackgroundColor( new ImagickPixel( 'black' ) );

//Create the shadow
$shadow->shadowImage( 80, 3, 5, 5 );

//Imagick::shadowImage only creates the shadow. that is why the original image is composited over it
$shadow->compositeImage( $im, Imagick::COMPOSITE_OVER, 0, 0);

//Display the image
header( "Content-Type: image/jpeg" );
echo $shadow;
?>

sharpenImage:

Sharpens an image

bool sharpenImage ( float $radius, float $sigma [, int $channel = Imagick::CHANNEL_ALL ] )

Sharpens an image. We convolve the image with a Gaussian operator of the given radius and standard
deviation (sigma). For reasonable result, radius should be > sigma. Using a radius of 0
makes it select a suitable radius for you.

Example of usage:

<?php
function sharpenImage($imagePath, $radius, $sigma, $channel) {
	$imagick = new \Imagick(realpath($imagePath));
	$imagick->sharpenimage($radius, $sigma, $channel);
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

shaveImage:

Shaves pixels from the image edges

bool shaveImage ( int $columns, int $rows )

Shaves pixels from the image edges. It allocates the memory necessary for the new image structure
and returns a pointer to the new image.

Example of usage:

<?php
function shaveImage($imagePath) {
	$imagick = new \Imagick(realpath($imagePath));
	$imagick->shaveImage(100, 50);
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

shearImage:

Creating a parallelogram

bool shearImage ( mixed $background, float $x_shear, float $y_shear )

Slides one edge of an image along the X or Y axis, creating a parallelogram. An X direction shear slides
an edge along the X axis, while a Y direction shear slides an edge along the Y axis.

The amount of the shear is controlled by a shear angle. For x direciton shears, x_shear is measured relative
to the Y's axis and similarly, for Y direction shears y_shear is measured relative to the X axis.

Empty triangles left over from shearing the image are filled with the BG color.

Example of usage:

<?php
function shearImage($imagePath, $color, $shearX, $shearY) {
	$imagick = new \Imagick(realpath($imagePath));
	$imagick->shearimage($color, $shearX, $shearY);
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

<?php
	$image = new Imagick('pic.png');
	$image->shearImage('grey', 10, 5);
	$image->writeImage('final.png');
?>

sigmoidalContrastImage:

Adjusts the contrast of an image

bool sigmoidalContrastImage ( bool $sharpen , float $alpha , float $beta [, int $channel = Imagick::CHANNEL_ALL ] )

Adjusts the contrast of an image with a non-linear sigmoidal contrast algorithm. Increases the contrast of the image 
using a sigmoidal transfer function without saturating highlights or shadows. Contrast indicates how much to increase
the contrast (0 is none, 3 is typical, 20 is pushing it).

Mid-point indicates where midtones fall in the resultant image (0 is white; 50 is middle-gray; 100 is black).
Set sharpen to TRUE to increase the image contrast otherwise the contrast is reduced.

The params should be interpeted as Sharpen, Contrast and Beta.

Example of usage to blend two images together:

<?php

function generateBlendImage($width, $height, $contrast = 10, $midpoint = 0.5) {
	$imagick = new Imagick();
	$imagick->newPsuedoImage($width, $height, 'gradient:black-white');
	$quanta = $imagick->getQuantumRange();
	$imagick->sigmoidalContrastImage(true, $contrast, $midpoint * $quanta["quantumRangeLong"]);

	return $imagick;
}

?>

The actual formula to explain the graph of relations in terms of growth and what not, is as follows:

( 1/(1+exp(b*(a-u))) - 1/(1+exp(b*a)) ) / ( 1/(1+exp(b*(a-1))) - 1/(1+exp(b*a)) )

Where a is threshold, b is the contrast factor applied

Its just a simple exponentional growth graph

A sigmodal (a) of 6 and b of 0.46is approximately equivilant of combining a screen overlay of the image
on itself, followed by a "multiply" overlay.

sketchImage:

Simulates a pencil sketch

bool sketchImage ( float $radius, float $sigma , float $angle )

We convolve the image with a gaussian operator of the given radius and standard deviation (sigma).
For reasonable results, radius should be > sigma. Use a radius of 0 to have one selected for you.

Angle gives the angle of the blurring motion.

Example of usage:

<?php
function sketchImage($imagePath, $radius, $sigma, $angle) {
	$imagick = new \Imagick(realpath($imagePath));
	$imagick->sketchimage($radius, $sigma, $angle);
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

smushImages:

Imagick smushImages ( string $stack, string $offset )

Takes all images from the current image pointer to the end of the image list and smushs them to
each other top-to-bottom if the stack param is true, otherwise left-to-right.

Example of usage:

<?php
function smushImages($imagePath, $imagePath2) {
	$imagick = new \Imagick(realpath($imagePath));
	$imagick2 = new \Imagick(realpath($imagePath2));

	$imagick->addimage($imagick2);
	$smushed = $imagick->smushImages(false, 50);
	$smushed->setImageFormat('jpg');
	header("Content-Type: image/jpg");
	echo $smushed->getImageBlob();
}

?>

solarizeImage:

Applies a solarizing effect to the image

bool solarizeImage ( int $threshold )

Applies a special effect to the image, similar to the effect achieved in a photo darkroom by selectively
exposing areas of photo sensitive paper to light. TH ranges from 0 to QuantumRange and is a measure of the
extent of the solarization.

example of usage:

<?php
function solarizeImage($imagePath, $solarizeThreshold) {
	$imagick = new \Imagick(realpath($imagePath));
	$imagick->solarizeImage($solarizeThreshold * \Imagick::getQuantum());
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

Shifts the spectrum of colors to red, overall. White > red, blue > green etc.

sparseColorImage:

Interpolates colors

bool sparseColorImage ( int $SPARSE_METHOD , array $arguments [, int $channel = Imagick::CHANNEL_DEFAULT ] )

Given the arguments array containing numeric values this method interpolates the colours found at those
co-ords across the whole image using sparse_method.

To use sparseColorImage, without using a seperate createGradientImage(), we can use the array as a an arg:

Array (
[0] => 0 //X1 (x co-ord #1)
[1] => 0 //Y1 (Y co-ord #1)
[2] => 1 //R (Red between 0 and 1)
[3] => 0 //G (green between 0 and 1)
[4] => 0 //B (blue between 0 and 1)
[5] => 1 //A (alpha between 0 and 1)
[6] => 400 //x2
[7] => 0 //y2
[8] => 0 //R
[9] => 1 //G
[10] => 0 //B
[11] => 1 //A
[12] => 0 //X3
[13] => 400 //Y3
[14] => 1 //R
[15] => 1 //G
[16] => 0 //B
[17] => 1 //A
[18] => 400 //x4
[19] => 400 //y4
[20] => 0 //R
[21] => 0 //G
[22] => 1 //b
[23] => 1 //A
)

<?php

$imagick = new Imagick();
$imagick->newImage(400,400,"white");
$imagick->setImageFormat("png");

$array = Array(0,0,1,0,0,1,400,0,0,1,0,1,0,400,1,1,0,1,400,400,0,0,1,1);
$imagick->sparseColorImage(imagick::SPARSECOLORMETHOD_BILINEAR,$array);

header("Content-Type: image/png");
echo $imagick->getImageBlob();

?>

Example #1: SPARSECOLORMETHOD_BARYCENTRIC Imagick::sparseColorImage()

<?php
	function renderImageBarycentric2() {
		$points = [
			[0.30, 0.10, 'red'],
			[0.10, 0.80, 'blue'],
			[0.70, 0.60, 'lime'],
			[0.80, 0.20, 'yellow'],
		];
		$imagick = createGradientImage(
			400, 400,
			$points,
			\Imagick::SPARSECOLORMETHOD_BABYCENTRIC
		);
		header("Content-Type: image/png");
		echo $imagick->getImageBlob();
	}
?>

Example #2: SPARSECOLORMETHOD_BILINEAR Imagick::sparseColorImage()

<?php
	function renderImageBilinear() {
		$points = [[0.30, 0.10, 'red'], [0.10, 0.80, 'blue'], [0.70, 0.60, 'lime'], [0.80, 0.20, 'yellow'],];
		$imagick = createGradientImage(500, 500, $points, \Imagick::SPARSECOLORMETHOD_BILINEAR);
		header("Content-Type: image/png");
		echo $imagick->getImageBlob();
	}
?>

Example #3: SPARSECOLORMETHOD_SPEPARDS Imagick::sparseColorImage()
<?php
	function renderImageShepards() {
		$points = [
			[0.30, 0.10, 'red'],
			[0.10, 0.80, 'blue'],
			[0.70, 0.60, 'lime'],
			[0.80, 0.20, 'yellow'],
		];
		$imagick = createGradientImage(600, 600, $points, \Imagick::SPARSECOLORMETHOD_SPEPARDS);
		header("Content-Type: image/png");
		echo $imagick->getImageBlob();
	}
?>

Example #4: SPARSECOLORMETHOD_VORONOI Imagick::sparseColorImage()

<?php
	function renderImageVoronoi() {
		$points = [
			[0.30, 0.10, 'red'],
			[0.10, 0.80, 'blue'],
			[0.70, 0.60, 'lime'],
			[0.80, 0.20, 'yellow'],
		];

		$imagick = createGradientImage(500, 500, $points, \Imagick::SPARSECOLORMETHOD_VORONOI);
		header("Content-Type: image/png");
		echo $imagick->getImageBlob();
	}
?>

Example #5: SPARSECOLORMETHOD_BAYCENTRIC Imagick::sparseColorImage()

<?php
	function renderImageBarycentric() {
		$points = [
			[0, 0, 'skyblue'],
			[-1, 1, 'skyblue'],
			[1, 1, 'black'],
		];
		$imagick = createGradientImage(600, 200, $points, \Imagick::SPARSECOLORMETHOD_BARYCENTRIC);
		header("Content-Type: image/png");
		echo $imagick->getImageBlob();
	}
?>

Example #6: createGradientImage is used by other examples, Imagick::sparseColorImage()

<?php
function createGradientImage($width, $height, $colorPoints, $sparseMethod, $absolute = false){
	
	$imagick = new \Imagick();
	$imagick->newImage($width, $height, "white");
	$imagick->setImageFormat("png");

	$barycentricPoints = array();

	foreach ($colorPoints as $colorPoint) {

		if ($absolute == true) {
			$barycentricPoints[] = $colorPoint[0];
			$barycentricPoints[] = $colorPoint[1];
		}
		else {
			$barycentricPoints[] = $colorPoint[0] * $width;
			$barycentricPoints[] = $colorPoint[1] * $height;
		}

		if (is_string($colorPoint[2])) {
			$imagickPixel = new \ImagickPixel($colorPoint[2]);
		} else if ($colorPoint[2] instanceof \ImagickPixel) {
			$imagickPixel = $colorPoint[2];
		}
		else {
			$errorMessage = sprintf(
				"Value %s is neither a string nor a ImagickPixel class. Cannot use as a color.",
				$colorPoint[2]
			);

			throw new \InvalidArgumentException(
				$errorMessage
			);

		}

		$red = $imagickPixel->getColorValue(\Imagick::COLOR_RED);
		$green = $imagickPixel->getColorValue(\Imagick::COLOR_GREEN);
		$blue = $imagickPixel->getColorValue(\Imagick::COLOR_BLUE);
		$alpha = $imagickPixel->getColorValue(\Imagick::COLOR_ALPHA);

		$barycentricPoints[] = $red;
		$barycentricPoints[] = $green;
		$barycentricPoints[] = $blue;
		$barycentricPoints[] = $alpha;
	}

	$imagick->sparseColorImage($sparseMethod, $barycentricPoints);

	return $imagick;
}

?>

spliceImage:

Splices a solid color into the image

bool spliceImage ( int $width, int $height, int $x, int $y )

Example of usage:

<?php
function spliceImage($imagePath, $startX, $startY, $width, $height) {
	$imagick = new \Imagick(realpath($imagePath));
	$imagick->spliceImage($width, $height, $startX, $startY);
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}
?>


Increases the dimensions of the image without stretching the original image by creating a box of
the same color as the images BG.

We can set this color with setImageBackgroundColor() before running spliceImage()

The $width and $height params define how much is increased horizontally and vertically,
respectively, which determines how big the box is. Note that these values are not always the same size as
the box. The final dimensions of the new image are:

$newWidth = $oldWidth + $width
$newHeight = $oldHeight + $height

So, to expand the image in both directions, $width and $height should be positive values.
To expand in only one direction (horizontally or vertically) set one of these values to 0.

The $x and $y parameters are relative to the original image and define where to put the box.
If $x and $y are one of the corners of the original image, the box is placed in the respective
corner and expands teh image outwards from that corner.

OTehrwise, the box splits the original image to the sides or corners and places the box in the
middle of the new image. Thus, you use $x and $y to direct where and how the original image is split.

Any remaining space is filled with the BG color.

spreadImage:

Randomly displaces each pixel in a block

bool spreadImage ( float $radius )

Special effects method that randomly displaces each pixel in a block defined by the radius
param.

Example:

<?php
function spreadImage($imagePath, $radius) {
	$imagick = new \Imagick(realpath($imagePath));
	$imagick->spreadImage($radius);
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

statisticImage:

void statisticImage ( int $type, int $width , int $height [, string $CHANNEL = Imagick::CHANNEL_DEFAULT ] )

Replaces each pixel with corresponding statistic from the neighborhood of the specified width and height.

Example of usage:

<?php
function statisticImage($imagePath, $statisticType, $width, $height, $channel) {
	$imagick = new \Imagick(realpath($imagePath));

	$imagick->statisticImage(
		$statisticType,
		$width,
		$height,
		$channel
	);

	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

statisticImage($imagePath, \Imagick::STATISTIC_MEDIAN, 5, 5, \Imagick::CHANNEL_DEFAULT);

?>

steganoImage:

Hides a digital watermark within the image

Imagick steganoImage ( Imagick $watermark_wand , int $offset )

Hides a digital watermark within the image. Recover the hidden watermark later to provide the authenticity
of the image. Offset defines the start position within the image to hide the watermark.

stereoImage:

Composite two images

bool stereoImage ( Imagick $offset_wand )

Composite two images and produces a single image that is the composite of a left and right image of a stereo pair.

stripImage:

Strips an image of all profiles and comments

bool stripImage()

Note that stripping off the EXIF info without handling the orientation info in the exif can lead
to wrong orientation of the image.

We can also keep the ICC profile, the color richness component of the image.

Example of usage:

<?php
$profiles = $img->getImageProfiles("icc", true);

$img->stripImage();

if(!empty($profiles))
	$img->profileImage("icc", $profiles['icc']);
?>

subImageMatch:

Imagick subImageMatch ( Imagick $Imagick [, array &$offset [, float &$similarity ]] )

Searches for a subimage in the current image and returns a similarity image such that an exact
match location is completely white and if none of the pixels match, black, otherwise some
gray level in-between. You can also pass in the option param bestMatch and similarity.

After calling the function similarity will be set to the 'score' of the similarity between the
subimage and the matching position in the larger image, bestMatch will contain an associative array with
elements x, y, width, height that describe the matching region.

Example:

<?php
function subImageMatch($imagePath) {
	$imagick = new \Imagick(realpath($imagePath));
	$imagick2 = clone $imagick;
	$imagick2->cropImage(40, 40, 250, 110);
	$imagick2->vignetteimage(0, 1, 3, 3);

	$similarity = null;
	$bestMatch = null;
	$comparison = $imagick->subImageMatch($imagick2, $bestMatch, $similarity);

	$comparison->setImageFormat('png');
	header("Content-Type: image/png");
	echo $imagick->getImageBlob();
}

?>

swirlImage:

Swirls the pixels about the center of the image

bool swirlImage ( float $degrees )

Swirls the pixels about the center of the image, where degrees indicates the sweep of the arc
through which each pixel is moved. You get a more dramatic effect as the degrees move from 1 to 360.

Example of usage:

<?php
function swirlImage($imagePath, $swirl) {
	$imagick = new \Imagick(realpath($imagePath));
	$imagick->swirlImage($swirl);
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

textureImage:

Repeatedly tiles the texture image across and down the image canvas

Imagick textureImage ( Imagick $texture_wand )

Example of usage:

<?php
function textureImage($imagePath) {
	$image = new \Imagick();
	$image->newImage(640, 480, new \ImagickPixel('pink'));
	$image->setImageFormat("jpg");

	$texture = new \Imagick(realpath($imagePath));
	$texture->scaleImage($image->getimagewidth() / 4, $image->getimageheight() / 4);
	$image = $image->textureImage($texture);
	header("Content-Type: image/jpg");
	echo $image;
}

?>

It returns the textured image, leaving the original intact, abvoe we replace the original with the modified.

thresholdImage:

Changes the value of the individual pixels based on a TH

bool thresholdImage ( float $threshold [, int $channel = Imagick::CHANNEL_ALL ] )

Changes the value of individual pixels based on the intensity of each pixel compared to
TH. The result is a high-contrast, two color image.

Example:

<?php
function thresholdimage($imagePath, $threshold, $channel) {
	$imagick = new \Imagick(realpath($imagePath));
	$imagick->thresholdimage($threshold * \Imagick::getQuantum(), $channel);
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

We can also use getQuantumRange():

<?php
$i = new Imagick($imageFile);
$max = $i->getQuantumRange();
$max = $max["quantumRangeLong"];
$i->thresholdImage(0.77 * $max);
?>

thumbnailImage:

Changes the size of an image

bool thumbnailImage ( int $columns , int $rows [, bool $bestfit = false [, bool $fill = false ]] )

Changes the size of an image to the given dimensions and remove any associated profiles. The goal is to
produce small, low cost thumbnail iamges suited for display on teh Web.

If true is given as a 3rd param, then the columns and rows params are used as maximums for
each side. Both sides will be scaled down until they match or are smaller than the parameter
given for the side.

Example of usage:

<?php
function thumbnailImage($imagePath) {
	$imagick = new \Imagick(realpath($imagePath));
	$imagick->setbackgroundcolor('rgb(64, 64, 64)');
	$imagick->thumbnailImage(100, 100, true, true);
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

By scaling down the image, we can boost performance:

Instead of:

<?php
$image = new Imagick('foo.jpg');
?>

Use:

<?php
$image = new Imagick();
$image->setOption('jpeg:size', '800x532');
$image->readImage('foo.jpg');
?>

This method does not make the smallest image in terms of creation, a homemade function does this:

<?php
//max vert or horiz resolution
$maxsize = 550;

//Create new img obj
$image = new Imagick('input_image_filename_and_location');

//Resizes to whichever is larger, width or height
if($image->getImageHeight() <= $image->getImageWidth())
{
	//Resize image using the lanczos resampling algo based on width
	$image->resizeImage($maxsize,0,Imagick::FILTER_LANCZOS,1);
}
else
{
	//Resize image using the lanczos resampling algo based on height
	$image->resizeImage(0, $maxsize, Imagick::FILTER_LANCZOS, 1);
}

//Set to use Jpeg compression
$image->setImageCompression(Imagick::COMPRESSION_JPEG);
//Set compression level (1 lowest, 100 highest)
$image->setImageCompressionQuality(75);

//Strip out unneeded meta data
$image->stripImage();

//Write resultant image to output dir
$image->writeImage('output_image_filename_and_location');

//Destroys Imagick object, freeing allocated resources in process
$image->destroy();

?>

tintImage:

Applies a color vector to each pixel in the image

bool tintImage ( mixed $tint , mixed $opacity )

Applies a color vector to each pixel in the image. The length of the vector is 0 for black and white,
and at its maximum for the midtones. The vector weighting function is f(x)=(1-(4.0*((x-0.5)*(x-0.5))))

Example of usage:

<?php
function tintImage($r, $g, $b, $a) {
	$a = $a / 100;

	$imagick = new \Imagick();
	$imagick->newPseudoImage(400, 400, 'gradient:black-white');

	$tint = new \ImagickPixel("rgb($r, $g, $b)");
	$opacity = new \ImagickPixel("rgb(128, 128, 128, $a)");
	$imagick->tintImage($tint, $opacity);

	$imagick->setImageFormat('png');
	header("Content-Type: image/png");
	echo $imagick->getImageBlob();
}

?>

__toString:

Returns the image as a string

string __toString()

Returns the current image as a string. This will only return a single image, it should not be used
for Imagick objects that contain multiple images e.g. an animated GIF or PDF with multiple pages.

transformImage:

Convenience method for setting crop size and the image geometry

Imagick transformImage ( string $crop, string $geometry )

Convenience method for setting crop size and image geometry from strings.

Example of usage, to crop down to 100x100:

<?php
$image = new Imagick();
$image->newImage(300, 200, "Black");
$new_image = $image->transformImage("100x100", "100x100");
$new_image->writeImage('test_out.jpg');
?>

transformImageColorspace:

Transforms an image to a new colorspace

bool transformImageColorspace ( int $colorspace )

Example of transforming an image to a new colorspace, and then extract a single channel so that the individual channel
values can be viewed:

<?php
function transformImageColorspace($imagePath, $colorSpace, $channel) {
	$imagick = new \Imagick(realpath($imagePath));
	$imagick->transformimagecolorspace($colorSpace);
	//Channel should only be one of the channel constants e.g \Imagick::CHANNEL_BLUE
	$imagick->separateImageChannel($channel);
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

Second example:

<?php
function transformImageColorSpace($imagePath, $colorSpace, $channel) {
	$imagick = new \Imagick(realpath($imagePath));
	$imagick->transformimagecolorspace($colorSpace);
	$imagick->separateImageChannel($channel);
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

Should be used on existing pictures to resolve BG transparency errors upon conversions etc.

transparentPaintImage:

Paints pixels transparent

bool transparentPaintImage ( mixed $target, float $alpha, float $fuzz, bool $invert )

Paints pixels matching the target color transparent. 

Example of usage:

<?php
function transparentPaintImage($color, $alpha, $fuzz) {
	$imagick = new \Imagick(realpath("images/BlueScreen.jpg"));

	//Need to be in a format that supports transparency
	$imagick->setimageformat('png');

	$imagick->transparentPaintImage(
		$color, $alpha, $fuzz * \Imagick::getQuantum(), false
	);

	//Not required, but helps tidy up left over pixels
	$imagick->despeckleimage();

	header("Content-Type: image/png");
	echo $imagick->getImageBlob();
}

?>

transposeImage:

Creates a vertical mirror image

bool transposeImage()

Creates a vertical mirror image by reflecting the pixels around the central x-axis while rotating
them 90-degrees.

Example of usage:

<?php
function transposeImage($imagePath) {
	$imagick = new \Imagick(realpath($imagePath));
	$imagick->transposeImage();
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

transverseImage:

Creates a horizontal mirror image

bool tranverseImage()

Creates a horizontal mirror image by reflecting the pixels around the central y-axis while rotating them 270-degrees.

Example of usage:

<?php
function transverseImage($imagePath) {
	$imagick = new \Imagick(realpath($imagePath));
	$imagick->transverseImage();
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

trimImage:

Removes edges from the image

bool trimImage ( float $fuzz )

Remove edges that are the BG color from the image. 

Example of usage:

<?php
$im = new Imagick("image.jpg");

//Trim the image
$im->trimImage(0);

//Output the image
header("Content-Type: image/" . $im->getImageFormat());
echo $im;
?>

To continue doing operations after completing one, reset the page.

<?php
$im->trimImage(0);
$im->setImagePage(0, 0, 0, 0);
?>

Example showcasing how to retrieve dimensions of the difference between old and new:

<?php

//Create and trim image
$image = new Imagick('image.png');
$image->trimImage(0.3);

//Returns an array of original pic
$imagePage = $image->getImagePage();
list($x, $y) = array($imagePage['x'], $imagePage['y']);

//Reset and aquire proper info from new page
$image->setImagePage(0, 0, 0, 0);
list($width, $height) = array($image->width, $image->height);

?>

uniqueImageColors:

Discards all but one of any pixel color

bool uniqueImageColors()

Example of usage:

<?php
function uniqueImageColors($imagePath) {
	$imagick = new \Imagick(realpath($imagePath));
	//Reduce the image to 256 colours
	$imagick->quantizeImage(256, \Imagick::COLORSPACE_YIQ, 0, false, false);
	$imagick->uniqueImageColors();

	$imagick->scaleimage($imagick->getImageWidth(), $imagick->getImageHeight() * 20);
	header("Content-Type: image/png");
	echo $imagick->getImageBlob();
}

?>


unsharpMaskImage:

Sharpens an image

bool unsharpMaskImage ( float $radius, float $sigma, float $amount, float $threshold [, int $channel = Imagick::CHANNEL_ALL ] )

Sharpens an image. We convolve the image with a gaussian operator of the given radius and standard deviation (gamma).
For reasonable results, radius should be larger than sigma. Using a radius of 0 auto-selects one for us.

Example of usage:

<?php
function unsharpMaskImage($imagePath, $radius, $sigma, $amount, $unsharpThreshold) {
	$imagick = new \Imagick(realpath($imagePath));
	$imagick->unsharpMaskImage($radius, $sigma, $amount, $unsharpThreshold);
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

An example of preparing photo for web:

<?php
$im = new Imagick($SrcFile);

$im->resizeImage ( $Width, $Height , Imagick::FILTER_QUADRATIC , 1);
$im->normalizeImage();

$im->unsharpMaskImage(0, 0.5 , 1, 0.05);

$im->setImageFormat( "jpg" );
$im->setCompressionQuality(75);

$im->writeImage( $OutFile );

$im->removeImage();
?>

valid:

Checks if the current item is valid

bool valid()

This method is good for most checking, but does not cover detecting corrupt jpgs. Example of usage, to expose corrupt JPGs:

<?php
	//Check for the existence of the EOI segment header at the end of the file
	if (0 !== fseek($file, -2, SEEK_END) || "\xFF\xD9" !== fread($file, 2)) {
		fclose($file);
		return FALSE;
	}
?>

vignetteImage:

Adds vignette filter to the image

bool vignetteImage ( float $blackPoint , float $whitePoint , int $x , int $y )

Softens the edges of the image in vignette style.

Example of usage:

<?php
function vignetteImage($imagePath, $blackPoint, $whitePoint, $x, $y) {
	$imagick = new \Imagick(realpath($imagePath));
	$imagick->vignetteImage($blackPoint, $whitePoint, $x, $y);
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

waveImage:

Applies wave filter to the image

bool waveImage ( float $amplitude , float $length )

This method can be quite slow.

<?php
function waveImage($imagePath, $amplitude, $length) {
	$imagick = new \Imagick(realpath($imagePath));
	$imagick->waveImage($amplitude, $length);
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

whiteThresholdImage:

Force all pixels above the th into white

bool whiteThresholdImage ( mixed $threshold )

Is like Imagick::ThresholdImage() but force all pixels above the th into white while leaving all pixels below the TH unchanged.

Example of usage:

<?php
function whiteThresholdImage($imagePath, $color) {
	$imagick = new \Imagick(realpath($imagePath));
	$imagick->whiteThresholdImage($color);
	header("Content-Type: image/jpg");
	echo $imagick->getImagesBlob();
}

?>

writeImage:

Writes an image to the specified filename

bool writeImage ([ string $filename = NULL ])

Writes an image to the specified file name. If the filename parameter is NULL, the image is written
to the filename set by Imagick::readImage() or Imagick::setImageFilename()

When running Imagick as packaged with the Abyss web server, neither this method or writeImages() works.
Instead, the format has to be declared and the file saved by using another method or procedure:

<?php
$im = new Imagick();
$im->newImage (300, 255, "blue");
$im->writeImage ("test_0.jpg"); //Fails with no error message
//instead

$im->setImageFormat("jpeg");
file_put_contents ("test_1.jpg", $im); //Works, or
$im->imageWriteFile (fopen ("test_2.jpg", "wb")); //Also works
?>

writeImageFile:

Writes an image to a filehandle

bool writeImageFile ( resource $filehandle )

Writes the image sequence to an open filehandle. The handle must be opened with for example fopen.

writeImages:

Writes an image or image sequence

bool writeImages ( string $filename, bool $adjoin )

The second param defines if it can be split into a multipage format (true), ore ach page 
is to be put into a single file each (false).

Example of usage:

<?php
$multiTIFF = new Imagick();

$files = scandir($mytifspath);

foreach( $files as $f )
{
	$auxIMG = new Imagick();
	$auxIMG->readImage($mytifspath.$f);

	$multiTIFF->addImage($auxIMG);
}

//File multi.TIF
$multiTIFF->writeImages('multi.TIF', true);

//files multi-0.TIF, multi-1.TIF ...
$multiTIFF->writeImages('multi.TIF', false);
?>

writeImagesFile:

Writes frames to a filehandle

bool writeImagesFile ( resource $filehandle )

Writes all image frames into an open filehandle. This method can be used to write animated gifs or other
multiframe images into open filehandle.

This discloses the Imagick class function calls. The following, is function calls, to ImagickDraw:

ImagickDraw::affine:

Adjusts the current affine transformation matrix with the specified affine transformation matrix

bool affine ( array $affine )

Example of usage:

<?php
function affine($strokeColor, $fillColor, $backgroundColor) {
	$draw = new \ImagickDraw();

	$draw->setStrokeWidth(1);
	$draw->setStrokeOpacity(1);
	$draw->setStrokeColor($strokeColor);
	$draw->setFillColor($fillColor);

	$draw->setStrokeWidth(2);

	$PI = 3.141592653589794;
	$angle = 60 * $PI / 360;

	//Scale the drawing co-ords
	$affineScale = array("sx" => 1.75, "sy" => 1.75, "rx" => 0, "ry" => 0, "tx" => 0, "ty" => 0);

	//Shear the drawing co-ordinates
	$affineShear = array("sx" => 1, "sy" => 1, "rx" => sin($angle), "ry" => -sin($angle), "tx" => 0, "ty" => 0);

	//Rotate the drawing co-ords. The shear affine matrix produces incorrectly scaled drawings.
	$affineRotate = array("sx" => cos($angle), "sy" => cos($angle), "rx" => sin($angle), "ry" => -sin($angle),
		"tx" => 0, "ty" => 0,);


	//Translate (offset) the drawing
	$affineTranslate = array("sx" => 1, "sy" => 1, "rx" => 0, "ry" => 0, "tx" => 30, "ty" => 30);

	//The identity affine matrix
	$affineIdentity = array("sx" => 1, "sy" => 1, "rx" => 0, "ry" => 0, "tx" => 0, "ty" => 0);

	$examples = [$affineScale, $affineShear, $affineRotate, $affineTranslate, $affineIdentity,];

	$count = 0;

	foreach ($examples as $example) {
		$draw->push();
		$draw->translate(($count % 2) * 250, intval($count / 2) * 250);
		$draw->translate(100, 100);
		$draw->affine($example);

		$draw->rectangle(-50, -50, 50, 50);
		$draw->pop();
		$count++;
	}

	//Create an img obj which the draw commands can be rendered into
	$image = new \Imagick();
	$image->newImage(500, 750, $backgroundColor);
	$image->setImageFormat("png");

	//Render the draw commans in the ImagickDraw object into the image
	$image->drawImage($draw);

	//Send the image to the browser
	header("Content-Type: image/png");
	echo $image->getImageBlob();
}

?>

annotation:

Draws text on the image

bool annotation ( float $x, float $y, string $text )

An example of creating a header image and writing it to a file.

<?php

//text to write
$text = "Hello World!";

//Create imagick objects
$image = new Imagick();
$draw = new ImagickDraw();
$color = new ImagickPixel('#000000');
$background = new ImagickPixel('none'); //Transparent

//Font props
$draw->setFont('Arial');
$draw->setFontSize(50);
$draw->setFillColor($color);
$draw->setStrokeAntialias(true);
$draw->setTextAntialias(true);

//Get font metrics
$metrics = $image->queryFontMetrics($draw, $text);

//Create text
$draw->annotation(0, $metrics['ascender'], $text);

//Create image
$image->newImage($metrics['textWidth'], $metrics['textHeight'], $background);
$image->setImageFormat('png');
$image->drawImage($draw);

//Save image
file_put_contents('/path/to/file.png', $image);

?>

And another example of usage:

<?php
	
	//Splits given text into rows fitting given maxWidth
	private function getTextRows($draw, $text, $maxWidth)
	{
		$words = explode(" ", $text);

		$lines = array();
		$i=0;
		while ($i < count($words))
		{//As long as there are words
			$line = "";
			do
			{//Append words to line until the fit in size
				if($line != ""){
					$line .= " ";
				}
				$line .= $words[$i];

				$i++;
				if(($i) == count($words)){
					break; //last word -> break
				}

				//measure size of line + next word
				$linePreview = $line." ".$words[$i];
				$metrics = $this->canvas->queryFontMetrics($draw, $linePreview);
				//Echo $line."($i)".$metrics["textWidth"].":".$maxWidth."<br>";
			}while($metrics["textWidth"] <= $maxWidth);

			//echo "<hr>".$line."<br>";
			$lines[] = $line;
		}

		//var_export($lines);
		return $lines;
	}
?>

arc:

Draws an arc falling within a specified bounding rectangle on the image

bool arc ( float $sx , float $sy , float $ex , float $ey , float $sd , float $ed )

Example of usage:

<?php
function arc($strokeColor, $fillColor, $backgroundColor, $startX, $startY, $endX, $endY, $startAngle, $endAngle) {
	
	//Create a ImagickDraw object to draw onto
	$draw = new \ImagickDraw();
	$draw->setStrokeWidth(1);
	$draw->setStrokeColor($strokeColor);
	$draw->setFillColor($fillColor);
	$draw->setStrokeWidth(2);

	$draw->arc($startX, $startY, $endX, $endY, $startAngle, $endAngle);

	//Create an image object which the draw commands can be rendered into
	$image = new \Imagick();
	$image->newImage(IMAGE_WIDTH, IMAGE_HEIGHT, $backgroundColor);
	$image->setImageFormat("png");

	//Render the draw commands in the ImagickDraw object into hte img
	$image->drawImage($draw);

	//Send the img to the browser
	header("Content-Type: image/png");
	echo $image->getImageBlob();
}

?>

bezier:

Draws a bezier curve through a set of points on the image

bool bezier ( array $coordinates )

The co-ordinates param:

An multidimensional array like array(array('x'=>1,'y'=>2),array('x'=>3,'y'=4))

Example of usage:

<?php
function bezier($strokeColor, $fillColor, $backgroundColor) {
	$draw = new \ImagickDraw();

	$strokeColor = new \ImagickPixel($strokeColor);
	$fillColor = new \ImagickPixel($fillColor);

	$draw->setStrokeOpacity(1);
	$draw->setStrokeColor($strokeColor);
	$draw->setFillColor($fillColor);

	$draw->setStrokeWidth(2);

	$smoothPointsSet = [
		[
			['x' => 10.0 * 5, 'y' => 10.0 * 5],
			['x' => 30.0 * 5, 'y' => 90.0 * 5],
			['x' => 25.0 * 5, 'y' => 10.0 * 5],
			['x' => 50.0 * 5, 'y' => 50.0 * 5],
		],
		[
			['x' => 50.0 * 5, 'y' => 50.0 * 5],
			['x' => 75.0 * 5, 'y' => 90.0 * 5],
			['x' => 70.0 * 5, 'y' => 10.0 * 5],
			['x' => 90.0 * 5, 'y' => 40.0 * 5],
		],
	];

	foreach ($smoothPointsSet as $points) {
		$draw->bezier($points);
	}

	$disjointPoints = [
		[
			['x' => 10 * 5, 'y' => 10 * 5],
			['x' => 30 * 5, 'y' => 90 * 5],
			['x' => 25 * 5, 'y' => 10 * 5],
			['x' => 50 * 5, 'y' => 50 * 5],
		],
		[
			['x' => 50 * 5, 'y' => 50 * 5],
			['x' => 80 * 5, 'y' => 50 * 5],
			['x' => 70 * 5, 'y' => 10 * 5],
			['x' => 90 * 5, 'y' => 40 * 5],
		]
	];

	$draw->translate(0, 200);

	foreach ($disjointPoints as $points) {
		$draw->bezier($points);
	}

	//Create and image object with the draw commands can be rendered into
	$imagick = new \Imagick();
	$imagick->newImage(500, 500, $backgroundColor);
	$imagick->setImageFormat("png");

	//Render teh draw commands in the ImagickDraw object into the image
	$imagick->drawImage($draw);

	//Send the iamge to the browser
	header("Content-Type: image/png");
	echo $imagick->getImageBlob();
}

?>

circle:

Draws a circle

bool circle ( float $ox , float $oy, float $px , float $py )

Example of usage:

<?php
function circle($strokeColor, $fillColor, $backgroundColor, $originX, $originY, $endX, $endY) {
	
	//Create a ImagickDraw object to draw into
	$draw = new \ImagickDraw();

	$strokeColor = new \ImagickPixel($strokeColor);
	$fillColor = new \ImagickPixel($fillColor);

	$draw->setStrokeOpacity(1);
	$draw->setStrokeColor($strokeColor);
	$draw->setFillColor($fillColor);

	$draw->setStrokeWidth(2);
	$draw->setFontSize(72);

	$draw->circle($originX, $originY, $endX, $endY);

	$imagick = new \Imagick();
	$imagick->newImage(500, 500, $backgroundColor);
	$imagick->setImageFormat("png");
	$imagick->drawImage($draw);

	header("Content-Type: image/png");
	echo $imagick->getImageBlob();
}

?>

clear:

Clears the imagickDraw

bool clear()

Clears the ImagickDraw object of any accumulated commands, and resets the settings it contains to their defaults.

clone:

Makes an exact copy of the specified ImagickDraw object

ImagickDraw clone()

color:

Draws color on an image using the currentFill color, starting at specified pos, and using 
specified paint method.

bool color ( float $x, float $y, int $paintMethod )

comment:

Adds a comment to a vector output stream.

bool comment ( string $comment )

composite:

Composites an image onto the current image

bool composite ( int $compose, float $x, float $y, float $width, float $height , Imagick $compositeWand )

The compose arg is one of the Composition constants.

Example of usage:

<?php
function composite($strokeColor, $fillColor, $backgroundColor) {
	
	$draw = new \ImagickDraw();

	$draw->setStrokeColor($strokeColor);
	$draw->setFillColor($fillColor);
	$draw->setFillOpacity(1);
	$draw->setStrokeWidth(2);
	$draw->setFontSize(72);

	$draw->setStrokeOpacity(1);
	$draw->setStrokeColor($strokeColor);
	$draw->setStrokeWidth(2);

	$draw->setFont("../fonts/CANDY.TTF");
	$draw->setFontSize(140);
	$draw->rectangle(0, 0, 1000, 300);

	$draw->setFillColor('white');
	$draw->setfillopacity(1);
	$draw->annotation(50, 180, "Lorem Ipsum!");

	//Create an img object which the draw commands can be rendered into
	$imagick = new \Imagick();
	$imagick->newImage(1000, 302, $backgroundColor);
	$imagick->setImageFormat("png");

	//Render the draw commands in the ImagickDraw object into the image
	$imagick->drawImage($draw);

	//Send the image to the browser
	header("Content-Type: image/png");
	echo $imagick->getImageBlob();
}

?>

__construct:

The ImagickDraw constructor

__construct()

Simple example:

<?php
$img = new Imagick();
$img->newImage( 200, 200, new ImagickPixel( 'lime' ) );
$img->setImageFormat( "png" );
header( "Content-Type: image/png" );
echo $img;
?>

destroy:

Frees all associated resources with the ImagickDraw object

bool destroy()

ellipse:

Draws an ellipse on the image

bool ellipse ( float $ox, float $oy , float $rx , float $ry , float $start , float $end )

Example of usage:

<?php
function ellipse($strokeColor, $fillColor, $backgroundColor) {
	$draw = new \ImagickDraw();
	$draw->setStrokeColor($strokeColor);
	$draw->setFillColor($fillColor);

	$draw->setStrokeWidth(2);
	$draw->setFontSize(72);

	$draw->ellipse(125, 70, 100, 50, 0, 360);
	$draw->ellipse(350, 70, 100, 50, 0, 315);

	$draw->push();
	$draw->translate(125, 250);
	$draw->rotate(30);
	$draw->ellipse(0, 0, 100, 50, 0, 360);
	$draw->pop();

	$draw->push();
	$draw->translate(350, 250);
	$draw->rotate(30);
	$draw->ellipse(0, 0, 100, 50, 0, 315);
	$draw->pop();

	$imagick = new \Imagick();
	$imagick->newImage(500, 500, $backgroundColor);
	$imagick->setImageFormat("png");

	$imagick->drawImage($draw);

	header("Content-Type: image/png");
	echo $imagick->getImageBlob();
}

?>

getClipPath:

Obtains the current clipping Path ID

string getClipPath()

getClipRule:

Returns the current polygon fill rule to be used by the clipping path.

int getClipRule()

getClipUnits:

Returns the interpretation of clip path units

int getClipUnits()

getFillColor:

Returns the fill color used for drawing filled objects.

ImagickPixel getFillColor()


getFillOpacity:

Returns the opacity used when drawing using the fill color or fill texture. Fully opaque is 1.0

float getFillOpacity()

getFillRule:

Returns the fill rule used while drawing polygons.

int getFillRule()

getFont:

Returns a string specifying the font used when annotating with text.

string getFont()

getFontFamily:

Returns the font family to use when annotating with text.

string getFontFamily()

getFontSize:

Returns the font pointsize used when annotating with text.

float getFontSize()

getFontStretch:

int getFontStretch()

Gets the font stretch to use when annotating with text. Returns a StretchType

getFontStyle:

Returns the font style used when annotating with text

int getFontStyle()

getFontWeight:

Returns the font weight used when annotating with text

int getFontWeight()

getGravity:

Returns the text placement gravity used when annotating with text.

int getGravity()

getStrokeAntialias:

Returns teh current stroke antialias setting. Stroked outlines are antialiased by default.
When antialiasing is disabled stroked pixels are THed to determine if the stroke color or
underlying canvas color should be used.

bool getStrokeAntialias()

getStrokeColor:

Returns the color used for stroking object outlines.

ImagickPixel getStrokeColor()

getStrokeDashArray:

Returns an array representing the pattern of dashes and gaps used to stroke paths.

array getStrokeDashArray()

getStrokeDashOffset:

Returns the offset into the dash pattern to start the dash

float getStrokeDashOffset()

getStrokeLineCap:

Returns the shape to be used at the end of open subpaths when they are stroked.

int getStrokeLineCap()


getStrokeLineJoin:

Returns the shape to be used at the corners of paths (or other vector shapes) when they are stroked

int getStrokeLineJoin()

getStrokeMiterLimit:

Returns the miter limit. When two line segments meet at a sharp angle and miter joins have been specified
for 'lineJoin', it is possible for the miter to extend far beyond the thickness of the line stroking the path.

The 'miterLimit' imposes a limit on the ratio of the miter length to the 'lineWidth'.

getStrokeOpacity:

Returns the opacity of stroked object outlines

float getStrokeOpacity()

getStrokeWidth:

Returns the width of the stroke used to draw objects outlines

float getStrokeWidth()

getTextAlignment:

Returns the alignment applied when annotating with text.

int getTextAlignment()

getTextAntialias:

Returns the current text antialias setting, which determines whether text is antialiased.
Text is antialiased by default.

bool getTextAntialias()

getTextDecoration:

Returns the decoration applied when annotating with text.

int getTextDecoration()

getTextEncoding:

Returns a string which specifies the code set used for text annotations

string getTextEncoding()

getTextInterlineSpacing:

Gets the text interword spacing.

float getTextInterlineSpacing()

getTextInterwordSpacing:

float getTextInterwordSpacing()

Gets the text interword spacing

getTextKerning:

Gets the text kerning

float getTextKerning()

getTextUnderColor:

Returns the color of a BG rectangle to place under text annotations.

ImagickPixel getTextUnderColor()

getVectorGraphics:

Returns a string which specifies the vector graphics generated by any graphics calls made since
the ImagickDraw object was instansiated.

string getVectorGraphics()

line:

Draws a line on the image using the current stroke color, stroke opacity, and stroke width.

bool line ( float $sx , float $sy , float $ex , float $ey )

Example of usage:

<?php
function line($strokeColor, $fillColor, $backgroundColor) {
	
	$draw = new \ImagickDraw();
	$draw->setStrokeColor($strokeColor);
	$draw->setFillColor($fillColor);

	$draw->setStrokeWidth(2);
	$draw->setFontSize(72);

	$draw->line(125, 70, 100, 50);
	$draw->line(350, 170, 100, 150);

	$imagick = new \Imagick();
	$imagick->newImage(500, 500, $backgroundColor);
	$imagick->setImageFormat("png");
	$imagick->drawImage($draw);

	header("Content-Type: image/png");
	echo $imagick->getImageBlob();
}

?>

Another example:

<?php

// a twist on the above radar screen
// this makes random colored spokes from a center point

	$width = 400;
	$height = 400;

	$image = new Imagick();
	$image->newImage( $width, $height, new ImagickPixel( 'wheat' ) );
	$draw = new ImagickDraw();

	//$draw->setStrokeColor( new ImagickPixel( 'black' ) );

	$rx = $width / 2;
	$ry = $height / 2;
	$total = 2*M_PI;

	$part = $total / 16;
	while( $total > 0 )
	{
		$ex = $rx + $rx * sin( $total );
		$ey = $ry + $ry * cos( $total );
		$draw->line ( $rx, $ry, $ex, $ey );
		$total -= $part;

		//We need three HEX numbers to create an RGB color code like '#FF33DD'.

		$draw->setStrokeColor( get_random_color() );

	}

	$image->drawImage( $draw );
	$image->setImageFormat( "png" );
	header( "Content-Type: image/png" );
	echo $image;
	exit;

function get_random_color()
{
	for ($i = 0; $i<6; $i++)
	{
		$c .= dechex(rand(0,15));
	}
	return "#$c";
}
?>

matte:

Paints on the image's opacity channel in order to set effected pixels to transparent,
to influence the opacity of pixels.

bool matte( float $x, float $y, int $paintMethod )

Example of usage:

<?php
function matte($strokeColor, $fillColor, $backgroundColor, $paintType) {
	$draw = new \ImagickDraw();

	$draw->setStrokeColor($strokeColor);
	$draw->setFillColor($fillColor);

	$draw->setStrokeWidth(2);
	$draw->setFontSize(72);

	$draw->matte(120, 120, $paintType);
	$draw->rectangle(100, 100, 300, 200);

	$imagick = new \Imagick();
	$imagick->newImage(500, 500, $backgroundColor);
	$imagick->setImageFormat("png");
	$imagick->drawImage($draw);

	header("Content-Type: image/png");
	echo $imagick->getImageBlob();
}

?>

pathClose:

Adds a path element to the current path

bool pathClose()

Adds a path element to the current path which closes the current subpath by drawing a straight line
from the current point to the current subpath's most recent starting point (usually, the most recent
moveto point).

pathCurveToAbsolute:

Draws a cubic Bezier curve

bool pathCurveToAbsolute ( float $x1 , float $y1, float $x2, float $y2, float $x, float $y )

Draws a cubic Bezier curve from the current point to (x, y) using (x1,y1) as the control point
at the beginning of the curve and (x2,y2) as the control point at the end of the curve using
absolute coordinates.

At the end of the command, the new current point becomes the final (x,y) coordinate pair used 
in the polybezier.

pathCurveToQuadraticBezierAbsolute:

bool pathCurveToQuadraticBezierAbsolute ( float $x1 , float $y1 , float $x, float $y )

Draws a quadratic Bezier curve from the current point to (x,y) using (x1,y1) as the control
point using absolute co-ords. At the end of the command, the new current point becomes
the final (x,y) coordinate pair used in teh polybezier.

Example of usage:

<?php
function pathCurveToQuadraticBezierAbsolute($strokeColor, $fillColor, $backgroundColor) {
	$draw = new \ImagickDraw();

	$draw->setStrokeOpacity(1);
	$draw->setStrokeColor($strokeColor);
	$draw->setFillColor($fillColor);

	$draw->setStrokeWidth(2);
	$draw->setFontSize(72);

	$draw->pathStart();
	$draw->pathMoveToAbsolute(50, 250);

	//This specifies a quadratic bezier curve with the current position as the start
	// point, the control point is the first two params, and the end point is the last
	// two params
	$draw->pathCurveToQuadraticBezierAbsolute(
		150, 50,
		250,250
	);

	//This specifies a quadratic bezier curve with the current position as the start
	// point, the control point is mirrored from the previous curves control point
	// and the end point is defined by the x, y values
	$draw->pathCurveToQuadraticBezierSmoothAbsolute(
		450,250
	);

	//This specifies a quadratic bezier curve with the current position as the
	//Start point, the control point is mirror from the previous curves control point
	// and the end point is defined relative from the current position by the x, y values.
	$draw->pathCurveToQuadraticBezierSmoothRelative(
		200,-100
	);

	$draw->pathFinish();

	$imagick = new \Imagick();
	$imagick->newImage(700, 500, $backgroundColor);
	$imagick->setImageFormat("png");

	$imagick->drawImage($draw);

	header("Content-Type: image/png");
	echo $imagick->getImageBlob();
}

?>

pathCurveToQuadraticBezierRelative:

bool pathCurveToQuadraticBezierRelative ( float $x1 , float $y1 , float $x, float $y )

Draws a quadratic Bezier curve from the current point to (x,y) using (x1,y1) as the control point
using relative co-ords. At the end of the command, the new current point becomes the final
(x,y) co-ordinate pair used in the polybezier.

pathCurveToQuadraticBezierSmoothAbsolute:

bool pathCurveToQuadraticBezierSmoothAbsolute ( float $x , float $y )

Draws a quadratic bezier curve (using absolute co-ords) from the current point to (x,y). The control point
is assumed to be the reflection of the control point on the previous command relative to teh current point.

If there was no previous command or if the previous command was not a DrawPathCurveToQuadraticBezierAbsolute,
DrawPathCurveToQuadraticBezierRelative, DrawPathCurveToQuadraticBezierSmoothAbsolut or DrawPathCurveToQuadraticBezierSmoothRelative
assume the control point is coincident with the current point.

At the end of the command, the new current point becomes the final (x,y) co-ordinate pair used in the polybezier.

THis function cannot be used to continue a cubic Bezier curve smoothly. It can only continue from a quadratic
curve smoothly.

Example:

<?php
$draw = new \ImagickDraw();

$draw->setStrokeOpacity(1);
$draw->setStrokeColor("black");
$draw->setFillColor("blue");

$draw->setStrokeWidth(2);
$draw->setFontSize(72);

$draw->pathStart();
$draw->pathMoveToAbsolute(50,250);

//This specifies a quadratic bezier curve with the current position as the start
//point, the control point is the first two params, and the end point is teh last two params
$draw->pathCurveToQuadraticBezierAbsolute(
	150,50,
	250,250
);

//This specifies a quadratic bezier curve with the current position as the start
/ point, the control point is mirrored from the previous curves control point and 
// the end point is defined by the x, y values
$draw->pathCurveToQuadraticBezierSmoothAbsolute(
	450,250
);

//This specified a quadratic bezier curve with the current position as the
// start point, the control point is mirrored from the previous curves
// control point and the end point is defined relative from the current 
// pos by the x, y values
$draw->pathCurveToQuadraticBezierSmoothRelative(
	200,-100
);

$draw->pathFinish();

$imagick = new \Imagick();
$imagick->newImage(700, 500, $backgroundColor);
$imagick->setImageFormat("png");

$imagick->drawImage($draw);

header("Content-Type: image/png");
echo $imagick->getImageBlob();
?>

pathCurveToQuadraticBezierSmoothRelative:

bool pathCurveToQuadraticBezierSmoothRelative ( float $x, float $y )

Draw a quadratic Bezier curve (using relative coordinates) from the current point to (x, y). The control
point is assumed to be the reflection of the control point on the previous command relative to the current
point. (if there is no previous command or if the previous command was not a DrawPathCurveToQuadraticBezierSmoothRelative,
or DrawPathCurveToQuadraticBezierSmoothAbsolut, assume the control point is coincident with the current point).

At the end of the command, teh new current point becomes the final (x,y) coordinate pair used in the polybezier.

This function cannot be used to continue a cubic Bezir curve smoothly. It can only continue from a quadratic
curve smoothly.

Example of usage:

<?php
$draw = new \ImagickDraw();

$draw->setStrokeOpacity(1);
$draw->setStrokeColor("black");
$draw->setFillColor("blue");

$draw->setStrokeWidth(2);
$draw->setFontSize(72);

$draw->pathStart();
$draw->pathMoveToAbsolute(50,250);

//This specifies a quadratic bezier curve with the current position as the start
// point, the control point is the frist two params, and teh end point is the last two params
$draw->pathCurveToQuadraticBezierAbsolute(
	150,50,
	250,250
);

//This specifies a quadratic bezier curve with the current position as the start
//point, the control point is mirrored from the previous curves control point
// and the end point is defined relative from the current position by the x, y values.
$draw->pathCurveToQuadraticBezierSmoothRelative(
	200,-100
);

$draw->pathFinish();

$imagick = new \Imagick();
$imagick->newImage(700, 500, $backgroundColor);
$imagick->setImageFormat("png");

$imagick->drawImage($draw);

header("Content-Type: image/png");
echo $imagick->getImageBlob();
?>

pathCurveToRelative:

Draws a cubic Bezier curve from the current point to (x,y) using (x1, y1) as the control
point at the beginning of the curve and (x2,y2) as teh control point at the end of the
curve using relative coordinates. At the end of the command, the new current point 
becomes the final (x,y) coordinate pair used in the polybezier.

bool pathCurveToRelative ( float $x1, float $y1 , float $x2, float $y2, float $x, float $y )

pathCurveToSmoothAbsolute:

Draws a cubic Bezier curve from the current point to (x,y) using absolute co-ords.
The first control point is assumed to be the reflection of the second control
point on the previous command relative to the current point.

If there is no previous command or if the previous command was not an DrawPathCurveToAbsolute,
DrawPathCurveToRelative, DrawPathToSmoothAbsolute or DrawPathToSmoothRelative, assume the first
control point is coincident with the current point.

(x2,y2) is the second control point (i.e the control point at the end of the curve). At the end of
the command, the new current point becomes the final (x,y) coordinate pair used in the polybezier.

pathCurveToSmoothRelative:

Draws a cubic Bezier curve

bool pathCurveToSmoothRelative ( float $x2, float $y2, float $x, float $y )

Draws a cubic Bezier curve from the current point to (x,y) using relative coordinates.
The first control point is assumed to be the reflection of the second point on the previous
command relative to teh current point.

If there is no previous command or if the previous comamnd was not an DrawPathCurveToAbsolute,
DrawPathCurveToRelative, DrawPathCurveToSmoothAbsolute or DrawPathCurveToSmoothRelative,
assume the first control point is coincident with the current point.

(x2, y2) is the second control point (i.e the control point at the end of the curve).
At the end of the command, the new current point becomes the final (x,y) coordinate pair
used in the polybezier.

pathEllipticArcAbsolute:

Draws an elliptical arc

bool pathEllipticalArcAbsolute ( float $rx, float $ry, float $x_axis_rotation, bool $large_arc_flag, bool $sweep_flag,
	float $x, float $y )

Draws an elliptical arc from the current point to (x,y) using absolute coordinates. The size and orientaiton
of the ellipse are defined by two radii (rx, ry) and an xAxisRotation, which indicates how the ellipse
as a whole is rotated relative to the current coordinate system.

The center (cx, cy) of the ellipse is calculated automatically to satisfy the constraints imposed by the
other parameters. largeArcFlag and sweepFlag contribute to the automatic calculations and help determine
how the arc is drawn.

If largeArcFlag is true, then draw the larger of the available arcs. If sweepFlag is true, then draw the 
arc matching a clock-wise rotation.

pathEllipticArcRelative:

bool pathEllipticArcRelative( float $rx, float $ry, float $x_axis_rotation, bool $large_arc_flag, bool $sweep_flag,
	float $x, float $y )

Draws an elliptical arc from the current point to (x,y) using relative co-ordinates. The size and orientation
of the ellipse are defined by two radii (rx,ry) and an xAxisRotation, which indicates how the ellipse as a whole
is rotated relative to the current coordinate system.

The center (cx, cy) of the ellipse is calculated automatically to satisfy the constraint imposed by the 
other parameters. largeArcFlag and sweepFlag contribute to the automatic calculations and help determine
how teh arc is drawn.

If largeArcFlag is true, draw the larger of teh available arcs. If sweepFlag is true, then draw the arc
matching a clock-wise rotation.

pathFinish:

Terminates the current path

bool pathFinish()

pathLineToAbsolute:

Draws a line path from the current point to the given coordinate using absolute co-ordinates.
The coordinate then becomes the new current point.

bool pathLineToAbsolute ( float $x, float $y )

pathLineToHorizontalAbsolute:

Draws a horizontal line path from the current point to the target point using absolute coordinates.
The target point then becomes the new current point.

bool pathLineToHorizontalAbsolute ( float $x )

pathLineToHorizontalRelative:

Draws a horizontal line path from the current point to the target point using relative co-ordinates. 
The target point then becomes the new current point.

bool pathLineToHorizontalRelative ( float $x )

pathLineToRelative:

Draws a line path from the current point to the given coordinate using relative coordinates.
The coordinate then becomes teh new current point.

bool pathLineToRelative ( float $x, float $y )

it is not as easy to write pie slices in imagick as it is in GD. An example of hwo to do it in Imagick, though:

<?php
	function getPointOnCircumference( $widthOfCircle, $heightOfCircle, $degrees, $x = 0, $y = 0 )
	{
		return array(
			'x' => $x + ($widthOfCircle/2) * sin( deg2rad( $degrees ) ),
			'y' => $y + ($heightOfCircle/2) * cos( deg2rad( $degrees )  )
		);

	}

	$width = 200;
	$height = 200;
	$border = 2;
	$x = $width / 2;
	$y = $height / 2;
	$im = new Imagick();
	$im->newImage( $width, $height, "orange", "png" );

	$draw = new ImagickDraw();
	$draw->setFillColor( 'lime' );
	$draw->setStrokeColor( new ImagickPixel( 'black' ) );

	$draw->setStrokeWidth( 2 );
	$draw->arc( 0, 0, ($width-$border), ($height-$border), 270, 360 ); //270 till 360 degrees
	$im->DrawImage( $draw );

	$draw2 = new ImagickDraw();
	$draw2->setFillColor( 'red' );
	$draw2->setStrokeColor( new ImagickPixel( 'black' ) );
	$draw2->setStrokeWidth( 2 );

	$draw2->ellipse( 100, 100, $x-$border, $y-$border, 0, 90); //0 till 90 degrees
	$im->DrawImage( $draw2 );

	$draw3 = new ImagickDraw();
	$draw3->setFillColor( 'navy' );
	$draw3->setStrokeColor( new ImagickPixel( 'white' ) );
	$draw3->setStrokeWidth( 2 );

	$draw3->pathStart();

	$degrees90 = getPointOnCircumference( $width-2*$border, $height-2*$border, 360 );
	$degrees180 = getPointOnCircumference( $width-2*$border, $height-2*$border, 270 );

	$draw3->pathMoveToRelative( $x, $y ); //Move pencil ot middle of image
	$draw3->pathLineToRelative( $degrees90['x'], $degrees90['y'] );
	$draw3->pathEllipticArcRelative( $width-$border, $height-$border, 0, false, true, $degrees180['x'],
		$degrees180['y']-$y+$border );

	$draw3->pathClose();
	$im->DrawImage( $draw3 );

	header( "Content-Type: image/png ");
	echo $im;
?>

pathLineToVerticalAbsolute:

Draws a vertical line path from the current point to the target point using absolute coordinates.
THe target point then becomes the new current point.

bool pathLineToVerticalAbsolute( float $y )

pathLineToVerticalRelative:

Draws a vertical line path from teh current point to the target point using relative coordinates.
The target point then becomes teh new current point.

bool pathLineToVerticalRelative ( float $y )

pathMoveToAbsolute:

Starts a new sub-path at the given cooridnate using absolute coordinates. The current
point then becomes the specified coordinate.

bool pathMoveToAbsolute ( float $x, float $y )

pathMoveToRelative:

Starts a new sub-path at the given coordinate using relative coordinates. The current point
then becomes the specified coordinate.

bool pathMoveToRelative ( float $x, float $y )

pathStart:

Declares the start of a path drawing list which is terminated by a matching DrawPathFinish() command.
All other DrawPath commands must be enclosed between a and a DrawPathFinish() command. This is because
drawing commands are subordinate commands and they do not function by themselves.

bool pathStart()

Example of usage:

<?php
function pathStart( $strokeColor, $fillColor, $backgroundColor ) {
	$draw = new \ImagickDraw();

	$draw->setStrokeOpacity(1);
	$draw->setStrokeColor($strokeColor);
	$draw->setFillColor($fillColor);

	$draw->setStrokeWidth(2);
	$draw->setFontSize(72);

	$draw->pathStart();
	$draw->pathMoveToAbsolute(50, 50);
	$draw->pathLineToAbsolute(100, 50);
	$draw->pathLineToRelative(0, 50);

	$draw->pathLineToHorizontalRelative(-50);
	$draw->pathFinish();

	$draw->pathStart();
	$draw->pathMoveToAbsolute(50, 50);
	$draw->pathMoveToRelative(300 ,0);
	$draw->pathLineToRelative(50, 0);

	$draw->pathLineToVerticalRelative(50);
	$draw->pathLineToHorizontalAbsolute(350);

	$draw->pathclose();
	$draw->pathFinish();

	$draw->pathStart();
	$draw->pathMoveToAbsolute(50, 300);
	$draw->pathCurveToAbsolute(50, 300, 100, 200, 300, 300);
	$draw->pathLineToVerticalAbsolute(350);
	$draw->pathFinish();

	$imagick = new \Imagick();
	$imagick->newImage(500, 500, $backgroundColor);
	$imagick->setImageFormat("png");

	$imagick->drawImage($draw);

	header("Content-Type: image/png");
	echo $imagick->getImageBlob();
}

?>

point:

Draws a point using the current stroke color and stroke thickness at the specified co-ords.

bool point ( float $x, float $y )

<?php
function point($fillColor, $backgroundColor) {
	
	$draw = new \ImagickDraw();

	$draw->setFillColor($fillColor);

	for ($x = 0; $x < 10000; $x++) {
		$draw->point(rand(0, 500), rand(0, 500));
	}

	$imagick = new \Imagick();
	$imagick->newImage(500, 500, $backgroundColor);
	$imagick->setImageFormat("png");
	$imagick->drawImage($draw);

	header("Content-Type: image/png");
	echo $imagick->getImageBlob();
}

?>

polygon:

Draws a polygon using the current stroke, stroke width, and fill color or texture, using the specified
array of coordinates.

bool polygon ( array $coordinates )

The param:

coordinates: A multidimensional array like array( array('x'=>3,'y'=>4), array('x'=>2,'y'=> 6));

Example of usage:

<?php
function polygon($strokeColor, $fillColor, $backgroundColor) {
	$draw = new \ImagickDraw();

	$draw->setStrokeOpacity(1);
	$draw->setStrokeColor($strokeColor);
	$draw->setStrokeWidth(4);

	$draw->setFillColor($fillColor);

	$points = [
		['x' => 40 * 5, 'y' => 10 * 5],
		['x' => 20 * 5, 'y' => 20 * 5],
		['x' => 70 * 5, 'y' => 50 * 5],
		['x' => 60 * 5, 'y' => 15 * 5],
	];

	$draw->polygon($points);

	$image = new \Imagick();

	$image->newImage(500, 300, $backgroundColor);
	$image->setImageFormat("png");
	$image->drawImage($draw);

	header("Content-Type: image/png");
	echo $image->getImageBlob();
}

?>

polyline:

Draws a polyline using teh current stroke, stroke width, and fill color or texture, using the specified array of coordinates.

bool polyline ( array $coordinates )

Coords: Again, multi-dim array: 

array of x and y coords: array(array('x'=>4,'y'=>6),array('x'=>8,'y'=>10))

Example of usage:

<?php
function polyline($strokeColor, $fillColor, $backgroundColor) {
	$draw = new \ImagickDraw();

	$draw->setStrokeOpacity(1);
	$draw->setStrokeColor($strokeColor);
	$draw->setFillColor($fillColor);

	$draw->setStrokeWidth(5);

	$points = [	
		['x' => 40 * 5, 'y' => 10 * 5],
		['x' => 20 * 5, 'y' => 20 * 5],
		['x' => 70 * 5, 'y' => 50 * 5],
		['x' => 60 * 5, 'y' => 15 * 5]
	];

	$draw->polyline($points);

	$image = new \Imagick();
	$image->newImage(500, 300, $backgroundColor);
	$image->setImageFormat("png");
	$image->drawImage($draw);

	header("Content-Type: image/png");
	echo $image->getImageBlob();
}

?>

An example of drawing an filled Isosceles Triangle:

<?php
$width = 601;
$height = 601;

$max_x = $width - 1;
$max_y = $height - 1;
$mid_y = $max_y / 2;
$mid_x = $max_x / 2;

$fillcolor = '#F00F00';

try {
		$lo_img = new Imagick();
		$lo_img->newImage( $width, $height, new ImagickPixel('transparent'));

		$draw = new ImagickDraw();

		$draw->setFillColor($fillcolor);
		$draw->setStrokeWidth( 1 );

		//Co-ords array with start and end points
		$co_ords = array( array( 'x' => $mid_x, 'y' => 0 ), array('x'=>0,'y'=>$max_y)
				,array( 'x' => 0, 'y' => $max_y ),array('x'=>$max_x,'y'=>$max_y)
				,array( 'x' => $mid_x, 'y' => 0),array('x'=>$max_x,'y'=>$max_y)
			);

		$draw->polyline($co_ords);

		$lo_img->drawImage( $draw );

		$lo_img->setImageFormat( "png" );

		header( "Content-Type: image/png" );

		echo $lo_img;

		$lo_img->destroy();
		$draw->destroy();
		exit;
	} catch (Exception $ex) {
		print_r($ex);
		return;
	}
?>

pop:

Destroys the current ImagickDraw in the stack, and returns to the previously pushed ImagickDraw

bool pop()

It is an error to attempt to pop more ImagickDraws than have been pushed, and it is proper form
to pop all ImagickDraws which have been pushed.

popClipPath:

Terminates a clip path definition

bool popClipPath()

popDefs:

Terminates a definition list.

bool popDefs()

Example of usage:

<?php
function popDefs($strokeColor, $fillColor, $backgroundColor) {
	$draw = new \ImagickDraw();

	$draw->setStrokeColor($strokeColor);
	$draw->setFillColor($fillColor);
	$draw->setstrokeOpacity(1);

	$draw->setStrokeWidth(2);
	$draw->setFontSize(72);
	$draw->pushDefs();

	$draw->setStrokeColor('white');
	$draw->rectangle(50, 50, 200, 200);
	$draw->popDefs();

	$draw->rectangle(300, 50, 450, 200);

	$imagick = new \Imagick();
	$imagick->newImage(500, 500, $backgroundColor);
	$imagick->setImageFormat("png");

	$imagick->drawImage($draw);

	header("Content-Type: image/png");
	echo $imagick->getImageBlob();
}

?>

popPattern:

terminates a pattern definition

bool popPattern()

push:

Clones the current ImagickDraw and pushes it to the stack

bool push()

Clones the current ImagickDraw to create a new ImagickDraw, which is then added to the ImagickDraw stack.
The original drawing ImagickDraw(s) may be returned by invoking pop(). The ImagickDraws are stored on a 
ImagickDraw stack.

For every Pop there must have already been an equivilant push.

Example of usage:

<?php
function push($strokeColor, $fillColor, $backgroundColor, $fillModifiedColor) {
	
	$draw = new \ImagickDraw();
	$draw->setStrokeColor($strokeColor);
	$draw->setFillColor($fillModifiedColor);
	$draw->setStrokeWidth(2);
	$draw->setFontSize(72);

	$draw->push();
	$draw->translate(50, 50);
	$draw->rectangle(200, 200, 300, 300);
	$draw->pop();

	$draw->setFillColor($fillColor);
	$draw->rectangle(200, 200, 300, 300);

	$imagick = new \Imagick();
	$imagick->newImage(500, 500, $backgroundColor);
	$imagick->setImageFormat("png");

	$imagick->drawImage($draw);

	header("Content-Type: image/png");
	echo $imagick->getImageBlob();
}

?>

pushClipPath:

Starts a clip path definition which is comprised of any number of drawing commands and terminated by a ImagickDraw::popClipPath()

bool pushClipPath ( string $clip_mask_id )

Also, an example that has two intersecting discs:

<?php

//Simple clip path example


$showClipping=1; //Try setting this to 0
$showDrawing=1; //Try setting this to 0

$showBoth=$showClipping && $showDrawing;
$showAny=$showClipping || $showDrawing;

$image=new Imagick(); //Create img

$width=151;
$height=101;

$image->newImage($width, $height, new ImagickPixel('lightgray')); //Some visible bg

$draw=new ImagickDraw();

if ($showBoth)
		$draw->pushClipPath('circle_left'); //Start clipping

if ($showClipping){
	$draw->setFillColor('red'); //The color does not matter if we clip
	$draw->circle(50,50,50,0); //A circle that occupies 100x100px on the left
}

if ($showBoth) {
	$draw->popClipPath(); //Finish clipping path
	$draw->setClipPath('circle_left'); //use the clipping path above
}

if ($showDrawing) {
	$draw->setFillColor('navy'); //This is the actual drawing color
	$draw->circle(100,50,100,0); //A circle that occupies 100x100px on the right
}

if ($showAny)
		$image->drawImage($draw); //render $draw unto $image

$image->setImageFormat('png'); //Tell ImageMagick how to render this
header("Content-Type: image/png"); //Tell the browser how to render this

echo $image; //render the image into the browser
?>

pushDefs:

Indicates that commands up to a terminating ImagickDraw::popDefs() command create named elements (e.g
clip-paths, textures, etc) which may safely be processed earlier for the sake of efficiency.

bool pushDefs()

pushPattern:

Indicates that subsequent commands up to a DrawPopPattern() command comprise the definition of a named
pattern. The pattern space is assigned top left corner coordinates, a width and a height and becomes
its own drawing space.

Anything which can be drawn may be used in a pattern definiton. Named patterns may be used as stroke
or brush definitions.

bool pushPattern ( string $pattern_id, float $x, float $y, float $width, float $height )

Example of usage:

<?php
function pushPattern($strokeColor, $fillColor, $backgroundColor) {
	$draw = new \ImagickDraw();

	$draw->setStrokeColor($strokeColor);
	$draw->setFillColor($fillColor);
	$draw->setStrokeWidth(1);

	$draw->setStrokeOpacity(1);
	$draw->setStrokeColor($strokeColor);
	$draw->setFillColor($fillColor);

	$draw->setStrokeWidth(1);

	$draw->pushPattern("MyFirstPattern", 0, 0, 50, 50);
	for ($x = 0; $x < 50; $x += 10) {
		for ($y = 0; $y < 50; $y += 5) {
			$positionX = $x + (($y / 5) % 5);
			$draw->rectangle($positionX, $y, $positionX + 5, $y + 5);
		}
	}

	$draw->popPattern();

	$draw->setFillOpacity(0);
	$draw->rectrangle(100, 100, 400, 400);
	$draw->setFillOpacity(1);

	$draw->setFillOpacity(1);

	$draw->push();
	$draw->setFillPatternURL('#MyFirstPattern');
	$draw->setFillColor('yellow');

	$draw->rectangle(100, 100, 400, 400);
	$draw->pop();

	$imagick = new \Imagick();
	$imagick->newImage(500, 500, $backgroundColor);
	$imagick->setImageFormat("png");

	$imagick->drawImage($draw);

	header("Content-Type: image/png");
	echo $imagick->getImageBlob();
}

?>

rectangle:

Draws a rectrangle given two coords and using the current stroke, stroke width and fill settings.

bool rectangle ( float $x1, float $y1, float $x2, float $y2 )

Example:

<?php
function rectangle($strokeColor, $fillColor, $backgroundColor) {
	$draw = new \ImagickDraw();
	$strokeColor = new \ImagickPixel($strokeColor);
	$fillColor = new \ImagickPixel($fillColor);

	$draw->setStrokeColor($strokeColor);
	$draw->setFillColor($fillColor);
	$draw->setStrokeOpacity(1);
	$draw->setStrokeWidth(2);

	$draw->rectangle(200, 200, 300, 300);
	$imagick = new \Imagick();
	$imagick->newImage(500, 500, $backgroundColor);
	$imagick->setImageFormat("png");

	$imagick->drawImage($draw);

	header("Content-Type: image/png");
	echo $imagick->getImageBlob();
}

?>

And another example:

<?php

$image = new Imagick();

$width = 600;
$height = 400;

$image->newImage( $width, $height, new ImagickPixel( 'lightgray' ) );

$draw = new ImagickDraw();

$draw->setFillColor('wheat');
$draw->setStrokeColor( new ImagickPixel( 'green' ) );
$draw->rectangle( 100, 100, 200, 200 );

$draw->setFillColor('navy');
$draw->setStrokeColor( new ImagickPixel( 'yellow' ) );
$draw->setStrokeWidth(4);
$draw->rectangle( 150, 225, 350, 300 );


$draw->setFillColor('magenta');
$draw->setStrokeColor( new ImagickPixel( 'cyan' ) );
$draw->setStrokeWidth(2);
$draw->rectangle( 380, 100, 400, 350 );

$image->drawImage( $draw );

$image->setImageFormat('jpg');

header('Content-Type: image/jpeg');
echo $image;

//$image->writeImage('someimage.jpg'); //or just write the img to a file

?>

render:

Renders all preceding drawing commands onto the image

bool render()

resetVectorGraphics:

void resetVectorGraphics()

Resets the vector graphics.

rotate:

Applies the specified rotation to the current coordinate space

bool rotate ( float $degrees )

Example of usage:

<?php
function rotate($strokeColor, $fillColor, $backgroundColor, $fillModifiedColor) {
	$draw = new \ImagickDraw();
	$draw->setStrokeColor($strokeColor);

	$draw->setStrokeOpacity(1);
	$draw->setFillColor($fillColor);
	$draw->rectangle(200, 200, 300, 300);

	$draw->setFillColor($fillModifiedColor);

	$draw->rotate(15);
	$draw->rectangle(200, 200, 300, 300);

	$image = new \Imagick();
	$image->newImage(500, 500, $backgroundColor);
	$image->setImageFormat("png");
	$image->drawImage($draw);

	header("Content-Type: image/png");
	echo $image->getImageBlob();
}

?>

roundRectangle:

Draws a rounded rectangle given two co-ords, x & y corner radiuses and using the current stroke ,stroke width,
and fill settings.

bool roundRectangle ( float $x1 , float $y1, float $x2, float $y2, float $rx, float $ry )

Example of usage:

<?php
function roundRectangle($strokeColor, $fillColor, $backgroundColor, $startX, $endX, $endY, $roundX, $roundY) {
	
	$draw = new \ImagickDraw();

	$draw->setStrokeColor($strokeColor);
	$draw->setFillColor($fillColor);
	$draw->setStrokeOpacity(1);
	$draw->setStrokeWidth(2);

	$draw->roundRectangle($startX, $startY, $endX, $endY, $roundX, $roundY);

	$imagick = new \Imagick();
	$imagick->newImage(500, 500, $backgroundColor);
	$imagick->setImageFormat("png");

	$imagick->drawImage($draw);

	header("Content-Type: image/png");
	echo $imagick->getImageBlob();
}

?>

scale:

Adjusts the scaling factor to apply in the horizontal and vertical
directions to the current coordinate space.

bool scale ( float $x, float $y )


Example of usage:

<?php
function scale($strokeColor, $fillColor, $backgroundColor, $fillModifiedColor) {
	
	$draw = new \ImagickDraw();
	$draw->setStrokeColor($strokeColor);
	$draw->setStrokeWidth(4);

	$draw->setFillColor($fillColor);
	$draw->rectangle(200, 200, 300, 300);
	$draw->setFillColor($fillModifiedColor);
	$draw->scale(1.4, 1.4);
	$draw->rectangle(200, 200, 300, 300);

	$image = new \Imagick();
	$image->newImage(500, 500, $backgroundColor);
	$image->setImageFormat("png");
	$image->drawImage($draw);

	header("Content-Type: image/png");
	echo $image->getImageBlob();
}

?>

setClipPath:

Associates a named clipping path with the image. Only the areas drawn on by the clipping
path will be modified as long as it remains in effect.

bool setClipPath ( string $clip_mask )


Example of usage:

<?php
function setClipPath($strokeColor, $fillColor, $backgroundColor) {
	
	$draw = new \ImagickDraw();
	$draw->setStrokeColor($strokeColor);
	$draw->setFillColor($fillColor);

	$draw->setStrokeOpacity(1);
	$draw->setStrokeWidth(2);

	$clipPathName = 'testClipPath';

	$draw->pushClipPath($clipPathName);
	$draw->rectangle(0, 0, 250, 250);
	$draw->popClipPath();
	$draw->setClipPath($clipPathName);
	$draw->rectangle(100, 100, 400, 400);

	$imagick = new \Imagick();
	$imagick->newImage(500, 500, $backgroundColor);
	$imagick->setImageFormat("png");

	$imagick->drawImage($draw);

	header("Content-Type: image/png");
	echo $imagick->getImageBlob();
}

?>

setClipRule:

Set the polygon fill rule to be used by the clipping path

bool setClipRule ( int $fill_rule )

Example of usage:

<?php
function setClipRule($strokeColor, $fillColor, $backgroundColor) {
	
	$draw = new \ImagickDraw();

	$draw->setStrokeColor($strokeColor);
	$draw->setFillColor($fillColor);

	$draw->setStrokeOpacity(1);
	$draw->setStrokeWidth(2);

	//\Imagick::FILLRULE_EVENODD
	//\Imagick::FILLRULE_NONZERO

	$clipPathName = 'testClipPath';
	$draw->pushClipPath($clipPathName);

	$draw->setClipRule(\Imagick::FILLRULE_EVENODD);
	$draw->rectangle(0, 0, 300, 500);
	$draw->rectangle(200, 0, 500, 500);

	$draw->popClipPath();
	$draw->setClipPath($clipPathName);
	$draw->rectangle(200 ,200, 300 ,300);

	$imagick = new \Imagick();
	$imagick->newImage(500, 500, $backgroundColor);
	$imagick->setImageFormat("png");

	$imagick->drawImage($draw);

	header("Content-Type: image/png");
	echo $imagick->getImageBlob();
}

?>

setClipUnits:

sets the interpetation of clip path untis

bool setClipUnits ( int $clip_units )

<?php
function setClipUnits($strokeColor, $fillColor, $backgroundColor) {
	
	$draw = new \ImagickDraw();

	$draw->setStrokeColor($strokeColor);
	$draw->setFillColor($fillColor);

	$draw->setStrokeOpacity(1);
	$draw->setStrokeWidth(2);

	$clipPathName = 'testClipPath';
	$draw->setClipUnits(\Imagick::RESOLUTION_PIXELSPERINCH);
	$draw->pushClipPath($clipPathName);
	$draw->rectangle(0, 0, 250, 250);
	$draw->popClipPath();

	$draw->setClipPath($clipPathName);

	//REsolution_PIXELSPERINCH
	//RESOLUTION_PIXELSPERCENTIMETER

	$draw->rectangle(200, 200, 300, 300);
	$imagick = new \Imagick();
	$imagick->newImage(500, 500, $backgroundColor);
	$imagick->setImageFormat("png");

	$imagick->drawImage($draw);

	header("Content-Type: image/png");
	echo $imagick->getImageBlob();
}

?>

setFillAlpha:

DEPRECATED, use setFillOpacity

setFillColor:

Sets the fill color to be used for drawing filled objects

bool setFillColor ( ImagickPixel $fill_pixel )

Example of usage:

<?php
function setFillColor($strokeColor, $fillColor, $backgroundColor) {
	
	$draw = new \ImagickDraw();

	$draw->setStrokeOpacity(1);
	$draw->setStrokeWidth(1.5);
	$draw->setStrokeColor($strokeColor);
	$draw->setFillColor($fillColor);

	$draw->rectangle(50, 50, 150, 150);

	$draw->setFillColor("rgb(200, 32, 32)");
	$draw->rectangle(200, 50, 300, 150);

	$image = new \Imagick();
	$image->newImage(500, 500, $backgroundColor);
	$image->setImageFormat("png");

	$image->drawImage($draw);

	header("Content-Type: image/png");
	echo $image->getImageBlob();
}

?>

It also accepts color definitions in form of names and hexadec:

<?php
$draw = new ImagickDraw();

//Define color black
$draw->setFillColor('black');

//Some light brown
$draw->setFillColor('#a4610f');

?>

setFillOpacity:

Sets the opacity to use when drawing using the fill color or fill texture

bool setFillOpacity ( float $fillOpacity )

Fully opaque is 1.0

When fill color is changed, this is reset to 1.0 or to defined alpha with #aaxxx color format, where aa is alpha.

Example of usage:

<?php
function setFillOpacity($strokeColor, $fillColor, $backgroundColor) {
	
	$draw = new \ImagickDraw();

	$draw->setStrokeColor($strokeColor);
	$draw->setFillColor($fillColor);
	$draw->setStrokeOpacity(1);
	$draw->setStrokeWidth(2);

	$draw->rectangle(100, 200, 200, 300);

	$draw->setFillOpacity(0.4);
	$draw->rectangle(300, 200, 400, 300);

	$imagick = new \Imagick();
	$imagick->newImage(500, 500, $backgroundColor);
	$imagick->setImageFormat("png");
	$imagick->drawImage($draw);

	header("Content-Type: image/png");
	echo $imagick->getImageBlob();
}

?>

setFillPatternURL:

Sets the URL to use as a fill pattern for filling objects. Only local URLs ("#identifier") are supporetd at this time.
These local URLs are normally created by defining a named fill pattern with DrawPushPattern/DrawPopPattern

bool setFillPatternURL ( string $fill_url )

setFillRule:

Sets the fill rule to use while drawing polygons.

bool setFillRule ( int $fill_rule )

<?php
function setFillRule($fillColor, $strokeColor, $backgroundColor) {
	
	$draw = new \ImagickDraw();

	$draw->setStrokeWidth(1);
	$draw->setStrokeColor($strokeColor);
	$draw->setFillColor($fillColor);

	$fillRules = [\Imagick::FILLRULE_NONZERO, \Imagick::FILLRULE_EVENODD];

	$points = 11;
	$size = 150;

	$draw->translate(175, 160);

	for ($x = 0; $x < 2; $x++) {
		$draw->setFillRule($fillRules[$x]);
		$draw->pathStart();
		for ($n = 0; $n < $points * 2; $n++) {

			if ($n >= $points) {
				$angle = fmod($n * 360 * 4 / $points, 360) * pi() / 180;
			}
			else {
				$angle = fmod($n * 360 * 3 / $points, 360) * pi() / 180;
			}

			$positionX = $size * sin($angle);
			$positionY = $size * cos($angle);

			if ($n == 0) {
				$draw->pathMoveToAbsolute($positionX, $positionY);
			}
			else {
				$draw->pathLineToAbsolute($positionX, $positionY);
			}
		}

		$draw->pathClose();
		$draw->pathFinish();

		$draw->translate(325, 0);
	}

	$image = new \Imagick();
	$image->newImage(700, 320, $backgroundColor);
	$image->setImageFormat("png");
	$image->drawImage($draw);

	header("Content-Type: image/png");
	echo $image->getImageBlob();
}

?>

setFont:

sets the fully-specified font to use when annotating with text

bool setFont ( string $font_name )

<?php
function setFont($fillColor, $strokeColor, $backgroundColor) {
	
	$draw = new \ImagickDraw();

	$draw->setStrokeColor($strokeColor);
	$draw->setFillColor($fillColor);

	$draw->setStrokeWidth(2);
	$draw->setFontSize(36);

	$draw->setFont("../fonts/Arial.ttf");
	$draw->annotation(50, 50, "bla");

	$draw->setFont("../fonts/Consolas.ttf");
	$draw->annotation(50, 100, "bla");

	$draw->setFont("../fonts/CANDY.TTF");
	$draw->annotation(50, 150, "bla");

	$draw->setFont("../fonts/Inconsolata-dz.otf");
	$draw->annotation(50, 200, "bla");

	$imagick = new \Imagick();
	$imagick->newImage(500, 300, $backgroundColor);
	$imagick->setImageFormat("png");
	$imagick->drawImage($draw);

	header("Content-Type: image/png");
	echo $imagick->getImageBlob();
}

?>

To aquire the fonts ImageMagick nows about, use this from cmd:

convert -list font

or to find the configured/embedded font list:

$fontList = \Imagick::queryFonts('*');
foreach ( $fontList as $fontName ) {
	echo $fontName . '<br>';
}

setFontFamily:

Sets the font family to use when annotating with text

bool setFontFamily ( string $font_family )

Example of usage:

<?php
function setFontFamily($fillColor, $strokeColor, $backgroundColor) {
	
	$draw = new \ImagickDraw();

	$strokeColor = new \ImagickPixel($strokeColor);
	$fillColor = new \ImagickPixel($fillColor);

	$draw->setStrokeColor($strokeColor);
	$draw->setFillColor($fillColor);

	$draw->setStrokeWidth(2);

	$draw->setFontSize(48);

	$draw->setFontFamily("Times");
	$draw->annotation(50, 50, "bla");

	$draw->setFontFamily("AvantGarde");
	$draw->annotation(50, 100, "bla");

	$draw->setFontFamily("NewCenturySchlbk");
	$draw->annotation(50, 150, "bla");

	$draw->setFontFamily("Palatino");
	$draw->annotation(50, 200, "bla");

	$imagick = new \Imagick();
	$imagick->newImage(450, 250, $backgroundColor);
	$imagick->setImageFormat("png");
	$imagick->drawImage($draw);

	header("Content-Type: image/png");
	echo $imagick->getImageBlob();
}

?>

setFontSize:

Sets the font pointsize to use when annotating with text

bool setFontSize ( float $pointsize )

Example of usage:

<?php
function setFontSize($fillColor, $strokeColor, $backgroundColor) {
	
	$draw = new \ImagickDraw();

	$draw->setStrokeOpacity(1);
	$draw->setStrokeColor($strokeColor);

	$draw->setFillColor($fillColor);

	$draw->setStrokeWidth(2);
	$draw->setFont("../fonts/Arial.ttf");

	$sizes = [24, 36, 48, 60, 72];

	foreach ($sizes as $size) {
		$draw->setFontSize($size);
		$draw->annotation(50, ($size * $size / 16), "bla");
	}

	$imagick = new \Imagick();
	$imagick->newImage(500, 500, $backgroundColor);
	$imagick->setImageFormat("png");

	$imagick->drawImage($draw);

	header("Content-Type: image/png");
	echo $imagick->getImageBlob();
}

?>

The font size is not the size in point (1 point = 1/72 inch) but the fonts hiehgt in pixels.

To account for size of fonts, use according multiplicatiosn to factor size. Such as for 300ppi,
add a 25/6 multiplying factor to it to have itt work correctly.

setFontStretch:

Sets the font stretch to use when annotating with text. The AnyStretch enumeration acts as a 
wild-card "don't care" option.

bool setFontStretch ( int $fontStretch )

Example of usage:

<?php
function setFontStretch($fillColor, $strokeColor, $backgroundColor) {
	
	$draw = new \ImagickDraw();

	$draw->setStrokeColor($strokeColor);
	$draw->setFillColor($fillColor);
	$draw->setStrokeWidth(2);
	$draw->setFontSize(36);

	$fontStretchTypes = [
		\Imagick::STRETCH_ULTRACONDENSED,
		\Imagick::STRETCH_CONDENSED,
		\Imagick::STRETCH_SEMICONDENSED,
		\Imagick::STRETCH_EXPANDED,
		\Imagick::STRETCH_EXTRAEXPANDED,
		\Imagick::STRETCH_ULTRAEXPANDED,
		\Imagick::STRETCH_ANY
	];

	$offset = 0;
	foreach ($fontStretchTypes as $fontStretch) {
		$draw->setFontStretch($fontStretch);
		$draw->annotation(50, 75 + $offset, "bla");
		$offset += 50;
	}

	$imagick = new \Imagick();
	$imagick->newImage(500, 500, $backgroundColor);
	$imagick->setImageFormat("png");
	$imagick->drawImage($draw);

	header("Content-Type: image/png");
	echo $imagick->getImageBlob();
}

?>

setFontStyle:

Sets the font style to use when annotating with text. The AnyStyle enumeration acts as 
a wild-card "don't care" option.

bool setFontStyle ( int $style )

<?php
function setFontStyle($fillColor, $strokeColor, $backgroundColor) {
	$draw = new \ImagickDraw();
	$draw->setStrokeColor($strokeColor);

	$draw->setFillColor($fillColor);
	$draw->setStrokeWidth(1);
	$draw->setFontSize(36);
	$draw->setFontStyle(\Imagick::STYLE_NORMAL);
	$draw->annotation(50, 50, "bla");

	$draw->setFontStyle(\Imagick::STYLE_ITALIC);
	$draw->annotation(50, 100, "bla");

	$draw->setFontStyle(\Imagick::STYLE_OBLIQUE);
	$draw->annotation(50, 150, "bla");

	$imagick = new \Imagick();
	$imagick->newImage(350, 300, $backgroundColor);
	$imagick->setImageFormat("png");
	$imagick->drawImage($draw);

	header("Content-Type: image/png");
	echo $imagick->getImageBlob();
}

?>

setFontWeight:

Sets the font weight to use when annotating with text

bool setFontWeight ( int $font_weight )

The valid range is 100-900. > 551 gives bold.

Example of usage:

<?php
function setFontWeight($fillColor, $strokeColor, $backgroundColor) {
	
	$draw = new \ImagickDraw();

	$draw->setStrokeColor($strokeColor);
	$draw->setFillColor($fillColor);

	$draw->setStrokeWidth(1);

	$draw->setFontSize(36);

	$draw->setFontWeight(100);
	$draw->annotation(50, 50, "bla");

	$draw->setFontWeight(200);
	$draw->annotation(50, 100, "bla");

	$draw->setFontWeight(400);
	$draw->annotation(50, 150, "bla");

	$draw->setFontWeight(800);
	$draw->annotation(50, 200, "bla");

	$imagick = new \Imagick();
	$imagick->newImage(500, 500, $backgroundColor);
	$imagick->setImageFormat("png");
	$imagick->drawImage($draw);

	header("Content-Type: image/png");
	echo $imagick->getImageBlob();
}

?>

setGravity:

sets the text placement gravity to use when annotating with text

bool setGravity ( int $gravity )

The param is one of the constants, and they have int counterparts as follows:

NORTHWEST = 1
NORTH = 2
NORTHEAST = 3
WEST = 4
CENTER = 5
EAST = 6
SOUTHWEST = 7
SOUTH = 8
SOUTHEAST = 9

They can allow us to center text etc if we wish. ALso, example of usage:

<?php
function setGravity($fillColor, $strokeColor, $backgroundColor) {
	
	$draw = new \ImagickDraw();
	$draw->setStrokeColor($strokeColor);
	$draw->setFillColor($fillColor);

	$draw->setStrokeWidth(1);
	$draw->setFontSize(24);

	$gravitySettings = array(
		\Imagick::GRAVITY_NORTHWEST => 'NorthWest',
		\Imagick::GRAVITY_NORTH => 'North',
		\Imagick::GRAVITY_NORTHEAST => 'NorthEast',
		\Imagick::GRAVITY_WEST => 'West',
		\Imagick::GRAVITY_CENTER => 'Centre',
		\Imagick::GRAVITY_SOUTHWEST => 'SouthWest',
		\Imagick::GRAVITY_SOUTH => 'South',
		\Imagick::GRAVITY_SOUTHEAST => 'SouthEast',
		\Imagick::GRAVITY_EAST => 'East'
	);

	$draw->setFont("../fonts/Arial.ttf");

	foreach ($gravitySettings as $type => $description) {
		$draw->setGravity($type);
		$draw->annotation(50, 50, '"' . $description . '"');
	}

	$imagick = new \Imagick();
	$imagick->newImage(500, 500, $backgroundColor);
	$imagick->setImageFormat("png");
	$imagick->drawImage($draw);

	header("Content-Type: image/png");
	echo $imagick->getImageBlob();
}

?>

setResolution:

Sets the resolution

void setResolution ( string $x_resolution, string $y_resolution )

setStrokeAlpha:

Specifies the opacity of stroked object outlines

must be between 0 and 1. Must be set after setStrokeColor()

<?php
function setStrokeAlpha($strokeColor, $fillColor, $backgroundColor) {
	
	$draw = new \ImagickDraw();

	$draw->setStrokeColor($strokeColor);
	$draw->setFillColor($fillColor);
	$draw->setStrokeWidth(4);

	$draw->line(100, 100, 400, 145);
	$draw->rectangle(100, 200, 225, 350);

	$draw->setStrokeOpacity(0.1);
	$draw->line(100, 120, 400, 165);

	$draw->rectangle(275, 200, 400, 350);

	$image = new \Imagick();
	$image->newImage(500, 400, $backgroundColor);
	$image->setImageFormat("png");

	$image->drawImage($draw);

	header("Content-Type: image/png");
	echo $image->getImageBlob();
}

?>

setStrokeAntialias:

Controls whether stroked outlines are AA'd. Stroked outlines are antialiased by default. When AA is disabled
stroked pixels are THed to determine if the stroke color or underlying canvas color should be used.

bool setStrokeAntialias ( bool $stroke_antialias )

Example of usage:

<?php
function setStrokeAntialias($strokeColor, $fillColor, $backgroundColor) {
	
	$draw = new \ImagickDraw();

	$draw->setStrokeColor($strokeColor);
	$draw->setFillColor($fillColor);

	$draw->setStrokeWidth(1);
	$draw->setStrokeAntialias(false);
	$draw->line(100, 100, 400, 105);

	$draw->line(100, 140, 400, 185);

	$draw->setStrokeAntialias(true);
	$draw->line(100, 110, 400, 115);
	$draw->line(100, 150, 400, 195);

	$image = new \Imagick();
	$image->newImage(500, 250, $backgroundColor);
	$image->setImageFormat("png");

	$image->drawImage($draw);

	header("Content-Type: image/png");
	echo $image->getImageBlob();
}

?>

setStrokeColor:

sets the color used for stroking object outlines

bool setStrokeColor( ImagickPixel $stroke_pixel )

Example of usage:

<?php
function setStrokeColor($strokeColor, $fillColor, $backgroundColor) {
	
	$draw = new \ImagickDraw();

	$draw->setStrokeColor($strokeColor);
	$draw->setFillColor($fillColor);

	$draw->setStrokeWidth(5);

	$draw->line(100, 100, 400, 145);
	$draw->rectangle(100, 200, 225, 350);

	$draw->setStrokeOpacity(0.1);
	$draw->line(100, 120, 400, 165);
	$draw->rectangle(275, 200, 400, 350);

	$image = new \Imagick();
	$image->newImage(500, 400, $backgroundColor);
	$image->setImageFormat("png");

	$image->drawImage($draw);

	header("Content-Type: image/png");
	echo $image->getImageBlob();
}

?>

setStrokeDashArray:

Specifies the pattern of dashes and gaps used to stroke paths. The strokeDashArray represents an array of numbers
that specify the lengths of alternating dashes and gaps in pixels.

If an odd number of values is provided, then the list of values is repeated to yield an even number of values.
To remove an existing dash array, pass a zero number_elements argument and null dash_array. A typical strokeDashArray_array
might normally contain the members 5 3 2

bool setStrokeDashArray ( array $dashArray )

Example of usage:

<?php
function setStrokeDashArray($strokeColor, $fillColor, $backgroundColor) {
	
	$draw = new \ImagickDraw();

	$draw->setStrokeColor($strokeColor);
	$draw->setFillColor($fillColor);
	$draw->setStrokeWidth(4);

	$draw->setStrokeDashArray([10, 10]);
	$draw->rectangle(100, 50, 225, 175);

	$draw->setStrokeDashArray([20, 5, 20, 5, 5, 5,]);
	$draw->rectangle(275, 50, 400, 175);

	$draw->setStrokeDashArray([20, 5, 20, 5, 5]);
	$draw->rectangle(100, 200, 225, 350);

	$draw->setStrokeDashArray([1,1,1,1,2,2,3,3,5,5,8,8,13,13,21,21,34,34,55,55,89,89,144,144,233,233,377,377,610,610,987,987
		, 1597, 1597, 2584, 2584, 4181, 4181,]);

	$draw->rectangle(275, 200, 400, 350);

	$image = new \Imagick();
	$image->newImage(500, 400, $backgroundColor);
	$image->setImageFormat("png");
	$image->drawImage($draw);

	header("Content-Type: image/png");
	echo $image->getImageBlob();
}

?>

Another example of usage:

<?php
$base_image = new Imagick('example.png');
$rect = new ImagickDraw();
$rect->setFillColor(new ImagickPixel("#EEEEEE"));

$rect->setFillOpacity(0);
$rect->setStrokeColor(new ImagickPixel("#FF0000"));

$rect->setStrokeDashArray(array(5,5,5));
$rect->rectangle(10, 10, 100, 100);

$base_image->drawImage($rect);

header('Content-Type: image/png');
echo $base_image->getImage();
exit();
?>

setStrokeDashOffset:

Specifies the offset into the dash pattern to start the dash

bool setStrokeDashOffset ( float $dash_offset )

Example of usage:

<?php
function setStrokeDashOffset($strokeColor, $fillColor, $backgroundColor) {
	
	$draw = new \ImagickDraw();

	$draw->setStrokeColor($strokeColor);
	$draw->setFillColor($fillColor);
	$draw->setStrokeWidth(4);

	$draw->setStrokeDashArray([20, 20]);
	$draw->setStrokeDashOffset(0);
	$draw->rectangle(100, 50, 225, 175);

	//Start the dash effect halfway through the solid portion
	$draw->setStrokeDashOffset(10);
	$draw->rectangle(275, 50, 400, 175);

	//Start the dash effect on the space portion
	$draw->setStrokeDashOffset(20);
	$draw->rectangle(100, 200, 225, 350);
	$draw->setStrokeDashOffset(5);
	$draw->rectangle(275, 200, 400, 350);

	$image = new \Imagick();
	$image->newImage(500, 400, $backgroundColor);
	$image->setImageFormat("png");
	$image->drawImage($draw);

	header("Content-Type: image/png");
	echo $image->getImageBlob();
}

?>

setStrokeLineCap:

Specifies the shape to be used at the end of open subpaths when they are stroked.

bool setStrokeLineCap ( int $linecap )

The args which we can use are the constants:

Imagick::LINEJOIN_UNDEFINED

Imagick::LINEJOIN_MITER

Imagick::LINEJOIN_ROUND

Imagick::LINEJOIN_BEVEL

Example of usage:

<?php
function setStrokeLineCap($strokeColor, $fillColor, $backgroundColor) {
	
	$draw = new \ImagickDraw();
	$draw->setStrokeColor($strokeColor);
	$draw->setFillColor($fillColor);
	$draw->setStrokeWidth(25);

	$lineTypes = [\Imagick::LINECAP_BUTT, \Imagick::LINECAP_ROUND, \Imagick::LINECAP_SQUARE,];

	$offset = 0;

	foreach ($lineTypes as $lineType) {
		$draw->setStrokeLineCap($lineType);
		$draw->line(50 * $offset, 50, 50 + $offset, 250);
		$offset += 50;
	}

	$imagick = new \Imagick();
	$imagick->newImage(300, 300, $backgroundColor);
	$imagick->setImageFormat("png");
	$imagick->drawImage($draw);

	header("Content-Type: image/png");
	echo $imagick->getImageBlob();
}

?>

setStrokeLineJoin:

Specifies the shape to be used at the corners of paths (or other vector shapes) when they
are stroked.

bool setStrokeLineJoin ( int $linejoin )

Accepts one of the constants of:

Imagick::LINEJOIN_UNDEFINED

Imagick::LINEJOIN_MITER

Imagick::LINEJOIN_ROUND

Imagick::LINEJOIN_BEVEL

Example of usage:

<?php
function setStrokeLineJoin($strokeColor, $fillColor, $backgroundColor) {
	
	$draw = new \ImagickDraw();
	$draw->setStrokeWidth(1);
	$draw->setStrokeColor($strokeColor);
	$draw->setFillColor($fillColor);

	$draw->setStrokeWidth(20);

	$offset = 220;

	$lineJoinStyle= [
		\Imagick::LINEJOIN_MITER,
		\Imagick::LINEJOIN_ROUND,
		\Imagick::LINEJOIN_BEVEL,
		];

	for ($x = 0; $x < count($lineJoinStyle); $x++) {
		$draw->setStrokeLineJoin($lineJoinStyle[$x]);
		$points = [
			['x' => 40 * 5, 'y' => 10 * 5 + $x * $offset],
			['x' => 20 * 5, 'y' => 20 * 5 + $x * $offset],
			['x' => 70 * 5, 'y' => 50 * 5 + $x * $offset],
			['x' => 40 * 5, 'y' => 10 * 5 + $x * $offset],
		];

		$draw->polyline($points);
	}

	$image = new \Imagick();
	$image->newImage(500, 700, $backgroundColor);
	$image->setImageFormat("png");

	$image->drawImage($draw);

	header("Content-Type: image/png");
	echo $image->getImageBlob();
}

?>

setStrokeMiterLimit:

Specifies the miter limit. When two line segments meet at a sharp angle and miter joins have been
specified for 'lineJoin', it is possible for the miter to extend far beyond the thickness of the line
stroking the path. The miterLimit imposes a limit on the ratio of the miter length to the 
lineWidth.

bool setStrokeMiterLimit ( int $miterlimit )

Example of usage:

<?php
function setStrokeMiterLimit($strokeColor, $fillColor, $backgroundColor) {
	
	$draw = new \ImagickDraw();

	$draw->setStrokeColor($strokeColor);
	$draw->setStrokeOpacity(0.6);
	$draw->setFillColor($fillColor);

	$draw->setStrokeWidth(10);

	$yOffset = 100;

	$draw->setStrokeLineJoin(\Imagick::LINEJOIN_MITER);

	for ($y = 0; $y < 3; $y++) {

		$draw->setStrokeMiterLimit(40 * $y);

		$points = [
			['x' => 22 * 3, 'y' => 15 * 4 + $y * $yOffset],
			['x' => 20 * 3, 'y' => 20 * 4 + $y * $yOffset],
			['x' => 70 * 5, 'y' => 45 * 4 + $y * $yOffset],
		];

		$draw->polygon($points);
	}

	$image = new \Imagick();
	$image->newImage(500, 500, $backgroundColor);
	$image->setImageFormat("png");
	$image->drawImage($draw);

	$image->setImageType(\Imagick::IMGTYPE_PALETTE);
	$image->setImageCompressionQuality(100);
	$image->stripImage();

	header("Content-Type: image/png");
	echo $image->getImageBlob();
}

?>

setStrokeOpacity:

Specifies the opacity of stroked object outlines.

bool setStrokeOpacity( float $stroke_opacity )

Range is 0 to 1.0, 1.0 is fully opaque

Example of usage:

<?php
function setStrokeOpacity($strokeColor, $fillColor, $backgroundColor) {
	$draw = new \ImagickDraw();

	$draw->setStrokeWidth(1);
	$draw->setStrokeColor($strokeColor);
	$draw->setFillColor($fillColor);

	$draw->setStrokeWidth(10);
	$draw->setStrokeOpacity(1);

	$draw->line(100, 80, 400, 125);
	$draw->rectangle(25, 200, 150, 350);
	$draw->setStrokeOpacity(0.5);

	$draw->line(100, 100, 400, 145);
	$draw->rectangle(200, 200, 325, 350);
	$draw->setStrokeOpacity(0.2);

	$draw->line(100, 120, 400, 165);
	$draw->rectangle(375, 200, 500, 350);

	$image = new \Imagick();
	$image->newImage(550, 400, $backgroundColor);
	$image->setImageFormat("png");
	$image->drawImage($draw);

	header("Content-Type: image/png");
	echo $image->getImageBlob();
}

?>

setStrokePatternURL:

Sets the pattern used for stroking object outlines

bool setStrokePatternURL ( string $stroke_url )

setStrokeWidth:

Sets the width of the stroke used to draw object outlines

bool setStrokeWidth ( float $stroke_width )

Example of usage:

<?php
function setStrokeWidth($strokeColor, $fillColor, $backgroundColor) {
	
	$draw = new \ImagickDraw();

	$draw->setStrokeWidth(1);
	$draw->setStrokeColor($strokeColor);

	$draw->setFillColor($fillColor);

	$draw->line(100, 100, 400, 145);
	$draw->rectangle(100, 200, 225, 350);
	$draw->setStrokeWidth(5);

	$draw->line(100, 120, 400, 165);
	$draw->rectangle(275, 200, 400, 350);

	$image = new \Imagick();
	$image->newImage(500, 400, $backgroundColor);
	$image->setImageFormat("png");
	$image->drawImage($draw);

	header("Content-Type: image/png");
	echo $image->getImageBlob();
}

?>

If you set width to 0, there is often still a hairline. To remove it, use transparency:

setStrokeColor("#00000000")
hex 0-6 = color -> black //This is accounted for in the number of 0's
hex 6-8 = opacity -> full transparency

This method (setStrokeWidth) only works if setStrokeColor() is called before.

setTextAlignment:

Specifies a text alignment to be applied when annotating with text.

bool setTextAlignment ( int $alignment )

Example of usage:

<?php
function setTextAlignment($strokeColor, $fillColor, $backgroundColor) {
	$draw = new \ImagickDraw();

	$draw->setStrokeColor($strokeColor);
	$draw->setFillColor($fillColor);

	$draw->setStrokeWidth(1);
	$draw->setFontSize(36);

	$draw->setTextAlignment(\Imagick::ALIGN_LEFT);
	$draw->annotation(250, 75, "bla");

	$draw->setTextAlignment(\Imagick::ALIGN_CENTER);
	$draw->annotation(250, 150, "bla");

	$draw->setTextAlignment(\Imagick::ALIGN_RIGHT);
	$draw->annotation(250, 225, "bla");

	$draw->line(250, 0, 250, 500);

	$imagick = new \Imagick();
	$imagick->newImage(500, 500, $backgroundColor);
	$imagick->setImageFormat("png");
	$imagick->drawImage($draw);

	header("Content-Type: image/png");
	echo $imagick->getImageBlob();
}

?>

And anotehr example of usage:

<?php

	define("LEFT", 1);
	define("CENTER", 2);
	define("RIGHT", 3);

	$w = 400;
	$h = 200;
	$gradient = new Imagick();
	$gradient->newPseudoImage($w, $h, "gradient:red-black");

	$draw = new ImagickDraw();
	$draw->setFontSize(12);
	$draw->setFillColor(new ImagickPixel("#ffffff"));

	$draw->setTextAlignment(LEFT);
	$draw->annotation(150, 30, "Hello world!");
	
	$draw->setTextAlignment(CENTER);
	$draw->annotation(150, 50, "HEllo world!");

	$draw->setTextAlignment(RIGHT);
	$draw->annotation(150, 70, "Hello bla");

	$draw->setFillColor(new ImagickPixel("#0000aa"));
	$x1 = 150;
	$x2 = 150;

	$y1 = 0;
	$y2 = 200;
	$draw->rectangle($x1, $y1, $x2, $y2);

	$gradient->drawImage($draw);

	$gradient->setImageFormat("png");
	header("Content-Type: image/png");
	echo $gradient;
?>

setTextAntialias:

Controls wether text is antialiased. Text is antialiased by default.

bool setTextAntilias ( bool $antiAlias )

Example of usage:

<?php
function setTextAntialias($fillColor, $backgroundColor) {
	
	$draw = new \ImagickDraw();
	$draw->setStrokeColor('none');

	$draw->setFillColor($fillColor);
	$draw->setStrokeWidth(1);
	$draw->setFontSize(32);

	$draw->setTextAntialias(false);
	$draw->annotation(5, 30, "bla");
	$draw->setTextAntialias(true);
	$draw->annotation(5, 65, "bla");

	$imagick = new \Imagick();
	$imagick->newImage(220, 80, $backgroundColor);
	$imagick->setImageFormat("png");
	$imagick->drawImage($draw);

	//Scale the image so that people can see the aliasing
	$imagick->scaleImage(220 * 6, 80 * 6);
	$imagick->cropImage(640, 480, 0, 0);

	header("Content-Type: image/png");
	echo $imagick->getImageBlob();
}

?>

setTextDecoration:

Specifies a decoration to be applied when annotating with text

bool setTextDecoration ( int $decoration )

The params of which can be fed into this, is :

1 : Text will be normal

2 : Underline the text

3 : Upperline the text

4 : Stroke-through

Example of usage:

<?php
function setTextDecoration($strokeColor, $fillColor, $backgroundColor, $textDecoration) {
	
	$draw = new \ImagickDraw();

	$draw->setStrokeColor($strokeColor);
	$draw->setFillColor($fillColor);
	$draw->setStrokeWidth(2);

	$draw->setFontSize(72);
	$draw->setTextDecoration($textDecoration);
	$draw->annotation(50, 75, "bla");

	$imagick = new \Imagick();
	$imagick->newImage(500, 200, $backgroundColor);
	$imagick->setImageFormat("png");
	$imagick->drawImage($draw);

	header("Content-Type: image/png");
	echo $imagick->getImageBlob();
}

?>

setTextEncoding:

Specifies the code set to use for text annotations. The only character encoding which may
be specified at this time is "UTF-8", for representing Unicode as a sequence of bytes.

Specify an empty string to set text encoding to the system's default. Successful text annotation
using Unicode may require fonts designed to support Unicode.

bool setTextEncoding ( string $encoding )

setTextInterlineSpacing:

Sets the text interline spacing

void setTextInterlineSpacing ( float $spacing )

setTextInterwordSpacing:

void setTextInterwordSpacing ( float $spacing )

Sets the text interword spacing

setTextKerning:

void setTextKerning ( float $kerning )

Sets the text kerning

setTextUnderColor:

Specifies the color of a BG rectangle to place under text annotations

bool setTextUnderColor ( ImagickPixel $under_color )

Example of usage:

<?php
function setTextUnderColor($strokeColor, $fillColor, $backgroundColor, $textUnderColor) {
	
	$draw = new \ImagickDraw();

	$draw->setStrokeColor($strokeColor);
	$draw->setFillColor($fillColor);
	$draw->setStrokeWidth(2);

	$draw->setFontSize(72);
	$draw->annotation(50, 75, "bla");
	$draw->setTextUnderColor($textUnderColor);
	$draw->annotation(50, 175, "bla");

	$imagick = new \Imagick();
	$imagick->newImage(500, 500, $backgroundColor);
	$imagick->setImageFormat("png");

	$imagick->drawImage($draw);

	header("Content-Type: image/png");
	echo $imagick->getImageBlob();
}

?>

If we wish to print the text on a photograph and make the text sufficiently 
contrsating to the bg image, use a 4 byte code for colour and transp.

It is the same 4 byte code using by the param '-undercolor' in ImageMagick's command line instruciton
'convert'.

The first 3 bytes are the RGB colour code and the fourth byte is the transparency byte.

<?php
	
	$draw = new ImagickDraw();
	$draw->setFillColor('#ffff00');
	$draw->setFont('Eurostile');

	$draw->setFontSize(21);
	$draw->setTextUnderColor('#ff000088');
	$picin->annotateImage($draw, 40, $height-10, 0, "Hallo");

?>

The above code produces yellow text on a semi transparnet red BG.

setVectorGraphics:

Sets the vector graphics associated with the specified ImagickDraw object. Use this method 
with ImagickDraw::getVectorGraphics() as a method to persist the vector graphics state.

bool setVectorGraphics( string $xml )

Example of usage:

<?php
function setVectorGraphics() {
	//Setup a draw object with some drawing in it
	$draw = new \ImagickDraw();

	$draw->setFillColor("red");
	$draw->circle(20, 20, 50, 50);
	$draw->setFillColor("blue");
	$draw->circle(50, 70, 50, 50);

	$draw->rectangle(50, 120, 80, 150);

	//Get the drawing as a string
	$SVG = $draw->getVectorGraphics();

	//$svg is a string, and could be saved anywhere as a string where a string can be saved

	//Use the saved drawing to generate a new draw object
	$draw2 = new \ImagickDraw();

	//Apparently the SVG text is missing the root element
	$draw2->setVectorGraphics("<root>".$SVG."</root>");

	$imagick = new \Imagick();
	$imagick->newImage(200, 200, 'white');
	$imagick->setImageFormat("png");

	$imagick->drawImage($draw2);

	header("Content-Type: image/png");
	echo $imagick->getImageBlob();
}

?>

setViewbox:

Sets the overall canvas size to be recovered with the drawing vector data. Usually this will
be specified using the same size as the canvas image. When the vector data is saved to SVG or
MVG formats, the viewbox is used to specify the size of the canvas image that a viewer will
render the vector data on.

bool setViewbox ( int $x1, int $y1, int $x2, int $y2 )

Example of usage:

<?php
function setViewBox($strokeColor, $fillColor, $backgroundColor) {
	
	$draw = new \ImagickDraw();

	$draw->setStrokeColor($strokeColor);
	$draw->setFillColor($fillColor);
	$draw->setStrokeWidth(2);
	$draw->setFontSize(72);

	//Sets the overall canvas size to be recovered with the drawing vector data. Usually this
	// will be speicifed using the same size as the canvas image. When the vector data is asved
	// to SVG or MVG formats, the viewbox is used to specify th size of the canvas image that
	// a viewer will render the vector data on

	$draw->circle(250, 250, 250, 0);
	$draw->setviewbox(0, 0, 200, 200);
	$draw->circle(125, 250, 250, 250);
	$draw->translate(250, 125);

	$draw->circle(0, 0, 125, 0);

	$imagick = new \Imagick();
	$imagick->newImage(500, 500, $backgroundColor);
	$imagick->setImageFormat("png");

	$imagick->drawImage($draw);

	header("Content-Type: image/png");
	echo $imagick->getImageBlob();
}

?>

skewX:

Skews the current coordinate system in the horizontal direction

bool skewX ( float $degrees )

Example of usage:

<?php
function skew($strokeColor, $fillColor, $backgroundColor, $fillModifiedColor,
			$startX, $startY, $endX, $endY, $skew) {

	$draw = new \ImagickDraw();

	$draw->setStrokeColor($strokeColor);
	$draw->setStrokeWidth(2);

	$draw->setFillColor($fillColor);
	$draw->rectangle($startX, $startY, $endX, $endY);
	$draw->setFillColor($fillModifiedColor);

	$draw->skewX($skew);
	$draw->rectangle($startX, $startY, $endX, $endY);

	$image = new \Imagick();
	$image->newImage(500, 500, $backgroundColor);
	$image->setImageFormat("png");

	$image->drawImage($draw);

	header("Content-Type: image/png");
	echo $image->getImageBlob();
}

?>

skewY:

Skews the current coordinate system in the vertical direction

bool skewY ( float $degrees )

Example of usage:

<?php
function skewY($strokeColor, $fillColor, $backgroundColor, $fillModifiedColor,
				$startX, $startY, $endX, $endY, $skew) {
	$draw = new \ImagickDraw();

	$draw->setStrokeColor($strokeColor);
	$draw->setStrokeWidth(2);

	$draw->setFillColor($fillColor);
	$draw->rectrangle($startX, $startY, $endX, $endY);
	$draw->setFillColor($fillModifiedColor);

	$draw->skewY($skew);
	$draw->rectangle($startX, $startY, $endX, $endY);

	$image = new \Imagick();
	$image->newImage(500, 500, $backgroundColor);
	$image->setImageFormat("png");
	$image->drawImage($draw);

	header("Content-Type: image/png");
	echo $image->getImageBlob();
}

?>

translate:

Applies a translation to the current coordinate system which moves teh coordinate system
origin to the specified coordinate.

Example of usage:

<?php
function translate($strokeColor, $fillColor, $backgroundColor, $fillModifiedColor,
					$startX, $startY, $endX, $endY, $translateX, $translateY) {

	$draw = new \ImagickDraw();

	$draw->setStrokeColor($strokeColor);
	$draw->setFillColor($fillColor);
	$draw->rectangle($startX, $startY, $endX, $endY);

	$draw->setFillColor($fillModifiedColor);
	$draw->translate($translateX, $translateY);
	$draw->rectangle($startX, $startY, $endX, $endY);

	$image = new \Imagick();
	$image->newImage(500, 500, $backgroundColor);
	$image->setImageFormat("png");

	$image->drawImage($draw);

	header("Content-Type: image/png");
	echo $image->getImageBlob();
}

?>

The above concludes the part of which is the ImagickDraw class.

The next Class in Order is the ImagickPixel class:

ImagickPixel class has the following methods:

clear:

Clears the ImagickPixel object, leaving it in a fresh state. 
This also unsets any color associated with the object.

bool clear()

__construct:

Consturcts an ImagickPixel object. If a color is specified, the object is constructed and then initialised
with that color before being returned.

__construct ([ string $color ])

An example of usage:

<?php
function construct() {
	
	$columns = 4;

	$exampleColors = array(
		"rgba(100%, 0%, 0%, 0.5)",
		"hsb(33.3333%, 100%, 75%)", //Medium green
		"hsl(120, 255, 192.25)", //Medium green
		"graya(50%, 0.5)", //Semi transparent mid gray
		"LightCoral", "none", //"cmyk(0.9, 0.48, 0.83, 0.50)",
		"#f00", // #rgb
		"#ff0000", // #rrggbb
		"#ff0000ff", // #rrggbbaa
		"#ffff00000000", //#rrrrggggbbbb
		"#ffff00000000ffff", // #rrrrggggbbbbaaaa
		"rgb(255, 0, 0)", //An integer in the range 0-255 fore ach component
		"rgba(255, 0, 0, 1.0)", //The same, with an explicit alpha value
		"rgb(100%, 0%, 0%)", // range 0.0% - 100.0%
		"rgba(100%, 0%, 0%, 1.0)", //The same, with an explicit alpha value
	);

	$draw = new \ImagickDraw();
	$count = 0;
	$black = new \ImagickPixel('rgb(0, 0, 0)');

	foreach ($exampleColors as $exampleColor) {
		$color = new \ImagickPixel($exampleColor);

		$draw->setstrokewidth(1.0);
		$draw->setStrokeColor($black);
		$draw->setFillColor($color),

		$offsetX = ($count % $columns) * 50 + 5;
		$offsetY = intval($count / $columns) * 50 + 5;
		$draw->rectangle(0 + $offsetX, 0 + $offsetY, 40 + $offsetX, 40 + $offsetY);
		$count++;
	}

	$image = new \Imagick();
	$image->newImage(350, 350, "blue");
	$image->setImageFormat("png");
	$image->drawImage($draw);
	header("Content-Type: image/png");
	echo $image->getImageBlob();
}

?>

destroy:

Deallocates resources associated with this object

bool destroy()

Deallocates any resources used by the ImagickPixel object, and unsets any associated color.
The object should not be used after the destroy function has been called.

getColor:

Returns the color described by the ImagickPixel object, as an array. if the color has an opacity channel 
set, this is provided as a fourth value in the list.

array getColor ([ bool $normalized = false ])

If the param is set to true, the values are normalized, meaning we get a gradient float, instead
of the 0-255 rgb scale.

The array returned is associative with the values (rgba).

Example of usage:

<?php

//Create an ImagickPixel with the predefined color "brown"
$color = new ImagickPixel("brown");

//Set the color to have an alpha of 25%
$color->setColorValue(Imagick::COLOR_ALPHA, 64 / 256.0);

$colorInfo = $color->getColor();

echo "Standard values".PHP_EOL;
print_r($colorInfo);

$colorInfo = $color->getColor(true);

echo "Normalized values:".PHP_EOL;
print_r($colorInfo);

?>

getColorAsString:

Returns the color of the ImagickPixel object as a string, abstaining the alpha channel.

string getColorAsString()

example of usage:

<?php

//Create an ImagickPixel with the predefined color "brown"
$color = new ImagickPixel("brown");

$color->setColorValue(Imagick::COLOR_ALPHA, 64 / 256.0);

$colorInfo = $color->getColorAsString();

print_r($colorInfo);
?>

The output from above would be:

rgb(165,42,42)

getColorCount:

Returns the color count associated with this color

int getColorCount()

The color count is number of pixels in the image that have the same color as the ImagickPixel

imagickPixel::getColorCount appears to only work for ImagickPixel objects created through 
Imagick::getImageHistogram()

Example of usage:

<?php
	$imagick = new \Imagick();
	$imagick->newPseudoImage(640, 480, "magick:logo");
	$histogramElements = $imagick->getImageHistogram();
	$lastColor = array_pop($histogramElements);

	echo "Last pixel color count is: ".$lastColor->getColorCount();
?>

The output would be similar to:

Last pixel color count is: 256244

getColorQuantum:

Returns the color of the pixel in an array as quantum values. if ImageMagick was compiled as
HDRI these will be floats, otherwise they will be integers.

mixed getColorQuantum()

getColorValue:

Retrieves the value of the color channel specified, as a floating-point number between
0 and 1.

float getColorValue ( int $color )

Example of usage:

<?php

$color = new ImagickPixel('rgba(90%, 20%, 20%, 0.75)');

echo "Alpha value is ".$color->getColorValue(Imagick::COLOR_ALPHA).PHP_EOL;
echo "".PHP_EOL;
echo "Red value is ".$color->getColorValue(Imagick::COLOR_RED).PHP_EOL;
echo "Green value is ".$color->getColorValue(Imagick::COLOR_GREEN).PHP_EOL;
echo "Blue value is ".$color->getColorValue(imagick::COLOR_BLUE).PHP_EOL;
echo "".PHP_EOL;
echo "Cyan value is ".$color->getColorValue(Imagick::COLOR_CYAN).PHP_EOL;
echo "Magenta value is ".$color->getColorValue(Imagick::COLOR_MAGENTA).PHP_EOL;
echo "Yellow value is ".$color->getColorValue(Imagick::COLOR_YELLOW).PHP_EOL;
echo "Black value is ".$color->getColorValue(Imagick::COLOR_BLACK).PHP_EOL;

?>

This outputs stuff on a gradient from 0 to 1.

getColorValueQuantum:

Gets the quantum value of a color in the ImagickPixel. Return value is a float if ImageMagick
was compiled with HDR, otherwise an integer.

mixed getColorValueQuantum()

Example of usage:

<?php
	
	$color = new \ImagickPixel('rgb(128, 5, 255)');
	$colorRed = $color->getColorValueQuantum(\Imagick::COLOR_RED);
	$colorGreen = $color->getColorValueQuantum(\Imagick::COLOR_GREEN);
	$colorBlue = $color->getColorValueQuantum(\Imagick::COLOR_BLUE);
	$colorAlpha = $color->getColorValueQuantum(\Imagick::COLOR_ALPHA);

	printf(
		"Red: %s Green: %s Blue %s Alpha: %s",
		$colorRed,
		$colorGreen,
		$colorBlue,
		$colorAlpha
	);

?>

getHSL:

Returns the normalized HSL color of the ImagickPixel object, with each of three values
as floating point numbers between 0.0 and 1.0

array getHSL()

The returned object is an assocaitive array with the values of hue, satuartion and luminosity

Example of usage:

<?php

$color = new ImagickPixel('rgb(90%, 10%, 10%)');

$colorInfo = $color->getHSL();

print_r($colorInfo);

?>

getIndex:

gets the colormap index of the pixel wand

int getIndex()

isPixelSimilar:

Checks the distance between the color described by this ImagickPixel object and that of hte
provided object, by plotting their RGB values on the color cube. If the distance between the
two points is less than the fuzz value given, the colors are similar. This method replaces
ImagickPixel::isSimilar() and correctly normalises the Fuzz value to ImageMagick QuantumRange.

bool isPixelSimilar ( ImagickPixel $color, float $fuzz )

Notable params:

fuzz: The maximum distance within which to consider these colors as similar. Theoretical maximum for
this value is square root of three (1.732)

isPixelSimilarQuantum:

Returns true if the distance between two colors is less than the specified distance. The fuzz value 
should be in the range 0-QuantumRange. The maximum value represents the longestp ossible
distance in the colorspace, e.g from RGB(0,0,0) to RGB(255,255,255) for the RGB colorspace.

bool isPixelSimilarQuantum ( string $color [, string $fuzz ] )

isSimilar:

Albeit this has been replaced with the isPixelSimilar, i find use in recording the example used to showcase this one:

<?php
	//The tests below are written with the maximum distance expressed as 255
	// so we need to scale them by the square root of 3 - the diagonal length
	// of a unit cube
	$root3 = 1.732050807568877;

	$tests = array(
		['rgb(245, 0, 0)', 	'rgb(255, 0, 0)', 9/$root3, false,],
		['rgb(245, 0, 0)', 	'rgb(255, 0, 0)', 10/$root3, true,],
		['rgb(0,0,0)', 		'rgb(7,7,0)', 	  9/$root3, false,],
		['rgb(0,0,0)', 		'rgb(7,7,0)', 	 10/$root3, true,],
		['rgba(0,0,0,1)', 	'rgba(7, 7, 0, 1)', 9/$root3, false,],
		['rgba(0, 0, 0, 1)', 'rgba(7, 7, 0, 1)', 10/$root3, true,],
		['rgb(128, 128, 128)', 'rgb(128, 128, 120)', 7 / $root3, false,],
		['rgb(128, 128, 128)', 'rgb(128, 128, 120', 8 / $root3, true,],
		['rgb(0, 0, 0)', 'rgb(255, 255, 255)', 254.9, false,],
		['rgb(0, 0, 0)', 'rgb(255, 255, 255)', 255, true,],
		['rgb(255, 0, 0)', 'rgb(0, 255, 255)', 254.9, false,],
		['rgb(255, 0, 0)', 'rgb(0, 255, 255)', 255, true,],
		['black', 		'rgba(0,0,0)', 		0.0, 		true],
		['black', 		'rgba(10, 0, 0, 1.0)', 10.0/$root3, true],);

	$output = "<table width='100%' class='infoTable'><thead>
			<tr>
			<th>
			Color 1
			</th>
			<th>
			Color 2
			</th>
			<th>
				Test distance * 255
			</th>
			<th>
				Is within distance
			</th>
			</tr>
		</thead>";

		$output .= "<tbody>";

		foreach ($tests as $testInfo) {
			$color1 = $testInfo[0];
			$color2 = $testInfo[1];
			$distance = $testInfo[2];

			$expectation = $testInfo[3];
			$testDistance = ($distance / 255.0);

			$color1Pixel = new \ImagickPixel($color1);
			$color2Pixel = new \ImagickPixel($color2);

			$isSimilar = $color1Pixel->isPixelSimilar($color2Pixel, $testDistance);

			if ($isSimilar !== $expectation) {
				echo "Test distance failed. Color [$color1] compared to [$color2] is not within distance $testDistance FAILED.".NL;
			}

			$layout = "<tr>
				<td>%s</td>
				<td>%s</td>
				<td>%s</td>
				<td style='text-align: center;'>%s</td>
			</tr>";

			$output .= sprintf(
				$layout,
				$color1,
				$color2,
				$distance,
				$isSimilar ? 'yes' : 'no'
			);
		}

		$output .= "</tbody></table>";

		return $output;
?>

setColor:

Sets the color described by the ImagickPixel object, with a string (e.g "blue", "#0000ff", "rgb(0,0,255)", "cmyk(100,100,100,10)", etc.).

bool setColor ( string $color )

Example of usage:

<?php
function setColor() {
	$draw = new \ImagickDraw();

	$strokeColor = new \ImagickPixel('green');
	$fillColor = new \ImagickPixel();
	$fillColor->setColor('rgba(100%, 75%, 0%, 1.0)');

	$draw->setstrokewidth(3.0);
	$draw->setStrokeColor($strokeColor);
	$draw->setFillColor($fillColor);

	$draw->rectangle(200, 200, 300, 300);

	$image = new \Imagick();
	$image->newImage(500, 500, "SteelBlue2");
	$image->setImageFormat("png");

	$image->drawImage($draw);

	header("Content-Type: image/png");
	echo $image->getImageBlob();
}

?>

setColorCount:

Sets the color count associated with this color

void setcolorcount ( string $colorCount )

setColorValue:

Sets the value of the specified channel of this object of the provided value, which should
be between 0 and 1. this function can be used to provide an opacity channel to an ImagickPixel
object.

bool setColorValue ( int $color, float $value )

Example of usage:

<?php

$color = new \ImagickPixel('firebrick');

$color->setColorValue(Imagick::COLOR_ALPHA, 0.5);

print_r($color->getcolor(true));
?>

setColorValueQuantum:

Sets the quantum value of a color element of the ImagickPixel

void setColorValueQuantum ( int $color , mixed $value )

Example of usage:

<?php
function setColorValueQuantum() {
	$image = new \Imagick();

	$quantumRange = $image->getQuantumRange();

	$draw = new \ImagickDraw();
	$color = new \ImagickPixel('blue');
	$color->setcolorValueQuantum(\Imagick::COLOR_RED, 128 * $quantumRange['quantumRangeLong'] / 256);

	$draw->setstrokewidth(1.0);
	$draw->setStrokeColor($color);
	$draw->setFillColor($color);

	$draw->rectangle(200, 200, 300, 300);

	$image->newImage(500, 500, "SteelBlue");
	$image->setImageFormat("png");

	$image->drawImage($draw);

	header("Content-Type: image/png");
	echo $image->getImageBlob();
}

?>

setHSL:

Sets the color described by the ImagickPixel object using normalized values for hue,
saturation and luminisoty

bool setHSL ( float $hue , float $saturation , float $luminosity )

params:

hue: The normalized value for hue, described as a fractional arc (between 0 and 1) of the hue circle, where the
zero value is red.

saturation: The normalized value for saturation, with 1 as full saturation

luminosity: The normalized value for luminosity on a scale from black at 0 to white at 1, with the
full HS value at 0.5 luminosity

Example of usage:

<?php

//Create an almost pure red color
$color = new ImagickPixel('rgb(90%, 10%, 10%)');

//Get it's HSL values
$colorInfo = $color->getHSL();

//Rotate the hue by 180 degrees
$newHue = $colorInfo['hue'] + 0.5;
if ($newHue > 1) {
	$newHue = $newHue - 1;
}

//Set the ImagickPixel to the new color
$colorInfo = $color->setHSL($newHue, $colorInfo['saturation'], $colorInfo['luminosity']);

//check taht the new color is blue/green
$colorInfo = $color->getcolor();
print_r($colorInfo);

?>

The above example outputs an array, assocative, with rgba values.

setIndex:

Sets the colormap index of the pixel wand

void setIndex ( int $index )

The above methods covered belonged to ImagickPixel. The following methods,
belong to ImagickPixelIterator:

clear:

Clears resources associated with a PixelIterator

bool clear()

example:

<?php
function clear($imagePath) {
	$imagick = new \Imagick(realpath($imagePath));

	$imageIterator = $imagick->getPixelRegionIterator(100, 100, 250, 200);

	//Loop through pixel rows
	foreach ($imageIterator as $pixels) {
		// @var $pixel \ImagickPixel
		// Loop through the pixels in the row (columns)
		foreach ($pixels as $column => $pixel) {
			if ($column % 2) {
				//paint every second pibxel black
				$pixel->setColor("rgba(0, 0, 0, 0)");
			}
		}

		//Sync the iterator. This is important to do on each iteration
		$imageIterator->syncIterator();
	}

	$imageIterator->clear();

	header("Content-Type: image/jpg");
	echo $imagick;
}

?>

__construct:

The ImagickPixelIterator constructor

__construct ( Imagick $wand )

Example of usage:

<?php
function construct($imagePath) {
	$imagick = new \Imagick(realpath($imagePath));
	$imageIterator = new \ImagickPixelIterator($imagick);

	//Loop through pixel rows
	foreach ($imageIterator as $pixels) {
		//Loop through the pixels in the row (columns)
		foreach ($pixels as $column => $pixel) {
			// @var $pixel \ImagickPixel
			if ($column % 2) {
				//Paint every second pixel black
				$pixel->setColor("rgba(0,0,0,0)");

			}
		}

		//Sync the iterator, this is important t od oon each iteration
		$imageIterator->syncIterator();
	}

	header("Content-Type: image/jpg");
	echo $imagick;
}

?>

destroy:

Deallocates resources associated with a PixelIterator

bool destroy()

getCurrentIteratorRow:

Returns the current row as an array of ImagickPixel objects from the pixel iterator

array getCurrentIteratorRow()

getIteratorRow:

Returns the current pixel iterator row

int getIteratorRow()

getNextIteratorRow:

Returns the next row of the pixel iterator

array getNextIteratorRow()

Example of usage:

<?php
function getNextIteratorRow($imagePath) {
	$imagick = new \Imagick(realpath($imagePath));
	$imageIterator = $imagick->getPixelIterator();

	$count = 0;
	while ($pixels = $imageIterator->getNextIteratorRow()) {
		if (($count % 3) == 0) {
			//LOop through the pixels in the row (columns)
			foreach ($pixels as $column => $pixel) {
				//@var $pixel \ImagickPixel
				if ($column % 2) {
					//paint every second pixel black
					$pixel->setColor("rgba(0, 0, 0, 0)");
				}
			}

			//Sync the iterator, this is important to do on each iteration
			$imageIterator->syncIterator();
		}

		$count += 1;
	}

	header("Content-Type: image/jpg");
	echo $imagick;
}

?>

getPreviousIteratorRow:

Returns the previous row as an array of pixel wands from the pixel iterator

array getPreviousIteratorRow()

newPixelIterator:

Returns a new pixel iterator

bool newPixelIterator ( Imagick $wand )

newPixelRegionIterator:

Returns a new pixel iterator

bool newPixelRegionIterator ( Imagick $wand , int $x, int $y, int $columns, int $rows )

resetIterator:

Resets the pixel iterator. Use it in conjunction with ImagickPixelIterator::getNextIteratorRow() to iterate
over all the pixels in a pixel container.

bool resetIterator()

example:

<?php
function resetIterator($imagePath) {
	
	$imagick = new \Imagick(realpath($imagePath));

	$imageIterator = $imagick->getPixelIterator();

	//Loop through pixel rows
	foreach ($imageIterator as $pixels) {
		//Loop through the pixels in the row (columns)
		foreach ($pixels as $column => $pixel) {
			// @var $pixel \ImagickPixel
			if ($column % 2) {
				//Make every second pixel 25% red
				$pixel->setColorValue(\Imagick::COLOR_RED, 64);
			}
		}

		//Sync the iterator, this is improtant to do on each iteration
		$imageIterator->syncIterator();
	}

	$imageIterator->resetiterator();

	//Loop through pixel rows
	foreach ($imageIterator as $pixels) {
		//loop through the pixels in the row (columns)
		foreach ($pixels as $column => $pixel) {
			//@var $pixel \ImagickPixel
			if ($column % 3) {
				$pixel->setColorValue(\Imagick::COLOR_BLUE,64); //Make every ssecond pixel a little blue
				//$pixel->setColor("rgba(0,0,128, 0)"); //Paint every second pixel somewhat blue
			}
		}

		$imageIterator->syncIterator(); //Sync the iterator, gotta do so each turn
	}

	$imageIterator->clear();

	header("Content-Type: image/jpg");
	echo $imagick;
}

?>

setIteratorFirstRow:

Sets the pixel iterator to the first pixel row

bool setIteratorFirstRow()

setIteratorLastRow:

Sets the pixel iterator to the last pixel row

bool setIteratorLastRow()

setIteratorRow:

Sets the pixel iterator row

bool setIteratorRow ( int $row )

example of usage:

<?php
function setIteratorRow($imagePath) {
	$imagick = new \Imagick(realpath($imagePath));
	$imageIterator = $imagick->getPixelRegionIterator(200, 100, 200, 200);

	for ($x = 0; $x < 20; $x++) {
		$imageIterator->setIteratorRow($x * 5);
		$pixels = $imageIterator->getCurrentIteratorRow();
		//loop through the pixels in the row (columns)
		foreach ($pixels as $pixel) {
			// @var $pixel \ImagickPixel
			// Will go over every 5th row and paint them as black
			$pixel->setColor("rgba(0,0,0,0)");
		}

		//Sync the iterator, important to do on each iteration
		$imageIterator->syncIterator();
	}

	header("Content-Type: image/jpg");
	echo $imagick;
}

?>

syncIterator:

Syncs the pixel iterator

bool syncIterator()

The above methods, were from the ImagickPixelIterator class.

The following, is from the ImagickKernel class:

addKernel:

void addKernel ( ImagickKernel $ImagickKernel )

Attach another kernel to this kernel to allow them to both be applied in a single
morphology or filter function. Returns the new combined kernel.

Example of usage:

<?php
function addKernel($imagePath) {
	$matrix1 = [
		[-1, -1, -1],
		[0, 0, 0],
		[1, 1, 1],
	];

	$matrix2 = [
		[-1, 0, 1],
		[-1, 0, 1],
		[-1, 0, 1],
	];

	$kernel1 = ImagickKernel::fromMatrix($matrix1);
	$kernel2 = ImagickKernel::fromMatrix($matrix2);
	$kernel1->addKernel($kernel2);

	$imagick = new \Imagick(realpath($imagePath));
	$imagick->filter($kernel1);
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

addUnityKernel:

Adds a given amount of the 'Unity' Convolution Kernel to the given pre-scaled and normalized
Kernel. This in effect adds that amount of the original image into the resulting convolution
kernel.

The resulting effect is to convert the defined kernels into blended soft-blurs, unsharp kernels
or into sharpening kernels.

Example of usge:

<?php

	function renderKernelTable($matrix) {
		$output = "<table class='infoTable'>";

		foreach ($matrix as $row) {
			$output .= "<tr>";
			foreach ($row as $cell) {
				$output .= "<td style='text-align:left'>";
				if ($cell === false) {
					$output .= "false";
				}
				else {
					$output .= round($cell, 3);
				}
				$output .= "</td>";

			}
			$output .= "</tr>";
		}

		$output .= "</table>";

		return $output;
	}

	$matrix = [
		[-1, 0, -1],
		[0, 4, 0],
		[-1, 0, -1],
	];

	$kernel = \ImagickKernel::fromMatrix($matrix);
	$kernel->scale(1, \Imagick::NORMALIZE_KERNEL_VALUE);
	$output = "Before adding unity kernel: <br/>";

	$output .= renderKernelTable($kernel->getMatrix());
	$kernel->addUnityKernel(0.5);

	$output .= "After adding unity kernel: <br/>";
	$output .= renderKernelTable($kernel->getMatrix());

	$kernel->scale(1, \Imagick::NORMALIZE_KERNEL_VALUE);
	$output .= "After renormalizing kernel: <br/>";
	$output .= renderKernelTable($kernel->getMatrix());

	echo $output;

?>

And, another example of using addUnityKernel:

<?php
function addUnityKernel($imagePath) {
	
	$matrix = [
		[-1, 0, -1],
		[0, 4, 0],
		[-1, 0, -1],
	];

	$kernel = ImagickKernel::fromMatrix($matrix);

	$kernel->scale(4, \Imagick::NORMALIZE_KERNEL_VALUE);
	$kernel->addUnityKernel(0.5);

	$imagick = new \Imagick(realpath($imagesPath));
	$imagick->filter($kernel);
	header("Content-Type: image/jpg");
	echo $imagick->getImageBlob();
}

?>

fromBuiltIn:

Create a kernel from a builtin in kernel. Currently, the 'rotation' symbols are not supported.

The general structure of feeding in params is a Kernel constant as first param and string that describes
the size as the second arg.

ImagickKernel fromBuiltin ( string $kernelType, string $kernelString )

An example:

$diamondKernel = ImagickKernel::fromBuiltIn(\Imagick::KERNEL_DIAMOND, "2");

Example of usage:

<?php

function renderKernel(ImagickKernel $imagickKernel) {
	$matrix = $imagickKernel->getMatrix();

	$imageMargin = 20;

	$tileSize = 20;
	$tileSpace = 4;

	$shadowSigma = 4;
	$shadowDropX = 20;
	$shadowDropY = 0;

	$radius = ($tileSize / 2) * 0.9;

	$rows = count($matrix);
	$columns = count($matrix[0]);

	$imagickDraw = new \ImagickDraw();

	$imagickDraw->setFillColor('#afafaf');
	$imagickDraw->setStrokeColor('none');

	$imagickDraw->translate($imageMargin, $imageMargin);
	$imagickDraw->push();

	ksort($matrix);

	foreach ($matrix as $row) {
		ksort($row);
		$imagickDraw->push();
		foreach ($row as $cell) {
			if ($cell !== false) {
				$color = intval(255 * $cell);
				$colorString = sprintf("rgb(%f, %f, %f)", $color, $color);
				$imagickDraw->setFillColor($colorString);
				$imagickDraw->rectangle(0, 0, $tileSize, $tileSize);
			}

			$imagickDraw->translate(($tileSize + $tileSpace), 0);
		}

		$imagickDraw->pop();
		$imagickDraw->translate(0, ($tileSize + $tileSpace));
	}

	$imagickDraw->pop();

	$width = ($columns * $tileSize) + (($columns - 1) * $tileSpace);
	$height = ($rows * $tileSize) + (($rows - 1) * $tileSpace);

	$imagickDraw->push();
	$imagickDraw->translate($width/2, $height/2);
	$imagickDraw->setFillColor('rgba(0, 0, 0, 0)');

	$imagickDraw->setStrokeColor('white');
	$imagickDraw->circle(0, 0, $radius - 1, 0);
	$imagickDraw->setStrokeColor('black');

	$imagickDraw->circle(0, 0, $radius, 0);

	$imagickDraw->pop();

	$canvasWidth = $width + (2 * $imageMargin);
	$canvasHeight = $height + (2 * $imageMargin);

	$kernel = new \Imagick();
	$kernel->newPseudoImage(
		$canvasWidth,
		$canvasHeight,
		'canvas:none'
	);

	$kernel->setImageFormat('png');
	$kernel->drawImage($imagickDraw);

	//Create drop shadow on its own layer
	$canvas = $kernel->clone();
	$canvas->setImageBackgroundColor(new \ImagickPixel('rgb(0, 0, 0)'));
	$canvas->shadowImage(100, $shadowSigma, $shadowDropX, $shadowDropY);

	$canvas->setImagePage($canvasWidth, $canvasHeight, -5, -5);
	$canvas->cropImage($canvasWidth, $canvasHeight, 0, 0);

	//Composite original text_layer onto shadow_layer
	$canvas->compositeImage($kernel, \Imagick::COMPOSITE_OVER, 0, 0);
	$canvas->setImageFormat('png');

	return $canvas;
}

function createFromBuiltin($kernelType, $kernelFirstTerm, $kernelSecondTerm, $kernelThirdTerm) {
	$string = '';

	if ($kernelFirstTerm != false && strlen(trim($kernelFirstTerm)) != 0) {
		$string .= $kernelFirstTerm;

		if ($kernelSecondTerm != false && strlen(trim($kernelSecondTerm)) != 0) {
			$string .= ','.$kernelSecondTerm;
			if ($kernelThirdTerm != false && strlen(trim($kernelThirdTerm)) != 0) {
				$string .= ','.$kernelThirdTerm;
			}
		}
	}

	$kernel = ImagickKernel::fromBuiltIn(
		$kernelType,
		$string
	);

	return $kernel;
}

function fromBuiltin($kernelType, $kernelFirstTerm, $kernelSecondTerm, $kernelThirdTerm) {
	$diamondKernel = createFromBuiltin($kernelType, $kernelFirstTerm, $kernelSecondTerm, $kernelThirdTerm);
	$imagick = renderKernel($diamondKernel);

	header("Content-Type: image/png");
	echo $imagick->getImageBlob();
}

fromBuiltin(\Imagick::KERNEL_DIAMOND, 2, false, false);

?>

fromMatrix:

Create a kernel from an 2d matrix of values. Each value should either be a float (if the element should be used)
or 'false' if the element should be skipped. For matrices that are odd sizes in both dimensions then the origin
pixel will default to the centrre of the kernel.

For all other kernel sizes the origin pixel must be specified.

ImagickKernel fromMatrix ( array $matrix [, array $origin ] )

params:

Array: A matrix (i.e 2d array) of values that define the kernel. Each element should be either a float or FALSE
if that element should not be used by the kernel.

array: Which element of the kernel should be used as the origin pixel e.g For a 3x3 matrix specifying
the origin as [2, 2] would specify that the bottom right element should be the origin pixel

Example of usage:

<?php

function renderKernel(ImagickKernel $imagickKernel) {
	$matrix = $imagickKernel->getMatrix();

	$imageMargin = 20;

	$tileSize = 20;
	$tileSpace = 4;

	$shadowSigma = 4;
	$shadowDropX = 20;
	$shadowDropY = 0;

	$radius = ($tileSize / 2) * 0.9;

	$rows = count($matrix);
	$columns = count($matrix[0]);

	$imagickDraw = new \ImagickDraw();

	$imagickDraw->setFillColor('#afafaf');
	$imagickDraw->setStrokeColor('none');

	$imagickDraw->translate($imageMargin, $imageMargin);
	$imagickDraw->push();

	ksort($matrix);

	foreach ($matrix as $row) {
		ksort($row);
		$imagickDraw->push();
		foreach ($row as $cell) {
			if ($cell !== false) {
				$color = intval(255 * $cell);
				$colorString = sprintf("rgb(%f, %f, %f)", $color, $color, $color);

				$imagickDraw->setFillColor($colorString);
				$imagickDraw->rectangle(0, 0, $tileSize, $tileSize);


			}
			$imagickDraw->translate(($tileSize + $tileSpace), 0);
		}

		$imagickDraw->pop();
		$imagickDraw->translate(0, ($tileSize + $tileSpace));
	}

	$imagickDraw->pop();

	$width = ($columns * $tileSize) + (($columns - 1) * $tileSpace);
	$height = ($rows * $tileSize) + (($rows - 1) * $tileSpace);

	$imagickDraw->push();
	$imagickDraw->translate($width/2, $height/2);

	$imagickDraw->setFillColor('rgba(0, 0, 0, 0)');
	$imagickDraw->setStrokeColor('white');

	$imagickDraw->circle(0, 0, $radius - 1, 0);
	$imagickDraw->setStrokeColor('black');

	$imagickDraw->circle(0, 0, $radius, 0);
	$imagickDraw->pop();

	$canvasWidth = $width + (2 * $imageMargin);
	$canvasHeight = $height + (2 * $imageMargin);

	$kernel = new \Imagick();
	$kernel->newPseudoImage(
		$canvasWidth,
		$canvasHeight,
		'canvas:none'
	);


	$kernel->setImageFormat('png');
	$kernel->drawImage($imagickDraw);

	//Create drop shadow on its own layer
	$canvas = $kernel->clone();
	$canvas->setImageBackgroundColor(new \ImagickPixel('rgb(0, 0, 0)'));
	$canvas->shadowImage(100, $shadowSigma, $shadowDropX, $shadowDropY);

	$canvas->setImagePage($canvasWidth, $canvasHeight, -5, -5);
	$canvas->cropImage($canvasWidth, $canvasHeight, 0, 0);

	//Composite original text_layer onto shadow_layer
	$canvas->compositeImage($kernel, \Imagick::COMPOSITE_OVER, 0, 0);
	$canvas->setImageFormat('png');

	return $canvas;
}

function createFromMatrix() {
	$matrix = [
		[0.5, 0, 0.2],
		[0, 1, 0],
		[0.9, 0, false],
	];

	$kernel = \ImagickKernel::fromMatrix($matrix);

	return $kernel;
}

function fromMatrix() {
	$kernel = createFromMatrix();
	$imagick = renderKernel($kernel);

	header("Content-Type: image/png");
	echo $imagick->getImageBlob();
}

?>

getMatrix:

get the 2d matrix of values used in this kernel. The elements are either float for elements that are used
 or 'false' if the element should be skipped.

array getMatrix()

Example of usage:

<?php

function renderKernelTable($matrix) {
	$output = "<table class='infoTable'>";

	foreach ($matrix as $row) {
		$output .= "<tr>";
		foreach ($row as $cell) {
			$output .= "<td style='text-align:left'>";
			if ($cell === false) {
				$output .= "false";
			}
			else {
				$output .= round($cell, 3);
			}
			$output .= "</td>";
		}
		$output .= "</tr>";
	}

	$output .= "</table>";

	return $output;
}

	$output = "The built-in kernel name 'ring' with parameters of '2,3.5':<br/>";
	$kernel = \ImagickKernel::fromBuiltIn(
		\Imagick::KERNEL_RING,
		"2,3.5"
	);

	$matrix = $kernel->getMatrix();
	$output .= renderKernelTable($matrix);

	echo $output;

?>


scale:

ScaleKernelInfo() scales the given kernel list by the given amount, with or without normalization
of the sum of the kernel values (as per given flags).

The exact behaviour of this function depends on the normalization type being used.

Flag should be one of Imagick::NORMALIZE_KERNEL_VALUE, Imagick::NORMALIZE_KERNEL_CORRELATE,
Imagick::NORMALIZE_KERNEL_PERCENT or not set.

void scale()

Example of usage:

<?php

	function renderKernelTable($matrix) {
		$output = "<table class='infoTable'>";

		foreach ($matrix as $row) {
			$output .= "<tr>";
			foreach ($row as $cell) {
				$output .= "<td style='text-align:left'>";
				if ($cell === false) {
					$output .= "false";
				}
				else {
					$output .= round($cell, 3);
				}
				$output .= "</td>";
			}
			$output .= "</tr>";

		}

		$output .= "</table>";

		return $output;
	}

	$output = "";

	$matrix = [
		[-1, 0, -1],
		[0, 4, 0],
		[-1, 0, -1],
	];

	$kernel = \ImagickKernel::fromMatrix($matrix);
	$kernelClone = clone $kernel;

	$output .= "Start kernel<br/>";
	$output .= renderKernelTable($kernel->getMatrix());

	$output .= "Scaling with NORMALIZE_KERNEL_VALUE. The <br/>";
	$kernel->scale(2, \Imagick::NORMALIZE_KERNEL_VALUE);
	$output .= renderKernelTable($kernel->getMatrix());

	$kernel = clone $kernelClone;
	$output .= "Scaling by percent<br/>";
	$kernel->scale(2, \Imagick::NORMALIZE_KERNEL_PERCENT);
	$output .= renderKernelTable($kernel->getMatrix());

	$matrix2 = [
		[-1, -1, 1],
		[-1, false, 1],
		[1, 1, 1],
	];

	$kernel = \ImagickKernel::fromMatrix($matrix2);
	$output .= "Scaling by correlate<br/>";
	$kernel->scale(1, \Imagick::NORMALIZE_KERNEL_CORRELATE);
	$output .= renderKernelTable($kernel->getMatrix());

	return $output;
?>

separate:

array separate()

Separates a linked set of kernels and returns an array of ImagickKernels

Example of usage:

<?php

	function renderKernelTable($matrix) {
		$output = "<table class='infoTable'>";
		foreach ($matrix as $row) {
			$output .= "<tr>";
			foreach ($row as $cell) {
				$output .= "<td style='text-align:left'>";
				if ($cell === false) {
					$output .= "false";
				}
				else{
					$output .= round($cell, 3);
				}
				$output .= "</td>";
			}
			$output .= "</tr>";
		}

		$output .= "</table>";

		return $output;
	}

	$matrix = [
		[-1, 0, -1],
		[0, 4, 0],
		[-1, 0, -1],
	];

	$kernel = \ImagickKernel::fromMatrix($matrix);
	$kernel->scale(4, \Imagick::NORMALIZE_KERNEL_VALUE);
	$diamondKernel = \ImagickKernel::fromBuiltIn(
		\Imagick::KERNEL_DIAMOND,
		"2"
	);

	$kernel->addKernel($diamondKernel);

	$kernelList = $kernel->separate();

	$output = '';
	$count = 0;
	foreach ($kernelList as $kernel) {
		$output .= "<br/>Kernel $count<br/>";
		$output .= renderKernelTable($kernel->getMatrix());
		$count++;
	}

	return $output;

?>

The next section, we will be covering intl:

To install it on ubuntu:

sudo apt-get install php7.0-intl // or sudo apt-get install php5-intl, whatever our version is really

The following is the Runtime configurations related to Intl configure options:

They can be found in php.ini

intl.default_locale string:

The locale taht will be used in intl functions when none is specified (Either by omitting the corresponding
argument or by passing NULL). These are ICU locales, not system locales. 

The default value is empty, which forces the usage of ICU's default locale. once set, the ini setting
cannot be reset to this default value. It is not recommended that this default be relied on, as
its effective value depends on the server's env.

intl.error_level integer:

The level of the error messages generated when an error occurs in ICU functions.
This is a PHP error level, such as E_WARNING. It can be set to 0 in order to
inhibit the messages.

This does not affect the return values indicating error or values returned by
intl_get_error_code() or by the class specific methods for retrieving error
codes and messages.

Choosing E_ERROR will terminate the script whenever an error condition is found
on intl classes.

The default value is 0.

intl.use_exceptions integer:

If set to true, an exception will be raised whenever an error occurs in an intl function. The exception
will be of type IntlException. This is possibly in addition to the error message generated 
due to intl.error_level

The default value is false.

The classes are diverse in this api, thus, we will cover each as they come.

The following methods is for Collator class:

collator_asort:

This function sorts an array such that array indices maintain their correlation with
the array elements they are associated with. This is used mainly when sorting associative
arrays where the actual element order is significant.

Array elements will have sort order according to current locale rules.

This is equivilant to the standard PHP asort()

bool collator_sort ( Collator $coll , array &$arr [, int $sort_flag ] )

params:

coll: COllator object

arr: Array of strings to sort

sort_flag: Optional sorting type, one of the following:

Collator::SORT_REGULAR - compare items normally (do not change types)

Collator::SORT_NUMERIC - compare items numerically

Collator::SORT_STRING - compare items as strings

Default $sort_flag value is Collator::SORT_REGULAR. It is also used if an invalid
$sort_flag value has been specified.

Example of usage:

<?php
$coll = collator_create(  'en_US'  );
$arr = array(
	'a' => '100',
	'b' => '50',
	'c' => 7
);
collator_asort( $coll, $arr, Collator::SORT_NUMERIC );
var_export( $arr );

collator_asort( $coll, $arr, Collator::SORT_STRING );
var_export( $arr );
?>

The above out puts first numeric order, then reversed order due to string length

collator_compare:

Compare two Unicode strings according to collation rules

int collator_compare ( Collator $coll , string $str1 , string $str2 )

Returns 1 if str1 > str2, 0 if str1 === str2 and -1 if str1 < str2

Example of usage:

<?php
$s1 = 'Hello';
$s2 = 'hello';

$coll = collator_create(  'en_US'  );
$res = collator_compare( $coll, $s1, $s2 );

if ($res === false) {
	echo collator_get_error_message( $coll );
} else if ( $res > 0 ) {
	echo "s1 is greater than s2\n";
} else if ( $res < 0) {
	echo "s1 is less than s2\n";
} else {
	echo "s1 is equal to s2\n";
}
?>

__construct:

Creats a new instance of Collator

construct ( string $locale )

Params: 

locale: 

The locale whose collation rules should be used. Special values for locales can be passed in -
if null is passed for the locale, the default locale's collation rules will be used. If "root"
is passed, UCA rules will be used.

The Locale attribute is typically the most important attribute for correct sorting and matching,
according to the user expectations in different countries and regions.

The default UCA ordering will only sort a few languages such as Dutch and Portuguese correctly
("correctly" meaning according to the normal expectations for users of the languages.)

Otherwise, you need to supply the locale to UCA in order to properly collate text for a given
language. Thus a locale needs to be supplied so as to choose a collator that is correctly
tailored for that locale.

The choice of a locale will automatically preset the values for all of the attributes to
something that is reasonable for that locale.

Thus, most of the time the other attributes do not need to be explicitly set. In some cases,
the choice of locale will make a difference in string comparison performance and/or sort
key length.

Example of usage:

<?php
$coll = new Collator(  'en_CA'  );
?>

Returns an "empty" object on error. We can use intl_get_error_code() and/or intl_get_error_message()
to know what happened.

collator_create:

Creates a collator

Collator collator_create ( string $locale )

The strings will be compared using the options already specified.

Example of usage:

<?php
$coll = collator_create(  'en_US'  );

if(  !isset( $coll ) ) {
	printf(  "Collator creation failed: %s\n", intl_get_error_message());
	exit( 1 );
}
?>

collator_get_attribute:

Gets value of an int collation attribute value

int collator_get_attribute ( Collator $coll , int $attr )

Example of usage:

<?php
$coll = collator_create(  'en_CA'  );
$val = collator_get_attribute( $coll, Collator::NUMERIC_COLLATION );
if( $val === false )
{
	//Handle error.
}
?>

collator_get_error_code:

get collator's last error code

int collator_get_error_code ( Collator $coll )

Example of usage:

<?php
$coll = collator_create(  'en_US'  );
if(  collator_get_attribute( $coll, Collator::FRENCH_COLLATION ) === false )
		handle_error( collator_get_error_code() );
?>

collator_get_error_message:

Get text for collator's last error code

string collator_get_error_message ( Collator $coll )

Example of usage:

<?php
$coll = collator_create( 'lt' );
if( collator_compare( $coll, 'y', 'k' ) === false ) {
	echo collator_get_error_message( $coll );
}
?>

collator_get_locale:

Get collector locale name.

string collator_get_locale ( Collator $coll , int $type )

params:

type:

We can choose between valid and actual locale ( Locale::VALID_LOCALE and Locale::ACTUAL_LOCALE )

Example of usage:

<?php
$coll 	= collator_create( 'en_US_California' );
$res_val = collator_get_locale( $coll, Locale::VALID_LOCALE );
$res_act = collator_get_locale( $coll, Locale::ACTUAL_LOCALE );

printf( "Valid locale name: %s\nActual locale name: %s\n", $res_val, $res_act );

?>

The above example outputs:

Requested locale name: en_US_California
Valid locale name: en_US
Actual locale name: en

collator_get_sort_key:

Returns collation key for a string

string collator_get_sort_key ( Collator $coll , string $str )

Collation keys can be compared directly instead of strings.

Example of usage:

<?php
$s1 = 'Hello';

$coll = collator_create(  'en_US'  );
$res = collator_get_sort_key( $coll, $s1 );

echo urlencode($res);
?>

The above example would output:

71%3F%3FE%01%09%01%8F%08%00

collator_get_strength:

get current collation strength

int collator_get_strength ( Collator $coll )

Example of usage:

<?php
$coll = collator_create(  'en_US'  );
$strength = collator_get_strength(  $coll  );
?>

collator_set_attribute:

Set collation attribute

bool collator_set_attribute ( Collator $coll , int $attr , int $val )

Example of usage:

<?php
$coll = collator_create(  'en_CA'  );
$val = collator_get_attribute( $coll, Collator::NUMERIC_COLLATION );
if ($val === false) {
	//HAndle error
} elseif ($val === Collator::ON) {
	//Do something useful
}
?>

collator_set_strength:

Set collation strength

bool collator_set_strength ( Collator $coll , int $strength )

The ICU Collation Service supports many levels of comparison (named "Levels", but also known as "Strengths").
Having these categories enables ICU to sort strings precisely according to local conventions.

However, by allowing the levels to be selectively employed, searching for a string in text can be performed
with various matching conditions.

1. Primary Level: Typically, this is used to denote differences between base chars ( for example, "a" < "b").
It is the strongest difference. For example, dictionaries are divided into different sections by base character.
This is also called the level1 strength.

2. Secondary Level: Accents in the characters are considered secondary differences (for example, "as" < "às" < "at").
Other differences between letters can also be considered secondary differences, depending on the language.
A secondary difference is ignored when there is a primary difference anywhere in the strings. This is also
called the level2 strength.

Note, that in some languages, such as Danish, certain accented letters are considered to be separate base characters.
In most languages, however, an accented letter only has secondary difference from the unaccented version of that letter.

3. Tertiary Level: Upper and lower case differences in characters are distinguished at the tetiary level (for example,
"ao" < "Ao" < "aò"). In addition, a variant of letter differs from the base form on the tertiary level (such as "A" and
""). Another example is the difference between large and small Kana.

A tertiary difference is ignored when there is a primary or secondary difference anywhere in the strings. This is also
called the level3 strength.

4. Quaternary Level: When punctuation is ignored (see Ignoring Puncuations) at level 13, an additional level can be used
to distingusih words with and without punctuation ( for example, "ab" < "a-b" < "aB" ). This difference is ignored when
there is a primary, secondary or tertiary difference.

This is also known as level4 strength. The quaternary level should only be used if ignoring punctuations is required or
when processing Japanese text (see Hiragana processing)

5. Identical Level: When all other levels are equal, the identical level is used as a tiebreaker. The Unicode point
values of the NFD form of each string are compared at this level, just in case there is no difference at levels 14.

For example, hebrew cantillation marks are only distinguished at this level. This level should be used sparingly,
as only code point values differences between two strings is an extremely rare occurence. Using this level substantially
decreases the performance for both incremental comparison and sort key generation (as well as increasing the sort key
length). It is also known as level 5 strength.

For example, people may choose to ignore accents or ignore accents and case when searching for text.
Almost all characters are dinstiguished by the first three levels, and in most locales the default value
is thus Tertiary. However, if Alternate is set to be Shifted, then the Quanternary strength can be used
to break ties among whitespace, punctuation, and symbols that would otherwise be ignored.

If very fine distinctions among characters are required, then the identical strength can be used ( for example,
Identical Strength distinguishes between the Mathematical Bold small A and the Mathematical Italic Small A).

However, using levels higher than Tertiary the Identical strength result in significantly longer sort keys,
and slower string comparison performance for equal strings.

The params of note:

strength:

Collator::PRIMARY

Collator::SECONDARY

Collator::TERTIARY

Collator::QUATERNARY

Collator::IDENTICAL

Collator::DEFAULT_STRENGTH

example of usage:

<?php
$arr = array( 'aô', 'Ao', 'ao' );
$coll = collator_create(  'en_US'  );

//Sort array using default strength
collator_sort( $coll, $arr );
var_export( $arr );

//Sort array using primary strength
collator_set_strength( $coll, Collator::PRIMARY );
collator_sort( $coll, $arr );
var_export( $arr );
?>

collator_sort_with_sort_keys:

Sort array using specified collator and sort keys

bool collator_sort_with_sort_keys ( Collator $coll , array &$arr )

Similar to collator_sort() but uses ICU sorting keys produced by ucol_getSortKey() to gain more
speed on larger arrays.

Example of use:

<?php
$arr = array( 'Köpfe', 'Kypper', 'Kopfe' );
$coll = collator_create(  'sv'  );

collator_sort_with_sort_keys( $coll, $arr );
var_export( $arr );
?>

collator_sort:

Sort array using specified collator

bool collator_sort ( Collator $coll, array &$array [, int $sort_flag ] )

Equivlant to standard PHP sort().

Params of note:

sort_flag:

Optional sorting type, one of the following:

Collator::SORT_REGULAR - compare items normally ( do not change types )

Collator::SORT_NUMERIC - compare items numerically

Collator::SORT_STRING - Compare items as strings

Default sorting is Collator::SORT_REGULAR. It is also used if an invalid sort_flag value
has been specified.

example of usage:

<?php
$coll = collator_create(  'en_US'  );
$arr = array(  'at',  'às', 'as' );

var_export( $arr );
collator_sort( $coll, $arr );
var_export( $arr );
?>

All of the above methods, belong to the Collator class.

All of the following methods, belong to the NumberFormatter class:

__construct:

Creates a number formatter

NumberFormatter numfmt_create ( string $locale , int $style [, string $pattern ] )

There also exists the object oriented styles of creation, going by name of create or __construct.

The params:

style: Style of the formatting. One of the format style constants. If NumberFormatter::PATTERN_DECIMAL or
NumberFormatter::PATTERN_RULEBASED is passed then the number format is opened using the given pattern,
which must conform to the syntax described in ICU DecimalFormat documetnation or ICU RuleBasedNumberFormat
documetnation, respectively.

pattern: Pattern string if the chosen style requires a pattern

examples of usage:

<?php
$fmt = numfmt_create(  'de_DE', NumberFormatter::DECIMAL );
echo numfmt_format($fmt, 1234567.891234567890000)."\n";
$fmt = numfmt_create(  'it', NumberFormatter::SPELLOUT );
echo numfmt_format($fmt, 1142)."\n";
?>

The same could be redone with spawning a new objecti nstead:

<?php
$fmt = new NumberFormatter( 'de_DE', NumberFormatter::DECIMAL );
echo $fmt->format(1234567.891234567890000)."\n";
$fmt = new NumberFormatter( 'it', NumberFormatter::SPELLOUT );
echo $fmt->format(1142)."\n";
?>

The formatter can be trickier than some things, If we wish to wrangle them out, we could do as follows:

<?php
$number = 1234567890;

$formatter = new NumberFormatter('ja_JP', NumberFormatter::SPELLOUT);

$formatter->setTextAttribute(NumberFormatter::DEFAULT_RULESET, "%financial");

echo $formatter->format($number);
//The above outputs japanese letters
?>

When formatting durations using the NumberFormatter::DURATION type, you may also need
to use NumberFormatter::setTextAttribute to get the desired output.

<?php

$fmt = new NumberFormatter('en', NumberFormatter::DURATION);
//Outputs: string(7) "3:25:45"
var_dump($fmt->format(12345));

// "%in-numerals" is the default ruleset, so this results in the same as above
$fmt->setTextAttribute(NumberFormatter::DEFAULT_RULESET, "%in-numerals");
//outputs: string(7) "3:25:45"
var_dump($fmt->format(12345));

$fmt->setTextAttribute(NumberFormatter::DEFAULT_RULESET, "%with-words");
//outputs: string(31) "3 hours, 25 minutes, 45 seconds"
var_dump($fmt->format(12345));

$fmt2 = new NumberFormatter('fr', NumberFormatter::DURATION);
//Outputs: string(7) "12 345"
// see notes below
var_dump($fmt2->format(12345));

?>

Only en supports %in-numerals and %with-words rulesets.

Others just use the DECIMAL type.

A way to apply it to other distrcits, is extracting the ruleset used by NumberFormatter::DURATIOn and adapt 
it for the locales you're targetting. Use NumberFormatter::getPattern to extract the ruleset.

numfmt_format_currency:

Format a currency value according to the formatter rules

string numfmt_format_currency ( NumberFormatter $fmt , float $value , string $currency )

params:

currency: The 3-letter ISO 4217 currency code indicating the currency to use.

example of usage:

<?php
$fmt = numfmt_create( 'de_DE', NumberFormatter::CURRENCY );
echo numfmt_format_currency($fmt, 1234567.891234567890000, "EUR")."\n";
echo numfmt_format_currency($fmt, 1234567.891234567890000, "RUR")."\n";

$fmt = numfmt_create( 'ru_RU', NumberFormatter::CURRENCY );
echo numfmt_format_currency($fmt, 1234567.891234567890000, "EUR")."\n";
echo numfmt_format_currency($fmt, 1234567.891234567890000, "RUR")."\n";
?>

And a equivilant example, but using OO:

<?php
$fmt = new NumberFormatter( 'de_DE', NumberFormatter::CURRENCY );
echo $fmt->formatCurrency(1234567.891234567890000, "EUR")."\n";
echo $fmt->formatCurrency(1234567.891234567890000, "RUR")."\n";

$fmt = new NumberFormatter( 'ru_RU', NumberFormatter::CURRENCY );
echo $fmt->formatCurrency(1234567.891234567890000, "EUR")."\n";
echo $fmt->formatCurrency(1234567.891234567890000, "RUR")."\n";
?>

Outputs different formats of the amount of money

If you are planning to actually use money counting, use BC (binary calculator)
or integers to seperate cents etc. as to not making rounding errors.

When we want to format currency's without sub units and the currency is not the one used
by the given locale you need to set the currency code before as TextAttribute _BEFORE_
setting the NumberFormatter::FRACTION_DIGITS:

<?php
$fmt = new NumberFormatter('en_US', NumberFormatter::CURRENCY);
$fmt->setTextAttribute(NumberFormatter::CURRENCY_CODE, 'EUR');
$fmt->setAttribute(NumberFormatter::FRACTION_DIGITS, 0);
$fmt->formatCurrency(100, 'EUR');
?>

When setting the pattern, do not forget that space chars between currency
symbol and number (either as prefix or suffix) should not be breakable 
(like &nbsp; for HTML). For example, in UTF-8 you should use the no-break
space character ("\xC2\xA0"):

<?php
$fmt = new NumberFormatter('en_US', NumberFormatter::CURRENCY);
$fmt->setPattern(str_replace('¤#', "#\xC2\xA0#", $fmt->getPattern()));
?>

numfmt_format:

Format a numeric value according to the formatter rules

string numfmt_format ( NumberFormatter $fmt , number $value [, int $type ] )

Example of usage:

<?php
$fmt = numfmt_create( 'de_DE', NumberFormatter::DECIMAL );
$data = numfmt_format($fmt, 1234567.891234567890000);
if(intl_is_failure(numfmt_format($fmt))) {
	report_error("Formatter error");
}
?>

Antoher example, but with OO:

<?php
$fmt = new NumberFormatter( 'de_DE', NumberFormatter::DECIMAL );
$fmt->format(1234567.891234567890000);
if(intl_is_failure($fmt->getErrorCode())) {
	report_error("Formatter error!");
}
?>

numfmt_get_attribute:

int numfmt_get_attribute ( NumberFormatter $fmt , int $attr )

Get a numeric attribute associated with the formatter. An example of a numeric attribute 
is the number of integer digits the formatter will produce.

example:

<?php
$fmt = numfmt_create( 'de_DE', NumberFormatter::DECIMAL );
echo "Digits: ".numfmt_get_attribute($fmt, NumberFormatter::MAX_FRACTION_DIGITS)."\n";
echo numfmt_format($fmt, 1234567.891234567890000)."\n";

numfmt_set_attribute($fmt, NumberFormatter::MAX_FRACTION_DIGITS, 2);
echo "Digits: ".numfmt_get_attribute($fmt, NumberFormatter::MAX_FRACTION_DIGITS)."\n";
echo numfmt_format($fmt, 1234567.891234567890000)."\n";
?>

And the OO example:

<?php
$fmt = new NumberFormatter(  'de_DE', NumberFormatter::DECIMAL );
echo "Digits: ".$fmt->getAttribute(NumberFormatter::MAX_FRACTION_DIGITS)."\n";
echo $fmt->format(1234567.891234567890000)."\n";

$fmt->setAttribute(NumberFormatter::MAX_FRACTION_DIGITS, 2);
echo "Digits: ".$fmt->getAttribute(NumberFormatter::MAX_FRACTION_DIGITS)."\n";
echo $fmt->format(1234567.891234567890000)."\n";
?>

numfmt_get_error_code:

Get error code from the last function performed by the formatter

int numfmt_get_error_code ( NumberFormatter $fmt )

Examples of usage:

<?php
$fmt = numfmt_create( 'de_DE', NumberFormatter::DECIMAL );
$data = numfmt_format($fmt, 1234567.891234567890000);
if(intl_is_failure(numfmt_get_error_code($fmt))) {
	report_error("Formatter error");
}
?>

and the OO example:

<?php
$fmt = new NumberFormatter( 'de_DE', NumberFormatter::DECIMAL );
$fmt->format(1234567.891234567890000);
if(intl_is_failure($fmt->getErrorCode())) {
	report_error("Formatter error");
}
?>

numfmt_get_error_message:

Get formatter's last error message

string numfmt_get_error_message ( NumberFormatter $fmt )

Examples of usage:

<?php
$fmt = numfmt_create( 'de_DE', NumberFormatter::DECIMAL );
$data = numfmt_format($fmt, 1234567.891234567890000);
var_dump(numfmt_get_error_message($fmt));
?>

OO example:

<?php
$fmt = new NumberFormatter( 'de_DE', NumberFormatter::DECIMAL );
$fmt->format(1234567.891234567890000);
var_dump(numfmt_get_error_message($fmt));
?>

numfmt_get_locale:

Get formatter locale name

string numfmt_get_locale ( NumberFormatter $fmt [, int $type ] )

params:

type: You can choose between valid and actual locale (Locale::VALID_LOCALE, Locale::ACTUAL_LOCALE, respectively).
The default is the actual locale.

example of usage:

<?php
$req  = 'fr_FR_PARIS';
$fmt  = numfmt_create( $req, NumberFormatter::DECIMAL);
$res_val = numfmt_get_locale( $fmt, Locale::VALID_LOCALE );
$res_act = numfmt_get_locale( $fmt, Locale::ACTUAL_LOCALE );
printf( "Requested locale name: %s\nValid locale name: %s\nActual locale name: %s\n",
			$req, $res_val, $res_act );
?>

Would output:

Requested locale name: fr_FR_PARIS
Valid locale name: fr_FR
Actual locale name: fr

numfmt_get_pattern:

Get formatter pattern

string numfmt_get_pattern ( NumberFormatter $fmt )

Examples of usage:

<?php
$fmt = numfmt_create(  'de_DE', NumberFormatter::DECIMAL );
echo "Pattern: ".numfmt_get_pattern($fmt)."\n";
echo numfmt_format($fmt, 1234567.891234567890000)."\n";

numfmt_set_pattern($fmt, "#0.# kg");
echo "Pattern: ".numfmt_get_pattern($fmt)."\n";
echo numfmt_format($fmt, 1234567.891234567890000)."\n";
?>

OO example:

<?php
$fmt = new NumberFormatter(  'de_DE', NumberFormatter::DECIMAL );
echo "Pattern: ".$fmt->getPattern()."\n";
echo $fmt->format(1234567.891234567890000)."\n";

$fmt->setPattern("#0.# kg");
echo "Pattern: ".$fmt->getPattern()."\n";
echo $fmt->format(1234567.891234567890000)."\n";
?>

It would output:

Pattern: #, ##0.###
1.234.567.891

Pattern: #0.# kg
1234567.9 kg

numfmt_get_symbol:

Get a symbol associated with the formatter. The formatter uses symbols to represent the special
locale-dependent characters in a number, for example the percent sign. This API is not supported
for rule-based formatters.

string numfmt_get_symbol ( NumberFormatter $fmt , int $attr )

Example of usage:

<?php
$fmt = numfmt_create( 'de_DE', NumberFormatter::DECIMAL );
echo "Sep: ".numfmt_get_symbol($fmt, NumberFormatter::GROUPING_SEPARATOR_SYMBOL)."\n";
echo numfmt_format($fmt, 1234567.891234567890000)."\n";

numfmt_set_symbol($fmt, NumberFormatter::GROUPING_SEPARATOR_SYMBOL, "*");
echo "Sep: ".numfmt_get_symbol($fmt, NumberFormatter::GROUPING_SEPARATOR_SYMBOL)."\n";
echo numfmt_format($fmt, 1234567.891234567890000)."\n";
?>

And the oo example:

<?php
$fmt = new NumberFormatter(  'de_DE', NumberFormatter::DECIMAL  );
echo "Sep: ".$fmt->getSymbol(NumberFormatter::GROUPING_SEPARATOR_SYMBOL)."\n";
echo $fmt->format(1234567.891234567890000)."\n";

$fmt->setSymbol(NumberFormatter::GROUPING_SEPARATOR_SYMBOL, "*");
echo "Sep: ".$fmt->getSymbol(NumberFormatter::GROUPING_SEPARATOR_SYMBOL)."\n";
echo $fmt->format(1234567.891234567890000)."\n";
?>

Outputs:

Sep: .
1.234.567,891

Sep: *
1*234*567,891

numfmt_get_text_attribute:

Get a text attribute associated with the formatter. An example of a text attribute is a suffix
for positive numbers. If the formatter does not understand the attribute, U_UNSUPPORTED_ERROR
error is produced.

Rule-based formatters only understand NumberFormatter::DEFAULT_RULESET and NumberFormatter::PUBLIC_RULESETS

example of usage:

<?php
$fmt = numfmt_create( 'de_DE', NumberFormatter::DECIMAL );
echo "Prefix: ".numfmt_get_text_attribute($fmt, NumberFormatter::NEGATIVE_PREFIX)."\n";
echo numfmt_format($fmt, -1234567.891234567890000)."\n";

numfmt_set_text_attribute($fmt, NumberFormatter::NEGATIVE_PREFIX, "MINUS");
echo "Prefix: ".numfmt_get_text_attribute($fmt, NumberFormatter::NEGATIVE_PREFIX)."\n";
echo numfmt_format($fmt, -1234567.891234567890000)."\n";
?>

Example of OO approach:

<?php
$fmt = new NumberFormatter( 'de_DE', NumberFormatter::DECIMAL );
echo "Prefix: ".$fmt->getTextAttribute(NumberFormatter::NEGATIVE_PREFIX)."\n";
echo $fmt->format(-1234567.891234567890000)."\n";

$fmt->setTextAttribute(NumberFormatter::NEGATIVE_PREFIX, "MINUS");
echo "Prefix: ".$fmt->getTextAttribute(NumberFormatter::NEGATIVE_PREFIX)."\n";
echo $fmt->format(-1234567.89123456789000)."\n";
?>

Outputs:

Prefix: -
-1.234.567,891
Prefix: MINUS
MINUS1.234.567,891

numfmt_parse_currency:

Parse a string into a double and a currency using the current formatter

float numfmt_parse_currency ( NumberFormatter $fmt, string $value, string &$currency [, int &$position ] )

example of usage:

<?php
$fmt = numfmt_create(  'de_DE', NumberFormatter::CURRENCY );
$num = "1.234.567,89\xc2\xa0$";
echo "We have ".numfmt_parse_currency($fmt, $num, $curr)." in $curr\n";
?>

And the OO Approach:

<?php
$fmt = new NumberFormatter(  'de_DE', NumberFormatter::CURRENCY );
$num = "1.234.567,89\xc2\xa0$";
echo "We have ".$fmt->parseCurrency($num, $curr)." in $curr\n";
?>

Another example:

<?php
$region = 'en_US';
$currency = 'USD';
$formatter = new NumberFormatter($region, NumberFormatter::CURRENCY);
echo $formatter->parseCurrency(12543.67, $currency);
?>

Would output:

We have 1234567.89 in USD

Outputs:

$12.543.67

And to use strict types in PHP 7, use:

<?php
declare(strict_types=1);
namespace MMNewmedia;

$oParser = new \NumberFormatter('de_DE', \NumberFormatter::CURRENCY);
var_dump($oParser->parseCurrency("1.234.567.89\xc2\xa0€", $currency), $currency);
?>

And if we want to parse floats into a currency string, we can use the formatCurrency:

<?php
declare(strict_types=1);
namespace MMNewmedia;

$oFormatter = new \NumberFormatter('de_DE', \NumberFormatter::CURRENCY);
var_dump($oFormatter->formatCurrency(1234567.89, 'EUR'));
?>

numfmt_parse:

Parse a string into number using the current formatter rules

mixed numfmt_parse ( NumberFormatter $fmt , string $value [, int $type [, int &$position ]] )

Example of usage:

<?php
$fmt = numfmt_create( 'de_DE', NumberFormatter::DECIMAL );
$num = "1.234.567.891";
echo numfmt_parse($fmt, $num)."\n";
echo numfmt_parse($fmt, $num, NumberFormatter::TYPE_INT32)."\n";
?>

OO example of usage:

<?php
$fmt = new NumerFormatter( 'de_DE', NumberFormatter::DECIMAL );
$num = "1.234.567.891";
echo $fmt->parse($num)."\n";
echo $fmt->parse($num, NumberFormatter::TYPE_INT32)."\n";
?>

numfmt_set_attribute:

Set a numeric attribute associated with the formatter. An example of a numeric
attribute is the number of integer digits the formatter will produce.

bool numfmt_set_attribute ( NumberFormatter $fmt, int $attr, int $value )

Examples of usage:

<?php
$fmt = numfmt_create( 'de_DE', NumberFormatter::DECIMAL );
echo "Digits: ".numfmt_get_attribute($fmt, NumberFormatter::MAX_FRACTION_DIGITS)."\n";
echo numfmt_format($fmt, 1234567.891234567890000)."\n";
numfmt_set_attribute($fmt, NumberFormatter::MAX_FRACTION_DIGITS, 2);
echo "Digits: ".numfmt_get_attribute($fmt, NumberFormatter::MAX_FRACTION_DIGITS)."\n";
echo numfmt_format($fmt, 1234567.891234567890000)."\n";
?>

OO example:

<?php
$fmt = new NumberFormatter( 'de_DE', NumberFormatter::DECIMAL );
echo "Digits: ".$fmt->getAttribute(NumberFormatter::MAX_FRACTION_DIGITS)."\n";
echo $fmt->format(1234567.891234567890000)."\n";
$fmt->setAttribute(NumberFormatter::MAX_FRACTION_DIGITS, 2);
echo "Digits: ".$fmt->getAttribute(NumberFormatter::MAX_FRACTION_DIGITS)."\n";
echo $fmt->format(1234567.891234567890000)."\n";
?>

Output:

Digits: 3
1.234.567,891
Digits: 2
1.234.567,89

numfmt_set_pattern:

Set the pattern used by the formatter. Can not be used on a rule-based
formatter.

bool numfmt_set_pattern ( NumberFormatter $fmt, string $pattern )

Example of usage:

<?php
$fmt = numfmt_create( 'de_DE', NumberFormatter::DECIMAL );
echo "Pattern: ".numfmt_get_pattern($fmt)."\n";
echo numfmt_format($fmt, 1234567.891234567890000)."\n";
numfmt_set_pattern($fmt, "#0.# kg");
echo "Pattern: ".numfmt_get_pattern($fmt)."\n";
echo numfmt_format($fmt, 1234567.891234567890000)."\n";
?>

OO example:

<?php
$fmt = new NumberFormatter( 'de_DE', NumberFormatter::DECIMAL );
echo "Pattern: ".$fmt->getPattern()."\n";
echo $fmt->format(1234567.891234567890000)."\n";

$fnt->setPattern("#0.# kg");
echo "Pattern: ".$fmt->getPattern()."\n";
echo $fmt->format(1234567.891234567890000)."\n";
?>

numfmt_set_symbol:

Set a symbol associated with the formatter. The formatter uses symbols to represent
the special locale-dependent characters in a number for example the percent sign.

This API is not supported for rule-based formatters.

bool numfmt_set_symbol ( NumberFormatter $fmt, int $attr, string $value )

Example of usage:

<?php
$fmt = numfmt_create( 'de_DE', NumberFormatter::DECIMAL );
echo "Sep: ".numfmt_get_symbol($fmt, NumerFormatter::GROUPING_SEPARATOR_SYMBOL)."\n";
echo numfmt_format($fmt, 1234567.891234567890000)."\n";

numfmt_set_symbol($fmt, NumberFormatter::GROUPING_SEPARATOR_SYMBOL, "*");
echo "Sep: ".numfmt_get_symbol($fmt, NumberFormatter::GROUPING_SEPARATOR_SYMBOL)."\n";
echo numfmt_format($fmt, 1234567.891234567890000)."\n";
?>

Example of OO usage:

<?php
$fmt = new NumberFormatter( 'de_DE', NumberFormatter::DECIMAL );
echo "Sep: ".$fmt->getSymbol(NumberFormatter::GROUPING_SEPARATOR_SYMBOL)."\n";
echo $fmt->format(1234567.891234567890000)."\n";

$fmt->setSymbol(NumberFormatter::GROUPING_SEPARATOR_SYMBOL, "*");
echo "Sep: ".$fmt->getSymbol(NumberFormatter::GROUPING_SEPARATOR_SYMBOL)."\n";
echo $fmt->format(1234567.891234567890000)."\n";
?>

Outputs:

Sep: .
1.234.567,891
Sep: *
1*234*567,891

numfmt_set_text_attribute:

Set a text attribute associated with the formatter. An example of text attirbutes is the suffix
for positive numbers. If the formatter does not understand teh attribute, U_UNSUPPORTED_ERROR
error is produced.

Rule-based formatters only understand NumberFormatter::DEFAULT_RULESET and NumberFormatter::PUBLIC_RULESETS

bool numfmt_set_text_attribute ( NumberFormatter $fmt, int $attr, string $value )

Example of usage:

<?php
$fmt = numfmt_create( 'de_DE', NumberFormatter::DECIMAL );
echo "Prefix: ".numfmt_get_text_attribute($fmt, NumberFormatter::NEGATIVE_PREFIX)."\n";
echo numfmt_format($fmt, -1234567.891234567890000)."\n";

numfmt_set_text_attribute($fmt, NumberFormatter::NEGATIVE_PREFIX, "MINUS");
echo "Prefix: ".numfmt_get_text_attribute($fmt, NumberFormatter::NEGATIVE_PREFIX)."\n";
echo $fmt->format(-1234567.891234567890000)."\n";
?>

outputs:

Prefix: -
-1.234.567,891

Prefix: MINUS
MINUS1.234.567,891

The above methods, were NumberFormatter. The following methods, belong to the Locale class:

locale_accept_from_http:

Tries to find locale that can satisfy the language list that is requested by the HTTP "Accept-Language" header.

string locale_accept_from_http ( string $header )

If the user browser does not send a HTTP_ACCEPT_LANGUAGE , the output from:

Locale::acceptFromHttp($_SERVER['HTTP_ACCEPT_LANGUAGE']);

will be null. Account for this.

example of usage:

<?php
$locale = locale_accept_from_http($_SERVER['HTTP_ACCEPT_LANGUAGE']);
echo $locale;
?>

OO example:

<?php
$locale = Locale::acceptFromHttp($_SERVER['HTTP_ACCEPT_LANGUAGE']);
echo $locale;
?>

The above outputs:

en_US

locale_canonicalize:

string canonicalize ( string $locale )

Canonicalize the locale string

this method performs Level 1 and Level 2 canonicalization according to ICU standards.

Example:

echo \Locale::canonicalize ( 'en-US.utf8' );
// "en_U"
echo \Locale::canonicalize ( 'FR-fr@EURO' );
// "fr_FR@currency=EUR"
echo \Locale::canonicalize ( '' );
// "en_US_POSIX"

locale_compose:

string locale_compose ( array $subtags )

Returns a correctly ordered and delimeted locale ID the keys identify the particular locale ID subtags,
and the values are the associated subtag values

The params:

subtags: An array containing a list of key-value pairs, where the keys identify the particular ID subtags,
and the values are the associated subtag values.

note: The 'variant' and 'private' subtags can take maximum 15 values whereas "extlang" can take 
maximum 3 values e.g. Variants are allowed with the suffix ranging from 0-14. Hence the keys 
for the input array can be variant0, variant1, ..., variant14.

In the returned locale id, the subtag is ordered by suffix resulting in variant0 followed by variant1
followed by variant2 by so on.

The 'variant', 'private' and 'extlang' multiple values can be specified both as array under specific
key (e.g 'variant') and as multiple numbered keys (e.g 'variant0', 'variant1',etc.)

Example of usage:

<?php
$arr = array(
	'language'=>'en',
	'script' => 'Hans',
	'region' => 'CN',
	'variant2' => 'rozaj',
	'variant1' => 'nedis',
	'private1' => 'prv1',
	'private2' => 'prv2'
);
echo locale_compose( $arry );
?>

Example of OO usage:

<?php
$arr = array(
	'language'=>'en',
	'script' => 'Hans',
	'region' => 'CN',
	'variant2' => 'rozaj',
	'variant1' => 'nedis',
	'private1' => 'prv1',
	'private2' => 'prv2'
);
echo Locale::composeLocale( $arr );
?>

The above outputs:

Locale: en_Hans_CN_nedis_rozaj_x_prv1_prv2

locale_filter_matches:

Checks if a $langtag filter matches with $locale according to
RFC 4647's basic filtering algorithm

bool locale_filter_matches ( string $langtag, string $locale [, bool $canonicalize = false ] )

Examples of usage:

<?php
echo (locale_filter_matches('de-DEVA','de-DE', false)) ? "Matches" : "Does not match";
echo '; ';

echo (locale_filter_matches('de-DE_1996', 'de-DE', false)) ? "Matches" : "Does not match";
?>

OO example of usage:

<?php
echo (Locale::filterMatches('de-DEVA','de-DE', false)) ? "Matches" : "Does not match";
echo '; ';
echo (Locale::filterMatches('de-DE-1996', 'de-DE', false)) ? "Matches" : "Does not match";
?>

locale_get_all_variants:

gets the variants for the input locale

array locale_get_all_variants ( string $locale )

Examples of usage:

<?php
$arr = locale_get_all_variants('sl_IT_NEDIS_ROJAZ_1901');
var_export( $arr );
?>

Example of OO usage:

<?php
$arr = locale::getAllVariants('sl_IT_NEDIS_ROJAX_1901');
var_export( $arr );
?>

Would output an associative array of Nedis, Rojaz, 1901

locale_get_default:

Gets the default locale value. At the PHP initialization this value is set to 'intl.default_locale' value
from php.ini if that value exists or from ICU's function uloc_getDefault()

string locale_get_default()

Examples of usage:

<?php
ini_set('intl.default_locale', 'de-DE');
echo locale_get_default();
echo '; ';
locale_set_default('fr');
echo locale_get_default();
?>

Examples of OO usage:

<?php
ini_set('intl.default_locale', 'de-DE');
echo Locale::getDefault();
echo '; ';
Locale::setDefault('fr');
echo Locale::getDefault();
?>

locale_get_display_language:

Returns an appropiately localized display name for language of the input locale.
if it is null, then the default locale is used.

string locale_get_display_language ( string $locale [, string $in_locale ] )

Example of usage:

<?php
echo locale_get_display_language('sl-Latn-IT-nedis', 'en');
echo ";\n";
echo locale_get_display_language('sl-Latn-IT-nedis', 'fr');
echo ";\n";
echo locale_get_display_language('sl-Latn-IT-nedis', 'de');
?>

Example of OO usage:

<?php
echo Locale::getDisplayLanguage('sl-Latn-IT-nedis', 'en');
echo ";\n";
echo Locale::getDisplayLanguage('sl-Latn-IT-nedis', 'fr');
echo ";\n";
echo Locale::getDisplayLanguage('sl-Latn-IT-nedis', 'de');
?>

Would output:

Slovenian;
slov\xc3\xa8ne;
Slowenisch

locale_get_display_name:

Returns an appropiately localized display name for the input locale.
If NULL, then the default locale is used.

string locale_get_display_name ( string $locale [, string $in_locale ] )

Examples of usage:

<?php
echo locale_get_display_name('sl-Latn-IT-nedis', 'en');
echo ";\n";
echo locale_get_display_name('sl-Latn-IT-nedis', 'fr');
echo ";\n";
echo locale_get_display_name('sl-Latn-IT-nedis', 'de');
?>

OO example:

<?php
echo Locale::getDisplayName('sl-Latn-IT-nedis', 'en');
echo ";\n";
echo Locale::getDisplayName('sl-Latn-IT-nedis', 'fr');
echo ";\n";
echo Locale::getDisplayName('sl-Latn-IT-nedis', 'de');
?>

Example of output:

Slovenian (Latin, Italy, Natisone dialect);
slov\xc3\xa8ne (latin, Italie, dialecte de Natisone);
Slowenisch (Lateinisch, Italien, NEDIS)

locale_get_display_region:

Returns an appropiately localized display name for region of the input locale.
If it is NULL then the default locale is used.

string locale_get_display_region ( string $locale [, string $in_locale ] )

Examples of output:

<?php
echo locale_get_display_region('sl-Latn-IT-nedis', 'en');
echo ";\n";
echo locale_get_display_region('sl-Latn-IT-nedis', 'fr');
echo ";\n";
echo locale_get_display_region('sl-Latn-IT-nedis', 'de');
?>

Example of OO approach:

<?php
echo Locale::getDisplayRegion('sl-Latn-IT-nedis', 'en');
echo ";\n";
echo Locale::getDisplayRegion('sl-Latn-IT-nedis', 'fr');
echo ";\n";
echo Locale::getDisplayRegion('sl-Latn-IT-nedis', 'de');
?>

We do not need to have a full formed locale for the first param, allowing us to get country
names in differing dialects and languages:

<?php
var_dump(Locale::getDisplayRegion('-US', 'fr'));

//Returns
string 'Ètats-Unis' (length=11)
?>

What follows is an example of retrieving country codes in different languages:

function countryNameToISO3166($country_name, $language) {
	if (strlen($language) != 2) {
		//Language must be on 2 characters
		return NULL;
	}

	//Set uppercase ifn ever
	$language = strtoupper($language);

	$countrycode_list = array('AF', 'AX', //What follows is a shit ton of country codes);
	$ISO3166 = NULL;

	//Loop all country codes
	foreach ($countrycode_list as $countrycode) {
		$locale_cc = Locale::getDisplayRegion('-' . $countrycode, $language);
		//Case insensitive
		if (strcasecmp($country_name, $locale_cc) == 0) {
			$ISO3166 = $countrycode;
			break;
		}
	}
	//Return null if not found or country code
	return $ISO3166;
}

usage would be:

$cc=countryNameToISO3166('Costa Rica', 'US');
echo '<br>(English) Country code for Costa Rica is '.$cc;

would output:

(English) Country code for Costa Rica is CR

etc.

locale_get_display_script:

Returns an appropiately localized display name for script of the input locale.
If is NULL then the default locale is used.

string locale_get_display_script ( string $locale [, string $in_locale ] )

Example of usage:

<?php
echo locale_get_display_script('st-Latn-IT-nedis', 'en');
echo ";\n";
echo locale_get_display_script('st-Latn-IT-nedis', 'fr');
echo ";\n";
echo locale_get_display_script('st-Latn-IT-nedis', 'de');
?>

Example of OO usage:

<?php
echo Locale::getDisplayScript('sl-Latn-IT-nedis', 'en');
echo ";\n";
echo Locale::getDisplayScript('sl-Latn-IT-nedis', 'fr');
echo ";\n";
echo Locale::getDisplayScript('sl-Latn-IT-nedis', 'de');
?>

locale_get_display_variant:

string locale_get_display_variant ( string $locale [, string $in_locale ] )

Returns an appropiately localized display name for variants of the input locale.
If it is NULL, then the default locale is used.

Examples of usage:

<?php
echo locale_get_display_variant('sl-Latn-IT-nedis', 'en');
echo ";\n";
echo locale_get_display_variant('sl-Latn-IT-nedis', 'fr');
echo ";\n";
echo locale_get_display_variant('sl-Latn-IT-nedis', 'de');
?>

Example of OO Usage:

<?php
echo Locale::getDisplayVariant('sl-Latn-IT-nedis', 'en');
echo ";\n";
echo Locale::getDisplayVariant('sl-Latn-IT-nedis', 'fr');
echo ";\n";
echo Locale::getDisplayVariant('sl-Latn-IT-nedis', 'de');
?>

locale_get_keywords:

Gets the keywords for the input locale

array locale_get_keywords ( string $locale )

Examples of usage:

<?php
$keywords_arr = locale_get_keywords( 'de_DE@currency=EUR;collation=PHONEBOOK' );
if ($keywords_arr) {
	foreach ($keywords_arr as $key => $value) {
		echo "$key = $value\n";
	}
}
?>

Example of OO usage:

<?php
$keywords_arr = Locale::getKeywords( 'de_DE@currency=EUR;collation=PHONEBOOK' );
if ($keywords_arr) {
	foreach( $keywords_arr as $key => $value){
		echo "$key = $value\n";
	}
}
?>

locale_get_primary_language:

Gets the primary language for the input locale

string locale_get_primary_language ( string $locale )

If a false value is passed to this method, it defaults to the default system language.

Examples of usage:

<?php
echo locale_get_primary_language('zh-Hant');
?>

OO usage:

<?php
echo Locale::getPrimaryLanguage('zh-Hant');
?>

locale_get_region:

Gets the region for the input locale

string locale_get_region ( string $locale )

This one does not contain validation against values, it just does a close enough extraction if it find similarity.

Example of usage:

<?php
echo locale_get_region('de-CH-1901');
?>

Example of OO usage:

<?php
echo Locale::getRegion('de-CH-1901');
?>

locale_get_script:

Gets the script for the input locale

Does not perform validation, just runs close enough approximations

string locale_get_script ( string $locale )

Examples of usage:

<?php
echo locale_get_script('sr-Cyrl');
?>

OO example:

<?php
echo Locale::getScript('sr-Cyrl');
?>

locale_lookup:

Searches the items in langtag for the best match to the language range specified in locale according
to RFC 4647's lookup algo.

string locale_lookup ( array $langtag , string $locale [, bool $canonicalize= false [, string $default ]] )

To get the default locale, use array(false). If we use an empty array, we get an empty string.

The params:

langtag: An array containing a list of language tags to compare to locale. Maximum 100 items allowed.

locale: The locale to use as the language range when matching.

canonicalize: if true, the arguments will be converted to canonical form before matching.

default: The locale to use if no match is found

example:

<?php
$arr = array(
	'de-DEVA',
	'de-DE-1996',
	'de',
	'de-DE'
);
echo locale_lookup($arr, 'de-DE-1996-x-prv1-prv2', true, 'en_US');
?>

OO example:

<?php
$arr = array(
	'de-DEVA',
	'de-DE-1996',
	'de',
	'de-De'
);
echo Locale::lookup($arr, 'de-DE-1996-x-prv1-prv2', true, 'en_US');
?>

locale_parse:

Returns a key-value array of locale ID subtag elements.

array locale_parse ( string $locale )

params:

locale: The locale to extract the subtag array from. Note: the 'variant' and 'private' subtags can take maximum
15 values where as 'extlang' can take maximum 3 values.

Return Values:

Returns an array containing a list of key-value pairs, where the keys identify the particular locale ID subtags,
and the values are the associated subtag values. The array will be ordered as the locale id subtags, e.g in
the locale id if variants are '-varX-varY-varZ' then the returned array will have:

variant0=>varX, variant1=>varY, variant2=>varZ

Returns null when the length of locale exceeds INTL_MAX_LOCALE_LEN

Example of usage:

<?php
$arr = locale_parse('sl-Latn-IT-nedis');
if ($arr) {
	foreach ($arr as $key => $value) {
		echo "$key : $value , ";
	}
}
?>

Example of OO usage:

<?php
$arr = Locale::parseLocale('sl-Latn-IT-nedis');
if ($arr) {
	foreach ($arr as $key => $value) {
		echo "$key : $value , ";
	}
}
?>

Output:

language : sl , script : Latn , region : IT , variant0 : NEDIS ,

locale_set_default:

Sets the default runtime locale to $locale. This changes the value of INTL global 'default_locale' locale identifier.
UAX #35 extensions are accepted.

Examples of usage:

<?php
locale_set_default('de-DE');
echo locale_get_default();
?>

Example of OO usage:

<?php
Locale::setDefault('de-DE');
echo Locale::getDefault();
?>

The above methods belonged to Locale class. The following, belong to Normalizer:

normalizer_is_normalized:

Checks if the provided string is already in teh specified normalization form

bool normalizer_is_normalized ( string $input [, int $form = Normalizer::FORM_C ] )

Example of usage:

<?php
$char_A_ring = "\xC3\x85"; //'LATIN CAPITAL LETTER A WITH RING ABOVE' (U+00C5)
$char_combining_ring_above = "\xCC\x8A"; // 'COMBINING RING ABOVE' (U+030A)

$char_orig = 'A' . $char_combining_ring_above;
$char_norm = normalizer_normalize( 'A' . $char_combining_ring_above, Normalizer::FORM_C );

echo ( normalizer_is_normalized($char_orig, Normalizer::FORM_C) ) ? "normalized" : "not normalized";
echo '; ';
echo ( normalizer_is_normalized($char_horm, Normalizer::FORM_C) ) ? "normalized" : "not normalized";
?>

OO example:

<?php
$char_A_ring = "\xC3\x85"; // 'LATIN CAPITAL LETTER A WITH RING ABOVE' (U+00C5)
$char_combining_ring_above = "\xCC\x8A"; //'COMBINING RING ABOVE' (U+030A)

$char_orig = 'A' . $char_combining_ring_above;
$char_norm = Normalizer::normalize( 'A' . $char_combining_ring_above, Normalizer::FORM_C );

echo ( Normalizer::isNormalized($char_orig, Normalizer::FORM_C) ) ? "normalized" : "not normalized";
echo '; ';
echo ( Normalizer::isNormalized($char_norm, Normalizer::FORM_C) ) ? "normalized" : "not normalized";
?>

normalizer_normalize:

Normalizes the input provided and returns the normalized string

string normalizer_normalize ( string $input [, int $form = Normalizer::FORM_C ] )

Examples of usage:

<?php
$char_A_ring = "\xC3\x85"; // 'LATIN CAPITAL LETTER A WITH RING ABOVE' (U+00C5)
$char_combining_ring_above = "\xCC\x8A"; // 'COMBINING RING ABOVE' (U+030A)

$char_1 = normalizer_normalize( $char_A_ring, Normalizer::FORM_C );
$char_2 = normalizer_normalize( 'A' . $char_combining_ring_above, Normalizer::FORM_C );

echo urlencode($char_1);
echo ' ';
echo urlencode($char_2);
?>

Example of OO usage:

<?php
$char_A_ring = "\xC3\x85"; // 'LATIN CAPITAL LETTER A WITH A RING ABOVE' (U+00C5)
$char_combining_ring_above = "\xCC\x8A"; // 'COMBINING RING ABOVE' (U+030A)

$char_1 = Normalizer::normalize( $char_A_ring, Normalizer::FORM_C);
$char_2 = Normalizer::normalize( 'A' . $char_combining_ring_above, Normalizer::FORM_C );

echo urlencode($char_1);
echo ' ';
echo urlencode($char_2);
?>

The above will output:

%C3%85 %C3%85

If we wish, we can use the original abbreviations:

<?php
Normalizer::NFD;
Normalizer::NFKD;
Normalizer::NFC;
Normalizer::NFKC;
?>

Also, an example of a function that strips away accents of texts in terms of comparisons follows:

<?php

function normalizeUtf8String( $s)
{
	//Normalizer-class missing
	if (! class_exists("Normalizer", $autoload = false))
		return $original_string;

	//maps  German (umlauts) and other EU chars onto two chars before just removing diacritics
	$s = preg_replace( '@\x{00c4}@u', "AE", $s); //umlaut Ä => AE
	$s = preg_replace( '@\x{00d6}@u', "OE", $s); //umlaut Ö => OE
	$s = preg_replace( '@\x{00dc}@u', "UE", $s); //umlaut Ü => UE
	$s = preg_replace( '@\x{00e4}@u', "ae", $s); //umlaut ä => ae
	$s = preg_replace( '@\x{00f6}@u', "oe", $s); //umlaut ö => oe
	$s = preg_replace( '@\x{00fc}@u', "ue", $s); //umlaut ü => ue
	$s = preg_replace( '@\x{00f1}@u', "ny", $s); //ñ => ny
	$s = preg_replace( '@\x{00ff}@u', "yu", $s); //ÿ => yu

	//maps special chars on their base char followed by the diacritical mark
	//Example: Ú => U´, á => a`
	$s = Normalizer::normalize( $s, Normalizer::FORM_D );

	$s = preg_replace( '@\pM@u', "", $s); //removes diacritics

	$s = preg_replace( '@\x{00df}@u', "ss", $s); //maps german S to ss
	$s = preg_replace( '@\x{00c6}@u', "AE", $s); // Danish AE => AE
	$s = preg_replace( '@\x{00e6}@u', "ae", $s); //etc, this list is just examplarey of converting hexadecimal binary codes to other formats

	//Remove all non-ascii chars
	$s = preg_replace( '@[^\0-\x80]@u', "", $s);

	//Possible errors in UTF-8-regex
	if (empty($s))
		return $original_string;
	else
		return $s;
}
?>

If we get error messages while starting apache of xampp package with activated extension=intl.ddl,
copy the:

icudt##.dll
icuin##.dll
icuio##.dll
icule##.dll
iculx##.dll
icutu##.dll
icuuc##.dll

## = version number

from "/program files/xampp/php"
into "/program files/xampp/apache/bin" or whever our xampp resides.

The above methods, belong to Normalizer class. The following, belong to MessageFormatter:

msgfmt_create:

Constructs a new Message Formatter

MessageFormatter msgfmt_create ( string $locale, string $pattern )

Params:

pattern: The pattern string to stick args into. The pattern uses an 'apostrophe-friendly' syntax.
It is run through umsg_autoQuoteApostrophe before being interpeted.

Example of usage:

<?php
$fmt = msgfmt_create("en_US", "{0,number,integer} monkeys on {1,number,integer} trees make {2, number} monkeys per tree");

echo msgfmt_format($fmt, array(4560, 123, 4560/123));

$fmt = msgfmt_create("de", "{0,number,integer} Affen auf {1,number,integer} Bäumen sind {2,number} Affen pro Baum");
echo msgfmt_format($fmt, array(4560, 123, 4560/123));
?>

Note: parsing in an empty string gives null, not a string to parse.

OO showcase:

<?php
$fmt = new MessageFormatter("en_US"; "{0,number,integer} monkeys on {1,number,integer} trees make {2, number} monkeys per tree");
echo $fmt->format(array(4560, 123, 4560/123));

$fmt = new MessageFormatter("de", "{0,number,integer} Affen auf {1,number,integer} Bäumen sind {2, number} Affen pro Baum");
echo $fmt->format(array(4560, 123, 4560/123));
?>

Outputs:

4,560 monkeys on 123 trees make 37.073 monkeys per tree
4.560 Affen auf 123 Bäumen sind 37,073 Affen pro Baum

msgfmt_format_message:

Quick format message

string msgfmt_format_message ( string $locale, string $pattern, array $args)

Quick formatting function that formats the string without having to explicitly create teh formatter object.
use this function when the format operation is odne only once and does not need any parameters or state to be kept.

Examples of usage:

<?php
echo msgfmt_format_message("en_US", "{0,number,integer} monkeys on {1,number,integer} trees make {2,number} monkeys per
tree\n", array(4560, 123, 4560/123));

echo msgfmt_format_message("de", "{0,number,integer} Affen auf {1,number,integer} Bäumen sind {2,number} Affen pro Baum
\n", array(4560, 123, 4560/123));
?>

Example of OO usage:

<?php
echo MessageFormatter::formatMessage("en_US"; "{0,number,integer} monkeys on {1,number, integer} trees make {2,number}
monkeys per tree\n", array(4560, 123, 4560/123));

echo MessageFormatter::formatMessage("de", "{0,number,integer} Affen auf {1,number,integer} Bäumen sind {2, number}
Affen pro Baum\n", array(4560, 123, 4560/123));
?>

Outputs same messages as bnefore.

Another example of usage:

<?php
var_dump(
	msgfmt_format_message('ru_RU', 'The value of {somekey} is {0, choice, 0 #less 12| 12 #between 12 and 32| 32 #more than 32}',
		['SomeAnotherKey' => -1]),
	msgfmt_format_message('ru_RU', 'The value of {somekey} is {0, choice, 0 #less 12| 12 #between 12 and 32| 32 #more than 32}', [14]),
	msgfmt_format_message('ru_RU', 'The value of {somekey} is {0, choice, 0 #less 12| 12 #between 12 and 32| 32 #more than 32}', [133]),
	msgfmt_format_message('ru_RU', '{0, plural, =0{Zero}=1{One}other{Unknown #}}', [0]),
	msgfmt_format_message('ru_RU', '{0, plural, =0{Zero}=1{One}other{Unknown #}}', [1]),
	msgfmt_format_message('ru_RU', '{0, plural, =0{Zero}=1{One}other{Unknown #}}', [2]),
	msgfmt_format_message('ru_RU', '{0, select, somevalue{This is some value} other{Unknown value}}', ['somevalue']),
	msgfmt_format_message('ru_RU', '{0, select, somevalue{This is some value} other{Unknown value "{0}"}}',
	['somevalue2'])
);

var_dump(
	msgfmt_format_message('en_GB', 'Peter has {0, plural, =0{no cat} =1{a cat} other{# cats}}', [0]),
	msgfmt_format_message('en_GB', 'Peter has {0, plural, =0{no cat} =1{a cat} other{# cats}}', [1]),
	msgfmt_format_message('en_GB', 'Peter has {0, plural, =0{no cat} =1{a cat} other{# cats}}', [2])
);
?>

Example of output:

Output (PHP 5.4.1RC1)
===============================
string 'The value of -1 is less 12' (length=26)
String 'The value of 14 is between 12 and 32' (length=36)
string 'The value of 133 is more than 32' (length=32)
string 'Zero' (length=4)

string 'One' (length=3)
string 'Unknown 2' (length=9)
string 'This is some value' (length=18)

string 'Unknown value "somevalue2"' (length=26)
string 'Peter has no cat' (length=16)
string 'Peter has a cat' (length=15)
string 'Peter has 2 cats' (length=16)

msgfmt_format:

Format the message by substituting the data into the format string according to the 
locale rules

string msgfmt_format ( MessageFormatter $fmt, array $args )

example of usage:

<?php
$fmt = msgfmt_create("en_US", "{0,number,integer} monkeys on {1,number,integer} trees make {2,number} monkeys per tree");

echo msgfmt_format($fmt, array(4560, 123, 4560/123));

$fmt = msgfmt_create("de", "{0,number,integer} Affen auf {1,number,integer} Bäumen sind {2,number} Affen pro Baum");
echo msgfmt_format($fmt, array(4560, 123, 4560/123));
?>

Example of OO:

<?php
$fmt = new MessageFormatter("en_US", "{0,number,integer} monkeys on {1,number,integer} trees make {2,number} monkeys per tree");
echo $fmt->format(array(4560, 123, 4560/123));

$fmt = new MessageFormatter("de", "{0,number,integer} Affen auf {1,number,integer} Bäumen sind {2,number} Affen pro Baum");
echo $fmt->format(array(4560, 123, 4560/123));
?>

msgfmt_get_error_code:

Get the error code from the last operation

int msgfmt_get_error_code ( MessageFormatter $fmt )

Example of usage:

<?php
$fmt = msgfmt_create("en_US", "{0, number} monkeys on {1, number} trees");
$str = msgfmt_format($fmt, array());
if(!$str) {
	echo "ERROR: ".msgfmt_get_error_message($fmt) . " (" . msgfmt_get_error_code($fmt) . ")\n";
}
?>

Another example, with OO:

<?php
$fmt = new MessageFormatter("en_US", "{0, number} monkeys on {1, number} trees");
$str = $fmt->format(array());
if(!$str) {
	echo "ERROR: ".$fmt->getErrorMessage() . " (" . $fmt->getErrorCode() . ")\n";
}
?>

Will output:

ERROR: msgfmt_format: not enough parameters: U_ILLEGAL_ARGUMENT_ERROR (1)

msgfmt_get_error_message:

Get the error text from the last operation

string msgfmt_get_error_message ( MessageFormatter $fmt )

Example of usage:

<?php
$fmt = msgfmt_create("en_US", "{0, number} monkeys on {1, number} trees");
$str = msgfmt_format($fmt, array());
if(!$str) {
	echo "ERROR: ".msgfmt_get_error_message($fmt) . " (" . msgfmt_get_error_code($fmt) . ")\n";
}
?>

Example of OO usage:

<?php
$fmt = new MessageFormatter("en_US", "{0, number} monkeys on {1, number} trees");
$str = $fmt->format(array());
if(!$str) {
	echo "ERROR: ".$fmt->getErrorMessage() . " ( " . $fmt->getErrorCode() . ")\n"; 
}
?>

The above outputs:

Error: msgfmt_format: not enough parameters: U_ILLEGAL_ARGUMENT_ERROR (1)

msgfmt_get_locale:

Get the locale for which the formatter was created

string msgfmt_get_locale ( NumberFormatter $formatter )

Examples of usage:

<?php
$fmt = msgfmt_create('en_US', "Number {0,number}");
echo msgfmt_get_locale($fmt);
?>

Example of OO usage:

<?php
$fmt = new MessageFormatter('en_US', "Number {0, number}");
echo $fmt->getLocale();
?>

The above outputs:

en_US

msgfmt_get_pattern:

Get the pattern used by the formatter

string msgfmt_get_pattern ( MessageFormatter $fmt )

Examples of usage:

<?php
$fmt = msgfmt_create( "en_US", "{0, number} monkeys on {1, number} trees");
echo "Default pattern: '". msgfmt_get_pattern( $fmt ) . "'\n";
echo "Formatting result: " . msgfmt_format( $fmt, array(123, 456) ) . "\n";

msgfmt_set_pattern( $fmt, "{0, number} trees hosting {1, number} monkeys" );
echo "New pattern: '" . msgfmt_get_pattern( $fmt ) . "'\n";
echo "Formatted number: ". msgfmt_format( $fmt, array(123, 456) ) . "\n";
?>

Example of OO usage:

<?php
$fmt = new MessageFormatter( "en_US", "{0, number} monkeys on {1, number} trees" );
echo "Default pattern: '" . $fmt->getPattern() . "'\n";
echo "Formatting result: " . $fmt->format(array(123, 456)) . "\n";

$fmt->setPattern("{0, number} trees hosting {1, number} monkeys" );
echo "New pattern: '" . $fmt->getPattern() . "'\n";
echo "Formatted number: " . $fmt->format(array(123, 456)) . "\n";
?>

Outputs:

Default pattern: '{0, number} monkeys on {1, number} trees'
Formatting result: 123 monkeys on 456 trees
New pattern: '{0, number} trees hosting {1, number} monkeys'
Formatted number: 123 trees hosting 456 monkeys

msgfmt_parse_message:

Parses input string without explicitly creating the formatter object. use this function when
the format operation is done only once and does not need any parameters or state to be kept.

array msgfmt_parse_message ( string $locale, string $pattern, string $value )

Examples of usage:

<?php
$fmt = msgfmt_parse_message('en_US', "{0,number,integer} monkeys on {1,number,integer} trees make {2, number} monkeys 
per tree", "4,560 monkeys on 123 trees makes 37.073 monkeys per tree");
var_export($fmt);

$fmt = msgfmt_parse_message('de', "{0,number,integer} Affen auf {1, number, integer} Baümen sind {2, number} Affen pro
baum", "4.560 affen auf 123 Bäumen sind 37,073 Affen pro Baum");
var_export($fmt);
?>

Example of OO usage:

<?php
$fmt = MessageFormatter::parseMessage('en_US', "{0,number,integer} monkeys on {1,number,integer} trees make {2, number}
monkeys per tree", "4,560 monkeys on 123 trees make 37.073 monkeys per tree");
var_export($fmt);

$fmt = MessageFormatter::parseMessage('de', "{0,number,integer} Affen auf {1, number, integer} Bäumen sind {2, number}
Aff en pro Baum", "4.560 Affen auf 123 Bäumen sind 37,073 Affen pro Baum");
var_export($fmt);
?>

This would output an assocaitive array with the respective values at indexes:

array(
	0 => 4560,
	1 => 123,
	2 => 37.073,
)

etc.

msgfmt_parse:

Parses input string and return any extracted items as an array

array msgfmt_parse ( MessageFormatter $fmt , string $value )

Examples of usage:

<?php
$fmt = msgfmt_create('en_US', "{0,number,integer} monkeys on {1,number,integer} trees make {2,number} monkeys per tree");

$res = msgfmt_parse($fmt, "4,560 monkeys on 123 trees make 37.073 monkeys per tree");
var_export($res);

$fmt = msgfmt_create('de', "{0,number,integer} Affen auf (1,number,integer) Bäumen sind {2,number} Affen pro Baum");
$res = msgfmt_parse($fmt, "4.560 Affen auf 123 Bäumen sind 37,073 Affen pro Baum");
var_export($res);
?>

Example of OO usage:

<?php
$fmt = new MessageFormatter('en_US', "{0,number,integer} monkeys on {1,number,integer} trees make {2,number} monkeys per
tree");
$res = $fmt->parse("4,560 monkeys on 123 trees make 37.073 per tree");
var_export($res);

$fmt = new MessageFormatter('de', "{0,number,integer} Affen auf {1, number, integer} Bäumen sind {2, number} Affen pro
baum");
$res = $fmt->parse("4.560 Affen auf 123 Bäumen sind 37,073 Affen pro Baum");
var_export($res);
?>

The examples output associative arrays bound by appearence of numbers and relevant indexing

array(
	0 => 4560,
	1 => 123,
	2 => 37.073,
)

msgfmt_set_pattern:

bool msgfmt_set_pattern ( MessageFormatter $fmt, string $pattern )

Set the pattern used by the formatter

Example of usage:

<?php
$fmt = msgfmt_create( "en_US", "{0, number} monkeys on {1, number} trees" );
echo "Default pattern: '" . msgfmt_get_pattern( $fmt ) . "'\n";
echo "Formatting Result: " . msgfmt_format( $fmt, array(123,456) ) . "\n";

msgfmt_set_pattern( $fmt, "{0, number} trees hosting {1, number} monkeys" );
echo "New pattern: '" . msgfmt_get_pattern( $fmt ) . "'\n";
echo "Formatted number: " . msgfmt_format( $fmt, array(123, 456) ) . "\n";
?>

Example of OO layout:

<?php
$fmt = new MessageFormatter( "en_US", "{0, number} monkeys on {1, number} trees" );
echo "Default pattern: '" . $fmt->getPattern() . "'\n";
echo "Formatting result: " . $fmt->format(array(123,456)) . "\n";

$fmt->setPattern("{0, number} trees hosting {1, number} monkeys" );
echo "New pattern: '" . $fmt->getPattern() . "'\n";
echo "Formatted number: " . $fmt->format(array(123, 456)) . "\n";
?>

Output:

Default pattern: '{0, number} monkeys on {1, number} trees'
Formatting result: 123 monkeys on 456 trees
New pattern: '{0,number} trees hosting {1, number} monkeys'
Formatted number: 123 trees hosting 456 monkeys

The above methods, eblong to MessageFormatter. Next up, is IntlCalendar:

intlcal_add:

bool intlcal_add ( IntlCalendar $cal , int $field, int $amount )

Add a signed amount to a field. Adding a positive amount allows advances in time, even if the
numeric value of the field decreases (e.g when working with years in BC dates).

Other fields may need to adjust - for instance, adding a month to the 31st of January will result in the 28th (or 29th)
of February. Contrary to intlCalendar::roll(), when a value wraps around, more significant fields may change.
For instance, adding a day to the 31st of January will result in the 1st of February, not the 1st of January.

The params:

field: one of the IntlCalendar date/time field constants. These integer values between 0 and IntlCalendar::FIELD_COUNT.

Amount: The signed amount to add to the current field. If the amount is positive, the instant will be moved 
forward, if it is negative, the instant will be moved into the past. The units are implicit to the field type.

For instance, hours for IntlCalendar::FIELD_HOUR_OF_DAY

Example of usage:

<?php
ini_set('intl.default_locale', 'fr_FR');
ini_set('date.timezone', 'UTC');

$cal = new IntlGregorianCalendar(2012, 0 /* January */, 31);
echo IntlDateFormatter::formatObject($cal), "\n";

$cal->add(IntlCalendar::FIELD_MONTH, 1);
echo IntlDateFormatter::formatObject($cal), "\n";

$cal->add(IntlCalendar::FIELD_DAY_OF_MONTH, 1);
echo IntlDateFormatter::formatObject($cal), "\n";

The above outputs:

31 janv. 2012 00:00:00
29 févr. 2012 00:00:00
1 mars 2012 00:00:00

after:

Returns whether this object's time succeeds the argument's time.

bool intlcal_after ( IntlCalendar $cal , IntlCalendar $other )

Example of usage:

<?php
$cal1 = IntlCalendar::createInstance();
$cal2 = clone $cal1;

var_dump($cal1->after($cal2), //false
		$cal2->after($cal1)); //False

$cal1->roll(IntlCalendar::FIELD_MILLISECOND, true);

var_dump($cal1->after($cal2), //True
		$cal2->after($cal1)); //false

before:

Returns wether this object's time precedes the argument's time

bool intlcal_before ( IntlCalendar $cal , IntlCalendar $other )

Works akin to after.

clear:

Clears either all of the fields or a specific field. A cleared field is marked as unset,
giving it the lowest priority against overlapping fields or even default values when
calculating the time. Additionally, its value is set to 0, though given the field's
lower priority, its value may have been internally set to another, by the time
the field has finished being queried.

example of usage:

<?php
ini_set('intl.default_locale', 'es_ES');
ini_set('date.timezone', 'UTC');

$fields = array(
	'FIELD_ERA' => 0,
	'FIELD_YEAR' => 1,
	'FIELD_MONTH' => 2,
	'FIELD_WEEK_OF_YEAR' => 3,
	'FIELD_WEEK_OF_MONTH' => 4,
	'FIELD_DATE' => 5,
	'FIELD_DAY_OF_YEAR' => 6,
	'FIELD_DAY_OF_WEEK' => 7,
	'FIELD_DAY_OF_WEEK_IN_MONTH' => 8,
	'FIELD_AM_PM' => 9,
	'FIELD_HOUR' => 10,
	'FIELD_HOUR_OF_DAY' => 11,
	'FIELD_MINUTE' => 12,
	'FIELD_SECOND' => 13,
	'FIELD_MILLISECOND' => 14,
	'FIELD_ZONE_OFFSET' => 15,
	'FIELD_DST_OFFSET' => 16,
	'FIELD_YEAR_WOY' => 17,
	'FIELD_DOW_LOCAL' => 18,
	'FIELD_EXTENDED_YEAR' => 19,
	'FIELD_JULIAN_DAY' => 20,
	'FIELD_MILISECONDS_IN_DAY' => 21,
	'FIELD_IS_LEAP_MONTH' => 22,
	'FIELD_FIELD_COUNT' => 23,
);
function getSetFields(IntlCalendar $cal) {
	global $fields;
	$ret = array();
	foreach ($fields as $name => $value) {
		if ($cal->isSet($value)) {
			$ret[] = $name;
		}
	}
	return $ret;
}

$cal = new IntlGregorianCalendar(2013, 2 /* March */, 15);
echo "After GregorianCalendar creation\n";
print_r(getSetFields($cal));
echo "\n";

echo IntlDateFormatter::formatObject($cal), "\n";
echo "After the formatter requested the extended year\n";
print_r(getSetFields($cal));
echo "\n";

$cal->clear(IntlCalendar::FIELD_YEAR);
echo "After the year has been cleared, the date stays the same\n";
echo IntlDateFormatter::formatObject($cal), "\n";
echo "because FIELD_EXTENDED_YEAR is still set\n";
print_r(getSetFields($cal));
echo "\n";

var_dump($cal->clear(IntlCalendar::FIELD_EXTENDED_YEAR));
echo "After the extended year has been cleared\n";
print_r(getSetFields($cal));
echo IntlDateFormatter::formatObject($cal), "\n";
echo "\n";

echo "After the fields are recalculated,\n"
		. " extended year is set again (to 1970)\n";
print_r(getSetFields($cal));
echo "\n";

$cal->clear();
echo "After calling variant with no arguments\n";
print_r(getSetFields($cal));
echo IntlDateFormatter::formatObject($cal), "\n";

THe ouput:

After GregorianCalender creation 
Array
(
	[0] => FIELD_ERA
	[1] => FIELD_YEAR
	[2] => FIELD_MONTH
	[3] => FIELD_DATE
)

15/03/2013 00:00:00
After the formatted requested the extended year
Array
(
	[0] => FIELD_ERA
	[1] => FIELD_YEAR
	[2] => FIELD_MONTH
	[3] => FIELD_DATE
	[4] => FIELD_EXTENDED_YEAR
)

After the year has been cleared, the date stays the
same 15/03/2013 00:00:00
because FIELD_EXTENDED_YEAR is still set
Array
(
	[0] => FIELD_ERA
	[1] => FIELD_MONTH
	[2] => FIELD_DATE
	[3] => FIELD_EXTENDED_YEAR
)

bool(true)
After the extended year has been cleared
Array
(
	[0] => FIELD_ERA
	[1] => FIELD_MONTH
	[2] => FIELD_DATE
)
15/03/1970 00:00:00

After the fields are recalculated, extended year is set again (to 1970)
Array
(
	[0] => FIELD_ERA
	[1] => FIELD_MONTH
	[2] => FIELD_DATE
	[3] => FIELD_EXTENDED_YEAR
)

After calling variant with no arguments
Array
(
)
01/01/1970 00:00:00

__construct:

A private constructor for disallowing instantion with the new operator.

__construct()

createInstance:

Given a timezone and locale, this method creates an IntlCalendar object. This factory method 
may return a subclass of IntlCalendar.

The calender created will represent the time instance at which it was created, based on the system
time. The fields can all be cleared by calling IntCalendar::clear() with no arguments.

The params:

timeZone:

NULL, in which case the default timezone will be used, as specified in the ini setting date.timezone
or through teh function date_default_timezone_set() and as returned by date_default_timezone_get()

An IntlTimeZone,which will be used directly

A DateTimeZone. Its idenfitier will be extracted and an ICU timezone object will be created.
The timezone will be backed by ICU's db, not PHP's.

A string, which should be a valid ICU timezone identifier. See IntlTimeZone::createTimeZoneIDEnumeration().
Raw offsets such as "GMT+08:30" are also accepted.

locale:

A locale to use or NULL to use the default locale.

Example of usage:

<?php
ini_set('intl.default_locale', 'es_ES');
ini_set('date.timezone', 'Europe/Madrid');

$cal = IntlCalendar::createInstance();
echo "No arguments\n";
var_dump(get_class($cal), IntlDateFormatter::formatObject($cal, IntlDateFormatter::FULL));
echo "\n";

echo "Explicit timezone\n";
$cal = IntlCalendar::createInstance(IntlTimeZone::getGMT());
var_dump(get_class($cal), IntlDateFormatter::formatObject($cal, IntlDateFormatter::FULL));
echo "\n";

echo "Explicit locale (with calendar)\n";
$cal = IntlCalendar::createInstance(NULL, 'es_ES@calendar=persian');
var_dump(get_class($cal), IntlDateFormatter::formatObject($cal, IntlDateFormatter::FULL));

The above will output:

No arguments
string(21) "IntlGregorianCalendar"
string(68) "martes 18 de junio de 2013 14:11:02 Hora de verano de Europa Central"

Explicit timezone
string(21) "IntlGregorianCalendar"
string(45) "martes 18 de junio de 2013 12:11:02 GMT+00:00"

Explicit locale (with calendar)
string(12) "IntlCalendar"
string(70) "martes 28 de Khordad de 1392 14:11:02 Hora de verano de Europa Central"

equals:

Compare time of two IntlCalendar objects for equality

bool intlcal_equals ( IntlCalendar $cal , IntlCalendar $other )

Returns true if this calendar and the given calendarh ave the same time. The settings,
calendar types and field states do not have to be the same.

Example of usage:

<?php
ini_set('date.timezone', 'UTC');

$cal1 = IntlCalendar::createInstance(NULL, 'es_ES');
$cal2 = clone $cal1;

var_dump($cal1->equals($cal2)); //TRUE

//The locale is not included in the comparison
$cal2 = IntlCalendar::createInstance(NULL, 'pt_PT');
$cal2->setTime($cal1->getTime());
var_dump($cal1->equals($cal2)); //TRUE

//And set fields state is not included as well
$cal2->clear(IntlCalendar::FIELD_YEAR);
var_dump($cal1->isSet(IntlCalendar::FIELD_YEAR) == 
		$cal2->isSet(IntlCalendar::FIELD_YEAR)); //False
var_dump($cal1->equals($cal2)); //TRUE

//Neither is the calendar type
$cal2 = IntlCalendar::createInstance(NULL, 'es_ES@calendar=islamic');
$cal2->setTime($cal1->getTime());
var_dump($cal1->equals($cal2)); //TRUE

//Only the time is
$cal2 = clone $cal1;
$cal2->setTime($cal1->getTime() + 1.);
var_dump($cal1->equals($cal2)); //FALSE

?>

fieldDifference:

Returns the difference between the given time and the time this object is set to, with respect 
to the quantity specified in the field parameter.

This method is meant to be called successivly, first with hte most significant field of interest 
down to the least significant field. To this end, as a side effect, this calendar's value
for the field specified is advanced by the amount returned.

Params:

when : The time against which to compare the quantity represented by the field. For the result
to be positive, the time given for this parameter must be ahead of the time of the object
the method is being invoked on.

Example of usage:

<?php
ini_set('date.timezone', 'Europe/Lisbon');
ini_set('intl.default_locale', 'fr_FR');

$cal1 = IntlCalendar::fromDateTime('2012-02-29 09:00:11');
$cal2 = IntlCalendar::fromDateTime('2013-03-01 09:19:29');
$time = $cal2->getTime();

echo "Time before: ". IntlDateFormatter::formatObject($cal1). "\n";

printf(
	"The difference in time is %d year(s), %d month(s), "
	"%d day(s), %d hour(s) and %d minute(s)\n",
	$cal1->fieldDifference($time, IntlCalendar::FIELD_YEAR),
	$cal1->fieldDifference($time, IntlCalendar::FIELD_MONTH),
	$cal1->fieldDifference($time, IntlCalendar::FIELD_DAY_OF_MONTH),
	$cal1->fieldDifference($time, IntlCalendar::FIELD_HOUR_OF_DAY),
	$cal1->fieldDifference($time, IntlCalendar::FIELD_MINUTE)
);

//Now it was advanced to the target time, exception for the seconds,
// for which we did not measure the difference
echo "Time after: ". IntlDateFormatter::formatObject($cal1). "\n";

?>

Example of output:

Time before: 29 fevr. 2012 09:00:11
The difference in time is 1 year(s), 0 month(s), 1 day(s), 0 hour(s) and 19 minute(s)
Time after: 1 mars 2013 09:19:11

fromDateTime:

Create an IntlCalendar object either from a DateTime object or from a string from
which a DateTime object can be built.

The new calender will represent not only the same instant as the given DateTime (subject
to precision loss for dates very far into the past or future), but also the same timezone
(subject to the caveat that different timezone databases will be used, and therefore
the results may differ).

IntlCalendar intlcal_from_date_time ( mixed $dateTime )

Example of usage:

<?php
ini_set('date.timezone', 'Europe/Lisbon');

//same as IntlCalendar::fromDateTime(new DateTime(...))
$cal1 = IntlCalendar::fromDateTime('2013-02-28 00:01:02 Europe/Berlin');

//note the timezone is Europe/Berlin not the default Europe/Lisbon
echo IntlDateFormatter::formatObject($cal1, 'yyyy MMMM d HH:mm:ss VVVV', 'de_DE'), "\n";

?>

Outputs:

2013 February 28 00:01:02 Deutschland zeit

get:

Get the value for a specified field

int intlcal_get( IntlCalendar $cal, int $field )

Example of usage:

<?php
ini_set('date.timezone', 'Europe/Lisbon');
ini_set('intl.default_locale', 'en_US');

$class = new ReflectionClass('IntlCalendar');
$fields = array();
foreach ($class->getConstants() as $name => $value) {
	if (strpos($name, 'FIELD_') !== 0 || $val > 22)
		continue;
	$fields[$val] = $name;
}

$cal = IntlCalendar::createInstance(); //Current time
var_dump(IntlDateFormatter::formatObject($cal));
foreach ($fields as $val => $name) {
	echo "$val ($name)", "\n 	", $cal->get($val), "\n";
}

?>

Outputs:

string(23) "Jul 1, 2013, 4:44:44 AM"
0 (FIELD_ERA)
	1
1 (FIELD_YEAR)
	2013
etc.

getActualMaximum:

int intlcal_get_actual_maximum ( IntlCalendar $cal, int $field )

Returns a field's relative maximum value around the current time. The exact
semantics vary by field, but in the general case this is the value, that would
be obtained if one would set the field value into the smallest relative maximum
for the field and would increment it until reaching the global maximum or the field
value wraps around, in which the value returned would be the global maximum or the value before the wrapping,
respectively.

For instance, in the gregorian calendar, the actual maximum value for the day of the month would be
between 28 and 31, depending on the month and year of the current time.

Example of usage:

<?php
ini_set('date.timezone', 'Europe/Lisbon');

$cal = IntlCalendar::fromDateTime('2013-02-15');
var_dump($cal->getActualMaximum(IntlCalendar::FIELD_DAY_OF_MONTH)); //28

$cal->add(IntlCalendar::FIELD_EXTENDED_YEAR, -1);
var_dump($cal->getActualMaximum(IntlCalendar::FIELD_DAY_MONTH)); //29

//Omitt the ?>

getActualMinimum:

int intlcal_get_actual_minimum ( IntlCalendar $cal , int $field )

Returns a field's relative minimum value around the current time. The exact semantics
vary by field, but in the general case this is the value that would be obtained if 
one would set the field value into the greatest relative minimum for the field
and would decrement until reaching the global minimum or the field value wraps around,
in which the value returned would be the global minimum or the value before the
wrapping, respectively.

For the gregorian calendar, this is always the same as getMinimum()

getAvailableLocales:

array intlcal_get_available_locales()

Gives the list of locales for which calendars are installed. As of ICU 151, this is the
list of all installed ICU locales.

Example of usage:

<?php
print_r(IntlCalendar::getAvailableLocales());

outputs abbreviated regions

getDayOfWeekType:

int intlcal_get_day_of_week_type (IntlCalendar $cal, int $dayOfWeek )

Returns whether the passed day is a weekday (IntlCalendar::DOW_TYPE_WEEKDAY), a weekend day (IntlCalendar::DOW_TYPE_WEEKEND),
a day during which a transition occurs into the weekend (IntlCalendar::DOW_TYPE_WEEKEND_OFFSET) or a day during which
the weekend ceases (IntlCalendar::DOW_TYPE_WEEKEND_CEASE)

If the return is either IntlCalendar::DOW_TYPE_WEEKEND_OFFSET or IntlCalendar::DOW_TYPE_WEEKEND_CEASE,
then IntlCalendar::getWeekendTransition() can be called to obtain teh time of transition.

Example of usage:

<?php

foreach (array('en_US', 'ar_SA') as $locale) {
	echo "Locale: ", Locale::getDisplayName($locale, "en_US"), "\n";

	$cal = IntlCalendar::createInstance('UTC', $locale);

	for ($i = IntlCalendar::DOW_SUNDAY; $i <= IntlCalendar::DOW_SATURDAY; $i++) {
		echo $i, " ", $cal->getDayOfWeekType($i), " ",
				$cal->getDayOfWeekType($i) >= IntlCalendar::DOW_TYPE_WEEKEND_OFFSET
						? $cal->getWeekendTransition($i)
						: '',
				"\n";
	}
	echo "\n";
}

intcal_get_error_code:

int intlcal_get_error_code ( IntlCalendar $calendar )

Returns the numeric ICU error code for the last call on this object (including cloning) or the IntlCalendar
for the calendar parameter (in the procedural style version).

This may indicate only a warning (negative error code) or no error at all (U_ZERO_ERROR). The actual
presence of an error can be tested with intl_is_failure()

Invalid arguments detected on the PHP side (before invoking functions of the ICU library) are not
recorded for the purposes of this function.

The last error that occured in any call to a function of the intl extension, including early
argument errors, can be obtained with intl_get_error_code(). This function resets the
global error code, but not the object's error code.

example of usage:

<?php
ini_set("intl.error_level", E_WARNING);
ini_set("intl.default_locale", "nl");

$intlcal = new IntlGregorianCalendar(2012, 1, 29);
var_dump(
	$intlcal->getErrorCode(),
	$intlcal->getErrorMessage()
);
$intlcal->fieldDifference(-1e100, IntlCalendar::FIELD_SECOND);

var_dump(
	$intlcal->getErrorCode(),
	$intlcal->getErrorMessage()
);

The above outputs:

int(0)
string(12) "U_ZERO_ERROR"

Warning: IntlCalendar::fieldDifference(): intlcal_field_difference: Call to ICU method has
failed in /home/glopes/php/ws/example.php on line 10
int(1)
string(81) "intcal_field_difference: Call to ICU method has failed: U_ILLEGAL_ARGUMENT_ERROR"

intlcal_get_error_message:

Returns the error message (if any) associated with the error reported by IntlCalendar::getErrorCode()
and intlcal_get_error_code(). If there is no associated error message, only the string representation
of the name of the error constant will be returned. OTherwise, the message also includes a message
set on the side of the PHP binding.

Example of usage:

<?php
$cal = IntlCalendar::createInstance('UTC', 'en_US');
var_dump($cal->getErrorMessage());

$cal->getWeekendTransition(IntlCalendar::DOW_WEDNESDAY);
var_dump($cal->getErrorMessage());

?>

The above outputs:

string(12) "U_ZERO_ERROR"
string(82) "intlcal_get_weekend_transition: Error calling ICU method: U_ILLEGAL_ARGUMENT_ERRROR"

IntlCalendar::getFirstDayOfWeek:

Get the first day of week for the calendar's locale

int intlcal_get_first_day_of_week ( IntlCalendar $cal )

The weekday deemed to start a week, either the default value for this locale or the 
value set with IntlCalendar::setFirstDayOfWeek()

Example of usage:

<?php
ini_set('date.timezone', 'UTC');

$cal1 = IntlCalendar::createInstance(NULL, 'es_ES');
var_dump($cal1->getFirstDayOfWeek()); //Monday
$cal1->set(2013, 1 /* Feburary */, 3); //A sunday
var_dump(cal1->get(IntlCalendar::FIELD_WEEK_OF_YEAR)); //5

$cal2 = IntlCalendar::createInstance(NULL, 'en_US');
var_dump($cal2->getFirstDayOfWeek()); //Sunday
$cal2->set(2013, 1 /* Feburary */, 3); //A sunday
var_dump($cal2->get(INtlCalendar::FIELD_WEEK_OF_YEAR)); //6


intlCalendar::getGreatestMinimum:

Returns the largest local minimum for a field. This should be a value larger or equal
to that reutrned by IntlCalendar::getActualMinimum(), which is in its turn larger or
equal to that returned by IntlCalendar::getMinimum().

All these three functions return the same value for the Gregorian calendar.

int intlcal_get_greatest_minimum ( IntlCalendar $cal , int $field )

getKeywordValuesForLocale:

Get set of locale keyword values

Iterator intlcal_get_keyword_values_for_locale ( string $key, string $locale, boolean $commonlyUsed )

For a given locale key, get the set of values for that key that would result in a different
behavior. For now, only the 'calendar' keyword is supported.

Example of usage:

<?php
print_r(
		iterator_to_array(
				IntlCalendar::getKeywordValuesForLocale(
						'calendar', 'fa_IR', true)));
print_r(
		iterator_to_array(
				IntlCalendar::getKeywordValuesForLocale(
						'calendar', 'fa_IR', false)));

getLeastMaximum:

Returns the smallest local maximum for a field. This should be a value smaller or equal to
that reutrned by IntlCalendar::getActualMaximum(), which is in its turn smaller or equal
to that returned by IntlCalendar::getMaximum()

int intlcal_get_least_maximum ( IntlCalendar $cal, int $field )

Example of usage:

<?php
ini_set('date.timezone', 'UTC');
ini_set('intl.default_locale', 'it_IT');

$cal = new IntlGregorianCalendar(2013, 3 /* April */, 6);
var_dump(
	$cal->getLeastMaximum(IntlCalendar::FIELD_DAY_OF_MONTH), //28
	$cal->getActualMaximum(IntlCalendar::FIELD_DAY_OF_MONTH), //30
	$cal->getMaximum(IntlCalendar::FIELD_DAY_OF_MONTH)
);

INtlCalendar::getLocale:

Return the locale used by this calendar object

string intlcal_get_locale ( IntlCalendar $cal, int $localType )

Notable param:

localeType: Whether to fetch that actual locale (the locale from which the calendar data originates, with Locale::ACTUAL_LOCALE)
or the valid locale, i.e the most specific locale supported by ICU relativily to the reuqested locale - see Locale::VALID_LOCALE.

From the most general to the most specific, the locales are ordered in this fashion, actual locale, valid locale, 
requested locale.

Example of usage:

<?php
$cal = IntlCalendar::createInstance(IntlTimeZone::getGMT(), 'en_US_CALIFORNIA');
var_dump(
	$cal->getLocale(Locale::ACTUAL_LOCALE),
	$cal->getLocale(Locale::VALID_LOCALE)
);

getMaximum:

Get the global maximum for a field, in this specified calendar. This value is larger
or equal to that returned by intlCalendar::getActualMaximum(), which is in turn larger
or equal ot that returned by IntlCalendar::getLeastMaximum().

int intlcal_get_maximum ( IntlCalendar $cal, int $field )

IntlCalendar::getMinimalDaysInFirstWeek:

Get minimal number of days the first week in a year or month can have

int intlcal_get_minimal_days_in_first_week ( IntlCalendar $cal )

Returns the smallest number of days the first week of a year or month must
have in the new year or month. For instance, in the Gregorian calendar, if this
value is 1, then the first week of the year will necessarily including Jan 1,
while if it is 7, then the week with Jan 1st will be the first week of the year
only if the day of the week for Jan 1:st matches the day of the week returned by
IntlCalendar::getFirstDayOfWeek(), otherwise it will be the previous year's last week.

example of usage:

<?php
ini_set('date.timezone', 'UTC');
ini_set('intl.default_locale', 'en_US');

$cal = new IntlGregorianCalendar(2013, 0 /* January */, 2);
var_dump(IntlDateFormatter::formatObject($cal, 'cccc')); //Wednesday

var_dump($cal->getMinimalDaysInFirstWeek(), //1
$cal->getFirstDayofWeek()); // 1

//Week 1 of 2013
var_dump(IntlDateFormatter::formatObject($cal, "'Week 'w' of 'Y"));

$cal->setMinimalDaysInFirstWeek(4);
//Still week 1 of 2013 (1st week has 5 days in the new year)
var_dump(IntlDateFormatter::formatObject($cal, "'Week 'w' of 'Y'"));

$cal->setMinimalDaysInFirstWeek(6);
//Week 53 of 2012
var_dump(IntlDateFormatter::formatObject($cal, "'Week 'w' of 'Y'"));

IntlCalendar::getMinimum:

Get the global minimum value for a field

int intlcal_get_minimum ( IntlCalendar $cal , int $field )

Gets the global minimum for a field, in this specific calendar. This value 
is smaller or equal to that returend by IntlCalendar::getActualMinimum(), which
is in turn smaller or equal to that returned by INtlCalendar::getGreatestMinimum()..
For the Gregorian calendar, these three functions always return the same value.

IntlCalendar::getNow:

Get number representing the current time

float intlcal_get_now()

The number of milliseconds that have passed since the reference date. This 
number is derived from the system time.

Example of usage:

<?php
$formatter = IntlDateFormatter::create('es_ES',
		IntlDateFormatter::FULL,
		IntlDateFormatter::FULL,
		'Europe/Madrid');

$val = IntlCalendar::getNow();

var_dump($val);
echo $formatter->format(IntlCalendar::getNow() / 1000.), "\n";

Would output:

float (1371425814666)
lunes, 17 de junio de 2013 01:36:54 Hora De verano de Europa Central

IntlCalendar::getRepeatedWallTimeOption:

Gets the current stratergy for dealing with wall times that are repeated whenevr
the clock is set back during daylight saving time end transitions.
The default value is IntlCalendar::WALLTIME_LAST.

int intlcal_get_repeated_wall_time_option ( IntlCalendar $cal )

Example of usage:

<?php
ini_set('date.timezone', 'Europe/Lisbon');
ini_set('intl.default_locale', 'en_US');
ini_set('intl.error_level', E_WARNING);

//On october 27th at 0200, the clock goes back 1 hour and from GMT+01 to GMT+00
$cal = new IntlGregorianCalendar(2013, 9 /* October */, 27, 1, 30);

var_dump($cal->getRepeatWalltimeOption()); //0 WALLTIME_LAST

$formatter = IntlDateFormatter::create(
	NULL,
	IntlDateFormatter::FULL,
	IntlDateFormatter::FULL,
	'UTC'
);
var_dump($formatter->format($cal->getTime() /1000.));

$cal->setRepeatWalltimeOption(IntlCalendar::WALLTIME_FIRST);
var_dump($cal->getRepeatedWalltimeOption()); //1 WALLTIME FIRST
$cal->set(IntlCalendar::FIELD_HOUR_OF_DAY, 1);

var_dump($formatter->format($cal->getTime() / 1000.));

The above will output:

int(0)
string(42) "Sunday, October 27, 2013 at 1:30:00 AM GMT"
int(1)
string(43) "Sunday, October 27, 2013 at 12:30:00 AM GMT"

IntlCalendar::getSkippedWallTimeOption:

Gets the current stratergy for dealing with wall times that are skipped
whenever the clock is forwarded during daylight saving time start transitions.
The default value is IntlCalendar::WALLTIME_LAST.

The calendar must be lenient for this option to have any effect, otherwise
attemtping to set a non-existing time will cause an error.

Example of usage:

<?php
ini_set('date.timezone', 'Europe/Lisbon');
ini_set('intl.default_locale', 'en_US');
ini_set('intl.error_level', E_WARNING);

//On march 31st at 0100, teh clock goes forward 1 hour and from GMT+00 to GMT+01
$cal = new IntlGregorianCalendar(2013, 2 /* March */, 31, 1, 30);

var_dump(
	$cal->isLenient(), //True
	$cal->getSkippedWalltimeOption() // 0 WALLTIME_LAST
);

$formatter = IntlDateFormatter::create(
	NULL,
	IntlDateFormatter::FULL,
	IntlDateFormatter::FULL,
	'UTC'
);
var_dump($formatter->format($cal->getTime() / 1000));

$cal->setSkippedWallTimeOption(IntlCalendar::WALLTIME_FIRST);
var_dump($cal->getSkippedWalltimeOption()); //1 Walltime first
$cal->set(IntlCalendar::FIELD_HOUR_OF_DAY, 1);

var_dump($formatter->format($cal->getTime() / 1000));

$cal->setSkippedWallTimeOption(IntlCalendar::WALLTIME_NEXT_VALID);
var_dump($cal->getSkippedWalltimeOption()); // 2 Walltime_Next_Valid
$cal->set(IntlCalendar::FIELD_HOUR_OF_DAY, 1);

var_dump($formatter->format($cal->getTime() / 1000));

Outputs:

bool(true)
int(0)
string(40) "Sunday, March 31, 2013 at 1:30:00 AM GMT"
int(1)
string(41) "Sunday, March 31, 2013 at 12:30:00 AM GMT"
int(2)
string(40) "Sunday, March 31, 2013 at 1:00:00 AM GMT"

IntlCalendar::getTime:

float intlcal_get_time ( IntlCalendar $cal )

Returns the time associated with this object, expressed as the number of milliseconds
since the epoch.

Example of usage:

<?php
ini_set('date.timezone', 'Europe/Lisbon');
ini_set('intl.default_locale', 'en_US');

$cal = new IntlGregorianCalendar(2013, 4 /* May */,1, 0, 0, 0);
$time = $cal->getTime();
var_dump($time, $time / 1000 == strtotime('2013-05-01 00:00:00')); //true

Outputs:

float (1367362800000)
bool (true)

IntlCalendar::getTimeZone:

Get the object's timezone

IntlTimeZone intlcal_get_time_zone ( IntlCalendar $cal )

Example of usage:

<?php
ini_set('date.timezone', 'Europe/Lisbon');
ini_set('intl.default_locale', 'en_US');

$cal = IntlCalendar::createInstance();
print_r($cal->getTimeZone());

$cal->setTimeZone('UTC');
print_r($cal->getTimeZone());

$cal = IntlCalendar::fromDateTime('2012-01-01 00:00:00 GMT+03:33');
print_r($cal->getTimeZone());

Example of output:

IntlTimeZone Object
(
	[valid] => 1
	[id] => Europe/Lisbon
	[rawOffset] => 0
	[currentOffset] => 3600000
)
etc.

IntlCalendar::getType:

Get the calendar type

string intcal_get_type ( IntlCalendar $cal )

Example of usage:

<?php
ini_set('date.timezone', 'Europe/Lisbon');
ini_set('intl.default_locale', 'en_US');

$cal = IntlCalendar::createInstance(NULL, '@calendar=ethiopic-amete-alem');
var_dump($cal->getType());

$cal = new IntlGregorianCalendar();
var_dump($cal->getType());

Outputs:

string(19) "ethiopic-amete-alem"
string(9) "gregorian"

IntlCalendar::getWeekendTransition:

Get the time of the day at which weekend begins or ends

int intlcal_get_weekend_transition ( IntlCalendar $cal, string $dayOfWeek )

This is only applicable to the days of the week for which IntlCalendar::getDayOfWeekType()
returns either IntlCalendar::DOW_TYPE_WEEKEND_OFFSET or IntlCalendar::DOW_TYPE_WEEKEND_CEASE.

Calling this function for other days of the week is an error condition.

IntlCalendar::inDaylightTime:

Whether the object's time is in Daylight Savings Time

bool intlcal_in_daylight_time ( IntlCalendar $cal )

Example of usage:

<?php
ini_set('date.timezone', 'Europe/Lisbon');
ini_set('intl.default_locale', 'pt_PT');

$cal = new IntlGregorianCalendar(2013, 6 /* July */, 1, 4, 56, 31);
var_dump($cal->inDaylightTime()); //True

$cal->set(IntlCalendar::FIELD_MONTH, 11 /* December */);
var_dump($cal->inDaylightTime()); //false

//DST end transition on 2013-10-27 at 0200 (wall time back 1 hour)
$cal = new IntlGregorianCalendar(2013, 9 /* October */, 27, 1, 30, 0);

var_dump($cal->inDaylightTime()); //False (default WALLTIME_LAST)

$cal->setRepeatedWallTimeOption(IntlCalendar::WALLTIME_FIRST);
$cal->set(IntlCalendar::FIELD_HOUR_OF_DAY, 1); //force time recalculation
var_dump($cal->inDaylightTime()); //True

IntlCalendar::isEquivalentTo:

Whether another calendar is equal but for a different time

bool intlcal_is_equivalent_to (IntlCalendar $cal , IntlCalendar $other )

Returns whether this and the given object are equivalent for all purposes
except as to the they have set. The locales do not have to match, as long
as no change in behavior results from such mismatch.

This includes the timezone, whether the lenient mode is set, the repeated 
and skipped wall time settings, the days of the week when the weekend starts
and ceases and the times where such transitions occur.

It may also include other calendar specific settings, such as the Gregorian/Julian
transition instant.

example of usage:

<?php
$cal1 = IntlCalendar::createInstance('Europe/Lisbon', 'pt_PT');
$cal2 = IntlCalendar::createInstance('Europe/Lisbon', 'es_ES');
$cal2->clear();

var_dump($cal1->isEquivalentTo($cal2)); //True

$cal3 = IntlCalendar::createInstance('Europe/Lisbon', 'en_US');
var_dump($cal1->isEquivalentTo($cal3)); //false
var_dump($cal1->getFirstDayOfWeek(), //2 (Monday)
$cal3->getFirstDayOfWeek());  		 //1 (Sunday)

The above outputs:

bool(true)
bool(false)
int(2)
int(1)

isLenient:

Returns whether the current date/time interpretations is lenient (the default).
If that is the case, some out of range values for fields will be accepted instead
of raising an error.

bool intlcal_is_lenient ( IntlCalendar $cal )

Example of usage:

<?php
ini_set('date.timezone', 'Europe/Lisbon');
ini_set('intl.default_locale', 'pt_PT');
ini_set('intl.use_exceptions', '1');

$cal = new IntlGregorianCalendar(2013, 6 /* July */, 1);
var_dump(IntlDateFormatter::formatObject($cal), // 01/07/2013, 00:00:00
$cal->isLenient()); //true

$cal->set(IntlCalendar::FIELD_DAY_OF_MONTH, 33);
var_dump(IntlDateFormatter::formatObject($cal)); // 02/08/2013, 00:00:00

$cal->setLenient(false);
var_dump($cal->isLenient()); //False
$cal->set(IntlCalendar::FIELD_DAY_OF_MONTH, 33);
var_dump(IntlDateFormatter::formatObject($cal)); //error

The above outputs:

string(20) "01/07/2013, 00:00:00"
bool(true)
string(20) "02/08/2013, 00:00:00"
bool(false)

Fatal error: Uncaught exception 'IntlException' with message 'datefmt_format_object: error obtaining
instant from IntlCalendar' in /home/foobar/example.php:16
Stack trace:
#0 /home/foobar/example.php(16): IntlDateFormatter::formatObject(Object(IntlGregorianCalendar))
#1 {main}
	thrown in /home/foobar/example.php on line 16

IntlCalendar::isSet:

Returns whether a field is set (as opposed to clear). Set fields take prio over unset fields and their default
values when the date/time is being calculated. Fields set later take prio over fields set earlier.

bool intlcal_is_set ( IntlCalendar $cal , int $field )

IntlCalendar::isWeekend:

Returns whether either the object's current time or the provided timestamp occur during a weekend in this
object's calendar system.

bool intlcal_is_weekend ( IntlCalendar $cal [, float $date = NULL ] )

Example of usage:

<?php
ini_set('date.timezone', 'Europe/Lisbon');

$cal = new IntlGregorianCalendar(NULL, 'en_US');
$cal->set(2013, 6 /* July */, 7); //A sunday

var_dump($cal->isWeekend()); //true
var_dump($cal->isWeekend(strtotime('2013-07-01 00:00:00'))); //false, Monday

$cal = new IntlGregorianCalendar(NULL, 'ar_SA');
$cal->set(2013, 6 /* July */, 7); //A sunday
var_dump($cal->isWeekend()); //false, Sunday is not in weekend in this calendar

IntlCalendar::roll:

Adds a signed amount to a field. The difference with respect to IntlCalendar::add() is that
when the field value overflows, it does not carry into more significant fields.

bool intlcal_roll ( IntlCalendar $cal, int $field, mixed $amountOrUpOrDown )

Example of usage:

<?php
ini_set('date.timezone', 'Europe/Lisbon' );
ini_set('intl.default_locale', 'pt_PT');

$cal = new IntlGregorianCalendar(2013, 5 /* June */, 30);

$cal->add(IntlCalendar::FIELD_DAY_OF_MONTH, 1);
var_dump(IntlDateFormatter::formatObject($cal)); // "01/07/2013, 00:00:00"

$cal->set(2013, 5 /* June */, 30);
$cal->roll(IntlCalendar::FIELD_DAY_OF_MONTH, true); // roll up, same as rolling +1
var_dump(IntlDateFormatter::formatObject($cal)); // "01/06/2013, 00::00:00"

The above outputs:

string(20) "01/07/2013, 00:00:00"
string(20) "01/06/2013, 00:00:00"

IntlCalendar::set:

Sets either a specified field to the given value, or sets at once several common fields.
The range of values that are accepted depend on whether the calendar is using the lenient mode.

For fields that conflict, the fields that are set later have priority.

This method cannot be called with exactly four args.

bool intlcal_set ( IntlCalendar $cal , int $field , int $value )

bool intlcal_set ( IntlCalendar $cal , int $year , int $month [, int $dayOfMonth = NULL [, int
	$hour = NULL [, int $minute = NULL [, int $second = NULL ]]]] )

Sets either a specified field to the given value, or sets at once several common fields.
The range of values that are accepted depend on whether the calendar is using the lenient mode.

For fields that conflict, the fields that are set later have prio.

Example of usage:

<?php
ini_set('date.timezone', 'Europe/Lisbon');
ini_set('intl.default_locale', 'pt_PT');

//Calls made later have prio
$cal = new IntlGregorianCalendar(2013, 6 /* July */, 1);
$cal->set(IntlCalendar::FIELD_YEAR, 2012);
$cal->set(IntlCalendar::FIELD_EXTENDED_YEAR, 2011);
var_dump(IntlDateFormatter::formatObject($cal));

$cal = new IntlGregorianCalendar(2013, 6 /* July */, 1);
$cal->set(IntlCalendar::FIELD_YEAR, 2012);
$cal->set(IntlCalendar::FIELD_EXTENDED_YEAR, 2011);

//The time has not been recalculated yet. IF we clear the extended year,
//the year set before will be used
$cal->clear(IntlCalendar::FIELD_EXTENDED_YEAR);
var_dump(IntlDateFormatter::formatObject($cal));

The above outputs:

string(20) "01/07/2011, 00:00:00"
string(20) "01/07/2012, 00:00:00"

IntlCalendar::setFirstDayOfWeek:

Defines the day of week demed to start the week. This affects the behavior of fields
that depend on the concept of week start and end such as IntlCalendar::FIELD_WEEK_OF_YEAR
and IntlCalendar::FIELD_YEAR_WOY.

bool intlcal_set_first_day_of_week ( IntlCalendar $cal , int $dayOfWeek )

Example of usage:

<?php
ini_set('date.timezone', 'Europe/Lisbon');
ini_set('intl.default_locale', 'es_ES');

$cal = IntlCalendar::createInstance();
$cal->set(2013, 5 /* June */, 30); //A Sunday

var_dump($cal->getFirstDayOfWeek()); // 2 (Monday)

echo IntlDateFormatter::formatObject($cal, <<<EOD
'local day of week: 'cc'
week of month 	  : 'W'
week of year 	  : 'ww
EOD
), "\n";

$cal->setFirstDayOfWeek(IntlCalendar::DOW_SUNDAY);

echo IntlDateFormatter::formatObject($cal, <<<EOD
'local day of week: cc'
week of month 	  : 'W'
week of year 	  : 'ww
EOD
), "\n";


The above will output:

int(2)
local day of week: 7
week of month: 4
week of year: 26
local day of week: 1
week of month: 5
week of year: 27

IntlCalendar::setLenient:

Defines whether the calendar is 'lenient mode'. In such a mode, some of out-of-bounds
values for some fields are accepted, the behavior being similar to that of IntlCalendar::add()
(i.e, the value wraps around, carrying into more significant fields each time).

If the lenient mode is off, then such values will generate an error.

IntlCalendar::setMinimalDaysInFirstWeek:

Sets the smallest number of days the first week of a year or a month must have in the new
year or month. For instance, in the Gregorian calendar, if this value is 1, then the first
week of the year will necessarily include January 1st, while if this value is 7, then the
week with January 1st will be the first week of the year only if the day of the week
for January 1st matches the day of the week returned by IntlCalendar::getFirstDayOfWeek();

Otherwise, it will be the previous year's last week.

bool intlcal_get_minimal_days_in_first_week ( IntlCalendar $cal, int $minimalDays )

IntlCalendar::setRepeatedWallTimeOption:

Sets the current strategy for dealing with wall times that are repeated whenever
the clock is set back during daylight saving time end transitions. The default value
is IntlCalendar::WALLTIME_LAST (take the post-DST instant). 

The other possible value is IntlCalendar::WALLTIME_FIRST (take the instant that occurs
during DST).

bool intlcal_set_repeated_wall_time_option ( IntlCalendar $cal , int $wallTimeOption )

IntlCalendar::setSkippedWallTimeOption:

Sets the current strategy for dealing with wall times that are skipped whenever the clock 
is forwarded during daylight saving time start transitions.

The default value is IntlCalendar::WALLTIME_LAST (take it as being the same instant as
the one when the wall time is one hour more). Alternative values are IntlCalendar::WALLTIME_FIRST
(same instant as the one with a wall time of one hour less) and IntlCalendar::WALLTIME_NEXT_VALID
(same instant as when DST begins).

This affects only the instant represented by the calendar (as reported by IntlCalendar::getTime()),
the field values will not be rewritten accordingly.

The calendar must be lenient for this option to have any effect, otherwise attempting to
set a non-existing time will cause an error.

IntlCalendar::setTime:

Sets the instant represented by this object. The instant is represented by a float whose
value should be an integer number of milliseconds since the epoch (1 Jan 1970 00:00:00.000 UTC),
ignoring leap seconds. All the field values will be recalculated accordingly.

Example of usage:

<?php
ini_set('date.timezone', 'Europe/Lisbon');
ini_set('intl.default_locale', 'fr_FR');

$cal = new IntlGregorianCalendar(2013, 5 /* May */, 1, 12, 0, 0);

echo IntlDateFormatter::formatObject($cal, IntlDateFormatter::FULL), "\n";

/* In Europe/Lisbon, on 2013-10-27 at 0200, the clock goes back one hour
and the timezone from UTC+01 to UTC+00 */

$cal->setTime(strtotime('2013-10-27 00:30:00 UTC') * 1000.);

echo IntlDateFormatter::formatObject($cal, IntlDateFormatter::FULL), "\n";

$cal->setTime(strtotime('2013-10-27 01:30:00 UTC') * 1000.);

echo IntlDateFormatter::formatObject($cal, IntlDateFormatter::FULL), "\n";

The above outputs:

samedi 1 juin 2013 12:00:00 heure avancée d´Europe de l´Ouest
dimanche 27 octobre 2013 01:30:00 heure avancée d´Europe de l´Ouest
dimanche 27 octobre 2013 01:30:00 heure normale d´Europe de l´Ouest

IntlCalendar::setTimeZone:

Set the timezone used by this calendar

bool intlcal_set_time_zone ( IntlCalendar $cal , mixed $timeZone )

Defines a new timezone for this calendar. The time represented by the object is
preserved to the detriment of the field values.

Example of usage:

<?php
ini_set('date.timezone', 'Europe/Lisbon');
ini_set('intl.default_locale', 'es_ES');

$cal = new IntlGregorianCalendar(2013, 5 /* May */, 1, 12, 0, 0);

echo IntlDateFormatter::formatObject($cal, IntlDateFormatter::FULL), "\n";
echo "(instant {$cal->getTime()})\n";

$cal->setTimeZone(IntlTimeZone::getGMT());
echo IntlDateFormatter::formatObject($cal, IntlDateFormatter::FULL), "\n";
echo "(instant {$cal->getTime()})\n";

$cal->setTimeZone('GMT+03:33');
echo IntlDateFormatter::formatObject($cal, IntlDateFormatter::FULL), "\n";
echo "(instant {$cal->getTime()})\n";

THe above outputs:

sábado, 1 de junio de 2013 12:00:00 Hora de verano Europa occidental
(instant 1370084400000)
sábado, 1 de junio de 2013 11:00:00 GMT
(instant 1370084400000)
sábado, 1 de junio de 2013 14:33:00 GMT+03:33
(instant 1370084400000)

IntlCalendar::toDateTime:

Convert an IntlCalendar into a DateTime object

Create a DateTime object that represents the same instant (up to second pos, with a rounding
error of less than 1 second) and has an analog timezone to this object ( the difference being DateTime's
timezone will be backed by PHP's timezone while IntlCalendar's timezone is backed by ICU's)

DateTime intlcal_to_date_time ( IntlCalendar $cal )

Example of usage:

<?php
ini_set('date.timezone', 'UTC');
ini_set('intl.default_locale', 'pt_PT');

$cal = IntlCalendar::createInstance('Europe/Lisbon'); //current time

$dt = $cal->toDateTime();
print_r($dt);

The above example will output:

DateTime Object
(
	[date] => 2013-07-02 00:29:13
	[timezone_type] => 3
	[timezone] => Europe/Lisbon
)

The above ones belong to IntlCalendar, now we move on to IntlTimeZone:

IntlTimeZone::countEquivalentIDs:

Get the number of IDs in the equivalency group that includes the given ID

public static integer IntlTimeZone::countEquivalentIDs ( string $zoneID )

IntlTimeZone::createDefault:

Create a new copy of the default timezone for this host

public static IntlTimeZone IntlTimeZone::createDefault()

IntlTimeZone::createEnumeration:

Get an enumeration over time zone IDs associated with the given country or offset

public static IntlIterator IntlTimeZone::createEnumeration ([ mixed $countryOrRawOffset ] )

IntlTimeZone::createTimeZone:

Create a timezone object for the given ID

public static IntlTimeZone IntlTimeZone::createTimeZone ( string $zoneId )

IntlTimeZone::fromDateTimeZone:

Create a timezone object from DateTimeZone

public static IntlTimeZone IntlTimeZone::fromDateTimeZone ( DateTimeZone $zoneId )

IntlTimeZone::getCanonicalID:

Get the canonical system timezone ID or the normalized custom time zone ID for the
given tiem zone ID

public static string IntlTimeZone::getCanonicalID ( string $zoneID [, bool &$isSystemID ] )

IntlTimeZone::getDisplayName:

Get a name of this time zone suitable for presentation to the user

public string IntlTimeZone::getDisplayName ([ bool $isDaylight [, integer $style [, string $locale ]]] )

IntlTimeZone::getDSTSavings:

Get the amount of time to be added to local standard time to get local wall clock time

public integer IntlTimeZone::getDSTSavings()

IntlTimeZone::getEquivalentID:

Get an ID in the equivalency group that includes the given ID

public static string IntlTimeZone::getEquivalentID ( string $zoneID , integer $index )

IntlTimeZone::getErrorCode:

Get the last error code on teh object

integer intltz_get_error_code()

intltz_get_error_message:

Get last error message on the object

string intltz_get_error_message()

IntlTimeZone::getGMT:

Create GMT (UTC) timezone

public static IntlTimeZone IntlTimeZone::getGMT()

IntlTimeZone::getID:

Get timezone ID

public string IntlTimeZone::getID()

IntlTimeZone::getOffset:

Get the time zone raw and GMT offset for the given moment in time

public integer IntlTimeZone::getOffset ( float $date, bool $local, integer &$rawOffset , integer &$dstOffset )

IntlTimeZone::getRawOffset:

Get the raw GMT offset (before taking daylight savings time into account)

public integer IntlTimeZone::getRawOffset()

IntlTimeZone::getTZDataVersion:

Get the timezone data version currently used by ICU

public static string IntlTimeZone::getTZDataVersion()

IntlTimeZone::hasSameRules:

Check if this zone has the same rules and offset as another zone

public bool IntlTimeZone::hasSameRules ( IntlTimeZone $otherTimeZone )

IntlTimeZone::toDateTimeZone:

Convert to DateTimeZone object

public DateTimeZone IntlTimeZone::toDateTimeZone()

IntlTimeZone::useDaylightTime:

Checks if this time zone uses daylight savings time

public bool IntlTimeZone::useDaylightTime()

The above methods belong to IntlTimeZone, and the following belong to
IntlDateFormatter:

create:

IntlDateFormatter::__construct

datefmt_create

IntlDateFormatter::create

Creates a date formatter

IntlDateFormatter datefmt_create ( string $locale , int $datetype , int $timetype [, mixed $timezone = NULL [, mixed
	$calendar = NULL [, string $pattern = "" ]]] )

Examples of usage:

<?php
$fmt = datefmt_create( "en_US" , IntlDateFormatter::FULL, IntlDateFormatter::FULL,
	'America/Los_Angeles', IntlDateFormatter::GREGORIAN );
echo "First Formatted output is ".datefmt_format( $fmt, 0);
$fmt = datefmt_create( "de-DE" , IntlDateFormatter::FULL, IntlDateFormatter::FULL,
	'America/Los_Angeles', IntlDateFormatter::GREGORIAN );
echo "Second Formatted output is ".datefmt_format( $fmt, 0);

$fmt = datefmt_create( "en_US" ,IntlDateFormatter::FULL, IntlDateFormatter::FULL,
	"America/Los_Angeles",IntlDateFormatter::GREGORIAN, "MM/dd/yyyy");
echo "first formatted pattern is ".datefmt_format( $fmt, 0);
$fmt = datefmt_create( "de-DE" , IntlDateFormatter::FULL, IntlDateFormatter::FULL,
	'America/Los_Angeles',IntlDateFormatter::GREGORIAN, "MM/dd/yyyy");
echo "Second formatted output with pattern is ".datefmt_format( $fmt, 0);
?>

Example of OO usage:

<?php
$fmt = new IntlDateFormatter( "en_US" ,IntlDateFormatter::FULL, IntlDateFormatter::FULL,
	'America/Los_Angeles',IntlDateFormatter::GREGORIAN );
echo "First Formatted output is ".$fmt->format(0);

$fmt = new IntlDateFormatter( "de-DE" ,IntlDateFormatter::FULL, IntlDateFormatter::FULL,
	'America/Los_Angeles', IntlDateFormatter::GREGORIAN );
echo "Second Formatted output is ".$fmt->format(0);

$fmt = new IntlDateFormatter( "en_US" ,IntlDateFormatter::FULL, IntlDateFormatter::FULL,
	'America/Los_Angeles', IntlDateFormatter::GREGORIAN , "MM/dd/yyyy");
echo "First Formatted output with pattern is ".$fmt->format(0);

$fmt = new IntlDateFormatter( "de-DE" ,IntlDateFormatter::FULL, IntlDateFormatter::FULL,
	'America/Los_Angeles', IntlDateFormatter::GREGORIAN, "MM/dd/yyyy");
echo "Second Formatted output with pattern is ".$fmt->format(0);
?>

Output:

First Formatted output is Wednesday, December 31, 1969 4:00:00 PM PT
Second Formatted output is Mittwoch, 31. Dezember 1969 16:00 Uhr GMT-08:00
First Formatted output with pattern is 12/31/1969
Second Formatted output with pattern is 12/31/1969

Example of showcasing japanese chars as well:

<?php
$now = new DateTime(); //DateTime is a core PHP class as of version 5.2.0

$formatter = new IntlDateFormatter('ja_JP', IntlDateFormatter::FULL,
		IntlDateFormatter::FULL, 'Asia/Tokyo', IntlDateFormatter::GREGORIAN);

echo 'It is now: "' . $formatter->format($now) . '" in Tokyo' . "\n";
//Above gives [It is now : //stuff in Tokyo ]

$formatter = new IntlDateFormatter('ja_JP@calendar=japanese', IntlDateFormatter::FULL,
		IntlDateFormatter::FULL, 'Asia/Tokyo', IntlDateFormatter::TRADITIONAL);

echo 'It is now "' . $formatter->format($now) . '" in Tokyo' . "\n";
?>

datefmt_format:

Format the date/time value as a string

string datefmt_format ( IntlDateFormatter $fmt, mixed $value )

the params:

value: Value to format. This may be a DateTime object, an IntlCalendar object, a numeric type representing a 
(possibly fractional) number of seconds since epoch or an array in the format output by localtime()

If a DateTime or an IntlCalendar object is passed, its timezone is not considered. The object will be formatted
using the formatter's configured timezone. If one wants to use the timezone of the object to be formatted,
IntlDateFormatter::setTimeZone() must be called before with the object's timezone.

Alternatively, we can use the static function IntlDateFormatter::formatObject() may be used instead.

Examples of usage:

<?php
$fmt = datefmt_create(
	'en_US',
	IntlDateFormatter::FULL,
	IntlDateFormatter::FULL,
	'America/Los_Angeles',
	IntlDateFormatter::GREGORIAN
);
echo 'First Formatted output is ' . datefmt_format($fmt, 0);

$fmt = datefmt_create(
	'de-DE',
	IntlDateFormatter::FULL,
	IntlDateFormatter::FULL,
	'America/Los_Angeles',
	IntlDateFormatter::GREGORIAN
);
echo 'Second Formatted output is ' . datefmt_format($fmt, 0);

$fmt = datefmt_create(
	'en_US',
	IntlDateFormatter::FULL,
	IntlDateFormatter::FULL,
	'America/Los_Angeles',
	IntlDateFormatter::GREGORIAN,
	'MM/dd/yyyy'
);

echo 'First formatted output with pattern is ' . datefmt_format($fmt, 0);

$fmt = datefmt_create(
	'de-DE',
	IntlDateFormatter::FULL,
	IntlDateFormatter::FULL,
	'America/Los_Angeles',
	IntlDateFormatter::GREGORIAN,
	'MM/dd/yyyy'
);
echo "Second Formatted output with pattern is " . datefmt_format($fmt, 0);
?>

Example of OO usage:

<?php
$fmt = new IntlDateFormatter(
	'en_US',
	IntlDateFormatter::FULL,
	IntlDateFormatter::FULL,
	'America/Los_Angeles',
	IntlDateFormatter::GREGORIAN
);
echo 'First Formatted output is ' . $fmt->format(0);

$fmt = new IntlDateFormatter(
	'de-DE',
	IntlDateFormatter::FULL,
	IntlDateFormatter::FULL,
	'America/Los_Angeles',
	IntlDateFormatter::GREGORIAN
);
echo 'Second Formatted output is ' . $fmt->format(0);

$fmt = new IntlDateFormatter(
	'en_US',
	IntlDateFormatter::FULL,
	IntlDateFormatter::FULL,
	'America/Los_Angeles',
	IntlDateFormatter::GREGORIAN,
	'MM/dd/yyyy'
);
echo 'First Formatted output with pattern is ' . $fmt->format(0);

$fmt = new IntlDateFormatter(
	'de-DE',
	IntlDateFormatter::FULL,
	IntlDateFormatter::FULL,
	'America/Los_Angeles',
	IntlDateFormatter::GREGORIAN,
	'MM/dd/yyyy'
);
echo 'Second Formatted output with pattern is ' . $fmt->format(0);
?>

The above outputs:

First Formatted output is Wednesday, December 31, 1969 4:00:00 PM PT
Second Formatted output is Mittwoch, 31. Dezember 1969 16:00:00 Uhr GMT-08:00
First Formatted output with pattern is 12/31/1969
Second Formatted output with pattern is 12/31/1969

And a third example:

<?php
$tz = reset(iterator_to_array(IntlTimeZone::createEnumeration('FR')));
$formatter = IntlDateFormatter::create(
	'fr_FR',
	IntlDateFormatter::FULL,
	IntlDateFormatter::FULL,
	$tz,
	IntlDateFormatter::GREGORIAN
);

$cal = IntlCalendar::createInstance($tz, '@calendar=islamic-civil');
$cal->set(IntlCalendar::FIELD_MONTH, 8); //9th month, ramadan
$cal->set(IntlCalendar::FIELD_DAY_OF_MONTH, 1); //1st day

$cal->clear(IntlCalendar::FIELD_HOUR_OF_DAY);
$cal->clear(IntlCalendar::FIELD_MINUTE);
$cal->clear(IntlCalendar::FIELD_SECOND);
$cal->clear(IntlCalendar::FIELD_MILLISECOND);

echo "In this islamic year, Ramadan started/will start on:\n\t",
		$formatter->format($cal), "\n";

//it is the formatters timezone that is used:
$formatter->setTimeZone('Asia/Tokyo');
echo "After changing timezone:\n\t",
		$formatter->format($cal), "\n";

The above will output:

In this islamic year, Ramadan started/will start on:
	mardi 9 juillet 2013 19:00:00 heure avancée d´Europe centrale
After changing timezone:
	mercredi 10 juillet 2013 02:00:00 heure normale du Japon

When formatting a Datetime object with a custom pattern, be sure to use a timestamp
to pass at the IntlDateFormatter::format in order to have it work with differnet versions.

Example of usage:

<?php
$date = new \DateTime();

$dateFormatter = \IntlDateFormatter::create(
	\Locale::getDefault(),
	\IntlDateFormatter::NONE,
	\IntlDateFormatter::NONE,
	\date_default_timezone_get(),
	\IntlDateFormatter::GREGORIAN,
	'EEEE'
);

var_dump($dateFormatter->format($date)); //String(6) "Monday"
?>

datefmt_format_object:

Formats an object

public static string datefmt_format_object ( object $object [, mixed $format = NULL [, string $locale = NULL ]] )

This function allows formatting an IntlCalendar or DateTime object without first explicitly creating a 
IntlDateFormatter object.

The temporary IntlDateFormatter that will be created will take the timezone from the passed in object.
The timezone database bundled with PHP will not be used - ICU's will be used instead. The timezone
identifier used DateTime objects must therefore also exist in ICU's database.

Example of usage:

<?php
/* default timezone is irrelevant; timezone taken from the object */
ini_set('date.timezone', 'UTC');
/* default locale is taken from this ini setting */
ini_set('intl.default_locale', 'fr_FR');

$cal = IntlCalendar::fromDateTime("2013-06-06 17:05:06 Europe/Dublin");
echo "default:\n\t",
		IntlDateFormatter::formatObject($cal),
		"\n";

echo "long \$format (full):\n\t",
		IntlDateFormatter::formatObject($cal, IntlDateFormatter::FULL),
		"\n";

echo "array \$format (none, full):\n\t",
		IntlDateFormatter::formatObject($cal, array(
				IntlDateFormatter::NONE,
				IntlDateFormatter::FULL)),
		"\n";

echo "string \$format (d 'of' MMMM y):\n\t",
		IntlDateFormatter::formatObject($cal, "d 'of' MMMM y", 'en_US');
		"\n";

echo "with DateTime:\n\t",
		IntlDateFormatter::formatObject(
				new DateTime("2013-09-09 09:09:09 Europe/Madrid"),
				IntlDateFormatter::FULL,
				'es_ES'),
		"\n";

default:
	6 juin 2013 17:05:06
long $format (full):
	jeudi 6 juin 2013 17:05:06 heure d´été irlandaise
array $format (none, full):
	17:05:06 heure d´été irlandise
string $format (d 'of' MMMM y):
	6 of June 2013
with DateTime:
	lunes, 9 de septiembre de 2013 09:09:09 Hora de verano de Europa central

Example of usage:

<?php
$n = 3000;

$dt = new \DateTime('2015-01-03 12:32:44');
$df = new IntlDateFormatter('hu_HU', IntlDateFormatter::SHORT, IntlDateFormatter::NONE);
$df->setPattern('MMMM dd');

$time[] = microtime(true);
for($i=0;$i<$n;$i++) {
	$a = IntlDateFormatter::formatObject($dt, 'MMMM dd', 'hu_HU');
}
echo "$a\n";
$time[] = microtime(true);

for($i=0;$i<$n;$i++) {
	$a = $df->format($dt);
}
echo "$a\n";
$time[] = microtime(true);

for($j=1;$j<count($time);$j++) {
	printf("%fs\n", $time[$j]-$time[$j-1]);
}
?>

datefmt_get_calendar:

Get the calendar type used for the IntlDateFormatter

int datefmt_get_calendar ( IntlDateFormatter $fmt )

Example of usage:

<?php
$fmt = datefmt_create(
	'en_US',
	IntlDateFormatter::FULL,
	IntlDateFormatter::FULL,
	'America/Los_Angeles',
	IntlDateFormatter::GREGORIAN
);
echo 'calendar of the formatter is : ' . datefmt_get_calendar($fmt);
datefmt_set_calendar($fmt, IntlDateFormatter::TRADITIONAL);
echo 'Now calendar of the formatter is : ' . datefmt_get_calendar($fmt);
?>

Example of OO usage:

<?php
$fmt = new IntlDateFormatter(
	'en_US',
	IntlDateFormatter::FULL,
	IntlDateFormatter::FULL,
	'America/Los_Angeles',
	IntlDateFormatter::GREGORIAN
);
echo 'calendar of the formatter is : ' . $fmt->getCalendar();
$fmt->setCalendar(IntlDateFormatter::TRADITIONAL);
echo 'Now calendar of the formatter is : ' . $fmt->getCalendar();

?>

Ouytputs:

calendar of the formatter is: 1
Now calendar of the formatter is : 0

dafefmt_get_datetype:

Get the datatype used for the IntlDateFormatter

int datefmt_get_datetype ( IntlDateFormatter $fmt )

Example of usage:

<?php
$fmt = datefmt_create(
	'en_US',
	IntlDateFormatter::FULL,
	IntlDateFormatter::FULL,
	'America/Los_Angeles',
	IntlDateFormatter::GREGORIAN
);
echo 'datetype of the formatter is : ' . datefmt_get_datetype($fmt);
echo 'First Formatted output with datetype is ' . datefmt_format($fmt, 0);

$fmt = datefmt_create(
	'en_US',
	IntlDateFormatter::SHORT,
	IntlDateFormatter::FULL,
	'America/Los_Angeles',
	IntlDateFormatter::GREGORIAN
);
echo 'Now datetype of the formatter is : ' . datefmt_get_datetype($fmt);
echo 'Second Formatted output with datetype is ' . datefmt_format($fmt, 0);

?>

Example of OO usage:

<?php
$fmt = new IntlDateFormatter(
	'en_US',
	IntlDateFormatter::FULL,
	IntlDateFormatter::FULL,
	'America/Los_Angeles',
	IntlDateFormatter::GREGORIAN
);
echo 'datetype of the formatter is : ' . $fmt->getDateType();
echo 'First Formatted output is ' . $fmt->format(0);
$fmt = new IntlDateFormatter(
	'en_US',
	IntlDateFormatter::SHORT,
	IntlDateFormatter::FULL,
	'America/Los_Angeles',
	IntlDateFormatter::GREGORIAN
);
echo 'Now datetype of the formatter is : ' . $fmt->getDateType();
echo 'Second Formatted output is ' . $fmt->format(0);

?>

The above will output:

datetype of the formatter is: 0
First Formatted output is Wednesday, December 31, 1969 4:00:00 PM PT
Now datetype of the formatter is: 2
Second Formatted output is 12/31/69 4:00:00 PM PT

datefmt_get_error_code:

Get the error code from last operation

int datefmt_get_error_code ( IntlDateFormatter $fmt )

Example of usage:

<?php
$fmt = datefmt_create(
	'en_US',
	IntlDateFormatter::FULL,
	IntlDateFormatter::FULL,
	'America/Los_Angeles',
	IntlDateFormatter::GREGORIAN
);
$str = datefmt_format($fmt);
if (!$str) {
	printf(
		"ERROR: %s (%d)\n",
		datefmt_get_error_message($fmt),
		datefmt_get_error_code($fmt)
	);
}
?>


Example of OO usage:

<?php
$fmt = new IntlDateFormatter(
	'en_US',
	IntlDateFormatter::FULL,
	IntlDateFormatter::FULL,
	'America/Los_Angeles',
	IntlDateFormatter::GREGORIAN
);
$str = $fmt->format();
if (!$str) {
	printf(
		"ERROR: %s (%d)\n",
		$fmt->getErrorMessage(),
		$fmt->getErrorCode()
	);
}
?>

The above outputs:

ERROR: U_ZERO_ERROR (0)

datefmt_get_error_message:

Get the error text from the last operation

string datefmt_get_error_message ( IntlDateFormatter $fmt )

Example of usage:

<?php
$fmt = datefmt_create(
	'en_US',
	IntlDateFormatter::FULL,
	IntlDateFormatter::FULL,
	'America/Los_Angeles',
	IntlDateFormatter::GREGORIAN
);
$str = datefmt_format($fmt);
if (!$str) {
	printf(
		"ERROR: %s (%d)\n",
		datefmt_get_error_message($fmt),
		datefmt_get_error_code($fmt)
	);
}
?>

Example of OO usage:

<?php
$fmt = new IntlDateFormatter(
	'en_US',
	IntlDateFormatter::FULL,
	IntlDateFormatter::FULL,
	'America/Los_Angeles',
	IntlDateFormatter::GREGORIAN
);
$str = $fmt->format();
if(!$str) {
	printf(
		"ERROR: %s (%d)\n",
		$fmt->getErrorMessage(),
		$fmt->getErrorCode()
	);
}

?>

The above outputs:

ERROR: U_ZERO_ERROR (0)

datefmt_get_locale:

Get the localed used by the formatter

string datefmt_get_locale ( IntlDateFormatter $fml [, int $which ] )

Example of usage:

<?php
$fmt = datefmt_create(
	'en_US',
	IntlDateFormatter::FULL,
	IntlDateFormatter::FULL,
	'America/Los_Angeles',
	IntlDateFormatter::GREGORIAN
);
echo 'Locale of the formatter is : ' . datefmt_get_locale($fmt);
echo 'First Formatted output is ' . datefmt_format($fmt, 0);

$fmt = datefmt_create(
	'de-DE',
	IntlDateFormatter::FULL,
	IntlDateFormatter::FULL,
	'America/Los_Angeles',
	IntlDateFormatter::GREGORIAN
);
echo 'locale of the formatter is : ' . datefmt_get_locale($fmt);
echo 'Second Formatted output is ' . datefmt_format($fmt, 0);

?>

Example of OO usage:

<?php
$fmt = new IntlDateFormatter(
	'en_US',
	IntlDateFormatter::FULL,
	IntlDateFormatter::FULL,
	'America/Los_Angeles',
	IntlDateFormatter::GREGORIAN
);
echo 'locale of the formatter is : ' . $fmt->getLocale();
echo 'First Formatted output is ' . $fmt->format(0);

$fmt = new IntlDateFormatter(
	'de-DE',
	IntlDateFormatter::FULL,
	IntlDateFormatter::FULL,
	'America/Los_Angeles',
	IntlDateFormatter::GREGORIAN
);
echo 'locale of the formatter is : ' . $fmt->getLocale();
echo 'Second Formatted output is ' . $fmt->format(0);

?>

The above will output:

locale of the formatter is : en
First Formatted output is Wednesday, December 31, 1969 4:00:00 PM PT
locale of the formatter is : de
Second Formatted output is Mittwoch, Dezember 1969 16:00 Uhr GMT-08:00

datefmt_get_pattern:

Get the pattern used for the IntlDateFormatter

string datefmt_get_pattern ( IntlDateFormatter $fmt )

Examples of usage:

<?php
$fmt = datefmt_create(
	'en_US',
	IntlDateFormatter::FULL,
	IntlDateFormatter::FULL,
	'America/Los_Angeles',
	IntlDateFormatter::GREGORIAN,
	'MM/dd/yyyy'
);
echo 'pattern of the formatter is : ' . datefmt_get_pattern($fmt);
echo 'First Formatted output with pattern is ' . datefmt_format($fmt, 0);
datefmt_set_pattern($fmt, 'yyyymmdd hh:mm:ss z');
echo 'Now pattern of the formatter is : ' . datefmt_get_pattern($fmt);
echo 'Second FOrmatted output with pattern is ' . datefmt_format($fmt, 0);

?>

The usage of OO:

<?php
$fmt = new IntlDateFormatter(
	'en_US',
	IntlDateFormatter::FULL,
	IntlDateFormatter::FULL,
	'America/Los_Angeles',
	IntlDateFormatter::GREGORIAN,
	'MM/dd/yyyy'
);
echo 'pattern of the formatter is : ' . $fmt->getPattern();
echo 'First Formatted output is ' . $fmt->format(0);
$fmt->setPattern('yyyymmdd hh:mm:ss z');

echo 'Now pattern of the formatter is : ' . $fmt->getPattern();
echo 'Second Formatted output is ' . $fmt->format(0);
?>

The above outputs:

pattern of the formatter is : MM/dd/yyyy
First Formatted output is 12/31/1969
Now pattern of the formatter is : yyyymmdd hh:mm:ss z
Second Formatted output is 19690031 04:00:00 PST

datefmt_get_timetype:

Get the timetype used for the IntlDateFormatter

int datefmt_get_timetype ( IntlDateFormatter $fmt )

Example of usage:

<?php
$fmt = datefmt_create(
	'en_US',
	IntlDateFormatter::FULL,
	IntlDateFormatter::FULL,
	'America/Los_Angeles',
	IntlDateFormatter::GREGORIAN
);
echo 'timetype of the formatter is : ' . datefmt_get_timetype($fmt);
echo 'First Formatted output with timetype is ' . datefmt_format($fmt, 0);

$fmt = datefmt_create(
	'en_US',
	IntlDateFormatter::FULL,
	IntlDateFormatter::SHORT,
	'America/Los_Angeles',
	IntlDateFormatter::GREGORIAN
);
echo 'Now timetype of the formatter is : ' . datefmt_get_timetype($fmt);
echo 'Second Formatted output with timetype is ' . datefmt_format($fmt, 0);

?>

Example of OO usage:

<?php
$fmt = new IntlDateFormatter(
	'en_US',
	IntlDateFormatter::FULL,
	IntlDateFormatter::FULL,
	'America/Los_Angeles',
	IntlDateFormatter::GREGORIAN
);
echo 'timetype of the formatter is : ' . $fmt->getTimeType();
echo 'First Formatted output is ' . $fmt->format(0);

$fmt = new IntlDateFormatter(
	'en_US',
	IntlDateFormatter::FULL,
	IntlDateFormatter::SHORT,
	'America/Los_Angeles',
	IntlDateFormatter::GREGORIAN
);
echo 'Now timetype of the formatter is : ' . $fmt->getTimeType();
echo 'Second Formatted output is ' . $fmt->format(0);

?>

The output is:

timetype of the formatter is : 0
First Formatted output is Wednesday, December 31, 1969 4:00:00 PM PT
Now timetype of the formatter is : 3
Second Formatted output is Wednesday, December 31, 1969 4:00 PM

datefmt_get_timezone_id:

Get the timezone-id used for the IntlDateFormatter

string datefmt_get_timezone_id ( IntlDateFormatter $fmt )

Examples of usage:

<?php
$fmt = datefmt_create(
	'en_US',
	IntlDateFormatter::FULL,
	IntlDateFormatter::FULL,
	'America/Los_Angeles',
	IntlDateFormatter::GREGORIAN
);
echo 'timezone_id of the formatter is : ' . datefmt_get_timezone_id($fmt);
datefmt_set_timezone_id($fmt, 'CN');
echo 'Now timezone_id of the formatter is : ' . datefmt_get_timezone_id($fmt);

?>

Example of OO usage:

<?php
$fmt = new IntlDateFormatter(
	'en_US',
	IntlDateFormatter::FULL,
	IntlDateFormatter::FULL,
	'America/Los_Angeles',
	IntlDateFormatter::GREGORIAN
);
echo 'timezone_id of the formatter is : ' . $fmt->getTimezoneId();
$fmt->setTimezoneId('CN');
echo 'Now timezone_id of the formatter is : ' . $fmt->getTimezoneId();

?>

The above examples output:

timezone_id of the formatter is : America/Los_Angeles
Now timezone_id of the formatter is : CN

datefmt_get_calendar_object:

Get copy of formatter's calendar object

IntlCalendar datefmt_get_calendar_object()

Obtain a copy of the calendar object used internally by this formatter. This calendar
will have a type (as in gregorian, japanese, buddhist, roc, persian, islamic etc.)
and a timezone that match the type and timezone used by the formatter.

The date/time of the object is unspecified.

Example of usage:

<?php
$formatter = IntlDateFormatter::create(
	"fr_FR@calendar=islamic",
	NULL,
	NULL,
	"GMT-01:00",
	IntlDateFormatter::TRADITIONAL
);

$cal = $formatter->getCalendarObject();

var_dump(
	$cal->getType(),
	$cal->getTimeZone(),
	$cal->getLocale(Locale::VALID_LOCALE)
);

The above outputs:

string(7) "islamic"
object(IntlTimeZone)#3 (4) {
	["valid"]=>
	bool(true)
	["id"]=>
	string(9) "GMT-01:00"
	["rawOffset"]=>
	int(-360000)
	["currentOffset"]=>
	int(-360000)
}
string(5) "fr_FR"

datefmt_get_timezone:

Get formatter's timezone

Returns an IntlTimeZone object representing the timezone that will be used to format dates
and times. When formatting IntlCalendar and DateTime objects with this IntlDateFormatter, the timezone
used will be the one returned by this method, not the one associated with the objects being formatted.

Example of usage:

<?php

$madrid = IntlDateFormatter::create(NULL, NULL, NULL, 'Europe/Madrid');
$lisbon = IntlDateFormatter::create(NULL, NULL, NULL, 'Europe/Lisbon');

var_dump($madrid->getTimezone());
echo $madrid->getTimezone()->getDisplayName(
		false, IntlTimeZone::DISPLAY_GENERIC_LOCATION, "en_US"), "\n";

echo $lisbon->getTimeZone()->getId(), "\n";
//The id can be retrieved with ->getTimezoneId()
echo $lisbon->getTimeZoneId(), "\n";

The above outputs:

object (intlTimeZone)#4 (4) {
	["valid"]=>
	bool(true)
	["id"]=>
	string(13) "Europe/Madrid"
	["rawOffset"]=>
	int(360000)
	["currentOffset"]=>
	int(7200000)
}
Spain Time
Europe/Lisbon
Europe/Lisbon

datefmt_is_lenient:

Get the lenient used for the IntlDateFormatter

bool datefmt_is_lenient ( IntlDateFormatter $fmt )

Example of usage:

<?php
$fmt = datefmt_create(
	'en_US',
	IntlDateFormatter::FULL,
	IntlDateFormatter::FULL,
	'America/Los_Angeles',
	IntlDateFormatter::GREGORIAN,
	'dd/mm/yyyy'
);
echo 'lenient of the formatter is : ';
if ($fmt->isLenient()) {
	echo 'TRUE';
} else {
	echo 'FALSE';
}
datefmt_parse($fmt, '35/13/1971');
echo "\n Trying to do parse('35/13/1971').\nResult is : " . datefmt_parse($fmt, '35/13/1971');
if (intl_get_error_code() != 0) {
	echo "\nError_msg is : " . intl_get_error_message();
	echo "\nError_code is : " . intl_get_error_code();
}
datefmt_set_lenient($fmt,false);
echo 'Now lenient of the formatter is : ';
if ($fmt->isLenient()) {
	echo 'TRUE';
} else {
	echo 'FALSE';
}
datefmt_parse($fmt, '35/13/1971');
echo "\n Trying to do parse('35/13/1971').Result is : " . datefmt_parse($fmt, '35/13/1971');
if (intl_get_error_code() != 0) {
	echo "\nError_msg is : " . intl_get_error_message();
	echo "\nError_code is : " . intl_get_error_code();
}

?>

Example of OO usage:

<?php
$fmt = new IntlDateFormatter(
	'en_US',
	IntlDateFormatter::FULL,
	IntlDateFormatter::FULL,
	'America/Los_Angeles',
	IntlDateFormatter::GREGORIAN,
	"dd/mm/yyyy"
);
echo "lenient of the formatter is : ";
if ($fmt->isLenient()) {
	echo 'TRUE';
} else {
	echo 'FALSE';
}
$fmt->parse('35/13/1971');
echo "\n Trying to do parse('35/13/1971').\nResult is : " . $fmt->parse('35/13/1971');
if (intl_get_error_code() != 0){
	echo "\nError_msg is : " . intl_get_error_message();
	echo "\nError_code is : " . intl_get_error_code();
}

$fmt->setLenient(FALSE);
echo 'Now lenient of the formatter is : ';
if ($fmt->isLenient()) {
	echo 'TRUE';
} else {
	echo 'FALSE';
}
$fmt->parse('35/13/1971');
echo "\n Trying to do parse('35/13/1971').\nResult is : " . $fmt->parse('35/13/1971');
if (intl_get_error_code() != 0) {
	echo "\nError_msg is : " . intl_get_error_message();
	echo "\nError_code is : " . intl_get_error_code();
}

?>

The above outputs:

lenient of the formatter is : TRUE
Trying to do parse('35/13/1971').
Result is : -2147483

Now lenient of the formatter is : FALSE
Trying to do parse('35/13/1971').
Result is :
Error_msg is : Date parsing failed: U_PARSE_ERROR
Error_code is : 9

datefmt_localtime:

Parse string to a field-based time value

array datefmt_localtime ( IntlDateFormatter $fmt , string $value [, int &$position ] )

Converts string $value to a field-based time value (an array of various fields), starting at
$parse_pos, and consuming as much of the input value as possible.

params:

value: string to convert to a time

position: Position at which to start the parsing in $value (zero-based). If no
error occurs before $value is consumed, $parse_pos will contain -1 otherwise it will
contain the position at which parsing method.

If $parse_pos > strlen($value), the parse fails immideatly.

Example of usage:

<?php

$fmt = datefmt_create(
	'en_US',
	IntlDateFormatter::FULL,
	IntlDateFormatter::FULL,
	'America/Los_Angeles',
	IntlDateFormatter::GREGORIAN
);
$arr = datefmt_localtime($fmt, 'Wednesday, December 31, 1969 4:00:00 PM PT', 0);
echo 'First parsed output is ';
if ($arr) {
	foreach ($arr as $key => $value) {
		echo "$key : $value , ";
	}
}

?>

Example of OO usage:

<?php
$fmt = new IntlDateFormatter(
	'en_US',
	IntlDateFormatter::FULL,
	IntlDateFormatter::FULL,
	'America/Los_Angeles',
	IntlDateFormatter::GREGORIAN
);
$arr = $fmt->localtime('Wednesday, December 31, 1969 4:00:00 PM PT', 0);
echo 'First parsed output is ';
if ($arr) {
	foreach ($arr as $key => $value) {
		echo "$key : $value , ";
	}
}

?>

The $position param does not work as described. We can still use it for setting start char pos,
but not nessecarily whether any errors opccurred.

Example of error resolution:

<?php
//cehck if errors
$bError = intl_is_failure(datefmt_get_error_code(oIDF));

//If no error
if(!$bError){
	//use 'tm_hour' and 'tm_min' from the $aTime array for checking other time values
	...
}else{
	//invalid string
	...
}
?>

Another example of usage, in terms of error handling:

<?php
//Specify locale of user
$sLocale = 'en-us'; //US English user
$sLocale = 'ar-ye'; //Yemen Arab user

//Create a date formatter for the user's locale
$oIDF = datefmt_create($sLocale, IntlDateFormatter::NONE, IntlDateFormatter::SHORT);

//Simulate a user's time input string
$sTime = datefmt_format($oIDF, ['tm_hour'=>15, 'tm_min'=>25]);

//Specify datefmt_locale parsing start at the beginning of the user input
$nPosition = 0;

//Convert inptu time string to array of standard numeric values as per localtime() output.
$aTime = datefmt_localtime($oIDF, $sTime, $nPosition);
//if no errors, $nPosition set to -1 after parsing, else char pos of error

//if valid string
if($nPosition = -1){
	//use 'tm_hour' and 'tm_min' from  the $sTime array
	...
}else{
	//invalid string
}

?>

datefmt_parse:

Parse string to a timestamp value

int datefmt_parse ( IntlDateFormatter $fmt , string $value [, int &$position ] )

Converts string to an incremental time value, starting at $parse_pos and consuming
as much of the input val as possible

Example of OO usage:

<?php
$fmt = new IntlDateFormatter(
	'en_US',
	IntlDateFormatter::FULL,
	IntlDateFormatter::FULL,
	'America/Los_Angeles',
	IntlDateFormatter::GREGORIAN
);
echo 'First parsed output is ' . $fmt->parse('Wednesday, December 20, 1989 4:00:00 PM PT');
$fmt = new IntlDateFormatter(
	'de-DE',
	IntlDateFormatter::FULL,
	IntlDateFormatter::FULL,
	'America/Los_Angeles',
	IntlDateFormatter::GREGORIAN
);
?>

Example of non OO usage:

<?php
$fmt = new datefmt_create(
	'en_US',
	IntlDateFormatter::FULL,
	IntlDateFormatter::FULL,
	'America/Los_Angeles',
	IntlDateFormatter::GREGORIAN
);

echo 'First parsed output is ' . datefmt_parse($fmt, 'Wednesday, December 20, 1989 4:00:00 PM PT');
$fmt = datefmt_create(
	'de-DE',
	IntlDateFormatter::FULL,
	IntlDateFormatter::FULL,
	'America/Los_Angeles',
	IntlDateFormatter::GREGORIAN
);
echo 'Second parsed output is ' . datefmt_parse($fmt, 'Mittwoch, 20. Dezember 1989 16:00 Uhr GMT-08:00');
?>

Outputs:

First parsed output is 63020160
Second parsed output is 630201600

datefmt_set_calendar:

Set the calendar type used by the formatter

bool datefmt_set_calendar ( IntlDateFormatter $fmt, mixed $which )

Examples of usage:

<?php
$fmt = datefmt_create(
	'en_US',
	IntlDateFormatter::FULL,
	IntlDateFormatter::FULL,
	'America/Los_Angeles',
	IntlDateFormatter::GREGORIAN
);
echo 'calendar of the formatter is : ' . datefmt_get_calendar($fmt);
datefmt_set_calendar($fmt, IntlDateFormatter::TRADITIONAL);
echo 'Now calendar of the formatter is : ' . datefmt_get_calendar($fmt);
?>

Examples of OO usage:

<?php
$fmt = new IntlDateFormatter(
	'en_US',
	IntlDateFormatter::FULL,
	IntlDateFormatter::FULL,
	'America/Los_Angeles',
	IntlDateFormatter::GREGORIAN
);
echo 'calendar of the formatter is : ' . $fmt->getCalendar();
$fmt->setCalendar(IntlDateFormatter::TRADITIONAL);
echo 'Now calendar of the formatter is : ' . $fmt->getCalendar();
?>

The abve outputs:

calendar of the formatter is : 1
Now calendar of the formatter is : 0

Example with IntlCalendar argument:

<?php
$time = strtotime("2013-03-03 00:00:00 UTC");
$formatter = IntlDateFormatter::create("en_US", NULL, NULL, "Europe/Amsterdam");

echo "before: " . $formatter->format($time) . "\n";

/* Note that the calendar's locale is not used */
$formatter->setCalendar(IntlCalendar::createInstance(
				"America/New_York", "pt_PT@calendar=islamic"));

echo "after:  " . $formatter->format($time) . "\n";

?>

The above outputs:

before: Sunday, March 3, 2013 at 1:00:00 AM Central European Standard Time
after: Saturday, Rabi' II 20, 1434 at 7:00:00 PM Eastern Standard Time

datefmt_set_lenient:

Set the leniency of the parser

bool datefmt_set_lenient ( IntlDateFormatter $fmt , bool $lenient )

Define if the parser is strict in itnerpreting inputs that do not match the pattern exactly.
Enabling lenient parsing allows the parser to accept otherwise flawed date or time patterns,
parsing as much as possible to obtain a value.

Extra space, unrecognized tokens, or invalid values ("February 30th") are not accepted.

Example of usage:

<?php
$fmt = datefmt_create(
	'en_US',
	IntlDateFormatter::FULL,
	IntlDateFormatter::FULL,
	'America/Los_Angeles',
	IntlDateFormatter::GREGORIAN,
	'dd/MM/yyyy'
);
echo 'lenient of the formatter is : ';
if ($fmt->isLenient()) {
	echo 'TRUE';
} else {
	echo 'FALSE';
}
datefmt_parse($fmt, '35/13/1971');
echo "\n Trying to do parse('35/13/1971').\nResult is : " . datefmt_parse($fmt, '35/13/1971');
if (intl_get_error_code() != 0) {
	echo "\nError_msg is : " . intl_get_error_message();
	echo "\nError_code is : " . intl_get_error_code();
}
datefmt_set_lenient($fmt, false);
echo "\nNow lenient of the formatter is : ";
if ($fmt->isLenient()) {
	echo 'TRUE';
} else {
	echo 'FALSE';
}
datefmt_parse($fmt, '35/13/1971');
echo "\nTrying to do parse('35/13/1971').\nResult is : " . datefmt_parse($fmt, '35/13/1971');
if (intl_get_error_code() != 0){
	echo "\nError_msg is : ".intl_get_error_message();
	echo "\nError_code is : ".intl_get_error_code();
}

?>

Example of OO usage:

<?php
$fmt = new IntlDateFormatter(
	'en_US',
	IntlDateFormatter::FULL,
	IntlDateFormatter::FULL,
	'America/Los_Angeles',
	IntlDateFormatter::GREGORIAN,
	'dd/MM/yyyy'
);
echo 'lenient of the formatter is : ';
if ($fmt->isLenient()) {
	echo 'TRUE';
} else {
	echo 'FALSE';
}
$fmt->parse('35/13/1971');
echo "\n Trying to do parse('35/13/1971').\nResult is : " . $fmt->parse('35/13/1971');
if (intl_get_error_code() != 0) {
	echo "\nError_msg is : " . intl_get_error_message();
	echo "\nError_code is : " . intl_get_error_code();
}

$fmt->setLenient(FALSE);
echo "\nNow lenient of the formatter is : ";
if ($fmt->isLenient()) {
	echo 'TRUE';
} else {
	echo 'FALSE';
}
$fmt->parse('35/13/1971');
echo "\n Trying to do parse('35/13/1971').\nResult is : " . $fmt->parse('35/13/1971');
if (intl_get_error_code() != 0) {
	echo "\nError_msg is : " . intl_get_error_message();
	echo "\nError_code is : " . intl_get_error_code();
}

?>

The above outputs:

lenient of the formatter is : TRUE
Trying to do parse('35/13/1971').
Result is : 66038400
Now lenient of the formatter is : FALSE
Trying to do parse('35/13/1971').

Result is :
Error_msg is : Date parsing failed: U_PARSE_ERROR
Error_code is : 9

datefmt_set_pattern:

Set the pattern used for the IntlDateFormatter

bool datefmt_set_pattern ( IntlDateFormatter $fmt , string $pattern )

Example of usage:

<?php
$fmt = datefmt_create(
	'en_US',
	IntlDateFormatter::FULL,IntlDateFormatter::FULL,
	'America/Los_Angeles',
	IntlDateFormatter::GREGORIAN,
	'MM/dd/yyyy'
);
echo 'pattern of the formatter is : ' . datefmt_get_pattern($fmt);
echo 'First Formatted output with pattern is ' . datefmt_format($fmt, 0);

datefmt_set_pattern($fmt, 'yyyymmdd hh:mm:ss z');
echo 'Now pattern of the formatter is : ' . datefmt_get_pattern($fmt);
echo 'Second Formatted output with pattern is ' . datefmt_format($fmt, 0);

?>

Examples of OO usage:

<?php
$fmt = new IntlDateFormatter(
	'en_US',
	IntlDateFormatter::FULL,IntlDateFormatter::FULL,
	'America/Los_Angeles',
	IntlDateFormatter::GREGORIAN,
	'MM/dd/yyyy'
);
echo 'pattern of the formatter is : ' . $fmt->getPattern();
echo 'First Formatted output is ' . $fmt->format(0);

$fmt->setPattern('yyyymmdd hh:mm:ss z');
echo 'Now pattern of the formatter is : ' . $fmt->getPattern();
echo 'Second Formatted output is ' . $fmt->format(0);

?>

The above will output:

pattern of the formatter is: MM/dd/yyyy
First Formatted output with pattern is 12/31/1969
Now pattern of the formatter is : yyyymmdd hh:mm:ss z
Second Formatted output with pattern is 19690031 04:00:00 PST

datefmt_set_timezone:

Sets the timezone that will be used when formatting dates or times with this
object.

bool datefmt_set_timezone ( mixed $zone )

Example of usage:

<?php
ini_set('date.timezone', 'Europe/Amsterdam');

$formatter = IntlDateFormatter::create(NULL, NULL, NULL, "UTC");

$formatter->setTimeZone(NULL);
echo "NULL\n 	" . $formatter->getTimeZone()->getId() . "\n";

$formatter->setTimeZone(IntlTimeZone::createTimeZone('Europe/Lisbon'));
echo "IntlTimeZone\n 	" . $formatter->getTimeZone()->getId() . "\n";

$formatter->setTimeZone(new DateTimeZone('Europe/Paris'));
echo "DateTimeZone\n 	" . $formatter->getTimeZone()->getId() . "\n";

$formatter->setTimeZone('Europe/Rome');
echo "String\n 	" . $formatter->getTimeZone()->getId() . "\n";

$formatter->setTimeZone('GMT+00:30');
print_r($formatter->getTimeZone());

The above outputs:

NULL
	Europe/Amsterdam
IntlTimeZone
	Europe/Lisbon
DateTimeZone
	Europe/Paris
String
	Europe/Rome
IntlTimeZone Object
(
	[valid] => 1
	[id] => GMT+00:30
	[rawOffset] => 1800000
	[currentOffset] => 1800000
)

The above methods belonged to IntlDateFormatter. The following ones, belong to ResourceBundle:

resourcebundle_count:

Get number of elements in the bundle

int resourcebundle_count ( ResourceBUndle $r )

Examples of usage:

<?php
$r = resourcebundle_create( 'es', "/usr/share/data/myapp");
echo resourcebundle_count($r);
?>

Example of OO usage:

<?php
$r = new ResourceBundle( 'es', "/usr/share/data/myapp");
echo $r->count();
?>

The above outputs:

42

resourcebundle_create:

Create a resource bundle

ResourceBundle resourcebundle_create ( string $locale , string $bundlename [, bool $fallback ] )

Examples of usage:

<?php
$r = resourcebundle_create( 'es', "/usr/share/data/myapp");
echo $r['teststring'];
?>

Another example of usage:

<?php
$r = ResourceBundle::create( 'es', "/usr/share/data/myapp");
echo $r['teststring'];
?>

To get other bundles, use these constants are bundlename args:

ICUDATA-curr

ICUDATA-lang

ICUDATA-region

ICUDATA-zone

And to get the resource bundle used by libicu, pass NULL as $bundlename.

Example of output:

Hola, mundo!

resourcebundle_get_error_code:

Get error code from the last function performed by the bundle object

int resourcebundle_get_error_code ( ResourceBundle $r )

Example of usage:

<?php
$r = resourcebundle_create( 'es', "/usr/share/data/myapp");
echo $r['somestring'];
if(intl_is_failure(resourcebundle_get_error_code($r))) {
	report_error("Bundle error");
}
?>

Example of OO usage:

<?php
$r = new ResourceBundle( 'es', "/usr/share/data/myapp");
echo $r['somestring'];
if(intl_is_failure(ResourceBundle::getErrorCode($r))) {
	report_error("Bundle error");
}
?>

resourcebundle_get_error_message:

string resourcebundle_get_error_message ( ResourceBundle $r )

Get error message from the last function by the bundle object.

Example of usage:

<?php
$r = resourcebundle_create( 'es', "/usr/share/data/myapp");
echo $r['somestring'];
if(intl_is_failure(resourcebundle_get_error_code($r))) {
	report_error("Bundle error: ".resourcebundle_get_error_message($r));
}
?>

Example of OO usage:

<?php
$r = new ResourceBundle( 'es', "/usr/share/data/myapp");
echo $r['somestring'];
if(intl_is_failure(ResourceBundle::getErrorCode($r))) {
	report_error("Bundle error: " . ResourceBundle::getErrorMessage($r));
}
?>

resourcebundle_get:

Get data from the bundle by index or string key

mixed resourcebundle_get ( ResourceBundle $r , string|int $index [, bool $fallback = TRUE ] )

Return values:

Returns the data located at the index or NULL on error. String, integers, and binary data strings
are returned as corresponding PHP types, integer array is returned as PHP array.

Complex types are returned as ResourceBundle object.

Examples of usage:

<?php
$r = resourcebundle_create( 'es', "/usr/share/data/myapp");
echo resourcebundle_get($r, 'somestring');
?>

Example of OO usage:

<?php
$r = new ResourceBundle( 'es', "/usr/share/data/myapp");
echo $r->get('somestring');
?>

The above outputs:

?Hola, mundo!

resourcebundle_locales:

Get available locales from ResourceBundle name.

array resourcebundle_locales( string $bundlename )

Examples of usage:

<?php
$bundle = "/user/share/data/myapp";
echo join(PHP_EOL, resourcebundle_locales($bundle));
?>

and OO usage:

<?php
$bundle = "/usr/share/data/myapp";
$r = new ResourceBundle( 'es', $bundle);
echo join("\n", $r->getLocales($bundle));
?>

If we call it with an empty string, we would get a list of all locales available in the ICU library,
via the intl extension.

The above outputs:

es
root

The above methods belong to ResourceBUndle, the following belong to Spoofchecker:

Spoofchecker::areConfusable:

Checks if given strings can be confused

public bool Spoofchecker::areConfusable ( string $str1, string $str2 [, string &$error ] )

Example of usage:

<?php
$checker = new Spoofchecker();

$checker->areConfusable('google.com', 'goog1e.com'); //True

$checker->areConfusable('google.com', 'g00gle.com'); //False
// zer0 cannot be easily confused with o

Spoofchecker::__construct:

public Spoofchecker::__construct()

Creates new instance of Spoofchecker

Spoofchecker::isSuspicous:

Checks if given string contains any suspicious characters like letters which are almost
identical visually, but are Unicode chars from different sets.

public bool Spoofchecker::isSuspicious ( string $text [, string &$error ] )

Example of usage:

<?php
$checker = new Spoofchecker();

$checker->isSuspicious('google.com'); //FALSE, only ascii chars

$checker->isSuspicious('Paypal.com'); //The first letter is from cyrillic, not a regular latin P
//Thus, TRUE

Spoofchecker::setAllowedLocales:

Locales to use when running checks

public void Spoofchecker::setAllowedLocales ( string $locale_list )

Spoofchecker::setChecks:

Set the checks to run

public void Spoofchecker::setChecks ( long $checks )

The above methods belong to Spoofchecker, whilst, the following, are for Transliterator:

Transliterator::__construct:

Private construct to deny instansiation of new.

use the factory methods of Transliterator::create() or Transliterator::createFromRules() instead.

transliterator_create:

Creates a transliterator

Transliterator transliterator_create ( string $id [, int $direction ] )

transliterator_create_from_rules:

Create a Transliterator from rules

Transliterator transliterator_create_from_rules ( string $id [, int $direction ] )

transliterator_create_inverse:

Create an inverse transliterator

Transliterator transliterator_create_inverse()

transliterator_get_error_code:

Get last error code

int transliterator_get_error_code()

transliterator_get_error_message:

Get last error message

string transliterator_get_error_message()

transliterator_list_ids:

Get transliterator IDs

array transliterator_list_ids()

Returns an array with the registered transliterator IDs

transliterator_transliterate:

Transliterate a string

transliterator_transliterate ( mixed $transliterator , string $subject [, int $start [, int $end ]] )

Transforms a string or part thereof using an ICU transliterator

Example of usage:

<?php
$s = "\u304A\u65E9\u3046\u3054\u3044\u307E\u3059";
echo transliterator_translitarate("Hex-Any/Java", $s), "\n";

//Now the reverse operation with a supplementary character
$supplChar = html_entity_decode('&#x1D11E;');
echo mb_strlen($supplChar, "UTF-8"), "\n";
$encSupplChar = transliterator_transliterate("Any-Hex/Java", $supplChar);
//Echoes two encoded UTF-16 code units
echo $encSupplChar, "\n";
//And back
echo transliterator_transliterate("Hex-Any/Java", $encSupplChar), "\n";
?>

An example of converting everything to latin chars and the nconverting them to ascii:

<?php
var_dump(transliterator_transliterate('Any-Latin; Latin-ASCII; Lower()', <bla message goes here>));
?>

The above works on most chars. You can delimit past a certain point of UTF caps,
if you want, but that seems overkill.

The above methods belong to Transliterator class, the following belong to IntlBreakIterator:

IntlBreakIterator::__construct

private IntlBreakIterator::__construct()

IntlBreakIterator::createCharacterInstance:

Create break iterator for boundaries of combining character sequences

public static ReturnType IntlBreakIterator::createCharacterInstance ([ string $"locale" ])

IntlBreakIterator::createCodePointInstance:

Create break iterator for boundaries of code points

public static ReturnType IntlBreakIterator::createCodePointInstance()

IntlBreakIterator::createLineInstance:

Create break iterator for logically possible line breaks

public static ReturnType IntlBreakIterator::createLineInstance ([ string $"locale" ])

IntlBreakIterator::createSentenceInstance:

Create break iterator for sentence breaks

public static ReturnType IntlBreakIterator::createSentenceInstance([ string $"locale" ])

IntlBreakIterator::createTitleInstance:

Create break iterator for title-casing breaks

public static ReturnType IntlBreakIterator::createTitleInstance([ string $"locale" ])

IntlBreakIterator::createWordInstance:

Create break iterator for word breaks

public static ReturnType IntlBreakIterator::createWordInstance([ string $"locale" ])

IntlBreakIterator::current:

Get index of current pos

public ReturnType IntlBreakIterator::current()

IntlBreakIterator::first:

Set position to the first character in the text

public ReturnType IntlBreakIterator::first()

IntlBreakIterator::following:

Advance the iterator to the first boundary following specified offset

public ReturnType IntlBreakIterator::following( string $"offset" )

IntlBreakIterator::getErrorCode:

Get last error code on the object

public ReturnType IntlBreakIterator::getErrorCode()

IntlBreakIterator::getErrorMessage:

Get last error message on the object

public ReturnType IntlBreakIterator::getErrorMessage()

ReturnType intl_get_error_message()

IntlBreakIterator::getLocale:

Get the locale associated with the object

public ReturnType IntlBreakIterator::getLocale ( string $"locale_type" )

IntlBreakIterator::getPartsIterator:

Create iterator for navigating fragments between boundaries

public ReturnType IntlBreakIterator::getPartsIterator ([ string $"key_type" ])

IntlBreakIterator::getText:

Get the text being scanned

public ReturnType IntlBreakIterator::getText()

IntlBreakIterator::isBoundary:

Tell whether an offset is a boundary's offset

public ReturnType IntlBreakIterator::isBoundary ( string $"offset" )

IntlBreakIterator::last:

Set the iterator position to index beyond hte last char

public ReturnType IntlBreakIterator::last()

IntlBreakIterator::next:

Advance the iterator the next boundary

public ReturnType IntlBreakIterator::next ([ string $"offset"])

IntlBreakIterator:

Set the iterator position to the first boundary before an offset

public ReturnType IntlBreakIterator::preceding ( string $"offset" )

IntlBreakIterator::previous:

Set the iterator position to the boundary immideatly before the current

public ReturnType IntlBreakIterator::previous()

IntlBreakIterator:::setText:

Sets the text being scanned

public ReturnType IntlBreakIterator::setText( string $"text" )

The above belong to IntlBreakIterator, the following belong to IntlRuleBasedBreakIterator:

IntlRuleBasedBreakIterator::__construct:

Create iterator from ruleset

public IntlRuleBasedBreakIterator::__construct ( string $rules [, string $areCompiled ] )

IntlRuleBasedBreakIterator::getBinaryRules:

Get the binary form of compiled rules

public ReturnType IntlRuleBasedBreakIterator::getBinaryRules()

IntlRuleBasedBreakIterator::getRules:

Get the rule set used to create this object

public ReturnType IntlRuleBasedBreakIterator::getRules()

IntlRuleBasedBreakIterator::getRuleStatus:

Get the largest status value from the break rules that determined the current break position

public ReturnType IntlRuleBasedBreakIterator::getRuleStatus()

IntlRuleBasedBreakIterator::getRuleStatusVec:

Get the status values from the break rules that determined the current break position

public ReturnType IntlRuleBasedBreakIterator::getRuleStatusVec()

The above belongs to IntlRuleBasedBreakIterator, the following belongs to IntlCodePointBreakIterator:

IntlCodePointBreakIterator::getLastCodePoint:

Get last code point passed over after advancing or receding the iterator

public ReturnType IntlCodePointBreakIterator::getLastCodePoint()

The previous belonged to IntlCodePointBreakIterator, the next belongs to IntlPartsIterator:

IntlPartsIterator::getBreakIterator:

Get IntlBreakIterator backing this parts iterator

public ReturnType IntlPartsIterator::getBreakIterator()


The above belongs to IntlPartsIterator, the next belongs to UConverter:

UConverter::__construct:

Create UConverter object

public UConverter::__construct([ string $destination_encoding [, string $source_encoding ]] )

UConverter::convert:

Convert string from one charset to another

public string UConverter::convert ( string $str [, bool $reverse ] )

UConverter::fromUCallback:

Default "from" callback function

public mixed UConverter::fromUCallback ( integer $reason , string $source , string $codePoint , integer &$error )

UConverter::getAliases:

Get the aliases of the given name

public static array UConverter::getAliases ([ string $name ])

UConverter::getAvailable:

Get the available canonical converter names

public static array UConverter::getAvailable()

UConverter::getDestinationEncoding:

Get the destination encoding

public string UConverter::getDestinationEncoding()

UConverter::getDestinationType:

Get the destination converter type

public integer UConverter::getDestinationType()

UConverter::getErrorCode:

Get the last error code on the object

public integer UConverter::getErrorCode()

UConverter::getErrorMessage:

Get last error message on the object

public string UConverter::getErrorMessage()

UConverter::getSourceEncoding:

Get the source encoding

public string UConverter::getSourceEncoding()

UConverter::getSourceType:

Get the source convertor type

public integer UConverter::getSourceType()

UConverter::getStandards:

Get standards associated to converter names

public static array UConverter::getStandards()

UConverter::getSubstChars:

Get substitution chars

public string UConverter::getSubstChars()

UConverter::reasonText:

Get string representation of the callback reason

public static string UConverter::reasonText ([ integer $reason ])

UConverter::setDestinationEncoding:

Set the destination encoding

public void UConverter::setDestinationEncoding ( string $encoding )

UConverter::setSourceEncoding:

Set the source encoding

public void UConverter::setSourceEncoding ( string $encoding )

UConverter::setSubstChars:

Set the substitution chars

public void UConverter::setSubstChars ( string $chars )

UConverter::toUCallback:

Default "to" callback function

public mixed UConverter::toUCallback ( integer $reason, string $source , string $codeUnits , integer &$error )

UConverter::transcode:

Convert strings from one charset to another

public static string UConverter::transcode ( string $str, string $toEncoding, string $fromEncoding [, array $options ])

The above methods belong to UConverter, the following to Grapheme:

grapheme_extract:

Function to extract a sequence of default grapheme clusters from a text buffer, which must be encoded in
UTF-8.

string grapheme_extract ( string $haystack , int $size [, int $extract_type [, int $start = 0 [, int &$next ]]] )

The params:

haystack: The string to search

size: max numbers of items, based on the $extract_type to return

extract_type: Defines the type of units referred to by the $size parameter:

GRAPHEME_EXTR_COUNT (default) - $size is the number of default grapheme clusters to extract

GRAPHEME_EXTR_MAXBYTES - $size is the maximum number of bytes returned

GRAPHEME_EXTR_MAXCHARS - $size is the maximum number of UTF-8 characters returned

start: 

Starting position in $haystack in bytes - if given, it must be zero or a positive value that is less than
or equal to length of $haystack in bytes, or a negative value that counts from the end of $haystack.

If $start does not point to the first byte of a UTF-8 char, the start position is moved to the next
character boundary.

next:

Reference to a value that will be set to the next starting position. When the call returns, this may point
to the first byte position past the end of the string.

Example of usage:

<?php

$char_a_ring_nfd = "a\xCC\x8A"; // 'LATIN SMALL LETTER A WITH RING ABOVE' (0+00E5) NORMALIZATION FORM "D"
$char_o_diaeresis_nfd = "o\xCC\x88"; //'LATIN SMALL LETTER O WITH DIAERESIS' (U+00F6) NORMALIZATION FORM "D"

print urlencode(grapheme_extract( $char_a_ring_nfd . $char_o_diaeresis_nfd, 1, GRAPHEME_EXTR_COUNT, 2));

?>

The above example will output:

o%CC%88

An example of looping across a UTF-8 string char by char.

<?php

$str = "<bla stuff>";

$n = 0;

for ( $start = 0, $next = 0, $maxbytes = strlen($str), $c = '';
		$start < $maxbytes;
		$c = grapheme_extract($str, 1, GRAPHEME_EXTR_MAXCHARS, ($start = $next), $next)
	)
{
	if (empty($c))
		continue;
	echo "This utf8 character is " . strlen($c) . " bytes long and its first byte is " . ord($c[0]) . "\n";
	$n++;
}
echo "$n UTF-8 characters in a string of $maxbytes bytes!\n";
// Should print: X utf8 chars in a string of Y bytes!
?>

grapheme_stripos:

Find position (in grapheme units) of first occurrence of a case-insensitive string

int grapheme_stripos ( string $haystack, string $needle [, int $offset = 0 ] )

Example of usage:

<?php

$char_a_ring_nfd = "a\xCC\x8A"; //LATIN SMALL LETTER A WITH RING ABOVE (U+00E5) normalization form "D"
$char_o_diaeresis_nfd = "o\xCC\x88"; //Latin small letter with o with diaersis (U+00F6) normalization form "D"
$char_O_diaeresis_nfd = "O\xCC\x88"; //Latin capital letter O with diaersis (U+00D6) normalization form "D"

print grapheme_stripos( $char_a_ring_nfd . $char_a_ring_nfd . $char_o_diaeresis_nfd, $char_O_diaeresis_nfd);

?>

grapheme_stristr:

returns part of haystack string starting from and including the first occurrence of case-insenstive 
needle to the end of the haystack

string grapheme_stristr ( string $haystack, string $needle [, bool $before_needle = false ] )

Example of usage:

<?php

$char_a_ring_nfd = "a\xCC\x8A"; //'LATIN SMALL LETTER A WITH RING ABOVE' (U+00E5) normalization form "D"
$char_o_diaeresis_nfd = "o\xCC\x88"; //LATIN SMALL LETTER O WITH DIAERESIS (U+00F6) normalization form "D"
$char_O_diaeresis_nfd = "O\xCC\x88"; //Latin capital letter O with diaersis (U+00D6) normalization form "D"

print urlencode(grapheme_stristr( $char_a_ring_nfd . $char_o_diaeresis_nfd . $char_a_ring_nfd, $char_O_diaeresis_nfd));

?>

grapheme_strlen:

get string length in grapheme units

int grapheme_strlen ( string $input )

Example of usage:

<php

$char_a_ring_nfd = "a\xCC\x8A";
$char_o_diaeresis_nfd = "o\xCC\x88";

print grapheme_strlen( 'abc' . $char_a_ring_nfd . $char_o_diaeresis_nfd . $char_a_ring_nfd);

?>

Outputs:

6

grapheme_strpos:

Find position (in grapheme units) of first occurence of a string

int grapheme_strpos ( string $haystack , string $needle [, int $offset = 0 ])

Example of usage:

<?php

$char_a_ring_nfd = "a\xCC\x8A"; 
$char_o_diaeresis_nfd = "o\xCC\x88";

print grapheme_strpos( $char_a_ring_nfd . $char_a_ring_nfd . $char_o_diaeresis_nfd, $char_o_diaeresis_nfd);

?>

grapheme_strripos:

Find position (in grapheme units) of last occurrence of a case-insensitive string

int grapheme_strripos ( string $haystack , string $needle [, int $offset = 0 ] )

Example of usage:

<?php

$char_a_ring_nfd = "a\xCC\x8A";
$char_o_diaeresis_nfd = "o\xCC\x88";
$char_O_diaeresis_nfd = "O\xCC\x88";

print grapheme_strripos( $char_a_ring_nfd . $char_o_diaeresis_nfd . $char_o_diaeresis_nfd, $char_O_diaeresis_nfd);

?>

grapheme_strrpos:

Find position (in grapheme units) of last occurence of a string

int grapheme_strrpos ( string $haystack, string $needle [, int $offset = 0 ] )

Example of usage:

<?php
$char_a_ring_nfd = "a\xCC\x8A"; 
$char_o_diaeresis_nfd = "o\xCC\x88";

print grapheme_strrpos( $char_a_ring_nfd . $char_o_diaeresis_nfd . $char_o_diaeresis_nfd, $char_o_diaresis_nfd);
?>

grapheme_strstr:

Returns part of haystack string from the first occurence of needle to the end of haystack.

string grapheme_strstr ( string $haystack, string $needle [, bool $before_needle = false ] )

Example of usage:

<?php
$char_a_ring_nfd = "a\xCC\x8A";
$char_o_diaeresis_nfd = "o\xCC\x88";

print urlencode(grapheme_stristr( etc. ));

?>

grapheme_substr:

Returns part of a string

string grapheme_substr ( string $string, int $start [, int $length ] )

Example of usage:

<?php

$char_a_ring_nfd = "a\xCC\x8A";
$char_o_diaeresis_nfd = "o\xCC\x88";

print urlencode(grapheme_substr( "ao" . $char_a_ring_nfd . "bc" . $char_o_diaeresis_nfd . "0", 2, -1 ));
?>

The above belongs to Grapheme, the following belongs to IDN:

idn_to_ascii:

Convert domain name to IDNA ASCII form.

string idn_to_ascii ( string $domain [, int $options = 0 [, int $variant = INTL_IDNA_VARIANT_2003 [, array &$idna_info ]]] )

Params:

Domain: The domain to convert, which must be UTF-8 encoded

options: Conversion options - combination of IDNA_* constants (except IDNA_ERROR_* constants)

variant: Either INTL_IDNA_VARIANT_2003 for IDNA 2003 or INTL_IDNA_VARIANT_UTS46 for UTS #46

idna_info: This param can be used only if INTL_IDNA_VARIANT_UTS46 was used for variant. In that case,
it will be filled with an array with the keys 'result', the possibly illegal result of the transformation,
'isTranstionalDifferent', a boolean indicating whether the usage of the transitional mechanisms of 
UTS #46 either has or would have changed the results and 'error', which is an int representing a bitset
of the error constants IDNA_ERROR_*.

idn_to_utf8:

Convert domain name from IDNA ASCII to Unicode.

string idn_to_utf8 ( string $domain [, int $options = 0 [, int $variant = INTL_IDNA_VARIANT_2003 [, array &$idna_info ]]] )

The above belongs to IDN Functions, the following belongs to IntlChar:

charAge:

Get the "age" of the code point

public static array IntlChar::charAge ( mixed $codepoint )

The "age" is the Unicode version when the code point was first designated (as a non-character or for Private Use)
or assign a character. This can be useful to avoid emitting code points to receiving processes that do not 
accept newer characters.

Example of usage:

<?php
var_dump(IntlChar::charage("\u{2603}"));
var_dump(IntlChar::charage("\u{1F576}"));
?>

Outputs:

array(4) {
	[0]=>
	int(1)
	[1]=>
	int(1)
	[2]=>
	int(0)
	[3]=>
	int(0)
}

etc.

IntlChar::charDigitValue:

Get the decimal digit value of a decimal digit character

public static int IntlChar::charDigitValue ( mixed $codepoint )

Returns the decimal digit value of a decimal digit char

Such chars, have the general category "Nd" (decimal digit numbers) and a Numeric_Type of Decimal.

Example of usage:

<?php
var_dump(IntlChar::charDigitValue("1"));
var_dump(IntlChar::charDigitValue("\u{0662}"));
var_dump(IntlChar::charDigitValue("\u{0E53}"));
?>

IntlChar::charDirection:

Get bidirectional category value for a code point

public static int IntlChar::charDirection ( mixed $codepoint )

Returns the bidirectional category value for the code point, which is used in
the Unicode bidirectional algorithm (UAX #9)

Return ones of the following:

IntlChar::CHAR_DIRECTION_LEFT_TO_RIGHT

IntlChar::CHAR_DIRECTION_RIGHT_TO_LEFT

IntlChar::CHAR_DIRECTION_EUROPEAN_NUMBER

IntlChar::CHAR_DIRECTION_EUROPEAN_NUMBER_SEPARATOR

IntlChar::CHAR_DIRECTION_EUROPEAN_NUMBER_TERMINATOR

IntlChar::CHAR_DIRECTION_ARABIC_NUMBER

IntlChar::CHAR_DIRECTION_COMMON_NUMBER_SEPARATOR

IntlChar::CHAR_DIRECTION_BLOCK_SEPARATOR

IntlChar::CHAR_DIRECTION_SEGMENT_SEPARATOR

IntlChar::CHAR_DIRECTION_WHITE_SPACE_NEUTRAL

IntlChar::CHAR_DIRECTION_OTHER_NEUTRAL

IntlChar::CHAR_DIRECTION_LEFT_TO_RIGHT_EMBEDDING

IntlChar::CHAR_DIRECTION_LEFT_TO_RIGHT_OVERRIDE

IntlChar::CHAR_DIRECTION_RIGHT_TO_LEFT_ARABIC

IntlChar::CHAR_DIRECTION_RIGHT_TO_LEFT_EMBEDDING

IntlChar::CHAR_DIRECTION_RIGHT_TO_LEFT_OVERRIDE

IntlChar::CHAR_DIRECTION_POP_DIRECTIONAL_FORMAT

IntlChar::CHAR_DIRECTION_DIR_NON_SPAGING_MARK

IntlChar::CHAR_DIRECTION_BOUNDARY_NEUTRAL

IntlChar::CHAR_DIRECTION_FIRST_STRONG_ISOLATE

IntlChar::CHAR_DIRECTION_LEFT_TO_RIGHT_ISOLATE

IntlChar::CHAR_DIRECTION_RIGHT_TO_LEFT_ISOLATE

IntlChar::CHAR_DIRECTION_POP_DIRECTIONAL_ISOLATE

IntlChar::CHAR_DIRECTION_CHAR_DIRECTION_COUNT

Example of usage:

<?php
var_dump(IntlChar::charDirection("A") === IntlChar::CHAR_DIRECTION_LEFT_TO_RIGHT);
var_dump(IntlChar::charDirection("\u{05E9}") === IntlChar::CHAR_DIRECTION_RIGHT_TO_LEFT);
var_dump(IntlChar::charDirection("+") === IntlChar::CHAR_DIRECTION_EUROPEAN_NUMBER_SEPARATOR);
var_dump(IntlChar::charDirection(".") === IntlChar::CHAR_DIRECTION_COMMON_NUMBER_SEPARATOR);
?>

IntlChar::charFromName:

Find unicode character by name and return its code point value

public static int IntlChar::charFromName ( string $characterName [, int $nameChoice = IntlChar::UNICODE_CHAR_NAME ] )

Finds a unicode char by its name and returns its code point value.

The name is matched exactly and completely. If the name does not correspond to a code point, FALSE is returned.

A Unicode 1.0 name is matched only if it differs from the modern name. Unicode names are all uppercase.
Extended names are lowercase followed by an uppercase hexadecimal number, and within angle brackets.

Params:

characterName:

Full name of the Unicode character.

nameChoice:

Which set of names to use for the lookup. Can be any of these constnats:

IntlChar::UNICODE_CHAR_NAME //Default

IntlChar::UNICODE_10_CHAR_NAME

IntlChar::EXTENDED_CHAR_NAME

IntlChar::CHAR_NAME_ALIAS

IntlChar::CHAR_NAME_CHOICE_COUNT

Examples of usage:

<?php
var_dump(IntlChar::charFromName("LATIN CAPITAL LETTER A"));
var_dump(IntlChar::charFromName("SNOWMAN"));
var_dump(IntlChar::charFromName("RECYCLING SYMBOL FOR TYPE-1 PLASTICS"));
var_dump(IntlChar::charFromName("A RANDOM STRING WHICH DOES NOT CORRESPOND TO ANY UNICODE CHARACTER"));
?>

outputs:

int(65)
int(9731)
int(9843)
bool(false)

IntlChar::charMirror:

Get the "mirror-image" char for a code point

public static mixed IntlChar::charMirror ( mixed $codepoint )

Maps the specified char to a "mirror-image" char.

For chars with the Bidi_Mirrored property, implementations sometimes need a "poor man's" mapping to another
Unicode char (code point) such that the default glyph may serve as the mirror-image of the default glyph
of the specified character.

This is useful for text conversion to and from codepages with visual order, and for displays without
glyph selection capabilities.

Example of usage:

<?php
var_dump(IntlChar::charMirror("A"));
var_dump(IntlChar::charMirror("<"));
var_dump(IntlChar::charMirror("("));
?>

This outputs:

string(1) "A"
string(1) ">"
string(2) ")"

IntlChar::charName:

Retrieve the name of a Unicode char

public static string IntlChar::charName ( mixed $codepoint [, int $nameChoice = IntlChar::UNICODE_CHAR_NAME ] )

Depending on nameChoice, the resulting character name is the "modern" name or the name that was defined in Unicode
version 1.0. The name contains only "invariant" characters like A-Z, 0-9, space, and '-'. Unicode 1.0 names
are only retrieved if they are different from the modern names and if ICU contains the data for them.

Params:

codepoint: The integer codepoint value (e.g. 0x2603 for U+2603 SNOWMAN), or the char encoded as UTF-8 string (e.g. "\u{2603}")

nameChoice:

Which set of names to use for the lookup. Can be any of these constants:

IntlChar::UNICODE_CHAR_NAME (default)

IntlChar::UNICODE_10_CHAR_NAME

IntlChar::EXTENDED_CHAR_NAME

IntlChar::CHAR_NAME_ALIAS

IntlChar::CHAR_NAME_CHOICE_COUNT

Example of usage:

<?php
var_dump(IntlChar::charName("."));
var_dump(IntlChar::charName(".", IntlChar::UNICODE_CHAR_NAME));
var_dump(IntlChar::charName("\u{2603}"));
var_dump(IntlChar::charName("\u{0000}"));
?>

The above will output:

string(9) "FULL STOP"
string(9) "FULL STOP"
string(7) "SNOWMAN"
string(0) ""

IntlChar::charType:

Get the general category value for a code point

public static int IntlChar::charType ( mixed $codepoint )

return values can be one of the following constants:

IntlChar::CHAR_CATEGORY_UNASSIGNED

IntlChar::CHAR_CATEGORY_GENERAL_OTHER_TYPES

IntlChar::CHAR_CATEGORY_UPPERCASE_LETTER

IntlChar::CHAR_CATEGORY_LOWERCASE_LETTER

IntlChar::CHAR_CATEGORY_TITLECASE_LETTER

IntlChar::CHAR_CATEGORY_MODIFIED_LETTER

IntlChar::CHAR_CATEGORY_OTHER_LETTER

IntlChar::CHAR_CATEGORY_NON_SPACING_MARK

IntlChar::CHAR_CATEGORY_ENCLOSING_MARK

IntlChar::CHAR_CATEGORY_COMBINING_SPACING_MARK

IntlChar::CHAR_CATEGORY_DECIMAL_DIGIT_NUMBER

IntlChar::CHAR_CATEGORY_LETTER_NUMBER

IntlChar::CHAR_CATEGORY_OTHER_NUMBER

IntlChar::CHAR_CATEGORY_SPACE_SEPARATOR

IntlChar::CHAR_CATEGORY_LINE_SEPARATOR

IntlChar::CHAR_CATEGORY_PARAGRAPH_SEPARATOR

IntlChar::CHAR_CATEGORY_CONTROL_CHAR

IntlChar::CHAR_CATEGORY_FORMAT_CHAR

IntlChar::CHAR_CATEGORY_PRIVATE_USE_CHAR

IntlChar::CHAR_CATEGORY_SURROGATE

IntlChar::CHAR_CATEGORY_DASH_PUNCTUATION

IntlChar::CHAR_CATEGORY_START_PUNCTUATION

IntlChar::CHAR_CATEGORY_END_PUNCTUATION

IntlChar::CHAR_CATEGORY_CONNECTOR_PUNCTUATION

IntlChar::CHAR_CATEGORY_OTHER_PUNCTUATION

IntlChar::CHAR_CATEGORY_MATH_SYMBOL

IntlChar::CHAR_CATEGORY_CURRENCY_SYMBOL

IntlChar::CHAR_CATEGORY_MODIFIED_SYMBOL

IntlChar::CHAR_CATEGORY_OTHER_SYMBOL

IntlChar::CHAR_CATEGORY_INITIAL_PUNCTUATION

IntlChar::CHAR_CATEGORY_FINAL_PUNCTUATION

IntlChar::CHAR_CATEGORY_CHAR_CATEGORY_COUNT

Example of usage:

<?php
var_dump(IntlChar::charType("A") === IntlChar::CHAR_CATEGORY_UPPERCASE_LETTER);
var_dump(IntlChar::charType(".") === IntlChar::CHAR_CATEGORY_OTHER_PUNCTUATION);
var_dump(IntlChar::charType("\t") === IntlChar::CHAR_CATEGORY_CONTROL_CHAR);
var_dump(IntlChar::charType("\u{2603}") === IntlChar::CHAR_CATEGORY_OTHER_SYMBOL);
?>

The above outputs:

4x bool(true)

IntlChar::chr:

Return Unicode character by code point value

public static string IntlChar::chr ( mixed $codepoint )

This function compliments IntlChar::ord()

Example of usage:

<?php
$values = ["A", 63, 123, 9731];
foreach ($values as $value) {
	var_dump(IntlChar::chr($value));
}
?>

Outputs:

string(1) "A"
string(1) "A"
string(1) "{"
string(3) "<snowman>"

IntlChar::digit:

Get the decimal digit value of a code point for a given radix

public static int IntlChar::digit ( string $codepoint [, int $radix = 10 ] )

Returns the decimal digit value of the code point in the specified radix

If the radix is not in the range 2<=radix<=36 or if the value of codepoint is not a valid digit
in the specified radix, FALSE is returned. A character is a valid digit if at least one 
of the following is true:

The character has a decimal digit value. Such chars have the general category "Nd" (decimal digit numbers)
and a Numeric_Type of Decimal. In this case, the value is the character's digit value.

The character is one of the uppercase Latin letters 'A' through 'Z'. In this case, the value is c-'A'+10.

The character is one of the lowercase Latin letters 'a' through 'z'. In this case, the value is ch-'a'+10.

Latin letters from both the ASCII range (0061..007A, 0041..005A) as well as from the Fullwidth ASCII range
(FF41..FF5A, FF21..FF3A) are recognized.

Radix para defaults to 10.

Example of usage:

<?php
var_dump(IntlChar::digit("0"));
var_dump(IntlChar::digit("3"));
var_dump(IntlChar::digit("A"));
var_dump(IntlChar::digit("A", 16));
?>

The above outputs:

int(0)
int(3)
bool (false)
int(10)

IntlChar::enumCharNames:

Enumerates all assigned Unicode chars within a range

public static void IntlChar::enumCharNames ( mixed $start, mixed $limit, callable $callback [, int $nameChoice = IntlChar::UNICODE_CHAR_NAME ] )

ENumerate all assigned Unicode chars between the start and limit code points (start inclusive, limit exclusive) and call a function
for each, passing the code point value and the character name.

For Unicode 1.0 names, only those are enumerated that differ from the modern names.

Params:

start: The first code point in the enumeration range

limit: One more than the last code point in the enumeration range (the first one after the range)

callback: The function that is to be called for each character name. The following three arguments will
be passed into it:

integer $codepoint : The numeric code point value

integer $nameChoice : The same value as the nameChoice param below

string $name : the name of the char

nameChoice:

Selector for which kind of names to enumerate. Can be any of these constants:

IntlChar::UNICODE_CHAR_NAME //Default

IntlChar::UNICODE_10_CHAR_NAME

IntlChar::EXTENDED_CHAR_NAME

IntlChar::CHAR_NAME_ALIAS

IntlChar::CHAR_NAME_CHOICE_COUNT

Example of usage:

Enumerate over a sample range of code points:

<?php
IntlChar::enumCharNames(0x2600, 0x2610, function($codepoint, $nameChoice, $name) {
	printf("U+%04x %s\n", $codepoint, $name);
});
?>

The above will output a range of U+2600 to u+260f icon names.

IntlChar::enumCharTypes:

Enumerates all code points with their Unicode general categories

public static void IntlChar::enumCharTypes ( callable $callback )

Enumerates efficiently all code points with their Unicode general categories. This is useful for
building data structures, for enumerating all assign code points, etc.

For each contiguous range of code points with a given general category ("character type"), the callback
function is called.

Adjacent ranges have different types. The Unicode Standard guarantees that the numeric value of the type
is 0..31.

Param: callback:

The function that is to be called fore ach contigious range of code points with the same general category.
The following three arguments will be passed into it:

integer $start - The starting code point of the range

integer $end - The ending code point of the range

integer $name - The category type (one of the IntlChar::CHAR_CATEGORY_* constants)

Example of usage:

<?php
IntlChar::enumCharTypes(function($start, $end, $type) {
	printf("U+%04x through U+%04x are in category %d\n", $start, $end, $type);
});
?>

The above will output associated Unicode chars related to categories.

IntlChar::foldCase:

Perform case folding on a code point

public static mixed IntlChar::foldCase ( mixed $codepoint [, int $options = IntlChar::FOLD_CASE_DEFAULT ] )

The given char is mapped to its case folding equivalent; if the character has no case folding equivalent,
the character itself is returned.

Params:

codepoint: The integer code point value (e.g 0x2603 for U+2603 SNOWMAN), or the character encoded as UTF-8 string
(e.g "\u{2603}")

Options: Either IntlChar::FOLD_CASE_DEFAULT (default) or IntlChar::FOLD_CASE_EXCLUDE_SPECIAL_I

IntlChar::forDigit:

Get character representation for a given digit and radix

public static int IntlChar::forDigit ( int $digits [, int $radix = 10 ] )

Determines the character representation for a specific digit in the specified radix.

If the value of radix is not a valid radix, or the value of digit is not a valid digit in the specified radix, the null
char (U+0000) is returned.

The radix argument is valid if it is greater than or equal to 2 and less than or equal to 36. The digit argument
is valid if 0 <= digit < radix.

If the digit less than 10, then '0' + digit is returned. OTherwise, the value 'a' + digit - 10 is returned.

Example of usage:

<?php
var_dump(IntlChar::forDigit(0));
var_dump(IntlChar::forDigit(3));
var_dump(IntlChar::forDigit(3, 10));
var_dump(IntlChar::forDigit(10));
var_dump(IntlChar::forDigit(10, 16));
?>

The above will output:

int (48)
int (51)
int (51)
int (0)
int (97)

IntlChar::getBidiPairedBracket:

Get the paired bracket character for a code point

public static mixed IntlChar::getBidiPairedBracket ( mixed $codepoint )

Maps the specified character to its paired bracket character

For Bidi_Paired_Bracket_Type != None, this is the same as IntlChar::charMirror(). Otherwise,
codepoint itself is returned.

Example of usage:

<?php
var_dump(IntlChar::getBidiPairedBracket(91));
var_dump(IntlChar::getBidiPairedBracket('['));
?>

The above outputs:

int (93)
string(1) "]"

IntlChar::getBlockCode:

Get the Unicode allocation block containing a code point

public static int IntlChar::getBlockCode( mixed $codepoint )

Returns the unicode allocation block that contains the character

Example of usage:

<?php
var_dump(IntlChar::getBlockCode("A") === IntlChar::BLOCK_CODE_BASIC_LATIN);
var_dump(IntlChar::getBlockCode("<bla symbol>") === IntlChar::BLOCK_CODE_GREEK);
var_dump(IntlChar::getBlockCode("\u{2603}") === IntlChar::BLOCK_CODE_MISCELLANEOUS_SYMBOLS);
?>

The above outputs:

bool (true)x3

IntlChar::getCombiningClass:

Get the combining class of a code point

public static int IntlChar::getCombiningClass ( mixed $codepoint )

Returns the combining class of the code point

Example of usage:

<?php
var_dump(IntlChar::getCombiningClass("A"));
var_dump(IntlChar::getCombiningClass("\u{0334}"));
var_dump(IntlChar::getCombiningClass("\u{0358}"));
?>

The above outputs:

int (0)
int (1)
int (232)

IntlChar::getFC_NFKC_Closure:

Get the FC_NFKC_Closure property for a code point.

public static string IntlChar::getFC_NFKC_Closure ( mixed $codepoint )

Example of usage:

<?php
var_dump(IntlChar::getFC_NFKC_Closure("\u{2121}"));
var_dump(IntlChar::getFC_NFKC_Closure("\u{1D2D}"));
?>

Outputs akin to:

string (3) "tel"

IntlChar::getIntPropertyMaxValue:

Get the max value for an enumerated/integer/binary Unicode property.

public static int IntlChar::getIntPropertyMaxValue ( int $property )

Example of usage:

<?php
var_dump(IntlChar::getIntPropertyMaxValue(IntlChar::PROPERTY_BIDI_CLASS));
var_dump(IntlChar::getIntPropertyMaxValue(IntlChar::PROPERTY_SCRIPT));
var_dump(IntlChar::getIntPropertyMaxValue(IntlChar::PROPERTY_IDEOGRAPHIC));
var_dump(IntlChar::getIntPropertyMaxValue(999999999999999)); //madeu p value
?>

Outputs:

int (22)
int (166)
int (1)
int (-1)

IntlChar::getIntPropertyMinValue:

Get the min value for a Unicode property

public static int IntlChar::getIntPropertyMinValue ( int $property )

Example of usage:

<?php
var_dump(IntlChar::getIntPropertyMinValue(IntlChar::PROPERTY_BIDI_CLASS));
var_dump(IntlChar::getIntPropertyMinValue(IntlChar::PROPERTY_SCRIPT));
var_dump(IntlChar::getIntPropertyMinValue(IntlChar::PROPERTY_IDEOGRAPHIC));
var_dump(IntlChar::getIntPropertyMinValue(999999999999)); //made up
?>

Outputs:

int(0) x 4

IntlChar::getIntPropertyValue:

Get the value for a Unicode property for a code point

public static int IntlChar::getIntPropertyValue ( mixed $codepoint, int $property )

Gets the property value for an enumerated or integer Unicode prop for a code point.
Also returns binary and mask property values.

Params:

codepoint: The integer codepoint value (e.g 0x2603 for U+2603 SNOWMAN), or the character as a UTF-8 string
(e.g "\u{2603}")

property: The Unicode property to lookup (see the IntlChar::PROPERTY_* constnats)

Returns 0 or 1 (false/true) for binary Unicode properties

Returns a bit-mask for mask properties

Returns 0 if property is out of bounds or if the UNicode version does not have data for
the prop at all, or not for this code point.

Example of usage:

<?php
var_dump(IntlChar::getIntPropertyValue("A", IntlChar::PROPERTY_ALPHABETIC) === 1);
var_dump(IntlChar::getIntPropertyValue("[", IntlChar::PROPRETY_BIDI_MIRRORED) === 1);
var_dump(IntlChar::getIntPropertyValue("Φ", IntlChar::PROPERTY_BLOCK) === IntlChar::BLOCK_CODE_GREEK);
?>

outputs:

bool (true)x3

IntlChar::getNumericValue:

Get the numeric value for a Unicode code point

public static float IntlChar::getNumericValue ( mixed $codepoint )

Gets the numeric value for a Unicode point as defined in the Unicode 
Character DB.

For characters without any numeric values in the Unicode Character database, thsi function will 
return IntlChar::NO_NUMERIC_VALUE

Returns IntlChar::NO_NUMERIC_VALUE (< 7.0.6), or -123456789

Examples of usage:

<?php
var_dump(IntlChar::getNumericValue("4"));
var_dump(IntlChar::getNumericValue("x"));
var_dump(IntlChar::getNumericValue("\u{216C}"));
?>

The above outputs:

float (4)
float (-123456789)
float (50)

IntlChar::getPropertyEnum:

Get the property constant value for a given property name

public static int IntlChar::getPropertyEnum ( string $alias )

Returns the property constant value for a given property name, as specified in the Unicode
database file PropertyAliases.txt. Short, long, and any other variants are recognized.

In addition, this function maps the synthetic names "gcm" / "General_Category_Mask" to
the property IntlChar::PROPERTY_GENERAL_CATEGORY_MASK. These names are not in PropertyAliases.txt

This function compliments the IntlChar::getPropertyName()

Example of usage:

<?php
var_dump(IntlChar::getPropertyEnum('Bidi_Class') === IntlChar::PROPERTY_BIDI_CLASS);
var_dump(IntlChar::getPropertyEnum('script') === IntlChar::PROPERTY_SCRIPT);
var_dump(IntlChar::getPropertyEnum('IDEOGRAPHIC') === IntlChar::PROPERTY_IDEOGRAPHIC);
var_dump(IntlChar::getPropertyEnum('Some made-up string') === IntlChar::PROPERTY_INVALID_CODE);
?>

The above outputs:

bool (true) x 4

IntlChar::getPropertyName:

Get the Unicode name for a property

public static string IntlChar::getPropertyName ( int $property [, int $nameChoice = IntlChar::LONG_PROPERTY_NAME ] )

Returns the UNicode name for a given prop, as given in the Unicode db file PropertyAlises.txt

In addition, this function maps the property IntlChar::PROPERTY_GENERAL_CATEGORY_MASK to the synthetic
names "gcm" / "General_Category_Mask". These names are not in PropertyAliases.txt

This function compliments the IntlChar::getPropertyEnum()

Params:

property: The Unicode property to lookup (see the IntlChar::PROPERTY_* constants)

IntlChar::PROPERTY_INVALID_CODE should not be used. Also, if property is out of range, 
FALSE is returned.

nameChoice:

Selector for which name to get. If out of range, FALSE is returned.

All properties have a long name. Most have a short name, but some do not. Unicode allows
for additional names, if present these will be returned by adding 1,2, etc. to IntlChar::LONG_PROPERTY_NAME.

Example of usage:

<?php
var_dump(IntlChar::getPropertyName(IntlChar::PROPERTY_BIDI_CLASS));
var_dump(IntlChar::getPropertyName(IntlChar::PROPERTY_BIDI_CLASS, IntlChar::SHORT_PROPERTY_NAME));
var_dump(IntlChar::getPropertyName(IntlChar::PROPERTY_BIDI_CLASS, IntlChar::LONG_PROPERTY_NAME));
var_dump(IntlChar::getPropertyName(IntlChar::PROPERTY_BIDI_CLASS, IntlChar::LONG_PROPERTY_NAME +1));
?>

The above outputs:

string(10) "Bidi_Class"
string(2) "bc"
string(10) "Bidi_Class"
bool(false)

IntlChar::getPropertyValueEnum:

Get the property value for a given value name

public static int IntlChar::getPropertyValueEnum ( int $property , string $name )

Returns the property value integer for a given value name, as specified in the UNicode DB file PropertyValueAliases.txt.
Short, long and any other variants are recognized.

Note:

Some of the names in PropertyValueAliases.txt will only be recognized with IntlChar::PROPERTY_GENERAL_CATEGORY_MASK,
not IntlChar::PROPERTY_GENERAL_CATEGORY. These include:

"C" / "Other"

"L" / "Letter"

"LC" / "Cased_Letter"

"M" / "Mark"

"N" / "Number"

"P" / "Punctuation"

"S" / "Symbol"

"Z" / "Separator"

Some examples of usage:

<?php
var_dump(IntlChar::getPropertyValueEnum(IntlChar::PROPERTY_BLOCK, 'greek') === IntlChar::BLOCK_CODE_GREEK);
var_dump(IntlChar::getPropertyValueEnum(IntlChar::PROPERTY_BIDI_CLASS, 'RIGHT_TO_LEFT') === IntlChar::CHAR_DIRECTION_RIGHT_TO_LEFT);
var_dump(IntlChar::getPropertyValueEnum(IntlChar::PROPERTY_BIDI_CLASS, 'some made-up string') === IntlChar::PROPERTY_INVALID_CODE);
var_dump(IntlChar::getPropertyValueEnum(123456789, 'RIGHT_TO_LEFT') === IntlChar::PROPERTY_INVALID_CODE);
?>

The above outputs:

bool (true)

IntlChar::getPropertyValueName:

Get the unicode name for a property value

public static string IntlChar::getPropertyValueName ( int $property , int $value [, int $nameChoice = IntlChar::LONG_PROPERTY_NAME ] )

Returns the unicode name fora given prop value, as given in the Unicode DB file PropertyValueAliases.txt

note:

Some of the names in PropertyValueAliases.txt can only be retrieved using IntlChar::PROPERTY_GENERAL_CATEGORY_MASK, not
IntlChar::PROPERTY_GENERAL_CATEGORY. These include:

"C" / "Other"

"L" / "Letter"

"LC" / "Cased_Letter"

"M" / "Mark"

"N" / "Number"

"P" / "Punctuation"

"S" / "Symbol"

"Z" / "Separator"

Params:

property: The UniCode prop to lookup (see the INtlChar::PROPERTY_* constants)

If out of range, or this method does not work with the given value, FALSE is returned.

value:

Selector for a value for the given property. If out of range, FALSE is returned.

In general, valid values range from 0 up to some maximum. There are a couple of exceptions:

IntlChar::PROPERTY_BLOCK values begin at the non-zero value IntlChar::BLOCK_CODE_BASIC_LATIN

IntlChar::PROPERTY_CANONICAL_COMBINING_CLASS values are not contiguous and range from 0..240

nameChoice:

Selector for which name to get. If out of range, FALSE is returned.

All values have a long name. Mosth ave a hsort name, but some do not. Unicode allows for additional names,
if present these will be returned by adding 1,2, etc. to IntlChar::LONG_PROPERTY_NAME.

Return values:

Returns the name, or FALSE, if either the property or the nameChoice is out of range.

If a given nameChoice returns false, then all larger values of nameChoice will return FALSE,
with one exception: if FALSE is returned for IntlChar::SHORT_PROPERTY_NAME, then IntlChar::LONG_PROPERTY_NAME and higher,
may still return a non-FALSE value.

Example of usage:

<?php
var_dump(IntlChar::getPropertyValueName(IntlChar::PROPERTY_BLOCK, IntlChar::BLOCK_CODE_GREEK));
var_dump(IntlChar::getPropertyValueName(IntlChar::PROPERTY_BLOCK, IntlChar::BLOCK_CODE_GREEK, IntlChar::SHORT_PROPERTY_NAME));

var_dump(IntlChar::getPropertyValueName(IntlChar::PROPERTY_BLOCK, IntlChar::BLOCK_CODE_GREEK, IntlChar::LONG_PROPERTY_NAME));
var_dump(IntlChar::getPropertyValueName(IntlChar::PROPERTY_BLOCK, IntlChar::BLOCK_CODE_GREEK, IntlChar::LONG_PROPERTY_NAME + 1));
?>

The above outputs:

string(16) "Greek_And_Coptic"
string(5) "Greek"
string(16) "Greek_And_Coptic"
bool (false)

IntlChar::getUnicodeVersion:

Get the Unicode Version

public static array IntlChar::getUnicodeVersion()

The version array is filled in with the version information for the Unicode standard used by ICU.
For example, Unicode version 3.1.1 is represented as an array with teh values [3,1,1,0]

Example of usage:

<?php
var_dump(IntlChar::getUnicodeVersion());
?>

This will output:

array(4) {
	[0]=>
	int(7)
	[1]=>
	int(0)
	[2]=>
	int(0)
	[3]=>
	int(0)
}

IntlChar::hasBinaryProperty:

Check a binary Unicode property for a code point

public static bool IntlChar::hasBinaryProperty ( mixed $codepoint , int $property )

Checks a binary Unicode property for a code point

Unicode, especially in v3.2, defines many more properties than the original set in UnicodeData.txt

The properties APIs are intended to reflect Unicode properties as defined in the Unicode Character
Database (UCD) and Unicode Technical Reports (UTR). For details about the properties, see http://www.unicode.org/ucd/

For names of Unicode properties see the UCD file PropertyAliases.txt

Params:

codepoint: The integer codepoint value (e.g. 0x2603 for U+2603 SNOWMAN), or the character encoded as a UTF-8 string
(e.g "\u{2603}")

property: The Unicode property to lookup (see the IntlChar::PROPERTY_* constants)

Example of usage:

<?php
var_dump(IntlChar::hasBinaryProperty("A", IntlChar::PROPERTY_ALPHABETIC));
var_dump(IntlChar::hasBinaryProperty("A", IntlChar::PROPERTY_CASE_SENSITIVE));
var_dump(IntlChar::hasBinaryProperty("A", IntlChar::PROPERTY_BIDI_MIRRORED));

var_dump(IntlChar::hasBinaryProperty("[", IntlChar::PROPERTY_ALPHABETIC));
var_dump(IntlChar::hasBinaryProperty("[", IntlChar::PROPERTY_CASE_SENSITIVE));
var_dump(IntlChar::hasBinaryProperty("[", IntlChar::PROPERTY_BIDI_MIRRORED));
?>

Outputs:

bool(true)
bool(true)
bool(false)
bool(false)
bool(false)
bool(true)

IntlChar::isalnum:

Check if code point is an alphanumeric character

public static bool IntlChar::isalnum ( mixed $codepoint )

Determines whether the specified code point is an alphanumeric character (letter or digit). TRUE if characters
with general categories "L" (letters) and "Nd" (decimal digit numbers)

Param: 

codepoint: The integer codepoint value (e.g 0x2603 for U+2603 SNOWMAN), or the character encoded as a UTF-8 string
(e.g "\u{2603}")

Example of usage:

<?php
var_dump(IntlChar::isalnum("A"));
var_dump(IntlChar::isalnum("1"));
var_dump(IntlChar::isalnum("\u{2603}"));
?>

Outputs:

bool (true)
bool (true)
bool (false)

IntlChar::isalpha:

Check if code point is a letter character

public static bool IntlChar::isalpha ( mixed $codepoint )

Determines whether the specified code point is a letter character. True for general
categories "L" (letters).

Example of usage:

<?php
var_dump(IntlChar::isalpha("A"));
var_dump(IntlChar::isalpha("1"));
var_dump(IntlChar::isalpha("\u{2603}"));
?>

Outputs:

bool(true)
bool(false)
bool(false)

IntlChar::isbase:

Check if code point is a base character

public static bool IntlChar::isbase ( mixed $codepoint )

Determines whether the specified code point is a base character. True for general 
categories "L" (letters), "N" (numbers), "Mc" (spacing combination marks), and 
"Me" (enclosing marks)

Note: This is different from the Unicode definition in chap 3.5 conforming to clause D13,
which defines base characters to be all characters (not Cn) that do not graphically combine
with preceeding characters (M) and that are neither control (Cc) or format (Cf) characters.

Example of usage:

<?php
var_dump(IntlChar::isbase("A"));
var_dump(IntlChar::isbase("1"));
var_dump(IntlChar::isbase("\u{2603}"));
?>

Outputs:

bool(true)
bool(true)
bool(false)

IntlChar::isblank:

Check if code point is a "blank" or "horizontal space" character

public static bool IntlChar::isblank ( mixed $codepoint )

Determines whether the specified code point is a "blank" or "horizontal space", a character
visibily separates words on a line.

The following are equivalent definitions:

TRUE for Unicode White_Space characters except for "vertical space controls" where "vertical space controls"
are the following chars: 

U+000A (LF) U+000B (VT) U+000C (FF)  U+000D (CR)  U+0085 (NEL) U+2028 (LS) U+2029 (PS)

True for U+0009 (TAB) and characters with general category "Zs" (space separators) except
Zero Width Space (ZWSP, U+200B).

Example of usage:

<?php
var_dump(IntlChar::isblank("A"));
var_dump(IntlChar::isblank(" "));
var_dump(IntlChar::isblank("\t"));
?>

The above outputs:

bool(false)
bool(true)
bool(true)

IntlChar:iscntrl:

Check if code point is a control character

public static bool IntlChar::iscntrl ( mixed $codepoint )

Determines whether the specified code point is a control character

A control character is one of the following:

ISO 8-bit control character (U+0000..U+001f and U+007f..U+009f)

IntlChar::CHAR_CATEGORY_CONTROL_CHAR (Cc)

IntlChar::CHAR_CATEGORY_FORMAT_CHAR (Cf)

IntlChar::CHAR_CATEGORY_LINE_SEPARATOR (Zl)

IntlChar::CHAR_CATEGORY_PARAGRAPH_SEPARATOR (Zp)

Examples of usage:

<?php
var_dump(IntlChar::iscntrl("A"));
var_dump(IntlChar::iscntrl(" "));
var_dump(IntlChar::iscntrl("\n"));
var_dump(IntlChar::iscntrl("\u{200e}"));
?>

The above will output:

bool (false)
bool (false)
bool (true)
bool (true)

IntlChar::isdefined:

Check whether the code point is defined

public static bool IntlChar::isdefined ( mixed $codepoint )

Determines whether the specified code point is "defined", which usually means that
it is assigned a character

TRUE for general categories other than "Cn" (other, not assigned)

Note: Note that non-character code points (e.g, U+FDD0 are not "defined" (they are Cn), but surrogate code points are "defined" (Cs).)

An example of usage:

<?php
var_dump(IntlChar::isdefined("A"));
var_dump(IntlChar::isdefined(" "));
var_dump(IntlChar::isdefined("\u{FDD0}"));
?>

Examples of output:

bool (true)
bool (true)
bool (false)

IntlChar::isdigit:

Check if code point is a digit char

public static bool IntlChar::isdigit ( mixed $codepoint )

Determins whether the specified code point is a digit character.

TRUE for characters with general category "Nd" (decimal digit number). beginning with Unicode 4, this is the same
as testing for the Numeric_Type of Decimal.

Example of usage:

<?php
var_dump(IntlChar::isdigit("A"));
var_dump(IntlChar::isdigit("1"));
var_dump(IntlChar::isdigit("\t"));
?>

Outputs:

bool (false)
bool (true)
bool (false)

IntlChar::isgraph:

Check if code point is a graphic character

public static bool IntlChar::isgraph ( mixed $codepoint )

Determines whether the specified code point is a "graphic" character
(printable, excluding spaces).

TRUE for all characters except those with general categories "Cc" (control codes), "Cf" (format controls),
"Cs" (surrogates), "Cn" (unassigned), and "Z" (separators)

Example of usage:

<?php
var_dump(IntlChar::isgraph("A"));
var_dump(IntlChar::isgraph("1"));
var_dump(IntlChar::isgraph("\u{2603}"));
var_dump(IntlChar::isgraph("\n"));
?>

The output will be:

bool (true)
bool (true)
bool (true)
bool (false)

IntlChar::isIDIgnorable:

Check if code point is an ignorable character

public static bool IntlChar::isIDIgnorable ( mixed $codepoint )

Determines if the specified character should be regarded as an ignorable
character in an identifier.

TRUE for characters with general category "Cf" (format controls) as well as non-whitespace
ISO controls (U+0000..U+0008, U+000E..U+001B, U+007F..U+009F)

Note: note that Unicode just recommends to ignore Cf (format controls)

Example of usage:

<?php
var_dump(IntlChar::isIDIgnorable("A"));
var_dump(IntlChar::isIDIgnorable(" "));
var_dump(IntlChar::isIDIgnorable("\u{007F}"));
?>

This will output:

bool (false)
bool (false)
bool (true)

IntlChar::isIDPart:

Check if code point is permissible in an identifier

public static bool IntlChar::isIDPart ( mixed $codepoint )

Determines if the specified character is permissible in an identifier.

TRUE for characters with general categories "L" (letters), "Nl" (letter numbers), "Nd" (decimal digits),
"Mc" and "Mn" (combining marks), "Pc" (connecting punctuation) and u_isIDIgnorable(c).

Note: This is almost the same as Unicode's ID_Continue (IntlChar::PROPERTY_ID_CONTINUE) except that 
Unicode recommends to ignore Cf which is less than IntlChar::isIDIgnorable()

Example of usage:

<?php
var_dump(IntlChar::isIDPart("A"));
var_dump(IntlChar::isIDPart("$"));
var_dump(IntlChar::isIDPart("\n"));
var_dump(IntlChar::isIDPart("\u{2603}"));
?>

The above will output:

bool(true)
bool(false)
bool(false)
bool(false)

IntlChar::isIDStart:

Check if code point is permissible as the first character in an identifier

public static bool IntlChar::isIDStart ( mixed $codepoint )

Determines if the specified character is permissible as teh first character in an
identifier according to Unicode (The Unicode Standard, Version 3.0, chapter 5.16 identifiers)

TRUE for characters with general categories "L"(letters) and "Nl" (letter numbers)

Example of usage:

<?php
var_dump(IntlChar::isIDStart("A"));
var_dump(IntlChar::isIDStart("$"));
var_dump(IntlChar::isIDStart("\n"));
var_dump(IntlChar::isIDStart("\u{2603}"));
?>

The above outputs:

bool (true)
bool (false)
bool (false)
bool (false)

IntlChar::isISOControl:

Check if code point is an ISO control code

public static bool IntlChar::isISOControl ( mixed $codepoint )

Determines whether the specified code point is an ISO control code.

TRUE for U+0000..U+001f and U+007f..U+009f (general category "Cc").

Example of usage:

<?php
var_dump(IntlChar::isISOControl(" "));
var_dump(IntlChar::isISOControl("\n"));
var_dump(IntlChar::isISOControl("\u{200e}"));
?>

The above will output:

bool(false)
bool(true)
bool(false)

IntlChar::isJavaIDPart:

Check if code point is permissible in a Java Identifier

public static bool IntlChar::isJavaIDPart ( mixed $codepoint )

Determines if the specified character is permissible in a Java identifier.

In addition to IntlChar::isIDPart(), TRUE for characters with general category 
"Sc" (currency symbols).

Example of usage:

<?php
var_dump(IntlChar::isJavaIDPart("A"));
var_dump(IntlChar::isJavaIDPart("$"));
var_dump(IntlChar::iSJavaIDPart("\n"));
var_dump(IntlChar::isJavaIDPart("\u{2603}"));
?>

Outputs:

bool (true)
bool (true)
bool (false)
bool (false)

IntlChar::isJavaIDStart:

Check if code point is permissible as the first character in a Java Identifier

public static bool IntlChar::isJavaIDStart ( mixed $codepoint )

Determines if the specified character is permissible as the start of a Java identifier

In addition to IntlChar::isIDStart(), TRUE for characters with general categories of 
"Sc" (currency symbols) and "Pc" (connecting punctuation)

Example of usage:

<?php
var_dump(IntlChar::isJavaIDStart("A"));
var_dump(IntlChar::isJavaIDStart("$"));
var_dump(IntlChar::isJavaIDStart("\n"));
var_dump(IntlChar::isJavaIDStart("\u{2603}"));
?>

The above outputs:

bool (true)
bool (true)
bool (false)
bool (false)

IntlChar::isJavaSpaceChar:

Check if code point is a space character according to Java

public static bool IntlChar::isJavaSpaceChar ( mixed $codepoint )

Determine if the specified code point is a space char according to java

TRUe for chars with general categories "Z" (separators), which does not include control
codes (e.g, TAB or Line Feed)

Example of usage:

<?php
var_dump(IntlChar::isJavaSpaceChar("A"));
var_dump(IntlChar::isJavaSpaceChar(" "));
var_dump(IntlChar::isJavaSpaceChar("\n"));
var_dump(IntlChar::isJavaSpaceChar("\t"));
var_dump(IntlChar::isJavaSpaceChar("\u{00A0}"));
?>

The above will output:

bool (false)
bool (true)
bool (false)
bool (false)
bool (true)

IntlChar::islower:

Check if code point is a lowercase letter

public static bool IntlChar::islower ( mixed $codepoint )

Determins whether the specified code point has the general category "Ll" (lowercase letter)

Note: This misses the characters that are also lowercase but have a different general category value.
In order to include those, use IntlChar::isULowercase().

Example of usage:

<?php
var_dump(IntlChar::islower("A"));
var_dump(IntlChar::islower("a"));
var_dump(IntlChar::islower("<greek o>"));
var_dump(IntlChar::islower("<some other shit>"));
var_dump(IntlChar::islower("1"));
?>

The above will output:

bool (false)
bool (true)
bool (false)
bool (true)
bool (false)

IntlChar::isMirrored:

Check if code point has the Bidi_Mirrored property

public static bool IntlChar::isMirrored ( mixed $codepoint )

Determines whether the code point has teh Bidi_Mirrored property

This property is set for characters that are commonly used in Right-To-Left contexts 
and need to be displayed with a "mirrored" glyph.

Example of usage:

<?php
var_dump(IntlChar::isMirrored("A"));
var_dump(IntlChar::isMirrored("<"));
var_dump(IntlChar::isMirrored("("));
?>

Outputs:

bool (false)
bool (true)
bool (true)

IntlChar::isprint:

Check if code print is a printable character

public static bool IntlChar::isprint ( mixed $codepoint )

Determins whether the specified code point is a printable character

TRUE for general categories other than "C" (controls)

Example of usage:

<?php
var_dump(IntlChar::isprint("A"));
var_dump(IntlChar::isprint(" "));
var_dump(IntlChar::isprint("\n"));
var_dump(IntlChar::isprint("\u{200e}"));
?>

The above will output:

bool (true)
bool (true)
bool (false)
bool (false)

IntlChar::ispunct:

Check if code point is punctuation character

public static bool IntlChar::ispunct ( mixed $codepoint )

Determins whether the specified code point is a punctuatioin character

TRUE for chars with general categories "P" (punctuation)

Example of usage:

<?php
var_dump(IntlChar::ispunct("."));
var_dump(IntlChar::ispunct(","));
var_dump(IntlChar::ispunct("\n"));
var_dump(IntlChar::ispunct("$"));
?>

The above outputs:

bool (true)
bool (true)
bool (false)
bool (false)

IntlChar::isspace:

Check if code point is a space character

public static bool IntlChar::isspace ( mixed $codepoint )

Determines if the specified character is a space character or not

Example of usage:

<?php
var_dump(IntlChar::isspace("A"));
var_dump(IntlChar::isspace(" "));
var_dump(IntlChar::isspace("\n"));
var_dump(IntlChar::isspace("\t"));
var_dump(IntlChar::isspace("\u{00A0}"));
?>

Outputs:

bool (false)
bool (true)
bool (true)
bool (true)
bool (true)

IntlChar::istitle:

Check if code points is a title case letter

public static bool IntlChar::istitle ( mixed $codepoint )

Determins whether the specified code point is a titlecase letter

TRUE for general category "Lt" (titlecase letter)

Example of usage:

<?php
var_dump(IntlChar::istitle("A"));
var_dump(IntlChar::istitle("a"));
var_dump(IntlChar::istitle("Φ"));
var_dump(IntlChar::istitle("φ"));
var_dump(IntlChar::istitle("1"));
?>

The above will output:

bool (false)
bool (true)
bool (false)
bool (true)
bool (false)

IntlChar::isUAlphabetic:

Check if code point has the Alphabetic Unicode property

public static bool IntlChar::isUAlphabetic ( mixed $codepoint )

This is the same as IntlChar::hasBinaryProperty($codepoint, IntlChar::PROPERTY_ALPHABETIC)

Example of usage:

<?php
var_dump(IntlChar::isUAlphabetic("A"));
var_dump(IntlChar::isUAlphabetic("1"));
var_dump(IntlChar::isUAlphabetic("\u{2603}"));
?>

Will output:

bool (true)
bool (false)
bool (false)

IntlChar::isULowercase:

Check if code point has the Lowercase Unicode property

public static bool IntlChar::isULowercase ( mixed $codepoint )

Check if a code point has the Lowercase Unicode Property

This is the same as IntlChar::hasBinaryProperty($codepoint, IntlChar::PROPERTY_LOWERCASE)

This is different than IntlChar::islower() and will return True for more characters

Example of usage:

<?php
var_dump(IntlChar::isULowercase("A"));
var_dump(IntlChar::isULowercase("a"));
var_dump(IntlChar::isULowercase("Φ"));
var_dump(IntlChar::isULowercase("φ"));
var_dump(IntlChar::isULowercase("1"));
?>

The above outputs:

bool (false)
bool (true)
bool (false)
bool (true)
bool (false)

IntlChar::isupper:

Check if code point has the general category "Lu" (uppercase letter)

public static bool IntlChar::isupper ( mixed $codepoint )

Determines whether the specified code point has the general category "Lu" (uppercase letter)

Note: This misses some characters that are also uppercase but have a different general category value.
In order to include those, use IntlChar::isUUppercase()

Example of usage:

<?php
var_dump(IntlChar::isupper("A"));
var_dump(IntlChar::isupper("a"));
var_dump(IntlChar::isupper("Φ"));
var_dump(IntlChar::isupper("φ"));
var_dump(IntlChar::isupper("1"));
?>

The above outputs:

bool(true)
bool(false)
bool(true)
bool(false)
bool(false)

IntlChar::isUUppercase:

Check if code point has the Uppercase Unicode property

public static bool IntlChar::isUUppercase ( mixed $codepoint )

Check if a code point has the Uppercase Unicode property

This is the same as IntlChar::hasBinaryProperty($codepoint, intlChar::PROPERTY_UPPERCASE)

This is different than IntlChar::isupper() and will return TRUE for more characters.

Example of usage:

<?php
var_dump(IntlChar::isUUppercase("A"));
var_dump(IntlChar::isUUppercase("a"));
var_dump(IntlChar::isUUppercase("<bla>"));
var_dump(IntlChar::isUUppercase("<bla2>"));
var_dump(IntlChar::isUUppercase("1"));
?>

This will output:

bool(true)
bool(false)
bool(true)
bool(false)
bool(false)

IntlChar::isUWhiteSpace:

Check if code point has the White_Space Unicode property

public static bool IntlChar::isUWhiteSpace ( mixed $codepoint )

Check if a code point has the White_Space Unicode property

This is the same as IntlChar::hasBinaryProperty($codepoint, IntlChar::PROPERTY_WHITE_SPACE)

Note: THis is different from both IntlChar::isspace() and IntlChar::isWhitespace()

Example of usage:

<?php
var_dump(IntlChar::isUWhiteSpace("A"));
var_dump(IntlChar::isUWhiteSpace(" "));
var_dump(IntlChar::isUWhiteSpace("\n"));
var_dump(IntlChar::isUWhiteSpace("\t"));
var_dump(IntlChar::isUWhiteSpace("\u{00A0}"));
?>

This outputs:

bool (false)
bool (true)
bool (true)
bool (true)
bool (true)

IntlChar::isWhitespace:

Check if code point is a whitespace character according to ICU

public static bool IntlChar::isWhitespace ( mixed $codepoint )

Determines if the specified code point is a whitespace character
according to ICU.

A character is considered to be a ICU whitespace character if and only if
it satisfies one of the following criteria:

It is a Unicode Separator character (categories "Z" = "Zs" or "Zl" or "Zp"), but is not also a non-breaking space
(U+00A0 NBSP or U+2007 Figure Space or U+202F Narrow NBSP)

It is U+0009 HORIZONTAL TABULATION

It is U+000A LINE FEED

It is U+000B VERTICAL TABULATION

It is U+000C FORM FEED

It is U+000D CARRIAGE RETURN

It is U+001C FILE SEPARATOR

It is U+001D GROUP SEPARATOR

It is U+001E RECORD SEPARATOR

It is U+001F UNIT SEPARATOR

Example of usage:

<?php
var_dump(IntlChar::iswhitespace("A"));
var_dump(IntlChar::iswhitespace(" "));
var_dump(IntlChar::iswhitespace("\n"));
var_dump(IntlChar::iswhitespace("\t"));
var_dump(IntlChar::iswhitespace("\u{00A0}"));
?>

The above outputs:

bool (false)
bool (true)
bool (true)
bool (true)
bool (false)

IntlChar::isxdigit:

Check if code point is a hexadecimal digit

public static bool IntlChar::isxdigit ( mixed $codepoint )

TRUE for characters with general category "Nd" (decimal digit numbers) as well
as Latin letters a-f and A-F in both ASCII and Fullwidth ASCII.

(That is, for letters with code points 0041..046, 0061..0066, FF21..FF26,, FF41..FF46)

This is equivalent to IntlChar::digit($codepoint, 16) >= 0

In order to narrow the definition of hexadecimal digits to only ASCII chars to use:

<?php
$isASCIIHexadecimal = IntlChar::ord($codepoint) <= 0x7F && IntlChar::isxdigit($codepoint);
?>

Example of usage:

<?php
var_dump(IntlChar::isxdigit("A"));
var_dump(IntlChar::isxdigit("1"));
var_dump(IntlChar::isxdigit("\u{2603}"));
?>

Outputs:

bool (true)
bool (true)
bool (false)

IntlChar::ord:

Return Unicode Point value of character

public static int IntlChar::ord ( mixed $character )

This function compliments IntlChar::chr()

Example of usage:

<?php
var_dump(IntlChar::ord("A"));
var_dump(IntlChar::ord(" "));
var_dump(IntlChar::ord("\u{2603}"));
?>

The output is:

int (65)
int (32)
int (9731)

IntlChar::tolower:

Make Unicode character lowercase

public static mixed IntlChar::tolower ( mixed $codepoint )

The given char is mapped to its lowercase equivalent. If the character has no lowercase equivalent, the original
character itself is returned.

If the char is not a UTF-8 string, it will be returned as a int

Example of usage:

<?php
var_dump(IntlChar::tolower("A"));
var_dump(IntlChar::tolower("a"));
var_dump(IntlChar::tolower("Φ"));
var_dump(IntlChar::tolower("φ"));
var_dump(IntlChar::tolower("1"));
var_dump(IntlChar::tolower(ord("A")));
var_dump(IntlChar::tolower(ord("a")));
?>

Outputs:

string(1) "a"
string(1) "a"
string(2) "φ"
string(2) "φ"
string(1) "1"
int(97)
int(97)

IntlChar::totitle:

Make Unicode character titlecase

public static mixed IntlChar::totitle ( mixed $codepoint )

The given char is mapped to its titlecase equivalent. If the character has no titlecase equivalent,
the original character itself is returned.

Same example of usage as above, just different output of ints in case of non-UTF 8 string parsed.


IntlChar::toupper:

Make unicode character uppercase

public static mixed IntlChar::toupper ( mixed $codepoint )

The given character is mapped to its uppercase equivalent. If the character has no uppercase equivalent,
the character itself is returned.

Example of usage:

<?php
var_dump(IntlChar::toupper("A"));
var_dump(IntlChar::toupper("a"));
etc.
?>

Output is as expected, as before, int in case of ord parsing. (non UTF-8 string format)

The above methods belong to IntlChar. The following belong to IntlException:

This class is used for generating exceptions when errors occur inside intl functions, Such exceptions
are only generated when intl.use_exceptions is enabled.

Since the class extends the Exception class, we can look to that class for its related methods.

Exception::__construct:

public Exception::__construct ([ string $message = "" [, int $code = 0 [, Throwable $previous = NULL ]]] )

When chaining hierachies of nested exceptions (akin to expected exceptions), you can pass "lower level"
unresolved exceptions to the higher levels for handling. This is as per known already.

Exception::getMessage:

Gets the Exception message

final public string Exception::getMessage()

Example of usage:

<?php
try {
	throw new Exception("Some error message!");
} catch(Exception $e) {
	echo $e->getMessage();
}
?>

The above outputs:

Some error message!

Exception::getPrevious:

Returns previous Exception

final public Throwable Exception::getPrevious()

Example of usage:

<?php
class MyCustomException extends Exception {}

function doStuff(){
	try{
		throw new InvalidArgumentException("You are doing it wrong!", 112);
	} catch (Exception $e) {
		throw new MyCustomException("Something happened", 911, $e);
	}
}

try {
	doStuff();
} cathc (Exception $e) {
	do {
		printf("%s:%d %s (%d) [%s]\n", $e->getFile(), $e->getLine(), $e->getMessage(), $e->getCode(), get_class($e));
	} while ($e = $e->getPrevious());
}
?>

Will output:

/home/bjori/ex.php:8 Somethinmg happened (911) [MyCustomException]
/home/bjori/ex.php:6 You are doing it wrong! (112) [InvalidArgumentException]

Exception::getCode:

Gets the exception

final public mixed Exception::getCode()

Example of usage:

<?php
try {
	throw new Exception("Some error message", 30);
} catch(Exception $e) {
	echo "The exception code is: " . $e->getCode();
}
?>

When raising an error with no explicit error code, later retrieving it, results in 0.

Exception::getFile:

Gets the file in which the exception was created

final public string Exception::getFile()

Example of usage:

<?php
try {
	throw new Exception;
} catch(Exception $e) {
	echo $e->getFile();
}
?>

The above outputs:

/home/bjori/tmp/ex.php

Exception::getLine:

Gets the line in which the exception was created

final public int Exception::getLine()

Example of usage:

<?php
try {
	throw new Exception("Some error message");
} catch(Exception $e) {
	echo "The exception was created on line: " . $e->getLine();
}
?>

TRhe above outputs:

The exception was created on line: 3

A potentional bug is that the line return is in which the Exception was created, not the line it was thrown from.

Exception::getTrace:

Gets the stack trace

final public array Exception::getTrace()

Example of usage:

<?php
function test() {
	throw new Exception;
}

try {
	test();
} catch(Exception $e) {
	var_dump($e->getTrace());
}
?>

The above will output something akin to:

array(1) {
	[0]=>
	array(4) {
		["file"]=>
		string(22) "/home/bjori/tmp/ex.php"
		["line"]=>
		int(7)
		["function"]=>
		string(4) "test"
		["args"]=>
		array(0) {
		}
	}
}

Notes about this:

The class throwing the error is included in the array

The trace does not include the file / line at which the exception is thrown; that entry is only
recored in the top-level getFile/Line methods.

Elements are returned in 'closest-first' order, e.g. if you have a script x which calls function
y which calls function z that throws an exception, then the first trace element will be 'Y'
and the second will be 'X'.

Exception::getTraceAsString:

Gets the stack trace as a string

final public string Exception::getTraceAsString()

Example of usage:

<?php
function test() {
	throw new Exception;
}

try {
	test();
} catch(Exception $e) {
	echo $e->getTraceAsString();
}
?>

The above outputs:

#0 /home/bjori/tmp/ex.php(7): test()
#1 {main}

If we wish to have the thing as one whole line, keeping in mind that it uses \n for new line instead of PHP_EOL:

<?php
$separator = ', ';
$one_line = str_replace("\n", $separator, $e->getTraceAsString());
?>

There is a number of things that is issued with this. Does not support chained exceptions, 
does not allocate to which line causes error instead of where exception was thrown, etc.

To resolve this, we can use a java stack exception throwing method instead, as follows:

<?php
/**
* jTraceEx() - provide a Java style exception trace
* @param $exception
* @param $seen - array passed to recursive calls to accumulate trace lines already seen 
* 				 leave as NULL when calling this function
* @return array of strings, one entry per trace line
*/
function jTraceEx($e, $seen=null) {
	$starter = $seen ? 'Cause by: ' : '';
	$result = array();
	if (!$seen) $seen = array();

	$trace = $e->getTrace();
	$prev = $e->getPrevious();
	$result[] = sprintf('%s%s: %s', $starter, get_class($e), $e->getMessage());

	$file = $e->getFile();
	$line = $e->getLine();
	while (true) {
		$current = "$file:$line";
		if (is_array($seen) && in_array($current, $seen)) {
			$result[] = sprintf(' ... %d more', count($trace)+1);
			break;
		}
		$result[] = sprintf(' at %s%s%s(%s%s%s)',
									count($trace) && array_key_exists('class', $trace[0]) ?  str_replace('\\', '.',
$trace[0]['class']) : '',
									count($trace) && array_key_exists('class', $trace[0]) && 
array_key_exists('function', $trace[0]) ? '.' : '',
									count($trace) && array_key_exists('function', $trace[0]) ? str_replace('\\', '.',
$trace[0]['function']) : '(main)',
									$line === null ? $file : basename($file),
									$line === null ? '' : ':',
									$line === null ? '' : $line);
		if (is_array($seen))
			$seen[] = "$file:$line";
		if (!count($trace))
			break;
		$file = array_key_exists('file', $trace[0]) ? $trace[0]['file'] : 'Unknown Source';
		$line = array_key_exists('file', $trace[0]) && array_key_exists('line', $trace[0]) && $trace[0]['line'] ?
$trace[0]['line'] : null;
		array_shift($trace);
	}
	$result = join("\n", $result);
	if ($prev)
		$result .= "\n" . jTraceEx($prev, $seen);

	return $result;
}
?>

And then, example of usage:

<?php
class A {
	public function exc() {
		throw new \Exception('Thrown from class A'); //<-- line 46
	}
}

class B {
	public function exc() {
		try {
			$a = new A;
			$a->exc(); //<-- line 61
		}
		catch(\Exception $e1) {
			throw new \Exception('Thrown from class B', 0, $e1); //<-- line 64
		}
	}
}
class C {
	public function doexc() {
		$this->exc(); //<-- line 70
	}
	public function exc() {
		try {
			$b = new B;
			$b->exc(); //<-- line 75
		}
		catch(\Exception $e1) {
			throw new \Exception('Thrown from class C', 0, $e1); // <-- line 78
		}
	}
}

function fail2(){
	$c = new c;
	$c->doexc(); //line <-- 85
}

function fail1(){
	fail2(); //line <-- 89
}

try{
	fail1(); //<-- 93
}
catch(\Exception $e) {
	echo jTraceEx($e);
}
?>

Exception::__toString:

String representation of the exception

public string Exception::__toString()

Example of usage:

<?php
try {
	throw new Exception("Some error message");
} catch(Exception $e) {
	echo $e;
}
?>

The above will output similar to:

exception 'Exception' with message 'Some error message' in /home/bjori/tmp/ex.php:3
Stack trace:
#0  {main}

Exception::__clone:

Clone the exception

final private void Exception::__clone()

Tries to clone the Exception, which results in a fatal error

The above methods belonged to the Exception class. The following belong to IntlIterator:

IntlIterator class:

This class represents iterator objects through the intl extension whenever the iterator
cannot be identified with any other object provided by the extension. The distinct
iterator object used intenrally by the foreach construct can only be obtained (in the
relevant part here) from objects, so objects of this class serve the purpose of providing
the hook through which this internal object can be obtained.

As a convenience, this class also implements the Iterator interface, allowing the collection
of values to be navigated using the methods defined in that interface. Both these methods and
the internal iterator objects provided to foreach are backed by the same state (e.g the position
of the iterator and its current value).

Subclasses may provide richer functionality.

The methods are as follows:

IntlIterator::current:

public ReturnType IntlIterator::current()

Gets the current element

IntlIterator::key:

Get the current key

public ReturnType IntlIterator::key()

IntlIterator::next:

Move forward to the next element

public ReturnType IntlIterator::next()

IntlIterator::rewind:

Rewind the iterator to the first element

public ReturnType IntlIterator::rewind()

IntlIterator::valid:

Check if current pos is valid

public ReturnType IntlIterator::valid()

The above belonged to IntlIterator, the following belong to intl Functions:

intl_error_name:

Get symbolic name for a given error code

string intl_error_name ( int $error_code )

Example of usage:

<?php
$coll = collator_create( 'en_RU' );
$err_code = collator_get_error_code( $coll );

printf( "Symbolic name for %d is %s\n.", $err_code, intl_error_name( $err_code ) );
?>

The above outputs:

Symbolic name for -128 is U_USING_FALLBACK_WARNING.

intl_get_error_code:

Get the last error code

int intl_get_error_code()

Useful to handle errors occurred in static methods where there's no object to get
error code from.

Example of usage:

<?php
$coll = collator_create( '<bad_param>' );
if( !$coll ) {
	handle_error( intl_get_error_code() );
}
?>

intl_get_error_message:

Get the description of the last error

string intl_get_error_message()

Get error message for last internalization function called

example of usage:

<?php
if( Collator::getAvailableLocales() === false ) {
	show_error( intl_get_error_message() );
}
?>

intl_is_failure:

Check whether the given error code indicates failure

bool intl_is_failure ( int $error_code )

Example of usage:

<?php
function check( $err_code )
{
	var_export( intl_is_failure( $err_code ) );
	echo "\n";
}

check( U_ZERO_ERROR );
check( U_USING_FALLBACK_WARNING );
check( U_ILLEGAL_ARGUMENT_ERROR );
?>

The above outputs:

false
false
true

The above methods belonged to the general intl package. The following methods, belongs to the Multibyte String:

The Runtime Configuration of this class, can allow for different varaibles to be set as per
defaulting to which language etc.

What follows, are some coverage of the methods, the default settings and how to change the ini:

mbstring.language: Defaults to "neutral", changable under PHP_INI_ALL

mbstring.detect_order: Defaults to NULL, changable under PHP_INI_ALL

mbstring.substitute_character: Defaults to NULL, changable under PHP_INI_ALL

mbstring.encoding_translation: Defaults to 0

mbstring.strict_detection: Defaults to 0 

A short epxlonation of each of the directives are as follows:

mbstring.language: The default national language setting (NLS) used in mbstring. Note that this option
automagically defines mbstring.internal_encoding and mbstring.internal_encoding should be placed after
mbstring.language in php.ini

mbstring.encoding_translation: Enables the transparent character encoding filter for incoming HTTP queries,
which performs detection and conversions of the input encoding to the internal character encoding.

mbstring.detect_order: Defines default character code detection order, see also mb_detect_order()

mbstring.substitute_character: Defines character to subsitute for invalid character encoding

mbstring.strict_detection: Enables the strict encoding detection

According to HTML 4.01 spec, Web browsers are allowed to encode a form being submitted with a 
character encoding different from the one used for the page. See mb_http_input() to detect
character encoding used by browsers.

Although popular browsers are capable of giving a reasonably accurate guess to the character encoding 
of a given HTML document, it would be better to set the charset param in the Content-Type HTTP header
to the appropiate value by header() or default_charset ini setting.

Some examples of setting php.ini settings:

#1

; Set default language
mbstring.language = Neutral; Set default language to Neutral (UTF-8) (default)
mbstring.language = English; Set default language to english
mbstring.language = Japanese; Set default language to Japanese

;; Set default internal encoding
;; Note: Make sure to use character encoding works with PHP
mbstring.internal_encoding = UTF-8; Set internal encoding to UTF-8

;; HTTP input encoding translation is enabled.
mbstring.encoding_translation = On

;; Set default HTTP input character encoding
;; Note: Script cannot change http_input setting.
mbstring.http_input 	= pass 		; No conversion.
mbstring.http_input 	= auto 		; Set HTTP input to auto
							; "auto" is expanded according to mbstring.language
mbstring.http_input 	= SJIS 		; Set HTTP input to SJIS
mbstring.http_input 	= UTF-8,SJIS,EUC-JP ; Specify order

;; Set default HTTP output character encoding
mbstring.http_output 	= pass 		; No conversion
mbstring.http_output 	= UTF-8 	; Set HTTP output encoding to UTF-8

;; Set default character encoding detection order
mbstring.detect_order 	= auto 		; Set detect order to auto
mbstring.detect_order 	= ASCII,JIS,UTF-8,SJIS,EUC-JP ; Specify order

;; Set default substitute character
mbstring.substitute_character = 12307 	; Specify Unicode value
mbstring.substitute_character = none 	; Do not print character
mbstring.substitute_character = long 	; Long Example: U+3000,JIS+7E7E

#2

;; Disable Output Buffering
output_buffering 	= Off

;; Set HTTP header charset
default_charset 	= EUC-JP

;; Set default language to Japanese
mbstring.language = Japanese

;; HTTP input encoding translation is enabled.
mbstring.encoding_translation = On

;; Set HTTP input encoding conversion to auto
mbstring.http_input = auto

;; Convert HTTP output to EUC-JP
mbstring.http_output = EUC-JP

;; Set internal encoding to EUC-jp
mbstring.http_output = EUC-JP

;; Do not print invalid characters
mbstring.substitute_character = none

#3, php.ini settings for SJIS users

;; Enable Output Buffering
output_buffering 		= On

;; Set mb_output_handler to enable output conversion
output_handler 			= mb_output_handler

;; Set HTTP header charset
default_charset 		= Shift_JIS

;; Set default language to Japanese
mbstring.language = Japanese

;; Set http input encoding conversion to auto
mbstring.http_input = auto

;; Convert to SJIS
mbstring.http_output = SJIS

;; Set internal encoding to EUC-JP
mbstring.internal_encoding = EUC-JP

;; Do not print invalid characters
mbstring.substitute_character = none

What follows, is a summary of supported encodings:

Name in the IANA character set registry 	Underlying char set 		Desc 											Notes

ISO-10646-UCS-4 							ISO 10646 					The Universal Character Set with 31- 			If this name is used in the encoding conversion
																		bit code space, standardized as UCS-4 			facility, the converter attempts to identify
																		by ISO/IEC 10646. It is kept synched 			by the preceding BOM (byte order mark) in which
																		with the latest version of the  				endian the subsequent bytes are represented.
																		Unicode code map.

ISO-10646-UCS-4 							UCS-4 						Above 											In contrast to UCS-4, strings are always assumed
																														to be in big endian form

ISO-10646-UCS-4 							UCS-4 						Above 											As above, but little endian form

ISO-10646-UCS-2 							UCS-2 						The Universal Character Set with 16-bit 		If this name is used in the endcoding conversion
																		code space, standardized as UCS-2 by ISO/IEC 	facility, the converter attempts to identify the
																		10646. It is kept synched with the latest 		preceding BOM (byte order mark) in which endian
																		version of the unicode code map. 				the subsequent bytes are represented.

ISO-10646-UCS-2 							UCS-2 						Above 											Big form

ISO-10646-UCS-2 							UCS-2 						above 											Little form

UTF-32 										Unicode 					Unicode Transformation Format of 32-bit 		Checks BOM in which the endian bytes are represented in.
																		unit width, whose encoding space refers
																		to the Unicode's codeset standard.
																		This encoding scheme was not identical
																		to UCS-4 because the code space of Unicode
																		were limited to a 21-bit value.

UTF-32BE 									Unicode 					Above 											Big form

UTF-32LE 									Unicode 					Above 											Little Form

UTF-16 										Unicode 					Unicode Transformation Format of 16-bit 		Checks BOM in which the endian bytes are represented in
																		unit width. It's worth a note that UTF-16
																		is no longer the same specification as UCS-2
																		because the surrogate mechanism has been
																		introduced since Unicode 2.0 and UTF-16
																		now refers to a 21-bit code space.

UTF-16BE 									Unicode 					Above 											Big form

UTF-16LE 									Unicode 					Above 											Little Form

UTF-8 										Unicode / UCS 				Unicode Transformation Format of 8-bit unit
																		width.

UTF-7 										Unicode 					A mail-safe transformation format of Unicode,
																		specified in RFC2152.

(none) 										Unicode 					A variant of UTF-7 which is specialized
																		for use in the IMAP protocol.

US-ASCII (preferred MIME name) / iso-ir-6 / ASCII / ISO 646 			American Standard Code for Information Interchange
ANSI_X3.4-1986 / ISO_646.irv:1991 / ASCII / 							is a commonly-used 7-bit encoding. Also standardized
ISO646-US / us / IBM367 / CP367 / csASCII 								as an international standard, ISO 646.

EUC-JP (preferred MIME name) / 				Compound of US-ASCII / JIS  As you see the name is dervied from an abbreviation 			The character set reffered to by
Extended_UNIX_Code_Packed_Format_for_Japanese / X0201:1997 (hankaku kana part) of Extended UNIX Code Packed Format for Japanese, 		EUC-JP is different to IBM932 /
csEUCPkdFmtJapanese 						/ JIS X0208:1990 / JIS X0212:1990 this encoding is mostly used on UNIX or alike platforms. 	CP932, which are used by OS/2
																		The original encoding scheme, Extended UNIX Code, is designed   and Microsoft Windows.
																		on the basis of ISO 2022. 										For information interchange
																																		with those platforms, use EUCJP-
																																		WIN instead.

Shift_JIS (preferred MIME name) / MS_Kanji  Compound of JIS X0201:1997/ Shift_JIS was developed in early 80's, at the time personal 	For the CP932 codemap, use SJIS-WIN
/ csShift_JIS 								JIS X0208:1997 				Japanese word processors were brought into the market, in order instead.
 																		to maintain compabilities with the legacy encoding scheme
 																		JIS X 0201:1976. According to the IANA defintion the 
 																		codeset to IBM932 / CP932. However, the names "SJIS" /
 																		"Shift_JIS" are often wrongly used to refer to these
 																		codesets.

(none) 										Compound of JIS X0201:1997/ While this "encoding" uses the same encoding scheme as 
											JIS X0208:1997 / IBM extensions EUC-JP, the underlying character set is different.
											/ NEC extensions 			That is, some code points map to different characters
 																		than EUC-JP.

Windows-31J / csWindows31J 					Compound of JIS X0201:1997/ While this "encoding" uses the same encoding scheme as
											JIS X0208:1997/ IBM extensions Shift_JIS, the underlying character set is different.
											/ NEC extensions 			That means some code points map to different characters than
 																		Shift_JIS.

ISO-2022-JP (preferred MIME name) /  		US-ASCII / JIS X0201:1976 / RFC1648
csISO2022JP 								JIS X0208:1978 / 
											JIS X0208:1983

JIS

ISO-8859-1

ISO-8859-2

ISO-8859-3

ISO-8859-4

ISO-8859-5

ISO-8859-6

ISO-8859-7

ISO-8859-8

ISO-8859-9

ISO-8859-10

ISO-8859-13

ISO-8859-14

ISO-8859-15

ISO-8559-16

byte2be

byte2le

byte4le

BASE64

HTML-ENTITIES

7bit

8bit

EUC-CN

CP936

HZ

EUC-TW

CP950

BIG-5

EUC-KR

UHC (CP949)

ISO-2022-KR

Windows-1251 (CP1251)

Windows-1252 (CP1252)

CP866 (IBM866)

KOI8-R

KOI8-U

Basics of Japanese multi-byte encodings:

Japanese Characters can only be represented by multibyte encodings, and multiple encoding standards are used 
depending on platform and text purpose. To make matters worse, these encoding standards differ slightly from one another.

In order to create a web app which would be usable in a Japanese environment, a dev has to keep in mind to esnure that
the proper char encoding are used.

Storage for a character can be up to six bytes

Most Japanese multibyte characters appear twice as wide as single-byte characters. These characters are called
"zen-kaku" in Japanese, which means "full width". Other, narrower, characters are called "han-kaku", which means
"half width".

The graphical properties of the characters, however, depends upon the type faces used to display them.

Some character encodings use shift(escape) sequences defined in ISO-2022 to switch the code map of the specific
code area (00h to 7fh).

ISO-2022-JP should be used in SMTP/NNTP, and headers and entities should be reencoded as per RFC requirements.
Although those are not requisites, it's still a good idea because several popular user agents cannot recognize
any other encoding methods.

Web pages created for mobile phone services such as i-mode or EZweb are supposed to use Shift_JIS.

As of PHP 5.4, the pictogram chars used for mobile phone services such as i-mode or EZweb are supported.

HTTP Input and Output:

HTTP input/output character encoding conversion may convert binary data also. Users are supposed to control
character encoding conversion if binary data is used for HTTP input/output.

Note: if enctype for HTML form is set to multipart/form-data and mbstring.encoding_translation is set to On
in php.ini the POST'ed variables and the names of uploaded files will be converted to the internal character
encoding as well. However, the conversion is not applied to the query keys.

HTTP Input:

These is no way to control HTTP input character conversion from a PHP script. To disable HTTP input character
conversion, it has to be done in php.ini

Example #1 Disable HTTP input conversion in php.ini

;; Disable HTTP Input conversion
mbstring.http_input = pass
;; Disable HTTP Input conversion
mbstring.encoding_translation = Off

When using PHP as an Apache module, it is possible to override those settings in each VH directive
in httpd.conf or per directory with .htaccess. Refer to the Configuration section and Apache Manual
for details.

HTTP output:

There are several ways to enable output character encoding conversion. One is using php.ini, another is
using ob_start() with mb_output_handler() as the ob_start callback function.

Example #2, php.ini setting example:

;; Enable output character encoding conversion for all PHP pages

;; Enable Output Buffering
output_buffering 	= On

;; Set mb_output_handler to enable output conversion
output_handler 		= mb_output_handler

Example 3, script example:

<?php

//Enable output character encoding conversion only for this page

// set HTTP output char encoding to SJIS
mb_http_output('SJIS');

//Start buffering and specify "mb_output_handler" as
// callback function
ob_start('mb_output_handler');

?>

Supported Character Encodings:

Currently the following character encodings are supported by the mbstring module. Any of those Character encodings
can be specified in the encoding parameter of mbstring functions.

The following character encodings are supported in this PHP extension:

UCS-4*
UCS-4BE
UCS-4LE*
UCS-2

UCS-2BE
UCS-2LE
UTF-32*
UTF-32BE*
UTF-32LE*
UTF-16*
UTF-16BE*
UTF-16LE*
UTF-7
UTF7-IMAP

UTF-8*
ASCII*
EUC-JP*
SJIS*
eucJP-win*
SJIS-win*

ISO-2022-JP
ISO-2022-JP-MS
CP932
CP51932

SJIS-mac** (alias: MacJapanese)
SJIS-Mobile#DOCOMO** (alias: SJIS-DOCOMO)
SJIS-Mobile#KDDI** (alias: SJIS-KDDI)
SJIS-Mobile#SOFTBANK** (alias: SJIS-SOFTBANK)

UTF-8-Mobile#DOCOMO** (alias UTF-8 DOCOMO)
UTF-8-Mobile#KDDI-A**
UTF-8-Mobile#KDDI-B** (alias: UTF-8-KDDI)
UTF-8-Mobile#SOFTBANK** (alias: UTF-8-SOFTBANK)

ISO-2022-JP-MOBILE#KDDI** (alias: ISO-2022-JP-KDDI)
JIS
JIS-ms
CP50220

CP50220raw
CP50221
CP50222

ISO-8859-1*
ISO-8859-2*
ISO-8859-3*
ISO-8859-4*
ISO-8859-5*
ISO-8859-6*
ISO-8859-7*
ISO-8859-8*
ISO-8859-9*
ISO-8859-10*

ISO-8859-13*
ISO-8859-14*
ISO-8859-15*
ISO-8859-16*

byte2be
byte2le
byte4be
byte4le

BASE64
HTML-ENTITIES
7bit
8bit
EUC-CN*
CP936

GB18030**
HZ
EUC-TW*
CP950
BIG-5*
EUC-KR*
UHC (CP949)

ISO-2022-KR
Windows-1251 (CP1251)
Windows-1252 (CP1252)
CP866 (IBM866)

KOI8-R*
KOI8-U*
ArmSCII-8(ArmSCII8)

*denotes encoding usable also in regex

** denotes encodings available since php 5.4

Any php.ini entry which accepts an encoding name can also use the values "auto" and "pass".
mbstring functions which accept an encoding. name can also be use the value "auto"

If "pass" is set, no character encoding conversion is performed

if "auto" is set, it is expanded to the list of encodings defined per the NLS. For instance,
if the NLS is set to Japanese, the value is assumed to be "ASCII,IIS,UTF-8,EUC-JP,SIIS".

CP850 (DOS-Latin-1) is also supported.

use mb_list_encodings() to check if an encoding is supported by mbstring before using its functions
for it.

PHP Character Encoding Requirements:

Encodings of the following types are safely used with PHP.

A singlebyte encoding, which has ASCII-compatible (ISO646 compatible) mappings for the characters
in range of 00h to 7fh.

A multibyte encoding:

which has ASCII-compatible mappings for the characters in range of 00h to 7fh.

which don't use ISO2022 escape sequences.

which don't use a value from 00h to 7fh in any of the compounded bytes that represents
 a single character.

There are examples of character encodings that are unlikely to worth with PHP:

JIS, SJIS, ISO-2022-JP, BIG-5

Although PHP scripts written in any of those encodings might not work, especially in the
case where encoded strings appear as identifiers or literals in the script, you can almost
avoid using these encodings by setting up the mbstring's transparent encoding filter function
for incoming HTTP queries.

Note: It is highly discouraged to use SJIS, BIG5, CP936, CP949 and GB18030 for the internal
encoding unless you are familiar with the parser, the scanner and the character encoding.

Note: If you are connecting to a DB with PHP, it is recommended that you use the same character
encoding for both the DB and the internal encoding for ease of use and better performance.

If you are using PostgreSQL, the character encoding used in the database and the one used
in PHP may differ as it supports automatic character set conversion between the backend and
the frontend.

There is some more information about the chinese and japanese character encodings, albeit,
they are beyond the scope of this documentation.

We will instead, cover the methods, related to Multibyte String Functions:

mb_check_encoding:

Check if the string is valid for the specified encoding

bool mb_check_encoding ([ string $var = NULL [, string $encoding = mb_internal_encoding() ]] )

Checks if the specified byte stream is valid for the specified encoding. It is useful to prevent so-called
"Invalid Encoding Attack".

Overlong encodings, surrogates, any lone bytes above 0x80 and too short byte sequences are all considered
invalid. All valid code points in Unicode are considered valid when encoded with correct number of bytes
(including Astral planes, i.e four byte sequences below U+10FFFF).

mb_detect_encoding() provides similar results with the strict param enabled.

To check if something is UTF-8, we can check that easily:

<?php
function is_utf8($str) {
	return (bool) preg_match('//u', $str);
}

This function, however, does not check for bad byte sequeneces, only that the byte stream is valid.

if we want to verify a encoded string is valid (IE: does not contain any bad byte sequences), do the following:

<?php

/* check a strings encoded value */

function checkEncoding ( $string, $string_encoding )
{
	$fs = $string_encoding == 'UTF8' ? 'UTF-32' : $string_encoding;

	$ts = $string_encoding == 'UTF-32' ? 'UTF-8' : $string_encoding;

	return $string === mb-convert_encoding ( mb_convert_encoding ( $string, $fs, $ts ), $ts, $fs );
}

/* test 1 variables */

$string = "\x00\x81";

$encoding = "Shift_JIS";

/* test 1 mb_check_encoding (test for bad byte stream) */

if (true === mb_check_encoding ( $string, $encoding ) )
{
	echo 'valid (' . $encoding . ') encoding byte stream!<br />';
}
else 
{
	echo 'invalid (' . $encoding . ') encoded byte stream!<br />';
}

/* test 1 checkEncoding (test for bad byte sequence(s)) */

if ( true === checkEncoding ( $string, $encoding ) )
{
	echo 'valid (' . $encoding . ') encoded byte sequence!<br />';
}
else
{
	echo 'invalid(' . $encoding . ') encoded byte sequence!<br />';
}

/* test 2 */

/* test 2 variables */

$string = "\x00\xE3";

$encoding = "UTF-8";

/* test 2 mb_check_encoding (test for bad byte stream) */

if ( true === mb_check_encoding ( $string, $encoding ) )
{
	echo 'valid(' . $encoding . ') encoded byte stream!<br />';
}
else
{
	echo 'invalid (' . $encoding . ') encoded byte stream!<br />';
}

/* test 2 checkEncoding (test for bad byte sequence(s)) */

if ( true === checkEncoding ( $string, $encoding ) )
{
	echo 'valid (' . $encoding . ') encoded byte sequence!<br />';
}
else
{
	echo 'invalid (' . $encoding . ') encoded byte sequence!<br />';
}

?>

mb_convert_case:

Perform case folding on a string

string mb_convert_case ( string $str , int $mode [, string $encoding = mb_internal_encoding() ] )

Performs case folding on a string, converted in the way specified by mode

Params:

str: The string being converted

mode: The mode of the conversion. it can be one of MB_CASE_UPPER, MB_CASE_LOWER or MB_CASE_TITLE

encoding: The encoding param is the character encoding. If it is omitted, the itnernal character
encoding value will be used.

Unicode: By contrast to the standard case folding functions such as strtolower() and strtoupper(),
case folding is performed on the basis of the Unicode character properties. Thus the behaviour of this
function is not affected by locale settings and it can convert any characters that have 'alphabetic'
property, such as Ä.

Example of usage:

<?php
$str = "mary had a Little Lamb and she loved it so";
$str = mb_convert_case($str, MB_CASE_UPPER, "UTF-8");
echo $str; //Caps version
$str = mb_convert_case($str, MB_CASE_TITLE, "UTF-8");
echo $str; //Mary Had a Little Lamb And She Loved It So
?>

Does not change letters in quotation marks.

mb_convert_encoding:

Convert character encoding

string mb_convert_encoding ( string $str, string $to_encoding [, mixed $from_encoding = mb_inernal_encoding() ] )

Converts the char from encoding of string to to_encoding from optionally from_encoding.

Example of usage:

<?php
/* convert internal character encoding to SJIS */
$str = mb_convert_encoding($str, "SJIS");

//Convert EUC-JP to UTF-7
$str = mb_convert_encoding($str, "UTF-7", "EUC-JP");

//Auto detect encoding from JIS, eucjo-win, sjis-win, then convert str to UCS-2LE
$str = mb_convert_encoding($str, "UCS-2LE", "JIS, eucjp-win, sjis-win");

//"auto" is expanded to "ASCII,JIS,UTF-8,EUC-JP,SJIS"
$str = mb_convert_encoding($str, "EUC-JP", "auto");
?>

Also, en example of convertin CSV files with Windows-1250 to UTF-8:

function w1250_to_utf8($text) {
	$map = array(
		chr(0x8A) => chr(0xA9),
		chr(0x8C) => chr(0xA6),
		chr(0x8D) => chr(0xAB),
		etc.
	);
	return html_entity_decode(mb_convert_encoding(strtr($text, $map), 'UTF-8', 'ISO-8859-2'), ENT_QUOTES, 'UTF-8');
}

To discard unsupported chars, either change the config dir:

mbstring.substitute_character = "none" //in the php.ini

Or a runtime with:

<?php
ini_set('mbstring.substitute_character', "none");
?>

mb_convert_kana:

Convert "kana" one from another ("zen-kaku", "han-kaku" and more)

string mb_convert_kana ( string $str [, string $option = "KV" [, string $encoding = mb_internal_encoding() ]] )

Performs a 'han-kaku' - "zen-kaku" conversion for string str. This function is only useful for Japanese.

option:

The conversion option.

Specify one of the following options, or several:

r: Convert "zen-kaku" alphabets to "han-kaku"

R: Convert "han-kaku" alphabets to "zen-kaku"

n: Convert "zen-kaku" numbers to "han-kaku"

N: Convert "han-kaku" numbers to "zen-kaku"

a: Convert "zen-kaku" alphabets to "han-kaku"

A: Convert "Han-kaku" alphabets and numbers to "zen-kaku" (Characters include 
in "a", "A" options are U+0021 - U+007E excluding U+0022, U+0027, U+005C, U+007E)

s: Convert "zen-kaku" space to "han-kaku" (U+3000 -> U+0020)

S: convert "han-kaku" space to "zen-kaku" (U+0020 -> U+3000)

k : Convert "zen-kaku kata-kana" to "han-kaku kata-kana"

K: Convert "han-kaku kata-kana" to "zen-kaku kata-kana"

h : Convert "zen-kaku hira-gana" to "han-kaku kata-kana"

H : Convert "han-kaku kata-kana" to "zen-kaku hira-gana"

c : Convert "zen-kaku kata-kana" to "zen-kaku hira-gana"

C : Convert "zen-kaku hira-gana" to "zen-kaku kata-kana"

V : Collapse voiced sound notation and convert them into a character. Use with "K", "H"

Example of usage:

<?php
//Convert all "kana" to "zen-kaku" "kata-kana"
$str = mb_convert_kana($str, "KVC");

//Convert "han-kaku" "kata-kana" to "zen-kaku" "kata-kana"
// and "zen-kaku" alpha-numeric to "han-kaku"
$str = mb_convert_kana($str, "KVa");
?>

To make it work, you have to add two lines before the method call:

mb_language("Ja");
mb_internal_encoding("utf-8");

mb_convert_kana($_POST['something_value'], "rna");

mb_convert_variables:

Convert character code in variables

string mb_convert_variables ( string $to_encoding, mixed $from_encoding , mixed &$vars [, mixed &$... ] )

Converts character encoding of variables vars in encoding from_encoding to encoding to_encoding

mb_convert_variables() join strings in Array or Object to detect encoding, since encoding detection
tends to fail for short strings. Therefore, it is impossible to mix encoding in single array or object.

params:

to_encoding: The encoding that the string is being converted to

from_encoding: from_encoding is specified as an array or comma separated string, it tries to detect encoding
from from-coding. When from_encoding is omitted, detect_order is used.

vars: vars is the reference to the variable being converted. String, Array, and Object are accepted. 
mb_convert_variables() assumes all parameters have the same encoding.

...: additional vars

Example of usage:

<?php
//Convert variables $post1, $post2 to internal encoding
$interenc = mb_internal_encoding();
$inputenc = mb_convert_variables($interenc, "ASCII, UTF-8, SJIS-win", $post1, $post2);
?>

This method has a bug of corruption of data when it comes to calling on arrays.
When expected to get an array of results, instead, the data is corrupted due to an issue
in terms of the recursive search of layers and sifting through the data.

mb_decode_mimeheader:

Decode string in MIME header field

string mb_decode_mimeheader ( string $str )

Decodes encoded-word string str in MIME header.

This function ignores any encoded-word specified in a character set not supported by the mbstring extension
(e.g Arabic windows-1256). Such encoded-words pass straight through

RFC2047 does not specify the behaviour, but common agents such as Gmail, Windows Mail, etc. DO NOT ignore
such encoded words. They are decoded as if they were declared to be in the local character set.

mb_decode_numericentity:

Decode HTML numeric string reference to character

string mb_decode_numericentity ( string $str, array $convmap [, string $encoding = mb_internal_encoding() ] )

Convert numeric string reference of string str in a specified block to character.

params: 

convmap: An array that specifies the code area to convert

encoding: The encoding param is the character encoding. If it is omitted, the internal char encoding
value will be used.



Example of a convmap:

<?php
$convmap = array (
	int start_code1, int end_code1, int offset1, int mask1,
	int start_code2, int end_code2, int offset2, int mask2,
	.....
	int start_codeN, int end_codeN, int offsetN, int maskN );
//Specify Unicode value for start_codeN and end_codeN
// Add offsetN to value and take bit-wise 'AND' with maskN,
// then convert value to numeric string reference
?>

An example of using a convmap to escape a JS string:

<?php
function escape_javascript_string($str) {
	$map = [
			 1,1,1,1,1,1,1,1,1,1,
          1,1,1,1,1,1,1,1,1,1,
          1,1,1,1,1,1,1,1,1,1,
          1,1,1,1,1,1,1,1,1,1,
          1,1,1,1,1,1,1,1,0,0, // 49
          0,0,0,0,0,0,0,0,1,1,
          1,1,1,1,1,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,
          0,1,1,1,1,1,1,0,0,0, // 99
          0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,
          0,0,0,1,1,1,1,1,1,1,
          1,1,1,1,1,1,1,1,1,1,
          1,1,1,1,1,1,1,1,1,1, // 149
          1,1,1,1,1,1,1,1,1,1,
          1,1,1,1,1,1,1,1,1,1,
          1,1,1,1,1,1,1,1,1,1,
          1,1,1,1,1,1,1,1,1,1,
          1,1,1,1,1,1,1,1,1,1, // 199
          1,1,1,1,1,1,1,1,1,1,
          1,1,1,1,1,1,1,1,1,1,
          1,1,1,1,1,1,1,1,1,1,
          1,1,1,1,1,1,1,1,1,1,
          1,1,1,1,1,1,1,1,1,1, // 249
          1,1,1,1,1,1,1, // 255
          ]; //Not writing all of thoose 1's and 0's, lol
   	//Char encoding is UTF-8
   	$mblen = mb_strlen($str, 'UTF-8');
   	$utf32 = bin2hex(mb_convert_encoding($str, 'UTF-32', 'UTF-8'));

   	for($i=0, $encoded=''; $i < $mblen; $i++) {
   		$u = substr($utf32, $i*8, 8);
   		$v = base_convert($u, 16, 10);

   		if ($v < 256 && $map[$v]) {
   			$encoded .= '\\x'.substr($u, 6, 2);
   		} else if ($v == 2028) {
   			$encoded .= '\\u2028';
   		} else if ($v == 2029) {
   			$encoded .= '\\u2029';
   		} else {
   			$encoded .= mb_convert_encoding(hex2bin($u), 'UTF-8', 'UTF-32');
   		}
   	}
   	return $encoded;
}

//Test data
$convmap = [ 0x0, 0xffff, 0, 0xffff ];
$msg = '';
for ($i=0; $i < 1000; $i++) {
	// chr() cannot generate correct UTF 8 data larger value than 128, use mb_decode_numericentity().
	$msg .= mb_decode_numericentity('&#'.$i.';', $convmap, 'UTF-8');
}

// var_dump($msg);
var_dump(escape_javascript_string($msg));

Examples of two methods, which turns HTML entities into chars, and chars into HTML entities, alike:

//Convert HTML entities into chars
function my_numeric2character($t)
{
	$convmap = array(0x0, 0x2FFFF, 0, 0xFFFF);
	return mb_decode_numericentity($t, $convmap, 'UTF-8');
}

//Convert any char into html entities
function my_character2numeric($t)
{
	$convmap = array(0x0, 0x2FFFF, 0,, 0xFFFF);
	return mb_encode_numericentity($t, $convmap, 'UTF-8');
}

mb_detect_encoding:

Detect character encoding

string mb_detect_encoding ( string $str [, mixed $encoding_list = mb_detect_order() [, bool $strict = false ]] )

Detects character encoding in string str

Params:

str: The string being detected

encoding_list: Encoding_list is list of character encoding. Encoding order may be specified by array or comma separated 
list string.

If encoding_list is omitted, detect_order is used.

strict: strict specifies whether to use the strict encoding detection or not. Default is FALSE.

Example of usage:

<?php
//detect character encoding with current detect_order
echo mb_detect_encoding($str);

//auto is expanded according to mbstring.language
echo mb_detect_encoding($str, "auto");

//Specify encoding_list character encoding by comma separated list
echo mb_detect_encoding($str, "JIS, eucjp-win, sjis-win");

//Use array to specify encoding_list
$ary[] = "ASCII";
$ary[] = "JIS";
$ary[] = "EUC-JP";
echo mb_detect_encoding($str, $ary);
?>

If we use mb_detect_encoding to verify against valid UTF-8, use the strict mode:

<?php
	$str = '<some shit>';
	mb_detect_encoding($str, 'UTF-8'); // 'UTF-8'
	mb_detect_encoding($str, 'UTF-8', true); //false
?>

In case we need it, here is a function that checks for multibytes belonging to non-ascii sets
in the UTF-8 range, to which it stops when it finds one.

This is fast, dirty and allows us to change to utf-8 need that be:

<?php

function detectUTF8($string)
{
	return preg_match('%(?:
	[\xC2-\xDF][\x80-\xBF] 		#non-overlong 2-byte
	|\xE0[\xA0-\xBF][\x80-\xBF] 		# excluding overlongs
	|[\xE1-\xEC\xEE\xEF][\x80-\xBF]{2}  # straight 3-byte
	|\xED[\x80-\x9F][\x80-\xBF] 		# excluding surrogates
	|\xF0[\x90-\xBF][\x80-\xBF]{2}  	# planes 1-3
	|[\xF1-\xF3][\x80-\xBF]{3} 			# planes 4-15
	|\xF4[\x80-x8F][\x80-\xBF]{2} 		# plane 16
	)+%xs', $string);
}

?>

A simple way to detect UTF-8/16/32 of file by its BOM (not work with string or file without BOM)

<?php
//Unicode BOM is U+FEFF, but after encoded, it will look like this
define ('UTF32_BIG_ENDIAN_BOM', chr(0x00) . chr(0x00) . chr(0xFE) . chr(0xFF));
define ('UTF32_LITTLE_ENDIAN_BOM', chr(0xFF) . chr(0xFE) . chr(0x00) . chr(0x00));
define ('UTF16_BIG_ENDIAN_BOM', chr(0xFE) . chr(0xFF));
define ('UTF16_LITTLE_ENDIAN_BOM', chr(0xFF) . chr(0xFE));
define ('UTF8_BOM', chr(0xEF) . chr(0xBB) . chr(0xBF));

function detect_utf_encoding($filename) {
	
	$text = file_get_contents($filename);
	$first2 = substr($text, 0, 2);
	$first3 = substr($text, 0, 3);
	$first4 = substr($text, 0, 3);

	if ($first3 == UTF8_BOM) return 'UTF-8';
	elseif ($first4 == UTF32_BIG_ENDIAN_BOM) return 'UTF-32BE';
	elseif ($first4 == UTF32_LITTLE_ENDIAN_BOM) return 'UTF-32LE';
	elseif ($first2 == UTF16_BIG_ENDIAN_BOM) return 'UTF-16BE';
	elseif ($first2 == UTF16_LITTLE_ENDIAN_BOM) return 'UTF-16LE';
}
?>

If we need to distinguish between UTF-8 and ISO-8859-1, we can list the UTF-8 first, otherwise it will always return the ISO-8859-1:

<?php
mb_detect_encoding($string, 'UTF8, ISO-8859-1');
?>

And if the mb_detect_encoding function does not exist:

<?php
if ( !function_exists('mb_detect_encoding') ) {
	
	function mb_detect_encoding ($string, $enc=null, $ret=null) {

		static $enclist = array(
			'UTF-8', 'ASCII',
			'ISO-8859-1', 'ISO-8859-2', 'ISO-8859-3', 'ISO-8859-4', 'ISO-8859-5', 'ISO-8859-6', 'ISO-8859-7', 'ISO-8859-8',
			'ISO-8859-9', 'ISO-8859-10', 'ISO-8859-13', 'ISO-8859-14', 'ISO-8859-15', 'ISO-8859-16',
			'Windows-1251', 'Windows-1252', 'Windows-1254',
			);

		$result = false;

		foreach ($enclist as $item) {
			$sample = iconv($item, $item, $string);
			if (md5($sample) == md5($string)) {
				if ($ret === NULL) { $result = $item; } else { $result = true; }
				break;
			}
		}
	return $result;
	}
}

?>

Example of usage:

<?php
function str_to_utf8 ($str) {
	if (mb_detect_encoding($str, 'UTF-8', true) === false) {
		$str = utf8_encode($str);
	}

	return $str;
}
?>

mb_detect_order:

Set/Get char encoding detection order

mixed mb_detect_order ([ mixed $encoding_list = mb_detect_order() ] )

Sets the automatic char encoding detection order to encoding_list

encoding_list: is an array or comma separated list of char encodings.

If encoding_list is omitted, it returns the current character encoding detection order as array

This setting affects mb_detect_encoding() and mb_send_mail()

mbstring currently implements the following encoding detection filters. If there is an invalid
byte sequence for the following encodings, encoding detection will fail.

UTF-8, UTF-7, ASCII, EUC-JP, SJIS, eucJP-win, SJIS-win, JIS, ISO-2022-JP
For ISO-8859-*, mbstring always detects as ISO-8859-*

For UTF-16, UTF-32, UCS2 and UCS4, encoding detection will fail always.

Example of usage:

<?php
//Set detection order by enumerated list
mb_detect_order("eucjp-win,sjis-win,UTF-8");

//Set detection order by array
$ary[] = "ASCII";
$ary[] = "JIS";
$ary[] = "EUC-JP";
mb_detect_order($ary);

//Display current detection order
echo implode(", ", mb_detect_order());
?>

And showcasing of useless detections:

; Always detect as ISO-8859-1
detect_order = ISO-8859-1, UTF-8

; Always detect as UTF-8, since ASCII/UTF-7 values are 
; valid for UTF-8
detect_order = UTF-8, ASCII, UTF-7

mb_encode_mimeheader:

Encode string for MIME header

string mb_encode_mimeheader ( string $str [, string $charset = determined by mb_language() [, string $transfer_encoding = "B" [,
	string $linefeed = "\r\n" [, int $indent = 0 ]]]] )

Encodes a given string str by the MIME header encoding scheme

params:

str: The str to be encoded. The encoding should be the same as mb_internal_encoding() for this string.

charset: specifies the name of the character set in which str is represented in. The default value is determined
by the current NLS setting (mbstring.language)

transfer_encoding: specifies the scheme of MIME encoding. It should be either "B" (base64) or "Q" (Quoted-Printable).
Falls back to "B" if not given.

linefeed: Linefeed specifies the EOL (end of line) marker with which mb_encode_mimeheader() performs line-folding
(a RFC term, the fact of breaking a line longer than a certain length into multiple lines. The length is currently
hard-coded to 74 chars). Falls back to "\r\n" (CRLF) if not given.

indent: Indentation of the first line (number of chars in the header before str)

Note, that this function is not meant for break lines at higher level contextual envs, meaning it's not meant
to format text, per say. It may clutter up strings with unessecary spaces.

To have this function work well, we need to set the internal encoding first:

<?php
$name = ""; //kanji
$mbox = "Kru";
$doma = "gtinn.mon";
mb_internal_encoding('UTF-8');
$addr = mb_encode_mimeheader($name, "UTF-7", "Q") . " <" . $mbox . "@" . $doma . ">";
echo $addr;
?>

This method mostly works with japanese, by the way.

mb_encode_numericentity:

Encode character to HTML numeric string reference

string mb_encode_numericentity ( string $str , array $convmap [, string $encoding = mb_internal_encoding() [, bool
$is_hex = FALSE ]] )

Converts specified character codes in string str from character code to HTML numeric char reference

Example of usage:

<?php
$convmap = array (
	int start_code1, int end_code1, int offset1, int mask1,
	int start_code2, int end_code2, int offset2, int mask2,
	......
	int start_codeN, int end_codeN, int offsetN, int maskN );
	//Specify Unicode value for start_codeN and end_codeN
	// add offsetN to value and take bit-wise 'AND' with maskN, then
	// it converts value to numeric string reference
?>

Example of usage in terms of mb_encode_numericentity():

<?php
//Convert left side of ISO-8859-1 to HTML numeric character reference
$convmap = array(0x80, 0xff, 0, 0xff);
$str = mb_encode_numericentity($str, $convmap, "ISO-8859-1");

//Convert user defined SJIS-win code in block 95-104 to numeric string
// reference
$convmap = array(
		0xe000, 0xe03e, 0x1040, 0xffff,
		0xe03f, 0xe0bb, 0x1041, 0xffff,
		0xe0bc, 0xe0fa, 0x1084, 0xffff,
		0xe0fb, 0xe177, 0x1085, 0xffff,
		etc.);
$str = mb_encode_numericentity($str, $convmap, "sjis-win");
?>

To get unicode numbers out of a UTF-8 string, this can be used, for example:

<?php
print mb_encode_numericentity(<bla>, array (0x0, 0xffff, 0, 0xffff), 'UTF-8');
?>

mb_encoding_aliases:

Get aliases of known encoding type

array mb_encoding_aliases ( string $encoding )

Example of usage:

<?php
$encoding = 'ASCII';
$known_encodings = mb_list_encodings();

if (in_array($encoding, $known_encodings)) {
	
	$aliases = mb_encoding_aliases($encoding);
	print_r($aliases);
} else {
	echo "Unknown ($encoding) encoding.\n";
}
?>

Outputs an associative array akin to:

Array
(
	[0] => ANSI_X3.4-1968
	[1] => iso-ir-6
	etc.
)

mb_ereg_match:

Regex match for multibyte string

bool mb_ereg_match ( string $pattern, string $string [, string $option = "msr "] )

This runs from the beginning and not nessecarily way to the end.

The option param has the same syntax as 'option' parameter from 'mb_regex_set_options' function.

mb_ereg_replace_callback:

Perform a regex search and replace with multibyte support using a callback

string mb_ereg_replace_callback ( string $pattern , callable $callback , string $string [, string $option = "msr" ] )

Scans string for matches to pattern, then replaces the matched text with the output of callback function.

The behavior of this function is almost identical to mb_ereg_replace(), except for the fact that instead
of replacement param, one should specify a callback.

Params:

pattern: A regex pattern. Multibyte chars may be used in this pattern

callback: A callback that will be called and passed an array of matched elements in the subjec string.
The callback should return the replacement string.

You will often need the callback function for a mb_ereg_replace_callback() in just one place.
In this case you can use an anonymous function to declare the callback within the call to
mb_ereg_replace_callback().

By doing it this way, you will have all the information for the call in one place and do not
clutter the function namespace with a callback function's name not used anywhere else.

string: The string being checked

option: Matching condition can be set by option parameter. If i specified for this parameter, the case
will be ignored. If x is specified, white space will be ignored. If m is specified, match will be
executed in multiline mode and line break will be included in '.'.

If p is specified, match will be executed in POSIX mode, line break will be considered as normal character.
Note that e cannot be used for mb_ereg_replace_callback().

Example of mb_ereg_replace_callback() example:

<?php
//This text was used in 2002
//we want to get this up to date to 2003
$text = "April fools day is 04/01/2002\n";
$text .= "Last christmas was 12/24/2001\n";
//The callback function
function next_year($matches)
{
	//as usual, matches[0] is the complete match
	// $matches[1] the match for the first subpattern
	// enclosed in '(...)' and so on
	return $matches[1].($matches[2]+1);
}
echo mb_ereg_replace_callback(
			"(\d{2}/\d{2})(\d{4})",
			"next_year",
			$text);

?>

Outputs:

April fools day is 04/01/2003
Last christmas was 12/24/2002

Example #2 mb_ereg_replace_callback() using anonymous function supported in PHP >= 5.3

<?php
//This text used in 2002
//we want to get this up to date for 2003
$text = "April fools day is 04/01/2002\n";
$text .= "Last christmas was 12/24/2001\n";

echo mb_ereg_replace_callback(
			"(\d{2}/\d{2}/)(\d{4})",
			function ($matches) {
				return $matches[1].($matches[2]+1);
			},
			$text);
?>

mb_ereg_replace:

Replaces regex with multibyte support

string mb_ereg_replace ( string $pattern, string $replacement , string $string [, string $option = "msr" ] )

params: 

pattern: The regex pattern, Multibyte chars may be used in the pattern.

replacement: The replacement text

string: The string being checked

option: Matching condition can be set by option parameter. If i is specified for this parameter, the case will
be ignored. If x is specified, white space will be ignored.


If m is specified, match will be executed in multiline mode and line break will be included in '.'.
If p is specified, match will be executed in POSIX mode, line break will be considered as normal character.

If e is specified, replacement string will be evaluated as PHP expression. E has been deprecated in 7.1

Note: The internal encoding or the char encoding specified by mb_regex_encoding() will be used as the
character encoding for this function.

Warning: Never use the e modifier when working on untrusted input. No automatic escaping will happen
(as known from preg_replace()). Not taking care of this will most likely create remote code execution
vurns in your app.

Unlike preg_replace, mb_ereg_replace does not use separators

Example of preg_replace:

<?php $data = preg_replace("/[^A-Za-z0-9\.\-]/", "", $data); ?>

Example of mb_ereg_replace:

<?php $data = mb_ereg_replace("[A-Za-z0-9\.\-]", "", $data); ?>

Also, an example of accounting for UTF-8 to handle other chars from DB:

<?php

mb_internal_encoding("UTF-8");
mb_regex_encoding("UTF-8");

$rows = $db->getRows();

$contents = array();
foreach ($rows as $eachRow)
{
	$cleared = str_replace($commonWords, ' ', mb_strtolower(stripslashes($eachRow['bulgarian']), 'UTF-8' ));
	if (trim($cleared) != '') $contents[] = trim($cleared);
}

$list = array();
foreach ($contents as $eachRow)
{
	$exploded = explode(' ', $eachRow);
	foreach ($exploded as $eachExpl)
	{
		$eachExpl = mb_ereg_replace('[^a-<russian revert r> ]', ' ', $eachExpl);
		if (trim($eachExpl) != '')
			if (!in_array($eachExpl, $list, true)) 		$list[] = trim($eachExpl);
	}
}

?>

mb_ereg_search_getpos:

Returns start point of the next regex match

int mb_ereg_search_getpos()

The position is represented by bytes from the head of string.

The internal encoding or teh char encoding specified by mb_regex_encoding() will be used
as the character encoding for this function.

mb_ereg_search_getregs:

Retrieve the result from the last multibyte regex match

array mb_ereg_search_getregs()

Returns: An array including the sub-string of matched part by last mb_ereg_search(), mb_ereg_search_pos(),
mb_ereg_search_regs(). If there are some matches, the first element will have the matched sub-string,
the second element will have the first part grouped with brackets, the third element will have the 
second part grouped with brackets and so on.

It returns false, on error.

mb_ereg_search_init:

Setup string and regex for a multibyte regex match

bool mb_ereg_search_init ( string $string [, string $pattern [, string $option = "msr" ]] )

mb_ereg_search_init() sets string and pattern for a multibyte regex. These values are used for
mb_ereg_search(), mb_ereg_search_pos(), and mb_ereg_search_regs().

mb_ereg_search_pos:

Returns position and length of a matched part of the multibyte regex for a predefined multibyte
string.

array mb_ereg_search_pos ([ string $pattern [, string $option = "ms" ]] )

The string for match is specified by mb_ereg_search_init(). if it is not specified, the previous
one will be used.

Returns: An array consisting of two elements. The first element is the offset, in bytes, where the 
match begins relative to the start of the search string, and the second element is the length in bytes
of the match.

mb_ereg_search_regs:

Returns the matched part of a multibyte regex

array mb_ereg_search_regs ([ string $pattern [, string $option = "ms" ]] )

Return values: mb_ereg_search_regs() executes the regex match, and if there are some matched part,
it returns an array including substring of matched part as first element, the first grouped part
with brackets as second element, the second grouped part as third element and so on.

mb_ereg_search_setpos:

Set start point of the next regex match

bool mb_ereg_search_setpos ( int $position )

mb_ereg_search_setpos() sets the starting point of a match for mb_ereg_search().

Can be negative, if so, counts from end of string.

mb_ereg_search:

Multibyte regex match for predefined multibyte string

bool mb_ereg_search ([ string $pattern [, string $option = "ms" ]] )

mb_ereg_search() returns true if the multibyte string matches with the regex, or false otherwise.
The string for matching is set by mb_ereg_search_init(). If pattern is not specified, the previous one is used.

Example of mb_ereg_search & subpatterns:

<?php
	$str = <some chinese string>;

	$reg = "\w+";

	mb_regex_encoding("UTF-8");
	$r = mb_ereg_search();

	if(!$r)
	{
		echo "null\n";
	}
	else
	{
		$r = mb_ereg_search_getregs(); //get first result
		do
		{
			var_dump($r[0]);
			$r = mb_ereg_search_regs(); //get next result
		}
		while($r);
	}
?>

mb_ereg:

Regex match with multibyte support

int mb_ereg ( string $pattern , string $string [, array &$regs ] )

Executes the regex match with multibyte support.

Params:

pattern: The search pattern.

string: The search string.

regs: If matches are found for paranthesized substrings of pattern and the function is called
with the third argument regs, the matches will be stored in the elements of the array regs.

If not matches are found, regs is set to an empty array.

$regs[1] will contain the substring which starts at the first left paranthesis; $regs[2] will contain
the substring starting at the seconda nd so on. $regs[0] contains the complete matched string.

Return value:

Returns the byte length of the matched string if a match for pattern was found in string,
or FALSE if no matches were found or an error occurred.

If the optional parameter regs was not passed or length of the matched string is 0,
this function returns 1.

The mb_ereg function internally uses the Oniguruma library.

mb_ereg does not support the \uFFFF unicode syntax but uses \x{FFFF}

Example of usage:

<?php

$text = 'Peter is a boy.'; //english
$text = <arabic string>;

mb_regex_encoding('UTF-8');

if(mb_ereg('[\x{0600}-\x{06FF}]', $text)) //arabic range
//if(mb_ereg('[\x{0590}-\x{05FF}]', $text)) //hebrew range
{
	echo "Text has some arabic/hebrew chars";
}
else
{
	echo "Text does not have arabic/hebrew chars";
}

?>

mb_eregi_replace:

Replace regex with multibyte support ignoring case

string mb_eregi_replace ( string $pattern, string $replace, string $string [, string $option = "msri" ] )

Scans string for matches to pattern, then replaces the matched text with replacement.

the e option for this method, has been deprecated in 7.1

To highlight words in multi-byte text:

<?php
$s = <russian word>;
$f = 'a';
echo preg_replace('/('.$f.')/iu', '<b>$1</b>', $s);
?>

We could also do, a transliterator for cyrillic-to-latin letters for UTF chars:

<?php
function do_translit($st) {
	$replacement = array(
		<associative array of keys being related from cyrllic char, to latin char>
	);

	foreach($replacement as $i=>$u) {
		$str = mb_eregi_replace($i,$u,$st);
	}
	return $st;
}
?>

mb_eregi:

Regex match ignoring case with multibyte support

int mb_eregi ( string $pattern, string $string [, array &$regs ] )

Executes the case insensitive regex match with multibyte support.

Params:

pattern: The regex pattern

string: The string being searched

regs: If matches are found for paranthesized substrings of pattern and the function is called with the third
argument regs, the matches will be stored in the elements of the array regs. If no matches are found,
regs is set to an empty array.

$regs[1] will contain the substring which starts at the first left paranthesis; $regs[2] will contain the substring
starting at the second, and so on. $regs[0] will contain a copy of the complete string matched.

Retrurns the byte length of the matched string if a match for pattern was found in teh string. Or false, if no matches
were found or an error occurred.

If the optional parameter regs was not passed or the length of the matched string is 0, this function
returns 1.

NOTE: THIS FUNCTION DOES NOT WORK. IT IS NOT, CASE-INSENSTIIVE FOR NON LATIN CHARS.

mb_get_info:

Get internal settings of mbstring

mixed mb_get_info ([ string $type = "all" ] )

mb_get_info() returns the internal setting parameters of mbstring.

Parameters:

type: If type is not specified to "all", an array having the elements "internal_encoding",
"http_output", "http_input", "func_overload", "mail_charset", "mail_header_encoding",
"mail_body_encoding" will be returned.

If type is specified as "http_output", "http_input", "internal_encoding", "func_overload",
the specified setting parameter will be returned.

Returns an array of type information if type is not specified, otherwise a specific type.

mb_http_input:

Detect HTTP input character encoding

mixed mb_http_input ([ string $type = "" ] )

Detects the HTTP input character encoding.

Params:

type:

Input strings specified the input type. "G" for GET, "P" for POST, "C" for COOKIE, "S" for string,
"L" for list, "l" for the whole list (will return array). If type is omitted, it returns the
last input type processed.

This method does not work, it seems. To circumvent this:

$encoding = mb_detect_encoding(urldecode($REQUEST_URI), 'UTF-8', UTF-7, ASCII, EUC-JP, SJIS, eucJP-win, SJIS-win, JIS,
ISO-2022-JP, ISO-8859-1');

We can detect the encoding of the URL

To which we could do similar things for cookies and post data, albeit we'd have to loop for that.

mb_http_output:

Set/Get HTTP output character encoding

mixed mb_http_output ([ string $encoding = mb_http_output() ] )

Set/Get the HTTP output char encoding. Output after this function is called will be converted
from the set internal encoding to encoding.

encoding:

If encoding is set, mb_http_output() sets the HTTP output char encoding to encoding.

If encoding is omitted, mb_http_output() returns the current HTTP output char encoding.

By default, this is set to 'pass' which means that PHP will not touch the encoding and output it as
it is in the source file.

Normally, this function is not needed as long as you save the .php file in the same encoding
as you want it to output as well as retrieve all input in the same encodin.

If we wish to put a setup of working with Unicode data, we could do as follows:

mb_internal_encoding('UTF-8');
mb_http_output('UTF-8');
mb_http_input('UTF-8');
mb_language('uni');
mb_regex_encoding('UTF-8');
ob_start('mb_output_handler');

As for setting the mb_http_output encoding to UTF-8:

mb_http_output('UTF-8');

mb_internal_encoding:

Set/Get internal character encoding

mixed mb_internal_encoding ([ string $encoding = mb_internal_encoding() ] )

Params:

encoding: is the charater encoding name used for the HTTP input character encoding
conversion, HTTP output character encoding conversion, and the default character
encoding for string functions defined by the mbstring module.

You should notice that the internal encoding is totally different from the 
one for multibyte regex.

Return values:

If encoding is set, Returns TRUE on success, or FALSE on failure. In this case,
the char encoding for multibyte regex is not changed. if encoding is omitted, then the
current char encoding name is returned.

example of usage:

<?php
//Set internal character encoding to UTF-8
mb_internal_encoding("UTF-8");

//Display current internal char encoding
echo mb_internal_encoding();
?>

Note that this method is not nessecary in PHP 5.6

Also, when writing PHP scripts for use on different servers, it is a very good idea to 
explicitly set the internal encoding somewhere on top of every document served.

mb_internal_encoding("UTF-8");

This, in combination with the mysql "SET NAMES 'utf'8", saves a lot of debug issues.

Also, use the multi-byte string functions instead of the ones you may be used to, e.g
mb_strlen() instead of strlen(), etc.

Be aware that the strings in your source file must match teh encoding specified by mb_internal_encoding.
It appears that the Parser loads raw bytes from the file and refers to its internal encoding to determine
their actual encoding.

For example, assume that Latin-1 coherces with the following snippet, and we can have thoose mesh:

<?php
	mb_internal_encoding("iso-8859-1");
	mb_http_output( "UTF-8" );
	ob_start("mb_output_handler");

	echo <stuff>;

?>

And all of it, together:

<?php

mb_internal_encoding('UTF-8');
mb_http_output('UTF-8');
mb_http_input('UTF-8');
mb_regex_encoding('UTF-8');

?>

mb_language:

Set/Get current language

mixed mb_language ([ string $language = mb_language() ] )

Param:

language: Used for encoding e-mail messages. Valid languages are "Japanese", "ja", "English", "en"
and "uni" (UTF-8). mb_send_mail() uses this setting to encode e-mail

Language and its setting is ISO-2022-JP/Base64 for Japanese, UTF-8/Base64 for uni, ISO-8859-1/quoted printable
for English.

Returns: if language is set and language is valid, it returns true. Otherwise, it returns FALSE. When language
is omitted, it returns the language name as a string. If no language is set previously, it then returns false.

Defaults to return "neutral".

mb_list_encodings:

Returns an array of all supported encodings

array mb_list_encodings()

Example of usage:

<?php

print_r(mb_list_encodings());

?>

An example of the output: //Note that this does not return all of the ones that are compatible.

Array
(
	[0] => pass
	[1] => auto
	[2] => wchar
	[3] => byte2be
	[4] => byte2le
	[5] => byte4be
	[6] => byte4le
	[7] => BASE64
	[8] => UUENCODE
	[9] => HTML-ENTITIES
	[10] => Quoted-Printable
	[11] => 7bit
	[12] => 8bit
	[13] => UCS-4
	[14] => UCS-4BE
	[15] => UCS-4LE
	[16] => UCS-2
	[17] => UCS-2BE
	[18] => UCS-2LE
	[19] => UTF-32
	[20] => UTF-32BE
	[21] => UTF-32LE
	[22] => UTF-16
	[23] => UTF-16BE
	[24] => UTF-16LE
	[25] => UTF-8
	[26] => UTF-7
	[27] => UTF7-IMAP
	[28] => ASCII
	[29] => EUC-JP
	[30] => SJIS
	[31] => eucJP-win
	[32] => SJIS-win
	[33] => JIS
	[34] => ISO-2022-JP
	[35] => Windows-1252
	[36] => ISO-8859-1
	[37] => ISO-8859-2
	[38] => ISO-8859-3
	[39] => ISO-8859-4
	[40] => ISO-8859-5
	[41] => ISO-8859-6
	[42] => ISO-8859-7
	[43] => ISO-8859-8
	[44] => ISO-8859-9
	[45] => ISO-8859-10
	[46] => ISO-8859-13
	[47] => ISO-8859-14
	[48] => ISO-8859-15
	[49] => EUC-CN
	[50] => CP936
	[51] => HZ
	[52] => EUC-TW
	[53] => BIG-5
	[54] => EUC-KR
	[55] => UHC
	[56] => ISO-2022-KR
	[57] => Windows-1251
	[58] => CP866
	[59] => KOI8-R
)

mb_output_handler:

Callback function converts character encoding in output buffer

string mb_output_handler ( string $contents, int $status )

mb_output_handler() is ob_start() callback function. mb_output_handler() converts characters
in the output buffer from internal character encoding to HTTP output character encoding.

This handler adds the charset HTTP header when the following conditions are met:

Content-Type has not been set, using header()

The default MIME type begins with text/.

The mbstring.http_input setting is something other than pass.

Example of usage:

<?php
mb_http_output("UTF-8");
ob_start("mb_output_handler");
?>

Note: If you want to output binary data, such as an image, a Content-Type: header must be set
using header() before any binary data is sent to the client (e.g header("Content-Type: image/png")).

If Content-Type: header is sent, output character encoding conversion will not be performed.

Note that if 'Content-Type: text/*', is sent, the content body is regarded as text;
conversion will take place.

mb_parse_str:

Parse GET/POST/COOKIE data and set global variable

bool mb_parse_str( string $encoded_string [, array &$result ] )

Parse GET/POST/COOKIE data and sets global variables. Since PHP does not provide raw POST/COOKIE data,
it can only be used for GET data for now. It parses URL encoded data, detects encoding, converts coding
to the internal encoding and set values to the result array or global variables.

Params:

encoded_string: The URL encoded data.

result: An array containing decoded and character encoded converted values.

Example of usage:

$str = 'email=kehaovista@qq.com&city=shanghai&job=Phper';
mb_parse_str($str, $result);
print_r($result);

Array
(
	[email] => kehaovista@qq.com
	[city] => shanghai
	[job] => Phper
)

mb_preferred_mime_name:

Get MIME charset string

string mb_preferred_mime_name ( string $encoding )

Get a MIME charset string for a specific encoding.

Example of usage:

<?php
$outputenc = "sjis-win";
mb_http_output($outputenc);
ob_start("mb_output_handler");
header("Content-Type: text/html; charset=" . mb_preferred_mime_name($outputenc));
?>

mb_regex_encoding:

Set/Get character encoding for multibyte regex

mixed mb_regex_encoding ([ string $encoding = mb_regex_encoding() ] )

Set/Get character encoding for multibyte regex.

encoding: The encoding param is the character encoding. If it is omitted, the internal
character encoding value will be used.

Return Values: If encoding is set, then Returns TRUE on success or FALSE on failure. In this case,
the internal character encoding is NOT changed. If encoding is omitted, then the current character
encoding name for a multibyte regex is returned.

The default encoding is UTF-8

Note, that mb_regex_encoding() does not support the same encodings as listed in mb_list_encodings.php

mb_regex_set_options:

Set/Get the default options for mbregex functions

string mb_regex_set_options ([ string $options = mb_regex_set_options() ] )

Sets the default options described by options for multibyte regex functions

Params: 

options: The options to set. This is a string where each character is an option. To set a mode, the mode
character must be the last one set, however there can only be set one mode but multiple options.

Regex options:

Option 			Meaning
i 				Ambiguity match on

x 				Enables extended pattern form

m 				"matches with newlines"

s 				'^'->'\A','$'->'\Z'

p 				Same as both m and s options

l 				Find longest matches

n 				Ignores empty matches

e 				eval() resulting code

Regex Syntax modes:

Mode 	Meaning

j 		Java (Sun java.util.regex)

u 		GNU regex

g 		grep

c 		Emacs

r 		Ruby

z 		Perl

b 		POSIX Basic regex

d 		POSIX Extended regex

Returns the previous options. If options is omitted, it returns the string
that describes the current options.

The params, as they are, are actually constants - to which several can be specified at once,
and if we do specify more than one mode, the last one is chosen:

'i' : ONIG_OPTION_IGNORECASE;

'x' : ONIG_OPTION_EXTEND;

'm' : ONIG_OPTION_MULTILINE;

's' : ONIG_OPTION_SINGLELINE;

'p' : ONIG_OPTION_MULTILINE | ONIG_OPTION_SINGLELINE;

'l' : ONIG_OPTION_FIND_LONGEST;

'n' : ONIG_OPTION_FIND_NOT_EMPTY;

'e' : eval() resulting code

And the modes:

'j' : ONIG_SYNTAX_JAVA;

'u' : ONIG_SYNTAX_GNU_REGEX;

'g' : ONIG_SYNTAX_GREP;

'c' : ONIG_SYNTAX_EMACS;

'r' : ONIG_SYNTAX_RUBY;

'z' : ONIG_SYNTAX_PERL;

'b' : ONIG_SYNTAX_POSIX_BASIC;

'd' : ONIG_SYNTAX_POSIX_EXTENDED;

mb_send_mail:

Send encoded mail

bool mb_send_mail ( string $to , string $subject , string $message [, string $additional_headers = NULL [, string $additional_parameter = NULL ]] )

Sends email. Headers and messages are converted and encoded according to the mb_language() setting.
It's a wrapper function for mail(), so see also mail() for details.

Params:

to: The mail address being sent to. Multiple recipients may be specified by putting a comma between each address in to.
This param is not automatically encoded.

subject: The subject of the mail

message: The message of the mail

additional_headers (optional): String to be inserted at the end of the email header.

This is typically used to add extra headers (From, Cc, and Bcc). Multiple extra headers should be separated with a 
CRLF (\r\n). Validate parameter not to be injected unwanted headers by attackers.

Note: When sending mail, the mail MUST contain a From header. This can be set with the additional_headers parameter,
or a default can be set in php.ini

Failing to do this will result in an error message similar to Warning: mail(): "sendmail_from" not set in php.ini
or custom "From:" header missing. The From header sets also Return-Path under Windows.

Note: If messages are not received, try using a LF (\n) only. Some Unix mail transfer agents (most notably qmail)
replace LF by CRLF automatically (which leads to doubling CR if CRLF is used). This should be a last resort,
as it does not comply with the RFC 2822 protocol.

additional_parameter:

additional_parameter is a MTA command line parameter. It is useful when setting the correct Return-Path header
when using sendmail.

This parameter is escaped by escapeshellcmd() internally to prevent command execution. escapeshellcmd()
prevents command execution, but allows to add additional parameters. For security reason, this parameter
should be validated.

Since escapeshellcmd() is applied automatically, some characters that are allowed as email addresses
by internet RFCs cannot be used. Programs that are required to use these characters mail() cannot be used.

The user that the webserver runs as should be added as a trusted user to the sendmail configuration to prevent
a 'X-Warning' header from being added to the message when the envelope sender (-f) is set using this method.
For sendmail users, this file is /etc/mail/trusted-users.

Make sure that if we are using a form to type in E-mails, that our form page has the right encoding,
like if i want to send out a japanese email, by filling out a form, this form page needs this in the header:

<META HTTP-EQUIV="Content-Type" CONTENT="text/html"; charset="SHIFT-JIS">

Also an example of using Japanese Hanaku in a mail subject: //A japanese hanaku is a single byte kana in (S)JIS

$intSubjectLength = mb_strlen($strSubject);
$intSeparateLength = 10;
for ($i=0; $i<ceil($intSubjectLength / $intSeparateLength); $i++) {
	$arrSeparatedSubject[$i] = mb_substr($strSubject, $intIndex, $intSeparateLength);
	$arrSeparatedSubject[$i] = mb_encode_mimeheader(mb_convert_encoding($arrSeparatedSubject[$i], "JIS", "EUC-JP"));
	$intIndex = $intIndex + $intSeparateLength;
}
$strSubject = join("\n", $arrSeparatedSubject);

mb_split:

Split multibyte string using regex

array mb_split ( string $pattern , string $string [, int $limit = -1 ] )

An example of splitting multi-byte string into its individual characters.
This depends (this function at least), depends on UTF-8 encoding, so set that before.

<?php
function mbStringToArray ($string) {
	$strlen = mb_strlen($string);
	while ($strlen) {
		$array[] = mb_substr($string,0,1,"UTF-8");
		$string = mb_substr($string,1,$strlen,"UTF-8");
		$strlen = mb_strlen($string);
	}
	return $array;
}
?>

The pattern arg of this function however, doesn ot use the /pattenr/ delimiting unlike other
regex functions such as preg_match:

<?php
	#Works. No slashes around the /pattern/
	print_r( mb_split("\s", "hello world") );
	Array (
		[0] => hello
		[1] => world
	)

	# Does not work
	print_r( mb_split("/\s/", "hello world") );
	Array(
		[0] => hello world
	)
?>

And a simple way, is that we use the preg_split with //u:

<?php
	$str = 'Ma-<russian letters>';
	print_r(preg_split('//u', $str, null, PREG_SPLIT_NO_EMPTY));
?>

Outputs an associative array with all the letters being each element (1 letter per key)

Also, an example of running am ethod that splits a multibyte string into an array of characters.
Comparable to str_split()

<?php
function mb_str_split( $string ) {
	# Split at all position not after the start: ^
	# and not before the end: $
	return preg_split('/(?<!^)(?!$)/u', $string );
}

$string = <some chinese letters>;
$charlist = mb_str_split( $string );

print_r( $charlist );
?>

Prints each letter, as elements of the associative array

We might need to set the regex encoding and the internal encoding to UTF-8 as well, beforehand.

mb_regex_encoding('UTF-8');
mb_internal_encoding("UTF-8");
//Then run the regex split 

Another way, is to cause an array mapping of the array and to compare the expected result:

<?php

$string = "Hallöle";

$array = array_map(function ($i) use ($string) {
	return mb_substr($string, $i, 1);
}, range(0, mb_strlen($string) -1));

expect($array)->toEqual(['H', 'a', 'l', 'l', 'ö', 'l', 'e']);

?>

mb_strcut:

Get part of string

string mb_strcut ( string $str , int $start [, int $length = NULL [, string $encoding = mb_internal_encoding() ]] )

mb_strcut() extracts a substring from a string similarly to mb_substr() but operates on bytes instead of characters.
If the cut position happens to be between two bytes of a multi-byte character, the cut is performed starting from
the first byte of that character.

This is also the difference to the substr() function, which would simply cut the string between the bytes and
thus result in a malformed byte sequence.

Params:

str: The string being cut

start: If start is non-negative, the returned string will start at the start'th byte position in str,
counting from zero. For instance, in the string 'abcdef', the byte at pos 0 is 'a', the byte at pos 2 is
c etc.

If start is negative, the returned string will start at the start'th byte from teh end.

length: Length in bytes. If omitted or NULL is passed, extract all bytes to the end of the string.

encoding: The encoding parameter is the character encoding. If it is omitted, the internal character
encoding value will be used.

Passing NULL as length, parses all bytes to the end of the string.

The difference between mb_substr and mb_strcut, is that mb_strcut treats it as a byte stream, where as 
mb_substr treats it as a character stream.

mb_strcut('I_ROHA', 1, 2); //returns 'I_', treated as a byte stream
mb_substr('I_ROHA', 1, 2); //returns 'ROHA', treated as character stream

# 'I_' 'RO' 'HA' means multi-byte char

If start is too large, it returns an empty string.

mb_strimwidth:

Get truncated string with specified width

string mb_strimwidth ( string $str , int $start , int $width [, string $trimmaker = "" [, string $encoding = mb_internal_encoding() ]] )

Truncates string str to the specified width

Params of note:

trimmarker: A string that is added to the end of string when string is truncated.

encoding: The encoding parameter is the character encoding. If it is omitted, the internal character
encoding value will be used.

If the trimmarker is set, the difference between STRING_LENGTH - LENGTH_OF_MARKER is replaced with MARKER_CONTENT

<?php
echo mb_strimwidth("Hello World", 0, 10, "...");
//output: "Hello W..."
?>

A workaround for circumventing spaces, in the replaced string, we can do as follows:

rtrim(mb_strimwidth($string, 0, 24))."..."

mb_stripos:

Finds position of first occurence of a string within another, case insensitive.

int mb_stripos ( string $haystack , string $needle [, int $offset = 0 [, string $encoding = mb_internal_encoding() ]] )

mb_stripos() returns the numeric position of the first occurrence of needle in the haystack string. Unlike
mb_strpos(), mbstripos() is case-insensitive. If needle is not found, it returns FALSE.

Params:

haystack: The string from which to get the position of the first occurrence of needle

needle: The string to find haystack

offset: The position in haystack to start searching. A negative offset counts from the end of the string

encoding: Character encoding name to use. If it is omitted, internal character encoding is used.

mb_stristr:

Finds first occurrence of a string within another, case insensitive

string mb_stristr( string $haystack, string $needle [, bool $before_needle = false [, string $encoding = mb_internal_encoding () ]] )

mb_stristr() finds the first occurrence of needle in haystack and returns the portion of haystack.
Unlike mb_strstr(), mb_stristr() is case-insensitive. If needle is not found, it returns FALSE.

params:

haystack: The string from which to get the first occurrence of needle

needle: The string to find in haystack

before_needle: Determines which portion of haystack this function returns. If set to TRUE, it returns
all of haystack from the beginning to the first occurrence of needle (excluding needle). If set to FALSE,
it returns all of haystack from the first occurence of needle to the end (including needle)

encoding: Character encoding name to use. if it is omitted, internal character encoding is used.

mb_strlen:

Get string length

mixed mb_strlen ( string $str [, string $encoding = mb_internal_encoding() ] )

gets the length of a string

Str: The str being checked for length

encoding: The encoding to use , if omitted, the internal one is used.

//EDIT: Encodings which i was about to type here, have been typed already earlier in the document,
i recognized the encodings, but not to the extent of knowing if the entire list was the same.
They were.

Note that the speed of mb_strlen varies a lot according to specified character set.

If we need the length of a string in bytes, we should use:

<?php

mb_strlen($string, '8bit'); 

?>

Due to general speed concerns with mb_str functions overall, do not use them frequently.

Some benchmarking of the functions are as follows:

# benchmarking strlen vs. mb_strlen
# normal strlen: 3.6795361042023 ms, average: 3.6795361042023E-6 ms
# mb_strlen: 5.5934538841248 ms, average: 5.5934538841248E-6 ms

# mb_strlen is 1.52 slower than strlen

# benchmarking substr vs. mb_substr
# normal substr: 3.4437320232391 ms, average: 3.4433732023291E-6 ms
# mb_substr: 3.537418270599 ms, average: 3.537418270599E-6 ms

# mb_substr is 1.03 slower than substr

# benchmarking strtolower vs. mb_strtolower
# normal strtolower: 4.446839094162 ms, average: 4.446839094162E-6 ms
# mb_strlen: 193.44901108742 ms, average: 0.00019344901108742 ms

# mb_strtolower is 45.3 slower than strtolower

# benchmarking strtoupper vs. mb_strtoupper
# normal strtoupper: 3.0210740566254 ms, average: 3.0210740566254-6 ms
# mb_strlen: 340.71775603294 ms, average: 0.00034071775603294 ms

# mb_strtoupper is 112.78 slower than strtoupper

If we find ourselves without the mb string functions and cannot easily change it,
a quick hack replacement for mb_strlen for utf8 chars is to use a PCRE regex
with utf8 turned on.

$strlen = preg_match_all("/.{1}/us",$utf8string,$dummy);

This counts every matching char that is a singular char, which makes it EXTREMELY slow,
especially on larger strings.

mb_strpos:

Find position of first occurrence of string in a string

int mb_strpos ( string $haystack , string $needle [, int $offset = 0 [, string $encoding = mb_internal_encoding() ]] )

Finds position of the first occurrence of a string in a string

Performs a multi-byte safe strpos() operation based on number of characters.
The first character pos is 0, the second character position is 1 and so on.

The offset param here, is character count, not byte count.

mb_strrchr:

Finds the last occurrence of a character in a string within another

string mb_strrchr ( string $haystack , string $needle [, bool $part = false [, string $encoding = mb_internal_encoding() ]] )

mb_strrchr finds the last occurrence of needle in a haystack and returns the portion of haystack. 
If needle is not found, false is returned.

Params:

haystack: The string from which to get the last occurrence of needle

needle: The string to find in haystack

part: Determines which portion of haystack this function returns. If set to TRUE, it returns
all of haystack from the beginning to the last occurrence of needle. If set to FALSE, it returns
all of haystack from the last occurrence of needle to the end.

encoding: Character encoding name to use. If it is omitted, internal character encoding is used.

mb_strrichr:

Finds the last occurrence of a char in a string within another, case insensitivei

string mb_strrichr ( string $haystack , string $needle [, bool $part = false [, string $encoding = mb_internal_encoding() ]] )

Finds the last occurrence of needle in ahsytack and returns portions of haystack. Unlike mb_strrchr(),
mb_strrichr() is case-insensitive. If needle is not found, it returns FALSE.

params:

haystack: The string from which to get the last occurrence of needle

needle: String to find in haystack

part: Determines which portion of haystack this function returns. If set to true, it returns
all of haystack from beginning to the last occurrence of needle. If set to FALSE, it returns all
of haystack from the last occurrence of needle to the end.

encoding: Char encoding name to use. If it is omitted, internal char encoding is used.

Returns portion of haystack, or FALSE if needle is not found.

mb_strripos:

Finds position of last occurrence of a string within another, case insenstivei

int mb_strripos ( string $haystack, string $needle [, int $offset = 0 [, string $encoding = mb_internal_encoding() ]] )

mb_strripos() performs multi-byte safe strripos() operation based on number of chars. needle pos is counted from
the beginning of haystack. First char pos is 0, etc. Unlike mb_strrpos(), mb_strripos() is case-insensitive

Example of startsWith/endsWith:

<?php
	function startsWith($haystack,$needle)
	{
		$res=FALSE;
		if(mb_strripos($haystack,$needle,0,"utf-8")==0)
			$res = TRUE;
		return $res;
	} 

	function endsWith($haystack, $needle)
	{
		$res=FALSE;
		$len=mb_strlen($haystack);
		$pos=$len-mb_strlen($needle);
		if(mb_strripos($haystack,$needle,0,"utf-8")==$pos)
			$res=TRUE;
		return $res;
	}
?>

mb_strrpos:

Find position of last occurrence of a string in a string

int mb_strrpos ( string $haystack, string $needle [, int $offset = 0 [, string $encoding = mb_internal_encoding() ]] )

Performs a multibyte safe strrpos() operation based on the number of chars. needle position is counted from the 
beginning of haystack. First char pos is 0, etc.

mb_strrpos throws a warning if haystack is empty.
strrpos simply returns FALSE.

mb_strstr:

Finds first occurrence of a string within another

string mb_strstr ( string $haystack, string $needle [, bool $before_needle = false [, string $encoding = mb_internal_encoding() ]] )

mb_strstr() finds the first occurrence of needle in haystack and returns the portion of haystack. If needle
is not found, returns false.

Params:

haystack: String from which to get first occurrence of needle

needle: String to find in haystack

before_needle: Determines which portion of haystack this function returns. If set to true, it returns
all of haystack from the beginning to the first occurrence of needle (excluding needle).

If set to false, it returns all of haystack from the first occurrence of needle to the end, including needle.

mb_strtolower:

Make a string lowercase

string mb_strtolower ( string $str [, string $encoding = mb_internal_encoding() ] )

Returns str with all alphabetic chars converted to lowercase

mb_strtolower() is very slow, to which even just running queries to the DB is faster, akin to as follows will show:

<?php

$text = "<tons of text>";

//mb_strtolower()
$timeMB = microtime(true);

	for($i=0;$i<30000;$i++)
		$lower = mb_strtolower("$text/no-cache-$i");

$timeMB = microtime(true) - $timeMB;

//MySQL lower()
$timeSQL = microtime(true);

	mysql_query("set names latin1");
	for($i=0;$i<30000;$i++) {
		$r = mysql_fetch_row(mysql_query("select lower('$text/no-cache-$i')"));
		$lower = $r[0];
	}

$timeSQL = microtime(true) - $timeSQL;

echo "mb: ".sprintf("%.5f",$timeMB)." seconds.<br/>";
echo "sql: ".sprintf("%.5f",$timeSQL)." seconds.<br />";

//The results is a range of approx 12 seconds for the first and 5 for the second.
//This may varym but overall, its a significant timeloss to use the tolower of the mb library.

?>

Running the mb_strtolower of UTF-8, will only tag chars which are marked with the unicode property
of "LU" (uppercase letter), there are, however, letters whom are considered as Letter Numbers, "NL",
A unicode prop, that also has lowercase/uppercase. These, will not be affected by this method call.

Examples to these, are for instance roman letters, which range on the UTF table of 8560 to 8575

The following, is a extended strtolower of the mb funciton, which is as follows:

<?php

//The numbers in the in-line comments display the chars Unicode code-points (CP)
function strtolower_utf8_extended( $utf8_string )
{
	$additional_replacements = array
		( "ǅ"    => "ǆ"        //   453 ->   454
        , "ǈ"    => "ǉ"        //   456 ->   457
        , "ǋ"    => "ǌ"        //   459 ->   460
        , "ǲ"    => "ǳ"        //   498 ->   499
        , "Ϸ"    => "ϸ"        //  1015 ->  1016
        , "Ϲ"    => "ϲ"        //  1017 ->  1010
        , "Ϻ"    => "ϻ"        //  1018 ->  1019
        , "ᾈ"    => "ᾀ"        //  8072 ->  8064
        , "ᾉ"    => "ᾁ"        //  8073 ->  8065
        , "ᾊ"    => "ᾂ"        //  8074 ->  8066
        , "ᾋ"    => "ᾃ"        //  8075 ->  8067
        , "ᾌ"    => "ᾄ"        //  8076 ->  8068
        , "ᾍ"    => "ᾅ"        //  8077 ->  8069
        , "ᾎ"    => "ᾆ"        //  8078 ->  8070
        , "ᾏ"    => "ᾇ"        //  8079 ->  8071
        , "ᾘ"    => "ᾐ"        //  8088 ->  8080
        , "ᾙ"    => "ᾑ"        //  8089 ->  8081
        , "ᾚ"    => "ᾒ"        //  8090 ->  8082
        , "ᾛ"    => "ᾓ"        //  8091 ->  8083
        , "ᾜ"    => "ᾔ"        //  8092 ->  8084
        , "ᾝ"    => "ᾕ"        //  8093 ->  8085
        , "ᾞ"    => "ᾖ"        //  8094 ->  8086
        , "ᾟ"    => "ᾗ"        //  8095 ->  8087
        , "ᾨ"    => "ᾠ"        //  8104 ->  8096
        , "ᾩ"    => "ᾡ"        //  8105 ->  8097
        , "ᾪ"    => "ᾢ"        //  8106 ->  8098
        , "ᾫ"    => "ᾣ"        //  8107 ->  8099
        , "ᾬ"    => "ᾤ"        //  8108 ->  8100
        , "ᾭ"    => "ᾥ"        //  8109 ->  8101
        , "ᾮ"    => "ᾦ"        //  8110 ->  8102
        , "ᾯ"    => "ᾧ"        //  8111 ->  8103
        , "ᾼ"    => "ᾳ"        //  8124 ->  8115
        , "ῌ"    => "ῃ"        //  8140 ->  8131
        , "ῼ"    => "ῳ"        //  8188 ->  8179
        , "Ⅰ"    => "ⅰ"        //  8544 ->  8560
        , "Ⅱ"    => "ⅱ"        //  8545 ->  8561
        , "Ⅲ"    => "ⅲ"        //  8546 ->  8562
        , "Ⅳ"    => "ⅳ"        //  8547 ->  8563
        , "Ⅴ"    => "ⅴ"        //  8548 ->  8564
        , "Ⅵ"    => "ⅵ"        //  8549 ->  8565
        , "Ⅶ"    => "ⅶ"        //  8550 ->  8566
        , "Ⅷ"    => "ⅷ"        //  8551 ->  8567
        , "Ⅸ"    => "ⅸ"        //  8552 ->  8568
        , "Ⅹ"    => "ⅹ"        //  8553 ->  8569
        , "Ⅺ"    => "ⅺ"        //  8554 ->  8570
        , "Ⅻ"    => "ⅻ"        //  8555 ->  8571
        , "Ⅼ"    => "ⅼ"        //  8556 ->  8572
        , "Ⅽ"    => "ⅽ"        //  8557 ->  8573
        , "Ⅾ"    => "ⅾ"        //  8558 ->  8574
        , "Ⅿ"    => "ⅿ"        //  8559 ->  8575
        , "Ⓐ"    => "ⓐ"        //  9398 ->  9424
        , "Ⓑ"    => "ⓑ"        //  9399 ->  9425
        , "Ⓒ"    => "ⓒ"        //  9400 ->  9426
        , "Ⓓ"    => "ⓓ"        //  9401 ->  9427
        , "Ⓔ"    => "ⓔ"        //  9402 ->  9428
        , "Ⓕ"    => "ⓕ"        //  9403 ->  9429
        , "Ⓖ"    => "ⓖ"        //  9404 ->  9430
        , "Ⓗ"    => "ⓗ"        //  9405 ->  9431
        , "Ⓘ"    => "ⓘ"        //  9406 ->  9432
        , "Ⓙ"    => "ⓙ"        //  9407 ->  9433
        , "Ⓚ"    => "ⓚ"        //  9408 ->  9434
        , "Ⓛ"    => "ⓛ"        //  9409 ->  9435
        , "Ⓜ"    => "ⓜ"        //  9410 ->  9436
        , "Ⓝ"    => "ⓝ"        //  9411 ->  9437
        , "Ⓞ"    => "ⓞ"        //  9412 ->  9438
        , "Ⓟ"    => "ⓟ"        //  9413 ->  9439
        , "Ⓠ"    => "ⓠ"        //  9414 ->  9440
        , "Ⓡ"    => "ⓡ"        //  9415 ->  9441
        , "Ⓢ"    => "ⓢ"        //  9416 ->  9442
        , "Ⓣ"    => "ⓣ"        //  9417 ->  9443
        , "Ⓤ"    => "ⓤ"        //  9418 ->  9444
        , "Ⓥ"    => "ⓥ"        //  9419 ->  9445
        , "Ⓦ"    => "ⓦ"        //  9420 ->  9446
        , "Ⓧ"    => "ⓧ"        //  9421 ->  9447
        , "Ⓨ"    => "ⓨ"        //  9422 ->  9448
        , "Ⓩ"    => "ⓩ"        //  9423 ->  9449
        , "𐐦"    => "𐑎"        // 66598 -> 66638
        , "𐐧"    => "𐑏"        // 66599 -> 66639
        ); 

    $utf8_string = mb_strtolower( $utf8_string, "UTF-8");

    $utf8_string = strtr( $utf8_string, $additional_replacements );

    return $utf8_string;
} //strtolower_utf8_extended()

?>

An example of handling conversion if we are in a situation of where we do not know the encoding:

$str = mb_strtolower($str, mb_detect_encoding($str));

If we know its UTF-8, just parse utf-8 as the second arg. Not doing the proper encoding arg,
will corrupt non-UTF-8 data if it is non-UTF-8


If Fatal error: Call to undefined function: mb_strtolower() in ????.php on line ??

This means that the mbstring extension is not compiled on the server. 
To compile it, compile PHP with the --enable-mbstring option

Same goes for the error message of:

Call to undefined function mb_eregi() / mb_strtolower()

Another example of usage, where we make the first char uppcase and lower for the rest:

<?php
function str_split_unicode($str, $l = 0) {
	if ($l > 0) {
		$ret = array();
		$len = mb_strlen($str, "UTF-8");
		for ($i = 0; $i < $len; $i += $l) {
			$ret[] = mb_substr($str, $i, $l, "UTF-8");
		}
		return $ret;
	}
	return preg_split("//u", $str, -1, PREG_SPLIT_NO_EMPTY);
}

function ToCorrectCase($str){
	
	$str = mb_strtolower($str);
	$str_array = str_split_unicode($str);
	$str_array[0] = mb_strtoupper($str_array[0]);

	$str = '';
	foreach ($str_array as $key){
		$str = $str.$key;
	}
	return $str;
}
?>

mb_strtoupper:

Makes a string uppercase

string mb_strtoupper ( string $str [, string $encoding = mb_internal_encoding() ] )

Returns str with all alphabetic characters converted to uppercase.

Example of usage:

<?php
$str = "bla";
$str = mb_strtoupper($str);
echo $str;
?>

Note, that a lot of the time, UTF-8 is nessecary to be forced, despite documentation.

Also, an example of replacing the german S letter:

<?php
mb_internal_encoding("UTF-8");
echo mb_strtoupper(str_replace("<german s>", "SS", "Ma<german s>\n")); //"MASS"
?>

mb_strwidth:

Returns width of string

int mb_strwidth ( string $str [, string $encoding = mb_internal_encoding() ] )

Multi-byte chars are usually twice the width of a single byte character

Chars 				Width

U+0000 - U+0019 		0

U+0020 - U+1FFF 		1

U+2000 - U+FF60 		2

U+FF61 - U+FF9F 		1

U+FFA0 - 				2

This is returned in width of the monotypes variant, not bytes.

mb_substitute_character:

Set/Get substitution character

mixed mb_substitute_character ([ mixed $substrchar = mb_substitute_character() ] )

Specifies a substitution character when input character encoding is invalid or character
code does not exist in output character encoding.

Invalid characters may be substituted NULL (no output), string or integer value (Unicode char code value).

This setting affects mb_convert_encoding(), mb_convert_variables(), mb_output_handler(), and mb_send_mail()

params:

substrchar: 

Specify the Unicode value as an int, or as one of the following strings:

"none": no output

"long": Output character code value (Example: U+3000,JIS+7E7E)

"entity": Output character entity (Example: Ä)

if substrchar is set, it returns true on success, FALSE otherwise.
If the substrchar is not set, the current string is returned.

Example of usage:

<?php
// Set with Unicode U+3013 (GETA MARK)
mb_substitute_character(0x3013);

//Set hex format
mb_substitute_character("long");

//Display current setting
echo mb_substitute_character();
?>

mb_substr_count:

Count the number of substring occurrences

int mb_substr_count ( string $haystack , string $needle [, string $encoding = mb_internal_encoding() ] )

Counts the number of times the needle substring occurrs in haystack string.

Example of usage:

<?php
echo mb_substr_count("this is a test", "is");
?>

mb_substr:

Get part of string

string mb_substr ( string $str, int $start [, int $length = NULL [, string $encoding = mb_internal_encoding() ]] )

Performs a multi-byte safe substr() operation based on number of chars. Position is counted from the 
beginning of str. First char's pos is 0, etc.

Passing null as length ,accounts for as being 0.

Thus, always parse in the length of the str:

<?php
mb_substr($str, $start, $mb_strlen($str), $encoding);
?>

When we iterate over UTF-8 chars, we might be tempted to use the mb_substr($text, $i, 1).

The problem is that when a loop calls all possible values of N times, we find that the efficiency
becomes N^2 (Because N is called N times)

The chars are, per-dominantly, 1 to 6 bytes long.

A way to workaround this, is to first split the text into an array of letters using some 
smart preprocessing, and only then iterate over the array.

<?php
class Strings
{
	public static function len($a){
		return mb_strlen($a, 'UTF-8');
	}

	public static function charAt($a,$i){
		return self::substr($a,$i,1);
	}

	public static function substr($a,$x,$y=null){
		if($y===NULL){
			$y=self::len($a);
		}
		return mb_substr($a,$x,$y, 'UTF-8');
	}

	public static function letters($a){
		$len = self::len($a);
		if($len==0){
			return array();
		}else if($len == 1){
			return array($a);
		}else{
			return Arrays::concat(
				self::letters(self::substr($a,0,$len>>1)),
				self::letters(self::substr($a,$len>>1))
			);
		}
	}
}
?>

By recursively splitting the text into two parts, we are able to parse it
at a speed of N log N, since there is log amount of levels.

log uses the base of a number and applies to another, to perform a result of amount of executions
of multiplications of said number in repetion is needed.

An example:

//log 2 base
log(BASE)(8) = 3 //Cause (BASE)*(BASE)*(BASE), 2, 4, 8, we timed 3 times, thus, log of 8 in a 2 base is 3

In our case, since the loop to call over something is regardless a pattern of X * X (in the least, cause, we are applying
two loops on top of each other instead of consecutivelly running 1 loop to iterate over everything)

then we ned up with N * log(N), because we do it N times, and we have log levels (pattern of itself x itself)

Another example, as well, for setting for char to be uppercase, is as follows:

<?php
function mb_ucfirst($str, $enc = 'utf-8') {
	return mb_strtoupper(mb_substr($str, 0, 1, $enc), $enc).mb_substr($str, 1, mb_strlen($str, $enc), $enc);
} 
?>

MCrypt, which is the next module to cover, is DEPRECATED in 7.1. Albeit, i will for the sake of KNOWLEDGE,
and REASONING, still note its methods, and procedueers. Because i firmly believe that by virtue of absorbing information,
that we lead to become better thinkers.

There are some exceptions to this rule. I will not write it's constants, as they are deprecated and of lower
relevance. But i will write their reasonings.

The following things apply to Mcrypt:

Mcrypt ciphers:

You must (in CFB and OFB mode) or can (in CBC mode) supply an initialization vector (IV) to the respective
cipher function. The IV must be unique and must be teh same when decrypting/encrypting. With data which is
stored encrypted, you can take the output of a function of the index under which the data is stored
(e.g the MD5 key of the filename).

Alternatively, you can transmit the IV together with the encrypted data.

Interpetability:

mcrypt does not support PKCS#7 padding, it uses non-standard and insecure null padding. This means tthat
for interoperability with most other implementations PKCS#7 padding will have to be added prior to
encryption and/or removed after decryption.

This is a major source of interoperability issues.

When interoperating with AES the mcrypt algo must be specified as MCRYPT_RIJNDAEL_128 since AES
only supports a block size of 128-bits. There is often confusion that this specifies the
key size which it does not.

Also, an example of how to use a 256-bit encryption/decryption with mcrypt.

In this example, MCRYPT_RIJNDAEL_128 is used, because it is AES-compliant, and MCRYPT_MODE_CBC.
(ECB mode is inadequate for many purposes because it does not use an IV)

This function stores a hash of the data to verify that the data was decrypted successfully,
but this could be easily removed if necessary:

<?php
function encrypt($decrypted, $password, $salt='<something>') {
//Build a 256-bit $key which is a SHA256 hash of $salt and $password.
$key = hash('SHA256', $salt . $password, true);

//build $iv and $iv_base64. We use a block size of 128 bits (AES compliant) and CBC mode.
(note:  ECB mode is inadequate as IV is not used)
srand(); $iv = mcrypt_create_iv(mcrypt_get_iv_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_CBC), MCRYPT_RAND);
if (strlen($iv_base64 = rtrim(base64_encode($iv), '=')) != 22) return false;

//Encrypt $decrypted and an MD5 of $decrypted using $key. MD5 is fine to use here because it is 
just to verify successfull decryption
$encrypted = base64_encode(mcrypt_encrypt(MCRYPT_RIJNDAEL_128, $key, $decrypted . md5($decrypted), MCRYPT_MODE_CBC, $iv));

return $iv_base64 . $encrypted;
}

function decrypt($encrypted, $password, $salt='<same as before>') {
	//build a 256-bit $key which is a SHA256 hash of $salt and $password
	$key = hash('SHA256', $salt . $password, true);

	//Retrieve $iv which is the first 22 chars plus ==, base64_decoded
	$iv = base64_decode(substr($encrypted, 0, 22) . '==');

	//Remove $iv from $encrypted
	$encrypted = substr($encrypted, 22);

	//Decrypt the data. rtrim won't corrupt the data because the last 32 chars are the md5 hash.
	//Thus, any \0 chars has to be padding
	$decrypted = rtrim(mcrypt_decrypt(MCRYPT_RIJNDAEL_128, $key, base64_decode($encrypted), MCRYPT_MODE_CBC, $iv), "\0\4");

	//Retrieve $hash which is the last 32 chars of $decrypted
	$hash = substr($decrypted, -32);

	//Remove last 32 chars from $decrypted
	$decrypted = substr($decrypted, 0, -32);

	//integrity check. If it fails, data is corrupt, or salt/pw is wrong
	if (md5($decrypted) != $hash) return false;

	return $decrypted;
}
?>

The following methods belong to mcrypt, albeit, do note, they are deprecated in 7.1, it is the general
principle that we are after here:

mcrypt_create_iv:

Creates an initialization vector from a random source

string mcrypt_create_iv ( int $size [, int $source = MCRYPT_DEV_URANDOM ] )

THe IV is only meant to give an alternative seed to the encryption routines. This IV does not
need to be secret at all, though it can be desirable.

We can even send it along with our cipher text without losing security.

size: Size of the IV

source: The source of the IV. The source can be MCRYPT_RAND (system random number generator),
MCRYPT_DEV_RANDOM (read data from /dev/random) and MCRYPT_DEV_URANDOM (read data from /dev/urandom).

Prior to 5.3, only MCRYPT_RAND was the only one supported on windows.

The default was MCRYPT_DEV_RANDOM prior to 5.6

Note: the MCRYPT_DEV_RANDOM may block until more entropy is available

Example of usage:

<?php
	$size = mcrypt_get_iv_size(MCRYPT_CAST_256, MCRYPT_MODE_CFB);
	$iv = mcrypt_create_iv($size, MCRYPT_DEV_RANDOM);
?>

What follows, is an exert, of a comment, regarding Block Ciphers:

Block Ciphers, at their core, are a pair of transformation algorithms, called transforms. One encrypts, one decrypts.
In some cases, the algos are one and the same - but that is not important. A block transform takes a fixed-length
block of plaintext, transforms it using a secret key of some chosen size, and produces an identical-length
block of ciphertext. Or, of course, vice versa (decryption).

The security model of a block cipher is, simplistically at least, defined to be "if you encrypt one block
of plaintext with a randomly chosen key, it will be computationally infeasible for an attacker with knowledge
of only the ciphertext (i.e he does not know the key) to discover information about the contents of the plaintext."

The reality is slightly different, there are also clauses around knowing part of the plaintext and not being able to
discover any more of it - but that is another story.

Once you start encrypting more than one block of plaintext using teh same block transform and the same key, all
bets are off. In the Electronic Codebook (ECB) cipher mode, each block of plaintext is independantly transformed
using the same key. This leads to a problem: identical plaintext blocks produce identical ciphertext blocks,
when the same key is used.

This means that "patterns" in the data can be seen, especially in data formats that have repeating patterns
or long sequences of identical data. This is best described visually, with an ECB-encrypted bitmap.
See the Wikipedia article on ECB for a demonstration of this.

In order to fix this, cryptographers came up with a set of algorithms that, by mathematical proof,
and with certain caveats, allow for multiple block transformations to be securely performed with
the same key, without running into the problems of ECB.

One such mode is Cipher Block Chaining (CBC). In CBC mode, each plaintext block is first xor'ed with the
previous ciphertext block, before being transformed by the block cipher. This causes a chaining effect,
whereby the contents of all the previous blocks chain togher to ensure that repeating sequences no longer
produce equal blocks of plaintext.

There are two problems here: Since this depends on a earlier text to be xor'ed upon, we in our instance have
to for example use an IV, to xor it.

And the problem remains of that if we apply it to two identical messages, it will still produce the same
ciphertexts. Which means, we have to use the IV.

An IV is always, for the purposes of every block cipher i know of, the same size as a block. Its one
true requirement is that it is unique, but in most cases it is also required to be unpredictable
(i.e randomly chosen). It does not need to be secret - in fact the whole point is that it needs to be
known at the time of decryption.

The IV essentialy acts as a salt value, ensuring that even if two identical messages are encrypted
with the same key, they would still produce entirely different ciphertexts as long as a unique IV
was used for each. The IV must be unique per key, i.e for any set of encryption operations using
the same key, there must never be two operations performed with the same IV.

One problem with CBC is that it suffers from a property called malleability. A cipher is considered
malleable when an attacker can modify the ciphertext message in some way in order to produce a useful
and calculable change in the plaintext upon decryption, without the attacker ever knowing the key.

In this case, if you transmit your message as C = IV | E(M, k, IV), the attacker might change IV.
Upon decryption this affects only the first block, as all other blocks' so-called previous blocks
are part of the ciphertext.

If you xor the IV with some known value, the first block's plaintext also gets xor'ed with that
known value. So, if you know that the first block says "Attack the Elvish house at dawn", you might
xor the last 5 bytes of the IV with 0x0A0E180000, so that it now decrypts to "Attack the Elvish
house at noon". This problem also exists in other blocks: it is possible to mess with the plaintext
of any block as long as you do not care that it will completely trash the previous plaintext block.

This DOES NOT mean that you should encrypt or obfuscate your IV - doing so would be an exercise 
in futility. Instead, you should apply an authenticity check. Block ciphers are all about confidentiality,
they do not ensure integrity.

You need to perform an integrity check yourself, and verify that the information was not tampered with.
This is where an algo such as HMAC comes in.

HMAC is a way of turning a hash algo such as SHA256 into an authenticity check. Whereby a normal
hash is constructed as h = H(m), a HMAC computation is constructed as h = HMAC(m, k), where k is a
secret key. If two parties are the only people who know the secret key, an attacker cannot forge
the HMAC hash.

For example, Alice computes h = HMAC("Hello", k) on a message, then appends h to the message and 
transmit it. Bob then recives the message, computes HMAC(m , k) on the received message m, and
compares the result to the hash appended to the message. If they match, he knows that the message
was not tampered with.

This trick can be used to ensure the malleability attacks don't work. You encrypt a message using
AES-CBC or some other strong construction, append the IV to that message, then compute the HMAC 
hash of that entire blob and transmit it alongside. 

On the other end, the HMAC hash is verified, then decryption occurs. This way, the neither 
the message nor the IV can be tampered with in the transit.

One note to make is that it is good practice to use independent keys for encryption and authenticity.
This, at minimum, ensures that any break in one algorithm does not affect the other.

There are also two books on Cryptography, such as Practical Cryptography by Bruce Scheiner, as well
as Cryptography Engineering by Niels Ferguson.

mcrypt_decrypt:

Decrypts crypttext with given params

string mcrypt_decrypt ( string $cipher , string $key , string $data , string $mode [, string $iv ] )

Decrypts the data and returns the unecrypted data.

Params:

cipher: one of the MCRYPT_ciphername constants, or the name of the algorithm as a string

key: The key with which the data was encrypted. If the provided key size is not supported by the
cipher, the function will emit a warning and return false.

data: The data that will be decrypted with the given cipher and mode. If the size of the data 
is not n * blocksize, the data will be padded with '\0'.

mode: One of the MCrypt_MODE_modename constants, or one of the following strings: "ecb", "cbc",
"ofb", "nofb", or "stream".

iv: Used for the initialization in CBC, CFB, OFB modes and in some algorithms in STREAM mode.
If the provided IV size is not supported by the chaining mode or no IV was provided, but the
chaining mode requires one, the function will emit a warning and return false.

It is the return string that is padded with '\0'

The string does not end at nulls. And this can cause issues when passing further the string.
One solution, is to trim away the nulls:

<?php
	$retval = mcrypt_decrypt( ...etc... );
	$retval = rtrim($retval, "\0"); //trim ONLY the nulls at the END
?>

mcrypt_decrypt may also return unwanted whitespace, so again, trim it.

There may also incur ASCII 4 EOF, which is signed with \4, thus, we can
add that to the rtrim to remove.

mcrypt_enc_get_algorithms_name:

Returns the name of the opened algorithm

string mcrypt_enc_get_algorithms_name ( resource $td )

This function returns the name of the algorithm.

Example of usage:

<?php
$td = mcrypt_module_open(MCRYPT_CAST_256, '', MCRYPT_MODE_CFB, '');
echo mcrypt_enc_get_algorithms_name($td). "\n";

$td = mcrypt_module_open('cast-256', '', MCRYPT_MODE_CFB, '');
echo mcrypt_enc_get_algorithms_name($td). "\n";
?>

The above outputs:

CAST-256
CAST-256

This may return duplicate items in the array. To this, there is the PHP functions which allocates
a unique assertion of each element (only one may be present):

array_unique(<whatever list we want to have be unique>)

mcrypt_enc_get_block_size:

Returns the blocksize of the opened algorithm.

int mcrypt_enc_get_block_size ( resource $td )

Gets the blocksize of the opened algo

mcrypt_enc_get_iv_size:

Returns the size of the IV of the opened algo

int mcrypt_enc_get_iv_size ( resource $td )

This function returns the size of the IV of the algorithm specified
by the encryption descriptor in bytes. An IV is used in cbc, cfb and
ofb modes, and in some algos in stream mode.

mcrypt_enc_get_key_size:

Returns the maximum supported keysize of the opened mode

int mcrypt_enc_get_key_size ( resource $td )

Gets the maximum supported key size of the algo in bytes

mcrypt_enc_get_modes_name:

Returns the name of the opened mode

string mcrypt_enc_get_modes_name ( resource $td )

Example of usage:

<?php
$td = mcrypt_module_open (MCRYPT_CAST_256, '', MCRYPT_MODE_CFB, '');
echo mcrypt_enc_get_modes_name($td). "\n";

$td = mcrypt_module_open ('cast-256', '', 'ecb', '');
echo mcrypt_enc_get_modes_name($td). "\n";
?>

The above outputs:

CFB

ECB

mcrypt_enc_get_supported_key_sizes:

Returns an array with the supported keysizes of the opened algo

array mcrypt_enc_get_supported_key_sizes ( resource $td )

Returns an array with the key sizes supported by the algorithm specified by the 
encryption descriptor. If it returns an empty arra then all key sizes between 1
and mcrypt_enc_get_key_size() are supported by the algo.

Example of usage:

<?php
	$td = mcrypt_module_open('rijndael-256', '', 'ecb', '');
	var_dump(mcrypt_enc_get_supported_key_sizes($td));
?>

The above outputs an associative array of sizes supported.

mcrypt_enc_is_block_algorithm_mode:

Checks whether the encryption of the opened mode works on blocks

bool mcrypt_enc_is_block_algorithm_mode ( resource $td )

Tells whether the algo of the opened mode works on blocks (e.g FALSE for stream,
and TRUE for cbc, cfb, ofb)

mcrypt_enc_is_block_algorithm:

Checks whether the algo of the opened mode is a block algo

bool mcrypt_enc_is_block_algorithm ( resource $td )

Tells whether the algo of the opened mode is a block algo

mcrypt_enc_is_block_mode:

Checks whether the opened mode outputs blocks

bool mcrypt_enc_is_block_mode ( resource $td )

Tells whether the opened mode outputs blocks (e.g TRUE for cbc and ecb,
and FALSE for cfb and stream).

mcrypt_enc_self_test:

Runs a self test on the opened module

int mcrypt_enc_self_test ( resource $td )

This function runs the self test on teh algo specified by the
descriptor td

mcrypt_encrypt:

Encrypts plaintext with given params

string mcrypt_encrypt ( string $cipher, string $key, string $data, string $mode [, string $iv ] )

Encrypts the data and returns it

Example of usage:

<?php
	# Encryption

	# the key should be random binary, use scrypt, bcrypt or PBKDF2 to
	# convert a string into a key 
	# key is specified using hexadecimal
	$key = pack('H*', "bcb04b etc...");

	# show key size use either 16, 24, 32 byte keys for AES-128, 192.
	# and 256 respectively
	$key_size = strlen($key);
	echo "Key size: " . $key_size . "\n";

	$plaintext = "This string was AES-256 / CBC / ZeroBytePadding encrypted.";

	#Create a random IV to use with CBC encoding
	$iv_size = mcrypt_get_iv_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_CBC);
	$iv = mcrypt_create_iv($iv_size, MCRYPT_RAND);

	# Creates a cipher text compatible with AES (Rijndael block size = 128)
	# to keep the text confidential
	# only suitable for encoded input that never ends with value 00h
	# (because of default zero padding)
	$ciphertext = mcrypt_encrypt(MCRYPT_RIJNDAEL_128, $key,
								$plaintext, MCRYPT_MODE_CBC, $iv);

	# prepend the IV for it to be avaialble for decryption
	$ciphertext = $iv . $ciphertext;

	# Encode the resulting cipher text so it can bre rpesented by a string
	$ciphertext_base64 = base64_encode($ciphertext);

	echo $ciphertext_base64 . "\n";

	# WARNING
	# Resulting cipher text has no integrity or authenticity
	# added and is not protected against padding oracle attacks

	# DEcryption

	$ciphertext_dec = base64_decode($ciphertext_base64);

	# retrieves the IV, iv_size should be created using mcrypt_get_iv_size()
	$iv_dev = substr($ciphertext_dec, 0, $iv_size);

	#retrives the cipher text (everything except the $iv_size in the front)
	$ciphertext_dec = substr($ciphertext_dec, $iv_size);

	# may remove 00h valued chars from end of plain text
	$plaintext_dec = mcrypt_decrypt(MCRYPT_RIJNDAEL_128, $key,
									$ciphertext_dec, MCRYPT_MODE_CBC, $iv_dec);

	echo $plaintext_dec . "\n";
?>

The above outputs:

Key size: 32
<key>
This string was AES-256 / CBC / ZeroBytePadding encrypted.

Couple of notes:

OpenSSL leverages AES-NI on modern processors and is cache-timing safe.

MCRYPT_RIJNDAEL_256 is not AES-256, it is a different variant of the Rijndael block Cipher.
If you want AES-256 in mcrypt, you have to use MCRYPT_RIJNDAEL_128 with a 32-byte key.
OpenSSL makes it more obvious which mode you are using (i.e 'aes-128-cbc' vs 'aes-256-ctr')

OpenSSL also uses PKCS7 padding with CBC mode rather than mcrypt's NULL byte padding.
Thus, mcrypt is more likely to make your code vurnable to padding oracle attacks 
compared to OpenSSL.

Also, we should authenticate our ciphertexts, Encrypt then MAC.

Also, further notes on the functioning of stuff:

Solving 3DES incompabilities with .NET's TripleDESCryptoServiceProvider

mcrypt's 3DES only accepts 192 bit keys, but Microsoft's .NET and many other tools
accept both 128 and 192 bit keys. If your key is too short, mcrypt will "Helpfully"
pad null characters onto the end, but .NET refuses to use a key where the last
third is all null (this is a Bad Key).

This prevents you from emulating mcrypt's "short key" behaviour in .NET.

How to reconcile this? A little DES theory is in order
3DES runs the DES algorithm three times, using each third of your 192 bit keys
as the 64 bit DES key

Encrypt Key1 -> Decrypt key2 -> Encrypt key3

and both .NET and PHP's mcrypt do this the same way.
The problem arises in short key mode on .NET, since 128 bits is only
two 64 bit DES keys.

The algorithm that they use the nis:

Encrypt key1 -> Decrypt key2 -> Encrypt key1

Mcrypt does not have this mode of operation natively
but before you go and start running DES three times yourself, here is a quick fix:

<?php
$my_key = "12345678acbdefgh"; //a 128 bit (16 byte) key
$my_key .= substr($my_key,0,8); //append the first 8 bytes onto the end
$secret = mcrypt_encrypt(MCRYPT_3DES, $my_key, $data, MCRYPT_MODE_CBC, $iv); //CBC is the default mode in .NET
?>

There is one more caveat, Data padding:

mcrypt always pads data with the null char
but .NET has two padding modes: "Zeros" and "PKCS7"
Zeros is identical to the mcrypt scheme, but PKCS7 is the default.

PKCS7 is not much more complex, though:
instead of nulls, it appends the total number of padding bytes (which means, for 3DES, it can 
be a value from 0x01 to 0x07)

if your plaintext is "ABC", it will be padded into:
0x41 0x42 0x43 0x05 0x05 0x05 0x05

You can remove these from a decrypted string in PHP by counting the number of times
that last char appears, and if it matches its ordinal value, truncating the string
by that many chars:

<?php
	$block = mcrypt_get_block_size('tripledes', 'cbc');
	$packing = ord($text{strlen($text) - 1});
	if($packing and ($packing < $block)){
		for($P = strlen($text) - 1; $P >= strlen($text) - $packing; $P--){
			if(ord($text{$P}) != $packing){
				$packing = 0;
			}
		}
	}
	$text = substr($text,0,strlen($text) - $packing);
?>

And to pad a string that you intend to decrypt with .NET, just add the chr()
value of the number of padding bytes:

<?php
	$block = mcrypt_get_block_size('tripledes', 'cbc');
	$len = strlen($dat);
	$padding = $block - ($len % $block);
	$dat .= str_repeat(chr($padding),$padding);
?>

To achieve authenticity checks, we can do so by three methods, Encrypt-then-MAC (EtM)
Encrypt-and-MAC (E&M), MAC-then-Encrypt (MtE).

The following is a suggestion for MtE:

<?php
	
	public static function getMacAlgoBlockSize($algorithm = 'sha1')
	{
		switch($algorithm)
		{
			case 'sha1':
			{
				return 160;
			}
			default:
			{
				return false;
				break;
			}
		}
	}

	public static function decrypt($message, $key, $mac_algorithm = 'sha1',
										$enc_algorithm = MCRYPT_RIJNDAEL_256, $enc_mode = MCRYPT_MODE_CBC)
	{
		$message = base64_decode($message);
		$iv_size = mcrypt_get_iv_size($enc_algorithm, $enc_mode);

		$iv_dec = substr($message, 0, $iv_size);
		$message = substr($message, $iv_size);

		$message = mcrypt_decrypt($enc_algorithm, $key, $message, $enc_mode, $iv_dec);

		$mac_block_size = ceil(static::getMacAlgoBlockSize($mac_algorithm)/8);
		$mac_dec = substr($message, 0, $mac_block_size);
		$message = substr($message, $mac_block_size);

		$mac = hash_hmac($mac_algorithm, $message, $key, true);

		if($mac_dec == $mac)
		{
			return $password;
		}
		else
		{
			return false;
		}
	}

	public static function encrypt($message, $key, $mac_algorithm = 'sha1',
										$enc_algorithm = MCRYPT_RIJNDAEL_256, $enc_mode = MCRYPT_MODE_CBC)
	{
		$mac = hash_hmac($mac_algorithm, $message, $key, true);
		$mac = substr($mac, 0, ceil(static::getMacAlgoBlockSize($mac_algorithm)/8));
		$message = $mac . $message;

		$iv_size = mcrypt_get_iv_size($enc_algorithm, $enc_mode);
		$iv = mcrypt_create_iv($iv_size, MCRYPT_RAND);

		$ciphertext = mcrypt_encrypt($enc_algorithm, $key,
									$message, $enc_mode, $iv);

		return base64_encode($iv . $ciphertext);
	}
?>


The IV must be the same for encryption and decryption in terms of mcrypt, otherwise 
corruption of data occurrs.

mcrypt_generic_deinit:

This function deinitializes an encryption module

bool mcrypt_generic_deinit ( resource $td )

This function terminates encryption specified by the encryption descriptor (td).
It clears all buffers, but does not close the module. You need to call mcrypt_module_close()
yourself.

But PHP does this for you, at the end of the script.

mcrypt_generic_end:

mcrypt_generic_deinit() should be used instead of this function, as it can cause
crashes when used with mcrypt_module_close() due to multiple buffer frees.

This function, has been removed and is deprecated in 5.6

mcrypt_generic_init:

This function initializes all buffers needed for encryption

int mcrypt_generic_init ( resource $td , string $key , string $iv )

You need to call this function before every call to mcrypt_generic() or
mdecrypt_generic()

Params:

td: The encryption descriptor

key: The max length of the key should be the one obtained by calling mcrypt_enc_get_key_size()
and every value smaller than this is legal.

iv: The IV should normally have the size of the algorithms block size, but you must obtain
the size by calling mcrypt_enc_get_iv_size(). IV is ignored in ECB. IV MUST exist in CFB,
CBC, STREAM, nOFB and OFB modes.

It needs to be random and unique (but not secret). The same IV must be used for encryption/decryption.
If you do not want to use it you should set it to zeros, but this is recommended.

Return values:

The function returns a negative value on error: -3 when the key length was incorrect, -4 when
there was a memory allocation problem and any other return value is an unknown error.

If an error occurs, a warning will be displayed accordingly. FALSE is returned if incorrect
params were passed.

The mcrypt impl. of RC2 algo supports an effective key length of 1024 bits only.
It is however possible to use an effective key length in 1..1024 bits, by transforming the key
before use as follows:

<?php

function transformKey($key, $effKeyLen)

{
	$pitable = array(
		0xD9 //Tons of hexadecimal values go here);
	$invpitable = array_flip($pitable);

	//Apply the regular RC2 key expansion algorithm
	$t = strlen($key);
	$key = array_values(unpack('C*C', $key));

	for ($i = $t; $i < 128; $i++)
		$key[$i] = $pitable[($key[$i - 1] + $key[$i - $t]) & 0xFF];

	$t8 = ($effKeyLen + 7) >> 3;
	$tm = 0xFF >> (8 * $t8 - $effKeyLen);
	$i = 128 - $t8;

	$key[$i] = $pitable[$key[$i] & $tm];

	while ($i--)
		$key[$i] = $pitable[$key[$i + 1] ^ $key[$i + $t8]];

	// MAp the first byte: this operation will be undone by
	// mcrypt internals.
	$key[0] = $invpitable[$key[0]];

	//Return the transformed key as a string.
	array_unshift($key, 'C*');
	return call_user_func_array('pack', $key);
}

// Usage example
$r = mcrypt_module_open(MCRYPT_RC2, $algoDir, $mode, $modeDir);
mcrypt_generic_init($r, transformKey($originalKey, $effectiveKeyLength), $iv);

?>

mcrypt_generic:

This function ecrypts data

string mcrypt_generic ( resource $td , string $data )

This function ecrypts data. The data is padded with "\0" to make sure the length of the data
is n * blocksize. This function returns the encrypted data. Note that the length of the returned
string can in fact be longer than the input, due to the padding of the data.

If you want to store the encrypted data in a database make sure to store the entire string 
as returned by mcrypt_generic, or the string will not entirely decrypt properly.

If your original string is 10 chars long and the block size is 8 (use mcrypt_enc_get_block_size()
to determine the blocksize), you would need at least 16 chars in your db field. Note that the 
string returned by mdecrypt_generic() will be 16 chars as well.. use rtrim($str, "\0") to remove
the padding.

If you are for example storing the data in a MySQL db, remember that varchar fields automatically
have the trailing spaces removed during insertion. As encrypted data can end in a space (ASCII 32),
the data will be damaged by this removal.

Store data in a tinyblob/tinytext (or larger) field instead.

params:

td: The encryption descriptor.

The encryption handle should always be initialized with mcrypt_generic_init() with a key and an
IV before calling this function. Where the encryption is done, you should free the encryption
buffers by calling mcrypt_generic_deinit(). See mcrypt_module_open() for an example.

data: The data to encrypt.

If you post a cookie w/ HTTP method, it may be encoded.
As some chars in base64 will be encoded to another thing, you can just replace
them before encode and decode.

Example of usage:

<?php
function urlsafe_b64encode($string)
{
	$data = base64_encode($string);
	$data = str_replace(array('+', '/', '='),array('-','_', '.'),$data);
	return $data;
}
function urlsafe_b64decode($string)
{
	$data = str_replace(array('-', '_', '.'),array('+','/', '='),$string);
	$mod4 = strlen($data) % 4;
	if ($mod4) {
		$data .= substr('===', $mod4);
	}
	return base64_decode($data);
}
?>

As for another situation:

If you wish to store encrypted data in a cookie variable on the browser you will encounter
problems when decrypting the data. This is because cookies will only store US-ASCII chars 
and your encrypted may contain non-US-ASCII chars.

The solution is to use base64_encoding on our encrypted string before we store it in 
the cookie and base64_decode the string stored in the cookie before decrypting.

Example:

function setEncryptedCookie($cookieName, $data)
{
	setcookie($cookieName, base64_encode($this->encrypt($data)), time()+$this->expire);
}

function getEncryptedCookie($cookieName)
{
	return $this->decrypt(base64_decode($_COOKIE[$cookieName]));
}

If the data is already n*blocksize long, PHP pads with another full block of "\0",
so there will be between 1 and mcrypt_enc_get_block_size($td) bytes of padding.

You can create binary-safe padding by unconditionally adding a 0x80 to the string,
then stripping trailing "\0"s PHP added, plus the one 0x80 byte.

<?php
function pad($text) {
	//Add a single 0x80 byte and let PHP pad with 0x00 bytes
	return pack("a*H2", $text, "80");
}
function unpad($text) {
	//Return all but the trailing 0x80 from text that had the 0x00 bytes removed
	return substr(rtrim($text, "\0"), 0, -1);
}
?>

mcrypt_get_block_size:

Gets the block size of the specified cipher

int mcrypt_get_block_size ( int $cipher )

int mcrypt_get_block_size ( string $cipher , string $mode )

The first prototype is when linked against libmcrypt 2.2.x, the second when linked against
libmcrypt 2.4.x or 2.5.x

mcrypt_get_block_size() is used to get the size of a block of the specified cipher
(in combination with an encryption mode)

It is more useful to use the mcrypt_enc_get_block_size() function as this uses the
resource returned by mcrypt_module_open()

Params:

cipher: One of the MCRYPT_ciphername constants or the name of the algorithm as string

mode: One of the MCRYPT_MODE_modename constants or one of the following strings :"ecb",
"cbc", "cfb", "ofb", "nofb", or "stream".

An example of how to use this function when linked against libmcrypt 2.4.x and 2.5.x:

<?php

echo mcrypt_get_block_size('tripledes', 'ecb'); //8

?>

The block size is returned in BYTES, not bits. 

mcrypt_get_cipher_name:

Gets the name of the specified cipher

string mcrypt_get_cipher_name ( int $cipher )

string mcrypt_get_cipher_name ( string $cipher )

mcrypt_get_cipher_name() is used to get the name of the specified cipher.

mcrypt_get_cipher_name() takes the cipher number as an arg (libmcrypt 2.2.x) or takes the cipher
as an argument (libmcrypt 2.4.x or higher) and returns the name of the cipher or FALSE, if the
cipher does not exist.

Params:

cipher: One of the MCRYPT_ciphername constants or the name of the algorithm as string.

example of usage:

<?php
	$cipher = MCRYPT_TripleDES;

	echo mcrypt_get_cipher_name($cipher);
?>

The above outputs:

3DES

mcrypt_get_iv_size:

Returns the size of the IV belonging to a specific cipher/mode combination

int mcrypt_get_iv_size ( string $cipher , string $mode )

Gets the size of the IV belonging to a specific cipher/mode combination.

It is more useful to use the mcrypt_enc_get_iv_size() function as this uses
the resource returned by mcrypt_module_open().

Params:

cipher: One of the MCRYPT_ciphername constants, or the name of the algo as string

mode: One of the MCRYPT_MODE_modename constants, or one of the following strings:
"ecb", "cbc", "cfb", "ofb", "nofb" or "stream".

The IV is ignored in ECB mode as this does not require it. You will need to have
the same IV (think starting point) both at encryption and decryption stages,
otherwise your encryption will fail.

Returns the size of the Initialization Vector (IV) in bytes. On error the function
returns FALSE. if the IV is ignored in the specified cipher/mode combination
zero is returned.

Example of usage:

<?php
	echo mcrypt_get_iv_size(MCRYPT_CAST_256, MCRYPT_MODE_CFB) . "\n";

	echo mcrypt_get_iv_size('des', 'ecb') . "\n";
?>

mcrypt_get_key_size:

Gets the key size of the specified cipher

int mcrypt_get_key_size ( int $cipher )

int mcrypt_get_key_size ( string $cipher , string $mode )

The first prototype is when linked against libmcrypt 2.2.x, the second when 
linked against libmcrypt 2.4.x or 2.5.x

mcrypt_get_key_size() is used to get the size of a key of the specified cipher (in combination
with an encryption mode)

It is more useful to use the mcrypt_enc_get_key_size() function as this uses resource
returned by mcrypt_module_open()

Params:

cipher: One of the MCRYPT_ciphername constants, or the name of the algorithm as string

mode: One of the MCRYPT_MODE_modename constants, or one of the following strings: "ecb",
"cbc", "cfb", "ofb", "nofb", or "stream"

Returns the maximum supported key size of the algo in bytes or False on failure

Example of usage:

<?php
	echo mcrypt_get_key_size('tripledes', 'ecb');
?>

The example above is showcasing for the version of libmcrypt 2.4.x or 2.5.x

The above will output:

24

mcrypt_list_algorithms:

Gets an array of all supported ciphers

array mcrypt_list_algorithms ([ string $lib_dir = ini_get("mcrypt.algorithms_dir") ] )

Gets the list of all supported algorithms in the lib_dir parameter.

Params:

lib_dir: Specifies the directory where all algorithms are located. If not specified, the value
of the mcrypt.algorithms_dir php.ini is used.

Example of usage:

<?php
	$algorithms = mcrypt_list_algorithms("/usr/local/lib/libmcrypt");

	foreach ($algorithms as $cipher) {
		echo "$cipher<br />\n";
	}
?>

The example above will produce a list with all supported algorithms in the
"/usr/local/lib/libmcrypt" dir.

mcrypt_list_modes:

Gets an array of all supported modes

array mcrypt_list_modes ([ string $lib_dir = ini_get("mcrypt.modes_dir") ] )

gets the list of all supported modes in the lib_dir param.

Params:

lib_dir: Specifies the directory where all modes are located. If not specified, the value of 
the mcrypt.modes_dir php.ini directive is used.

Example of usage:

<?php
	$modes = mcrypt_list_modes();

	foreach ($modes as $mode) {
		echo "$mode <br />\n";
	}
?>

The example above will produce a list with all supported algorithms in the default mode directory.
If it is not set with the mcrypt.modes_dir php.ini directive, the default directory of mcrypt is used
(which is /usr/local/lib/libmcrypt)

mcrypt_module_close:

Closes the mcrypt module

bool mcrypt_module_close ( resource $td )

Closes the specified encryption handle

Params:

td: The encryption descriptor

mcrypt_module_get_algo_block_size:

Returns the blocksize of the specified algorithm

int mcrypt_module_get_algo_block_size ( string $algorithm [, string $lib_dir ] )

gets the blocksize of the specified algorithm

Params: 

Algorithm: the algo name

lib_dir: This optional param can contain teh location where the mode module is on the system

mcrypt_module_get_algo_key_size:

Returns the maximum supported keysize of the opened mode

int mcrypt_module_get_algo_key_size ( string $algorithm [, string $lib_dir ] )

Gets the maximum supported keysize of the opened mode.

params:

algorithm: The algorithm name

lib_dir: This optional parameter can contain the location where the mode module is on the system.

mcrypt_module_get_supported_key_sizes:

Returns an array with the supported keysizes of the opened algorithm

array mcrypt_module_get_supported_key_sizes ( string $algorithm [, string $lib_dir ] )

Returns an array with the key sizes supported by the specified algorithm. If it returns 
an empty array then all key sizes between 1 and mcrypt_module_get_algo_key_size()
are supported by the algorithm.

Params:

algorithm: The algorithm to be used.

lib_dir: The optional lib_dir parameter can contain the location where the algo module is on
the system.

returns:

Returns an array with the key sizes supported by the specified algo. If it returns an empty array
then all key sizes between 1 and mcrypt_module_get_algo_key_size() are supported by the algo.

An example of listing available encryption algos and keysizes:

<?php
$cipher_dir = "/usr/local/lib/libmcrypt";
$algorithms = mcrypt_list_algorithms($cipher_dir);
echo "<html><head></head><body><table><tr>\n";

foreach ($algorithms as $cipher) {
	echo "<td>" . $cipher . "</td><td>";
	$ksizes = mcrypt_module_get_supported_key_sizes($cipher, $cipher_dir);
	if($ksizes==NULL) echo mcrypt_module_get_algo_key_size($cipher, $cipher_dir);
	else foreach ($ksizes as $size) {
		echo $size . " ";
	}
	echo "</td></tr>\n";
}
echo "</table></body></html>\n";
?>

mcrypt_module_is_block_algorithm_mode:

Returns if the specified module is a block algorithm or not

bool mcrypt_module_is_block_algorithm_mode ( string $mode [, string $lib_dir ] )

This function returns TRUE if the mode for use with block algos, otherwise it returns FALSE.
(e.g FALSE for stream, and TRUE for cbc, cfb, ofb)

Params:

mode: The mode to check

lib_dir: The optional lib_dir parameter can contain the location where the 
algorithm module is on the system

mcrypt_module_is_block_algorithm:

This function checks whether the specified algo is a block algo

bool mcrypt_module_is_block_algorithm ( string $algorithm [, string $lib_dir ] )

This function returns TRUE if the specified algo is a block algo, or FALSE if
it is a stream one.

Params:

algorithm: The algorithm to check

lib_dir: The optional lib_dir param can contain the location where the algo module is
on the system.

mcrypt_module_is_block_mode:

Returns if the specified mode outputs blocks or not

bool mcrypt_module_is_block_mode ( string $mode [, string $lib_dir ] )

This function returns true if the mode outputs blocks of bytes or FALSE if it 
outputs just bytes (e.g TRUE for cbc and ecb, and FALSE for cfb and stream).

Params:

mode: One of the MCRYPT_MODE_modename constants, or one of the following strings: "ecb", "cbc", "ofb", "nofb",
or "stream".

lib_dir: The optional lib_dir parameter can contain the location where the algorithm module is on the system.

mcrypt_module_open:

Opens the module of the algorithm and the mode to be used

resource mcrypt_module_open ( string $algorithm , string $algorithm_directory , string $mode, string $mode_directory )

This function opens the module of the algorithm and the mode to be used. The name of the algorithm
is specified in algorithm, e.g. "twofish" or is one of the MCRYPT_ciphername constants. The module is
closed by calling mcrypt_module_close().

Params:

algo: One of the MCRYPT_ciphername constants or the name of the algo as a string

algorithm_directory: The algo_dir param is used to locate the encryption module. When you supply a directory name,
it is used. When you set it to an empty string (""), the value set by the mcrypt.algorithms_dir php.ini
directive is used. When it is not set, the default directory that is used is the one that was compiled-in
into libmcrypt (usually /usr/local/lib/libmcrypt)

Examples of usage:

<?php
	$td = mcrypt_module_open(MCRYPT_DES, '',
		MCRYPT_MODE_ECB, '/usr/lib/mcrypt-modes');

	$td = mcrypt_module_open('rijndael-256', '', 'ofb', '');
?>

The first line in the example above will try to open the DES cipher from the default dir
and the ECB mode from the dir /usr/lib/mcrypt-modes. The second example uses strings as
name for tthe cipher and mode, this only works when the extension is linked against
libmcrypt 2.4.x or 2.5.x

As for an example of using mcrypt_module_open() in encryption:

<?php
	//Open the cipher
	$td = mcrypt_module_open('rijndael-256', '', 'ofb', '');

	//Create the IV and determine the keysize length, use MCRYPT_RAND
	// on windows instead
	$iv = mcrypt_create_iv(mcrypt_enc_get_iv_size($td), MCRYPT_DEV_RANDOM);
	$ks = mcrypt_enc_get_key_size($td);

	//Create key
	$key = substr(md5('very secret key'), 0, $ks);

	//Initialize encryption
	mcrypt_generic_init($td, $key, $iv);

	//Encrypt data
	$encrypted = mcrypt_generic($td, 'This is very important data');

	//Terminate encryption handler
	mcrypt_generic_deinit($td);

	//initialize encryption module for decryption
	mcrypt_generic_init($td, $key, $iv);

	//decrypt encrypted string
	$decrypted = mdecrypt_generic($td, $encrypted);

	//Terminate decryption handle and close module
	mcrypt_generic_deinit($td);
	mcrypt_module_close($td);

	//Show string
	echo trim($decrypted) . "\n";
?>

Also, it should be pointedo ut, that md5() and/or sha1() should not be used while
forming your key for the mcrypt. This is so because hex encoding uses a set of only
16 chars. [0-9a-f], which is equivalent to 4 bits, and thus halve the strength of
your encryption: 4 x 32 = 128-bit

What follows, is a re-written example showcasing a real 256-bit encryption:

<?php
$key1 = "this is a secret key";
$key2 = "this is the second secret key";
$input = "Let us meet at 9 o' clock at the secret place.";
$length = strlen($input);

//Open the cipher
$td = mcrypt_module_open('rijndael-256', '', 'cbc', '');

//Create the IV and determine the keysize length, use MCRYPT_RAND
// on windows instead
$iv = mcrypt_create_iv(mcrypt_enc_get_iv_size($td), MCRYPT_RAND);
$ks = mcrypt_enc_get_key_size($td);

//Create the key
$key1 = md5($key1);
$key2 = md5($key2);

$key = substr($key1, 0, $ks/2) . substr(strtoupper($key2), (round(strlen($key2) / 2)), $ks/2);

$key = substr($key.$key1.$key2.strtoupper($key1),0,$ks);

//initialize the encryption
mcrypt_generic_init($td, $key, $iv);

//Encrypt data
$encrypted = mcrypt_generic($td, $input);

//Terminate encryption handler
mcrypt_generic_deinit($td);

//Initialize encryption module for decryption
mcrypt_generic_init($td, $key, $iv);

//Decrypt encrypted string
$decrypted = mdecrypt_generic($td, $encrypted);

//Terminate decryption handle and close module
mcrypt_generic_deinit($td);
mcrypt_module_close($td);

//SHow string
echo "Text: ".substr($decrypted,0,$length) . "<br>";
echo "Encoded: ".$encrypted ."<br>";
echo "<br>key1: $key1 <br>key2: $key2<br>created key: $key";

?>

For errors akin to ' mcrypt_module_open(): Could not open encryption module in '

Make sure to use the right name. In order to see which ones are supported,
use phpinfo() and look for something akin to:

mcrypt support => enabled
mcrypt_filter support => enabled
Version => 2.5.8
Api No => 20021217
Supported ciphers => cast-128 gost rijndael-128 twofish arcfour cast-256 loki97 rijndael-192 saferplus wake blowfish-
compat des rijndael-256
serpent xtea blowfish enigma rc2 tripledes
Supported modes => cbc cfb ctr ecb ncfb nofb ofb stream

Also, it is a choice to be limited to only hex characters ([0-9a-z]); you can get the 
original RAW output from md5() or sha1() and not the default readable hex formatting.

The result of a raw output will be 16 or 20 (depending on the hash function being used) series
of chars in the range 0-255. way better than [0-9a-z] and even [0-9a-zA-Z]

16 or 20 is generally lower than the maximum key length ($ks in the example), but you can append
two or more keys together:

<?php
$human_key1 = 'something very secret';
$human_key2 = 'something else very secret';

// 40 bytes binary key using two "human readable" keys and sha1.
$bigger_binary_key = sha1($human_key1, true) . sha1($human_key2, true);

//then just use it as you would (extract taken from the example)
$key = substr($bigger_binary_key, 0, $ks);
?>

Or you can automatically split one larger "human key" into two ore more parts,
hash those parts with sha1 (raw output) and merge them together again (in original
order or rearrange, salt, transform them as you like) to get a binary key of 
40, 60, 80 or more chars depending on the number of parts the secret key has 
been split into.

mcrypt_module_self_test:

This function runs a self test on the specified module

bool mcrypt_module_self_test ( string $algorithm [, string $lib_dir ] )

This function runs the self test on the algorihtm specified.

Params:

algorithm: One of the MCRYPT_ciphername constants or the name of the algo as a string

lib_dir: The optional lib_dir param can contain the location where the algo module 
is on the system.

Example of usage:

<?php
var_dump(mcrypt_module_self_test(MCRYPT_RIJNDAEL_128)) . "\n";
var_dump(mcrypt_module_self_test(MCRYPT_BOGUS_CYPHER));
?>

Outputs:

bool (true)
bool (false)

mdecrypt_generic:

Decrypts data

string mdecrypt_generic ( resource $td , string $data )

This function decrypts data. Note that hte length of the returned string can in fact be
longer than the unencrypted string, due to the padding of the data.

Params:

td: An encryption desc returned by mcrypt_module_open()

data: Encrypted data

example:

<?php
	//Data
	$key = '<a long string>';
	$plain_text = 'very important data';

	//Open module and create the IV
	$td = mcrypt_module_open('des', '', 'ecb', '');
	$key = substr($key, 0, mcrypt_enc_get_key_size($td));
	$iv_size = mcrypt_enc_get_iv_size($td);
	$iv = mcrypt_create_iv($iv_size, MCRYPT_RAND);

	//Initialize encryption handle
	if (mcrypt_generic_init($td, $key, $iv) != -1) {

		//ENcrypt data
		$c_t = mcrypt_generic($td, $plain_text);
		mcrypt_generic_deinit($td);

		//Reinitialize buffers for decryption
		mcrypt_generic_init($td, $key, $iv);
		$p_t = mdecrypt_generic($td, $c_t);

		//Clean up
		mcrypt_generic_deinit($td);
		mcrypt_module_close($td);
	}

	if (strncmp($p_t, $plain_text, strlen($plain_text)) == 0) {
		echo "ok\n";
	} else {
		echo "error\n";
	}
?>

The example above shows how to check if the data before the encryption is the same as the data
after the decryption. It is very important to reinitialize the encryption buffer with mcrypt_generic_init()
before you try to decrypt the data.

The decryption handle should always be initialized with mcrypt_generic_init() with a key and an IV before
calling this function. Where the encryption is done, you should free the encryption buffers by calling 
mcrypt_generic_deinit().

See mcrypt_module_open() for an example.

An example of a generalized encrypter/decrypted:

<?php

function cryptare($text, $key, $alg, $crypt)
{
	$encrypted_data="";
	switch($alg)
	{
		case "3des":
			$td = mcrypt_module_open('tripledes', '', 'ecb', '');
			break;
		case "cast-128":
			$td = mcrypt_module_open('cast-128', '', 'ecb', '');
			break;
		case "gost":
			$td = mcrypt_module_open('gost', '', 'ecb', '');
			break;
		case "rijndael-128":
			$td = mcrypt_module_open('rijndael-128', '', 'ecb', '');
			break;
		case "twofish":
			$td = mcrypt_module_open('twofish', '', 'ecb', '');
			break;
		case "arcfour":
			$td = mcrypt_module_open('arcfour', '', 'ecb', '');
			break;
		case "cast-256":
			$td mcrypt_module_open('cast-256', '', 'ecb', '');
			break;
		etc.
		//There is just a long lsting of different case handligns of different algos
	}

	$iv = mcrypt_create_iv(mcrypt_enc_get_iv_size($td), MCRYPT_RAND);
	$key = substr($key, 0, mcrypt_enc_get_key_size($td));
	mcrypt_generic_init($td, $key, $iv);

	if($crypt)
	{
		$encrypted_data = mcrypt_generic($td, $text);
	}
	else
	{
		$encrypted_data = mdecrypt_generic($td, $text);
	}

	mcrypt_generic_deinit($td);
	mcrypt_module_close($td);

	return $encrypted_data;
}
?>

Padding can occur to the strings, to which we may want to remove a certain amount of btyes as per defined in the
RFC 5652.

To remove it, look at the last byte of the messag,e and it will tell you how many bytes to remove.
The amount is represented in hexadecimal, such as \0A (10)

THe padding is PKCS#7 padding.

Sometimes, the padding is not \0 chars (null), but rather control chars.
To which, we can use the following regex for it:

<?php

$data = mdecrypt_generic( $cipher, $data );

//strip trailing control character encoding
$data = preg_replace("/\p{Cc}*$/u", "", $data );

?>

A quick example of removing PCKS7 padding:

<?php
function unpadPKCS7($data, $blockSize) {
	$length = strlen ( $data );
	if ($length > 0) {
		$first = substr ( $data, - 1 );

		if (ord ( $first ) <= $blockSize) {
			for($i = $length - 2; $i > 0; $i --)
				if (ord ( $data [$i] != $first ))
					break;

			return substr ( $data, 0, $i );
		}
	}
	return $data;
}
?>

The above methods belong to the mcrypt lib, which is deprecated. Albeit, the knowledge there in, was of some
use. Some interesting reflections upon which processing of ciphering patterns works.

The same ordeal goes for the following, which is Mhash, which is Obsolete by Hash, But,
the knowledge and processing there of, is still of some use.


What follows, are the functions, of Mhash.

mhash_count:

Gets the highest available hash ID

int mhash_count()

Returns the highest available hash ID. Hashes are numbered from 0 to this hash ID.

Example of traversing all hashes:

<?php

$nr = mhash_count();

for ($i = 0; $i <= $nr; $i++) {
	echo sprintf("The blocksize of %s is %d\n",
		mhash_get_hash_name($i),
		mhash_get_block_size($i));
}
?>

The MHash function mhash_count() returns the higest, evaluated, constant value
representing a hashing algo available within the current MHash install.

For example, 0 indicates CRC32, 1 indicates MD5, 2 indicates SHA1, etc. etc.
You can get the evaluated number for any of these algorithms by doing a print
statement with any of the predefined, MHash constants, such as those available
at respective listings.

The purpose of mhash_count() in MHash is similar to the purpose of hash_algos() in HASH
Digest Framework. Instead of providing an array of available hashing algorithms, it simply
provides the highest, evaluated, constant expression for the Algorithm Constants.

The thinking as indicated in the sample code, is that you will parse a list of mhash
algorithms in a for loop using a condition of "$i <= mhash_count()".

However, there is a problem with that: there are several integers that are skipped in
the listing of evaluated constant expressions. While 2 indicates SHA1, 3 indicates
HAVAL256, etc., there is nothing for the numbers 4 and 6.

They produce blank results when on that line of the for-loop and you are calling
functions like mhash_get_block_size() and inefficiency or lack of security, and the
number-to-predefined-constant setup was not changed to make it backward compatible
with older code.

If we wish to know what accounts for being a good constant and which does not, we can run teh following:

<?php
	
	//Parse all hashing algo
	for($i = 0; $i <= mhash_count(); $i++)
	{
		//Get algo info
		$mhash_algorithm_block_size = mhash_get_block_size($i);
		$mhash_algorithm_name = mhash_get_hash_name($i);

		//Decide on printing algo info
		if(strlen($mhash_algorithm_name) < 1)
		{
			//There is available algo data
			print("# $i --- NO ALGORITHM NAME / NO ALGORITHM BLOCKSIZE .<br><br>");
		}
		else
		{
			//There is NO available Algo data
			print("# $i --- $mhash_algorithm_name to $mhash_algorithm_block_size .<br><br>");
		}
	}
?>

//Sample results

#0 --- CR32 to 4 .

#1 --- MD5 to 16 .

#2 --- SHA1 to 20 .

#3 --- HAVAL256 to 32 .

#4 --- NO ALGORITHM NAME / NO ALGORITHM BLOCKSIZE

#5 --- RIPEMD160 to 20 .

#6 --- NO ALGORITHM NAME / NO ALGORITHM BLOCKSIZE

#7 --- TIGER to 24 .

#8 --- GOST to 32 .

and so on.

mhash_get_block_size:

Gets the block size of the specified hash

int mhash_get_block_size ( int $hash )

Gets the size of a block of the specified hash

Params:

hash: The hash ID. One of the MHASH_hashname constants.

Returns the size in bytes or FALSE, if the hash does not exist.

Example of usage:

<?php

echo mhash_get_block_size(MHASH_MD5); //16

?>

mhash_get_hash_name:

Gets the name of the specified hash

string mhash_get_hash_name ( int $hash )

Gets the name of the specified hash

Params:

hash: The Hash ID. one of the MHASH_hashname constants.

Returns the name of the hash or FALSE, if it does not exist.

Example of usage:

<?php

echo mhash_get_hash_name(MHASH_MD5); //MD5

?>

mhash_keygen_s2k:

Generates a key

string mhash_keygen_s2k ( int $hash , string $password , string $salt , int $bytes )

Generates a key according to the given hash, using a user provided password.

This is the Salted S2K algo as specified in the OpenPGP document (RFC 2440)

Keep in mind that user supplied passwords are not really suitable to be used as keys
in cryptographic algorithms, since users normally choose keys they can write on keyboard.

These passwords use only 6 to 7 bits per character (or less). It is highly recommended
to use some kind of transformation (like this function) to the user supplied key.

Params:

hash: the hash ID used to create the key. One of the MHASH_hashname constnats.

password: An user supplied PW

salt: Must be different and random enough for every key you generate in order to create
different keys. Because salt must be known when you check the keys, it is a good idea to 
append the key to it.

Salt has a fixed length of 8 bytes and will be padded with zer0s if you supply less bytes.

bytes: The key length, in bytes.

Returns the generated key as string, or FALSE On error.

In temrs of having it in pure PHP code, we could do as follows:

<?php

function keygen_s2k($hash, $password, $salt, $bytes)
{
	$result = false;

	if (extension_loaded('hash') === true)
	{
		$times = $bytes / ($block = strlen(hash($hash, null, true)));

		if ($bytes % $block != 0)
		{
			++$times;
		}

		for ($i = 0; $i < $times; ++$i)
		{
			$result .= hash($hash, str_repeat("\0", $i) . $salt . $password, true);
		}
	}

	return $result;
}

?>

mhash:

Computes hash

string mash ( int $hash , string $data [, string $key ] )

mhash() applies a hash function specified by hash to hte data.

Params:

hash: The hash ID. One of the MHASH_hashname constants.

data: The user input, as a string

key: if specified, the function will return the resulting HMAC instead.
HMAC is keyed hashing for message authentication, or simply a message digest
that depends on the specified key.

Not all algorithms supported in mhash can be used in HMAC mode.

Returns the resulting hash (also called digest) or HMAC as a string,
or FALSE on error.

An example of creating a MD5 HMAC, but not having hmash installed:

function hmac ($key, $data)
{
	//RFC 2104 HMAC implementation for php.
	// Creates an md5 HMAC.
	// Eliminates the need to install mhash to compute a HMAC
	// FOK U

	$b = 64; //byte length for md5
	if (strlen($key) > $b) {
		$key = pack("H*",md5($key));
	}

	$key = str_pad($key, $b, chr(0x00));
	$ipad = str_pad('', $b, chr(0x36));
	$opad = str_pad('', $b, chr(0x5c));

	$k_ipad = $key ^ $ipad;
	$k_opad = $key ^ $opad;

	return md5($k_opad . pack("H*",md5($k_ipad . $data)));
}


To test it out, run this on a server with mhash installed:

$key = 'Jefe';
$data = "what do ya want for FOK U";
echo hmac($key, $data);
echo "&lt;br&gt;\n";
echo bin2hex (mhash(MHASH_MD5, $data, $key));

should produce the same hash output.

Also, an example of creating a NTLM hash:

<?php
function ntlm_hash($txt)
{
	$txt = iconv('UTF-8', 'UTF-16LE', $txt);
	$md4 = bin2hex(mhash(MHASH_MD4, $txt));

	return strtoupper($md4);
}

echo ntlm_hash('ClearTextPasswd');
echo "\n";

The MHash function here lists one disclaimer at the top when providing a key to the mhash function:
"Not all algos supported in mhash can be used in HMAC mode". So, what algos blow up and what works,
when doing keyed, HMAC hashing?

The ones that do not work are: Adler32, CRC32, CRC32B, and GOST.

These are the first four, predefined constants listed with the MHash APplication package.
Providing one of these algos with an HMAC key (of string-length greater than one) creates
the following error message: "Warning: mhash() [function.mhash]: mhash initialization failed in [(folder-location)] on line <x>".

If you really want to use these algos in creating your HMAC hashes, the function Hash_hmac() from the HASH-Message Digest
Framework package is capable of doing that perfectly.

Again,that is if the string length is greater than one. Why string length greater than one?
Well, if the key value is blank, it is ignored as a param altogether. So, if you feed the mhash function
an algo that is not compatible with HMAC hashing and an HMAC key that is blank, it will work the same as if
it had received no HMAC key at all.

This is different from the way the Hash_hmac() function of the HASH-MDF works. In the case of the Hash_hmac()
function, feeding a blank HMAC key will use that blank key in generating the HMAC hash.

Even with functions that can do HMAC hashing, like MD5 or SHA1, if the MHash() is given a blank HMac key,
it will ignore the key and just return the results of standard, non-HMAC hashing. It is probably not wise
to use a blank HMAC key anyway, but it is good to know that the hashing algo changes altogether if the
provided HMAC key is blank.

Some example code to demonstrate:

<?php
	
	//preset data
	$string_to_hash = "The hash_hmac() function better to use for these purposes.";
	$blank_hmac_key = "";

	//MHash - Hashing With and Without HMAC Parameter

	$mhash_result_with_hmac_parameter = bin2hex(mhash(MHASH_CRC32, $string_to_hash, $blank_hmac_key));
	$mhash_result_without_hmac_parameter = bin2hex(mhash(MHASH_CRC32, $string_to_hash));

	//MHash hashing with and without HMAC parameter

	$hash_result_with_hmac_parameter = hash_hmac("crc32", $string_to_hash, $blank_hmac_key);
	$hash_result_without_hmac_parmater = hash("crc32", $string_to_hash);

	//Print results
	print("MHASH (CRC32 Algorithm) With Blank HMAC key: $mhash_result_with_hmac_parameter .<br>");
	print("MHASH (CRC32 Algorithm) Without HMAC Processing: $mhash_result_without_hmac_parameter .<br><br>");

	print("HASH (CRC32 Algorithm) With Blank HMAC Key: $hash_result_with_hmac_parameter . <br>");
	print("HASH (CRC32 Algorithm) Without HMAC Processing: $hash_result_without_hmac_parameter .");
?>

THe results are:

MHASH (CRC32 Algorithm) With Blank HMAC Key: f665c094 .
MHASH (CRC32 Algorithm) Without HMAC Processing: f665c094 .

HASH (CRC32 Algorithm) With Blank HMAC Key: 3041f4f8 .
HASH (CRC32 Algorithm) Without HMAC Processing: f665c094 .

Both cryptography packages, the MHash and the HASH Message Digest Framework, have the same algorithms,
and yet, they both go to sometiems produce wildly different results from each other when applying
the same algo to the same piece of data.

The SHA-x algos, as designed by the NSA, all seem to have concrete standards for producing their 
hash values, so they have similar results. Even the two MD5 implementations produce identical
results, and the same goes for Gost, RipeMD, CRC32, Whirlpool, Snefru256 (known as 'Snefru256' in Mhash and
simply 'Snefru' in HASH-MDF), and Tiger (the three-round versions in HASH-MDF to simply 'Tigerx' in Mhash).

However, the algorithms CRC32B and Alder32 each produce different results when called from either MHash
or HASH-MDF, possibly because they are hashing algos designed to be checksums rather than something 
that can produce a string as a unique identifier for ap articular piece of information.

For that reason, if you ever publish the hash results with the data you're putting out publicly,
it is probably wise to indicate whether it is the MHash or HASH-MDF implementation of the
algorithm. Otherwise, the hash value won't provide much use as a unique identifier for the
particular piece of data or for the file.

Some example code to better explain what i mean:

<?php

	//Sha-1 hashing
	$mhash_sha1_results = bin2hex(mhash(MHASH_SHA1, "secret"));
	$hash_mdf_sha1_results = hash("sha1", "secret", FALSE);

	print("MHash SHA-1: $mhash_sha1_results .<br>");
	print("HASH-MDF SHA-1: $hash_mdf_sha1_results .<br><br>");

	//Whirlpool hashing
	$mhash_whirlpool_results = bin2hex(mhash(MHASH_WHIRLPOOL, "secret"));
	$hash_mdf_whirlpool_results = hash("whirlpool", "secret", FALSE);

	print("MHash Whirlpool: $mhash_whirlpool_results .<br>");
	print("HASH-MDF Whirlpool: $hash_mdf_whirlpool_results .<br><br>");

	//CRC32B Hashing

	$mhash_crc32b_results = bin2hex(mhash(MHASH_CRC32B, "secret"));
	$hash_mdf_crc32b_results = hash("crc32b", "secret", FALSE);

	print("MHash CRC32B: $mhash_crc32b_results .<br>");
	print("HASH-MDF CRC32B: $hash_mdf_crc32b_results .<br><br>");

	//Adler32 Hashing
	$mhash_adler32_results = bin2hex(mhash(MHASH_ADLER32, "secret"));
	$hash_mdf_adler32_results = hash("adler32", "secret", FALSE);

	print("MHash Adler32: $mhash_adler32_results .<br>");
	print("HASH-MDF Adler32: $hash_mdf_adler32_results .<br><br>");

?>

The results are what you would expect htem to be

mhash support exists in the Pear PHP_Compat (compact?) package, for support without
building PHP with mhash.

So, the previous notes were on mhash, and now, we move on to the current and bigger beast,
which is the OpenSSL.

OpenSSL, is the Secure Socket Layers, that is used in security in todays standards.

Installation:

To use PHP's OpenSSL support you must also compile PHP --with-openssl[=DIR]

The OpenSSL library also has additional requirements for normal operation at run-time.
Most notably, OpenSSL requires access to random or pseudo-random number generator.

On most UNIX and UNIX-like platforms, including Linux, this means that it must have
access to a /dev/urandom or /dev/random device

Note: Note to Win32 users

In order for this extension to work, there are DLL files that must be available
to the Windows System PATH. For info on how to do this, see respective 
faq from the http://php.net/manual/en/faq.installation.php#faq.installation.addtopath 
page.

Although copying DLL files from the PHP folder into the Windows system dir also
works (because the system dir is by default in the system's PATH), this is not recommended.

This extension requires the following files to be in the PATH: libeay32.dll

Additionally, if you are planning to use the key generation and certificate signing
functions, you will need to install a valid openssl.cnf file on your system. We include
a sample configuration file in our win32 binary distrus, in the extras/openssl dir.

PHP will search for the openssl.cnf using the following logic:

the OPENSSL_CONF environmental variable, if set, will be used as the path (including filename)
of the configuration file.

the SSLEAY_CONF environmental variable, if set, will be used as the path (including filename)
of the configuration file.

The file openssl.cnf will be assumed to be found in the default certificate area, as configured
at the time that the openssl DLL was compiled. This usually means that hte default filename is
c:\usr\local\ssl\openssl.cnf

In your installation, you need to decide whether to install the configuration file at c:\usr\local\ssl\openssl.cnf
or whether to install it someplace else and use environmental variables (possibly on a per-virtual-host basis)
to locate the configuration file.

Note, that it is possible to override the default path from the script using the configargs of the functions
that require a configuration file.

Also, some notes on the installation of the DLL Hell of Windows 7 dev env with Apache and PHP:

Having recently installed Apache 2.2 with PHP 5.2.17 on my Windows 7 development machine, i want 
to pass along my findings about how to set things up to load the correct versions of the OpenSSL DLLs. Many
people have posted elsewhere about the "DLL Hell" that results if there is a wrong version loaded.

First, install Apache 2.2 and check its operation, then download the Windows binaries for PHP.
Note that according to the sidebar on that page, the recommended versions of PHP for use with Apache2 
is currently 5.2.17 even though it is a back level.

PLus, this version comes with all the DLLs you need to use OpenSSL -- no need to recompile as the old
PHP man page suggests.

Having verified the PHP installation, turn on the OpenSSL support by uncommenting the line

extension=php_openssl.dll

in php.ini, which you will find in the PHP dir (I will assume that you made that c:/PHP).
Next check the location of php_openssl.dll, which you should find in c:/PHP/ext. Also, in
php.ini, find the key extension_dir and change its value to c:/php/ext.

next, put this location on teh end of your PATH (there is no need to reboot)

At this point, when you start Apache, it will attempt to load php_openssl.dll, but if
your setup is anything like mine, you will see an error. I prefer to start Apache
manually, and the error appears in a dialog box: 

"The ordinal 4114 could not be located in the dynamic link library LIBEAY32.dll". 
(I am not sure whether you would get this message if you started Apache as a service). 
The Apache log also contains an error message  saying that php_openssl.dll cannot be loaded,
 though that message does not name libeay32.dll.

Libeay32.dll enters the picture because php_openssl.dll depends on it (and also on ssleay32.dll).
What i think happens is that Apache first tries to load php_openssl.dll programatically from the path
specified by the extension_dir key.

But then, the loading of the so-called dependent DLLs is left to Windows' default mechanism.
If Windows finds an incompatible version of a dependent DLL, you get the error.

So clearly the fix is to ensure that the correct version of libeay32.dll is loaded. On my machine,
at least three other processes have loaded various versions of this same DLL. They include the 
Mozy backup client, Windows Explorer (because Mozy installs support in Explorer) and the
OpenOffice suite.

My machine is quite different in this respect from a dedicated server on which one probably wants
as few extranous processes as possible. Presumably on a server one can follow adivce that suggets
copying the dlls to the system32 dir, for example.

BUt i am not about to mess with my other programs by making a system-wide change.

Just to cut to the chase, the Application attemtping to find the dll is not PHP, but Apache itself.
Thus, copy the libeay32.dll to the Apache2.2/bin dir. 

Also, when we compile openssl and we are specifying a directory, the acinclude.m4
and aclocal.m4 use that directory as such:

{your directory}/includes/openssl/{headerfile}

That being said, you want to specify the dir that the includes directory is in, not the specific
directory with the header files.

THIS IS WRONG: --with-openssl=/usr/local/includes/openssl
THIS IS RIGHT: --with-openssl=/usr/local

OpenSSL and IIS:

Open php.ini
uncomment the following:
extension=php_openssl.dll

Make sure you have config the following section pointing to your php install directory
(in my case it is located in a second partition at e:\php) (very recommended practice)

//Dir in which the loadable extensions (modules) reside
extension_dir = "e:/php/ext"

Add your php directory to the PATH variable:

start>run>type cmd
on windows console type:
set PATH=%PATH%;e:\php
(remember replace e:\php with YOUR dir)
(note that using %path% is the same as var+=value, so the directory will be appended at the end of the variable)

php5 come with all the dll in the zip package so if you add the php dir to the path variable 
ou do not need to move anything to your windows system directory (very safe for later updates,
because you just replace the content of your php dir)

After all these steps you are ready, but of course you need to restart your ISS to apply changes:

start>run>inetsrv/iis.msc
right click on your computer
all task>restart IIS

If you install OpenSSL using the msi installer, it installs ssleay32.dll and libeay32.dll into the PHP
Dir alongside php.ini (as well as installing the extension to the ext directory and adding an 
extension config to the `php.ini` file)

Tis the simplest way to ensure that htose files are in the same path as the PHP dir should
already be in the path.

Further more, notes on having problems in terms of SSL on WIndows:

If we uncomment extension=php_openssl.dll and install the latest versions of ssleay.dll and
libeay.dll in <windows>\system32.

When i restarted my web server and examined phpinfo(), there was no "openssl" headed section
(although there were references to openssl in other sections)

I also found this error in my web server logs (<apache dir>/logs/ssl.log and <apache dir>/logs/access.log).

PHP Warning: PHP Startup: Unable to load dynamic library 'C:\\Program Files\\PHP\\ext\\php_openssl.dll'
The OS cannot run %1.\r\n in Unknown on line 0

The cause for this, can be that it is picking uip the wrong versions of libeay.dll and ssleay.dll,
which can be present in multiple locations on the computer.

When any application attempts to use a dll file in windows, the system searches for this file
using the following order:

1. The dir from which the app loaded

2. The windows\system32 dir

3. The windows\system dir

4. The windows dir

5. The current dir

6. The directories that are listed in the PATH environment variable

For PHP running on Apache, the app dir is <apache dir>\bin and NOT <php dir>.
PHP was finding out of date versions in the wrong location, due to searching in
<apache dir>\bin.

The solution:

Either replace the DLLs in the first location on the search order, or, as i did,
install the latest openssl dlls in the windows system32 dir and just rename to .old the ssleay.dll
and libeay.dll files in the search order locations before windows\system32.

Runtime Configuration:

The behaviour of these functions is affected by settings in php.ini:

openssl Configure-Options:


name 				Default 			Changable 			Changelog

openssl.cafile 		"" 					PHP_INI_PERDIR 		Available since PHP 5.6.0

openssl.capath 		"" 					PHP_INI_PERDIR 		Available since PHP 5.6.0

FOr further details of the PHP_INI_* modes, it is as follows:

Where a COnfiguration setting may be set

These modes determine when and where a PHP directive may or may not be set, and each directive
within the manual refers to one of these modes. For example, some settings may be set within a
PHP script using ini_set() whereas others may require php.ini or httpd.conf

For example, the output_buffering setting is PHP_INI_PERDIR therefore it may not be set using
ini_set(). However, the display_errors() directive is PHP_INI_ALL	 therefore it may be set
anywhere, including with ini_set()

Definition of PHP_INI_* modes:

Mode 			Meaning

PHP_INI_USER 	Entry can be set in user scripts (like with ini_set()) or in the Windows registry. 

Changing PHP oncifugration via the Windows registry:

When running PHP on Windows, the configuration values can be modified on a per-directory
basis using the WIndows registry. The configuration values are stored in the registry
key HKLM\SOFTWARE\PHP\Per Directory Values, in the sub-keys corresponding to the path names.

For example, configuration values for the directory c:\inetpub\wwwroot would be stored in the
key HKLM\SOFTWARE\PHP\Per Directory Values\c\inetpub\wwwroot

THe settings for the dir would be active for any script running from this dir or any subdir of it.
The values under the key should have the name of the PHP configuration directive and the string
value. PHP constants in the values are not parsed. 

However, only config values changable in PHP_INI_USEr can be set this way, PHP_INI_PERDIR
values can not.

PHP_INI_PERDIR 	Entry can be set in php.ini, htaccess, httpd.conf or .user.ini (since PHP 5.3)

PHP_INI_SYSTEM 	Entry can be set in php.ini or httpd.conf

PHP_INI_ALL 	Entry can be set anywhere

What follows, is a short explonation of the config dirs:

openssl.cafile string:

Location of Certificate Authority file on local filesystem which should be used with the
verify_peer context option to authenticate the identity of the remote peer.

openssl.capath string:

If cafile is not specified or if the certificate is not found there, the directory
pointed to by capath is searched for a suitable certificate. capath must be a 
correctly hashed certificate dir.

See also the SSL stream context options:

SSL context options:

SSL context options - SSL context option listing

Context options for ssl:// and tls:// transports

Options:

peer_name string:

Peer name to be used. If this value is not set, then the name is guessed based on the 
hostname used when opening the stream.

verify_peer boolean:

Require verification of SSL certificate used.

Defaults to true.

verify_peer_name boolean:

Require verification of peer name.

Defaults to TRUE.

allow_self_signed boolean:

Allow self-signed certificates. Requires verify_peer.

Defaults to FALSE.

cafile string:

Location of Certificate Authority file on local filesystem which should be used
with the verify_peer context option to authenticate the identity of the remote peer.

capath string:

If cafile is not specified or if the certificate isn ot found there, the dir pointed to by capath 
for a suitable certificate. capath must be correctly hashed certificate dir.

local_cert string:

Path to local certificate file on filesystem. It must be a PEM encoded file which contains
your certificate and private key. It can optionally contain the certificate chain of issuers.
The private key also may be contained in a separate file specified by local_pk.

local_pk string:

Path to local private key file on filesystem in case of separate files for certificate (local_cert)
and private key.

passphrase string:

Passphrase with which your local_cert file was encoded.

CN_match string:

Common Name we are expecting. PHP will perform limited wildcard matching. If the
Common Name does not match this, the connection attempt will fail.

Note: This option is deprecated, in favour of peer_name, as of PHP 5.6.0

verify_depth integer:

Abort if certificate chain is too deep

Defaults to no verification

ciphers string: 

Sets the list of available ciphers. The format of the string 
is described as follows:

ciphers: //RE-ROUTED TO SSL SITE HERE

Name: Ciphers - SSL cipher display and cipher list tool

Synposis: openssl ciphers [-help] [-s] [-v] [-V] [-ssl3] [-tls] [-tls1_1] [-tls1_2] [-tls1_3] [-s] [-psk] [-srp]
[-stdname] [-convert name] [cipherlist]

Desc:

The ciphers command convert textual OpenSSL cipher lists into ordered SSL cipher preference lists.
It can be used as a test tool to determine the appropiate cipherlist.

OPtions:

-help : Print a usage message

-s : Only list supported ciphers: those consistent with the security level, and minimum and maximum
	protocol version. This is closer to the actual cipher list an app will support.

	PSK and SRP ciphers are not enabled by default: they require -psk or -srp to enable them.

	It also does not change the default list of supported signature algorithms.

	On a server the list of supported ciphers might also exclude other ciphers depending
	on the configured certificates and presence of DH parameters.

	If this option is not used then all ciphers that match the cipherlist will be listed.

-psk: When combined with -s includes cipher suites which require PSK.

-srp: When combined with -s includes cipher suites which require SRP.

-v: verbose output: For each cipher suite, list details as provided by
	SSL_CIPHER_get_name.

SSL_CIPHER_get_name:

NAME:

SSL_CIPHER_get_name, SSL_CIPHER_standard_name, OPENSSL_cipher_name,
SSL_CIPHER_get_bits, SSL_CIPHER_get_version, SSL_CIPHER_description,
SSL_CIPHER_get_cipher_nid, SSL_CIPHER_get_digest_nid, SSL_CIPHER_get_handshake_digest,
SSL_CIPHER_get_kx_nid, SSL_CIPHER_get_auth_nid, SSL_CIPHER_is_aead - get SSL_CIPHER 
props.

Synposis:

#include <openssl/ssl.h>

const char *SSL_CIPHER_get_name(const SSL_CIPHER *cipher);
const char *SSL_CIPHER_standard_name(const SSL_CIPHER *cipher);
const char *OPENSSL_cipher_name(const char *stdname);
int SSL_CIPHER_get_bits(const SSL_CIPHER *cipher, int *alg_bits);

char *SSL_CIPHER_get_version(const SSL_CIPHER *cipher);
char *SSL_CIPHER_description(const SSL_CIPHER *cipher, char *buf, int size);
int SSL_CIPHER_get_cipher_nid(const SSL_CIPHER *c);
int SSL_CIPHER_get_digest_nid(const SSL_CIPHER *c);

const EVP_MD *SSL_CIPHER_get_handshake_digest(const SSL_CIPHER *c);
int SSL_CIPHER_get_kx_nid(const SSL_CIPHER *c);
int SSL_CIPHER_get_auth_nid(const SSL_CIPHER *c);
int SSL_CIPHER_is_aead(const SSL_CIPHER *c);

Description:

SSL_CIPHER_get_name() returns a pointer to the name of the cipher. If the cipher is null,
it returns "(NONE)".

SSL_CIPHER_standard_name() returns a pointer to the standard RFC name of cipher. If the
cipher is NULL, it returns "(NONE)". If the cipher has no standard name, it returns NULL.

OPENSSL_cipher_name() returns a pointer to the OpenSSL name of stdname. If the stdname is
NULL or stdname has no corresponding OpenSSL name, it returns "(NONE)".

SSL_CIPHER_get_bits() returns the number of secret bits used for cipher. If cipher is NULL,
0 is returned.

SSL_CIPHER_get_version() returns string which indicates the SSL/TLS protocol version that
first defined the cipher. It returns "(NONE)" if cipher is NULL.

SSL_CIPHER_get_cipher_nid() returns the cipher NID corresponding to c. If there is no
cipher (e.g for cipher suites with no encryption) then NID_undef is returned.

SSL_CIPHER_get_digest_nid() returns the digest NID corresponding to the MAC used by c during
record encryption/decryption. If there is no digest (e.g for AEAD cipher suites) then NID_undef
is returned.

SSL_CIPHER_get_handshake_digest() returns an EVP_MD for the digest during the SSL/TLS handshake
when using the SSL_CIPHER c. Note that htis may be different to the digest used to calculate
the MAC for encrypted records.

SSL_CIPHER_get_kx_nid() returns the key exchange NID corresponding to the method used by c.
If there is no key exchange, then NID_undef is returned. If any appropiate key exchange algo
can be used (as in the case of TLS 1.3 cipher suites) NID_kx_any is returned.

Examples:

NID_kx_rsa

NID_kx_ecdhe

NID_kx_dhe

NID_kx_psk

SSL_CIPHER_get_auth_nid() returns the authentication NID corresponding to the method used
by c. If there is no authentication, then NID_undef is returned. If any appropiate authentication
algo can be used (as in the case of TLS 1.3 cipher suites) NID_auth_any is returned.

Examples:

NID_auth_rsa

NID_auth_ecdsa

NID_auth_psk

SSL_CIPHER_is_aead() returns 1 if the cipher c is AEAD (e.g GCM or ChaCha20/Poly1305), and 0
if it is not AEAD.

SSL_CIPHER_description() returns a textual description of the cipher used into the buffer buf
of length len provided. If buf is provided, it must be at least 128 bytes, otherwise a buffer 
will be allocated using OPENSSL_malloc(). If the provided buffer is too small, or the allocation
fails, NULL is returned.

The string returned by SSL_CIPHER_description() consists of several fields separated by 
whitespace:

<ciphername>: Textual representation of the cipher name

<protocol version>: Protocol version, such as TLSv1.2, when the cipher was first defined.

Kx=<key exchange>: Key exchange method such as RSA, ECDHE, etc.

Au=<authentication>: Authentication method such as RSA, None, etc.. None is the rep of 
anonymous ciphers

Enc=<symmetric encryption method>: Encryption method, with number of secret bits, such as AESGCM(128).

Mac=<message authentication code>: Message digest, such as SHA256.

Some examples for the output of SSL_CIPHER_description():

ECDHE-RSA-AES256-GCM-SHA256 TLSv1.2 Kx=ECDH 	Au=RSA Enc=AESGCM(256) Mac=AEAD
RSA-PSK-AES256-CBC-SHA384 TLSv1.0 Kx=RSAPSK 	Au=RSA Enc=AES(256)    Mac=SHA384

HISTORY:

SSL_CIPHER_get_version() was updated to always return the correct protocol string in OpenSSL
1.1.0

SSL_CIPHER_description() was changed to return NULL on error, rather than a fixed string, in
OpenSSL 1.1.0

SSL_CIPHER_get_handshake_digest() was added in OPenSSL 1.1.1.

SSL_CIPHER_standard_name() was globally available in OpenSSL 1.1.1. Before OpenSSL 1.1.1,
tracing (enable-ssl-trace argument to Configure) was required to enable this function.

OPENSSL_cipher_name() was added in OpenSSL 1.1.1.

Defaults to DEFAULT.

capture_peer_cert boolean:

If set to TRUE a peer_certificate context option will be created containing this
peer certificate.

capture_peer_cert_chain boolean:

If set to TRUE a peer_certificate_chain context option will be created containing the cert chain

SNI_enabled boolean:

If set to TRUE server name indication will be enabled. Enabling SNI allows multiple certificates
on the same IP address.

SNI_server_name string:

If set, then this value will be used as server name for server name indication. If this
value is not set, then the server name is guessed based on the hostname used when opening
the stream.

NOTE: this option is deprecated in favour of peer_name, as of PHP 5.6.0

disable_compression boolean:

If set, disable TLS compression. This can help mitigate the CRIME attack vector.

peer_fingerprint string | array:

Aborts when the remote certificate digest does not match the specified hash.

When a string is used, the length will determine which hashing algo is applied, either "md5" (32) or "sha1" (40).

When an array is used, the keys indicate the hashing algorithm name and each corresponding value is the
expected digest.

Changelog:

5.6 Added peer_fingerprint and verify_peer_name, verify_peer default changed to TRUE.

5.4.13 Added disable_compression. Requires OpenSSL >= 1.0.0.

5.3.2 Added SNI_enabled and SNI_server_name.

Note: because ssl:// is the underlying transport for the https:// and ftps:// wrappers, any context options
which apply to ssl:// also apply to https:// and ftps://

Note: For SNI (Server Name Indication) to be available, then PHP must be compiled with OpenSSL 0.9.8j or greater.
Use the OPENSSL_TLSEXT_SERVER_NAME to determine whether SNI is supported.

There is also a crypto_type context. In older versions this was crypto_method. This is referenced 
on http://php.net/manual/en/function.stream-socket-enable-crypto.php

CN_match works contrary to intuitive thinking. I came across this when i was developing
SSL server implemented in PHP. I stated (in code):

- Do not allow self signed certs (works)
- Verify peer certs against CA cert (works)
- verify the client's CN against CN_match (does not work), like this:

stream_context_set_option($context, 'ssl', 'CN_match', '*.example.org');

I presumed this would match any client with CN below .example.org.domain.
Unfortunately this is NOT the case. The option above does not do that.

What it really does is this:

- it takes client's CN and compares it to CN_match
- IF CLIENT's CN contains AN ASTERIKS like *.example.org, then it is matched against
CN_match in wildcard matching fashion

Examples to illustrate behaviour:
(CNM = server's CN_match)
(CCN = client's CN)

- CNM=host.example.org, CCN=host.example.org ---> OK
- CNM=host.example.org, CCN=*.example.org ---> OK
- CNM=.example.org, CCN=*.example.org ---> OK
- CNM=example.org, CCN=*.example.org ---> ERROR

- CNM=*.example.org, CCN=host.example.org ---> ERROR
- CNM=*.example.org, CCN=*.example.org ---> OK

According to PHP sources i believe that the same applies if you are trying to act as
Client and the server contains a wildcard certificate. If you set CN_match to myserver.example.org
and server presents itself with *.example.org, the connection is allowed.

Everything above applies to PHP v 5.2.12

Resource Types:

There are 3 resource types defined in the OpenSSL module. The first one is a pkey (public or private key) identifier,
the second one is a X509 cert identifier and the third one is a CSR (certificate signing request) identifier.

Predefined Constants:

Table of Contents:

Purpose checking flags:

X509_PURPOSE_SSL_CLIENT (int)

X509_PURPOSE_SSL_SERVER (int)

X509_PURPOSE_NS_SSL_SERVER (int)

X509_PURPOSE_SMIME_SIGN (int)

X509_PURPOSE_SMIME_ENCRYPT (int)

X509_PURPOSE_CRL_SIGN (int)

X509_PURPOSE_ANY (int)

Padding flags for asymmetric encryption:

OPENSSL_PKCS1_PADDING (int)

OPENSSL_SSLV23_PADDING (int)

OPENSSL_NO_PADDING (int)

OPENSSL_PKCS1_OAEP_PADDING (int)

Key types:

OPENSSL_KEYTYPE_RSA (int)

OPENSSL_KEYTYPE_DSA (int)

OPENSSL_KEYTYPE_DH (int)

OPENSSL_KEYTYPE_EC (int)

Note: This constant was added in 5.2.0

OPENSSL_KEYTYPE_EC

PKCS7 Flags/Constants:

The S/MIME functions make use of flags which are specified using a bitfield which
can include one or more of the following values:

Constant  		Desc

PKCS7_TEXT  	Adds text/plain content type headers to encrypted/signed message. If decrypting or verifying,
				it strips those headers from the output - if the decrypted or verified message is not of MIME type text/plain
				then an error will occur

PKCS7_BINARY 	Normally the input message is converted to "canonical" format which is effectively using CR and LF as end of line:
				as required by the S/MIME specification. When this option is present, no translation occurs. This is useful when
				handling binary data which may not be in MIME format.

PKCS7_NOINTERN 	When verifying a message, certificates (if any) included in the message are normally searched for the signing cert.
				With this option only the certs specified in the extracerts param of openssl_pkcs7_verify() are used.
				The supplied certs can still be used as untrusted CAs however.

PKCS7_NOVERIFY 	Do not verify the signers cert of a signed message

PKCS7_NOCHAIN 	Do not chain vertification of signers certs: that is, do not use the certs in the signed message as untrusted CAs.

PKCS7_NOCERTS 	When signing a message the signer's cert is normally included - with this option it is excluded. This will reduce the
				size of the signed message but the verifier must have a copy of the signers certificate available locally 
				(passed using the extracerts to openssl_pkcs7_verify() for example).

PKCS7_NOATTR 	Normally when a message is signed, a set of attributes are included which include the signing time and the supported
				symmetric algos. With this option they are not included.

PKCS7_DETACHED 	When signing a message, use a cleartext signing with the MIME type "multipart/signed". This is the default if you do not
				specify any flags to openssl_pkcs7_sign(). If you turn this option off, the message will be signed using opaque signing,
				which is more resistant to translation by mail relays but cannot be read by mail agents that do not support S/MIME.

PKCS7_NOSIGS 	Do not try and verify the sigs on a message

Note: 

These constants were added in 4.0.6

Signature Algorithms:

OPENSSL_ALGO_DSS1 (int)

OPENSSL_ALGO_SHA1 (int) : Used as default algo by openssl_sign() and openssl_verify()

OPENSSL_ALGO_SHA224 (int)

OPENSSL_ALGO_SHA256 (int)

OPENSSL_ALGO_SHA384 (int)

OPENSSL_ALGO_SHA512 (int)

OPENSSL_ALGO_RMD160 (int)

OPENSSL_ALGO_MD5 (int)

OPENSSL_ALGO_MD4 (int)

OPENSSL_ALGO_MD2 (int) : As of PHP 5.2.13 and PHP 5.3.2, this constant is only available if PHP is compiled
						with MD2 support. This requires passing in the -DHAVE_OPENSSL_MD2_H CFLAG when compiling
						PHP and enable-md2 when compiling OpenSSL 1.0.0+

Note: 

These constants were added in 5.0.0

OPENSSL_ALGO_MD2, OPENSSL_ALGO_MD4, OPENSSL_ALGO_MD5, OPENSSL_ALGO_SHA1, OPENSSL_ALGO_DSS1

Note:

These constants were added in 5.4.8

OPENSSL_ALGO_RMD160, OPENSSL_ALGO_SHA224, OPENSSL_ALGO_SHA256, OPENSSL_ALGO_SHA384, OPENSSL_ALGO_SHA512

Ciphers:

OPENSSL_CIPHER_RC2_40 (int)

OPENSSL_CIPHER_RC2_128 (int)

OPENSSL_CIPHER_RC2_64 (int)

OPENSSL_CIPHER_DES (int)

OPENSSL_CIPHER_3DES (int)

Note:

These constnats were added in 4.3.0

OPENSSL_CIPHER_AES_128_CBC (int)

OPENSSL_CIPHER_AES_192_CBC (int)

OPENSSL_CIPHER_AES_256_CBC (int)

Note:

These constants were added in 5.4.0

Version Constants:

OPENSSL_VERSION_TEXT (string)

OPENSSL_VERSION_NUMBER (int)

Note: These constants were added in 5.2.0

Example of usage:

<?php
echo "openssl version text: " . OPENSSL_VERSION_TEXT . "\n";
echo "openssl version number: " . OPENSSL_VERSION_NUMBER . "\n";
?>

Will output akin to:

openssl version text: OpenSSL 1.0.2d 9 Jul 2015
openssl version number: 268443727

Server Name Indication constnats:

OPENSSL_TLSEXT_SERVER_NAME (string): Whether SNI support is available or not

NOTE: This constant was added in 5.3.2 and requires PHP to be built with OpenSSL 0.9.8j or greater.

The constants are defined by this extension, and will only be available when the extension has 
either been compiled into PHP or dynamically loaded at runtime.

Key/Certificate parameters:

Qutie a few of openssl functions require a key or a certificate parameter. Following methods may be
used to get them:

Certificates:

1. An X.509 resource returned from openssl_x509_read()

2. A string having the format file://path/to/cert.pem; the named file must contain a PEM encoded
certificate

3. A string containing the content of a certificate, PEM encoded

Public/Private keys:

1. A key resource returned from openssl_get_publickey() or openssl_get_privatekey()

2. For public keys only: an X.509 resource

3. A string having the format file://path/to/file.pem - the named file must contain a PEM
encoded certificate/private key (it may contain both)

4. A string containing the content of a certificate/key, PEM encoded

5. For private keys, you may also use the syntax array($key, $passphrase) where $key represents a key specified
using the file:// or textual content notation above, and $passphrase a string containing the passphrase for that
private key.

Certificate Verification:

When calling a function that will verify a signature/certificate, the cainfo parameter is an array containing
file and directory names that specify the locations of trusted CA files. If a dir is specified, then it must
be a correctly formed hashed dir as the openssl command would use.

OpenSSL functions:

In case we are wondering what a correctly hashed dir for the use with cainfo is: it is simply a dir
which contains CA public certificates in PEM/X.509 format. You can get such certs either from the CA's
website (they advertise it in visible places), or from your browser.

In Explorer for instance, you can click on the little yellow padlock, go to the CA entry and export it.

The only trick with the dir is that file names must be in the form "hash.#". The "hash" part is the
8-digit hex hash of the certificate, while the # part is a number which serves to differentiate 
certificates which give teh same hash (yes, it can happen with certs coming from CA).

Usually # is 0, but you can also use 1, 2, and so on, when having more certs with the same hash.

In order to obtain the hash of a cert you can use the openssl command line utility like this:

openssl x509 -hash -in certfile.cer | head -1

Also, currently all OpenSSL functions defined in PHP only utilize the PEM format. Use the following
code to convert from DER to PEM and PEM to DER.

<?php
$pem_data = file_get_contents($cert_path.$pem_file);
$pem2der = pem2der($pem_data);

$der_data = file_get_contents($cert_path.$der_file);
$der2pem = der2pem($der_data);

function pem2der($pem_data) {
	$begin = "CERTIFICATE-----";
	$end = "-----END";
	$pem_data = substr($pem_data, strpos($pem_data, $begin) + strlen($begin));
	$pem_data = substr($pem_data, 0, strpos($pem_data, $end));
	$der = base64_decode($pem_data);
	return $der;
}

function der2pem($der_data) {
	$pem = chunk_split(base64_encode($der_data), 64, "\n");
	$pem = "-----BEGIN CERTIFICATE-----\n".$pem."-----END CERTIFICATE-----\n";
	return $pem;
}
?>

For w32 users to enable OpenSSL support. AS well as copying "libeay32.dll" to the windows system32
folder you also need to copy "ssleay32.dll". The documentation above should probably be updated
to note this.

Also, "You need to have a valid openssl.cnf installed for this function to operate correctly"
includes most openssl functions. You can force PHP to find your openssl.cnf file as follows:

$config = array('config'=>'/path/to/openssl.cnf');
$pkey = openssl_pkey_new($config);
$csr = openssl_csr_new('MyCSR', $pkey, $config);

Note, that if we store encrypted data in a DB, we have to use blob formats. Due to loss of some bytes
in other cases, which causes inability to decrypt. This can derive from Truncation, arbitrary byte occurrences,
dropping etc.

Example of usage:

<?php
$countryName = "UK";
$stateOrProvinceName = "London";
$localityName = "Blah";

$organizationName = "Blah1";
$organizationUnitName = "Blah2";
$commonName = "Joe Bloggs";
$emailAddress = "openssl@example.com";

$dn = array(
	"countryName" => $countryName,
	"stateOrProvinceName" => $stateOrProvinceName,
	"localityName" => $localityName,
	"organizationName" => $organizationName,
	"organizationUnitName" => $organizationalUnitName,
	"commonName" => $commonName,
	"emailAddress" => $emailAddress
);

$badPriv = 'foo';

//generate a bad CSR
$badCsr = openssl_csr_new($dn, $badPriv);

//generate private key
$priv = openssl_pkey_new();

//generate csr
$csr = openssl_csr_new($dn, $priv);

$badCsrDetails = openssl_pkey_get_details(openssl_csr_get_public_key($badCsr));
$privDetails = openssl_pkey_get_details($priv);
$csrDetails = openssl_pkey_get_details(openssl_csr_get_public_key($csr));

echo md5($badCsrDetails['rsa']['n']);
echo "\nDoes not match\n";
echo md5($privDetails['rsa']['n']);
echo "\nMatches\n";
echo md5($csrDetails['rsa']['n']);
echo "\n";
?>

This output is an md5 hash of the modulus. The same check can be accomplished with
openssl:

openssl rsa -noout -modulus -in server.key | openssl md5
openssl req -noout -modulus -in server.csr | openssl md5

To test if a cert is valid (not corrupt), we can use the following bash script,
by slapping it in a system() call and making it a bash script:

if [ "`openssl x509 -in /etc/certs/my.crt -noout -modulus`" = "`openssl rsa -in /etc/keys/my.key -noout -modulus`" ];
then echo "Match"; else echo "Different"; fi

Window users beware, msvcr71.dll needs to be in Sys32.

The following calls are method calls related to OpenSSL:

openssl_cipher_iv_length:

Gets the cipher iv length

int openssl_cipher_iv_length ( string $method )

Gets the cipher initialization vector (iv) length.

Params:

method: The cipher method, see openssl_get_cipher_methods() for a list of potentional values.

Returns the cipher length on success, or FALSE on failure.

Errors/Exceptions:

Emits an E_WARNING level error when the cipher algo is unknown.

Example:

<?php
$method = 'AES-128-CBC';
$ivlen = openssl_cipher_iv_length($method);

echo $ivlen;
?>

The above outputs:

16

Note that hte returned length is in bytes.

openssl_csr_export_to_file:

Exports a CSR to a file

bool openssl_csr_export_to_file ( resource $csr, string $outfilename [, bool $notext = true ] )

openssl_csr_export_to_file() takes the Certificate Signing Request represented by csr and saves it
as ascii-armoured text into the file named by outfilename.

Params:

csr

outfilename: Path to the output file

notext: The optional parameter notext affects the verbosity of the output; if it is FALSE, then additional
human-readable information is included in the output. The default value of notext is TRUE.

Returns TRUE on success, FALSE on failure.

openssl_csr_export:

Exports a CSR as a string

bool openssl_csr_export ( resource $csr , string &$out [, bool $notext = true ] )

openssl_csr_export() takes the Certificate Signing Request represented by csr and stores it
as ascii-armoured text into out, which is passed by reference.

params:

csr

out

notext: The optional parameter notext affects the verbosity of the output; if it is FALSE, then
additional human-readable information is included in the output. The default value of notext is TRUE.

TRUE on success, FALSE on failure.

An example of how to use this function:

if( $csr = openssl_csr_new( array(
	  "countryName"=>"PL",
	  "stateOrProvinceName" => "blah",
	  "organizationName" => "company ltd",
	  "commonName" => "foo.bar.com",
	  "Email" => "blah@foo.bar.com"), $privkey )
	)
	{
	openssl_csr_export_to_file( $csr, "out.csr" );
	}
else
	{
	printf("failed\n");
	}

Keep in mind that keys are case sensitive (i.e, give "email" instead of "Email" and you get a warning).
Also keep in mind that it is importnat to keep the order of the arguments in the array. Move the "Email"
above commonName and check what you get (in case you do not know how: "openssl req -noout -text -in out.csr").

openssl_csr_get_public_key:

Returns the public key of a CERT

resource openssl_csr_get_public_key ( mixed $csr [, bool $use_shortnames = true ] )

openssl_csr_get_subject:

Returns the subject of a CERT

array openssl_csr_get_subject ( mixed $csr [, bool $use_shortnames = true ] )

This function may not return name fields in the order they appear in the cert. For example, this CSR:

-----BEGIN CERTIFICATE REQUEST-----
<stuff>
-----END CERTIFICATE REQUEST-----

When processed by 'openssl -noout -subject' gives this:

subject=/OU=unit #1/O=org/OU=unit #2

On the other hand, if processed by 'var_dump( openssl_csr_get_subject ( "..." ) )' will produce as follows:

csr = array(2) {
	["OU"]=>
	array(2) {
		[0]=>
		string(7) "unit #1"
		[1]=>
		string(7) "unit #2"
	}
	["0"]=>
	string(3) "org"
}

As can be seen, sorting of info is lost, which may be lost in some apps.

An example of showcasing the difference of setting true and false to this function:

openssl_csr_get_subject('somedomain.com', false);
return
array(7) {
	["countryName"]=> string "XX"
	["stateOrProvinceName"]=> string "xxxxxxxxx"
	["localityName"]=> string "xxxxxxxx"
	["organizationName"]=> string "xxxxxxxxxx"
	["commonName"]=> string "xxx"
	["emailAddress"]=> string "xxx"
}

openssl_csr_get_subject('somedomain.com', true);
return
array(7) {
	["C"]=> string "XX"
	["ST"]=> string "<x's>"
	["L"]=> string "<x's>"
	["O"]=> string "<x's>"
	["OU"]=> string "xxxx"
	["CN"]=> string "xxx"
	["emailAddress"]=>string "xxx"
}

openssl_csr_new:

Generates a CSR

mixed openssl_csr_new ( array $dn , resource &$privkey [, array $configargs [, array $extraattribs ]] )

openssl_csr_new() generates a new CSR (Certificate Signing Request) based on the information provided by
dn, which represents the Distinguished Name to be used in the certificate.

Note: You need to have a valid openssl.cnf installed for this function to operate correctly. 
See the installation section for more info.

Params:

dn: The Distinguished Name to be used in the certificate.

privkey: privkey should be set to a private key that was previously generated by openssl_pkey_new()
(or otherwise obtained from the other openssl_pkey family of functions). The corresponding public portion
of the key will be used to sign the CSR.

configargs: By default, the information in your system openssl.conf is used to initialize the request,
you can specify a configuration file section by setting the config_section_section key of configargs.

You can also specify an alternative openssl configuration file by setting the value of the config key
to the path of the file you want to use. The following keys, if present in configargs behave as
their equivalents in the openssl.conf, as listed in the following table.

Configuration overrides:

configargs key 		type 		openssl.conf equivalent 		desc

digest_alg 			string 		default_md 						Selects which digest method to use

x509_extensions 	string 		x509_extensions 				Selects which extensions should be used when creating the x509 certificate

req_extensions 		string 		req_extensions 					Selects which extensions should be used to generate a private key

private_key_bits 	integer 	default_bits 					Specifies how many bits should be used to generate a private key

private_key_type 	integer 	none 							Specifies the type of private key to create. This can be one of 
																OPENSSL_KEYTYPE_DSA, OPENSSL_KEYTYPE_DH or OPENSSL_KEYTYPE_RSA.
																The default value is OPENSSL_KEYTYPE_RSA which is currently the
																only supported key type.

encrypt_key 		boolean 	encrypt_key 					Should an exported key (with passphrase) be encrytped?

encrypt_key_cipher 	integer 	none 							One of cipher constants

extraattribs:

extraattribs is used to specify additional configuration options for the CSR. Both dn and extraattrbis are associative
arrays whose keys are converted to OIDs and applied to the relevant part of the request

Returns the CSR or FALSE on failure.

Example of creating a self-signed-certificate:

<?php
//Fill in data for the distinguished name to be used in the cert
// you must change the values of these keys to match your name and
// company, or more precisely, the name and company of the person/site
// that you are generating the certificate for.

// For SSL certificates, the commonName is usually the domain name of
// that will be using the certificate, but for S/MIME certificates,
// the commonName will be the name of the individual who will use the
// certificate.
$dn = array(
	"countryName" => "UK",
	"stateOrProvinceName" => "Somerset",
	"localityName" => "Glastonbury",
	"organizationName" => "The Brain Room Limited",
	"organizationUnitName" => "PHP Documentation Team",
	"commonName" => "Wez Furlong",
	"emailAddress" => "wez@example.com"
);

//generate a new private (And public) key pair
$privkey = openssl_pkey_new();

//generate a certificate signing request
$csr = openssl_csr_new($dn, $privkey);

// you will usually want to create a self-signed cert at this
// point until your CA Fullfills your request
// THis creates a self-signed cert that is valid for 365 days
$sscert = openssl_csr_sign($csr, null, $privkey, 365);

// Now you will want to preserve your private key, CSR and self-signed
// cert so that they can be installed into your web server, mail server
// or mail client (depending on the intended use of the cert).
// This example shows how to get those things into vars, but you can
// also store them directly into files
// Typically, you will send the CRS on to your CA who will then issue
// you with the "real" certificate.
openssl_csr_export($csr, $csrout) and var_dump($csrout);
openssl_x509_export($sscert, $certout) and var_dump($certout);
openssl_pkey_export($privkey, $pkeyout, "mypassword") and var_dump($pkeyout);

//Show any errors that occurred here
while (($e = openssl_error_string()) !== false) {
	echo $e . "\n";	
}
?>

If we cannot generate a new private key using openssl_pkey_new() or openssl_csr_new(),
your script hangs during the call of these functions and in case you specified a "private_key_bits"
parameter, ensure that you cast the var to an int.

<?php
$SSLcnf = array('config' => '/usr/local/nessy2/share/ssl/openssl.cnf',
		'encrypt_key' => true,
		'private_key_type' => OPENSSL_KEYTYPE_RSA,
		'digest_alg' => 'sha1',
		'x509_extensions' => 'v3_ca',
		'private_key_bits' => $someVariable //BAD
		'private_key_bits' => (int)$someVariable //Works
		'private_key_bits' => 512 // ---> works
		);
?>

To set the "basicConstraints" to "critical, CA:TRUE", you have to define configargs, but in the 
openssl_csr_sign() function.

An example of code to sign a child cert:

$CAcrt = "file://ca.crt";
$CAkey = array("file://ca.key", "myPassWord");

$clientKeys = openssl_pkey_new();
$dn = array(
	"countryName" => "FR",
	"stateOrProvinceName" => "Finistere",
	"localityName" => "Plouzane",
	"organizationName" => "Ecole Nationale d'Ingenierus de Brest",
	"organizationalUnitName" => "Enib Students",
	"commonName" => "www.enib.fr",
	"emailAddress" => "ilovessl@php.net"
);
$csr = openssl_csr_new($dn, $clientPrivKey);

$configArgs = array("x509_extensions" => "v3_req");
$cert = openssl_csr_sign($csr, $CAcrt, $CAkey, 100, $configArgs);

openssl_x509_export_to_file($cert, "childCert.crt");

Then if you wish to add some more options, you can edit the
"/etc/ssl/openssl.cnf" ssl config file (debian path), and add these
after the [ v3_req ] tag.

$configars is fairly opaque as to what it does behind the scenes, that is, until
you look at php_openssl_parse_config() in '/ext/openssl/openssl.c':

SET_OPTIONAL_STRING_ARG("digest_alg", req->digest_name,
	CONF_get_string(req->req_config, req->section_name, "default_md"));
SET_OPTIONAL_STRING_ARG("x509_extensions", req->extensions_section,
	CONF_get_string(req->req_config, req->section_name, "x509_extensions"));

SET_OPTIONAL_STRING_ARG("req_extensions", req->request_extensions_section,
	CONF_get_string(req->req_config, req->section_name, "req_extensions"));
SET_OPTIONAL_LONG_ARG("private_key_bits", req->priv_key_bits,
	CONF_get_number(req->req_config, req->section_name, "default_bits"));

SET_OPTIONAL_LONG_ARG("private_key_type", req->priv_key_type, OPENSSL_KEYTYPE_DEFAULT);

Here we can see that SET_OPTIONAL_STRING_ARG() is called for most inputs but for
'private_key_bits' SET_OPTIONAL_LONG_ARG() is called. Both calls are C macros that
expand to code that enforces the expected input type.

The generated code ignores the input without warning/notice if an unexpected type is
used and just uses the default from the configuration file. This is why using a string with
'private_key_bits' will result in unexpected behavior.

Further inspection of the earlier initialization in the same function:

SET_OPTIONAL_STRING_ARG("config", req->config_filename, default_ssl_conf_filename);
SET_OPTIONAL_STRING_ARG("config_section_name", req->section_name, "req");
req->global_config = CONF_load(NULL, default_ssl_conf_filename, NULL);
req->req_config = CONF_load(NULL, req->config_filename, NULL);

if (req->req_config == NULL) {
	return FAILURE;
}

And elsewhere in another function:

//Default to 'openssl.cnf' if no environment variable is set
if (config_filename == NULL) {
	snprintf(default_ssl_conf_filename, sizeof(default_ssl_conf_filename), "%s/%s",
			X509_get_default_cert_area(),
			"openssl.cnf");
} else {
	strlcpy(default_ssl_conf_filename, config_filename, sizeof(default_ssl_conf_filename));
}

Reveals that 'config' in $configargs is an override for any default setting elsewhere.
This actually negates the comment in the documentation that says "Note: You need a valid openssl.cnf
installed for this function to operate correctly. See the notes under the installation section for more info."

A more correct sentence would be "Note, you need either have a valid openssl.cnf set up or use $configargs 
to point at a valid openssl.cnf file for this function to operate correctly".

Thus, looking at the PHP source code is useful.

If we are using a debian-based system, the openssl config files are at: /etc/ssl/openssl.cnf

One command to create modern certificate requests with 4 SAN subdomain.

According to RFC you can change CN (common name) and subjectAltName. When cert validated
searching in CN and subjectAltName.

openssl req -new -nodes -config <( cat <<-EOF
[req]
default_bits = 2048
prompt = no
default_md = sha256
req_extensions = re
distinguished_name = dn
[ dn ]
CN = my.tld
C = country
ST = state
L = location
O = ORGANISATION
[ re ]
subjectAltName = DNS.1: www.my.tld, DNS.2: www2.my.tld, DNS.3: www3.my.tld, DNS.4: www4.my.tld
EOF
) -keyout secret.key -out req.csr

If we get the error:

error:0D11A086:asn1 encoding routines:ASN1_mbstring_copy:string too short

then look at your key:value pairs in the $dn (distinguished name) array.

If you have one value (like "organizationalUnitName" = "") set to an empty string, ti will
throw the baove error.

Fix the error by either eliminating that array element from $dn completely, or using
a space " " instead of an empty string.

openssl_csr_sign:

Sign a CSR with another certificate (or itself) and generate a certificate

resource openssl_csr_sign ( mixed $csr , mixed $cacert , mixed $priv_key , int $days [, array $configargs [, int
	$serial = 0 ]] )

openssl_csr_sign() generates an x509 cert resource from the given CSR.

Note: You need to have a valid openssl.cnf installed for this function to operate correctly.
See the notes under the installation section for more info.

params:

csr: A CSR previously generated by openssl_csr_new().. It can also be the path to a PEM encoded
CSR when specified as file://path/to/csr or an exported string generated by openssl_csr_export()

cacert: The generated certificate will be signed by cacert. If cacert is NULL, the generated cert
will be a self-signed cert

priv_key: priv_key is the private key that corresponds to cacert

days: days specifies the length of time for which the generated cert will be valid,
	in days.

configargs: You can finetune the CSR signing by configargs. See openssl_csr_new() for more info
about configargs.

serial: An optional the serial number of issued cert. If not specified, defaults to 0.

Returns an x509 cert resource on success, FALSE on failure.

Example of openssl_csr_sign() example - signing a CSR (how to implement your own CA)

<?php
// let us assume that this script is set to receive a CSR that has 
// been pasted into a textarea from another page
$csrdata = $_POST["CSR"];

//We will sign the request using our own "certificate authority"
// certificate. You can use any certificate to sign another, but
// the process is worthless unless the signing certificate is trusted
// by the software/users that will deal with the newly signed cert

//We need our CA cert and its private key
$cacert = "file://path/to/ca.crt";
$privkey = array("file://path/to/ca.key", "your_ca_key_passphrase");

$usercert = openssl_csr_sign($csrdata, $cacert, $privkey, 365);

//Now display the generated cert so that the user can
// copy and paste it into their local configuration (such as a file
// to hold the certificate for their SSL server)
openssl_x509_export($usercert, $certout);
echo $certout;

//Show any errors that occurred here
while (($e = openssl_error_string()) !== false) {
	echo $e . "\n";
}
?>

As for, an sample of how to create a valid X.509 Public and Private
Key (cert/key).
When not using self signed the 4.2.1 segault. You need the CVS code at least for openssl.

<?php
Header("Content-Type: text/plain");
$CA_CERT = "CA.cert.pem";
$CA_KEY = "CA.key.pem";
$req_key = openssl_pkey_new();

if(openssl_pkey_export ($req_key, $out_key)) {
	$dn = array(
		"countryName" => "DE",
		"stateOrProvinceName" => "Frankfurt",
		"organizationName" => "smcc.net",
		"organizationalUnitName" => "E-Mail",
		"commonName" => "Testcert"
		);
	$req_csr = openssl_csr_new ($dn, $req_key);
	$req_cert = openssl_csr_sign($req_csr, "file://$CA_CERT", "file://$CA_KEY", 365);
	if(openssl_x509_export ($req_cert, $out_cert)) {
		echo "$out_key\n";
		echo "$out_cert\n";
	}
	else 	echo "Failed Cert\n";
} else 		echo "FailedKey\n";
?>

To generate a self-signed cert, pass NULL as the signign cert (2nd param), for example:

$req_key = openssl_pkey_new();
$dn = array(
	"countryName" => "US",
	"stateOrProvinceName" => "Colorado",
	"organizationName" => "yPass.net",
	"organizationalUnitName" => "yPass.net",
	"commonName" => "yPass.net Root Certificate"
);
$req_csr = openssl_csr_new($dn, $req_key);
$req_cert = openssl_csr_sign($req_csr, NULL, $req_key, 365);

openssl_decrypt:

Decrypts data

string openssl_decrypt ( string $data , string $method , string $key [, int $options = 0 [, string $iv = "" [,
	string $tag = "" [, string $aad = "" ]]]] )

Takes a raw or base64 encoded string and decrypts it using given method and key.

Params:

data: The data

method: The cipher method

key: The key

options: options can be one of OPENSSL_RAW_DATA, OPENSSL_ZERO_PADDING.

iv: a non-NULL Initialization Vector.

tag: The authentication tag in AEAD cipher mode. If it is incorrect,
the authentication fails and the function returns FALSE.

aad: Additional authentication data.

Returns the decrypted string on success, FALSE on failure.

Emits an E_WARNING level error if an unkonwn cipher algo is passed via the method
param.

Emits an E_WARNING level error if an empty value is passed in via the iv param

Changelog:

5.3.3 : The iv param was added

5.4.0 : The raw_output was changed to options

7.1.0 : The tag and aad parameters were added

The params, explained:

- $data can be raw or base64. If no $option is set (this is, if value of 0 is passed
in this param), data will be assumed to be base64 encoded. If parameter OPENSSL_RAW_DATA
is set, it will be understood as row data.

- $password (key) is a String of [pseudo] bytes as those generated by the function openssl_random_pseudo_bytes().

- $options as (as for 2016) two possible values OPENSSL_RAW_DATA and OPENSSL_ZERO_PADDING. Setting both can be
done by OPENSSL_RAW_DATA||OPENSSL_ZERO_PADDING. If no OPENSSL_ZERO_PADDING is specified, default padding of PKCS#7
will be done.

- $iv is as in the case of $password, a String of bytes. Its length depends on the algorithm used.
May be the best way to generate an $iv is by:

<?php
	$iv = openssl_random_pseudo_bytes(openssl_cipher_iv_length('your algorithm')); //for example your algo = 'AES-256-CTR'
?>

The param string $password msut be in binary form and is derived from the exadecimal key value.

example:

encrypting in command line console with openssl
openssl AES-256-CBC -K <stuff1> -iv <stuff2> -in doc.txt -out doc.enc.txt

Decrypting it in PHP:

$key = hex2bin('<stuff1>');
$iv = hex2bin('<stuff2>');

$output = openssl_decrypt($encstr, 'AES-256-CBC', $key, OPENSSL_RAW_DATA, $iv);

In case that hosting do not provide openssl_encrypt decrypt functions - it could be mimiced
via command prompt executions

this function will check is if openssl is installed and try to use it by default

function sslPrm()
{
	return array("your_password", "IV (optional)", "aes-128-cbc");
}
function sslEnc($msg)
{
	list($pass, $iv, $method)=sslPrm();
	if(function_exists('openssl_encrypt'))
		return urlencode(openssl_encrypt(urlencode($msg), $method, $pass, false, $iv));
	else
		return urlencode(exec(echo \"".urlencode($msg)."\" | openssl enc -".urlencode($method)." -base64 -nosalt -K
".bin2hex($pass)." -iv ".bin2hex($iv)));
}
function sslDec($msg)
{
	list ($pass, $iv, $method)=sslPrm();
	if(function_exists('openssl_decrypt'))
		return trim(urldecode(openssl_decrypt(urldecode($msg), $method, $pass, false, $iv)));
	else
		return trim(urldecode(exec("echo \"".urldecode($msg)."\" | openssl enc -".$method." -d -base64 -nosalt -K
".bin2hex($pass)." -iv ".bin2hex($iv))));
}

//Example of usage
$r = sslEnc("This is encryption/decryption test!");
echo "<br>\n".$r.":".sslDec($r);

openssl_decrypt(...) works with most but not all method types.
This list can vary, depending on the data (Message) and key (Password) used.

See the following code and edit the $text and $password values.
Code checks if text is the same after encrypting then decrypting it.

Note:
	You can still use openssl_encrypt(..) with;
	User enters 'Log-in password'
	(Encrypted and stored using openssl_encrypt)
	Next time.
	User logs-in with 'Log-in password'
	(Check that encrypted 'Log-in password' = stored data)

<CODE>
	//Please edit the $password=... and $text=...

	$password = "This is a journey into sound";

	$text = "";
	for($charNo=0; $charNo<=255; $charNo=$charNo+1){
		// if($charNo==127) {$charNo=$charNo+1;}
		if(!$charNo<127){
			// $text = $text."&#x".strtoupper(dechex($charNo)).";";
			$text = $text.chr($charNo);
		} else {
			$text = $text.chr($charNo);
		}
	}

$text = "this is a test message";
	
	print "<TABLE BORDER=\"1\">\n";
	print "<TR><TD><B>Encryption type:</B></TD><B>String after converting back:</B></TD></TR>\n";
	$ciphers = openssl_get_cipher_methods();
	for($pointer=0; $pointer<count($ciphers); $pointer=$pointer+1){
		$edit = EncryptDecrypt($text, true, $password, $ciphers[$pointer]);
		$check = EncryptDecrypt($edit, false, $password, $ciphers[$pointer]);
		if($text!=$check){
			$info = $check;
			print "<TR><TD>".$ciphers[$pointer]."</TD><TD>".$info."</TD></TR>\n";
		}
	}
	print "</TABLE>\n";

function EncryptDecrypt($oldText, $encryptIt=true, $password="PASSWORD", $encryptType=""){
	$ciphers = openssl_get_cipher_methods();
	$foundEncType = false;
	for($pointer=0; $pointer<count($ciphers); $pointer=$pointer+1){
		if($ciphers[$pointer]==$encryptType){$foundEncType=true;}
	}
	if(!$foundEncType){
		$encryptType = "RC2-64-CBC"; //Default value used if not set or listed
	}
	if($encryptIt){
		$newText = openssl_encrypt($oldText,$encryptType,$password);
	} else {
		$newText = openssl_decrypt($oldText,$encryptType,$password);
	}
	return $newText;
}
</CODE>
The following, sometimes, do not work:

	DES-EDE3-CFB1 	(sometimes)
	aes-128-gcm
	aes-192-gcm
	aes-256-gcm
	des-ede3-cfb1 (sometimes)
	id-aes128-GCM
	id-aes192-GCM
	id-aes256-GCM

openssl_dh_compute_key:

Computes shared secret for public value of rmeote DH key and local DH key

string openssl_dh_compute_key ( string $pub_key, resource $dh_key )

openssl_digest:

Computes a digest

string openssl_digest ( string $data , string $method [, bool $raw_output = false ] )

Computes a digest hash value for the given data using a given method, and returns a raw
or binhex encoded string.

Params:

data: The data.

method: The digest method.

raw_output: Setting to TRUE will return as raw output data, otherwise the return value is 
binhex encoded.

Emits an E_WARNING level error if an unkonwn signature algo is passed via the method param.

The second argument should be one of the values returned by openssl_get_md_methods() rather than
hash_algos() 'Hash' and 'OpenSSL' are independent extensions and support different selection
of digest algos. Notably, Hash supports some non-cryptographic hashes like adler or crc.

openssl_encrypt:

Encrypts data

string openssl_encrypt ( string $data , string $method, string $key [, int $options = 0 [, string $iv = "" [, string &$tag = NULL [,
	string $aad = "" [, int $tag_length = 16 ]]]]] )

Encrypts given data with given method and key, returns a raw or base64 encoded string

params:

data: The data

method: The cipher method. For a list of available methods, use openssl_get_cipher_methods()

key: The key

options: Options is a bitwise disjunction of the flags OPENSSL_RAW_DATA and OPENSSL_ZERO_PADDING

iv: A non-NULL initialization Vector

tag: The authentication tag passed by reference when using AED cipher mode (GCM or CCM)

aad: Additional authentication data

tag_length: The length of the auth tag. Its value can be between 4 and 16 for GCM mode.

Emits an E_WARNING level if an unkonwn cipher algo is passed in via the method param

Emits an E_WARNING level error if an empty value is passed in via the iv parameter

Changes:

5.3.3 	The iv param was added

5.4.0 	The raw_output was changed to options

7.1.0 	The tag, aad, and tag_length parameters were added.

There is a lot of confusion plus some false guidance on the openssl lib:

the basic tips are:

aes-256-ctr is arguably the best choice for cipher algo as of 2016. This avoids potentional security
issues (so-called padding oracle attacks) and bloat from algos that pad to a certain block size.
aes-256-gcm is preferable, usable with 7.1, where the openssl lib is enhanced.

Use different random data for the initialization vector each time encryption is  made with the same key.
mcrypt_create_iv() is one choice for random data. AES uses 16 byte blocks, so you need 16 bytes for the iv.

Join the iv data to the encrypted result and extract the iv data again when decrypting.

Pass OPENSSL_RAW_DATA for the flags and encode the result if nessecary after adding in the iv data.

Hash the chosen encryption key (the pw param) using openssl_digest() with a hash function such as 
sha256, and use the hashed value for the pw param.

There is a simple Cryptor class on Github called php-openssl-cryptor that demonstrates encryption/decryption
and hashing with openssl, along with how to produce and consume the data in base 64 and hex as well as binary.
It would lay the foundations for better understanding and making effective use of openssl with PHP.

Hopefully it will help anyone looking to get started with this lib.

Notes about the params:

data - Is interpeted as a binary string

method - Regex string, make sure you check openssl_get_cipher_methods() for a list of the ciphers available
in your server

password - As biohazard mentioned before, this is actually the KEY, it should be in hex format

options - as explained in the Params section

iv - Initialization vector. Binary string.

To verify the length/format of your IV, you can provide strings of different lengths and check the 
error log. For example, in PHP 5.5.9 (Ubuntu 14.04 LTS), providing a 32 byte hex string (which would
represent a 16 byte binary IV ) throws an error

"IV passed is 32 bytes long which is logner than the 16 expected by the selected cipher" (cipher chosen was
'aes-256-cbc' which uses an IV of 128 bits, its block size).
Alternatively, you can use openssl_cipher_iv_length().

From the security standpoint, make sure you understand whether your IV needs to be random, secret or encrypted.
Many times the IV can be non-secret but it has to be a cryptographically secure random number. Make sure
you generate it with an appropiate function like openssl_random_pseudo_bytes(), not mt_rand().

Note that the available cipher methods can differ between your dev server and your prod server. They will
depend on the installation and compilation options used for OpenSSL in your machine(s).

PHP lacks a build-in function to encrypt and decrypt large files. `openssl_encrypt()` can be used to encrypt
strings, but loading a huge file into memory is a bad idea.

So we have to write a userland function doing that. This example uses the symmetric AES-128-CBC algorithm to
encrypt smaller chunks of a large file and writes them into another file.

#Encrypt files

<?php
// Define the number of blocks that should be read from the source file for each chunk
// For 'AES-128-CBC' each block consists of 16 bytes.
// So if we read 10.000 blocks we load 160kb into memory. You may adjust this value 
// to read/write shorter or longer chunks
define('FILE_ENCRYPTION_BLOCKS', 10000);

//Encrypt the passed file and save the results in a new file with ".enc" as suffix.
// 
// @param string $source Path to file that should be encrypted
// @param string $key The key used for encryption
// @param string $dest File name where teh encrypted file should be written to
// @return string|false Returns the file name that has been created or FALSE if an error occurred

function encryptFile($source, $key, $dest)
{
	$key = substr(sha1($key, true), 0, 16);
	$iv = openssl_random_pseudo_bytes(16);

	$error = false;
	if ($fpOut = fopen($dest, 'w')) {
		//Put the initialization vector to the beginning of the file
		fwrite($fpOut, $iv);
		if ($fpIn = fopen($source, 'rb')) {
			while (!feof($fpIn)) {
				$plaintext = fread($fpIn, 16 * FILE_ENCRYPTION_BLOCKS);
				$ciphertext = openssl_encrypt($plaintext, 'AES-128-CBC', $key, OPENSSL_RAW_DATA, $iv);
				//use the first 16 bytes of the ciphertext as the next IV
				$iv = substr($ciphertext, 0, 16);
				fwrite($fpOut, $ciphertext);
			}
			fclose($fpIn);
		} else {
			$error = true;
		}
		fclose($fpOut);
	} else {
		$error = true;
	}

	return $error ? false : $dest;
}
?>

#Decrypt

To decrypt files encrypted by the function above, you need the following method:

<?php
//
// Decrypt the Passed file and saves the result in a new file, removing the
// last 4 chars from file name.
//
// @param string $source Path to file that should be decrypted
// @param string $key The key used for the dec (must be the same as for enc)
// @param string $dest File name where the decrypted file should be written to
// @return string|false Returns the file name that has been created or FALSE if an error occured
//
function decryptFile($source, $key, $dest)
{
	$key = substr(sha1($key, true), 0, 16);

	$error = false;
	if ($fpOut = fopen($dest, 'w')) {
		if ($fpIn = fopen($source, 'rb')) {
			//Get the intiialization vector from the beginning of the file
			$iv = fread($fpIn, 16);
			while (!feof($fpIn)) {
				//We have to read one block more for decrypting than for encrypting
				$ciphertext = fread($fpIn, 16 * (FILE_ENCRYPTION_BLOCKS + 1));
				$plaintext = openssl_decrypt($ciphertext, 'AES-128-CBC', $key, OPENSSL_RAW_DATA, $iv);
				//Use the first 16 bytes of the ciphertext s the next iv
				$iv = substr($ciphertext, 0, 16);
				fwrite($fpOut, $plaintext);
			}
			fclose($fpIn);
		} else {
			$error = true;
		}
		fclose($fpOut);
	} else {
		$error = true;
	}

	return $error ? false : $dest;
}
?>

Many users give up with handling problem when openssl command line tool cannot decrypt php openssl encrypted
files which are encrypted with openssl_encrypt function.

An example of such:

<?php

$string = 'it works ? or it does not?';
$pass = '1234';
$method = 'ase128';

file_put_contents ('./file.encrypted', openssl_encrypt ($string, $method, $pass));

?>

However, to do it correctly, and to correctly decrypt it from cmd line:

<?php
	
	function strtohex($x)
	{
		$s='';
		foreach (str_split($x) as $c) $s.=sprintf("%02X",ord($c));
		return($s);
	}

	$source = 'It works!';

	$iv = "1234567812345678";
	$pass = '1234567812345678';
	$method = 'aes-128-cbc';

	echo "\niv in hex to use: ".strtohex ($iv);
	echo "\nkey in hex to use: ".strtohex ($pass);
	echo "\n";

	file_put_contents('./file.encrypted', openssl_encrypt ($source, $method, $pass, true, $iv));

	$exec = "openssl enc -".$method." -d -in file.encrypted -nosalt -nopad -K ".strtohex($pass)." -iv ".strtohex($iv);

	echo 'executing: '.$exec."\n\n";
	echo exec($exec);
	echo "\n";
?>

IV and Key params passed to openssl cmd line must be in hex representation of string.

The correct command for decrypting is:

# openssl enc -aes-128-cbc -d -in file.encrypted -nosalt -nopas -K 3132333435363738312333435363738 -iv
<same string again>

as it has no salt and no padding, by setting this functions third param we have no more base64 encodef ile to
decode.

Beware of the padding this method adds:

<?php
$encryption_key = openssl_random_pseudo_bytes(32);
$iv = openssl_random_pseudo_bytes(16);
$data = openssl_random_pseudo_bytes(32);

for ($i = 0; $i < 5; $i++) {
	 $data = openssl_encrypt($data, 'aes-256-cbc', $encryption_key, OPENSSL_RAW_DATA, $iv);
	 echo strlen($data) . "\n";
}
?>

The above will output:

48
64
80
96
112

This is because our $data is already taking all the block size, so the method is adding a new block
which will contain only padded bytes.

A solution to this, is to add the option OPENSSL_ZERO_PADDING along with the first one:

<?php
$data = openssl_encrypt($data, 'aes-256-cbc', $encryption_key, OPENSSL_RAW_DATA|OPENSSL_ZERO_PADDING, $iv);
?>

Only use this option if you know that the provided data has been padded, and avoid it if it already takes the whole
block size.

Since the $options are not documented, some clarification.

Behind the scenes, in the source code for /ext/openssl/openssl.c:

EVP_EncryptInit_ex(&cipher_ctx, NULL, NULL, key, (unsigned char *)iv);
if (options & OPENSSL_ZERO_PADDING) {
	EVP_CIPHER_CTX_set_padding(&cipher_ctx, 0);
}

And later:

if (options & OPENSSL_RAW_DATA) {
	outbuf[outlen] = '\0';
	RETVAL_STRINGL((char *)outbuf, outlen, 0);
} else {
	int base64_str_len;
	char *base64_str;

	base64_str = (char*)php_base64_encode(outbuf, outlen, &base64_str_len);
	efree(outbuf);
	RETVAL_STRINGL(base64_str, base64_str_len, 0);
}

As we can see, OPENSSL_ZERO_PADDING has a direct impact on the OpenSSL context. EVP_CIPHER_CTX_set_padding()
enables or disables padding (enabled by default).

So, OPENSSL_ZERO_PADDING disables padding for the context, which means that you will have to manually apply
your own padding out to the block size. Without using OPENSSL_ZERO_PADDING, you will automatically get PKCS#7 padding.

OPENSSL_RAW_DATA does not affect the OpenSSL context but has an impact on the format of the data returned to the
caller. When OPENSSL_RAW_DATA is specified, the returned data is returned as-is. When it is not specified, Base64
encoded data is returned to the caller.

We could download the PHP source code locally, so we can compare expected results and actual execution.

openssl_error_string:

Return openSSL error message

string openssl_error_string()

openssl_error_string() returns the last error from the openSSL library. Error messages are queued,
so this function should be called multiple times to collect all of the info. The last error will be hte
most recent one.

Returns an error message i nstr, or FALSE if there are none more to return.

Example of usage:

<?php
//Lets assume you just called an openssl function that failed
while ($msg = openssl_error_string())
	echo $msg . "<br />\n";
?>

Or we could clear it with:

while(openssl_error_string() !== false);

Some openssl functions will add errors to the list even if they succeed.

Also, note that there may be two or more lines for one error.

openssl_free_key:

Free key resource

void openssl_free_key ( resource $key_identifier )

openssl_free_key() frees the key associated with the specified key_identifier from memory.

openssl_get_cert_locations:

Retrieve the available certificate locations

array openssl_get_cert_locations()

openssl_get_cert_locations() returns an array with information about the available certificate
locations that will be searched for SSL certificates.

Example of usage:

<?php
var_dump(openssl_get_cert_locations());
?>

Example of output:

array(8) {
	["default_cert_file"]=>
	string(21) "/usr/lib/ssl/cert.pem"
	["default_cert_file_env"]=>
	string(13) "SSL_CERT_FILE"
	["default_cert_dir"]=>
	string(18) "/usr/lib/ssl/certs"
	["default_cert_dir_env"]=>
	string(12) "SSL_CERT_DIR"
	["default_private_dir"]=>
	string(20) "/usr/lib/ssl/private"
	["default_default_cert_area"]=>
	string(12) "/usr/lib/ssl"
	["ini_cafile"]=>
	string(0) ""
	["ini_capath"]=>
	string(0) ""
}

openssl_get_cipher_methods:

Gets available cipher methods

array openssl_get_cipher_methods ([ bool $aliases = false ] )

Gets a list of available cipher methods.

Params:

aliases: Set to TRUE if cipher aliases should be included within the returned array.

Returns an array of available cipher methods.

Example:

Shows how the available ciphers might look, and also which aliases might be available.

<?php
$ciphers = openssl_get_cipher_methods();
$ciphers_and_aliases = openssl_get_cipher_methods(true);
$cipher_aliases = array_diff($ciphers_and_aliases, $ciphers);

print_r($ciphers);

print_r($cipher_aliases);

?>

The above outputs something similar to:

Array
(
	[0] => AES-128-CBC
	[1] => AES-128-CFB
	[2] => AES-128-CFB1
	[3] => AES-128-CFB8
	[4] => AES-128-ECB
	[5] => AES-128-OFB
	[6] => AES-192-CBC
	etc.
)
And a second associative array with related keys.

openssl_get_md_methods:

Gets available digest methods

array openssl_get_md_methods ([ bool $aliases = false ] )

Gets a list of available digest methods.

Params:

aliases: Set to TRUE if digest aliases should be included within the returned array.

Returns an array of available digest methods.

Examples:

SHows how the available digest might look, and also which aliases might be available:

<?php
$digests = openssl_get_md_methods();
$digests_and_aliases = openssl_get_md_methods(true);
$digest_aliases = array_diff($digests_and_aliases, $digests);

print_r($digests);

print_r($digest_aliases);

?>

The above outputs associative arrays with respective elements.

openssl_get_privatekey:

Alias of openssl_pkey_get_private()

This function is an alias of openssl_pkget_get_private()

openssl_get_publickey:

Alias of openssl_pkey_get_public()

This function is an alias of openssl_pkey_get_public()

openssl_open:

Open sealed data

bool openssl_open ( string $sealed_data , string &$open_data, string $env_key, mixed $priv_key_id [, string $method ] )

openssl_open() opens (decrypts) sealed_data using the private key associated with the key identifier
priv_key_id and the envelope key env_key, and fills open_data with the decrypted data.

The envelope key is generated when the data are sealed and can only be used by one specific
private key. See openssl_seal() for more information.

Params:

sealed_data

open_data: If the call is successful the opened data is returned in this param.

env_key

priv_key_id

Returns TRUE on success, or FALSE on failure.

Example of usage:

<?php
// $sealed and $env_key are assumed to contain the sealed data
// and our envelope key, both given to us by the sealer.

// fetch private key from file and ready it
$fp = fopen("/src/openssl-0.9.6/demos/sign/key.pem", "r");
$priv_key = fread($fp, 8192);
fclose($fp);

$pkeyid = openssl_get_privatekey($priv_key);

// decrypt the data and store it in $open
if (openssl_open($sealed, $open, $env_key, $pkeyid)) {
	echo "here is the opened data: ", $open;
} else {
	echo "failed to open data";
}

// free the private key from memory
openssl_free_key($pkeyid);
?>

If PHP compiled without OpenSSL support, then we can call the openssl command-line utility
to achieve the same goal:

<?php
// $sealed and $env_key are assumed to contain the sealed data
// and our envelope key, both given to us by the sealer.

// specify private key file and passphrase
$pkey_file='key.pem';
$pkey_pp='netsvc';

// call openssll to decrypt the envelope key
$ph=proc_open('openssl resault -decrypt -inkey '.
escapeshellarg($pkey_file).' -passin fd:3',array(
	0 => array('pipe', 'r'), // stdin < envelope key
	1 => array('pipe', 'w'), // stdout > decoded envelope key
	2 => STDERR,
	3 => array('pipe', 'r'), //< passphrase
), $pipes);
//write envelope key
fwrite($pipes[0],$env_key);
fclose($pipes[0]);
//write private key passphrase
fwrite($pipes[3], $pkey_pp);
fclose($pipes[3]);
// read decoded key, convert to hexadecimal
$env_key = '';
while(!feof($pipes[1])){
	$env_key.=sprintf("%02x",ord(fgetc($pipes[1])));
}
fclose($pipes[1]);
if($xc=proc_close($ph)){
	echo "Exit code: $xc\n";
}

//call openssl to decrypt
$ph=proc_open('openssl rc4 -d -iv 0 -K '.$env_key,array(
	0 => array('pipe','r'), //stdin < sealed data
	1 => array('pipe','w'), //stdout > opened data
	2 => STDERR,
),$pipes);
//write sealed data
fwrite($pipes[0],$sealed);
fclose($pipes[0]);

//read opened data
//$open=stream_get_contents($pipes[1]);
$open='';
while(!feof($pipes[1])){
	$open.=fgets($pipes[1]);
}
fclose($pipes[1]);
if($xc=proc_close($ph)){
	echo "Exit code: $xc\n";
}

//Display the decrypted data
echo $open;

?>

openssl_pbkdf2:

Generates a PKCS5 v2 PBKDF2 string, defaults to SHA-1

string openssl_pbkdf2 ( string $password, string $salt, int $key_length, int $iterations [, string $digest_algorithm ] )

Params:

password

salt

key_length

iterations

digest_algorithm

Returns string or FALSE on failure

Despite the manual claiming this is available in PHP 5.5 and above, this function was not made available in
local install.

If we have PHP 5.5 and this function is not available from the OpenSSL extension, look for the functionaly 
equivalent of hash_pbkdf2 function.

openssl_pkcs12_export_to_file:

Exports a PKCS#12 Compatible Certificate Store File

bool openssl_pkcs12_export_to_file ( mixed $x509 , string $filename , mixed $priv_key, string $pass [, array $args ] )

openssl_pkcs12_export_to_file() stores x509 into a file named by filename in PKCS#12 file format.

Params:

x509: See Key/Certificate params for a list of valid values

filename: Path to the output file

priv_key: Private key component of PKCS#12 file

pass: Encryption password for unlocking the PKCS#12 file.

args: Can contain only extracerts, friendly_name

extracerts - additional certificates (can be file or string)
friendly_name - "friendly name" for the certificate and private key. This name is typically
displayed in list boxes by software importing the file.

openssl_pkcs12_export:

Exports a PKCS#12 Compatible Certificate Store File to variable.

bool openssl_pkcs12_export ( mixed $x509 , string &$out , mixed $priv_key, string $pass [, array $args ] )

openssl_pkcs12_export() stores x509 into a string named by out in a PKCS#12 file format.

Params:

x509: See Key/Certificate params for a list of valid values.

out: On success, this will hold the PKCS#12

priv_key: Private key component of PKCS#12 file.

pass: Encryption PW for unlocking the PKCS#12 file.

args

Returns TRUE on success, false on failure.

If your cert is not PW protected, just use null or a blank string. Otherwise, this function won't work.

If you need to provide multiple additional certificates, the 'extracerts' argument needs to be an array
with one certificate per element:

<?php
$args = array(
	'extracerts' => array(
		0 => '-----BEGIN CERTIFICATE----- cert1 ...',
		1 => '-----BEGIN CERTIFICATE----- cert2 ...',
		//...
		)
	);
?>

You can use this to prepare a PEM:

<?php
$pemChain = '...';
preg_matcH_all('/(-----BEGIN CERTIFICATE-----.*?-----END CERTIFICATE-----)/si', $pemChain, $matches);
$args = array('extracerts' => $matches[0]);
openssl_pkcs12_export($signed_csr, $certificate_out, $private_key_resource, $passphrase, $args);
?>

In order to export a private key to pkcs12 format, the input certificate must contain both
private and associated public key in PEM format:

----BEGIN RSA PRIVATE KEY-----
----END RSA PRIVATE KEY-----

----BEGIN CERTIFICATE-----
----END CERTIFICATE----

else this function might return the following error "openssl_pkcs12_export(): cannot get cert from parameter 1"

If you want to include CA-Certificates in the PKCS12 it can be accomplished by using the $args parameter.

<?php
$args = array(
				'extracerts' => $CAcert,
				'friendly_name' => 'My signed cert by CA certificate'
				);
openssl_pkcs12_export($signed_csr, $certificate_out, $private_key_resource, $passphrase, $args);
?>

openssl_pkcs12_read:

Parse a PKCS#12 Certificate Store into an array

bool openssl_pkcs12_read ( string $pkcs12 , array &$certs , string $pass )

openssl_pkcs12_read() parses the PKCS#12 certificate store supplied by pkcs12 into an array named certs.

params:

pkcs12: The certificate store contents, not its file name

certs: On success, this will hold the Certificate Store Data.

pass: Encryption password for unlocking the PKCS#12 file.

Returns TRUE on success, FALSE on failure.

Example of usage:

<?php
if (!$cert_store = file_get_contents("/certs/file.p12")) {
	echo "Error: Unable to read the cert file\n";
	exit;
}

if (openssl_pkcs12_read($cert_store, $cert_info, "my_secret_pass")) {
	echo "Certificate Information\n";
	print_r($cert_info);
} else {
	echo "Error: Unable to read the cert store.\n";
	exit;
}
?>

openssl_pkcs7_decrypt:

Decrypts an S/MIME encrypted message

bool openssl_pkcs7_decrypt ( string $infilename , string $outfilename , mixed $recipcert [, mixed $recipkey ] )

Decrypts the S/MIME encrypted message contained in the file specified by infilename using the certificate
and its associated private key specified by recipcert and recipkey.

Params:

infilename

outfilename: The decrypted message is written to the file specified by outfilename

recipcert

recipkey

Returns true on success, False on failure.

Example:

<?php
// $cert and $key are assumed to contain your personal certificate and private
// key pair, and that you are the recipient of an S/MIME message
$infilename = "encrypted.msg"; //This file holds your encrypted message
$outfilename = "decrypted.msg"; //make sure you can write to this file

if (openssl_pkcs7_decrypt($infilename, $outfilename, $cert, $key)) {
	echo "decrypted!";
} else {
	echo "failed to decrypt!";
}
?>

If you want to decrypt a received email, keep in mind that you need the full encrypted message, 
including the mime header.

<?php

// Get the full message
$encrypted = imap_fetchmime($stream, $msg_number, "1", FT_UID);
$encrypted .= imap_fetchbody($stream, $msg_number, "1", FT_UID);

//Write the needed temp files
$infile = tempnam("", "enc");
file_put_contents($infile, $encrypted);
$outfile = tempnam("", "dec");

//The cert stuff
$public = file_get_contents("/path/to/your/cert.pem");
$private = array(file_get_contents("/path/to/your/cert.pem"), "password");

//Ready? Go!
if(openssl_pkcs7_decrypt($infile, $outfile, $public, $private))
{
	//Decryption successful
	echo file_get_contents($outfile);
}
else
{
	//Decryption failed
	echo "Oh oh! Decryptioned faiiiiiiiiiiiiiiiiiiiiiiiiiiiiiLEEEEEEEEEEEEEED";
}

//Remove the temp files
@unlink($infile);
@unlink($outfile);

?>

openssl_pkcs7_encrypt:

Encrypt an S/MIME message

bool openssl_pkcs7_encrypt ( string $infile , string $outfile , mixed $recipcerts , array $headers [, int $flags = 0 [,
	int $cipherid = OPENSSL_CIPHER_RC2_40 ]] )

openssl_pkcs7_encrypt() takes the contents of the file named infile and encrypts them using an RC2 40-bit cipher so that
they can only be read by the intended recipients specified by recipcerts.

params:

infile

outfile

recipcerts: Either a lone X.509 certificate, or an array of X.509 certificates.

headers: headers is an array of headers that will be prepended to the data after it has been
encrypted.

headers can be either an associative array keyed by header name, or an indexed array, where each element
contains a single header line.

flags: flags can be used to specify options that affect the encoding process - see PKCS7 constants.

cipherid: One of the cipher constants.

Returns TRUE on success or FALSE on failure.

Example of usage:

<?php
// the message you want to encrypt and send to your secret agent
// in the field, known as nighthawk. You have his certificate
// in the file nighthawk.pem
$data = <<<EOD
Nighthawk,

BLA MESSAGE

EOD;

//laod key
$key = file_get_contents("nighthawk.pem");

// save message to file
$fp = fopen("msg.txt", "w");
fwrite($fp, $data);
fclose($fp);

//Encrypt it
if (openssl_pkcs7_encrypt("msg.txt", "enc.txt", $key,
	array("To" => "nighthawk@example.com", //keyed syntax
		 "From: HQ <hq@example.com>",
		 "Subject" => "Eyes only"))) {
	//message encrypted - send it
	exec(ini_get("sendmail_path") . " < enc.txt");
}
?>

In the previous example, the decrypted message could not be read by the "popular" mail clients.
Those mail clients needed also headers in the encrypted part.

I also noticed that there were some double headers in the previous example ("To:" and "Subject:" were not overriden
by the Headers parameter in mail()). This is also corrected by unsetting "To:" and "Subject:" in $headers_msg.

body.txt is the file with the mail body.
publickey.cer is the file with the public certificate.

<?php
//Setup mail headers
$headers = array("From" => "from@mail.com", "To" => "to@mail.com", "Subject" => "Encrypted mail readable with most clients",
	"X-Mailer" => "PHP/".phpversion());

//get hte public key certificate
$pubkey = file_get_contents("publickey.cer");

//Header for encrypted part
$eol = "\r\n";
$enc_header = "From: ".$headers['From'].$eol;
$enc_header = "To: ".$headers['To'].$eol;
$enc_header = "Subject: ".$headers['Subject'].$eol;
$enc_header = "Content-Type: text/plain; format=flowed; charset=\"iso-8859-1\"; reply-type=original".$eol;
$enc_header = "Content-Transfer-Encoding: 7bit".$eol;
$enc_header = "\n";

//prepend header for encrypted message
$body = file_get_contents("body.txt");
$msg = $enc_header.$body;
file_put_contents("msg.txt", $msg);

//remvoe some double headers for mail()
$headers_msg = $headers;
unset($headers_msg['To'], $headers_msg['Subject']);

//Encrypt message
openssl_pkcs7_encrypt("msg.txt", "enc.txt", $pubkey, $headers_msg, 0, 1);

//Separate headers and body for mail()
$data = file_get_contents("enc.txt");
$parts = explode("\n\n", $data, 2);

//Send mail
mail($headers['To'], $headers['Subject'], $parts[1], $parts[0]);
?>

To build on what people have already done, below is a function that takes a from address,
an array of e-mails/public keys, a subject and a message and sends otu an encrypted message
using the appropiate public key.

Since we are sending an encrypted message, the assumption is that what we're sending is actually
critical. As a result the files used for sending the message are immideatly shredded.

$recipients = Array("user@example.com"=>file_get_contents("cert.pem"));
$body = 'secret text';
	sendSignedMail("me@example.com", $recipients, "Test Message", $body);

	//Recepients is an array of E-mail address=>Key
	function sendSignedMail($from, $recepients, $subject, $body){
		foreach($recepients AS $email=>$key){
		$tfn_in = tempnam("/tmp", "b");
		$tfn_out = tempnam("/tmp", "e");

		$handle = fopen($tfn_in, "w");
		fwrite($handle, $body);
		fclose($handle);

		openssl_pkcs7_encrypt($tfn_in, $tfn_out, $key,
			array("To" => $email,
					"From" => $from,
					"Subject" => $subject), 0);
		$data = file_get_contents($tfn_out);

		//Shred hte files since it is sensitive data
		$handle = popen("/usr/bin/shred -n 3 -u $tfn_in", 'r');
		pclose($handle);
		$handle = popen("/usr/bin/shred -n 3 -u $tfn_out", 'r');
		pclose($handle);

		$parts = explode("\n\n", $data, 2); //Fixes headers in mail function

		mail($email, $subject, $parts[1], $parts[0]);
	}
}


Amongst the many discussions about signing or encrypting email by itself, none really discuss
the pain of having an email BOTH signed and encrypted.

What do you do first? Sign then Encrypt? Or Encrypt then Sign?

According to RFC 2311, you can encrypt then sign or sign then encrypt. However, it depends
on the client in which you are programming for. In my experience, in Outlook 2k, it refers
Encrypt and then SIgn. While in outlook 2003 it is Sign then encrypt.

Generally, you want to sign and then encrypt, as it seems most logical from a snail-mail
piece of point of view.

You first sign a letter then put it in the envelope. Certain clients complain if you do
it in an order it does not like, so you may want to experiment with it.

Example of doing both signing and encrypting.

When you perform the first function, do NOT Put in any headers in the headers array params,
you want to put it in the SECOND function you want to perform. If you put headers in the
first function, the second function will hide it from mail servers.  Which we do not want.

<?php
//Setup mail headers.
$headers = array("To" => "someone@nowhere.net",
	"From" => "noone@somewhere.net",
	"Subject" => "A signed and encrypted message");

//Sign the message first
openssl_pkcs7_sign("msg.txt", "signed.txt",
	"signing_cert.pem", array("private_key.pem",
	"password"),array());

//Get the public key certificate
$pubkey = file_get_contents("cert.pem");

//Encrypt the message, now put in the headers.
openssl_pkcs7_encrypt("signed.txt", "enc.txt",
	$pubkey,$headers,0,1);

$data = file_get_contents("enc.txt");

//Separate header and body, to use with mail function
// unfortunate but required, else we have two sets of headers
// and the email client does not decode the attachment
$parts = explode("\n\n", $data, 2);

// send mail (headers in the Headers parameter will override those
// generated for the To & Subject params)
mail($mail, $subject, $parts[1], $parts[0]);
?>

Note that if you use a function that picks up the data from the disk to be used in another funciton
in your program, remember that you may have to use the explode ("\n\n", $data,2) function which may
have removed the spacing between the header and the message content.

When you take the signed message and feed it in to the encryption part, you ahve to remember that the
line spacing must also be fed AS PART OF THE MESSAGE BODY! If you plan to sign then encrypt,
do not feed the header output from the signing into the encrypting as part of the headers array
parameter. The output of the signing should stay as part of the message body being encrypted.

(And the same is true if you are doing the reverse of encrypting then signing). An example of
both the signing and encryption function made in to a routine for reusability, and then called
to sign and encrypt a message.

//Example of signing and encrypting executed from a routine function for code reusability through a program

THIS IS WRONG:
<?php
// [0] of Array contains headers of message. [1] of Array contains signed body of message.
$signedOutputArray = signMessage($inputMessage,$headers);

// [0] of Array contains headers of message and teh signing
// [1] of Array contains encrypted body of message without the signing header
$signedAndEncryptedArray = encryptMessage($signedOutputArray[1], $signedOutputArray[0]);

mail($emailAddr,$subject,$signedAndEncryptedArray[1],
	$signedAndEncryptedArray[0]);
?>

THIS IS CORRECT!
<?
// [0] of Array contains headers of signing
// [1] of Array contains signed body of message.
$signedOutputArray = signMessage($inputMessage,array());

// [0] of Array contains headers of message
// [1] of Array contains encrypted contents of both the signed message and its headers of the signing
$signedAndEncryptedArray =
	encryptMessage($signedOutputArray[0] . "\n\n" . $signedOutputArray[1],$headers);

mail($emailAddr, $subject, $signedAndEncryptedArray[1],
	$signedAndEncryptedArray[0]);
?>

For everyone who spent lots of time trying to encrypt multipart/alternative email with
no success:

1.) put complete email (header together with body) into file to encrypt as in example from koen:

<?php
$body = file_get_contents("body.txt");
$msg = $enc_header.$body;
file_put_contents("msg.txt", $msg);
?>

2.) headers array sent to openssl_pkcs7_encrypt cannot contain some of the headers. It conflicts/doubles
and some clients have problem with it - i.e Thunderbird does not show you the email body.
The headers that worked, were: "Subject", "To", "From", "Reply-To", "Date", "Return-Receipt", "Message-ID",
"CC", "X-Priority", "X-Mailer"

One more thing, if your public key for encryption is not working, check if you are sending certificate
with key, not only pure key (must be accompanied by a cert)

The example used in the documentation, is wrong. Correction of it:

<?php
// the message you want to encrypt and send to your secret agent
// in the field, known as nighthawk. You have his cert
// in the file nighthawk.pem
$data = <<<EOD
Nighthawk,

Top Secret, for your eyes only!

FOK U!

EOD;

//load key
$key = implode("", file("my.pem"));

//save message to file

$fp = fopen("msg.txt", "w");
fwrite($fp, $data);
fclose($fp);

//encrypt it
if (openssl_pkcs7_encrypt("msg.txt", "enc.txt", $key,
	array("To" => "example@example.com", //keyed syntax
		  "From: HQ <hq@cia.com>", //index syntax
		  "Subject" => "Eyes only")))
{
	//message encrypted - send it
	exec(ini_get("sendmail_path") . " < enc.txt");
}
?>

Note, that for this function to work, a 64 bit encoded Cert is needed.

openssl_pkcs7_sign:

Sign an S/MIME message

bool openssl_pkcs7_sign ( string $infilename , string $outfilename, mixed $signcert , mixed $privkey , array $headers [,
	int $flags = PKCS7_DETACHED [, string $extracerts ]] )

openssl_pkcs7_sign() takes the contents of the file named infilename and signs them using the certificate and its 
matching private key specified by signcert and privkey parameters.

params:

infilename

outfilename

signcert

privkey

headers: headers is an array that will be prepended to the data after it has been signed (see openssl_pkcs7_encrypt() for more info
about the format of this param)

flags: flags can be used to alter the output - see PKCS7 constants.

extracerts: extracerts specifies the name of a file containing a bunch of extra certs to include in the signature which can
for example be used to help the recipient to verify the certificate you used.

Returns TRUE on success, FALSE on failure.

Example of usage:

<?php
//Message you want to sign so that recipient can be sure thati t was you who sent it
$data = <<<EOD

DICKS

EOD;

//save message to file
$fp = fopen("msg.txt", "w");
fwrite($fp, $data);
fclose($fp);
//encrypt it
if (openssl_pkcs7_sign("msg.txt", "signed.txt", "file://mycert.pem",
	array("file://mycert.pem", "mypassphrase"),
	array("To" => "joes@example.com", //keyed syntax
		"From: HQ <ceo@example.com>", //indexed syntax
		"Subject" => "Eyes only")
	)) {
	//message signed, send it
	exec(ini_get("sendmail_path") . " < signed.txt");
}
?>

If you are getting the error of : error getting private key

Then this can be resolved by using the realpath() for every param of openssl_pkcs7_sign. In my case,
the code looks like as follows:

<?php
$Certif_path = 'certificate/mycertificate.pem';

$clearfile = "certificate/random_name";
$encfile = $clearfile . ".enc";
$clearfile = $clearfile . ".txt";

// fill $clearfile with the mail to be signed

openssl_pkcs7_sign(realpath($clearfile),
							realpath('.').'/'.$encfile, //because $encfile does not exist yet we cannot use realpath($encfile);
							'file://'.realpath($Certif_path),
							array('file://'.realpath($Certif_path), PUBLIC_KEY),
							array('To' => TO_EMAIL,
								   'From' => FROM_EMAIL,
								   'Subject' => ""),
							PKCS7_DETACHED));
?>

This command does not work on WIN32 with IIS. Mails are not interpeted correctly by ISS SMTP server 
(and by outlook too). The reaosn is that UNIX and Windows interpet the enter to the next line ascii 
code in a different way.

A workaround to this:

<?php

$data = <<<EOD

Testing some shit

EOD;

//save message to a file
$fp = fopen("msg.txt", "w");
fwrite($fp,$data);
fclose($fp);

//Sign the message using the sender's keys
openssl_pkcs7_sign("msg.txt", "signed.eml", "file://c:/max/cert.pem",
array("file://c:/max/priv.pem", "your_password"),
array("To" => "recipient <recipient@mail.com>",
"From" => "sender <sender@mail.com>",
"Subject" => "Order Notification - Test"),PKCS7_DETACHED,"c:\max\extra_cert.pem");

$file_arry = file("signed.eml");
$file = join("", $file_arry);
$message = preg_replace("/\r\n|\r|\n/", "\r\n", $file);

$fp = fopen("c:\Inetpub\mailroot\Pickup\signed.eml", "wb");
flock($fp, 2);
fputs($fp, $message);
flock($fp, 3);
fclose($fp);

?>

Besides, if you want to use the keys created with windows, you should export them (from IE) to the form of
PKCS#12 file (*.pfx)

Install OpenSSLWin32

execute openssl.exe

enter the commands:

pkcs12 -in <pfx-file> -nokeys -out <pem-certs-file>

pkcs12 -in <pfx-file> -nocerts -nodes -out <pem-key-file>

Next export from IE Root CA certificate as Base-64 *.cer and rename the file to *.pem

A note about the $flags param: PKCS7_BINARY has 2 effects:

converts LF to CR+LF, as described in http://www.php.net/manual/en/openssl.pkcs7.flags.php
it it creates an opaque pkcs7 signature (p7m)

If you want to prevent the LF->CR+LF conversion *and* still have a detached signature (p7s), use PKCS7_BINARY 
| PKCS7_DETACHED (both flags are set).

If the signed message is already MIME multi-part, using both flags as described above seems to be the right
solution to assemble the message properly. Without any flags, apparently only some of the LF chars are converted.

In a specific scenario (the local MTA is Postfix and then the message goes through sendmail on another machine),
the MIME boundaries get scrambled in sendmail. However, this does not seem to happen if the local MTA is sendmail.

Also, note that sign --> encrypt -> sign, is the most effective way to ensure safety of a document.

Since it layers security and concludes belonging in terms of who is to decrypt it etc.

openssl_pkcs7_verify:

Verifies the signature of an S/MIME signed message

mixed openssl_pkcs7_verify ( string $filename, int $flags [, string $outfilename [, array $cainfo [, string $extracerts [,
	string $content ]]]] )

openssl_pkcs7_verify() reads the S/MIME message contained in the given filed and examines the digital signature.

Params:

filename: Path to the message

flags: flags can be used to affect how the signature is verified - see PKCS7 constants for more info

outfilename: If the outfilename is specified, it hsould be a string holding the name of a file into
which the certs of the persons that signed the messages will be stored in PEM format.

cainfo: If the cainfo is specified, it should hold information about the trusted CA certificates
to use in the verification process - see certificate verification for more information about this parameter.

extracerts: if the extracerts is specified, it is the filename of a file containing a bunch of certs to use
as untrusted CAs.

content: You can specify a filename with content that will be filled with the verified data, but with the
signature info stripped.

Returns TRUE if signature is verified, FALSE if it is not correct (the message has been tampered with, or the signing
cert is not valid) or -1 on error.

As specified in RFC 2045, lines may not be longer than 76 characters in the filename parameter.

openssl_pkey_export_to_file:

gets an exportable representation of a key into a file

bool openssl_pkey_export_to_file ( mixed $key, string $outfilename [, string $passphrase [, array $configargs ]] )

openssl_pkey_export_to_file() saves an ASCII-armoured (PEM encoded) rendition of key into the file name by
outfilename.

Note: you need to have a valid openssl.cnf installed or pointed at in configs, to have this function operate
correctly.

Params:

key

outfilename: Path to the output file

passphrase: The key can be optionally protected by a passphrase

configargs: configargs can be used to fine-tune the export process by specifying
and/or overriding options for the openssl ocnfiguration file. See openssl_csr_new()
for more info about configargs.

Returns TRUE on success, FALSE on failure.

Cannot be used to export a public key, as it throws:

Warning: openssl_pkey_export_to_file(): supplied key param is a public key

On Linx (PHP 5.6), this function will overwrite an existing keyfile, unless the keyfile
is marked as read-only, in which case you will get an error:

error:0200100D:system library:fopen:Permission denied

openssl_pkey_export:

Gets an exportable representation of a key into a string

bool openssl_pkey_export ( mixed $key , string &$out [, string $passphrase [, array $configargs ]] )

openssl_pkey_export() exports key as a PEM encoded string and stores it into out (which is passed by reference)

Params:

key

out

passphrase: The key is optionally protected by passphrase

configargs: configargs can be used to fine-tune the export process by
specifying and/or overriding options for the openssl configuration file.
See openssl_csr_new() for more info about configargs.

Returns TRUE on success, FALSE on failure.

<?php
//Create the keypair
$res=openssl_pkey_new();

//get private key
openssl_pkey_export($res, $privkey, "PassPhrase number 1");

//Get public key
$pubkey = openssl_pkey_get_details($res);
$pubkey = $pubkey["key"];

//var_dump($privkey);
//var_dump($pubkey);

//Create the keypair
$res2=openssl_pkey_new();

//Get private key
openssl_pkey_export($res2, $privkey2, "This is a passPhrase");

//get public key
$pubkey2 = openssl_pkey_get_details($res2);
$pubkey2 = $pubkey2["key"];
var_dump($privkey2);
var_dump($pubkey2);

$data = "Only I know the purple fox. Trala la";

openssl_seal($data, $sealed, $ekeys, array($pubkey, $pubkey2));

var_dump("sealed");
var_dump(base64_encode($sealed));
var_dump(base64_encode($ekeys[0]));
var_dump(base64_encode($ekeys[1]));

//Decrypt the data and store it in $open
if (openssl_open($sealed, $open, $ekeys[1], openssl_pkey_get_private ($privkey2, "this is a passPhrase"))){
	echo "here is the opened data: ". $open;
} else {
	echo "failed to open data";
}

?>

Outputs:

string(963) "-----BEGIN RSA PRIVATE KEY-----"
Proc-Type: 4, ENCRYPTED
DEK-Info: DES-EDE3-CBC, DA1943487C9C83B2

<string>
-----END RSA PRIVATE KEY------

"
string(272) "-----BEGIN PUBLIC KEY-----
<string>
-----END PUBLIC KEY-----
"
string(6) "sealed"
string(52) "<stuff>"
string(172) "<stuff again>"
here is the opened data: Only i know the purple fox. Tralala

Again, this function is not capable of exporting PEM-encoded public keys.

Using an emtry string into the openssl_pkey_export, causes the key to still be encrypted.
The only way to not cause encryption, is NULL.

This function can be used to create a private key for use by JCE in Java. FOr example, a private 
key could be generated by a PHP script and the result could be used in a Java client app.

Java requires the private key in DER format with some extra ASN.1 wrapping. The function below
can be used to convert the output of openssl_pkey_export into a format suitable for input
into JCE:

<?php
	function derLength($length) {
		if ($length < 128) return str_pad(dechex($length), 2, '0', STR_PAD_LEFT);
		$output = dechex($length);
		if (strlen($output) % 2 != 0) $output = '0'.$output;
		return dechex(128 + strlen($output)/2) . $output;
	}
	function convertPemToDer($pem) {
		$matches = array();
		if (!preg_match('~^-----BEGIN ([A-Z ]+)-----\s*?([A-Za-z0-9+=/\r\n]+)\s*?-----END \1-----\s*$~D', $pem,
$matches)) {
			die('Invalid PEM format encountered.', "\n");
		}
		$derData = base64_decode(str_replace(array("\r", "\n"), array('', ''), $matches[2]));
		$derData = pack('H*', '020 etc. (just tons of numbers)'.derLength(strlen($derData))) . $derData;
			$derData = pack('H*', '30'.derLength(strlen($derData))) . $derData;
			return $derData;
	}
?>

Example of usage:

<?php
	$keys = openssl_pkey_new(array('digest_alg' => 'sha1', 'private_key_type' => OPENSSL_KEYTYPE_RSA,
'private_key_bits' => 2048));
	if ($keys === false) die('Failed to generate key pair.', "\n");
	if (!openssl_pkey_export($keys, $privateKey)) die('Failed to retrieve private key.', "\n");
	$javaKey = convertPemToDer($privateKey);

	file_put_contents('key_for_java.der', $javaKey);
?>


Exporting a public key for use with JCE is trickier, since the Java libs require the key to be
input as a byte array. In effect, the public key outputted by openssl_pkey_get_details() must be
base64 decoded as above, and then parsed as ASN.1 to receive the actual key bytes (this can be done
either on the PHP side or the Java side).

The following link is an invaluable resource to understanding the output from these functions:
http://luca.ntop.org/Teaching/Appunti/asn1.html

Can look at the page if i get time over. Looks to be mostly rules regarding byte flipping etc.

openssl_pkey_free:

Frees a private key

void openssl_pkey_free ( resource $key )

This function frees a private key created by openssl_pkey_new()

Param: 

key: Resource holding the key

openssl_pkey_get_details:

Returns an array with the key details

array openssl_pkey_get_details ( resource $key )

This function returns the key details (bits,key,type)

Params:

key : Resource holding the key.

Return values:

Returns an array with the key details in success or FALSE in failure. Returned array has indexed bits
(number of bits), key (string representation of the public key) and type (type of the key which is one
of openssl_KEYTYPE_RSA, OPENSSL_KEYTYPE_DSA, OPENSSL_KEYTYPE_DH, OPENSSL_KEYTYPE_EC or -1 meaning unknown)

Depending on the key type used, additional details may be returned. Note that some elements may not 
always be available.

OPENSSL_KEYTYPE_RSA, an addtional array key named "rsa", containing the key data is returned.

Key

"n"

"e"

"d"

"p"

"q"

"dmp1"

"dmq1"

"iqmp"

OPENSSL_KEYTYPE_DSA, an additional array key named "dsa", containing the key data is returned.

Key

"p"

"q"

"g"

"priv_key"

"pub_key"

OPENSSL_KEYTYPE_DH, an additional array key named "dh", containing the key data is returned

"p"

"g"

"priv_key"

"pub_key"

The missing descriptions for the elements are as follows:

"n" - modulus

"e" - publicExponent

"d" - privateExponent

"p" - prime1

"q" - prime2

"dmp1" - exponent1, d mod (p-1)

"dmq1" - exponent2, d mod (q-1)

iqmp - coefficient, (inverse of q) mod p

openssl_pkey_get_private:

Get a private key

resource openssl_pkey_get_private ( mixed $key [, string $passphrase = "" ] )

openssl_get_privatekey() parses key and prepares it for use by other functions

Params:

key: Key can be one of the following:

A string having the format file://path/to/file.pem. The named file must contain a PEM
encoded certificate/private key (it may contain both)

A PEM formatted private key

passphrase: The optional parameter passphrase msut be used if the specified key is encrypted
(protected by a passphrase)

Returns a positive key resource identifier on success, or FALSE on error.

It is actually "file://key.pem" when you want to give a relative path using unix systems.
It will be three / in case of absolute path (e.g "file:///home/username/...") But this path
conists of two '/' originated from "file://" and one '/' from the fact that home is a subfolder
of the unix filesystem's root directory ("/home/username/...").

This two part will be concatenated and you will get three '/' chars followinge ach other.

So you only have to concatenate "file://" with an existing path string in every case.

openssl_pkey_get_public:

Extract public key from certificate and prepare it for use

resource openssl_pkey_get_public ( mixed $certificate )

openssl_get_publickey() extracts the public key from certificate and prepares it for use by
other functions.

Params:

certificate:

certificate can be one of the following:

1. an X.509 certificate resource

2. a string having the format file://path/to/file.pem. The named file must contain a PEM
encoded certificate/public key (it may contain both)

3. A PEM formatted public key.

Returns a positive key resource identifier on success, or FALSE on error.

You can get (and save to file) public key using openssl_pkey_get_details(resource $key) function:

<?php
$pub_key = openssl_pkey_get_public(file_get_contents('./cert.crt'));
$keyData = openssl_pkey_get_details($pub_key);
file_put_contents('./key.pub', $keyData['key']);
?>

If you are trying to read a PKCS#1 RSA public key you run into trouble, because openssl wants the public
key in X.509 style.

The PKCS#1 RSA public key:

-----BEGIN RSA PUBLIC KEY-----
<string>
-----END RSA PUBLIC KEY-----

is not readable, while the X.509 style public key:

-----BEGIN PUBLIC KEY-----
<stuff>
-----END PUBLIC KEY-----

is.

You can use a dirty and easy  work around to read the PKCS#1 RSA anyway. The first few bytes of the
X.509 style public key contain header information and can shameless be copied.

In other words: Delete everything after the first 32 bytes (from the above X.509 key (starting behind Q8A of the string))
and attach your PKCS#1 data, reformat to 64 bytes length and use it with openssl.

Please note: The above example only works for 2048 bit length.

You should always check the return result and only call openssl_error_string after calling an
openssl function that returned failure (false).

You must also use the string representation of the certificate to get the public key resource:

$dn = array(); //use defaults
$res_privkey = openssl_pkey_new();
$res_csr = openssl_csr_new($dn, $res_privkey);
$res_cert = openssl_csr_sign($res_csr, null, $res_privkey, $ndays);

openssl_x509_export($res_cert, $str_cert);

$res_pubkey = openssl_pkey_get_public($str_cert);

openssl_pkey_new:

generates a new private key

resource openssl_pkey_new ([ array $configargs ] )

openssl_pkey_new() generates a new private and public key pair. The public component
of the key can be obtained using openssl_pkey_get_public()

Params:

configargs: You can finetune the key generation (such as specifying the number of bits) using configargs.
See openssl_csr_new() for more info about configargs.

Returns a resource identifier for the pkey on success, or FALSE on error.

If you try to generate a new key using openssl_pkey_new(), and need to specify the size of the key,
the key MUST be type-bound to integer

//works
$keysize = 1024;
$ssl = openssl_pkey_new (array('private_key_bits' => $keysize));

//fails
$keysize = "1024";
$ssl = openssl_pkey_new (array('private_key_bits' => $keysize));

// works (force to int)
$keysize = "1024";
$ssl = openssl_pkey_new (array('private_key_bits' => (int)$keysize));

Also, an working example:

$config = array(
	"digest_alg" => "sha512",
	"private_key_bits" => 4096,
	"private_key_type" => OPENSSL_KEYTYPE_RSA,
);

//Create the private and public key
$res = openssl_pkey_new($config);

//Extract the private key from $res to $privKey
openssl_pkey_export($res, $privKey);

//Extract the public key from $res to $pubKey
$pubKey = openssl_pkey_get_details($res);
$pubKey = $pubKey["key"];

$data = "plaintext data goes here";

//Encrypt the data to $encrypted using the public key
openssl_public_encrypt($data, $encrypted, $pubKey);

//Decrypt the data using the private key and store the results in $decrypted
openssl_private_decrypt($encrypted, $decrypted, $privKey);

echo $decrypted;


If you are using openssl_pkey_new() in conjunction with openssl_csr_new() and want to change
the CSR digest algorithm as well as specify a custom key size, the configuration override
should be defined once and sent to both functions:

<?php
$config = array(
	'digest_alg' => 'sha1',
	'private_key_bits' => 2048,
	'private_key_type' => OPENSSL_KEYTYPE_RSA,
);

$privkey = openssl_pkey_new($config);

$csr = openssl_csr_new($dn, $privkey, $config);
?>

Although openssl_pkey_new() will accept the 'digest_alg' argument it will not use
it, and setting the value has no effect unless you also set this value for openssl_csr_new().

The reason for this is that the $config array is acting as a drop-in replacement for the values
found in the openssl.cnf file, so it must contain all of the override values that you need 
even if the function they're being sent to will not use them.

Also, if you change the 'digest_alg' to something like 'sha256' and still get an MD5 signed
CSR check your openssl.cnf file to see whether the digest algo you want to use is actually
supported.

If we wish to modify the default private key size, we can construct a size and use that:

<?php
$config = array('private_key_bits' => 512);
$privKey = openssl_pkey_new($config);
?>

Mind though, the lowest allowed bits is 384. Any lower will throw an error.

openssl_private_decrypt:

Decrypts data with private key

bool openssl_private_decrypt ( string $data , string &$decrypted , mixed $key [, int $padding = OPENSSL_PKCS1_PADDING ] )

openssl_private_decrypt() decrypts data that was previously encrypted via openssl_public_encrypt() and stores
the result into decrypted.

You can use this function e.g to decrypt data which is supposed to only be available to you.

Params:

data

decrypted

key: key must be the private key corresponding that was used to encrypt the data

padding: padding can be one of OPENSSL_PKCS1_PADDING, OPENSSL_SSLV23_PADDING, OPENSSL_PKCS1_OAEP_PADDING,
	OPENSSL_NO_PADDING

Returns TRUE on success, FALSE on failure.

Encrypt using public key, decrypt using private key.

Use this to store stuff in your database: Unless someone
has your private key, the database contents are useless.

Also, use this for sending to a specific individual: Get their public key, encrypt the message,
only they can use their private key to decode it.

<?php
echo "Source: $source";
$fp=fopen("/path/to/certificate.crt", "r");
$pub_key=fread($fp,8192);
fclose($fp);
openssl_get_publickey($pub_key);

//NOTE: here you can use the $pub_key value (converted)
openssl_public_encrypt($source, $crypttext, $pub_key);
echo "String crypted: $crypttext";

$fp=open("/path/to/private.key", "r");
$priv_key=fread($fp,8192);
fclose($fp);
// $passphrase is required if your key is encoded (suggested)
$res = openssl_get_privatekey($priv_key,$passphrase);

//NOTE: Here you can use the returned resource value
openssl_private_decrypt($crypttext, $newsource, $res);
echo "String decrypt: $newsource";
?>

openssl_private_encrypt:

Encrypts data with private key

bool openssl_private_encrypt ( string $data , string &$crypted , mixed $key [, int $padding = OPENSSL_PKCS1_PADDING ] )

openssl_private_encrypt() encrypts data with private key and stores the result into crypted. Encrypted data
can be decrypted via openssl_public_decrypt().

This function can be used e.g. to sign data (or its hash) to prove that it is not written by someone else.

Params:

data

crypted

key

padding: padding can be one of OPENSSL_PKCS1_PADDING or OPENSSL_NO_PADDING

Returns TRUE on success, FALSE on failure

Depending on the length of the key, defines how many max chars openssl can encrypt, as follows:

For a 1024 bit key length => max number of chars (bytes) to encrypt = 1024/8 - 11(when padding used) = 117 chars (bytes)

For a 2048 bit key length => max number of chars (bytes) to encrypt = 2048/8 - 11(when padding used) = 245 chars (bytes)

and so on.

By the way, if openssl_private_encrypt fails because of data size you won't get anything but just false 
as returend value, teh same for openssl_public_decrypt() on decryption.

Depending on key length, we get a differentiating amount of raw bytes in blocks:

For a 1024 bit key length => encrypted number of raw bytes is always a block of 128 bytes (1024 bits) by RSA
design.

For a 2048 bit key length => encrypted number of raw bytes is always a block of 258 bytes (2048 bits) by RSA design.

etc.

About base64_encode output length, it depends on what you encode (meaning it depends on the bytes resulting after
encryption) but in general the resulting encoded string will be about a 33% bigger (for 128 bytes about 170 bytes
and for 256 bytes about 340 bytes)

<?php
//given the variables as constants:
	
	//block size for encryption block cipher
	private $ENCRYPT_BLOCK_SIZE = 200; // this for 2048 bit key for example, leaving some room

	//Block size for decryption block cipher
	private $DECRYPT_BLOCK_SIZE = 256; //this again for 2048 bit key

	//For encryption we would use:
	function encrypt_RSA($plainData, $privatePEMKey)
	{
		$encrypted = '';
		$plainData = str_split($plainData, $this->ENCRYPT_BLOCK_SIZE);
		foreach($plainData as $chunk)
		{
			$partialEncrypted = '';

			//using for example OPENSSL_PKCS1_PADDING as padding
			$encryptionOk = openssl_private_encrypt($chunk, $partialEncrypted, $privatePEMKey, OPENSSL_PKCS1_PADDING);

			if($encryptionOk === false){return false;}//Also you can return and error if too big this will be false
			$encrypted .= $partialEncrypted;
		}
		return base64_encode($encrypted); //encoding the whole binary String as MIME base 64
	}

	//For decryption we would use:
	protected function decrypt_RSA($publicPEMKey, $data)
	{
		$decrypted = '';

		//decode must be done before splitting for getting the binary string
		$data = str_split(base64_decode($data), $this->DECRYPT_BLOCK_SIZE);

		foreach($data as $chunk)
		{
			$partial = '';

			//be sure to match padding
			$decryptionOK = openssl_public_decrypt($chunk, $partial, $publicPEMKey, OPENSSL_PKCS1_PADDING);

			if($decryptionOK === false){return false;} //here also process errors in decryption. if too big, this will be false

			$decrypted .= $partial;
		}
		return $decrypted;
	}
?>

openssl_public_decrypt:

Decrypts data with public key

bool openssl_public_decrypt ( string $data, string &$decrypted , mixed $key [, int $padding = OPENSSL_PKCS1_PADDING ] )

openssl_public_decrypt() decrypts data that was previous encrypted via openssl_private_encrypt() and stores the
result into decrypted.

You can use this function e.g to check if the message was written by the owner of the private key

Params:

data

decrypted

key: key must be the public key corresponding that was used to encrypt the data

padding: padding can be one of OPENSSL_PKCS1_PADDING or OPENSSL_NO_PADDING

Returns TRUE on success, or FALSE on failure.

openssl_public_encrypt:

Encrypts data with public key

bool openssl_public_encrypt ( string $data, string &$crypted, mixed $key [, int $padding = OPENSSL_PKCS1_PADDING ] )

openssl_public_encrypt() encrypts data with public key and stores the result into crypted. Encrypted data
can be decrypted via openssl_private_decrypt()

This function can be used e.g. to encrypt message which can be then read only by owner of the private key.
it can also be used to store secure data in a DB.

Params:

data

crypted: Holds the result of the encryption

key: The public key

padding: Padding can be one of OPENSSL_PKCS1_PADDING, OPENSSL_SSLV23_PADDING, OPENSSL_PKCS1_OAEP_PADDING
or OPENSSL_NO_PADDING

Returns TRUE on success or FALSE on failure

We cannot guarantee that RSA will still be trusted for security in 2016, but this is the current best practice
for RSA. The rest of the world is moving on to ECDH and EdDSA (e.g Ed25519)

That said, make sure you are using OPENSSL_PKCS1_OAEP_PADDING or else you are vurnable to a chosen-ciphertext
attack (google: "Daniel Bleichenbacher 1998 RSA padding oracle" and we will find plenty material on it)

The only fix is to use OAEP (preferable with MGF1-SHA256, but this function does not let you specify
that detail and defaults to MFG1+SHA1)

Phpseclib offers RSAES-OAEP + MGF1-SHA256 for encryption and RSASS-PSS + MGF1-SHA256 for signatures

An example of RSA usage:

<?php
include('Crypt/RSA.php');

$rsa = new Crypt_RSA();
$rsa->loadKey('...'); //public key

$plaintext = '...';

//$rsa->setEncryptionMode(CRYPT_RSA_ENCRYPTION_OAEP);
$ciphertext = $rsa->encrypt($plaintext);

$rsa->loadKey('...'); //private key
echo $rsa->decrypt($ciphertext);
?>

Options:

$rsa->setHash() //tells Crypt_RSA which hash algo to use. The default hash algo is sha1.

$rsa->setMFGHash() //tells Crypt_RSA which hash to use as the mask generation function. The
//default hash algo is sha1

chsnyder writes that the data is limited to 936 bits in his implementation.

Actually, it has nothing to do with RSA being CPU intensive, RAM or anything of the sort.

Basically, when you encrypt something using an RSA key (whether public or private), the encrypted
value must be smaller than the key (due to the maths used to do the actual encryption). So, if you have
a 1024-bit key, in theory you could encrypt an 1023-bit value (or a 1024-bit value smaller than the key)
with that key.

However, the PKCS#1 standard, which OpenSSL uses, specifies a padding scheme (so you can encrypt
smaller quantities without losing security), and that padding scheme takes a minimum of 11 bytes (it will be
longer if the value you are encrypting is smaller).

So the highest number of bits you can encrypt with a 1024-bit key is 936 bits because of this (unless you disable
the padding by adding the OPENSSL_NO_PADDING flag, in which case you can go up to 1023-1024 bits).
With a 2048-bit key it is 1960 bits instead.

But as chsnyder correctly wrote, the normal application of a public key encryption algo is to store a key
or a hash of the data you want to respectively encrypt or sign. A hash is typically 128-256 bits (the PHP
sha1() function returns a 160 bit hash). And an AES key is 128 to 256 bits. So either of those will
comfortably fit inside a single RSA encryption.

I figured it out. This function is not intended for general encryption and decryption. For that, you want
openssl_seal() and openssl_open().

When we cannot use the envelope functions, we can use the following for encrypting/decrypting:

function ssl_encrypt($source, $type, $key){
	//assumes 1024 bit key and encrypts in chunks

	$maxlength=117;
	$output='';
	while($source){
		$input = substr($source, 0, $maxlength);
		$source = substr($source, $maxlength);
		if($type=='private'){
			$ok = openssl_private_encrypt($input, $encrypted, $key);
		} else {
			$ok = openssl_public_encrypt($input, $encrypted, $key);
		}

		$output.=$encrypted;
	}
	return $output;
}

function ssl_decrypt($source, $type, $key){
	//the raw PHP decryption functions appear to work
	// on 128 byte chunks. So this decrypts long text
	// encrypted with ssl_encrypt()

	$maxlength = 128;
	$output = '';
	while($source){
		$input = substr($source, 0, $maxlength);
		$source = substr($source, $maxlength);
		if($type == 'private'){
			$ok = openssl_private_decrypt($input,$out,$key);
		} else {
			$ok = openssl_public_decrypt($input,$out,$key);
		}

		$output .= $out;
	}
	return $output;
}

If you need a message key, obtain it from the openssl_random_pseudo_bytes() function.

DO NOT just hash the current time -- an attacker will guess any such key very easily (he will just
has a bunch of likely times values and try them until he finds the right one. The attacker can generate
and test many millions of candidate hashes every minute using an Ordinary PC).

In terms of the $key param, it can take the resource $key returned from openssl_pkey_get_public() OR
find the value is text and passes the text to openssl_pkey_get_public() to get a valid resource.

The original:

<?php
function EncryptData($source)
{
	$fp = fopen("/etc/httpd/conf/ssl.crt/server.crt", "r");
	$pub_key_string = fread($fp, 8192);
	fclose($fp);
	openssl_get_publickey($pub_key);

	openssl_public_encrypt($source, $crypttext, $pub_key_string);
	// This simply passes the string contents of pub_key_string back to be decoded
	return(base64_encode($crypttext));
}
?>

Is more efficient:

<?php
function EncryptData($source)
{
	$fp=fopen("/etc/httpd/conf/ssl.crt/server.crt", "r");
	$pub_key_string = fread($fp, 8192);
	fclose($fp);
	$key_resource = openssl_get_publickey($pub_key);

	openssl_public_encrypt($source, $crypttext, $key_resource );
	//uses the already existing key resource
	return(base64_encode($crypttext));
}
?>

Shorter:

<?php
function EncryptData($source)
{
	$fp = fopen("/etc/httpd/conf/ssl.crt/server.crt", "r");
	$pub_key = fread($fp,8192);
	fclose($fp);

	openssl_public_encrypt($source, $crypttext, $pub_key);

	return(base64_encode($crypttext));
}
?>

Very important to recognize the maximum size $data string constraints and its relation to SSL bit
size as pointed out by others. Before i addressed the maximum size limit through blocking the data,
i was receiving these types of errors from openssl_error_string():

- error:0906D06C: PEM routines: PEM_read_bio:no start line OR
- error:0E06D06C: configuration file routines: NCONF_get_string: no value

Using a key (sha512, OPENSSL_KEYTYPE_RSA) with 2048 bits, i had a maximum message size of
245 bytes and 4096 bits yielded max size of 502 bytes. So, if you change your key size later,
in particular if you reduce the size of it, be aware it affects your maxium encryption length.

openssl_random_pseudo_bytes:

Generate a pseudo-random string of bytes

string openssl_random_pseudo_bytes ( int $length [, bool &$crypto_strong ] )

Generates a string of pseudo-random bytes, with the number of bytes determined by the length
parameter.

It also indicates if a cryptographically strong algo was used to produce the pseudo-random
bytes, and does this via the optional crypto_strong parameter. It is rare for this to be
FALSE, but some systems may be broken or old.

params:

length: The length of the desired string of bytes. Must be a positive integer. PHP will try to cast this param
to a non-null integer to use it.

crypto_strong: If passed into the function, this will hold a boolean value that determines if the algorithm
used was "cryptographically strong" e.g, safe for usage with GPG, passwords, etc. TRUE if it did, otherwise
FALSE.

Returns the generated string of bytes on success, or FALSE on failure.

<?php
for($i = -1; $i <= 4; $i++) {
	$bytes = openssl_random_pseudo_bytes($i, $cstrong);
	$hex = bin2hex($bytes);

	echo "Lengths: Bytes: $i and Hex. " . strlen($hex) . PHP_EOL;
	var_dump($hex);
	var_dump($cstrong);
	echo PHP_EOL;
}
?>

THe above will output something similar to:

Lengths: Bytes: -1 and Hex: 0
string (0) ""
NULL

Lengths: Bytes: 0 and Hex: 0
string(0) ""
NULL

Lengths: Bytes: 1 and Hex: 2
string(2) "42"
bool(true)

Lengths: Bytes: 2 and Hex: 4
string(4) "dc6e"
bool(true)

Lengths: Bytes: 3 and Hex: 6
string(6) "288591"
bool(true)

Lengths: Bytes: 4 and Hex: 8
string(8) "ab86d144"
bool(true)

Here is an example to show the distribution of random numbers as an image. Credit to Hayley
Watson at the mt_rand page for the original comparison between rand and mt_rand.

rand is red, mt_rand is green and openssl_random_pseudo_bytes is blue.

NOTE: This is only a basic representation of the distribution of the data. Has
nothing to do with the strength of the algorithms or their reliability.

<?php
header("Content-type: image/png");
$sizex=800;
$sizey=800;

$img = imagecreatetruecolor(3 * $sizex,$sizey);
$r = imagecolorallocate($img, 255, 0, 0);
$g = imagecolorallocate($img, 0, 255, 0);
$b = imagecolorallocate($img, 0, 0, 255);
imagefilledrectangle($img, 0, 0, 3 * $sizex, $sizey, imagecolorallocate($img, 255, 255, 255));

$p = 0;
for($i=0; $i < 100000; $i++) {
	$np = rand(0,$sizex);
	imagesetpixel($img, $p, $np, $r);
	$p = $np;
}

$p = 0;
for($i=0; $i < 100000; $i++) {
	$np = mt_rand(0, $sizex);
	imagesetpixel($img, $p + $sizex, $np, $g);
	$p = $np;
}

$p = 0;
for($i=0; $i < 100000; $i++) {
	$np = floor($sizex*(hexdec(bin2hex(openssl_random_pseudo_bytes(4)))/0xffffffff));
	imagesetpixel($img, $p + (2*$sizex), $np, $b);
	$p = $np;
}

imagepng($img);
imagedestroy($img);
?>

Until PHP 5.6 openssl_random_pseudo_bytes() did NOT use a cryptographically strong algo.

openssl_random_pseudo_bytes() can be incredibly slow on Windows, so muchso that it can
trigger timeout (>30 sec execution time), it is a known problem of OpenSSL.

Another replacement for rand() using OpenSSL.

Note that a solution where the result is truncated using the modulo operator ( % ) is not cryptographically
secure, as the generated numbers are not equally distributed, i.e some numbers may occur more often than others.

A better solution than using the modulo operator is to drop the result if it is too large and generate a new one.

<?php
function crypto_rand_secure($min, $max) {
	$range = $max - $min;
	if ($range == 0) return $min; //not so random
	$log = log($range, 2);
	$bytes = (int) ($log/8) + 1; //length in bytes
	$bits = (int) $log + 1; //length in bits
	$filter = (int) (1 << $bits) - 1; //Set all lowerb its to 1
	do {
		$rnd = hexdec(bin2hex(openssl_random_pseudo_bytes($bytes, $s)));
		$rnd = $rnd & $filter; //Discard irrelevant bits
	} while ($rnd >= $range);
	return $min + $rnd;
}
?>

If you do not have this function but you do have OpenSSL installed, you can always fake it:

<?php
	function openssl_random_pseudo_bytes($length) {
		$length_n = (int) $length; //shell injection is no fun
		$handle = popen("/usr/bin/openssl rand $length_n", "r");
		$data = stream_get_contents($handle);
		pclose($handle);
		return $data;
	}
?>

Remember to request at very least 8 bytes of entropy, ideally 32 or 64, to avoid possible theoretical
bruteforce attacks.

openssl_seal:

Seal (encrypt) data

int openssl_seal ( string $data , string &$sealed_data , array &$env_keys , array $pub_key_ids [, string $method = "RC4" ] )

openssl_seal() seals (encrypts) data by using the given method with a randomly generated secret key. The key is 
encrypted with each of the public keys associated with the identifiers in pub_key_ids and each encrypted key is returned
in env_keys.

This means that one can send sealed data to multiple recipients (provided one has obtained their public keys). Each recipient
must receive both the sealed data and the envelope key that was encrypted with the recipient's public key

params:

data: The data to seal

sealed_data: The sealed data

env_keys: Array of encrypted keys

pub_key_ids : Array of public key resource identifiers

method: The cipher method

Returns:

Returns the length of the sealed data on success, or FALSE on error. If succesful the sealed data is returned
in sealed_data, and the envelope key is env_keys.

Examples:

<?php
//$data is assumed to contain the data to be sealed

// fetch public keys for our recipients and ready them

$fp = fopen("/src/openssl-0.9.6/demos/maurice/cert.pem", "r");
$cert = fread($fp, 8192),
fclose($fp);
$pk1 = openssl_get_publickey($cert);

//Repaet for second recipient
$fp = fopen("/src/openssl-0.9.6/demos/sign/cert.pem", "r");
$cert = fread($fp, 8192);
fclose($fp);
$pk2 = openssl_get_publickey($cert);

// seal message, only owners of $pk1 and $pk2 can decrypt $sealed with keys
// $ekeys[0] and $ekeys[1] respectively
openssl_seal($data, $sealed, $ekeys, array($pk1, $pk2));

//Free the keys from memory
openssl_free_key($pk1);
openssl_free_key($pk2);
?>

While the default algo is using RC4, it is possible ot useo ther more secure algos. These are 
specified as the fifth param. Also, one needs to add an initialization vector (IV) random bytes. eg:

<?php
	$data = "This is top secret";
	//Fetch public keys for our recipients, and ready them
	$cert = file_get_contents('./cert.pem');

	$pk1 = openssl_get_publickey($cert);
	$iv = openssl_random_pseudo_bytes(32);
	openssl_seal($data, $sealed, $ekeys, array($pk1), "AES256", $iv);

	//Free the keys from memory
	openssl_free_key($pk1);
	echo base64_encode($sealed);
?>

It should be noted that the randomly generated secret key is 128 bits long (openssl: EVP_rc4(void): RC4 stream cipher).
This is a variable key length cipher with default key length 128 bits.)

Note: RC4 is not safe and should not be used. 

openssl_sign:

Generate signature

bool openssl_sign ( string $data, string &$signature, mixed $priv_key_id [, mixed $signature_alg = OPENSSL_ALGO_SHA1 ] )

openssl_sign() computes a signature for the specified data by generating a cryptographic digital signature using
the private key associated with priv_key_id. Note that the data itself is not encrypted.

Params:

data: the string of data you wish to sign

signature: If the call was succesful the signature is returned in signature.

priv_key_id:

resource - a key, returned by openssl_get_privatekey()

string - a PEM formatted key

signature_alg:

int - one of these Signature Algorithms. //Earlier up in the document. Follows pattern of constants

string - a valid string returned by openssl_get_md_methods() example, "sha256WithRSAEncryption" or "sha384"

Returns TRUE on success, or FALSE on failure.

Example of usage:

<?php
	// $data is assumed to contain the data to be signed

	// fetch private key from file and ready it
	$pkeyid = openssl_pkey_get_private("file://src/openssl-0.9.6/demos/sign/key.pem");

	//compute signature
	openssl_sign($data, $signature, $pkeyid);

	//Free the key from memory
	openssl_free_key($pkeyid);
?>

And another example:

<?php
 	// data you wish to sign
 	$data = 'my data';

 	//Create new private and public key
 	$new_key_pair = openssl_pkey_new(array(
 	"private_key_bits" => 2048,
 	"private_key_type" => OPENSSL_KEYTYPE_RSA,
 ));
 	openssl_pkey_export($new_key_pair, $private_key_pem);

 	$details = openssl_pkey_get_details($new_key_pair);
 	$public_key_pem = $details['key'];

 	//Create signature
 	openssl_sign($data, $signature, $private_key_pem, OPENSSL_ALGO_SHA256);

 	//save for later
 	file_put_contents('private_key.pem', $private_key_pem);
 	file_put_contents('public_key.pem', $public_key_pem);
 	file_put_contents('signature.dat', $signature);

 	//verify signature
 	$r = openssl_verify($data, $signature, $public_key_pem, "sha256WithRSAEncryption");
 	var_dump($r);
 ?>

 This may help if you want a real simple private/public key pair:

 <?php

 $data = "something";

 //You can get a simple private/public key pair using:
 // openssl genrsa 512 >private_key.txt
 // openssl rsa -pubout <private_key.txt >public_key.txt

 // IMPORTANT: The key pair below is provided for testing only
 // For security reasons you must get a new key pair
 // for production use, oviously

 $private_key = <<<EOD
 -----BEGIN RSA PRIVATE KEY-----
 <string>
 -----END RSA PRIVATE KEY-----
 EOD;
 $public_key = <<<EOD
 -----BEGIN PUBLIC KEY-----
 <string>
 -----END PUBLIC KEY-----
 EOD;

 $binary_signature = "";

 // at least with PHP 5.2.2 / OpenSSL 0.9.8b (Fedora 7)
 // there seems to be no need to call openssl_get_privatekey or similar
 // Just pass the key as defined baove
 openssl_sign($data, $binary_signature, $private_key, OPENSSL_ALGO_SHA1);

 //Check sig
 $ok = openssl_verify($data, $binary_signature, $public_key, OPENSSL_ALGO_SHA1);
 echo "check #1: ";
 if ($ok == 1) {
 	echo "signature ok (as it should be)\n";
 } elseif ($ok == 0) {
 	echo "bad (there is something wrong)\n";
 } else {
 	echo "Ugly, error checking signature\n";
 }

$ok = openssl_verify('tampered'.$data, $binary_signature, $public_key, OPENSSL_ALGO_SHA1);
echo "check #2: ";
if ($ok == 1) {
	echo "ERROR: Data has been tampered, but signature is still valid! ARGH!\n";
} elseif ($ok == 0) {
	echo "bad signature (as it should be, since data has been tampered)\n";
} else {
	echo "ugly, error checking signature\n";
}

?>

The list of Signature ALgos (constnats) is very limited. Forunatel the newer versions of 
php/openssl allow you to specify the signature algo as a string.

You can use the 'openssl_get_md_methods' method to get a list of digest methods. Only some
of them may be used to sign with RSA private keys.

Those that can be used to sign with RSA private keys are: md4, md5, ripemd160, sha, sha1,
sha224, sha256, sha384, sha512

Here's the modified example #1 with SHA-512 hash:

<?php
// $data is assumed to contain the data to be signed

//Fetch private key form fiel and reayd it
$fp = fopen("/src/openssl-0.9.6/demos/sign/key.pem", "r");
$priv_key = fread($fp, 8192);
fclose($fp);
$pkeyid = openssl_get_privatekey($priv_key);

//Compute signature with SHA-512
openssl_sign($data, $signature, $pkeyid, "sha512");

//Free the key from memory
openssl_free_key($pkeyid);
?>

The fourth param, signature alg to choose the signature alg can be ne of the following:


OPENSSL_ALGO_SHA1
OPENSSL_ALGO_MD5
OPENSSL_ALGO_MD4
OPENSSL_ALGO_MD2

openssl_spki_export_challenge:

Exports the challenge associated with a signed public key and challenge

string openssl_spki_export_challenge ( string &$spkac )

Exports challenge from encoded signed public key and challenge

Params:

spkac: Expects a valid signed public key and challenge

Returns the associated challenge string or NULL on failure.

Emits an E_WARNING level error if an invalid argument is passed via the
spkac parameter.

Example of extracting the associated challenge string or NULL on failure.

<?php
$pkey = openssl_pkey_new('secret password');
$spkac = openssl_spki_new($pkey, 'challenge string');
$challenge = openssl_spki_export_challenge(preg_replace('/SPKAC=/', '', $spkac));
?>

Example of extracting the associated challenge string from the <keygen> element:

<?php
$challenge = openssl_spki_export_challenge(preg_replace('/SPKAC=/', '', $_POST['spkac']));
?>
<keygen name="spkac" challenge="challenge string" ketype="RSA">

openssl_spki_export:

Exports a valid PEM formatted public key signed public key and challenge

string openssl_spki_export ( string &$spkac )

Exports PEM formatted public key from encoded signed public key and challenge

Params:

spkac: Expects a valid signed public key and challenge

Returns the associated PEM formatted public key or NULL on failure.

Emits an E_WARNING level error if an invalid argument is passed via the spkac parameter.

Example of extracting the associated PEM formatted public key or NULL on failure:

<?php
$pkey = openssl_pkey_new('secret password');
$spkac = openssl_spki_new($pkey, 'challenge string');
$pubKey = openssl_spki_export(preg_replace('/SPKAC=/', '', $spkac));

if ($pubKey) {
	echo $pubKey;
}
?>

Example of extracting the associated PEM formatted public key issued from the <keygen> element:

<?php
$spkac = openssl_spki_export(preg_replace('/SPKAC=/', '', $_POST['spkac']));
if ($spkac != NULL) {
	echo $spkac;
} else {
	echo "Extraction of pub key failed";
}
?>
<keygen name="spkac" challenge="challenge string" keytype="RSA">

openssl_spki_new:

Generate a new signed public key and challenge

string openssl_spki_new( resource &$privkey , string &$challenge [, int $algorithm = 0 ] )

Generates a signed public key and challenge using specified hashing algo

Params:

privkey: privkey should be set to a private key that was previously generated by openssl_pkey_new() (or otherwise
obtained from the other openssl_pkey family of functions). The corresponding public portion of the key will be
used to sign the CSR.

challenge: The challenge associated with the SPKAC

algorithm: The digest algorithm. See openssl_get_md_method()

returns a signed public key and challenge string or NULL on failure.

Emits an E_WARNING level error if an unknown signature algorithm is passed via the
algorithm parameter.

Example:

$config = array(
	"digest_alg" => "sha512",
	"private_key_bits" => 4096,
	"private_key_type" => OPENSSL_KEYTYPE_RSA,
);

//Create the public and private key
$res = openssl_pkey_new($config);

//Extract the priv key from $res to $privKey
openssl_pkey_export($res, $privKey);

//Extract the public key from $res to $pubKey
$pubKey = openssl_pkey_get_details($res);
$pubKey = $pubKey["key"];

$data = 'plaintext data goes here';

//Encrypt the data to $encrypted using the public key
openssl_public_encrypt($data, $encrypted, $pubKey);

//Decrypt hte data using the priv key and store the results in $decrypted
openssl_private_decrypt($encrypted, $decrypted, $privKey);

echo $decrypted;

Alas, to relate it back to our example, this just showcases that the openssl_pkey_new requires an array as first arg:

<?php
$config = array(
	"digest_alg" => "md5",
	"private_key_bits" => 4096,
	"private_key_type" => OPENSSL_KEYTYPE_RSA,
);

$pkey = openssl_pkey_new($config);

$spkac = openssl_spki_new($pkey, 'testing');

if ($spkac !== NULL) {
	echo $spkac;
} else {
	echo "SPKAC generation failed";
}
?>

openssl_spki_verify:

Verifies a signed public key and challenge

string openssl_spki_verify ( string &$spkac )

Verifies the supplied signed public key and challenge

params:

spkac: Expects a valid signed public key and challenge

Returns a boolean on success or failure.

Emits an E_WARNING level error if an invalid argument is passed via the spkac
parameter.

Example of validating a signed public key and challenge:

<?php
$pkey = openssl_pkey_new('secret password'); //maybe needs to be an array
$spkac = openssl_spki_new($pkey, 'challenge string');

if (openssl_spki_verify(preg_replace('/SPKAC=/', '', $spkac))) {
	echo $spkac;
} else {
	echo "SPKAC validation failed";
}
?>

Example of validating an existing signed public key and challenge issued from the <keygen> element:

<?php
if (openssl_spki_verify(preg_replace('/SPKAC=/', '', $_POST['spkac']))) {
	echo $spkac;
} else {
	echo "SPKAC validation failed";
}
?>
<keygen name="spkac" challenge="challenge string" keytype="RSA">

This openssl_spki_* funcs are very useful to use with <keygen/> tag in HTML5.

<?php
session_start();

//form submitted
if(isset($_POST['security']))
{
	// If true, the send from <keygen/> is valid and you can
	// test the challenge too
	if(openssl_spki_verify($_POST['security']))
	{
		//Gets challenge string
		$challenge = openssl_spki_export_challenge($_POST['security']);

		// if true, you are not trying to trick it
		// if user opens 2 windows to prevent the data lost from a "mistake" or him just pressing the back button
		// and re-send last data, you can handle it using something like this:
		if($challenge == $_SESSION['lastForm'])
		{
			echo 'Ok, this one is valid'. '<br><br>';
		}
		else
		{
			echo 'Nice try.. NICE TRY MOTHERCUCKER!!!!!!!!!!!!!!!!! *CLEAVEEEEEE*'. '<br><br>';
		}
	}
}

//If you open two windows, the challenge wont match
$_SESSION['lastForm'] = hash('md5', microtime(true));

?>

<!DOCTYPE html>
<html>
<body>

<form action="/index.php" method="post">
	Encryption: <keygen name="security" keytype="rsa" challenge="<?php echo $_SESSION['lastForm']; ?>"/>
	<input type="submit">
</form>

</body>
</html>

openssl_verify:

Verify signature

int openssl_verify ( string $data , string $signature , mixed $pub_key_id [, mixed $signature_alg = OPENSSL_ALGO_SHA1 ] )

openssl_verify() verifies that the signature is correct for the specified data using the public key associated with
pub_key_id. THis must be the public key corresponding to the private key used for signing.

Params:

data: The string of data used to generate this signature previously

signature: A raw binary string, generated by openssl_sign() or similar means

pub_key_id: resource - a key, returned by openssl_get_publickey()

string - a PEM formatted key, example "-----BEGIN PUBLIC KEY----- MIIBCgK..."

signature_alg:

int: one of these Signature ALgos //same algo list as before with SHa1 etc.

string: a valid string returned by openssl_get_md_methods() example, "sha1WithRSAEncryption" or "sha512"

Returns 1 if the signature is correct, 0 if it is incorrect and -1 on error

Example:

<?php
// $data and $signature are assumed to contain the data and the signature

//fetch public key from certificate and ready it
$pubkeyid = openssl_pkey_get_public("file://src/openssl-0.9.6/demos/sign/cert.pem");

//state whether signature is okay or not
$ok = openssl_verify($data, $signature, $pubkeyid);
if ($ok == 1) {
	echo "good";
} elseif ($ok == 0) {
	echo "bad";
} else {
	echo "ugly, error checking signature";
}
//Free the key from memory
openssl_free_key($pubkeyid);
?>

Another example of usage:

<?php
//data you want to sign
$data = 'my data';

//Create new private and public key
$private_key_res = openssl_pkey_new(array(
	"private_key_bits" => 2048,
	"private_key_type" => OPENSSL_KEYTYPE_RSA,
));
$details = openssl_pkey_get_details($private_key_res);
$public_key_res = openssl_pkey_get_public($details['key']);

//Create signature
openssl_sign($data, $signature, $private_key_res, "sha1WithRSAEncryption");

//verify signature
$ok = openssl_verify($data, $signature, $public_key_res, OPENSSL_ALGO_SHA1);
if ($ok == 1) {
	echo "valid";
} elseif ($ok == 0) {
	echo "invalid";
} else {
	echo "error: ".openssl_error_string();
}
?>

I have finally found a way to verify signature. Sample in the documentation does not work, code below DOES work:

<?php
//data is assumed to contain teh data to be signed

//fetch certificate from file and ready it
$fp = fopen("path/file.pem", "r");
$cert = fread($fp, 8192);
fclose($fp);

//state whether signature is okay or not
// use the certificate, not the public key
$ok = openssl_verify($data, $signature, $cert);
if ($ok == 1) {
	echo "good";
} elseif ($ok == 0) {
	echo "bad";
} else {
	echo "ugly, error checking signature";
}
?>

A note about the openssl_verify() and some of the other functions). The public key
comes from a certificate in any of the support formats (as the example shows, use
openssl_get_publickey() to get the resource id).

But after some trial and error i found the signature string MUST BE BINARY. While no errors occurs,
passing a base64-formatted signature string (PEM format?), you simply get a mismatch. When i did the
base64 decode myself, the verify returned a match (return value 1). You can simply drop the begin/end
lines and take the output of the 'base64_decode()' function.

I spent days scouring the php openssl documentation trying to figure out how to do what sounds
like a simple task - given two PEM encoded certificates, is one the signer of the other?

Nowhere in the openssl_verify() documentation or comments is it explained where to obtain the
signature of an existing certificate. The openssl_x509_parse() function looked promising,
but it is an unstable API that may change.

I had to write my own code to determine if one cert signed another, it is located here:

<?
// is one Pem encoded cert the signer of another?

// The PHP openssl functionality is severely limited by the lack of a stable
// api and documentation that might as well have been encrypted itself.
// In particular, the documentation on openssl_verify() never explains where
// to get the actual signature to verify.

// The isCertSigner() function below will accept two PEM encoded certs as args
// and will return true if one cert was used to sign the other.
// It only relies on the openssl_pkey_get_public() and openssl_public_decrypt()
// openssl functions, which should stay fairly stable.

//The ASN parsing code snippets were mostly borrowed from the horde project's smime.php

//If viewSource is in the request string, show the source
if (isset($_REQUEST['viewSource'])) {
	die(highlight_file(__FILE__));
	}

//Extract signature from der encoded cert.
// Expects x509 der encoded cert consisting of a section container
// containing 2 sections and a bitstream. The bitstream contains
// the original encrypted signature, encrypted by the public key
// of the issuing signer.
// @param string $der
// @return string on success
// @return bool false on failures
function extractSignature($der=false) {
	if (strlen($der) < 5) { return false; }
	//skip container sequence
	$der = substr($der,4);
	//now burn through two sequences and then return the final bitstream
	while(strlen($der) > 1) {
		$class = ord($der[0]);
		$classHex = dechex($class);
		switch($class) {
			//BITSTREAM
			case 0x03:
				$len = ord($der[1]);
				$bytes = 0;
				if ($len & 0x80) {
					$bytes = $len & 0x0f;
					$len = 0;
					for ($i = 0; $i < $bytes; $i++) {
						$len = ($len << 8) | ord($der[$i + 2]);
					}
				return substr($der, 3 + $bytes, $len);
			break;
			//SEQUENCE
			case 0x30:
				$len = ord($der[1]);
				$bytes = 0;
				if($len & 0x80){
					for($i = 0; $i < $bytes; $i++) {
						$len = ($len << 8) | ord($der[$i + 2]);
						}
					}
				$contents = substr($der, 2 + $bytes, $len);
				$der = substr($der, 2 + $bytes + $len);
			break;
			default:
				return false;
			break;
			}
		}
	return false; 
	}
//Get signature algo oid from der encoded signature data.
// Expects decrypted signature data from a certificate in der format.
// This ANS1 data should contain the following structure:
// SEQUENCE
// 		SEQUENCE
// 			OID (signature algo)
// 			NULL
// OCTET STRING (signature hash)
// @return bool false on failures
// @return string oid
function getSignatureAlgorithmOid($der=null) {
	//Validate this in the der we need...
	if (!is_string($der) or strlen($der) < 5) { return false; }
	$bit_seq1 = 0;
	$bit_seq2 = 2;
	$bit_oid = 4;
	if (ord($der[$bit_seq1]) !== 0x30) {
		die('Invalid DER passed to getSignatureAlgorithmOid()');
		}
	if (ord($der[$bit_seq2]) !== 0x30) {
		die('Invalid DER passed to getSignatureAlgorithmOid()');
		}
	if (ord($der[$bit_oid]) !== 0x06) {
		die('Invalid DER passed to getSignatureAlgorithmOid');
		}
	//strip out what we dont need and get the oid
	$der = substr($der, $bit_oid);
	//Get the oid
	$len = ord($der[1]);
	$bytes = 0;
	if ($len & 0x80) {
		$bytes = $len & 0x0f;
		$len = 0;
		for ($i = 0; $i < $bytes; $i++) {
			$len = ($len << 8) | ord($der[$i + 2]);
			}
		}
	$oid_data = substr($der, 2 + $bytes, $len);
	//Unpack the OID
	$oid = floor(ord($oid_data[0]) / 40);
	$oid .= '.' . ord($oid_data[0]) % 40;
	$value = 0;
	$i = 1;
	while ($i < strlen($oid_data)) {
		$value = $value << 7;
		$value = $value | (ord($oid_data[$i]) & 0x7f);
		if (!(ord($oid_data[$i]) & 0x80)) {
			$oid .= '.' . $value;
			$value = 0;
			}
		$i++;
		}
	return $oid;
	}

// Get signature hash from der encoded signature data.
// Expects decrypted signature data from a cert in der format
// This ASN1 data should contain the following structure:
// SEQUENCE
// 		SEQUENCE
// 			OID (signature algorithm)
// 			NULL
// OCTET STRING (signature hash)
// @return bool false on failures
// @return string hash
function getSignatureHash($der=null) {
	//Validare this is the der we need
	if (!is_string($der) or strlen($der) < 5) { return false; }
	if (ord($der[0]) !== 0x30) {
		die('Invalid DER passed to getSignatureHash()');
		}
	// strip out the container sequence
	$der = substr($der,2);
	if (ord($der[0]) !== 0x30) {
		die('Invalid DER passed to getSignatureHash()');
		}
	//get the length of first sequence so we can strip it out
	$len = ord($der[1]);
	$bytes = 0;
	if ($len & 0x80) {
		$bytes = $len & 0x0f;
		$len = 0;
		for ($i = 0; $i < $bytes; $i++) {
			$len = ($len << 8) | ord($der[$i + 2]);
			}
		}
	$der = substr($der, 2 + $bytes + $len);
	//Now we should have an octet string
	if (ord($der[0]) !== 0x04) {
		die('Invalid DER passed to getSignatureHash()');
		}
	$len = ord($der[1]);
	$bytes = 0;
	if ($len & 0x80) {
		$bytes = $len & 0x0f;
		$len = 0;
		for ($i = 0; $i < $bytes; $i++) {
			$len = ($len << 8) | ord($der[$i + 2]);
			}
		}
	return bin2hex(substr($der, 2 + $bytes, $len));
	}

//Determine if one cert was used to sign another
// Note that more than one CA cert can give a positive result, some certs
// re-issue signing certs after having only changed the expiration dates..
// @param string $cert - PEM encoded cert
// @param string $caCert - PEM encoded cert that possibly signed $cert
// @return bool
function isCertSigner ($certPem=null, $caCertPem=null) {
	if (!function_exists('openssl_pkey_get_public')) {
		die('Need the openssl_pkey_get_public() function.');
		}
	if (!function_exists('openssl_public_decrypt')) {
		die('Need the openssl_pubic_decrypt() function.');
		}
	if (!function_exists('hash')) {
		die('Need the php hash() function.');
		}
	if (empty($certPem) or empty($caCertPem)) { return false; }
	//Convert the cert to der for feeding to extractSignature.
	$certDer = pemToDer($certPem);
	if (!is_string($certDer)) { die('invalid certPem'); }

	//Grab the encrypted signature from the der encoded cert
	$encryptedSig = extractSignature($certDer);
	if (!is_string($encryptedSig)) {
		die('Failed to extract encrypted signature from certPem');
		}

	//Extract the public key from the ca cert, which is what has
	// been used to encrypt the signature in the cert.
	$pubKey = openssl_pkey_get_public($caCertPem);
	if ($pubKey === false) {
		die('Failed to extract the public key from the ca cert.');
		}

	//Attempt to decrypt the encrypted signature using the CA's public
	// key, returning the decrypted signature in $decryptedSig. If it cannot
	// be decrypted, this ca was not used to sign it for sure.
	$rc = openssl_public_decrypt($encryptedSig,$decryptedSig,$pubKey);
	if ($rc === false) { return false; }

	//we now have the decrypted signature which is der encoded
	//asn1 data containing the sig algo and sig hash
	// Now we need what was originally hashed by the issuer,
	// which is the original DER encoded cert without the
	// issuer and signature info
	$origCert = stripSignerAsn ($certDer);
	if ($origCert === false) {
		die('Failed to extract unsigned cert');
		}
	//Get the oid of the signature hash algo, which is required
	// to generate our own hash of the original cert. This hash is
	// what will be compared to the issuers hash.
	$oid = getSignatureAlgorithmOid($decryptedSig);
	if ($oid === false) {
		die('Failed to determine the signature algorithm');
		}
	switch($oid) {
		case '1.2.840.113549.2.2': 	$algo = 'md2'; break;
		case '1.2.840.113549.2.4': 	$algo = 'md4'; break;
		case '1.2.840.113549.2.5': 	$algo = 'md5'; break;
		case '1.3.14.3.2.18': 		$algo = 'sha'; break;
		case '1.3.14.3.2.26': 		$algo = 'sha1'; break;
		case '2.16.840.1.101.3.4.2.1': $algo = 'sha256'; break;
		case '2.16.840.1.101.3.4.2.2': $algo = 'sha384'; break;
		case '2.16.840.1.101.3.4.2.3': $algo = 'sha512'; break;
		default:
			die('Unknown signature hash algorithm oid: ' . $oid);
		break;
		}

	//Get the issuer generated hash from the decrypted signature
	$decryptedHash = getSignatureHash($decryptedSig);

	// Ok, hash the original unsigned cert with the same algo
	// and if it matches $decryptedHash we have a winner
	$certHash = hash($algo, $origCert);
	return ($decryptedHash === $certHash);
	}

	//Convert pem encoded certificate to DER encoding
	// @return string $derEncoded on success
	// @return bool false on failures
function pemToDer($pem=null) {
	if (!is_string($pem)) { return false; }
	$cert_split = preg_split('/(-----((BEGIN) | (END)) CERTIFICATE-----)/', $pem);
	if (!isset($cert_split[1])) { return false; }
	return base64_decode($cert_split[1]);
	}

//Obtain der cert with issuer and signature sections stripped.
// @param string $der - der encoded certificate
// @return string $der on success
// @return bool false on failures
function stripSignerAsn($der=null) {
	if (!is_string($der) or strlen($der) < 8) { return false; }
	$bit = 4;
	$len = ord($der[($bit + 1)]);
	$bytes = 0;
	if ($len & 0x80) {
		$bytes = $len & 0x0f;
		$len = 0;
		for($i = 0; $i < $bytes; $i++) {
			$len = ($len << 8) | ord($der[$bit + $i + 2]);
			}
		}
	return substr($der, 4, $len +4);
	}
//HTML form starts here
$answer = 'Enter PEM Encoded Certificates for the Issuer and Subject '
		. 'and click submit. Include the entire certificates, including '
		. 'the BEGIN CERTIFICATE and END CERTIFICATE lines.';

if (isset($_POST['subjectPem']) and isset($_POST['issuerPem'])) {
	if (strlen($_POST['subjectPem']) > 0 and strlen($_POST['issuerPem']) > 0) {
		$rc = isCertSigner($_POST['subjectPem'], $_POST['issuerPem']);
		if ($rc == true) {
			$answer = 'The issuer cert DID sign the subject cert.';
			} else {
			$answer = 'The issuer cert DID NOT sign the subject cert.';
			}
		}
	}
?>
<HTML>
<BODY BGCOLOR="white">
<HEAD>
<TITLE>Is This The Cert Signer?</TITLE>
<STYLE TYPE="text/css">
textarea {
	font-size: 11px;
	}
</STYLE>
</HEAD>
<BODY>
<DIV ALIGN="center">
<FORM NAME="check_certa" METHOD="post" action="<?= $_SERVER['PHP_SELF']; ?>">
<TABLE BORDER="1" WIDTH="500px">
	<TR>
		<TD><?= $answer; ?></TD>
	</TR>
	<TR>
		<TH>Issue Certificate (A HREF="#" ONCLICK="javascript:document.check_certs.issuerPem.value='';">clear</A></TH>
	</TR>
	<TR>
		<TD>
			<TEXTAREA NAME="issuerPem" ROWS="20" COLS="70"><?= (isset($_POST['issuerPem'])) ? $_POST['issuerPem'] : ''; ?></TEXTAREA>
		</TD>
	</TR>
	<TR>
		<TH>Subject Certificate (A HREF="#" ONCLICK="javascript:document.check_certs.subjectPem.value='';">clear</A>)</TH>
	</TR>
	<TR>
		<TD>
			<TEXTAREA NAME="subjectPem" ROWS="20" COLS="70"><?= (isset($_POST['subjectPem'])) ? $_POST['subjectPem'] : ''; ?></TEXTAREA>
		</TD>
	</TR>
	<TR>
		<TD ALIGN="right">
			(A HREF="<?= $_SERVER['PHP_SELF']: ?>?viewSource">view source</A>)
			<INPUT TYPE="submit" NAME="submit" VALUE="submit">
		</TD>
	</TR>
</TABLE>
</FORM>
</DIV>
</BODY>
</HTML>

In a nutshell, here is what i learned:

The signature data in a signed X.509 Certificate contains DER formatted data about the signature 
that is encrypt with the signers public key. The data contains a hash of the original subject certificate
and information about what encryption algorithm was used to create the signature.

So you need to get this signature data and a copy of the original certificate with the issuer and signature
sequences removed. Hash a copy of the original certificate (sans issuer/signature sequences) with the same
algorithm the issuer used and if the hashes match, you have the issuer cert that signed the certificate.

openssl_x509_check_private_key:

Checks if a private key corresponds to a certificate

bool openssl_x509_check_private_key ( mixed $cert , mixed $key )

Checks whether the given key is the private key that corresponds to cert.

Warning: The function does not check if key is indeed a private key or not. It merely compares
the public materials (e.g exponent and modulus of an RSA key) and/or key parameters (e.g EC params 
of an EC key) of a key pair..

This means, for example, that a public key could be given for key and the function may return TRUE.

Params:

cert: The certificate

key: The private key

Returns TRUE if key is the priv key that corresponds to cert, or FALSE otherwise.

This function will return FALSE if the private key requires a pass phrase.

openssl_x509_checkpurpose:

Verifies if a certificate can be used for a particular purpose

int openssl_x509_checkpurpose ( mixed $x509cert , int $purpose [, array $cainfo = array() [, string $untrustedfile ]] )

openssl_x509_checkpurpose() examines a cert to see if it can be used for the specified purpose.

Params:

x509cert: The examined cert

purpose:

openssl_x509_checkpurpose() purposes

Constant 					Desc

X509_PURPOSE_SSL_CLIENT 	Can the cert be used for the client side of an SSL connection

X509_PURPOSE_SSL_SERVER 	Can the cert be used for the server side of an SSL connection

X509_PURPOSE_NS_SSL_SERVER 	Can teh cert be used for Netscape SSL server

X509_PURPOSE_SMIME_SIGN 	Can the cert be used to sign S/MIME email

X509_PURPOSE_SMIME_ENCRYPT 	Can the cert be used to encrypt S/MIME email

X509_PURPOSE_CRL_SIGN 		Can the cert be used to sign a cert revocation list (CRL)

X509_PURPOSE_ANY 			Can the cert be used for Any/All purposes

These options are not bitfields - you may only specify one

cainfo: cainfo should be an array of trusted CA fields/dirs as described in Certificate Verification

untrustedfile: If specified, this should be the name of a PEM encoded file holding certificates that
can be used to help verify the cert, although no trust is placed in the certs that come from that file

Returns TRUE if the cert can be used for the intended purpose, FALSE if it cannot or -1 on error

The following example is an example usage of openssl_x509_checkpurpose. If it is equivalent to the
openssl verify command as follows:

openssl verify -CApath $openssl_cadir -purpose sslserver $openssl_crtfile

<?php
$openssl_crtfile = 'auth.combined.pem';
$openssl_cadir = './ca';

$x509_res = openssl_x509_checkpurpose($x509_res, X509_PURPOSE_SSL_SERVER, array($openssl_cadir));
if ($valid === true) {
	echo 'Certificate is valid for use as SSL server'."\n";
} else {
	echo 'Certificate validation returned'.$valid."\n";
}
?>

openssl_x509_export_to_file:

Exports a certificate to a file

bool openssl_x509_export_to_file ( mixed $x509 , string $outfilename [, bool $notext = TRUE ] )

openssl_x509_export_to_file() stores x509 into a file named by outfilename in a PEM encoded format.

Params:

x509: See Key/Certificate params for list of valid values

outfilename: Path to the output file

notext: The optional param notext affects teh verbosity of the output: if it is FALSE, then additional
human-readable information is included in the output. The default value of notext is TRUE.

Returns TRUE on success, or FALSE on failure.

openssl_x509_export:

Exports a certificate as a string

bool openssl_x509_export ( mixed $x509 , string &$output [, bool $notext = TRUE ] )

openssl_x509_export() stores x509 into a string named by output in a PEM encoded format.

Params:

x509: See Key/Certificate params for a list of valid values

output: On success, this will hold the PEM.

notext: The optional param notext affects the verbosity of the output; if it is FALSE, then additional
human-readable information is included in the output. The default value of notext is TRUE.

Returns TRUE on success, or FALSE on failure.

openssl_x509_fingerprint:

Calculates the fingerprint, or digest, of a given X509 Certificate

bool openssl_x509_fingerprint ( mixed $x509 [, string $hash_algorithm = "sha1" [, bool $raw_output = FALSE ]] )

openssl_x509_fingerprint() returns the digest of x509 as a string

params:

x509: See Key/Certificate params for a list of valid values

hash_algorithm: The has algo to use, e.g "md5" or "sha1"

raw_output: When set to TRUE, outputs raw binary data. FALSE outputs lowercase hexits.

Returns a string containing the calculated certificate fingerprint as lowercase hexits unless
raw_output is set to TRUE in which case the raw binary representation of the message digest is returned

Return FALSE on failure

openssl_x509_free:

Free certificate resource

void openssl_x509_free ( resource $x509cert )

openssl_x509_free() frees the certificate associated with the specified x509cert resource from memory

Params:

x509cert

openssl_x509_parse:

Parse an X509 certificate and return the info as an array

array openssl_x509_parse ( mixed $x509cert [, bool $shortnames = true ] )

openssl_x509_parse() returns info about the supplied x509cert, including fields such as subject name,
issuer name, purposes, valid from and valid to dates etc.

Params:

x509cert

shortnames: shortnames controls how the data is indeed in the array - if shortnames is true (The default) then fields
will be indexed with the short name form, otherwise, teh long name form will be used - e.g: CN is the shortname
form of commonName.

The structure of the return data is deliberately not documented, as it is under construction of being changed.

The identifier for the email portion of certificates in the name and subject array have changed since PHP4.
In PHP 4.3.0 the following array was returned (displayed my print_r())

[name] => /0=Grid/0=Globus/0=CCR Grid Portal/OU=Portal User/CN=Test User/Email=test@nospam.buffalo.edu
[subject] => Array
(
	[0] => Grid/O=Globus/O=CCR Grid Portal
	[OU] => Portal User
	[CN] => Test User
	[Email] => test@nospam.buffalo.edu
)

The result in PHP5 is (note Email -> emailAddress):

[name] => /O=Grid/O=Globus/O=CCR Grid Portal/OU=Portal User/CN=Test User/emailAddress=test@nospam.buffalo.edu
[subject] => Array
(
	[O] => Grid/O=Globus/O=CCR Grid Portal
	[OU] => Portal User
	[CN] => Test User
	[emailAddress] => test@nospam.buffalo.edu
)

Of course, the manual DOES say this could happen.

Alternative subjects can read as extensions:

[extensions]
			[subjectAltName] => DNS:*.cacert.org, DNS:cacert.org, DNS:*.cacert.net, DNS:cacert.net, DNS:*.cacert.com,
DNS:cacert.com

When dealing with the purposes of a x509 crt file

the output of openssl_x509_parse gives an array with following for the purposes:
each new array ([purposes][1], [purposes][2] for example) is a new purpose check
I compared this output with the output of the command
# openssl x509 -purpose -in <x509crt_file>
The result i got was:

[purposes][x][2] quite obviously is the name of the purpose checked
[purposes][x][1] corresponds to the tested purpose (as named in [purposes][x][2]) acting as CA
[purposes][x][0] corresponds to the general availability of the purpose

[purposes] => Arrray
	(
		[1] => Array
			(
				[0] => 1
				[1] => 1
				[2] => sslclient
			)

		[2] => Array
			(
				[0] => 1
				[1] => 1
				[2] => sslserver
			)

		[3] => Array
			(
				[0] => 1
				[1] => 1
				[2] => nsslserver
			)

		[4] => Array
			(
				[0] => 1
				[1] => 1
				[2] => smimesign
			)

		[5] => Array
			(
				[0] => 1
				[1] => 1
				[2] => smimeencrypt
			)

		[6] => Array
			(
				[0] => 1
				[1] => 1
				[2] => crlsign
			)

		[7] => Array
			(
				[0] => 1
				[1] => 1
				[2] => any
			)

		[8] => Array
			(
				[0] => 1
				[1] => 1
				[2] => ocsphelper
			)
	)

openssl_x509_read:

Parse an X509 certificate and return a resource identifier for it

resource openssl_x509_read( mixed $x509certdata )

openssl_x509_read() parses the certificate supplied by x509certdata and returns a resource
identifier for it.

Params:

x509certdata

Returns a resource identifier on success or FALSE on failure

To get the real timestamps as integer values for the validity daterange you can use as follows:

<?php
$data = openssl_x509_parse(file_get_contents('/path/to/cert.crt'));

$validFrom = date('Y-m-d H:i:s', $data['validFrom_time_t']);
$validTo = date('Y-m-d H:i:s', $data['validTo_time_t']);

echo $validFrom . "\n";
echo $validTo . "\n";

?>

After some test i've been able to get some results this way:

<?php

$fp = fopen("/etc/httpd/conf/ssl/moncertif.crt", "r");
$cert = fread($fp, 8192);
fclose($fp);

echo "Read<br>";
echo openssl_x509_read($cert);
echo "<br>";
echo "**********************";
echo "<br>";
echo "Parse<br>";
print_r(openssl_x509_parse($cert));

//or 
//print_r(openssl_x509_parse( openssl_x509_read($cert) ) );
//

?>

Short HOWTO for getting data out of a client cert via an SSL enabled iPlanet (Netscape Enterprise or Sun ONE)
web server.

The Iplanet server sets $_SERVER["CLIENT_CERT"] whenever a client authenticates with a cert. This var
contains an encoded representation of the cert presented by the client. This in itself is useless to scripts
or applications, we need to extract the actual information from the encoding.

It turns out that we are in luck, the encoding is NEARLY a standard PEM encoding which can be read by openssl_x509_read()
function. A standard PEM has a begin line, an end line and inbetween is a base64 encoding of the DER representation
of the cert.

PEM requires that linefeeds be present every 64 chars, however, this is already the case with our CLIENT_CERT
var. For some reason the iPlanet server neglects to attach the begin and end headers. All that is required 
to allow access to the cert is replacing these headers. Here is a small code excerpt for doing just that 
and printing out the raw cert data.

<?php
	$beginpem = "-----BEGIN CERTIFICATE-----\n";
	$endpem = "-----END CERTIFICATE-----\n";

	//Small function tp print the data recursively
	function print_element($item, $key)
	{
		if( is_array( $item ) )
		{
			echo "$key is Array:\n";
			array_walk( $item, 'print_element' );
			echo "$key done\n";
		}
		else
			echo "$key = $item}n";
	}

	//BUild the PEM string
	$pemdata = $beginpem.$_SERVER["CLIENT_CERT"]."\n".$endpem;

	//Get a cert resource from the PEM string
	$cert = openssl_x509_read( $pemdata );

	//Parse the resource and print out the contents
	$cert_data = openssl_x509_parse( $cert );
	array_walk( $cert_data, 'print element' );

	//Free the resource
	openssl_x509_free( $cert );
?>

The above things belonged to OpenSSL, the following belong to MySQL (PDO):

MySQL functions (PDO_MYSQL)

Intro:

PDO_MYSQL is a driver that implements the PHP Data Objects (PDO) interface to enable access from PHP to
MySQL 3.x, 4.x and 5.x databases

PDO_MYSQL will take advantage of native prepared statement support present in MySQL 4.1 and higher. If you are using
an older version of the mysql client libs, PDO will emulate them for you.

Beware: Some MySQL table types (storage engines) do not support transactions. When writing transactional DB
code using a table type that does not support transactions, MySQL will pretend that a transaction was initiated
successfully. In addition, any DDL queries issued will implicitly commit any pending transactions.

Installation:

The common Unix distru include binary versions of PHP that can be installed. Although these binary versions are
typically built with support for the MySQL extensions, the extension libraries themselves may need to be installed using 
an additional package. Check the package manager that comes with your chosen distru for availability.

For example, on Ubuntu the php5-mysql package installs the ext/mysql, ext/mysqli, and PDO_MYSQL PHP extensions.
On CentOS, the php-mysql package also installs these three PHP extensions

Alternatively, you can compile this extension yourself. Building PHP from source allows you to specify the MySQL
extensions you want to use, as well as your choice of client lib for each extension.

When compiling, use --with-pdo-mysql[=DIR] to install the PDO MySQL extension, where the optional [=DIR] is the
MySQL base lib. As of PHP 5.4, mysqlnd is the default lib. For details about choosing a lib, see Choosing
a MySQL lib.

Choosing a library:

The mysqli, PDO_MySQL and mysql PHP extensions are lightweight wrappers on top of a C client library. The extensions
can either use the mysqlnd library or the libmysqlclient library. Choosing a library is a compile time decision.

The mysqlnd library is part of the PHP distru since 5.3.0. It offers features like lazy connections and query caching,
features that are not available with libmysqlclient, so using the built-in mysqlnd library is highly recommended.
See the mysqlnd documentation for additional details, and a listing of features and functionality that it offers.

Example #1 Configure commands for using mysqlnd or libmysqlclient

// Recommended, compiles with mysqlnd
$ ./configure --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --with-mysql=mysqlnd

// Alternatively recommended, compiles with mysqlnd as of PHP 5.4
$ ./configure --with-mysqli --with-pdo-mysql --with-mysql

// Not recommended, compiles with libmysqlclient
$ ./configure --with-mysqli=/path/to/mysql_config --with-pdo-mysql=/path/to/mysql_config --with-mysql=/path/to/mysql_config

Library Feature comparison:

It is recommended to use the mysqlnd library instead of the MySQL Client Server Lib (libmysqlclient). Both libs are
supported and constantly being improved.

Desc 										MySQL native driver (mysqlnd) 	MySQL client server lib (libmysqlclient)

Part of the PHP distru 						Yes 							No

PHP version introduced 						5.3.0 							N/A

License 									PHP License 3.01 				Dual-License

Development status 							Active 							Active

Lifecycle 									No end announced 				No end announced

PHP >= 5.4; compile default 				Yes 							No 
(for all mysql extensions)

PHP 5.3; compile default 					No 								Yes
(for all mysql extensions)

Compression protocol support 				Yes (5.3.1+) 					Yes

SSL support 								Yes (5.3.3+) 					Yes

Named pipe support 							Yes (5.3.4+) 					Yes

Non-blocking, asynch queries 				Yes 							No

Performance statistics 						Yes 							No

LOAD LOCALE INFILE respects 				Yes 							No
the open_basedir directive

Uses PHP's native memory management 		Yes 							No
system (e.g follows PHP memory limits)

Return numeric column as double (COM_QUERY) Yes 							No

Return numeric column as string (COM_QUERY) Yes 							Yes

Plugin API 									Yes 							Limited

Read/Write splitting for MySQL Replication 	Yes, with plugin 				No

Load Balancing 								Yes, with plugin 				No

Fail over 									Yes, with plugin 				No

Lazy connections 							Yes, with plugin 				No

Query caching 								Yes, with plugin 				No

Transparent query manipulations  			Yes, with plugin 				No
(E.g, auto-EXPLAIN or monitoring)

Automatic reconnect 						No 								Optional

Optionally, the --with-mysql-sock[=DIR] sets to location to the MySQL unix socket pointer for all
MySQL extensions, including PDO_MYSQL. If unspecified, the default locations are searched.

Optionally, the --with-zlib-dir[=DIR] is used to set the path to libz install prefix

$ ./configure --with-pdo-mysql --with-mysql-sock=/var/mysql/mysql.sock

SSL support is enabled using the appropiate PDO_MySQL constants, which is equivalent to calling the
MySQL C API function mysql_ssl_set().

mysql_ssl_set():

my_bool mysql_ssl_set(MYSQL *mysql, const char *key, const char *cert, const char *ca, const char *capath, const char *cipher)

Desc:

mysql_ssl_set() is used for establishing secure connections using SSL. It must be called before mysql_real_connect()

mysql_ssl_set() does nothing unless SSL support is enabled in the client lib.

Args:

mysql: The connection handler returned from mysql_init()

key: The path name to the key file

cert: The path name to the cert file

ca: The path to the cert authority file

capath: The path name to a dir that contains trusted SSL CA certificates in PEM format

cipher: A list of permissible ciphers to use for SSL encryption

The mysql arg must be a valid connection handler. Any unused SSL arguments may be given as NULL.

Return Values:

This function always returns 0. If SSL setup is incorrect, a subsequent mysql_real_connect() call returns
an error when you attempt to connect

Enforcing an Encrypted Connection:

mysql_ssl_set() specifies SSL information such as certificate and key files for establishing a secure connection
if such connections are available, but does not enforce any requirement that the connection obtained be secure.

To require an encrypted connection, the standard MySQL client programs use the following technique, which can
also be used by third party apps:

If the --ssl-mode=REQUIRED command-line option was specified, turn on SSL by calling mysql_ssl_set() to supply the 
appropiate SSL values. In addition, call mysql_options(), passing the MYSQL_OPT_SSL_MODE option with a value of
SSL_MODE_REQUIRED. If the mysql_options() call fails, exit with an error.

Call mysql_real_connect() to connect to the server. The call fails if an encrypted connection cannot be obtained.

Also, SSL cannot be enabled with PDO::setAttribute because the connection already exists. See also the MySQL
documentation about connecting to MySQL with SSL.

Version 		Desc

5.4.0 			mysqlnd became the default MySQL lib when compiling PDO_MYSQL. Previously, libmysqlclient was the default MySQL lib.

5.4.0 			MySQL client libs 4.1 and below are no longer supported

5.3.9 			Added SSL support with mysqlnd and OpenSSL

5.3.7 			Added SSL support with libmysqlclient and OpenSSL

Predefined Constants:

The constants below are defined by this driver, and will only be available when the extension has been either
compiled into PHP or dynamically loaded at runtime. In addition, these driver-specific constants should 
only be used if you are using this driver. Using driver-specific attributes with another driver may result 
in unexpected behaviour.

PDO::getAttribute() may be used to obtain the PDO_ATTR_DRIVER_NAME attribute to check the driver, if your
code can run against multiple drivers.

PDO::MYSQL_ATTR_USE_BUFFERED_QUERY (integer):

If this attribute is set to TRUE on a PDOStatement, the MySQL driver will use the buffered
versions of the MySQL API. If you are writing portable code, you should use PDOStatement::fetchAll() instead.

Example #1 Forcing queries to be buffered in mysql:

<?php
if ($db->getAttribute(PDO::ATTR_DRIVER_NAME) == 'mysql') {
	$stmt = $db->prepare('select * from foo',
		array(PDO::MYSQL_ATTR_USE_BUFFERED_QUERY => true));
} else {
	die("my application only works with mysql; i should use \$stmt->fetchAll() instead");
}
?>

PDO::MYSQL_ATTR_LOCAL_INFILE:

Enable LOAD LOCAL INFILE.

Note, this constant can only be used in the driver_options array when constructing a new 
database handle.

PDO::MYSQL_ATTR_INIT_COMMAND:

Command to execute when connecting to the MySQL server. Will automatically be re-executed
when reconnecting 

Note, this constant can only be used in the driver_options array when constructing a new DB handle

PDO::MYSQL_ATTR_READ_DEFAULT_FILE:

Read options from the named option file instead of from my.cnf. This option is not available if mysqlnd
is used, because mysqlnd does not read the mysql config files.

PDO::MYSQL_ATTR_READ_DEFAULT_GROUP:

Read options from the named group from my.cnf or the file specified with MYSQL_READ_DEFAULT_FILE. This
option is not available if mysqlnd is used, because mysqlnd does not read the mysql configuration files.

PDO::MYSQL_ATTR_MAX_BUFFER_SIZE:

Maximum buffer size. Defaults to 1MiB. This constant is not supported when compiling against mysqlnd

PDO::MYSQL_ATTR_DIRECT_QUERY:

Perform direct queries, do not use prepared statements.

PDO::MYSQL_ATTR_FOUND_ROWS:

Return the number of found (matched) rows, not the number of changed rows.

PDO::MYSQL_ATTR_IGNORE_SPACE:

Permit spaces after function names. Makes all functions names reserved words.

PDO::MYSQL_ATTR_COMPRESS:

Enable network communication compression. This is also supported when compiled against
mysqlnd as of PHP 5.3.11

PDO::MYSQL_ATTR_SSL_CA:

The file path to the SSL certificate authority

This exists as of PHP 5.3.7

PDO::MYSQL_ATTR_SSL_CAPATH:

THe file path to the dir that contains the trusted SSL CA certs, which are stored in PEM format.

Exists as of PHP 5.3.7

Note that all of thse are int based.

PDO::MYSQL_ATTR_SSL_CERT:

The file path to the SSL cert.

This exists as of 5.3.7

PDO::MYSQL_ATTR_SSL_CIPHER:

A list of one or more permissible ciphers to use for SSL encryption, in a format understood by
OpenSSL. For example: DHE-RSA-AES256-SHA:AES128-SHA

THis exists as of 5.3.7

PDO::MYSQL_ATTR_SSL_KEY:

The file path to the SSL key

This exists as of 5.3.7

PDO::MYSQL_ATTR_MULTI_STATEMENTS:

Disables multi query execution in both PDO::prepare() and PDO::query() when set
to FALSE.

Note, this constant can only be used in the driver_options array when constructing a 
new db handle.

This exists as of PHP 5.5.21 and PHP 5.6.5

Runtime Config:

The behaviour of these functions is affected by settings in php.ini:

PDO_MYSQL Config Options

Name 								Default 				CHANGABLE

pdo_mysql.default_socket 			"/tmp/mysql.sock" 		PHP_INI_SYSTEM

pdo_mysql.debug 					NULL 					PHP_INI_SYSTEM

For further details and definition of the PHP_INI_* modes, see the Where a config may be set.

Here is a short explonation of the config directives:

pdo_mysql.default_socket string:

Sets a Unix domain socket. This value can either be set at compile time if a domain socket is
found at configure. This ini setting is Unix only.

pdo_mysql.debug boolean:

Enables debugging for PDO_MYSQL. This setting is only available when PDO_MYSQL is compiled against
mysqlnd and in PDO debug mode.

Table of Contents:

PDO_MYSQL_DSN: Connecting to MySQL databases

Desc:

The PDO_MYSQL Data Source Name (DSN) is composed of the following elements:

DNS prefix:
	The DSN prefix is mysql.

host: The hostname on which the DB server resides

port: The port number where the db server is listening

dbname: The name of the DB

unix_socket: The MySQL Unix socket (should not be used with host or port)

charset: The char set. See the char set concepts documentation for more information.

Character Sets:

Ideally a proper char set will be set at the server level, and doing this is described within
the Character Set Configuration section of the MySQL Server manual. Alternatively, each MySQL API
offers a method to set the char at runtime.

Caution:

The character set and character escaping:

The char set should be understood and defined, as it has an affect on every action, and includes security
implications. For example, the escaping mechanism (e.g, mysqli_real_escape_string() for mysqli, mysql_real_escape_string()
for mysql, and PDO::quote() for PDO_MySQL) will adhere to this setting.

It is important to realize that these functions will not use the character set that is defined
with a query, so for example the following will not have an effect on them.

Example #1 Problems with setting the char set with SQL:

<?php

$mysqli = new mysqli("localhost", "my_user", "my_password", "world");

//Will NOT affect $mysqli->real_escape_string();
$mysqli->query("SET NAMES utf8");

//Will NOT affect $mysqli->real_escape_string();
$mysqli->query("SET CHARACTER SET utf8");

// But, this will affect $mysqli->real_escape_string();
$mysqli->set_charset('utf8');

// But, this will NOT affect it (utf-8 vs utf8) -- do not use the dashes here
$mysqli->set_charset('utf-8');

?>

Below are examples that demonstrate how to properly alter the char set at runtime using each API.

Note: Possible UTF-8 confusion

Because character set names in MySQL do not contain dashes, the string "utf8" is valid in MySQL to set
the chars set to UTF-8. The string "utf-8" is not valid, as using "utf-8" will fail to change the char set.

Example #2 setting the char set example: mysqli:

<?php
$mysqli = new mysqli("localhost", "my_user", "my_password", "world");

printf("Initial character set: %s\n", $mysqli->character_set_name());

if (!mysqli->set_character('utf-8')) {
	printf("Error loading char set utf-8: %s\n", $mysqli->error);
	exit;
}

echo "New character set information:\n";
print_r( $mysqli->get_charset() );

?>

Exampel #3: Setting the char set example: pdo_mysql:

Note this only works as of PHP 5.3.6:

<?php
$pdo = new PDO("mysql:host=localhost;dbname=world;charset=utf8", 'my_user', 'my_pass');
?>

Example #4: Setting the char set example: Mysql:

<?php
$conn = mysql_connect("localhost", "my_user", "my_pass");
$db = mysql_select_db("world");

echo 'Initial char set: ' . mysql_client_encoding($conn) . "\n";

if (!mysql_set_charset('utf8', $conn)) {
	echo "Error: Unable to set the character set.\n";
	exit;
}

echo 'Your current charset is: ' . mysql_client_encoding($conn);
?>

Prior to PHP 5.3.6, the charset element was silently ignored. The same behaviour
can be partly replicated with the PDO::MYSQL_ATTR_INIT_COMMAND driver option, as the
following example shows.

Warning: This method in the below example can only be used with char set that hsare the same
lower 7 bit representations as ASCII, such as ISO-8859-1 and UTF-8. Users using character sets that have 
different representations (such as UTF-16 or Big5) MUST use the charset option provided in PHP >= 5.3.6

Example #1 Setting the connection charset to UTF-8 prior to PHP 5.3.6

<?php
$dsn = 'mysql:host=localhost;dbname=testdb';
$username = 'username';
$password = 'password';
$options = array(
	PDO::MYSQL_ATTR_INIT_COMMAND => 'SET NAMES utf8',
);

$dbh = new PDO($dsn, $username, $password, $options);
?>

Prior to version 5.3.6 charset was ignored.

Examples:

Example #2 PDO_MYSQL DSN examples:

The following example shows a PDO_MYSQL DSN for connecting to MySQL databases:

mysql:host=localhost;dbname=testdb

More complete examples:
mysql:host=localhost;port=3307;dbname=testdb
mysql:unix_socket=/tmp/mysql.sock;dbname=testdb

Notes:

Note: Unix Only

When the host name is set to "localhost", then the connection to the server is made through a domain
socket. If PDO_MYSQL is compiled against libmysqlclient then the location of the socket file is at 
libmysqlclient's compiled in location. If PDO_MYSQL is compiled against mysqlnd a default socket
can be set through the pdo_mysql.default_socket setting.

I have tested this and found that the "dbname" field is optional. Which is a good thing if you must
first create the db.

After creating a db be sure to exec a "use dbname;" command, or else use fully specified table
references.

It should be noted that unix_socket can also be used for named pipes uner windows::

<?php
$pipeName = 'my_awesome_pipe';
$username = 'username';
$password = 'password';
$dbh = new PDO('mysql:unix_socket='.$pipeName, $username, $password);
?>

To, add a space after the : after mysql in accessing remote DBs.

mysql: host=remote;

A way of doign a PDORepository:

<?php
	abstract class PDORepository{
		const USERNAME = "root";
		const PASSWORD = "";
		const HOST = "localhost";
		const DB = "parcial";

		private function getConnection(){
			$username = self::USERNAME;
			$password = self::PASSWORD;
			$host = self::HOST;
			$db = self::DB;
			$connection = new PDO("mysql:dbname=$db;host=$host", $username, $password);
			return $connection;
		}
		protected function queryList($sql, $args){
			$connection = $this->getConnection();
			$stmt = $connection->prepare($sql);
			$stmt->execute($args);
			return $stmt;
		}
	}
?>

SQLSTATE[HY000]: General error: 2014 Cannot execute queries while other unbuffered queries are active ...

After spending hours trying to track down why we were getting this error on a new server, after the 
same code ran fine on other servers, we found the problem to be an old MySQL _client_ library running
on our web server, and a latest-version MySQL _server_ running on the DB server's box.

Upgrade the MySQL client on the web server to the current revision, and the problem goes away.

To use "PDO::MYSQL_ATTR_USE_BUFFERED_QUERY" you should call PDO::setAttribute(PDO::MYSQL_ATTR_USE_BUFFERED_QUERY, true);

It will not work when passed into PDO::prepare()

Today's PHP snapshot now has SSL Support for PDO. Use the following connection options:

<?php
$pdo = new PDO(
	'mysql:host=hostname;dbname=ssldb',
	'username',
	'password',
	array(
		PDO::MYSQL_ATTR_SSL_KEY => '/path/to/client-key.pem',
		PDO::MYSQL_ATTR_SSL_CERT => '/path/to/client-cert.pem',
		PDO::MYSQL_ATTR_SSL_CA => '/path/to/ca-cert.pem'
	)
);
?>

Antoher thing to keep in mind, is to not stack SQL calls, as it will cause unbuffered queries to stack
and an error is thrown. Thus, do as follows instead:

<?php
$sql = <<<____SQL
	CREATE TABLE IF NOT EXISTS `ticket_hist` (
		`tid` int(11) NOT NULL,
		`trqform` varchar(40) NOT NULL,
		`trsform` varchar(40) NOT NULL,
		`tgen` datetime NOT NULL,
		`tterm` datetime,
		`tstatus` tinyint(1) NOT NULL
	) ENGINE=ARCHIVE COMMENT='ticket archive';
____SQL;
$result = $this->db->getConnection()->exec($sql);

$sql = <<<____SQL
	CREATE TABLE IF NOT EXISTS `request_bist` (
		`rqid` int(11) NOT NULL,
		etc.
	)
$result = $this->db->getConnection()->exec($sql);
?>

The above belongs to PDO/MySQL, and the following things belong to SimpleXML:

Introduction:

The SimpleXML extension provides a very simple and easily usable toolset to convert XML to an
object that can be processed with normal property selector and array iterators.

Installing/Configuring:

Requirements:

This extension requires the libxml PHP extension. This means that passing in --enable-libxml is also required,
although this is implicitly accomplished because libxml is enabled by default.

The SimpleXML extension requires PHP 5.

Installation:

This extension is enabled by default. It may be disabled by using the following option at compile time:

--disable-simplexml

Note: Before PHP 5.1.2, --enable-simplexml is required to enable this extension

Installing simpleXml using composer:

"composer require ext -simplexml"

The extension is enabled by default in most distros. You can check the list of php
modules using:

"php -m"

Examples:

When using simplexml to access a element the returned object may be a SimpleXMLElement 
instead of a string.

Example:

<?php
$string = <<<XML
<?xml version='1.0'?>
<document>
	<cmd>login</cmd>
	<login>Richard</login>
</document>
XML;

$xml = simplexml_load_string($string);
print_r($xml);
$login = $xml->login;
print_r($login);
$login = (string) $xml->login;
print_r($login);
?>

Expected result:
-----------------
SimpleXMLElement Object
(
	[cmd] => login
	[login] => Richard
)
Richard
Richard

Actual Result:
---------------
SimpleXMLElement Object
(
	[cmd] => login
	[login] => Richard
)
SimpleXMLElement Object
(
	[0] => Richard
)
Richard

But this is an intended behavior

Basic SimpleXML usage:

Many examples in this reference require an XML string. Instead of repeating this string in every example, we put it
into a file which we include in each example. This included file is shown in the following example section.

Alternatively, you could create an XML document and read it with simplexml_load_file().

Example #1 Include file example.php with XML string:

<?php
$xmlstr = <<<XML
<?xml version='1.0' standalone='yes'?>
<movies>
	<movie>
		<title>PHP: Behind the Parser</title>
		<characters>
			<character>
				<name>Ms. Coder</name>
				<actor>Onlivia Actora</actor>
			</character>
			<character>
				<name>Mr. Coder</name>
				<actor>El Act&#211;r</actor>
			</character>
		</characters>
		<plot>
			shit
		</plot>
		<great-lines>
			<line>some shit</line>
		</great-lines>
		<rating type="thumbs">7</rating>
		<rating type="stars">5</rating>
	</movie>
</movies>
XML;
?>

The simplicity of SimpleXML appears most clearly when one extracts a string or number
from a basic XML document.

Example #2 Getting <plot>:

<?php
include 'example.php';

$movies = new SimpleXMLElement($xmlstr);

echo $movies->movie[0]->plot;
?>

The above will output:

shit

Accessing elements within a XML Document that contain chars not permitted under PHPs naming
convention (e.g the hyphen) can be accomplished by encapsulating the element name within
braces and the apostrophe.

Example #3 Getting <line>

<?php
include 'example.php';

$movies = new SimpleXMLElement($xmlstr);

echo $movies->movie->{'great-lines'}->line;
?>

The above outputs:

some shit

Example #4 Accessing non-unique elements in SimpleXML:

When multiple instances of an element exists as children of a single parent element, normal iteration
techniques apply.

<?php
include 'example.php';

$movies = new SimpleXMLElement($xmlstr);

//For each <character> node, we echo a separate <name>
foreach ($movies->movie->characters->character as $character) {
	echo $character->name . ' played by ' . $character->actor, PHP_EOL;
}

?>

The above will output:

Ms. Coder played by Onlivia Actora
Mr. Coder played by El ActÓr

Note: Properties($movies->movie in previous example) are not arrays. They are iterable
and accessible objects.

Example #5 Using attributes:

So far, we have only covered the work of reading element names and their values. SimpleXML can also access
element attributes. Access attributes of an element just as you would elements of an array.

<?php
include 'example.php';

$movies = new SimpleXMLElement($xmlstr);

//Access the <rating> nodes of the first movie
// output the rating scale, too
foreach ($movies->movie[0]->rating as $rating) {
	switch((string) $rating['type']) { //get attributes as element indices
	case 'thumbs':
		echo $rating . ' thumbs up';
		break;
	case 'stars':
		echo $rating . ' stars';
		break;
	}
}
?>

The above outputs:

7 thumbs up5 stars

Example #6 Comparing Elements and Attributes with Text:

To compare an element or attribute with a string or pass it into a function that requires a string,
you must cast it to a string using (string).
Otherwise, PHP treats the element as an object.

<?php
include 'example.php';

$movies = new SimpleXMLElement($xmlstr);

if ((string) $movies->movie->title == 'PHP: Behind the Parser') {
	print 'My favorite movie';
}

echo htmlentities((string) $movies->movie->title);
?>

The above will output:

My favorite movie.PHP: Behind the Parser.

The above is again, presumed that the string we are matching is in fact the one in the XML.

Example #7 Comparing Two Elements:

Two SimpleXMLElements are considered different even if they point to the same element
since PHP 5.2.0

<?php
include 'example.php';

$movies1 = new SimpleXMLElement($xmlstr);
$movies2 = new SimpleXMLElement($xmlstr);
var_dump($movies1 == $movies2); // false since PHP 5.2.0
?>

The above will output:

bool (false)

Example #8 Using XPath:

SimpleXML includes built-in XPath support. To find all <character> elements:

<?php
include 'example.php';

$movies = new SimpleXMLElement($xmlstr);

foreach ($movies->xpath('//character') as $character) {
	echo $character->name . ' played by ' . $character->actor . PHP_EOL; 
}
?>

'//' serves as a wildcard. To specify absolute paths, omit one of the slashes.

The above will output:

Ms. Coder played by Onlivia Actora
Mr. Coder played by El ActÓr

Example #9 Setting Values:

Data in SimpleXML does not have to be constant. The object allows for manipulation
of all of its elements.

<?php
include 'example.php';
$movies = new SimpleXMLElement($xmlstr);

$movies->movie[0]->characters->character[0]->name = 'Miss Coder';

echo $movies->asXML();
?>

The above will output:

<?xml version="1.0" standalone="yes"?>
<movies>
	<movie>
		<title>PHP: Behind the Parser</title>
		<characters>
			<character>
				<name>Miss Coder</name>
				<actor>Onlivia Actora</actor>
			</character>
			<character>
				<name>Mr. Coder</name>
				<actor>El Act&#xD3;r</actor>
			</character>
		</characters>
		<plot>
			shit
		</plot>
		<great-lines>
			<line>bla</line>
		</great-lines>
		<rating type="thumbs">7</rating>
		<rating type="stars">5</rating>
	</movie>
</movies>

Example #10 Adding elements and attributes:

Since PHP 5.1.3, SimpleXML has had the ability to easily add children and attributes

<?php
include 'example.php';
$movies = new SimpleXMLElement($xmlstr);

$character = $movies->movie[0]->characters->addChild('character');
$character->addChild('name', 'Mr. Parser');
$character->addChild('actor', 'John Doe');

$rating = $movies->movie[0]->addChild('rating', 'PG');
$rating->addAttribute('type', 'mpaa');

echo $movies->asXML();
?>

The above will output:

<?xml version="1.0" standalone="yes"?>
<movies>
	<movie>
		<title>PHP: Behind the Parser</title>
		<characters>
			<character>
				<name>Ms. Coder</name>
				<actor>Onlivia Actora</actor>
			</character>
			<character>
				<name>Mr. Coder</name>
				<actor>El Act&#xD3;r</actor>
			</character>
		<character><name>Mr. Parser</name><actor>John Doe</actor></character></characters>
		<plot>
			shit
		</plot>
		<great-lines>
			<line>more shit</line>
		</great-lines>
		<rating type="thumbs">7</rating>
		<rating type="stars">5</rating>
	<rating type="mpaa">PG</rating></movie>
</movies>

Example #11 DOM Interoperability:

PHP has a mechanism to convert XML nodes between SimpleXML and DOM formats. This example 
shows how one might change a DOM element to SimpleXML.

<?php
$dom = new DOMDocument;
$dom->loadXML('<books><book><title>blah</title></book></books>');
if (!$dom) {
	echo 'Error while parsing the document';
	exit;
}

$books = simplexml_import_dom($dom);

echo $books->book[0]->title;
?>

The above outputs:

blah

There is a common "trick" often proposed to convert a SimpleXML object to an array, by running it through
json_encode() and then json_decode(). I'd like to explain why this is a bad idea.

Most simply, because the whole point of SimpleXML is to be easier to use and more powerful than a plain
array. For instance, you can write <?php $foo->bar->baz['bing'] ?> and it means the same thing as <?php
$foo->bar[0]->baz[0]['bing'] ?>, regardless of how many bar or baz elements there are in the XML.

And if you write <?php (string)$foo->bar[0]->baz[0] ?> you get all the string content of that node - 
including CDATA sections - regardless of whether it also has child elements or attributes.

You also have access to namespace information, the ability to make simple edits to the XML, and even
the ability to "import" into a DOM object, for much more powerufl manipulation. All of this is lost
by turning theo bject into an array rather than reading and understanding the examples on this page.

Additionaly, because it is not designed for this purpose, the conversion to JSON and back will actually
lose information in some situations. For instance, any elements or attributes in a namespace will
simply be discarded, and any text content will be discarded if an element also has children or attributes.

Sometimes, this won't matter, but if you get in the habbit of converting everything to arrays, its
going to sting you eventually.

Of course, you could write a smarter conversion, which did not have these limitations, but at the point
you are getting no value out of SimpleXML at all, and should just use the lower level XML Parser
functions, or the XMLReader class, to create your structure. You still won't have the extra convenience
functionality of SimpleXML but that is your loss.

If you need to output valid xml in your response, do not forget to set your header content type to
xml in addition to echoing out the result of asXML():

<?php

$xml=simplexml_load_file('...');
...
...xml stuff
...

//output xml in your response:
header('Content-Type: text/xml');
echo $xml->asXML();
?>

A quick tip on xpath queries and default namespaces. It looks like the XML-system behind
SimpleXML has the same workings as i believe the XML-system .NET uses: when one needs to address
something in the default namespace, one will have to declare the namespace using registerXPathNamespace
and then use its prefix to address the otherwise in the default namespace living element.

<?php
$string = <<<XML
<?xml version='1.0'?>
<document xmlns="http://www.w3.org/2005/Atom">
<title>Forty What?</title>
<from>Joe</from>
<to>Jane</to>
<body>
	I know bla bla
</body>
</document>
XML;

$xml = simplexml_load_string($string);
$xml->registerXPathNamespace("def", "http://www.w3.org/2005/Atom");

$nodes = $xml->xpath("//def:document/def:title");

?>

From the README file:

SimpleXML is meant to be an easy way to access XML data

SimpleXML objects follow four basic rules:

1) properties denote element iterators

2) numeric indices denote elements

3) non numeric indices denote attributes

4) string conversion allows to access TEXT data

When iterating properties then the extension always iterates
over all nodes with that element name. Thus method children()
must be called to iterate over subnodes. But also doing the
following:

foreach ($obj->node_name as $elem) {
	// do something with $elem
}

always results in iteration of 'node_name' elements.
So no further check is needed to distinguish the number of 
nodes of that type.

When an elements TEXT data is being accessed through a property
then the result does not include the TEXT data of subelements

Known issues
========================

Due to engine problems it is currently not possible to access
a subelement by index 0: $object->property[0].

If you are not sure the XML will be valid you'd better use:

<?php
$xmlObject = simplexml_load_string($xml);

//or

$xmlObject = simplexml_load_file($xml); //without $?
?>

Both of these return a SimpleXMLElement Object or a libXMLError object.

Using stuff like is_object($xml->module->admin) to check if there actually
is a node called "admin", does not seem to work as expected, since simplexml
always returns an object - in that case an empty one - even if a particular node
does not exist.

For me, good old empty() function seems to work just fine in such cases.

While SimpleXMLElement claims to be iterable, it does not seem to imeplement the standard
Iterator interface functions like ::next and ::rest properly.

Therefore while foreach() works, functions like next(), current() or each() do not
seem to work as you would expect - the pointer never seems to move or keeps getting reset.

The SimpleXMLIterator class, however, does implement these methods.

Dealing with XML errors:

Dealing with XML errors when loading documents is a very simple task. Using the libxml functionality
it is possible to surpress all XML errors when loading the document and then iterate over the errors.

The libXMLError object, returned by libxml_get_errors(), contains several properties including the
message, line and column (position) of the error.

Example #1 Loading broken XML string:

<?php
libxml_use_internal_errors(true);
$sxe = simplexml_load_string("<?xml version='1.0'><broken><xml></broken>");
if ($sxe === false) {
	echo "Failed loading XML\n";
	foreach(libxml_get_errors() as $error) {
		echo "\t" . $error->message;
	}
}
?>

The above outputs:

Failed loading XML
	Blank needed here
	parsing XML declaration: '?>' expected
	Opening and ending tag mismatch: xml line 1 and broken
	Premature end of Data in tag broken line 1

Note that "if (! $sxe) {" may give you a false negative if the XML document was empty (e.g "<root />").
In that case, $sxe will be:

object(SimpleXMLElement)#1 (0) {
	
}

Which will evaluate to false, even though nothing technically went wrong.

Consider instead: "if ($sxe === false) {"

Now that the /e modifier is considered deprecated in preg_replace, you can use a negative lookahead to replace
unespaced ampersands with &amp; without throwing warnings:

$str = preg_replace('/&(?!;{6})/', '&amp;', $str);

You probably should have been doing this before /e was deprecated, actually.

If you are trying to load an XML string with some escaped and some unescaped ampersands,
you can pre-parse the string to escape the unescaped ampersands without modifying the already escaped
ones:

<?php
$s = preg_replace('/&[^; ]{0,6}.?/e', "((substr('\\0',-1) == ';') ? '\\0' : '&amp;'.substr('\\0',1))", $s);
?>

Note tho, that above should not be done because /e is deprecated.

If we need to process the content of broken XML-docs we might find the recover attribute of
the DOMDocument class relevant.

The above belonged to examples, configurations etc. of SimpleXML, the following belongs to
the SimpleXMLElement:

The SimpleXMLElement class:

Class synposis:

SimpleXMLElement implements Traverseable {
	
	//Methods
	final public __construct ( string $data [, int $options = 0 [, bool $data_is_url = false [, string $ns = "" [, bool $is_prefix = false ]]]] )
	public void addAttribute ( string $name [, string $value [, string $namespace ]] )
	public SimpleXMLElement addChild ( string $name [, string $value [, string $namespace ]] )

	public mixed asXML ([ string $filename ])

	public SimpleXMLElement attributes ([ string $ns = NULL [, bool $is_prefix = false ]] )
	public SimpleXMLElement children ([ string $ns [, bool $is_prefix = false ]] )

	public int count()

	public array getDocNamespaces ([ bool $recursive = false [, bool $from_root = true ]] )
	public string getName()

	public array getNamespaces ([ bool $recursive = false ] )

	public bool registerXPathNamespace ( string $prefix, string $ns )
	public string __toString()

	public array xpath ( string $path )
}

To further previous comments and drive the point home:

What makes SimpleXMLElement tricky to work with, is that it feels and behaves like an object, but is actually
a system RESOURCE (specifically a libxml resource)

That is why you cannot store a SimpleXMLElement to $_SESSION or perform straight comparison operations
on node values without first casting them to some type of object. $_SESSION expects to store
'an object' and comparison operators expect to compare 2 'objects' and SimpleXMLElements are not objects.

When you echo or print a node's value, PHP converts the value (a resource) into a string object for
you. It is a time saver for sure, but can fool you into thinking that SimpleXMLElements is an object.

To access the underlying element as a string, you need to explicitly cast it to string:

$x = (string)$my_xml_element;

An example of XML to JSON conversion without '@attributes':

<?php
function XML2JSON($xml) {
	
	function normalizeSimpleXML($obj, &$result) {
		$data = $obj;
		if (is_object($data)) {
			$data = get_object_vars($data);
		}
		if (is_array($data)) {
			foreach ($data as $key => $value) {
				$res = null;
				normalizeSimpleXML($value, $res);
				if (($key == '@attributes') && ($key)) {
					$result = $res;
				} else {
					$result[$key] = $res;
				}
			}
		} else {
			$result = $data;
		}
	}
	normalizeSimpleXML(simplexml_load_string($xml), $result);
	return json_encode($result);
}
?>

Warning to anyone trying to parse XML with a key name that inlcudes
a hypen ie.)
<subscribe>
	<callback-url>example url</callback-url>
</subscribe>

In order to access the callback-url you will need to do something like the following:

<?php
$xml = simplexml_load_string($input);
$callback = $xml->{"callback-url"};
?>

If you attempt to do it without the curly braces and quotes you will find out that you are
returned a 0 instead of what you want.

It is ocassionally useful to add an XML processing instruction to a SimpleXMLElement (treating it as
if it were a full document).
<?php
class SimpleXMLElement_Plus extends SimpleXMLElement {
	
	public function addProcessingInstruction( $name, $value )
	{
		//Create a DomElement from this simpleXML object
		$dom_sxe = dom_import_simplexml($this);

		//Create a handle to the owner doc of this xml
		$dom_parent = $dom_sxe->ownerDocument;

		//Find the topmost element of the domDocument
		$xpath = new DOMXPath($dom_parent);
		$first_element = $xpath->evaluate('/*[1]')->item(0);

		//Add the processing instruction before the topmost element
		$pi = $dom_parent->createProcessingInstruction($name, $value);
		$dom_parent->insertBefore($pi, $first_element);
	}
}
?>

For example if you had a simpleXMLElement_Plus object made out of the
XML fragment:
<xml><content /></xml>

And you need the output to be:

<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="xsl/xsl.xsl"?>
<xml><content/></xml>

You could do(using the class above):
<?php
$xml = new SimpleXMLElement_Plus('<xml><content /></xml>');
$xml->addProcessingInstruction('xml-stylesheet', 'type="text/xsl" href="xsl/xsl.xsl"');
echo $xml->asXML();
?>

Parsing an invalid XML string through SimpleXML causes the script to crash completely (usually)
therefore it is best to make sure the XML is valid before parsing with something like this:

//Must be tested with ===, as in if(isXML($xml) === true){}
//Returns the error message on improper XML
function isXML($xml){
	libxml_use_internal_errors(true);

	$doc = new DOMDocument('1.0', 'utf-8');
	$doc->loadXML($xml);

	$errors = libxml_get_errors();

	if(empty($errors)){
		return true;
	}

	$error = $errors[0];
	if($error->level < 3){
		return true;
	}

	$explodedxml = explode("r", $xml);
	$badxml = $explodedxml[($error->line)-1];

	$message = $error->message . ' at line ' . $error->line . '. Bad XML: ' . htmlentities($badxml);
	return $message;
}

Here is a more namespace-aware version of the earlier function for attaching one SimpleXMLElement to
another. I am sure it could still be further improved (right now it generates some redundant xmlns definitions)
but it seems to be working well enough for my purposes so far.

function SimpleXMLElement_append($parent, $child)
{
	//get all namespaces for document
	$namespaces = $child->getNamespaces(true);

	//Check if there is a default namespace for the current node
	$currentNs = $child->getNamespaces();
	$defaultNs = count($currentNs) > 0 ? current($currentNs) : null;
	$prefix = (count($currentNs) > 0) ? current(array_keys($currentNs)) : '';
	$childName = strlen($prefix) > 1
		? $prefix . ':' . $child->getName() : $child->getName();

	//check if the value is string value / data
	if (trim((string) $child) == '') {
		$element = $parent->addChild($childName, null, $defaultNs);
	} else {
		$element = $parent->addChild(
			$childName, htmlspecialchars((string)$child), $defaultNs
		);
	}

	foreach ($child->attributes() as $attKey => $attValue) {
		$element->addAttribute($attKey, $attValue);
	}
	foreach ($namespaces as $nskey => $nsurl) {
		foreach ($child->attributes($nsurl) as $attKey => $attValue) {
			$element->addAttribute($nskey . ':' . $attKey, $attValue, $nsurl);
		}
	}

	//Add children - try with namespaces first, but default ot all children
	// if no namespaced children are found
	$children = 0;
	foreach ($namespaces as $nskey => $nsurl) {
		foreach ($child->children($nsurl) as $currChild) {
			SimpleXMLElement_append($element, $currChild);
			$children++;
		}
	}
	if ($children == 0) {
		foreach ($child->children() as $currChild) {
			SimpleXMLElement_append($element, $currChild);
		}
	}
}

Important note i miss in the documentation:

SimpleXML supports Array/Iteration-Methods. Therefore it is possible to

add attributes
edit attributes
remove attributes

add nodes
edit nodes
remove nodes

This is the reason why SimpleXML provides only add-methods not deleting or editing methods. We also need
this methods because SimpleXML acts as a normal class and new member will not converted to a new node.

Deleting a node seems not to be possible within a foreach-loop. The reason is simple. To do that,
we need a valid key, but the Iterator only gives us a "understandable feedback" on which node we are
working on: the tag name.

So this will not work:

<?php
foreach($doc->seg as $key => $seg)
{
	if((string)$seg['id'] === 'whatever')
	{
		unset($seg); //only clears local copy
		unset($seg[$key]); //wrong index, "seg"
	}
}
?>

But this, eg, will work:

<?php
unset($doc->seg[2]);
?>

In case of doubt, always do a print_r/var_dump(). It nicely shows the real linked indexes.

THe root node element of your input XML string is not retrievable as a property.

<?php
$xml="<foo>bar</foo>";
$sxe=new SimpleXMLElement($xml);
print $sxe->foo;
?>

prints nothing. You can only get to the root element via the array index method ($sxe[0]).

Also, you may not have two (or more) root elements -- that is apparently not well-formed XML.

<?php
$xml="<foo/><bar/>";
$sxe=new SimpleXMLElement($xml);
?>

Thorws an exception. A G&D is to append an arbitrary root node structure ot both ends of the input:

<?php
$xml="<foo/><bar/>";
$sxe=new SimpleXMLElement("<z>".$xml."</z>");
?>

Doing this also solves the above problem of root node property accessibility. (It may not work
if your XML string includes a declaration).

Hello,

here goes my contribution for those whom are struggling to understand how SimpleXMLElement works.

After some time trying to figure out how this works, I have come up to this small example:

<?php
	$xmlstr = "<?xml version='1.0' ?>\n".
	//Optionally you can specify a xml-stylesheet for presenting the results. Just uncomment the following
	// line and change the stylesheet name.
	/* "<?xml-stylesheet type='text/xsl' href='xml_style.xsl' ?>\n". */
	"<book></book>";

	//Create the SimpleXMLElement object with an empty <book> element
	$xml = new SimpleXMLElement($xmlstr);

	//add some child nodes
	$xml->addChild("title", "Title of my book");
	$xml->addChild("abstract", "My book is about learning to work with SimpleXMLElement");

	//Add some more child nodes
	$chapter1 = $xml->addChild("chapter_1");
	//add an attribute to child chapter_1
	$chapter1->addAttribute("chapter_title", "Introduction to my book");

	$chapter2 = $xml->addChild("chapter_2");
	$chapter2->addAttribute("chapter_title", "Development of my book");

	$chapter3 = $xml->addChild("chapter_3");
	$chapter3->addAttribute("chapter_title", "Another chapter of my book");

	$conclusion = $xml->addChild("conclusion", "The ending of my book");

	//insert the header to tell the browser to read the document
	header("Content-type: text/xml");
	//print the SimpleXMLElement as a XML well-formed string
	echo $xml->asXML();
?>

Note that changing attrs from within a foreach loop, especially namespaced attrs, can be 
very tricky.

For example, when trying to change the value of an existing xlink:href attribute:

<?php
foreach($xmlelement -> attributes('xlink', true) as $attribute => $attribvalue){
	$attribvalue[0] = 'value'; //Throws an error
	$attribvalue = 'value'; //Does not change your xml
	$xmlelement->addAttribute($attribute, 'value', 'http://www.w3.org/1990/xlink'); //Adds an attribute, does not change existing one
	$xmlelement[$attribute] = 'value'; //adds an attribute, does not change existing one
}
?>

Instead, you should access the array returned by the attributes() function directly, like this:
<?php
	$xmlelement->attributes('xlink', true)->href = 'value'; //works
?>

Be aware when you trying to cast some attr to bool.

(boolean)$xml->attributes()->someAtt;

Returns TRUE if attribute is array([0] => 0);

use (boolean)(int) instead.

The methods of the SimpleXMLElement, are as follows:

addAttribute:

Adds an attribute to the SimpleXML element

public void SimpleXMLElement::addAttribute ( string $name [, string $value [, string $namespace ]] )

Adds an attribute to the SimpleXML element

Params:

name: The name of the attribtue to add

value: The value of the attribute

namespace: If specified, the namespace to which the attr belongs

Examples:

Listed examples may include example.php, which refers to the XML string found in 
the first example of the basic usage guide.

Example #1 add attributes and children to a SimpleXML element:

<?php

include 'example.php';

$sxe = new SimpleXMLElement($xmlstr);
$sxe->addAttribute('type', 'documentary');

$movie = $sxe->addChild('movie');
$movie->addChild('title', 'PHP2: More Parser Stories');
$movie->addChild('plot', 'This is all about the people who make it work');

$characters = $movie->addChild('characters');
$character = $characters->addChild('character');
$character->addChild('name', 'Mr. Parser');
$character->addChild('actor', 'John Doe');

$rating = $movie->addChild('rating', '5');
$rating->addAttribute('type', 'stars');

echo $sxe->asXML();

?>

The above outputs the expected XML:

<?xml version="1.0" standalone="yes"?>
<movies type="documentary">
	<movie>
		<title>PHP: Behind the Parser</title>
		<characters>
			<character>
				<name>Ms. Coder</name>
				<actor>Onlivia Actora</actor>
			</character>
			<character>
				<name>Mr. Coder</name>
				<actor>El Act&#xD3;r</actor>
			</character>
		</characters>
		<plot>
			something
		</plot>
		<great-lines>
			<line>Some shit</line>
		</great-lines>
		<rating type="thumbs">7</rating>
		<rating type="stars">5</rating>
	</movie>
	<movie>
		<title>PHP2: More Parser Stories</title>
		<plot>This is all about the people who make it work</plot>
		<characters>
			<character>
				<name>Mr. Parser</name>
				<actor>John Doe</actor>
			</character>
		</characters>
		<rating type="stars">5</rating>
	</movie>
</movies>

if you need an namespace, you must write a Prefix of the Namespace + the Name of the Attribute
("prefix:name") as the first parameter AND the uri as the third one.

Example:

<?php
$xml = new SimpleXMLElement("<packagedElement></packagedElement>");
$xml->addAttribute("xmi:type", "uml:Class", "http://schema.omg.org/spec/XMI/2.1");
echo $xml->asXml();
?>

Output:
<packagedElement xmlns:xmi="http://schema.omg.org/spec/XMI/2.1" xmi:type="uml:Class"></packagedElement>

If the attribute already exists, addAttribute does nothing.

Example:

<?php
$xml_string = <<<XML
<?xml version="1.0" encoding="UTF-8"?>
<root>
	<item id="foo">
</root>
XML;

$xml = simplexml_load_string($xml_string);
$xml->item->addAttribute('id', 'bar');
echo $xml->asXML();
?>

The above will output:

<?xml version="1.0" encoding="UTF-8"?>
<root>
	<item id="foo">
<root>

You cannot use this to update an existing attribute's value.

Instead, get a DOM version of the SimpleXMLElement and use setAttribute, as per:

$XML = '<element a="aa">Text</element>';
$snode = new simple_xml_element($XML);

$dnode = dom_import_simplexml($snode);
$dnode->setAttribute('a', 'bb');

Resulting XML for the node is:
<element a="bb">Text</element>

SimpleXMLElement::addChild:

Adds a child element to the XML node

public SimpleXMLElement SimpleXMLElement::addChild ( string $name [, string $value [, string $namespace ]] )

Adds a child to the node and returns a SimpleXMLElement of the child.

Params:

name: The name of the child element to add

value: If specified, the value of the child element

namespace: If specified, the namespace to which child element belongs

Return Values:

The addChild method returns a SimpleXMLElement object representing the child added to the 
XML node.

Examples:

Note: Listed examples may include example.php which refers to the XML string found in the first example
of the basic usage guide.

Example #1 Add attributes and children to a SimpleXML element:

<?php

include 'example.php';

$sxe = new SimpleXMLElement($xmlstr);
$sxe->addAttribute('type', 'documentary');

$movie = $sxe->addChild('movie');
$movie->addChild('title', 'PHP2: More Parser Stories');
$movie->addChild('plot', 'This is all about the people who make it work');

$characters = $movie->addChild('characters');
$character = $characters->addChild('character');
$character->addChild('name', 'Mr. Parser');
$character->addChild('actor', 'John Doe');

$rating = $movie->addChild('rating', '5');
$rating->addAttribute('type', 'stars');

echo $sxe->asXML();

?>

The above outputs as before, teh expected XML structure

To complete Volker Grabsch's comment stating:
"Note that although addChild() escapes "<" and ">", it does not escape the ampersand "&"."

To worka round that problem,, you can use a direct property assignment such as:

<?php
$xmlelement->value = 'my value < > &';
//results in <value>my value &lt; &gt; &amp;</value>
?>

Instead of doing:

<?php
$xmlelement->addChild('value', 'my value < > &');
//results in <value>my value &lt; &gt; &</value> (invalid XML)
?>

Also, here is a class with more functions for SimpleXMLElement:

<?php
//Extension for SimpleXMLElement

class ExSimpleXMLElement extends SimpleXMLElement
{
	//Add CDATA text in a node
	//@param string $cdata_text The CDATA value to add
	private function addCData($cdata_text)
	{
		$node = dom_import_simplexml($this);
		$no = $node->ownerDocument;
		$node->appendChild($no->createCDATASection($cdata_text));
	}

	//Create a child with CDATA value
	//@param string $name The name of the child element to add
	//@param string $cdata_text The CDATA value of the child element
	public function addChildCDATA($name,$cdata_text)
	{
		$child = $this->addChild($name);
		$child->addCData($cdata_text);
	}

	//Add SimpleXMLElement code into a SimpleXMLElement
	//@param SimpleXMLElement $append
	public function appendXML($append)
	{
		if ($append) {
			if (strlen(trim((string) $append))==0) {
				$xml = $this->addChild($append->getName());
				foreach($append->children() as $child) {
					$xml->appendXML($child);
				}
			} else {
				$xml = $this->addChild($append->getName(), (string) $append);
			}
			foreach($append->attributes() as $n => $v) {
				$xml->addAttribute($n, $v);
			}
		}
	}
}
?>

In the docs for google sitemaps it requires an element for mobile sitemaps that look
like this:

<mobile:mobile/>

I used some time to figure out how to make it, but it is quite simple when understood.

$mobile_schema = 'http://www.google.com/schemas/sitemap-mobile/1.0';

//Create root element
$xml_mobile = new SimpleXMLElement('
<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9" xmlns::mobile="'.$mobile_schema.'"></urlset>
');

//Add required children
$url_mobile = $xml_b_list_mobile->addChild('url');
$url_mobile->addChild('loc', 'your-mobile-site-url');
$url_mobile->addChild('mobile:mobile', null, $mobile_schema);

For this to work properly the attribute xmlns:mobile must be set in the root node, and then used
as namespace(third argument) when creating the mobile:mobile child with null as value

Note that although addChild() escapes "<" and ">", it does not escape the ampersand "&".

So addChild() is unsuited to handle user-defined input

Instead, you will have to replace all "&" with "&amp;" before calling addChild().

Or, use htmlspecialchars() which also replaces other characters, but won't do any harm
as addChild() won't replace those again

An example of how to create XML from Multidimensional Arrays:

<?php
//DATA
		$xmlData = array(
			array(
				"name" => "nameVal",
				"value" => "valVal",
				"css" => "cssVal"
			),
			array(
				"name" => "name1Val",
				"value" => "val1Val",
				"css" => "css1Val"
			),
			"tname" => array(
				array(
					"iTname" => "iTname",
					"iTname2" => "iTname1",
					"iTname2" => "iTname2",
					"iTbname3" => array(
						"iiTbname" => "tbName",
						"iiTbname1" => "tbName1",
					),
				),
			),
			"tdata" => "otheerData"
		);

//Create XML using string or array

//@param mixed $data input data
//@param SimpleXMLElement $xml
//@param string $child name of first level child
//
//@return adding xml formatted data into SimpleXmlElement

function data2XML(array $data, SimpleXMLElement $xml, $child = "items")
{
	foreach($data as $key => $val) {
		if(is_array($val)) {
			if(is_numeric($key)) {
				$node = $xml->addChild($child);
				$nodes = $node->getName($child);
			} else {
				$node = $xml->addChild($key);
				$nodes = $node->getName($key);
			}

			$node->addChild($nodes, self::data2xml($val, $node));
		} else {
			$xml->addChild($key, $val);
		}
	}

}

//Example of usage
$xml = new SimpleXMLElement("<root/>");
Util::data2XML($xmlData, $xml, "Items");
?>

SimpleXMLElement::asXML:

Return a well-formed XML string based on SimpleXML element

public mixed SimpleXMLElement::asXML ([ string $filename ])

The asXML method formats the parent object's data in XML version 1.0

Params:

filename: If specified, the function writes the data to the file rather than
returning it.

Return Values:

If the filename is not specified, this function returns a string on success and FALSE on error.
If the parameter is specified, it returns TRUE if the file was written successfully and FALSE
otherwise.

Examples:

Example #1 Get XML

<?php
$string = <<<XML
<a>
	<b>
		<c>text</c>
		<c>stuff</c>
	</b>
	<d>
		<c>code</c>
	</d>
</a>
XML;

$xml = new SimpleXMLElement($string);

echo $xml->asXML();

?>

The above will output:

<?xml version="1.0"?>
<a>
	<b>
		<c>text</c>
		<c>stuff</c>
	</b>
	<d>
		<c>code</c>
	</d>
</a>

asXML also works on Xpath results:

Example #2 using asXML() on SimpleXMLElement::xpath() results:

<?php
//Continued from example XML above

//Search for <a><b><c>
$result = $xml->xpath('/a/b/c');

while(list( , $node) = each($result)) {
	echo $node->asXML();
}
?>

Outputs:

<c>text</c><c>stuff</c>

To prevent asXML from encoding vowels unwantedly, simply use an appropiate XML header with
encoding in advance.

If you do so, asXML will happily leave your vowels (and the header) entirely untouched.

<?php

$xmlstr =
'<?xml version="1.0" encoding="UTF-8"?>
<keys>
	<key lang="en">&lt;Insert&gt;</key>
	<key lang="de">&lt;Einfügen&gt;</key>
</keys>';

$sxe = new SimpleXMLElement($xmlstr);

$output = $sxe->asXML();

?>

$xmlstr and $output are identical now.

The subsequent use of html_entity_decode() (as proposed in the very beginning in another post),
has several drawbacks:

It is slow
It is expensive
If there are already encoded arrow brackets or double quotes in your source for instance as above,
(as shown above), markup will be broken

Function asXML decodes special chars like danish o/ae and others to &#xE6;, &#xF8;

To get normal output use without quoting:

$xml = html_entity_decode($xml, ENT_NOQUOTES, 'UTF-8');

SimpleXMLElement::attributes:

Identifies an element's attributes

public SimpleXMLElement SimpleXMLElement::attributes ([ string $ns = NULL [, bool $is_prefix = false ]] )

This function provides the attributes and values defined within an xml tag

Note: SimpleXML has made a rule of adding iterative properties to most methods. They cannot be viewed
using var_dump() or anything else which can examine objects.

Params:

ns: An optional namespace for the retrieved attributes

is_prefix: Default to FALSE

Return values:

Returns a SimpleXMLElement object that can be iterated over to loop through the
attributes on the tag

Returns NULL if called on a SimpleXMLElement object that already represents an
attribute and not a tag.

Examples:

Example #1 interpet an XML string:

<?php
$string = <<<XML
<a>
	<foo name="one" game="lonely">1</foo>
</a>
XML;

$xml = simplexml_load_string($string);
foreach($xml->foo[0]->attributes() as $a => $b) {
	echo $a . '="' . $b . "\"\n";
}
?>

The above will output:

name="one"
game="lonely"

It is reall simple to access attributes using array from. However, you must convert them to strings
or ints if you plan on passing the values to functions.

<?php
SimpleXMLElement Object
(
	[@attributes] => Array
		(
			[id] => 55555
		)

	[text] => "hello world"
)
?>

Then using a function:

<?php
function xml_attribute($object, $attribute)
{
	if(isset($object[$attribute]))
		return (string) $object[$attribute];
}
?>

I can get the "id" like this:

<?php
print xml_attribute($xml, 'id'); //prints "55555"
?>

Note that you must provide the namespace if you want to access an attribute of a non-default
namespace:

Consider the following example:

<?php
$xml = <<<XML
<?xml version="1.0"?>
<Workbook xmlns="urn:schemas-microsoft-com:office:spreadsheet"
xmlns:ss="urn:schemas-microsoft-com:office:spreadsheet">
<Table Foo="Bar" ss:ExpandedColumnCount="7">
</Table>
</Workbook>
XML;

$sxml = new SimpleXMLElement($xml);

//Access attribute of default namespace
var_dump((string) $sxml->Table[0]['Foo']);
//Outputs: 'Bar'

//Access attribute of a non-default ns
var_dump((int) $sxml->Table[0]['ExpandedColumnCount']);
// outputs: 0

var_dump((int) $sxml->Table[0]->attributes('ss', TRUE)->ExpandedColumnCount);
//outputs: '7'
?>

<?php
$att = 'attributeName';

//You can access an element's attribute just like this:
$attribute = $element->attributes()->$att;

//This will save the value of the attribute, and not the object
$attribute = (string)$element->attributes()->$att;

//You also can edit it this way:
$element->attributes()->$att = 'New value of the attribute';
?>

Tip to get a real array of all attributes of a node (not SimpleXML's object acting like an
array)

<?php
//- $node is a SimpleXMLElement object

$atts_object = $node->attributes(); //- get all attributes, this is not a real array
$atts_array = (array) $atts_object; //typecast to an array

//Grab the value of '@attributes' key, which contains the array you are after
$atts_array = $atts_array['@attributes'];

var_dump($atts_object); //outputs object(SimpleXMLElement)[19]
						//public '@attributes' => ...

var_dump($atts_array); //outputs array (size=11)

?>

Use attributes to display when it meets certain condition defined attribute/value in XML tags

Consider the following example:

(file.xml)

<?xml version="1.0" encoding="UTF-8"?>

<list>
	<item type="Language">
		<name>PHP</name>
		<link>www.php.net</link>
	</item>
	<item type="Database">
		<name>Java</name>
		<link>www.oracle.com/br/technologies/java/</link>
	</item>
</list>

Checks if the attribute value equals "Language", if equal prints everything that is
related to "Language"

<?php

$xml = simplexml_load_file("file.xml");

foreach($xml->children() as $child) {
	
	$role = $child->attributes();

	foreach($child as $key => $value) {
		if($role == "Language")
		echo("[".$key."] ".$value . "<br />");
	}
}
?>

Output:

[name] PHP
[link] www.php.net

So lets say you have a DB type data in an XML string called $xmlstring with the key or item ID as an XML
Attribute and all content data as regular XML elements, as above.

SimpleXML processes the Attributes as an array, so we can play along and push the Attributes into an array.
Then we get the value of any specific Attr we want by addressing it by name.

Consider this data:

<?xml version="1.0" encoding="utf-8"?>
<data>
	<item ID="30001">
		<Company>Navarro Corp.</Company>
	</item>
	<item ID="30002">
		<Company>Performant Systems</Company>
	</item>
	<item ID="30003">
		<Company>Digital Showcase</Company>
	</item>
</data>

Example of listing both the ID Attribute and Company Element values:

<?php
$xmlObject = new SimpleXMLElement($xmlstring);
foreach ($xmlObject->children() as $node) {
	$arr = $node->attributes(); //returns an array
	print ("ID=".$arr["ID"]); //get the value of this attribute
	print (" Company=".$node->Company);
	print ("<p><hr>");
}
?>

Easiest and safest way to get attributes as an array is to use the iterator_to_array function:

<?php
	$x = new SimpleXMLElement('<div class="myclass" id="myid"/>');
	$attributes = iterator_to_array($x->attributes());
?>

SimpleXMLElement::children:

Finds children of given node

public SimpleXMLElement SimpleXMLElement::children ([ string $ns [, bool $is_prefix = false ]] )

This method finds the children of an element. The result follows normal iteration
rules.

Note: SimpleXML has made a rule of adding iterative properties to most methods. They cannot be
viewed using var_dump() or anything else which can examine objects.

Params:

ns: An XML namespace

is_prefix: If is_prefix is TRUE, ns will be regarded as a prefix. If FALSE, ns will be regarded
as a namespace URL.

Returns a SimpleXMLElement element, whether the node has children or not.

Example #1 Traversing a children() pseudo-array:

<?php
$xml = new SimpleXMLElement(
'<person>
<child role="son">
	<child role="daughter"/>
</child>
<child role="daughter">
	<child role="son">
		<child role="son"/>
	</child>
</child>
</person>'); //indention level of one error in terms of person? Perhaps.

foreach ($xml->children() as $second_gen) {
	echo ' The person begot a ' . $second_gen['role'];

	foreach ($second_gen->children() as $third_gen) {
		echo ' who begot a ' . $third_gen['role'] . ';';


		foreach ($third_gen->children() as $fourth_gen) {
			echo ' and that ' . $third_gen['role'] .
				' begot a ' . $fourth_gen['role'];
		}
	}
}
?>

The above will output:

The person begot a son who begot a daughter; THe person
begot a daughter who begot a son; and that son begot a son

Example #2 Using namespaces:

<?php
$xml = '<example xmlns:foo="my.foo.urn">
	<foo:a>Apple</foo:a>
	<foo:b>Banana</foo:b>
	<c>Cherry</c>
</example>';

$sxe = new SimpleXMLElement($xml);

$kids = $sxe->children('foo');
var_dump(count($kids));

$kids = $sxe->children('foo', TRUE);
var_dump(count($kids));

$kids = $sxe->children('my.foo.urn');
var_dump(count($kids));

$kids = $sxe->children('my.foo.urn', TRUE);
var_dump(count($kids));

$kids = $sxe->children();
var_dump(count($kids));
?>

Int(0)
int(2)
int(2)
int(0)
int(1)

SimpleXMLElement::children() returns a node object no matter if the current node has children or not.
Use count() on the return value to see if there are any children. As of PHP 5.3.0, SimpleXMLElement::count()
may be used instead.

Here is a simple, recursive function to transform XML data into pseudo E4X syntax i.e root.child.value = foobar

<?php
error_reporting(E_ALL);

$xml = new SimpleXMLElement(
'<Patriach>
	<name>Bill</name>
	<wife>
		<name>Vi</name>
	</wife>
	<son>
		<name>Bill</name>
	</son>
	<daughter>
		<name>Jeri</name>
		<husband>
			<name>Mark</name>
		</husband>
		<son>
			<name>Greg</name>
		</son>
		<son>
			<name>Tim</name>
		</son>
		<son>
			<name>Mark</name>
		</son>
		<son>
			<name>Josh</name>
				<wife>
					<name>Kristine</name>
				</wife>
				<son>
					<name>Blake</name>
				</son>
				<daughter>
					<name>Liah</name>
				</daughter>
		</son>
	</daughter>
</Patriarch>');

RecurseXML($xml);

function RecurseXML($xml, $parent="")
{
	$child_count = 0;
	foreach($xml as $key=>$value)
	{
		$child_count++;
		if(RecurseXML($value,$parent.".".$key) == 0) //no children, aka "leaf node"
		{
			print ($parent . "." . (string)$key . " = " . (string)$value . "<BR>\n");
		}
	}
	return $child_count;
}

?>

The output....

.name = Bill
.wife.name = Vi
.son.name = Bill
.daughter.name = Jeri
.daughter.husband.name = Mark
.daughter.son.name = Greg
.daughter.son.name = Tim
.daughter.son.name = Mark
.daughter.son.name = Josh
.daughter.son.wife.name = Kristine
.daughter.son.son.name = Blake
.daughter.son.daughter.name = Liah

Just a quick addition:

If you need to access a child node which contains a dash, you need to encapsulate it with {""}.

For example:
<?php
foreach ($domain->domain-listing as $product) {
}
?>

The example above does not work because of the dash. But instead you need to use:
<?php
foreach ($domain->{"domain-listing"} as $product) {
}
?>

SimpleXMLElement::__construct:

Creates a new SimpleXMLElement object

final public SimpleXMLElement::__construct ( string $data [, int $options = 0 [, bool $data_is_url = false [, string $ns
= "" [, bool $is_prefix = false ]]]] )

Creates a new SimpleXMLElement object

Params:

data: A well-formed XML string or the path or URL to an XML document if data_is_url is TRUE.

options: Optionally used to specify additional Libxml params.

Note: It may be necessary to pass LIBXML_PARSEHUGE to be able process deeply nested XML or very large text nodes.

data_is_url: By default, data_is_url is FALSE. Use TRUE to specify that data is a path or URL to an XML
document instead of string data.

ns: Namespace prefix or URI

is_prefix: TRUE if ns is a prefix, FALSE if it's a URI; defaults to FALSE.

Returns a SimpleXMLElement object representing data.

Errors/Exceptions:

Produces an E_WARNING error message for each error found in the XML data and additionally
throws an Exception if the XML data could not be parsed.

Tip: Use libxml_use_internal_errors() to surpress all XML errors, and libxml_get_errors()
to iterate over them afterwards.

Examples:

Note: Listed examples may include example.php, which refers to the XML string found in the first
example of the basic usage guide.

Example #1 Create a SimpleXMLElement object:

<?php

include 'example.php';

$sxe = new SimpleXMLElement($xmlstr);
echo $sxe->movie[0]->title;

?>

The above example will output:

PHP : Behind the Parser

Example #2 Create a SimpleXMLElement object from a URL>

<?php

$sxe = new SimpleXMLElement('http://example.org/document.xml', NULL, TRUE);
echo $sxe->asXML();

?>

Changelog:

Version 		Desc

5.2.0 			Added the ns and is_prefix parameters

5.1.2 			Added the options and data_is_url params

This class is extendable, but it is too bad that its constructor cannot be overriden (PHP says its
a final method). Thus the class should be wrapped using the delegation principle rather than extended.

Using libxml_use_internal_errors() may surpress errors but Exception still requires decent handling.
I used following code snippet.

<?php
libxml_use_internal_errors(true);
try{
	$xmlToObject = new SimpleXMLElement($notSoWellFormedXML);
} catch (Exception $e){
	echo 'Please try again later...';
	exit();
}
?>

The manual does not really explain what hte $ns argument (and the accompanying $is_prefix) are for.

What they do is similar to the ->children() method: They set the context of the returned object to that
namespace, so that access via ->elementName and ['attributeName'] refer to elements and attributes in that namespace.

In particular, they do *not* change the namespaces which exist on the document.

See this example:

<?php
//This XML contains two elements called <child>
// one is the namespace http://example.com, with local prefix 'ws'
// The other has no namespace (no prefix, and no default namespace declared)
$xml = '<ws:example xmlns:ws="http://example.com"><child>Not in namespace</child><ws:child>in example
namespace</ws:child></ws:example>';

$sx0 = new SimpleXMLElement($xml, 0, false);
$xs1 = new SimpleXMLElement($xml, 0, false, 'http://example.com');
$sx2 = new SimpleXMLElement($xml, 0, false, 'ws', true);

echo "
	Without: {$sx0->child}
	By namepace: {$sx1->child}
	By prefix: {$sx2->child}
";
?>

Output:

Without: Not in namespace
By namespace: In example namespace
By prefix: In example namespace

You won't be able to load an XML file without root element:

//This will throw an exception
$xml = new SimpleXMLElement('<?xml version="1.0" encoding="UTF-8"?>', null, false);

//here is the solution
$xml = new SimpleXMLElement('<?xml version="1.0" encoding="UTF-8"?><root></root>', null, false);

Its worth noting that the behavior of SimpleXMLElement::__construct is not exactly the same as
simplexml_load_string, regarding libxml_use_internal_errors().

In my case:

<?php
libxml_use_internal_errors(true);
new \SimpleXmlElement($data);
?>

Was still throwing an error, whilst hte following did not:

<?php
libxml_use_internal_errors(true);
simplexml_load_string($data);
?>

Everything worked fine and i stopped getting an error.

SimpleXMLElement::count:

Counts the children of an element

public int SimpleXMLElement::count()

This method counts the number of children of an element

Returns:

Returns the number of elements of an element

Examples:

Example #1 Counting the number of children:

<?php
$xml = <<<EOF
<people>
	<person name="Person 1">
		<child />
		<child />
		<child />
	</person>
	<person name="Person 2">
		<child />
		<child />
		<child />
		<child />
		<child />
	</person>
</people>
EOF;

$elem = new SimpleXMLElement($xml);

foreach ($elem as $person) {
	printf("%s has got %d children.\n", $person['name'], $person->count());
}
?>

The above outputs:

Person 1 has got 3 children.
Person 2 has got 5 children.

Another example of usage:

<?php
$count = $node->count(); // PHP > 5.3
?>

SimpleXMLElement::getDocNamespaces:

Returns namespaces declared in document

public array SimpleXMLElement::getDocNamespaces ([ bool $recursive = false [, bool $from_root = true ]] )

Returns namespaces declared in document

Params:

recursive: If specified, returns all namespaces declared in parent and child nodes. Otherwise, returns
only namespaces declared in root node.

from_root: Allows you to recursively check namespaces under a child node instead of from the root of
the XML doc.

Return values:

The getDocNamespaces method returns an array of namespace names with their associated URIs.

Examples:

Example #1 Get document namespaces

<?php

$xml = <<<XML
<?xml version="1.0" standalone="yes"?>
<people xmlns:p="http://example.org/ns">
	<p:person id="1">John Doe</p:person>
	<p:person id="2">Susie Q. Public</p:person>
</people>
XML;

$sxe = new SimpleXMLElement($xml);

$namespaces = $sxe->getDocNamespaces();
var_dump($namespaces);

?>

The above will output:

array(1) {
	["p"]=>
	string(21) "http://example.org/ns"
}

Example #2 Working with multiple namespaces

<?php

$xml = <<<XML
<?xml version="1.0" standalone="yes"?>
<people xmlns:p="http://example.org/ns" xmlns:t="http://example.org/test">
	<p:person t:id="1">John Doe</p:person>
	<p:person t:id="2" a:addr="123 Street" xmlns:a="http://example.org/addr">
		Susie Q. Public
	</p:person>
</people>
XML;

$sxe = new SimpleXMLElement($xml);

$namespaces = $sxe->getDocNamespaces(TRUE);
var_dump($namespaces);

?>

The above will output:

array(3) {
	["p"]=>
	string(21) "http://example.org/ns"
	["t"]=>
	string(23) "http://example.org/test"
	["a"]=>
	string(23) "http://example.org/addr"
}

Changelog:

Version 		Desc

5.4.0 			Added from_root parameter.

SimpleXMLElement::getName:

gets the name of the XML element

public string SimpleXMLElement::getName()

Gets the name of the XML element

Returns:

The getName method returns as a string the name of the XML tag referenced by the SimpleXMLElement object.

Examples:

Note: Listed examples may include example.php, which refers to the XML string found in the first example of
the basic usage guide.

Example #1 Get XML elements names:

<?php
include 'example.php';
$sxe = new SimpleXMLElement($xmlstr);

echo $sxe->getName() . "\n";

foreach ($sxe->children() as $child)
{
	echo $child->getName() . "\n";
}

?>

The above outputs:

movies
movie

SimpleXMLElement::getNamespaces:

Returns namespaces used in document

public array SimpleXMLElement::getNamespaces ([ bool $recursive = false ])

Returns namespaces used in document

Params:

recursive: If specified, returns all namespaces used in parent and child nodes. Otherwise, returns
only namespaces used in root node.

Returns:

The getNamespaces method returns an array of namespace names with their associated URIs.

Examples:

Example #1 get document namespaces in use

<?php

$xml = <<<XML
<?xml version="1.0" standalone="yes"?>
<people xmlns:p="http://example.org/ns" xmlns:t="http://example.org/test">
	<p:person id="1">John Doe</p:person>
	<p:person id="2">Susie Q. Public</p:person>
</people>
XML;

$sxe = new SimpleXMLElement($xml);

$namespaces = $sxe->getNamespaces(true);
var_dump($namespaces);

?>

The above outputs:

array(1) {
	["p"]=>
	string(21) "http://example.org/ns"
}

If the namespace is nested in the xml, then you will have to loop over the nodes.

<?php

$xml = <<<XML
<?xml version="1.0" encoding="UTF-8"?>
	<people xmlns:p="http://example.org/ns" xmlns:t="http://example.org/test">
		<items>
			<title>This is a test of namespaces and my patience</title>
			<p:person id="1">John doe</p:person>
			<p:person id="2">Susie Q. Public</p:person>
			<p:person id="1">Fish Man</p:person>
		</items>
	</people>
XML;

$sxe = new SimpleXMLElement($xml);

foreach ($sxe as $out_ns)
{
	$ns = $out_ns->getNamespaces(true);

	$child = $out_ns->children($ns['p']);

	foreach ($child as $out)
	{
		echo $out . "<br />";
	}
}
?>

This article has more info:

Parsing XML With SimpleXML:

Parsing XML essentialy means navigating through an XML Document and returning the relevant data.
An increasing number of web services reutrn data in JSON format, btu a large number sitll return
XML, so you need to master parsing XML if you really want to consume the full breath of APIs.

Using PHP's SimpleXML extension that was introduced back in PHP 5.0, working with XML is very
easy to do. In this article, i'll show you how.

Basic Usage:

Let's start with the following sample as languages.xml

<?xml version="1.0" encoding="utf-8"?>
<languages>
	<lang name="C">
		<appeared>1972</appeared>
		<creator>Dennis Ritchie</creator>
	</lang>
	<lang name="PHP">
		<appeared>1995</appeared>
		<creator>Rasmus Lerdorf</creator>
	</lang>
	<lang name="Java">
		<appeared>1995</appeared>
		<creator>James Gosling</creator>
	</lang>
</languages>

The above XML document encodes a list of programming languages, giving two details about 
each language : its year of implementation and the name of its creator.

The first step is to loading the XML using either simplexml_load_file() or simplexml_load_string().
As you might expect, the former will load the XML file a file and the later will load the XML from
a given string.

<?php
$languages = simplexml_load_file("languages.xml");

Both functions read the entire DOM tree into memory and returns a SimpleXMLElement
object representation of it. In the above example, the object is stored into the
$languages var. You can then use var_dump() or print_r() to get hte details
of the returned object if you like..

SimpleXMLElement Object
(
	[lang] => Array
		(
			[0] => SimpleXMLElement Object
				(
					[@attributes] => Array
						(
							[name] => C
						)
					[appeared] => 1972
					[creator] => Dennis Ritchie
				)
			[1] => SimpleXMLElement Object
				(
					[@attrbiutes] => Array
						(
							[name] => PHP
						)
					[appeared] => 1995
					[creat] => Rasmus Lerdorf
				)
			[2] => SimpleXMLElement Object
				(
					[@attributes] => Array
						(
							[name] => Java
						)
					[appeared] => 1995
					[creator] => James Gosling
				)
		)
)


The XML contained a root language element which wrapped three lang elements, which is why
the SimpleXMLElement has the public property lang which is an array of three SimpleXMLElements.

Each element of the array corresponds to a lang element in the XML document.

You can access the properties of the object in the usual way with the -> operator.
For example, $languages->lang[0] will give you a SimpleXMLElement object which corresponds
to the first lang element.

This object then has two public properties: appeared and creator

<?php
$languages->lang[0]->appeared;
$languages->lang[0]->creator;

Iterating through the list of languages and showing their details can be done very easily
with standard looping methods such as ofreach

<?php
foreach ($languages->lang as $lang) {
	printf(
		"<p>%s appeared in %d and was created by %s.</p>",
		$lang["name"],
		$lang->appeared,
		$lang->creator
	);
}

Notice that i accessed the lang element's name attribute to retrieve the name of the 
language. You can access any attribute of an element represented as SimpleXMLElement object
using array notation like this.

Dealing with namespaces:

Many times you will encounter namespaced elements while working with XML from different
web services. Lets modify our languages.xml example to reflect the usage of namespaces:

<?xml version="1.0" encoding="utf-8"?>
<languages
	xmlns:dc="http://purl.org/dc/elements/1.1/">
	<lang name="C">
		<appeared>1972</appeared>
		<dc:creator>Dennis Ritchie</dc:creator>
	</lang>
	<lang name="PHP">
		<appeared>1995</appeared>
		<dc:creator>Rasmus Lerdorf</dc:creator>
	</lang>
	<lang name="Java">
		<appeared>1995</appeared>
		<dc:creator>James Gosling</dc:creator>
	</lang>
</languages>

Now the creator element is placed under the namespace dc which points to http://purl.org/dc/elements/1.1/. if you
try to print hte creator of a language using our previous technique, it will not work. in order to 
read namespaced elements like this you need to use one of the following approaches..

the first approach is to use namespace URI directly in your code when accessing namespaced elements.
The following example demonstrates how:

<?php
$dc = $languages->lang[1]->children("http://purl.org/dc/elements/1.1/");
echo $dc->creator;

The children() method takes a namespace and returns the children of the element that are prefixed
with it. It accepts two arguments, teh first is the XML namespace and the latter is an optional
Boolean which defaults to false. If you pass true, the namespace will be treated as a prefix
rather than the actual namespace URI.

The second approach is to read the namespace URI from the document and use it while accessing
namespaced elements. This is actually a cleaner way of accessing elements because you do not have
to hardcode the URI.

<?php
$namespaces = $languages->getNamespaces(true);
$dc = $languages->lang[1]->children($namespaces["dc"]);

echo $dc->creator;

The getNamespaces() method returns an array of namespace prefixes with their associated URIs..
It accepts an optional param which defaults to false. If you seti t to true then the method
will return the namespaces used in parent and child nodes. Otherwise, it finds namespaces
used within the parent node only.

Now you can iterate through the list of languages like so:

<?php
$languages = simplexml_load_file("languages.xml");
$ns = $languages->getNamespaces(true);

foreach($languages->lang as $lang) {
	$dc = $lang->children($ns["dc"]);
	printf(
		"<p>%s appeared in %d and was created by %s.</p>",
		$lang["name"],
		$lang->appeared,
		$dc->creator
	);
}

A practical example - Parsing Youtube Video Feed:

Lets walkj through an example that retrieves the RSS feed from a Youtube
channel displays links to all of the videos from it.
For this, we need to make a call to hte following URL:

http://gdata.youtube.com/feeds/api/users/uploads

The URL returns a list of the latest videos from the given channel in XML format.
We will parse the XML and get hte following pieces of info for each video:

Video URL
Thumbnail
Title

We will start out by retrieving and loading the XML.

<?php
$channel = "channelName";
$url = "http://gdata.youtube.com/feeds/api/users/".$channel."/uploads";
$xml = file_get_contents($url);

$feed = simplexml_load_string($xml);
$ns=$feed->getNameSpaces(true);

If you take a look at the XML feed you can see there are several entity elements
each of which stores the details of a specific video from the channel. But we are
concerned only with thumbnail image, video URL and title. The three elements are
children of group, which is a child of entry:

<entry>
	...
	<media:group>
		...
		<media:player url="video url"/>
		<media:thumbnail url="video url" height="height" width="width"/>
		<media:title type="plain">Title...</media:title>
		....
	</media:group>
</entry>

We simply loop through all the entry elements, and for each one we can extract the relevant
information. Note that player, thumbnail and title are all under the media namespace.
So, we need to proceed like the earlier example.

We get the namespaces from the document and use the namespace while accessing the elements.

<?php
foreach ($feed->entry as $entry) {
		$group=$entry->children($ns["media"]);
		$group=$group->group;
		$thumbnail_attrs=$group->thumbnail[1]->attributes();

		$image=$thumbnail_attrs["url"];
		$player=$group->player->attributes();
		$link=$player["url"];
		$title=$group->title;

		printf('<p><a href="%s"><img src="%s" alt="%s"></a></p>',
				$player, $image, $title);
}

Conclusion:

Now that you know how to use SImpleXML to parse XML data, you can improve your skills by parsing 
different XML 	feeds from various APIs. But an important point to consider is that SimpleXML
reads the entire DOM into memory, so if you are parsing large data sets then you may face
memory issues.

In those cases it is advisable to use something other than SimpleXML, preferably
an event-based parsed such as XML Parser. TO learn more about SimpleXML,check out
its documentation.

TO read a namespace node you have to use the children method.

<?php

$xml = <<<XML
<?xml version="1.0" encoding="UTF-8"?>
<people xmlns:p="http://example.org/ns" xmlns:t="http://example.org/test">
	<p:person id="1">John Doe</p:person>
	<p:person id="2">Susie Q. Public</p:person>
</people>
XML;

$sxe = new SimpleXMLElement($xml);

$ns = $sxe->getNamespaces(true);

$child = $sxe->children($ns['p']);

foreach ($child->person as $out_ns)
{
	echo $out_ns;
}

?>

SimpleXMLElement::registerXPathNamespace:

Creates a prefix/ns context for the next XPath query

Desc:

public bool SimpleXMLElement::registerXPathNamespace ( string $prefix , string $ns )

Creates a prefix/ns context for the next XPath query. In particular, this is helpful if the
provider of the given XML document alters the namespace prefixes.

registerXPathNamespace will create a prefix for the associated namespace, allowing one
to access nodes in that namespace without the need to change code to allow for the
new prefixes dictated by the provider.

Params:

prefix: The namespace prefix to use in the XPath query for the namespace given in ns.

ns: The namespace to use for the XPath query. This must match a namespace in use by the
XML Document or the XPath query using prefix will not return any results

Returns TRUE on success or FALSE on failure

Example #1 Setting a namespace prefix to use in an XPath query:

<?php

$xml = <<<EOD
<book xmlns:chap="http://example.org/chapter-title">
	<title>My Book</title>
	<chapter id="1">
		<chap:title>Chapter 1</chap:title>
		<para>fok u</para>
	</chapter>
	<chapter id="2">
		<chap:title>Chapter 2</chap:title>
		<para> no u</para>
	</chapter>
</book>
EOD;

$sxe = new SimpleXMLElement($xml);

$sxe->registerXPathNamespace('c', 'http://example.org/chapter-title');
$result = $sxe->xpath('//c:title');

foreach ($result as $title) {
	echo $title . "\n";
}

?>

The above outputs:

Chapter 1
Chapter 2

Notice how the XML document shown in the example sets a namespace with a prefix of chap. Imagine that this document
(or another one like it) may have used a prefix of c in the past for the same namespace.

Since it has changed, the XPath query will no longer return the proper results and the query will require modification
. using registerXPathNamespace avoids future modification of the query even if the provider changes the namespace
prefix.

SimpleXMLElement::saveXML:

Alias of SimpleXMLElement::asXML()

This method is an alias of SimpleXMLElement::asXML()

SimpleXMLElement::__toString:

Returns the string content

public string SimpleXMLElement::__toString()

Returns text content that is directly in this element. Does not return
text content that is inside this element's children.

Returns the string content on success, or empty string on failure

Example #1 Get string content:

<?php
$xml = new SimpleXMLElement('<a>1 <b>2 </b>3</a>');
echo $xml;
?>

The above outputs:

1 3

For those whom it may not be immideatly obious from the example, the echo is what is
forcing __toString() to be used.

however, to assign the text of a node (but not its children) to a var:

$XML = new SimpleXMLElement('<p>Hello<span> world</span>.<span> Good day!</span></p>');

$Text = $XML->__toString();

is effectively:

$Text = 'Hello.'; // The <span>s are ignored.

Either of:
$Text = $XML->span->__toString();
$Text = $XML->span[0]->__toString();

is effectively:

$Text = ' world'; //only first span is used

$Text = $XML->span[1]->__toString();

is effectively:
$Text = ' Good day!'; //Only the second <span> is used.

SimpleXMLElement::xpath:

Runs XPath query on XML data

public array SimpleXMLElement::xpath ( string $path )

The xpath method searches the SimpleXML node for children matching the
XPath path

Params:

path: An XPath path

Returns an array of SimpleXMLElement objects or FALSE in case of error

Example of usage:

<?php
$string = <<<XML
<a>
	<b>
		<c>text</c>
		<c>stuff</c>
	</b>
	<d>
		<c>code/c>
	</d>
</a>
XML;

$xml = new SimpleXMLElement($string);

//Search for <a><b><c>
$result = $xml->xpath('/a/b/c');

while(list( , $node) = each($result)) {
	echo '/a/b/c: ' . $node . "\n";
}

//Relative paths also works
$result = $xml->xpath('b/c');

while(list( , $node) = each($result)) {
	echo 'b/c: ' . $node . "\n";
}
?>

The above will output:

/a/b/c: text
/a/b/c: stuff
b/c: text
b/c: stuff

Notice that the two results are equal

To run an xpath query on an XML document that has a namespace, the namespace must be registered with
SimpleXMLElement::registerXPathNamespace() before running the query. If the XML document namespace does
not include a prefix, you must make up an arbitrary one, and then use it in your query.

<?php
$strXml = <<<XML
<?xml version="1.0" encoding="UTF-8"?>
<mydoc xmlns="http://www.url.com/myns">
	<message>Test message</message>
</mydoc>
XML;

$xmlDoc = new \SimpleXMLElement($strXml);

foreach($xmlDoc->getDocNamespaces() as $strPrefix => $strNamespace) {
	if(strlen($strPrefix) == 0) {
		$strPrefix="a"; //assign an arbitrary namespace prefix
	}
	$xmlDoc->registerXPathNamespace($strPrefix, $strNamespace);
}

print($xmlDoc->xpath("//a:message")[0]); //Use the arbitrary namespace prefix in the query
?>

This will output:

Test message

On a xml that have a namespace you need to do this before your xpath request (or empty array will be returned):

<?php
$string = str_replace('xmlns=', 'ns=', $string); //$string is a string that contains xml...
?>

If you want to search multiple values from xml on the behalf or one value then this code can be helpful
to you.

if there is:
<Record>
	<country>Pakistan</country>
	<code>+92</code>
	<Value>100<Value>
</Record>

Then try this one:
<?php
$sxe = simplexml_load_file("countries.XML");
foreach($sxe->xpath('//RECORD') as $item) {
	
	$row = simplexml_load_string($item->asXML());
	$v = $row->xpath('//country[. ="Pakistan"]');
	if($v[0]){
		print $item->country;
		print $item->code;
		print $item->value;
	}
}
?>

As mentioned already, xpath will fail if the default namespace 'xmlns' is used like in:

<?php

$xmlstring = $string = <<<XML
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<workbook xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main">
	<fileVersion appName="xl" />
</workbook>
XML;
?>

xpath cannot search through the xml without explicitly specifying a namespace.
There are 2 options:
1. Rename the 'xmlns' into something else to trick xpath into believing that no default namespace is defined.
2. register a string as the default namespace nad use that string in all your queries. Unfortunately, an empty
space will not work.

No other option currently exist until XPath2.0 becomes the default lib.

If you want to find easily all records satisfying some condition in XML data akin to:

....
	<book id="bk101">
		<author>Gambardella, Matthew</author>
		<title>XML Developer's Guide</title>
		<genre>Computer</genre>
		<price>44.95</price>
	</book>
	<book id="bk102">
		<author>Ralls, Kim</author>
		<title>Midnight Rain</title>
		<genre>Fantasy</genre>
		<price>5.95</price>
	</book>
....

Try the example below:

<?php

$xmlStr = file_get_contents('data/books.xml');
$xml = new SimpleXMLElement($xmlStr);
//search records by tag value:
//find all book records with price higher than 40$
$res = $xml->xpath("book/price[.>'40']/parent::*");
print_r($res);

?>

You will see responses like:

Array (
[0] => SimpleXMLElement Object
		(
			[@attributes] => Array
				(
					[id] => bk101
				)

			[author] => Gambardella, Matthew
			[title] => XML Developer's Guide
			[genre] => Computer
			[price] => 44.95
			[publish_date] => 2000-10-01
			[decription] => An in-depth look at creating applications with XML.
		)
	)


Xpath actually knows which element is root regardless of element on which you execute it.
Example:

<?php

$string = <<<XML
<a>
<b>
	<c>text</c>
	<c>stuff</c>
</b>
<b>
	<c>code</c>
</b>
</a>
XML;

header('content-type: text/plain');

$xml = new SimpleXMLElement($string);

//relative to root
$b0=$xml->b[0]->xpath('//c');
while(list( , $node) = each($b0)) {
	echo 'b[0]: //c: ' . $node . "\n";
}

$b1 = $xml->b[1]->xpath('//c');
while(list( , $node) = each($b1)) {
	echo 'b[1]: //c: ' . $node . "\n";
}

echo "\n";

//relative to current element
$b0=$xml->b[0]->xpath('.//c');
while(list( , $node) = each($b0)) {
	echo 'b[0]: .//c: ' . $node . "\n";
}

$b1=$xml->b[1]->xpath('.//c');
while(list( , $node) = each($b1)) {
	echo 'b[1]: .//c ' . $node . "\n";
}


?>

Will return:
b[0]: //c: text
b[0]: //c: stuff
b[0]: //c: code
b[1]: //c: text
b[1]: //c: stuff
b[1]: //c: code

b[0]: .//c: text
b[0]: .//c: stuff
b[1]: .//c: code

xpath() can also be used to select elements by their attributes. For a good XPath reference check out:

<?php
$string = <<<XML
<sizes>
	<size label="Square" width="75" height="75" />
	<size label="Thumbnail" width="100" height="62" />
	<size label="Small" width="112" height="69" />
	<size label="Large" width="112" height="69" />
</sizes>
XML;

$xml = simplexml_load_string($string);
$result = $xml->xpath("//size[@label='Large']");

//print the first (and only) member of the array
echo $result[0]->asXml();
?>

The script would print:

<size label="Large" width="112" height="69"/>

Looks like the relative path is relative to the SimpleXMLElement object that you call the Xpath() method on.
Basically chopping off the root element.

<?php
$string = <<<XML
<foo>
	<bar>
		<a>
			<b>
				<c>text</c>
				<c>stuff</c>
			</b>
			<d>
				<c>code</c>
			</d>
		</a>
	</bar>
</foo>
XML;

$xml = new SimpleXMLElement($string);
//Search for children using 2nds level relative <bar><a><b><c>
$result = $xml->xpath('a/b/c');
if ($result)
foreach($result as $node) {
	drupal_set_message(t('a/b/c: @node.' . array('@node' => $node)));
}
else
	drupal_set_message(t('a/b/c: failed.'));

//it relative to the SimpleXMLElement Search for 2nds level relative <bar><a><b><c> but where is foo
$bar = $xml->bar;
$result = $bar->xpath('a/b/c');
foreach($result as $node) {
	drupal_set_message(t('bar->a/b/c: @node.', array('@node' => $node)));
}
?>

Results in:

#
# a/b/c: failed.
# bar->a/b/c: text.
# bar->a/b/c: stuff.

Note that the above methods belonged to the SimpleXMLElement class.

The following belong to the SimpleXMLIterator class:

The SimpleXMLIterator provides recursive iteration over all nodes of a SimpleXMLElement object.

Class synposis:

SimpleXMLIterator extends SimpleXMLElement implements RecursiveIterator, Countable {
	
	//methods
	public mixed current()
	public SimpleXMLIterator getChildren()

	public bool hasChildren()
	public mixed key()

	public void next()
	public void rewind()
	public bool valid()

	//inherited methods
	final public SimpleXMLElement::__construct ( string $data [, int $options = 0 [, bool $data_is_url = false [, string $ns = "" [,
		bool $is_prefix = false ]]]] )

	public void SimpleXMLElement::addAttribute ( string $name [, string $value [, string $namespace ]] )
	public SimpleXMLElement SimpleXMLElement::addChild ( string $name [, string $value [, string $namespace ]] )

	public mixed SimpleXMLElement::asXML ([ string $filename ])
	public SimpleXMLElement SimpleXMLElement::attributes ([ string $ns = NULL [, bool $is_prefix = false ]] )

	public SimpleXMLElement SimpleXMLElement::children ([ string $ns [, bool $is_prefix = false ]] )
	public int SimpleXMLElement::count()

	public array SimpleXMLElement::getDocNamespaces ([ bool $recursive = false [, bool $from_root = true ]] )
	public string SimpleXMLElement::getName()

	public array SimpleXMLElement::getNamespaces ([ bool $recursive = false ] )
	public bool SimpleXMLElement::registerXPathNamespace ( string $prefix, string $ns )

	public string SimpleXMLElement::__toString()
	public array SimpleXMLElement::xpath ( string $path )
}

The documentation is a bit sparse for SimpleXmlIterator. Here is an example showing the use of its
methods. xml2Array and sxiToArray work together to convert an XML document to an associative array 
structure.

The contents of cats.xml:
==================================
<cats>
	<cat>
		<name>Jack</name>
		<age>2</age>
		<color>grey</color>
		<color>white</color>
	</cat>
	<cat>
		<name>Maxwell</name>
		<age>12</age>
		<color>orange</color>
		<color>black</color>
	</cat>
</cats>
===================================

<?php
function xml2array($fname){
	$sxi = new SimpleXmlIterator($fname, null, true);
	return sxiToArray($sxi);
}

function sxiToArray($sxi){
	$a = array();
	for( $sxi->rewind(); $sxi->valid(); $sxi->next() ) {
		if(!array_key_exists($sxi->key(), $a)){
			$a[$sxi->key()] = array();
		}
		if($sxi->hasChildren()){
			$a[$sxi->key()][] = sxiToArray($sxi->current());
		}
		else{
			$a[$sxi->key()][] = strval($sxi->current());
		}
	}
	return $a;
}

// Read cats.xml and print the results:
$catArray = xml2array('cats.xml');
print_r($catArray);
?>

Results (reformatted a bit for compactness and clarity):
=========================================================
Array(
	[cat] => Array(
		[0] => Array(
			[name] => Array(  [0] => Jack 	)
			[age] => Array(   [0] => 2 		)
			[color] => Array( 	[0] => orange
								[1] => black 	)
		)
	)
)

Most of the time we need to convert the XML to array or JSON, but now i have completed
the requirement of converting XML to XPath which make our template easily getting data from
XML data source due to the Xpath mapping.

Here is the function:

<?php

function sxiToXpath($sxi, $key = null, &$tmp = null)
{
	$keys_arr = array();
	//get the keys count array
	for ($sxi->rewind(); $sxi->valid(); $sxi->next())
	{
		$sk = $sxi->key();
		if (array_key_exists($sk, $keys_arr))
		{
			$keys_arr[$sk]+=1;
			$keys_arr[$sk] = $keys_arr[$sk];
		}
		else
		{
			$keys_arr[$sk] = 1;
		}
	}
	//create the xpath
	for ($sxi->rewind(); $sxi->valid(), $sxi->next())
	{
		$sk = $sxi->key();
		if (!isset($$sk))
		{
			$$sk = 1;
		}
		if ($keys_arr[$sk] >= 1)
		{
			$spk = $sk . '[' . $$sk . ']';
			$keys_arr[$sk] = $keys_arr[$sk] - 1;
			$$sk++;
		}
		else
		{
			$spk = $sk;
		}
		$kp = $key ? $key . '/' . $spk : '/' . $sxi->getName() . '/' . $spk;
		if ($sxi->hasChildren())
		{
			sxiToXpath($sxi->getChildren(), $kp, $tmp);
		}
		else
		{
			$tmp[$kp] = strval($sxi->current());
		}
		$at = $sxi->current()->attributes();
		if ($at)
		{
			$tmp_kp = $kp;
			foreach ($at as $k => $v)
			{
				$kp .= '/@' . $k;
				$tmp[$kp] = $v;
				$kp = $tmp_kp;
			}
		}
	}
	return $tmp;
}

function xmlToXpath($xml)
{
	$sxi = new SimpleXmlIterator($xml);
	return sxiToXpath($sxi);
}

//How to use the function
$xml = <<<EOT
<?xml version="1.0" encoding="utf8" ?>
<data>
	<item ID="30001">
		<Company>Navarro Corp.</Company>
	</item>
	<item ID="30002" IDd="30002">
		<Company>Performant Systems</Company>
	</item>
	<item ID="30003">
		<Company id='id_test'><g id='id_g'>glove</g></Company>
	</item>
	<item>
	</item>
</data>
EOT;

$rs = xmlToXpath($xml);
print_r($rs);

//The results may look like this
Array
(
	[/data/item[1]/Company[1]] => Navarro Corp.
	[/data/item[1]/@ID] => SimpleXMLIterator Object
		(
			[0] => 30001
		)

	[/data/item[2]/@IDd] => SimpleXMLIterator Object
		(
			[0] => 30002
		)

	[/data/item[3]/Company[1]/g[1]] => glove
	[/data/item[3]/Company[1]/g[1]/@id] => SimpleXMLIterator Object
		(
			[0] => id_g
		)

	[/data/item[3]/Company[1]/@id] => SimpleXMLIterator Object
		(
			[0] => id_test
		)

	[/data/item[3]/@ID] => SimpleXMLIterator Object
		(
			[0] => 30003
		)

	[/data/item[4]] =>

)
//

echo "Total:" . count($rs);

echo "<hr>";
//You can check the xpath result like this
$xml = new SimpleXMLElement($xml);
foreach ($rs as $k => $v)
{
	echo "Xpath:" . $k . " |Value:" . $v . " ";
	var_dump($xml->xpath($k));
	echo "<br>";
}

The following methods belong to the SimpleXMLIterator class:

SimpleXMLIterator::current:

Returns the current element

public mixed SimpleXMLIterator::current()

This method returns the current element as a SimpleXMLIterator object or null

Returns the current element as a SimpleXMLIterator object or NULL on failure

Examples:

Example #1 Return the current element

<?php
$xmlIterator = new SimpleXMLIterator('<books><book>PHP basics</book><book>XML basics</book><books>');
var_dump($xmlIterator->current());

$xmlIterator->rewind(); // rewind to first element
var_dump($xmlIterator->current());
?>

The above will output:

NULL
object(SimpleXMLIterator)#2 (1) {
	[0]=>
	string(10) "PHP basics"
}

SimpleXMLIterator::getChildren:

Returns the sub-elements of the current element

public SimpleXMLIterator SimpleXMLIterator::getChildren()

This method returns a SimpleXMLIterator object containing sub-elements of the current
SimpleXMLIterator element.

Example of usage:

<?php
$xml = <<<XML
<books>
	<book>
		<title>PHP Basics</title>
		<author>Jim Smith</author>
	</book>
	<book>XML Basics</book>
</books>
XML;

$xmlIterator = new SimpleXMLIterator($xml);
for( $xmlIterator->rewind(); $xmlIterator->valid(); $xmlIterator->next() ) {
	foreach($xmlIterator->getChildren() as $name => $data) {
		echo "The $name is '$data' from tthe class " . get_class($data) . "\n";
	}
}
?>

The above outputs:

The title is 'PHP Basics' from the class SimpleXMLIterator
The author is 'Jim Smith' from the class SimpleXMLIterator

SimpleXMLIterator::hasChildren:

Checks whether the current element has sub elements

public bool SimpleXMLIterator::hasChildren()

This method checks whether the current SimpleXMLIterator element has sub elements

Returns TRUE if the current element has sub-elements, otherwise FALSE.

Example #1 Check whether the current element has sub-elements

<?php
$xml = <<<XML
<books>
	<book>
		<title>PHP Basics</title>
		<author>Jim Smith</author>
	</book>
	<book>XML basics</book>
</books>
XML;

$xmlIterator = new SimpleXMLIterator( $xml );
for( $xmlIterator->rewind(); $xmlIterator->valid(); $xmlIterator->next() ) {
	if($xmlIterator->hasChildren()) {
		var_dump($xmlIterator->current());
	}
}
?>

The above will output:

object(SimpleXMLIterator)#2 (2) {
	["title"]=>
	string(10) "PHP Basics"
	["author"]=>
	string(9) "Jim Smith"
}

SimpleXMLIterator::key:

Return current key

public mixed SimpleXMLIterator::key()

This method gets the XML tag name of the current element

Returns the XML tag name of the element referenced by the current SimpleXMLIterator
object or false.

Examples:

Example #1 Get the current XML tag key

<?php
$xmlIterator = new SimpleXMLIterator('<books><book>PHP basics</book><book>XML basics</book></books>');

echo var_dump($xmlIterator->key());
$xmlIterator->rewind(); //rewind to the first element
echo var_dump($xmlIterator->key());

?>

The above will output:

bool(false)
string(4) "book"

SimpleXMLIterator::next:

Move to the next element

public void SimpleXMLIterator::next()

This method moves the SimpleXMLIterator to the next element.

Examples:

Example #1 move to the next element

<?php
$xmlIterator = new SimpleXMLIterator('<books><book>PHP Basics</book><book>XML basics</book></books>');
$xmlIterator->rewind(); //rewind to the first element
$xmlIterator->next();

var_dump($xmlIterator->current());
?>

The above will output:

object(SimpleXMLIterator)#2 (1) {
	[0]=>
	string(10) "XML basics"
}

SimpleXMLIterator::rewind:

Rewind to the first element

public void SimpleXMLIterator::rewind()

This method rewinds the SimpleXMLIterator to the first element.

Example #1 Rewind to the first element

<?php
$xmlIterator = new SimpleXMLIterator('<books><book>PHP Basics</book><book>XML Basics</book></books>');
$xmlIterator->rewind();

var_dump($xmlIterator->current());
?>

The above will output:

object(SimpleXMLIterator)#2 (1) {
	[0]=>
	string(10) "PHP Basics"
}

SimpleXMLIterator::valid:

Check whether the current element is valid

public bool SimpleXMLIterator::valid()

This method checks if the current element is valid after calls to
SimpleXMLIterator::rewind() or SimpleXMLIterator::next()

Returns:

Returns TRUE if the current element is valid, otherwise FALSE.

Examples:

Example #1 Check whether the current element is valid

<?php
$xmlIterator = new SimpleXMLIterator('<books><book>SQL Basics</book></books>');

$xmlIterator->rewind(); //rewind to the first element
echo var_dump($xmlIterator->valid()); //bool(true)

$xmlIterator->next(); //advance to the next
echo var_dump($xmlIterator->valid()); //bool(false) cause there is only 1 element
?>

The previous methods belonged to the SimpleXMLIterator class, the following belong to
the SimpleXML class:

I had a problem with entities

My first solution:
I saved data that way:
$ENTRY_->
addchild('something',htmlentities($_POST["blog"]));

Had entities in the XML-file like:
<!ENTITY auml "&amp;auml">

And i loaded the Data that way:
html_entity_decode($ENTRY->Somethingname);

But after saving and loading the xml-file the entity-entry
<!ENTITY auml "&amp;auml">
disappeared.

My second solution with saving data This way:
$ENTRY_->
addchild('Nachricht',htmlentities(htmlentities($_POST["blog"])));

You can now load it with html_entity_decode without the
entity-entry in the XML-file.

If you are having trouble accessing CDATA in your simplexml document, you do not need
to str_replace/preg_replace the CDATA out before loading it with simplexml.

You can do this instead, and all your CDATA contents will be merged into the element 
contents as strings.

$xml = simplexml_load_file($xmlfile,
'SimpleXMLElement', LIBXML_NOCDATA);

A simple implementation:

You can inform a direct XML in text format to the function.

function eoXML2Array($xmlContent, $out = array()){
	$xmlObject = is_object($xmlContent) ? $xmlContent : simplexml_load_string($xmlContent);
	foreach((array) $xmlObject as $index => $node)
		$out[$index] = ( is_object($node) || is_array($node) ) ? eoXML2Array( $node ) : $node;
	return $out;
}

Usage: $your_array = eoXML2Array(your xml text);

If the SimpleXMLObject contains an array, adding is_array() allows the function to keep
digging for Objects.

<?php
function xml2array ( $xmlObject, $out = array() )
{
	foreach((array)$xmlObject as $index => $node)
		$out[$index] = (is_object($node) || is_array($node)) ? xml2array($node) : $node;

	return $out;
}
?>

It does not mention this anywhere, but creating a new SimpleXMLElement object from a non-valid string
throws an exception. It looks ugly in the php log as it dumps the stack in multiple lines.

The correct way to create a new SimpleXMLElement object is like so:

<?php
$xmlstr = ''; //Empty to throw an exception
try {
	$xml = new SimpleXMLElement($xmlstr);
} catch (Exception $e) {
	//handle the error
	echo '$xmlstr is not a valid xml string';
}
?>

It does not say in the docs, but SimpleXML will convert all text into UTF-8, if the source
XML declaration has another encoding. Eg, if the source has the following XML decl:

<?xml version="1.0" encoding="windows-1251" ?>

All the text in the resulting SimpleXMLElement will be in UTF-8 automatically.

SimpleXML handles namespaces, but it is not documented very well here at all.

If you wanted to parse, say, an open office manifest file or a piece of RDF/XML,
you have to get elements and attributes by the namespace url.

Example:

<?php
function display($in) {
	if (file_exists($in)) {
		$xml = simplexml_load_file($in);
	} else {
		throw new Exception($in . " does not exist");
	}

	$manifest = $xml->children('http://openoffice.org/2001/manifest');

	foreach ($manifest->xpath('//manifest:file-entry') as $file) {
		foreach ($file->attributes('http://openoffice.org/2001/manifest') as $key => $value) {
			print "Key:" . $key . "\n";
			print "Value:" . $value . "\n";
		}
	}
}
?>

Outputs:

File: manifest.xml

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE manifest:manifest PUBLIC "-//OpenOffice.org//DTD Manifest 1.0//EN" "Manifest.dtd">
<manifest:manifest xmlns:manifest="http://openoffice.org/2001/manifest">
<manifest:file-entry manifest:media-type="application/vnd.sun.xml.writer" manifest:full-path="/"/>
//etc with file entries
</manifest:manifest>

<?php
	//Remove node/nodes xml with xpath

	//@param SimpleXMLElement 	$xml
	//@param string XPath 		$path
	//@param string ('one'|'child'|'all') 	$multi

	//Use:
	//Example xml file - http://ru2.php.net/manual/ru/ref.simplexml.php
	//
	// $xml = simplexml_load_file($xmlfile);
	//
	// 1. remove only 1 node (without child nodes)
	// $path must return only 1 (unique) node without child nodes
	// removeNode($xml, '//movie/rating[@type="thumbs"]');
	//
	// 2. remove 1 node (with 1 child nodes)
	// $path can reutrn  any nodes - will be remvoed only first node
	// with all child nodes
	// removeNode($xml, '//characters', 'child')
	//
	//3. remove all nodes (with child nodes)
	// $path can return any nodes - will be removed all
	// with child nodes
	// removeNode($xml, '//rating', 'all')
	//
	// $xml->asXML($xmlfile);
	function removeNode($xml, $path, $multi='one')
	{
		$result = $xml->xpath($path);

		//for wrong $path
		if (!isset($result[0])) return false;

		switch ($multi) {
			case 'all':
				$errlevel = error_reporting(E_ALL & ~E_WARNING);
				foreach ($result as $r) unset ($r[0]);
				error_reporting($errlevel);
				return true;

			case 'child':
				unset($result[0][0]);
				return true;

			case 'one':
				if (count($result[0]->children())==0 && count($result)==1) {
					unset($result[0][0]);
					return true;
				}

			default:
				return false;
		}
	}
?>

p.s after use (if deleted all nodes):

<?php
	
	function trimXml($xmlfile)
	{
		$dom = new DOMDocument();

		$dom->preserveWhiteSpace = false;

		if(!$dom->load($xmlfile)) return false;

		$dom->formatOutput = true;

		if (!$dom->save($xmlfile)) return false;

		return true;
	}
?>

When creating a new XML document and adding text with umlauts and such

<?php $SimpleXMLElement->asXML(); ?>

will NOT silently output content with umlauts.

To do so, encode htmlentities() while adding umlauts and co

AS for retrieving ints, cast them to string to assign them:

<?php
foreach($xml->data->{'time-layout'}->{'start-valid-time'} AS $time)
{
	$weatherDates[] = (string) $time;
}
?>

We use the {} to account for variable expansion in terms of -'s and we account
for int by string casting

The functions of SimpleXML are as follows:

simplexml_import_dom:

Get a SimpleXMLElement object from a DOM node

SimpleXMLElement simplexml_import_dom ( DOMNode $node [, string $class_name = "SimpleXMLElement" ] )

THis function takes a node of a DOM document and makes it into a SimpleXML node. This new object can then
be used as a native SimpleXML element.

Params:

node: A DOM Element node

class_name: You may use this optional param so that simplexml_import_dom() will return an object
of the specified class. That class should extend the SimpleXMLElement class.

Returns a SimpleXMLElement or FALSE on failure.

Given that it may return a value that equates to false, but is not a boolean, we have to use
=== in comparisons.

Example #1 Importing DOM:

<?php
$dom = new DOMDocument;
$dom->loadXML('<books><book><title>blah</title></book></books>');
if (!$dom) {
	echo 'Error while parsing the document.';
	exit;
}

$s = simplexml_import_dom($dom);

echo $s->book[0]->title;
?>

The above outputs:

blah

simplexml_load_file:

Interpets an XML file into an object

SimpleXMLElement simplexml_load_file ( string $filename [, string $class_name = "SimpleXMLElement" [, int $options = 0 [,
	string $ns = "" [, bool $is_prefix = false ]]]] )

Converts the well-formed XML document in the given file to an object

Params:

filename: Path to the XML file

Note: Libxml 2 unescapes the URI, so if you want to pass e.g b&c as the URI parameter a, you have to call
simplexml_load_file(rawurlencode('http://example.com/?a='.urlencode('b&c'))). Since PHP 5.1, you need not
do this, as PHP does it for you.

class_name: You may use this optional param so that simplexml_load_file() will return an object of the
specified class. That class should extend the SimpleXMLElement class

options: Since PHP 5.1.0 and Libxml 2.6.0, you may also use the options parameter to specify 
additional Libxml params.

THe params, are as ofllows:

The constants below are defined by this extension, and will only be available when the extension
has either been compiled into PHP or dynamically loaded at runtime.

LIBXML_BIGLINES(int): Allows line numbers greater than 65535 to be reported correctly

Note: Only available as of PHP 7.0.0 with Libxml >= 2.9.0

LIBXML_COMPACT(int): Activate small nodes allocation optimization. This may speed up your application without
needing to change the code.

Note: Only available in Libxml >= 2.6.21

LIBXML_DTDATTR(int): Default DTD attributes

LIBXML_DTDLOAD(int): Load the external subset

LIBXML_DTDVALID(int): Validate with the DTD

LIBXML_HTML_NOIMPLIED(int): Sets HTML_PARSE_NOIMPLIED flag, which turns off the automatic adding of
implied html/body elements.

Note: only available in Libxml >= 2.7.7 (as of PHP >= 5.4.0)

LIBXML_HTML_NODEFDTD(int): Sets HTML_PARSE_NODEFDTD flag, which prevents a default doctype being added
when one is not found.

Note: Only available in Libxml >= 2.7.8 (as of PHP >= 5.4.0)

LIBXML_NOBLANKS(int): Removes blank nodes

LIBXML_NOCDATA(int): Merge CDATA as text nodes

LIBXML_NOEMPTYTAG(int): Expand empty tags (e.g <br/> to <br></br>)

Note: This option is currently just available in the DOMDocument::save and DOMDocument::saveXML functions.

LIBXML_NOENT(int): Substitutes entities

LIBXML_NOERROR(int): Surrpress error reports

LIBXML_NONET(int): Disable network access when loading documents

LIBXML_NOWARNING(int): Surrpress warning reports

LIBXML_NOXMLDECL(int): Drop the XML declaration when saving a document

Note: only available in Libxml >= 2.6.21

LIBXML_NSCLEAN(int): Removes redundant namespace declarations

LIBXML_PARSEHUGE(int): Sets XML_PARSE_HUGE flag, which relaxes any hardcoded limit from the parser. This affects
limits like maximum depth of a document or the entity recursion, as well as limits of the size of text nodes.

Note: Only available in Libxml >= 2.7.0 (as of PHP >= 5.3.2 and PHP >= 5.2.12)

LIBXML_PEDANTIC(int): Sets XML_PARSE_PEDANTIC flag, which enables pedantic error reporting

Note: available as of PHP >= 5.4.0

LIBXML_XINCLUDE(int): IMplement XInclude substitution

LIBXML_ERR_ERROR(int): A recorable error

LIBXML_ERR_FATAL(int): A fatal error

LIBXML_ERR_NONE(int): No errors

LIBXML_ERR_WARNING(int): A simple warning

LIBXML_VERSION(int): libxml version like 20605 or 20617

LIBXML_DOTTED_VERSION(int): libxml version like 2.6.5 or 2.6.17

LIBXML_SCHEMA_CREATE(int): Create default/fixed value nodes during XSD schema validation

Note: Only available in Libxml >= 2.6.14 (as of PHP >= 5.5.2)

To process formatted lines in terms of appending to an XML file:

<?php
$dom = DOMDocument::load('file.xml', LIBXML_NOBLANKS);
$dom->formatOutput = true;
//$dom->add some new elements with child nodes somewhere inside the loaded XML using insertBefore();
$dom->saveXML();
//output: everything looks newly formatted, including new nodes
?>

This is due to the LIBXML_NOBLANKS load method, as it reformats the whole document, including added stuff.

ns: Namespace prefix or URI

is_prefix: TRUE if ns is a prefix, FALSE if it is a URI; defaults to FALSE.

Returns:

Returns an object of class SimpleXMLElement with properties containing the data held within the XML document,
or FALSE on failure.

Again, this function may return false in another format than a boolean, so jhust perform the === equality operation

Erors/Exceptions:

Produces an E_WARNING errorm essage for each error found in the XML data

Tiåp: Use libxml_use_internal_errors() to surrpress all XML errors and libxml_get_errors() to iterate over htem
afterwards.

Exampels:

Example #1 Interpret an XML document

<?php
//The file test.xml contains an XML document iwht a root element
// and at least an element /[root]/title.

if (file_exists('test.xml')) {
	$xml = simplexml_load_file('test.xml');

	print_r($xml);
} else {
	exit('Failed to open test.xml');
}
?>

The scrip will display, on success:

SimpleXMLElement Object
(
	[title] => Example Title
	...
)

At this point, you can go about using $xml->title and any other elements.

Again, to circumvent the - node names, use {} to account for varaible encapsulation

To correctly extract a value from a CDATA just make sure you cast the SimpleXML Element to a string
value by using the cast operator:

<?php
$xml = '<?xml version="1.0" encoding="UTF-8" ?>
<rss>
	<channel>
		<item>
			<title><![CDATA[Tom & Jerry]]></title>
		</item>
	</channel>
</rss>';

$xml = simplexml_load_string($xml);

// echo does the casting for you
echo $xml->channel->item->title;

//as for var_dumping, do the cast manually
var_dump((string) $xml->channel->item->title);
?>

The above will output:

Tom & Jerry

object(SimpleXMLElement)#4 (0) {}

string(11) "Tom & Jerry"

If you want CDATA in your object you should use LIBXML_NOCDATA:

<?php
$xml = simplexml_load_file($file_xml, 'SimpleXMLElement', LIBXML_NOCDATA);

print_r($xml);
?>

Also, an example of conversion between UTF-8 and ISO-8859-1 with translit option:

<?php
//convert string from utf-8 to iso8859-1
$horoscope = iconv( "UTF-8", "ISO-8859-1//TRANSLIT", $horoscope );
?>

Be careful if you are using simplexml data directly to feed your MySQL db using MySQLi and bind params.

The data coming from simplexml are Objects and the bind params functions of MySQLi do NOT like this.
(it cause some memory leaks and can crash Apache/PHP)

In order to do this properly, you MUST cast your values to the right tpye (string, integer) before passing
them to to the binding methods of MySQLi.

Also, use / as folder designations in path destinations, as in, /insidefolder1/insidefolder2 etc.

Also, an example of aquiring all tags of an XML with a recursive function:

<?php
$xml = simplexml_load_file('settings.xml');

function all_tag($xml){
	$i=0; $name = "";
	foreach ($xml as $k){
		$tag = $k->getName();
		$tag_value = $xml->$tag;
		if ($name == $tag){ $i++; }
				$name = $tag;
			echo $tag . ' ' . $tag_value[$i].'<br />';
			//Recursive
			all_tag($xml->$tag->children());
	}
}

all_tag($xml);
?>

simplexml_load_string:

Interpets a string of XML into an object

Desc:

SimpleXMLElement simplexml_load_string ( string $data [, string $class_name = "SimpleXMLElement" [, int $options = 0 [,
	string $ns = "" [, bool $is_prefix = false ]]]] )

Takes a well-formed XML string and returns it as an object.

Params:

data: A well-formed XML string

class_name: You may use this optional param so that simplexml_load_string() will return an object of the specified class.
That class should extend the SimpleXMLElement class.

options: Since PHP 5.1.0 and Libxml 2.6.0, you may also use the options param to specify additional Libxml params.

ns: Namespace prefix or URI

is_prefix: TRUE if ns is a prefix, FALSE if it is a URI; defaults to FALSE

Returns an object of class SimpleXMLElement with properties containing the data held within the xml document,
or FALSE on failure.

Warning: Again, the symbolic gesturing of equivilance to a false boolean, is what we must account for with ===

Errors:

Produces an E_WARNING error message for each error found in the XML data.

Tip: Use libxml_use_internal_errors() to suppress all XML errors, and libxml_get_errors() to iterate over
them afterwards.

Example #1 Interpet an XML string:

<?php
$string = <<<XML
<?xml version='1.0'?>
<document>
	<title>Forty What?</title>
	<from>Joe</from>
	<to>Jane</to>
	<body>
		Something
	</body>
</document>
XML;

$xml = simplexml_load_string($string);

print_r($xml);
?>

The above will output:

SimpleXMLElement Object
(
	[title] => Forty What?
	[from] => Joe
	[to] => Jane
	[body] =>
		Something
)

At this point, you can go about using $xml->body and such.

If you wish to use multiple libxml options, separate them with a pipe:

<?php
$xml = simplexml_load_string($string, 'SimpleXMLElement', LIBXML_NOCDATA | LIBXML_NOBLANKS);
?>

An example of a SimpleXML wrapper function, with a callback that is to run on all the data (such as 
specifying 'trim' and having said data trimmed):

<?php
function unserialize_xml($input, $callback = null, $recurse = false)
// bool/array unserialize_xml ( string $input [, callback $callback ] )
// Unserializes an XML string, returning a multi-dimensional associative array, optionally
// runs a callback on all non-array data
// Returns false on all failure
// Notes:
// 		Root XML tags are stripped
// 		Due to its recursive nature, unserialize_xml() will also support SimpleXMLElement objects and arrays
// 		as input 
// 		Uses simplexml_load_string() for XML parsing, see SimpleXML documentation for more info
{
	//Get input, loading an xml string with simplexml if its the top level of recursion
	$data = ((!$recurse) && is_string($input))? simplexml_load_string($input) : $input;
	//Convert SimpleXMLElements to array
	if ($data instanceof SimpleXMLElement) $data = (array) $data;
	//Recurse into arrays
	if (is_array($data)) foreach ($data as &$item) $item = unserialize_xml($item, $callback, true);
	// Run callback and return
	return (!is_array($data) && is_callable($callback))? call_user_func($callback, $data): $data;
}
?>

Also, a simple extension that adds a method for retrieving a specific attribute:

<?php
class simple_xml_extended extends SimpleXMLElement
{
	public function Attribute($name)
	{
		foreach($this->Attributes() as $key=>$val)
		{
			if($key == $name)
				return (string)$val;
		}
	}
}

$xml = simplexml_load_string('
<xml>
	<dog type="poodle" owner="Mrs Smith">Rover</dog>
</xml>', 'simple_xml_extended');

echo $xml->dog->Attribute('type');

?>

The above code outputs:

'poodle'

Also, note to extracti nformation from an XML, process it with a foreach loop and print
each part, as it will denote each specific part of said accessed element of the XML

The above things belonged to SimpleXML, whereas the following things belong to SOAP:

Intro:

The SOAP extension can be used to write SOAP servers and Clients. It supports subsets of >>SOAP 1.1, >>SOAP 1.2 and >> WSDL 1.1 specs

I am going to do something different on this point. Normally, i make an evaluation of wether a thing is worth or not,
but this time, i will simply walk through all of the SOAP 1.1, SOAP 1.2 and WSDL 1.1

The reason for this, is quite simple in the fact of that it gives a lot of insight to how communication of servers
work. Which, in turn plays a lot of an effect in contextual thinking.

The following things, belong to SOAP 1.1:

Simple Object Access Protocol (SOAP) 1.1

W3C Note 08 May 2000

Abstract:

SOAP is a lightweight protocol for exchange of information in a decentralized, distributed environment.
It is an XML based protocol that consists of three parts: an evelope that defines a framework for describing
what is in a message and how to process it, a set of encoding rules for expressing instances of application-defined
datatypes, and a convention for representing remote procedure calls and responses.

SOAP can potentially be used in combo with a variety of other protocols; however, the only bindings defined in this
document describe how to use SOAP in combination with HTTP and HTTP Extension framework.

Introduction:

SOAP provides a simple and lightweight mechanism for exchanging structured and typed information between peers in
a decentralized, distributed environment using XML. SOAP does not itself define any application semantics such as
a programming model or implementation specific semantics; Rather it defines a simple mechanism for expressing application
semantics by providing a modular packaging model and encoding mechanics for encoding data within modules.

This allows SOAP to be used in a large variety of systems ranging from messaging systems to RPC.

SOAP consists of three parts:

The SOAP envelope (see section 4) construct defines an overall framework for expressing what is in a message, who
should deal with it, and whether it is optional or mandatory.

The SOAP encoding rules (see section 5) defines a serialization mechanism that can be used to exchange instances of
application-defined datatypes.

The SOAP RPC representation (section 7) defines a convention that can be used to represent remote procedure calls and responses.

Although these parts are described together as part of SOAP, they are functionally orthogonal. In particular, the envelope and
the encoding rules are defined in different namespaces in order to promote simplicity through modularity.

In addition to the SOAP envelope, the SOAP encoding rules and the SOAP RPC conventions, this specification defines two
protocol bindings that describe how a SOAP message can be carried in HTTP [5] messages either with or without the
HTTP Extension Framework [6].

1.1 Design Goals:

A major design goal for SOAP is simplicity and extensibility. This means that there are several features from traditional
messaging systems and distributed object systems that are not part of the core SOAP specification. Such features include:

Distributed garbage collection

Boxcarring or batching of messages

Objects-by-reference (which requires distributed garbage collection)

Activation (which requires object-by-reference)

1.2 Notational Conventions:

The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY",
and "OPTIONAL" in this document are to be interpeted as described in RFC-2119.

The namespace prefixes "SOAP-ENV" and "SOAP-ENC" used in this document are associated with the SOAP namespaces
"http://schemas.xmlsoap.org/soap/envelope" and "http://schemas.xmlsoap.org/soap/encoding/" respectively.

Throughout this document, the namespace prefix "xsi" is assumed to be associated with the URI "http://www.w3.org/1999/XMLSchema-instance"
which is defined in the XML Schemas specification [11]. Similarly, the namespace prefix "xsd" is assumed to be associated with the URI
"http://www.w3.org/1999/XMLSchema" which is defined in [10]. The namesapce prefix "tns" is used to indicate whatever is the target
namespace of the current document. All other namespace prefixes are samples only.

Namespace URIs of the general form "some-URI" represent some application-dependent or context-dependent URI [4].

This specification uses the augmented Backus-Naur Form (BNF) as described in RFC-2616[5] for certain constructs.

1.3 Examples of SOAP Messages:

In this example, a GetLastTradePrice SOAP request is sent to a StockQuote service. This request takes a string parameter,
ticker symbol and returns a float in the SOAP response. The SOAP Envelope element is the top element of the XML
document representing the SOAP message.

XML namespaces are used to disambiguate SOAP identifiers from application specific identifiers. The example illustrates
the HTTP bindings defiend in section 6. It is worth noting that the rules governing XML payload format in SOAP are entirely
independent of the fact that the payload is carried in HTTP.

More examples are available in Appendix A.

Example 1 SOAP Message Embedded in HTTP Request

POST /StockQuote HTTP/1.1
Host: www.stockquoteserver.com
Content-Type: text/xml; charset="utf-8";
Content-Length: nnnn
SOAPAction: "Some-URI"

<SOAP-ENV:Envelope
	xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"
	SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
		<SOAP-ENV:Body>
			<m:GetLastTradePrice xmlns:m="Some-URI">
				<symbol>DIS</symbol>
			</m:GetLastTradePrice>
		</SOAP-ENV:Body>
</SOAP-ENV:Envelope>

Following is the response message containing the HTTP message with the SOAP message as the payload.

Example 2 SOAP Message Embedded in HTTP Response

HTTP/1.1 200 OK
Content-Type: text/xml; charset="utf-8"
Content-Length: nnnn

<SOAP-ENV:Envelope
	xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"
	SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		<SOAP-ENV:Body>
			<m:GetLastTradePriceResponse xmlns:m="Some-URI">
				<Price>34.5</Price>
			</m:GetLastTradePriceResponse>
		</SOAP-ENV:Body>
</SOAP-ENV:Envelope>

2. The SOAP Message Exchange Model

SOAP messages are fundamentally one-way transmissions from a sender to a receiver, but as illustrated above, SOAP
messages are often combined to implement patterns such as request/response.

SOAP implementations can be optimized to exploit the unique characteristics of particular network systems. For example,
the HTTP bindings described in section 6 provides for SOAP response messages to be delivered as HTTP responses, using the
same connection as the inbound request.

Regardless of the protocol receiving a SOAP message MUST process that message by performing the following actions
in the order listed below:

1. Identify all parts of the SOAP message intended for that application (see section 4.2.2)

2. Verify that all mandatory parts identified in step 1 are supported by the application for this message (see section 4.2.3)
and process them accordingly. If this is not the case, then discard the message (see section 4.4). The processor MAY ignore
optional parts identified in step 1 without affecting the outcome of the processing.

3. If the SOAP application is not the ultimate destination of the message then remove all parts identified in step 1 before
forwarding hte message.

Processing a message or a part of a message requires that the SOAP processor understands, among other things,
the exchange pattern being used (one way, request/response, multicast, etc). the role of the recipient in that pattern,
the employment (if any) of RPC mechanisms such as the one documented in section 7, the representation or encoding of data,
as well as other semantics necessary for correct processing.

While attributes such as the SOAP encodingStyle attribute (see section 4.1.1) can be used to describe certain
aspects of a message, this specification does not mandate a particular means by which the recipient makes such
determinations in general.

For example, certain apps will understand that a particular <getStockPrice> element signals an RPC request using
the conventions of Section 7, while another app may infer that all traffic directed to it is encoded as one way
messages.

3. Relation to XML:

All SOAP messages are encoded using XML (see [7] for more information on XML).

A SOAP application SHOULD include the proper SOAP namespace on all elements and attributes defined by SOAP 
in messages that it generates. A SOAP application MUST be able to process SOAP namespaces in messages that
it receives.

It MUST discard messages that have incorrect namespaces (see section 4.4) and it MAY process SOAP messages
without SOAP namespaces as though they had the correct SOAP namespaces.

SOAP defines two namespaces (see [8] for more information on XML namespaces):

The SOAP envelope has the namespace identifier "http://schemas.xmlsoap.org/soap/envelope/"

The SOAP serialization has the namespace identifier "http://schemas.xmlsoap.org/soap/encoding/"

A SOAP message MUST NOT contain a Document Type Declaration. A SOAP message MUST NOT contain Processing
Instructions. [7]

SOAP uses the local, unqualified "id" attribute of type "ID" to specify the unique identifier of an encoded
element. SOAP uses the local, unqualified attribute "href" of type "uri-reference" to specify a reference
to that value, in a manner conforming to the XML Specification [7], XML Schema Specification [11] and XML
Linking Language Specification [9].

With the exception of the SOAP mustUnderstand attribute (see section 4.2.3) and the SOAP actor attribute
(see section 4.2.2), it is generally permissible to have attributes and their values appear in XML
instances or alternatively in schemas, with equal effect.

That is, declaration in a DTD or schema with a default or fixed value is semantically equivalent to
appearance in an isntance.

4. SOAP Envelope:

A SOAP message is an XML document that consists of a mandatory SOAP envelope, an optional
SOAP header, and a mandatory SOAP body. This XML document is referred to as a SOAP message 
for the rest of this specification.

The namespace identifier for the elements and attributes defined in this section is "http://schemas.xmlsoap.org/soap/envelope/".
A SOAP message contains the following:

The Envelope is the top element of the XML document representing the message.

the Header is a generic mechanism for adding features to a SOAP message in decentralized manner without prior agreement between
the communicating parties. SOAP defines a few attributes that can be used to indicate who should deal with a feature and whether
it is optional or mandatory (see section 4.2)

The Body is a container for mandatory information intended for the ultimate recipient of the message (see section 4.3). SOAP
defines one lement for the body, which is the Fault element used for reporting errors.

The grammar rules are as follows:

1. Envelope
	The element name is "Envelope"

	The element MUST be present in a SOAP message

	The element MAY contain namespace declarations as well as additional attributes. If present, such additional
	attributes MUST be namespace-qualified. Similarly, the element MAY contain additional sub elements.
	If present these elements MUST be namespace-qualified and MUST follow the SOAP Body element.

2. Header (see section 4.2)
	The element name is "Header"

	The element MAY be present in a SOAP message. If present, the element MUST be the first immediate child element
	of a SOAP Envelope element.

	The element MAY contain a set of header entries each being an immediate child element of the SOAP Header element.
	All immediate child elements of the SOAP header element MUST be namespace-qualified.

3. Body

	The element name is "Body"

	The element MUST be present in a SOAP message and MUST be an immediate child element of a SOAP Envelope element.
	It MUST directly follow the SOAP Header element if present. Otehrwise, it MUST be the first immediate child 
	element of the SOAP Envelope element

	The element MAY contain a set of body entries each being an immediate child element of the SOAP Body element.
	Immediate child elements of the SOAP Body element MAY be namespace-qualified. SOAP defines the SOAP Fault
	element, which is used to indicate error messages. (see section 4.4)

4.1.1 SOAP encodingStyle Attribute

The SOAP encodingStyle global attribute can be used to indicate the serialization rules used in a SOAP message.
This attribute MAY appear on any element, and is soped to that element's contents and all child elements not themselves
containing such an attribute, much as an XML namespace declaration is scoped.

There is no default encoding defined for a SOAP message.

The attribute value is an ordered list of one or more URIs identifying the serialization or rules that can be used
to deserialize the SOAP message indicated in the order of most specific to least specific. Examples of values
are:

"http://schemas.xmlsoap.org/soap/encoding/"
"http://my.host/encoding/restricted http://my.host/encoding/"
""

The serialization rules defined by SOAP in section 5 are identified by the URI "http://schemas.xmlsoap.org/soap/encoding/".
Messages using this particular serialization SHOULD indicate this using the SOAP encodingStyle attribute. In addition,
all URIs syntactically beginning with "http://schemas.xmlsoap.org/soap/encoding/" indicate conformance with the SOAP
encoding rules defiend in section 5 (though with potentionally tigther rules added)

A value of the zero-length URI("") explicitly indicates that no claims are made for the encoding style of contained elements.
This can be used to turn off any claims from containing elements.

4.1.2 Envelope Versioning Model

SOAP does not define a traditional versioning model based on major and minor version numbers. A SOAP message MUST have an Envelope
element associated with the "http://schemas.xmlsoap.org/soap/envelope/" namespace. If a message is 
received by a SOAP app, in which the SOAP Envelope element is associated with a different NS, the application MUST
treat this as a version error and dicsard the message.

if the message is received through a request/response protocol such as HTTP, the application MUST respond with a SOAP
VersionMismatch faultcode message (see section 4.4) using the SOAP "http://schemas.xmlsoap.org/soap/envelope/" namespace.

4.2 SOAP Header:

SOAP provides a flexible mechanism for extending a message in a decentralized and modular way without prior
knowledge between the communicating parties. Typical examples of extensions that can be implemented as header
entries are authentication, transaction management, payment etc.

The Header element is encoded as the first immediate child element of the SOAP Envelope XML element. All immediate
child element of the Header element are called header entries.

The encoding rules for the header entries are as follows:

1. A header entry is identified by its fully qualified element name, which consists of the namespace URI and the local name.
All immediate child elements of the SOAP Header element MUST be namespace-qualified.

2. The SOAP encodingStyle attribute MAY be used to indicate the encoding style used for the header entries (see section 4.1.1)

3. The SOAP mustUnderstand attribute (see section 4.2.3) and SOAP actor attribute (see section 4.2.2) MAY be used to indicate
how ot process the entry and by whom (see section 4.2.1)

4.2.1 Use of Header Attributes

THe SOAP Header attributes defiend in this section determine how a recipient of a SOAP message should process the message as described
in section 2. A SOAP application generating a SOAP message SHOULD only use the SOAP Header attributes on immediate child elements
of the SOAP Header element. The recipient of a SOAP message MUST ignore all SOAP Header attributes that are not applied to an
immediate child element of the SOAP Header element.

An example is a header with an element identifier of "Transaction", a "mustUnderstand" value of "1", and a value of 5.
This would be encoded as follows:

<SOAP-ENV:Header>
	<t:Transaction
		xmlns:t="some-URI" SOAP-ENV:mustUnderstand="1">
			5
	</t:Transaction>
</SOAP-ENV:Header>

4.2.2 SOAP actor Attribute:

A SOAP message travels from the originator to the ultimate destination, potentionally by passing through a set of SOAP
intermediates along the message path. A SOAP intermediary is an application that is capable of both receiving and forwarding
SOAP messages. Both intermediates as well as the ultimate destination are identified by a URI.

Not all parts of a SOAP message may be intended for the ultimate destination of the SOAP message, but, instead, may be intended
for one or more of the intermediaries on the message path. The role of a recipient of a header element is similar to that of accepting,
a contract in that it cannot be extended beyond the recipient. That is, a recipient receiving a header element MUST NOT forward
that header element to the next application in the SOAP message path.

The recipient MAY insert a similar header element but in that case, the contract is between that application and the recipient
of that header element.

The SOAP actor global attribute can be used to indicate the recipient of a header element. The value of the SOAP actor attribute
is a URI. The special URI "http://schemas.xmlsoap.org/soap/actor/next" indicates that the header element is intended for the very
first SOAP applicaton that processes the message.

This is similar to the hop-by-hop scope model represented by the Connection header field in HTTP.

Omitting the SOAP actor attribute indicates that the recipient is the ultimate destination of the SOAP message.

THis attribute MUST appear in the SOAP message instance in order to be effective (see section 3 and 4.2.1)

4.2.3 SOAP mustUnderstand Attribute:

The SOAP mustUnderstand global attribute can be used to indicate whether a header entry is a mandatory or optional
for the recipient to process. The recipient of a header entry is defined by the SOAP actor attribute (see section
4.2.2). The value of the mustUnderstand attribute is either "1" or "0". The absence of the SOAP mustUnderstand
attribute is semantically equivalent to its presence with the value "0".

If a header element is tagged with a SOAP mustUnderstand attribute with a value of "1", the recipient of that header
entry either MUST obey the semantics (as conveyed by the fully qualified name of the element) and process correctly
to those semantics or MUST fail processing the message (see section 4.4)

The SOAP mustUnderstand attribute allows for robust evolution. Elements tagged with the SOAP mustUnderstand attribute
with a value of "1" MUST be presumed to somehow modify the semantics of their parent or peer elements. Tagging
elements in this manner assures that this change in semantics will not be silently (and, presumably, errorneously) ignored
by those who may not fully understand it.

This attribute MUST appear in the instance in order to be effective (see section 3 and 4.2.1)

4.3 SOAP Body:

The SOAP Body element provides a simple mechanism for exchanging mandatory information intended for the ultimate
recipient of the message. Typical uses of the Body element include marshalling RPC calls and error reporting.

The Body element is encoded as an immediate child element of the SOAP Envelope XML element. If a Header element
is present then the Body element MUST immediately follow the Header element, otherwise it MUST be the first
immediate child element of the Envelope element.

All immediate child elements of the Body element are called body entries and each body entry is encoded as an
independent element within the SOAP Body element.

The encoding rules for body entries are as follows:

1. A body entry is identified by its fully qualified element name, which consists of the namespace URI and the
local name. Immediate child elements of the SOAP Body element MAY be namespace-qualified.

2. The SOAP encodingStyle attribute MAY be used to indicate the encoding style used for the
body entries (see section 4.1.1)

SOAP defines one body entry, which is the Fault entry used for reporting errors (see section 4.4)

4.3.1 Relationship between SOAP Header and Body:

WHile the Header and Body are defined as independent elements, they are in fact related. The relationship
between a body entry and a header entry is as follows: A body entry is semantically equivalent to a header
entry intended for the default actor and with a SOAP mustUnderstand attribute with a value of "1". The default
actor is indicated by not using the actor attribute (see section 4.2.2)

4.4 SOAP Fault:

The SOAP Fault element is used to carry error and/or status information within a SOAP message. If present,
the SOAP Fault element MUST appear as a body entry and MUST NOT appear more than once within a Body element.

THe SOAP Fault element defines the following four subelements:

faultcode: The faultcode element is intended for use by software to provide an algorithmic mechanism for identifying
the fault. The faultcode MUST be present in a SOAP Fault element and the faultcode value MUST be a qualified name
as defiend in [8] section 3. SOAP defines a small set of SOAP fault codes covering basic SOAP faults (see section 4.4.1)

faultstring: The faultstring element is intended to provide a human readable explonation of the fault and is not intended
for algorithmic purposes. The faultstring element is similar to the 'Reason-Phrase' defined by HTTP (see [5], section 6.1).
It MUST be present in a SOAP Fault element and SHOULD provide at least some information explaining the nature of the fault.

faultactor: The faultactor element is intended to provide information about who caused the fault to happen within the message
path (see section 2). It is similar to the SOAP actor attribute (see section 4.2.2) but instead of indicating the destination
of the header entry, it indicates the source of hte fault.

The value of the faultfactor attribute is a URI idenitifying the source. Applications that do not act as the ultimate destination,
of the SOAP message MUST include the faultfactor element in a SOAP Fault element. The ultimate destination of a message MAY use the
faultfactor element to indicate explicitly that it generated the fault (see also the detail element below)

detail:

The detail element is intended for carrying application specific error information related to the Body element. It MUST
be present if the contents of the Body element could not be successfully processed. It MUST NOT be used to carry information
about error information belonging to header entries. Detailed error information belonging to header entries MUST be carried
within header entries.

The absence of the detail element in the Fault element indicates that the fault is not related to processing of the Body
element. This can be used to distinguish whether the Body element was processed or not in case of a fault situation.

All immediate child elements of hte detail element are called detail entries and each detail entry is encoded as an 
independent element within the detail element.

The encoding rules for detail entries are as follows (see also example 10):
1. A detail entry is identified by its fully qualified element name, which consists of the namespace URI and the local
name. Immediate child elements of the detail element MAY be namespace-qualified.

2. The SOAP encodingStyle attribute MAY be used to indicate the encoding style used for the detail entries (see section 4.1.1)

Other Fault subelements MAY be present, provided they are namespace-qualified.

4.4.1 SOAP Fault Codes:

The faultcode values defined in this section MUST be used in the faultcode element when describing faults defined by this
specification. The namespace identifier for these faultcode values is "http://schemas.xmlsoap.org/soap/envelope/". Use of
this space is recommended (but not required) in the specification of methods defined outside of the present specification.

The default SOAP faultcode values are defined in an extensible manner that allows for new SOAP faultcode values to be defined
while maintaining backwards compability with existing faultcode values. THe mechanism used is very similar to the 1xx,
2xx, 3xx, 4xx etc. basic status classes defined in HTTP (see [5] section 10). However, instead of integers, they are 
defined as XML qualified names (see [8] section 3). The character "." (dot) is used as a separator of faultcode values
indicating that what is to the left of the dot is a more generic fault code than the value to the right.

Example:

Client.Authentication

The set of faultcode values defined in this document is:

Name 				Meaning

VersionMismatch 	The processing party found an invalid namespace for the SOAP Envelope element (see section 4.1.2)

MustUnderstand 		An immediate child element of the SOAP Header element that was either not understood or not obeyed by the processing
					party contained a SOAP mustUnderstand attribute with a value of "1" (see section 4.2.3)

Client 				The Client class of errors indicate that the message was incorrectly formed or did not contain the appropiate
					information in order to succeed. For example, the message could lack the proper authentication or payment
					information. It is generally an indication that the message should not be resent without change.
					See also section 4.4 for a desc of the SOAP Fault detail sub-element.

Server 				The Server class of errors indicate that the message could not be processed for reasons not directly attributable
					to the contents of the message itself but rather to the processing of the message. For example, processing could
					include communicating with an upstream processor, which did not respond. The message may succeed at a later point in time.
					See also section 4.4 for a desc of the SOAP Fault detail sub-element.

5. SOAP Encoding:

The SOAP encoding style is based on a simple type system that is a generalization of the common features found in type systems in
programming languages, databases and semi-structured data. A type either is simple (scalar) type or is a compound type constructed
as a composite of several parts, each with a type.

This is described in more detail below. This section defines rules for serialization of a graph of typed objects. It operates
on two levels. First, given a schema in any notation consistent with the type system described, a schema for an XML grammar 
may be constructed.

Second, given a type-system schema and a particular graph of values conforming to that schema, an XML instance may be constructed.
In reverse, given an XML instance produced in accordance with these rules, and given also the original schema, a copy of the
original value graph may be constructed.

The namespace identifier for the elements and attributes defined in this section is "http://schemas.xmlsoap.org/soap/encoding".
The encoding samples shown assume all namespace declarations are at a higher element level.

Use of the data model and encoding style described in this section is encouraged but not required; other data models and encodings
can be used in conjunction with SOAP (see section 4.1.1)

5.1 Rules for Encoding Types in XML:

XML allows very flexible encoding of data. SOAP defines a narrower set of rules for encoding. This section defines the encoding
rules at a higher level, and the next section describes the encoding rules for specific types when they require more detail.

The encodings described in this section can be used in conjunction with the mapping of RPC calls and responses specified in
Section 7.

To describe encoding, the following terminology is used:

1. A "value" is a string, the name of a measurement (number, date, enumeration, etc.) or a composite of several such primitive
values. All values are of specific types.

2. A "simple value" is one without named parts. Examples of simple values are particular strings, integers, enumerated values
etc.

3. A "compound value" is an aggregate of relations to other values. Example of Compound Values are particular purchase orders,
stock reports, street addresses, etc.

4. Within a compound value, each related value is potentionally distinguished by a role name, ordinal or both. This is called
its "accessor". Examples of compound values include particular Purchase Orders, Stock Reports etc. Arrays are also compound
values. It is possible to have compound values with several accessors each named the same, as for example, RDF does.

5. An "array" is a compound value in which ordinal positions serves as the only distiction among member values.

6. A "struct" is a compound value in which accessor name is the only distinction among member values, and no accessor
has the same name as any other.

7. A "simple type" is a class of simple values. Examples of simple types are the classes called "string", "integer",
	enumeration classes, etc.

8. A "compound type" is a class of compound values. An example of a compound type is the class of purchase order values
	sharing the same accessors (shipTo, totalCost, etc) though with potentionally different values (and perhaps further
	constrained by limits on certain values).

9. Within a compound type, if an accessor has a name that is distinct within that type but is not distinct with respect
	to other types, that is, the name plus the type together are needed to make a unique identification, the name is called
	"locally scoped". If however, the name is based in part on a Uniform Resource Identifier, directly or indirectly, such
	that the name alone is sufficient to uniquely identify the accessor irrespective of the type within which it appears,
	the name is called "Universally scoped".

10. Given the information in the schema relative to which a graph of values is serialized, it is possible to determine that
	some values can only be related by a single instance of an accessor. For others, it is not possible to make this determination.
	If only one accessor can reference it, a value is considered "single-reference". If referenced by more than one, actually
	or potentionally, it is "multi-reference". Note that it is possible for a certain value to be considered "single-reference"
	relative to one schema and "multi-reference" relative to another.

11. Syntactically, an element may be "independent" or "embedded". An independent element is any element appearing at the top level
	of serialization. All others are embedded elements.

Although it is possible to use the xsi:type attribute such that a graph of values is self-describing both in its structure and 
the types of its values, the serialization rules permit that the types of values MAY be determinate only by reference to a schema.
Such schemas MAY be in the notation described by "XML Schema Part 1: Structures" [10] and "XML Schema Part 2: Datatypes" [11]
or MAY be in any other notation.

Note also that, while the serialization rules apply to compound types other than arrays and structs, many schemas will contain
only struct and array types.

The rules for serialization are as follows:

1. All values are represented as element content. A multi-reference value MUST be represented as the content of an independent
element. A single-reference value SHOULD not be (but MAY be).

2. For each element containing a value, the type of the value MUST be represented by at least one of the following conditions:
(a) the containing element instance contains an xsi:type attribute, (b) the containing element instance is itself contained
within an element containing a (possibly defaulted) SOAP-ENC:arrayType attribute or (c) or the name of the element bears
a definite relation to the type, that type then determinable from a schema.

3. A simple value is represented as character data, that is, without any subelements. Every simple value must have a type
that is either listed in the XML Schemas Specification, part 2 [11] or whose source type is listed therein (see also section
5.2)

4. A Compound Value is encoded as a sequence of elements, each accessor represented by an embedded element whose name
corresponds to the name of the acccessor: Accessors whose name are local to their containing types have unqualified
element names, all others have qualified names (see also section 5.4)

5. A multi-reference simple or compound value is encoded as an independent element containing a local, unqualified attribute
named "id" and of type "ID" per the XML Specification [7]. Each accessor to this value is an empty element having a local,
unqualified attribute named "href" and of type "uri-reference" per the XML Schema Specification [11], with a "href" attribute
value of a URI fragment identifier referencing the corresponding independent element.

6. Strings and byte arrays are represented as multi-reference simple types, but special rules allow them to be represented
effectively for common cases (see also section 5.2.1 and 5.2.3). An accessor to a string or byte-array value MAY have an
attribute named "id" and of type "ID" per the XML specification [7]. If so, all other accessors to the same value are
encoded as empty elements having a local, unqualified attribute named "href" and of type "uri-reference" per the
XML Schema Specification [11], with a "href" attribute value of a URI fragment identifier referencing the single element
containing the value.

7. It is permissible to encode several references to a value as though these were references to several distinct values
, but only when from context it is known that the meaning of the XML instance is unaltered.

8. Arrays are compound values (see also section 5.4.2). SOAP Arrays are defined as having a type of "SOAP-ENC:Array" or a type
derived there from.

SOAP arrays have one or more dimensions (rank) whose members are distinguished by ordinal position. An array value is represented
as a series of elements reflecting the array, with members appearing in ascending ordinal sequence. For multi-dimensional
arrays the dimension on the right side varies most rapidly.

Each member element is named as an independent element (see rule 2)

SOAP arrays can be single-reference or multi-reference values, and consequentely may be represented as the
content of either an embedded or independent element.

SOAP arrays MUST contain a "SOAP-ENC:arrayType" attribute whose value specifies the type of the contained elements
as well as the dimension(s) of the array. The value of the "SOAP-ENC:arrayType" attribute is defined as follows:

arrayTypeValue = atype asize
atype 		   = QName * ( rank )
rank 		   = "[" * ( "," ) "]"
asize 		   = "[" #length "]"
length 		   = 1 * DIGIT

The "atype" construct is the type of the contained elements expressed as a QName as would appear in the "type" attribute of an
XML Schema element declaration and acts as a type constraint (meaning that all values of contained elements are asserted to conform
to the indicated type; that is, the type cited in SOAP-ENC:arrayType must be the type or a supertype of every array member).

In the case of arrays of arrays or "jagged arrays", the type component is encoded as the "innermost" type name followed by a rank
construct for each level of nested arrays starting from 1. Multi-dimensional arrays are encoded using a comma for each
dimension starting from 1.

The "asize" construct contains a comma separated list of zero, one, or more integers indicating the lengths of each
dimensions of the array. A value of zero integers indicates that no particular quantity is asserted but that the size
may be determined by inspection of the actual members.

For example, an array with 5 members of type array of integers would have an arrayTypeValue value of "int[][5]" of which
the atype value is "int[]" and the asize value is "[5]". Likewise, an array with 3 members of type two-dimensional arrays
of integers would have an arrayTypeValue value of "int[][3]" of which the atype values is "int[]" and the asize value
is "[3]".

A SOAP array member MAY contain a "SOAP-ENC:offset" attribute indicating the offset position of that item in the enclosing
array. This can be used to indicate the offset position of a partially represented array (see section 5.4.2.1). Likewise,
an array member MAY contain a "SOAP-ENC:position" attribute indicating the position of that item in the enclosing array.
This can be used to describe members of sparse arrays (see section 5.4.2.2). The value of the "SOAP-ENC:offset" and the
"SOAP-ENC:position" attribute is defined as follows:

arrayPoint = "[" #length "]"

with offsets and positions based at 0.

9. A NULL value or a default value MAY be represented by omission of the accessor element. A NULL value MAY also be indicated
by an accessor element containing the attribute xsi:null with value "1" or possibly other application-dependent attributes
and values.

Note that rule 2 allows independent elements and also elements representing the members of arrays to have names which are
not identical to the type of the contained value.

5.2 Simple Types:

For simple types, SOAP adopts all the types found in the section "Built-in datatypes" of the "XML Schema Part 2: Datatypes"
Specification [11], both the value and lexical spaces. Examples include:

Type 			Example

int 			58502

float 			4928140981209481+1

negativeInteger -32768

string 			Louis "Satchmo" Armstrong

The datatypes declared in the XML Schema specification may be used directly in element schemas.
Types derived from these may also be used. An example of a schema fragment and corresponding instance
data with elements of these types is:

<element name="age" type="int"/>
<element name="height" type="float"/>
<element name="displacement" type="negativeInteger"/>
<element name="color">
	<simpleType base="xsd:string">
		<enumeration value="Green"/>
		<enumeration value="Blue"/>
	</simpleType>
</element>

<age>45</age>
<height>5.9</height>
<displacement>-450</displacement>
<color>Blue</color>

All simple values MUST be encoded as the content of elements whose type is either defined in "XML
Schema Part 2: Datatypes" Specification [11], or is based on a type found there by using the mechanisms
provided in the XML Schema specification.

If a simple value is encoded as an independent element or member of a heterogenous array it is convenient
to have an element declaration corresponding to the datatype. Because the "XML Schema Part 2: Datatypes" Specification
[11] includes types definitions but does not include corresponding element element declarations, the SOAP-ENC schema
and namespace declares an element for every simple datatype. These MAY be used.

<SOAP-ENC:int id="int1">45</SOAP-ENC:int>

5.2.1 Strings:

The datatype "string" is defined in "XML Schema Part 2: Datatypes" Specification[11]. Note that this is not identical
to the type called "string" in many database or programming languages, and in particular may forbid some characters
those languages would permit. (Those values must be represented by using some datatype other than xsd:string)

A string MAY be encoded as a single-reference or a multi-reference value.

The containing element of the string value MAY have an "id" attribute. Additional accessor elements MAY then have
matching "href" attributes.

For example, two accessors to the same string could appear, as follows:

<greeting id="String-0">Hello</greeting>
<salutation href="#String-0"/>

However, if the fact that both accessors reference the same instance of the string (or subtype of string) is immaterial,
they may be encoded as two single-reference values as follows:

<greeting>Hello</greeting>
<salutation>Hello</salutation>

Schema fragments for these examples could appear similar to the following:

<element name="greeting" type="SOAP-ENC:string"/>
<element name="salutation" type="SOAP-ENC:string"/>

(In this example, the type SOAP-ENC:string is used as the element's type as a convenient way to declare an element whose
datatype is "xsd:string" and which also allows an "id" and "href" attribute. See the SOAP Encoding schema for the exact
definition. Schemas MAY use these declarations from the SOAP Encoding schema but are not required to.)

5.2.2 Enumerations:

The "XML Schema Part 2: Datatypes" Specification [11] defines a mechanism called "enumeration". The SOAP data model adopts
this mechanism directly. However, because programming and other languages often define enumeration somewhat differently,
we spell-out the concept in more detail here and describe how a value that is a member of an enumerated list of possible
values is to be encoded. Specifically, it is encoded as the name of the value.

"Enumeration" as a concept indicates a set of distinct names. A specific enumeration is a specific list of distinct
values appropiate to the base type. For example, the set of color names ("Green", "Blue", "Brown") could be defined
as an enumeration based on the string built-in type.

The values ("1", "3", "5") are a possible enumeration based on integer and so on. "XML Schema Part 2: Datatypes" [11]
supports enumerations for all of the simple types except for boolean. The language of "XML Schema Part 1: Structures"
Specification [10] can be used to define enumeration types. If a schema is generated from another notation in which
no specific base type is applicable, use "string". In the following schema example "EyeColor" is defined as a string
with the possible values of "Green", "Blue", or "Brown" enumerated, and instance data is shown accordingly.

<element name="EyeColor" type="tns:EyeColor"/>
<simpleType name="EyeColor" base="xsd:string">
	<enumeration value="Green"/>
	<enumeration value="Blue"/>
	<enumeration value="Brown"/>
</simpleType>

Tns stands for this name space.

XSD stands for XML schema Definition (the rules of which the XML is bound by, defines structure, constraints, limitations, relations etc.)

More specifically:

the elements and attributes that can appear in a document

the number of (and order of) child elements

data types for elements and attributes

default and fixed values for elements and attributes

Example of usage in terms of the EyeColor typing:

<Person>
	<Name>Henry Frod</Name>
	<Age>32</Age>
	<EyeColor>Brown</EyeColor>
</Person>

5.2.3 Array of Bytes:

An array of bytes MAY be encoded as a single-reference or a multi-reference value. The rules for an array of bytes
are similar to those for a string.

In particular, the containing element of the array of bytes value MAY have an "id" attribute. Additional accessor
elements MAY then have matching "href" attributes.

The recommended representation of an opaque array of bytes is the 'base64' encoding defined in XML Schemas [10][11] which uses
the base64 encoding algorithm defined in 2045 [13]. However, the line length restrictions that normally apply to base64
data in MIME do not apply in SOAP. A "SOAP-ENC:base64" subtype is supplied for use with SOAP.

Note, xsi means XML schema instance, it is basically the instance of the schema

<picture xsi:type="SOAP-ENC:base64">
	stuff
</picture>

5.3 Polymorphic Accessor:

Many languages allow accessors that can polymorphically access values of several types, each type being available at run time. A
polymorphic accessor instance MUST contain an "xsi:type" attrbiute that describes the type of the actual value.

For example, a polymorphic accessor named "cost" with a value of type "xsd:float" would be encoded as follows:

<cost xsi:type="xsd:float">29.95</cost>

as contrasted with a cost accessor whose value's type is invariant, as follows:

<cost>29.95</cost>

5.4 Compound Types:

SOAP defines types corresponding to the following structural patterns often found in programming languages:

Struct: A "struct" is a compound value in which accessor name is the only distinction among member values, and no
accessor has the same name as any other.

Array: An "array" is a compound value in which ordinal position serves as the only distinction among member values.

SOAP also permits serialization of data that is neither a Struct nor an Array, for example data such as is found
in a Directed-Labeled-Graph Data Model in which a single node has many distinct accessors, some of which occur
more than once.

SOAP serialization does not require that the underlying data model make an ordering distinction among accessors,
but if such an order exists, the accessors MUST be encoded in that sequence.

5.4.1 Compound Values, Structs and References to Values:

The members of a Compound Value are encoded as accessor elements. When accessors are distinguished by their name
(as for example in a struct), the accessor name is used as the element name. Accessors whose names are local to
their containing types have unqualified element names, all others have qualified names.

The following is an example of a struct of type "Book":

<e:Book>
	<author>Henry Ford</author>
	<preface>Prefatory text</preface>
	<intro>This is a book.</intro>
</e:Book>

And this is a schema fragment descirbing the above structure:

<element name="Book">
<complexType>
	<element name="author" type="xsd:string"/>
	<element name="preface" type="xsd:string"/>
	<element name="intro" type="xsd:string"/>
</complexType>
<e:Book>

Below is an example of a type with both simple and complex members. It shows two levels of referencing.
Note that the "href" attribute of the "Author" accessor element is a reference to the value whose "id"
attribute matches.

A similar construction appears for the "Address":

<e:Book>
	<title>My Life and Work</title>
	<author href="#Person-1"/>
</e:Book>
<e:Person id="Person-1">
	<name>Henry Ford</name>
	<address href="#Address-2"/>
</e:Person>
<e:Address id="Address-2">
	<email>mailto:henryford@hotmail.com</email>
	<web>http://www.henryford.com</web>
</e:Address>

The form above is appropiate when the "Person" value and the "Address" value are multi-reference.
If these were instead both single-reference, they SHOULD be embedded as follows:

<e:Book>
	<title>My Life and Work</title>
	<author>
		<name>Henry Ford</name>
		<address>
			<email>mailto:henryford@hotmail.com</email>
			<web>http://www.henryford.com</web>
		</address>
	</author>
</e:Book>

If instead there existed a restriction that no two persons can have the same address in a given instance
and that an address can be either a Street-address or an Electronic-address, a Book with two authors
would be encoded as follows:

<e:Book>
	<title>My Life and Work</title>
	<firstauthor href="#Person-1"/>
	<secondauthor href="#Person-2"/>
</e:Book>
<e:Person id="Person-1">
	<name>Henry Ford</name>
	<address xsi:type="m:Electronic-address">
		<email>mailto:henryford@hotmail.com</email>
		<web>http://www.henryford.com</web>
	</address>
</e:Person>
<e:Person id="Person-2">
	<name>Samuel Crowther</nameA>
	<address xsi:type="n:Street-address">
		<street>Martin Luther King Rd</street>
		<city>Raliegh</city>
		<state>North Carolina</state>
	</address>
</e:Person>

The above simply enforces type restriction in terms of typing

Serializations can contain references to values not in the same resource:

<e:Book>
	<title>Paradise Lost</title>
	<firstauthor href="http://www.dartmouth.edu/~milton/"/>
</e:Book>

And this is a schema fragment describing the above structures:

<element name="Book" type="tns:Book"/>
<complexType name="Book">
	<!-- Either the following group must occur or else the
		href attribute must appear, but not both. -->
	<sequence minOccurs="0" maxOccurs="1">
		<element name="title" type="xsd:string"/>
		<element name="firstauthor" type="tns:Person"/>
		<element name="secondAuthor" type="tns:Person"/>
	</sequence>
	<attribute name="href" type="uriReference"/>
	<attribute name="id" type="ID"/>
	<anyAttribute namespace="##other"/>
</complexType>

<element name="Person" base="tns:Person"/>
<complexType name="Person">
	<!-- Either the following group must occur or else the
		href attribute must appear, but not both -->
	<sequence minOccurs="0" maxOccurs="1">
		<element name="name" type="xsd:string"/>
		<element name="address" type="tns:Address"/>
	</sequence>
	<attribute name="href" type="uriReference"/>
	<attribute name="id" type="ID"/>
	<anyAttribute namespace="##other"/>
</complexType>

<element name="Address" base="tns:Address"/>
<complexType name="Address">
	<!-- Either the following group must occur or else the
		href attribute must appear, but not both -->
	<sequence minOccurs="0" maxOccurs="1">
		<element name="street" type="xsd:string"/>
		<element name="city" type="xsd:string"/>
		<element name="state" type="xsd:string"/>
	</sequence>
	<attribute name="href" type="uriReference"/>
	<attribute name="id" type="ID"/>
	<anyAttribute namespace="##other"/>
</complexType>

5.4.2 Arrays:

SOAP arrays are defined as having a type of "SOAP-ENC:Array" or a type derived there from (see also rule 8). Arrays
are represented as element values, with no specific constraints on the name of the containing element (just as
values generally do not constrain the name of their containing element).

Arrays can contain elements which themselves can be of any type, including nested arrays. New types formed by restrictions
of SOAP-ENC:Array can also be created to represent, for example, arrays limited to integers or arrays of some user-defined
enumeration.

The representation of the value of an array is an ordered sequence of elements constituting the items of an array.
Within an array value, element names are not significant for distinguishing accessors. Elements may ahve any name.
In practice, elements will frequently be named so that their declaration in a schema suggests or determines their type.

As with compound types generally, if the value of an item in the array is a single-reference value, the item contains
its value. Otherwise, the item references its value via an "href" attribute.

The following example is a schema fragment and an array containing integer array members:

<element name="myFavoriteNumbers"
		type="SOAP-ENC:Array"/>

<myFavoriteNumbers
	SOAP-ENC:arrayType="xsd:int[2]">
	<number>3</number>
	<number>4</number>
</myFavoriteNumbers>

In that example, the array "myFavoriteNumbers" contains several members each of which is a value
of type SOAP-ENC:int. This can be determined by inspection of the SOAP-ENC:arrayType attribute.

Note that hte SOAP-ENC:Array type allows unqualified element names without restriction. These
convey no type information, so when used they must either have an xsi:type attribute or the containing
element must have a SOAP-ENC:arrayType attribute. Naturally, types derived from SOAP-ENC:Array may declare
local elements, with type information.

As previously noted, the SOAP-ENC schema contains declarations of elements with names corresponding
to each simple type in the "XML Schema Part 2: Datatypes" specification [11]. It also contains a
declaration for "Array". Using these, we might write:

<SOAP-ENC:Array SOAP-ENC:arrayType="xsd:int[2]">
	<SOAP-ENC:int>3</SOAP-ENC:int>
	<SOAP-ENC:int>4</SOAP-ENC:int>
</SOAP-ENC:Array>

Arrays can contain instances of any subtype of the specified arrayType. That is, the members may be of any type
that is substitutable for the type specified in the arrayType attribute, according to whatever substitutability
rules are expressed in the schema.

So, for example, an array of integers can contain any type derived from integer (for example "int" or any user-defined
derivation of integer). Similarly, an array of "address" might contain a restricted or extended type such as
"internationalAddress". Because the supplied SOAP-ENC:Array type admits members of any type, arbitrary mixtures
of types can be contained unless specifically limited by use of the arrayType attribute.

Types of member elements can be specified using the xsi:type attribute in the instance, or by declarations
in the schema of the member elements, as the following two arrays demonstrate respectively:

<SOAP-ENC:Array SOAP-ENC:arrayType="xsd:ur-type[4]">
	<thing xsi:type="xsd:int">12345</thing>
	<thing xsi:type="xsd:decimal">6.789</thing>
	<thing xsi:type="xsd:string">
		stuff goes here
	</thing>
	<thing xsi:type="xsd:uriReference">
		http://www.dartmouth.edu/~milton/reading_room/
	</thing>
</SOAP-ENC:Array>

<SOAP-ENC:Array SOAP-ENC:arrayType="xsd:ur_type[4]">
	<SOAP-ENC:int>12345</SOAP-ENC:int>
	<SOAP-ENC:decimal>6.789</SOAP-ENC:decimal>
	<xsd:string>
		stuff, again
	</xsd:string>
	<SOAP-ENC:uriReference>
		http://www.dartmouth.edu/~milton/reading_room/
	</SOAP-ENC:uriReference >
</SOAP-ENC:Array>

Array values may be structs or other compound values. For example an array of 
"xyz:Order" structs:

<SOAP-ENC:Array SOAP-ENC:arrayType="xyz:Order[2]">
	<Order>
		<Product>Apple</Product>
		<Price>1.56</Price>
	</Order>
	<Order>
		<Product>Peach</Product>
		<Price>1.48</Price>
	</Order>
</SOAP-ENC:Array>

Arrays may have other arrays as member values. The following is an example of an array
of two arrays, each of which is an array of strings:

<SOAP-ENC:Array SOAP-ENC:arrayType="xsd:string[][2]">
	<item href="#array-1"/>
	<item href="#array-2"/>
</SOAP-ENC:Array>
<SOAP-ENC:Array id="array-1" SOAP-ENC:arrayType="xsd:string[2]">
	<item>r1c1</item>
	<item>r1c2</item>
	<item>r1c3</item>
</SOAP-ENC:Array>
<SOAP-ENC:Array id="array-2" SOAP-ENC:arrayType="xsd:string[2]">
	<item>r2c1</item>
	<item>r2c2</item>
</SOAP-ENC:Array>

The element containing an array value does not need to be named "SOAP-ENC:Array".
It may have any name, provided that the type of the element is either SOAP-ENC:Array
or is derived from SOAP-ENC:Array by restriction.

For example, the following is a fragment of a schema and a conforming instance array.

<simpleType name="phoneNumber" base="string"/>

<element name="ArrayOfPhoneNumbers">
	<complexType base="SOAP-ENC:Array">
		<element name="phoneNumber" type="tns:phoneNumber" maxOccurs="unbounded"/>
	</complexType>
	<anyAttribute/>
</element>

<xyz:ArrayOfPhoneNumbers SOAP-ENC:arrayType="xyz:phoneNumber[2]">
	<phoneNumber>206-555-1212</phoneNumber>
	<phoneNumber>1-888-123-4567</phoneNumber>
</xyz:ArrayOfPhoneNumbers>

Arrays may be multi-dimensional. In this case, more than one size will appear
within the asize part of the arrayType attribute:

<SOAP-ENC:Array SOAP-ENC:arrayType="xsd:string[2,3]">
	<item>r1c1</item>
	<item>r1c2</item>
	<item>r1c3</item>
	<item>r2c1</item>
	<item>r2c2</item>
	<item>r2c3</item>
</SOAP-ENC:Array>

While the examples above have shown arrays encoded as independent elements, array values MAY also appear
embedded and SHOULD do so when they are known to be single reference

THe following is an example of a schema fragment and an array of phone numbers embedded in a struct of type "Person"
and accessed through the accessor "phone-numbers":

<simpleType name="phoneNumber" base="string"/>

<element name="ArrayOfPhoneNumbers">
	<complexType base="SOAP-ENC:Array">
		<element name="phoneNumber" type="tns:phoneNumber" maxOccurs="unbounded"/>
	</complexType>
	<anyAttribute/>
</element>

<element name="Person">
	<complexType>
		<element name="name" type="string"/>
		<element name="phoneNumbers" type="tns:ArrayOfPhoneNumbers"/>
	</complexType>
</element>

<xyz:Person>
	<name>John Hancock</name>
	<phoneNumbers SOAP-ENC:arrayType="xyz:phoneNumber[2]">
		<phoneNumber>206-555-1212</phoneNumber>
		<phoneNumber>1-888-123-4567</phoneNumber>
	</phoneNumbers>
</xyz:Person>

Here is another example of a single-reference array value encoded as an embedded element whose 
containing element name is the accessor name:

<xyz:PurchaseOrder>
	<CustomerName>Henry Ford</CustomerName>
	<ShipTo>
		<Street>5th Ave</Street>
		<City>New York</City>
		<State>NY</State>
		<Zip>10010</Zip>
	</ShipTo>
	<PurchaseLineItems SOAP-ENC:arrayType="Order[2]">
		<Order>
			<Product>Apple</Product>
			<Price>1.56</Price>
		</Order>
		<Order>
			<Product>Peach</Product>
			<Price>1.48</Price>
		</Order>
	</PurchaseLineItems>
</xyz:PurchaseOrder>

5.4.2.1 Partially Transmitted Arrays:

SOAP provides support for partially transmitted arrays, known as "varying" arrays in some
contexts [12]. A partially transmitted array indicates in an "SOAP-ENC:offset" attribute
the zero-origin offset of the first element transmitted. If omitted, the offset is taken
as zero.

The following is an example of an array of size five that transmits only the third and fourth
element counting from zero:

<SOAP-ENC:Array SOAP-ENC:arrayType="xsd:string[5]" SOAP-ENC:offset="[2]">
	<item>The third element</item>
	<item>The fourth element</item>
</SOAP-ENC:Array>

5.4.2.2 Sparse Arrays:

SOAP provides support for sparse arrays. Each element representing a member value contains
a "SOAP-ENC:position" attribute that indicates its position within the array. The following
is an example of a sparse array of two-dimensional arrays of strings.

The size is 4 but only position 2 is used:

<SOAP-ENC:Array SOAP-ENC:arrayType="xsd:string[,][4]">
	<SOAP-ENC:Array href="#array-1" SOAP-ENC:position="[2]"/>
</SOAP-ENC:Array>
<SOAP-ENC:Array id="array-1" SOAP-ENC:arrayType="xsd:string[10,10]">
	<item SOAP-ENC:position="[2,2]">Third row, third col</item>
	<item SOAP-ENC:position="[7,2]">Eight row, third col</item>
</SOAP-ENC:Array>

If the only reference to array-1 occurs in the enclosing array, this example could
also have been encoded as follows:

<SOAP-ENC:Array SOAP-ENC:arrayType="xsd:string[,][4]">
	<SOAP-ENC:Array SOAP-ENC:position="[2]" SOAP-ENC:arrayType="xsd:string[10,10]">
		<item SOAP-ENC:position="[2,2]">Third row, third col</item>
		<item SOAP-ENC:position="[7,2]">Eight row, third col</item>
	</SOAP-ENC:Array>
</SOAP-ENC:Array>

5.4.3 Generic Compound Types:

The encoding rules just cited are not limited to those cases where the accessor names are known
in advance. If accessor are known only by inspection of the immediate values to be encoded,
the same rules apply, namely that the accessor is encoded as an element whose name matches
the name of the accessor, and the accessor either contains or references its values.

Accessors containing values whose types cannot be determined in advance MUST always contain
an appropiate xsi:type attribute giving the type of the value.

Similarly, the rules cited are sufficient to allow serialization of compound types having
a mixture of accessors distinguished by both name and ordinal position. (That is, having
some accessors repeated.) This does not require that any schema actually contain such types,
but rather says that if a type-model schema does have such types, a corresponding
XML syntactic schema and instance may be generated.

<xyz:PurchaseOrder>
	<CustomerName>Henry Ford</CustomerName>
	<ShipTo>
		<Street>5th Ave</Street>
		<City>New York</City>
		<State>NY</State>
		<Zip>10010</Zip>
	</ShipTo>
	<PurchaseLineItems>
		<Order>
			<Product>Apple</Product>
			<Price>1.56</Price>
		</Order>
		<Order>
			<Product>Peach</Product>
			<Price>1.48</Price>
		</Order>
	</PurchaseLineItems>
</xyz:PurchaseOrder>

Similarly, it is valid to serialize a compound value that structurally resembles an array but is not 
of type (or subtype) SOAP-ENC:Array. For example:

<PurchaseLineItems>
	<Order>
		<Product>Apple</Product>
		<Price>1.56</Price>
	</Order>
	<Order>
		<Product>Peach</Product>
		<Price>1.48</Price>
	</Order>
</PurchaseLineItems>

5.5 Default Values:

An omitted accessor element implies either a default value or that no value is known. The specifics
on the accessor, method, and its context. For example, an omitted accessor typically implies a Null
value for polymorphic accessors (with the exact meaning of Null accessor-dependent). Likewise, an
omitted Boolean accessor typically implies either a False value or that no value is known, and an
omitted numeric accessor typically implies either that the value is zero or that no value is known.

5.6 SOAP root Attribute:

The SOAP root attribute can be used to label serialization roots that are not true roots of an object
so that the object graph can be deserialized.

The attribute can have one of two values, either "1" or "0". True roots of an object graph have the
implied attribute value of "1". Serialization roots that are not true roots can be labeled as serialization
roots with an attribute value of "1".

An element can explicitly be labeled as not being a serialization root with a value of "0".

The SOAP root attribute MAY appear on any subelement within the SOAP Header and SOAP Body elements.
The attribute does not have a default value.

6. Using SOAP in HTTP:

This section describes how to use SOAP within HTTP with or without using the HTTP Extension Framework.

Binding SOAP to HTTP provides the advantage of being able to use the formalism and decentralized flexibility
of SOAP with the rich feature set of HTTP. Carrying SOAP in HTTP does not mean that SOAP overrides
existing semantics of HTTP but rather that the semantics of SOAP over HTTP maps naturally to HTTP semantics.

SOAP naturally follows the HTTP request/response message model providing SOAP request parameters in a HTTP
request and SOAP response parameters in a HTTP response. Note, however, that SOAP intermediaries are NOT
the same as HTTP intermediares.

That is, an HTTP intermediary addressed with the HTTP Connection header field cannot be expected to
inspect or process the SOAP entity body carried in the HTTP request.

HTTP applications MUST use the media type "text/xml" according to RFC 2376 [3] when including SOAP entity
bodies in HTTP messages.

6.1 SOAP HTTP Request:

Although SOAP might be used in combination with a variety of HTTP request methods, this binding only defines SOAP
within HTTP POST requests (see section 7 for how to use SOAP for RPC and section 6.3 for how to use the HTTP
Extension Framework).

6.1.1 The SOAPAction HTTP Header Field:

The SOAPAction HTTP request header field can be used to indicate the intent of the SOAP HTTP request.
The value is a URI identifying the intent. SOAP places no restrictions on the format or specifying of the
URI or that it is resolvable.

An HTTP client MUST use this header field when issuing a SOAP HTTP Request.

soapaction = "SOAPAction" ":" [ <"> URI-reference <"> ]
URI-reference = <as defined in RFC 2396 [4]>

THe presence and content of the SOAPAction header field can be used by servers such as 
firewalls to appropiately filter SOAP request messages in HTTP. The header field value 
of empty string ("") means that the intent of the SOAP message is provided by the HTTP
Request-URI.

No value means that there is no indication of the intent of the message.

Examples:

SOAPAction: "http://electrocommerce.org/abc#MyMessage"
SOAPAction: "myapp.sdl"
SOAPAction: ""
SOAPAction: 

6.2 SOAP HTTP Response:

SOAP HTTP follows the semantics of the HTTP Status codes for communicating status information in HTTP.
For example, a 2xx status code indicates that the client's request including the SOAP component
was successfully received, understood and accepted etc.

In case of a SOAP error while processing the request, the SOAP HTTP server MUST issue an HTTP 500
"Internal Server Error" response and include a SOAP message in the response containing a SOAP
Fault element (see section 4.4) indicating the SOAP processing error.

6.3 The HTTP Extension Framework:

A SOAP message MAY be used together with the HTTP Extension Framework [6] in order to identify
the presence and intent of a SOAP HTTP request.

Whether to use the Extension Framework or plain HTTP is a question of policy and capability
of the communicating parties. Clients can force the use of the HTTP Extension Framework by using
a mandatory extension declaration and the "M-" HTTP method name prefix.

Servers can force the use of the HTTP Extension Framework by using the 510 "Not Extended" HTTP 
status code. That is, using one extra round trip, either party can detect the policy of the
other party and act accordingly.

The extension identifier used to identify SOAP using the Extension Framework is

http://schemas.xmlsoap.org/soap/envelope/

6.4 SOAP HTTP Examples

Example 3 SOAP HTTP Using POST

POST /StockQuote HTTP/1.1
Content-Type: text/xml; charset="utf-8"
Content-Length: nnnn
SOAPAction: "http://electrocommerce.org/abc#MyMessage"

<SOAP-ENV:Envelope...

HTTP/1.1 200 OK
Content-Type: text/xml; charset="utf-8"
Content-Length: nnnn

<SOAP-ENV:Envelope...

Example 4 SOAP using HTTP Extension Framework

M-POST /StockQuote HTTP/1.1
Man: "http://schemas.xmlsoap.org/soap/envelope/"; ns=NNNN
Content-Type: text/xml; charset="utf-8"
Content-Length: nnnn
NNNN-SOAPAction: "http://electrocommerce.org/abc#MyMessage"

<SOAP-ENV:Envelope...

HTTP/1.1 200 OK
Ext:
Content-Type: text/xml; charset="utf-8"
Content-Length: nnnn

<SOAP-ENV:Envelope...

7. Using SOAP for RPC

One of the design goals of SOAP is to encapsulate and exchange RPC calls using the extensibility
and flexibility of XML. This section defines a uniform representation of remote procedure calls
and responses.

Although it is anticipated that this representation is likely to be used in combination with the
encoding style defined in section 5, other representations are possible.

The SOAP encodingStyle attribute (see section 4.3.2) can be used to indicate the encoding style
of the method call and or the response using the representation described in this section.

Using SOAP for RPC is orthogonal to the SOAP protcol binding (see section 6). In the case of using
HTTP as the protocol binding, an RPC call maps naturally to an HTTP request and an RPC response maps
to an HTTP response. However, using SOAP for RPC is not limited to the HTTP protocol binding.

To make a method call, the following information is needed:

The URI of the target object

A method name

An optional method signature

The parameters to the method

Optional header data

SOAP relies on the protocol binding to provide a mechanism for carrying the URI. For example, for HTTP
the request URI indicates the resource that the invocation is being made against. Other than it be a valid
URI, SOAP places no restriction on the form of an address (see [4] for more information on URIs)

7.1 RPC and SOAP Body:

RPC methods calls and responses are both carried in the SOAP Body element (see section 4.3) using the 
following representation:

A method invocation is modelled as a struct.

The method invocation is viewed as a single struct containing an accessor for each [in] or [in/out] parameter.
The struct is both named and typed identically to the method name.

Each [in] or [in/out] parameter is viewed as an accessor, with a name corresponding to the name of the parameter
and type corresponding to the type of the parameter. These appear in the same order as in the method signature.

A method response is modelled as a struct

The method responses is viewed as a single struct containing an accessor for the return value and each [out]
or [in/out] parameter. The first accessor is the return value followed by the parameters in the same order as
in the method signature.

Each parameter accessor has a name corresponding to the name of the parameter and type corresponding to the
type of the parameter. The name of the return value accessor is not significant. Likewise, the name 
of the struct is not significant.

However, a convention is to name it after the method name with the string "Response" appended.

A method fault is encoded using the SOAP Fault element (see section 4.4). If a protocol binding adds additional
rules for fault expression, those also MUST be followed.

As noted above, method and response structs can be encoded according to the rules in section 5, or other encodings
can be specified using the encodingStyle attribute (see section 4.1.1)

Applications MAY process requests with missing parameters but also MAY return a fault.

Because a result indicates success and a fault indicates failure, it is an error for the method
response to contain both a result and a fault.

7.2 RPC and SOAP Header:

Additional information relevant to the encoding of a method request but not part of the formal method
signature MAY be expressed in the RPC encoding. If so, it MUST be expressed as a subelement of the
SOAP Header element.

An example of the use the header element is the passing of a transaction ID along with a message.
Since the transaction ID is not part of the signature and is typically held in an infrastructure
component rather than application code, there is no direct way to pass the necessary information
with the call.

By adding an entry to the headers and giving it a fixed name, the transaction manager on the receiving
side can extract the transaction ID and use it without affecting the coding of remote procedure calls.

8. Security Considerations:

Not described here.

A SOAP Envelope Examples:

A.1 Sample Encoding of Call Requests

Example 5 Similar to Example 1 but with a Mandatory Header

POST /StockQuote HTTP/1.1
Host: www.stockquoteserver.com
Content-Type: text/xml; charset="utf-8"
Content-Length: nnnn
SOAPAction: "Some-URI"

<SOAP-ENV:Envelope
	xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"
	SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		<SOAP-ENV:Header>
			<t:Transaction
				xmlns:t="some-URI"
				SOAP-ENV:mustUnderstand="1">
					5
			</t:Transaction>
		</SOAP-ENV:Header>
	<SOAP-ENV:Body>
		<m:GetLastTradePrice xmlns:m="Some-URI">
			<symbol>DEF</symbol>
		</m:GetLastTradePrice>
	</SOAP-ENV:Body>
</SOAP-ENV:Envelope>

Example 6 Similar to Example 1 but with multiple request parameters

POST /StockQuote HTTP/1.1
Host: www.stockquoteserver.com
Content-Type: text/xml; charset="utf-8"
Content-Length: nnnn
SOAPAction: "Some-URI"

<SOAP-ENV:Envelope
	xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"
	SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		<SOAP-ENV:Body>
			<m:GetLastTradePriceDetailed
				xmlns:m="Some-URI">
					<Symbol>DEF</Symbol>
					<Company>DEF Corp</Company>
					<Price>34.1</Price>
			</m:GetLastTradePriceDetailed>
		</SOAP-ENV:Body>
</SOAP-ENV:Envelope>

There are indention errors here, somewhere, but cba to fix it

A.2 Sample Encoding of Response

Example 7 Similar to Example 2 but with a Mandatory Header

HTTP/1.1 200 OK
Content-Type: text/xml; charset="utf-8"
Content-Length: nnnn

<SOAP-ENV:Envelope
	xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"
	SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
	<SOAP-ENV:Header>
		<t:Transaction
		xmlns:t="some-URI"
		xsi:type="xsd:int" mustUnderstand="1">
			5
		</t:Transaction>
	</SOAP-ENV:Header>
	<SOAP-ENV:Body>
		<m:GetLastTradePriceResponse>
			xmlns:m="Some-URI">
				<Price>34.5</Price>
		</m:GetLastTradePriceResponse>
	<SOAP-ENV:Body>
</SOAP-ENV:Envelope>

Example 8 Similar to Example 2 but with a Struct

HTTP/1.1 200 OK
Content-Type: text/xml; charset="utf-8"
Content-Length: nnnn

<SOAP-ENV:Envelope
	xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"
	SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
	<SOAP-ENV:Body>
		<m:GetLastTradePriceResponse
		xmlns:m="Some-URI">
			<PriceAndVolume>
				<LastTradePrice>
					34.5
				</LastTradePrice>
				<DayVolume>
					10000
				</DayVolume>
			<PriceAndVolume>
		<m:GetLastTradePriceResponse>
	</SOAP-ENV:Body>
</SOAP-ENV:Envelope>

Example 9 Similar to Example 2 but Failing to Honor Mandatory Header

HTTP/1.1 500 Internal Server Error
Content-Type: text/xml; charset="utf-8"
Content-Length: nnnn

<SOAP-ENV:Envelope
	xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/">
		<SOAP-ENV:Body>
			<SOAP-ENV:Fault>
				<faultcode>SOAP-ENV:MustUnderstand</faultcode>
				<faultstring>SOAP Must Understand Error</faultstring>
			</SOAP-ENV:Fault>
		</SOAP-ENV:Body>
</SOAP-ENV:Envelope>

Example 10 Similar to Example 2 but Failing to handle Body

HTTP/1.1 500 Internal Server Error
Content-Type: text/xml; charset="utf-8"
Content-Length: nnnn

<SOAP-ENV:Envelope
	xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/">
	<SOAP-ENV:Body>
		<SOAP-ENV:Fault>
			<faultcode>SOAP-ENV:Server</faultcode>
			<faultstring>Server Error</faultstring>
			<detail>
				<e:myfaultdetails xmlns:e="Some-URI">
					<message>
						My app did not work. OH NOE
					</message>
					<errorcode>
						1001
					</errorcode>
				</e:myfaultdetails>
			</detail>
		</SOAP-ENV:Fault>
	</SOAP-ENV:Body>
</SOAP-ENV:Envelope>

The above things belonged to SOAP Version 1.1, where as the following things, is for SOAP 1.2:

SOAP Version 1.2 Part 1: Messaging Framework (Second Edition)

Abstract:

SOAP Version 1.2 is a lightweight protocol intended for exchanging structured information in a decentralized, distributed
environment. "Part 1: Messaging Framework" defines, using XML Technologies, an extensible messaging framework containing
a message construct that can be exchanged over a variety of underlying protocols.

1. Introduction:

SOAP Version 1.2 (SOAP) is a lightweight protocol intended for exchanging structured information in a decentralized, distributed
environment. It uses XML technologies to define an extensible messaging framework providing a message construct that can be
exchanged over a variety of underlying protocols. This framework has been designed to be independant of any particular programming
model and other implementaiton specific semantics.

Two major design goals for SOAP are simplicity and extensibility (see XMLP Requirements [XMLP Requirements]). SOAP attempts to
meet these goals by omitting, from the messaging framework, features that are often found in distributed systems. Such
features included but are not limited to "reliability", "security", "correlation", "routing" and "Message Exchange Patterns"
(MEPs).

Other features are left to be defined as extensions by other specifications.

The SOAP Version 1.2 specification consists of three parts. Part 1 of the SOAP Version 1.2 specification
(this document) defines the SOAP messaging framework consisting of:

1. The SOAP processing model defining the rules for processing a SOAP message (see 2. SOAP Processing Model)

2. The SOAP Exstensibility model defining the concepts of SOAP features and SOAP modules (see 3. SOAP Extensibility Model)

3. The SOAP underlying protocol binding framework describing the rules for defining a binding to an underlying protocol
that can be used for exchanging SOAP messages between SOAP nodes (see 4. SOAP Protocol Binding Framework)

4. The SOAP message construct defining the structure of a SOAP message (see 5. SOAP Message Construct)

The SOAP 1.2 Primer [SOAP Part 0] is a non-normative document intended to provide an easily understandable tutorial
on the features of the SOAP version 1.2 specifications

SOAP 1.2 Part 2 [SOAP Part 2] describes a set of adjuncts that can be used in connection with the SOAP messaging framework.

Note: In previous versions of this specifiation the SOAP name was an acronym. This is no longer the case.

I will actually take things out of order, so i do this part of SOAP 1.2 part 1 first, then i do part 0 and then go to
Part 2, as i find that order to be most convenient to understand.

1.1 Notational Conventions

The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY" and
"OPTIONAL" in this document are to be interpeted as described in RFC 2119 [RFC 2119]

This specification uses a number of namespace prefixes throughout, they are listed in Table 1. Note that hte choice of any
namespace prefix is arbitrary and not semantically significant (see XML Infoset [XML InfoSet])

Table 1: Prefixes and Namespaces used in this specification.

Prefix 		Namespace 						Notes

env 		"http://www.w3.org/2003/05/ 	A normative XML Schema [XML Schema Part 1], [XML Schema Part 2] document for the "http://www.w3.org/2003/05/soap-envelope"
			soap-envelope" 					namespace can be found at http://www.w3.org/2003/05/soap-envelope.

xs 			"http://www.w3.org/2001/ 		The namespace of the XML Schema [XML Schema Part 1], [XML Schema Part 2] specification
			XMLSchema"

Namespace names of the general form "http://example.org/..." and "http://example.com/..." represent application or context-dependent
URIs (see RFC 3986 [RFC 3986]).

All parts of this specification are normative, with the exception of examples and sections explicitly marked as "Non-Normative".

1.2 Conformance:

This specification describes data formats, and the rules for generating, exchanging, and processing messages using those formats.
This specification does not mandate the scope of any particular implementation, although it requires that no implementation
violates any mandatory requirement.

For an implementation to claim conformance with the SOAP Version 1.2 specification, it MUST correctly implemenet all mandatory
("MUST") requirements expressed in Part 1 of the Soap Version 1.2 specification (this document) that pertain to the 
activity being performed.

Note that an implementation is not mandated to implement all the mandatory requirements. For example, a special purpose implementation
that never sends a SOAP header block can claim conformance provided that it correctly implements the mandatory requirements 
that pertain to the messages it does send.

An implementation MAY implement any number of the Adjuncts specified in SOAP 1.2 Part 2 [SOAP Part 2]. Note that no conformance
is associated with the convention for describing features and bindings (see 3. SOAP Extensibility Model and 4. SOAP Protocol
Binding Framework). The implementation of an Adjunct MUST implement all the pertinent mandatory requirements expressed in
the specification of the Adjunct to claim conformance with the Adjunct.

SOAP Version 1.2 can be used as the basis for other technologies that provide richer or more specialized services. To claim
conformance with the SOAP Version 1.2 Specification, the specifications and implementations of such technologies must be consistent
with the pertinent mandatory requirements expressed in part 1 of the SOAP Version 1.2 specification (this document).

Rules for conformance with such new specifications are beyond the scope of the SOAP v 1.2 Spec; it is recommended that respective
specifications provide the appropiate conformance rules.

SOAP Version 1.2 is designed to enable at least the usage scenarios described in SOAP 1.2 Usage Scenarios [SOAP Usage Scenarios]
and possibly other scenarios. Informal description showing XML representations of concrete SOAP messages used in some common
scenarios are provided in SOAP 1.2 Part 0 [SOAP Part 0]

1.3 Relation to Other Specifications:

A SOAP message is specified as an XML Information Set [XML InfoSet]. While all SOAP message examples in this document
are shown using XML 1.0 [XML 1.0]syntax, other representations MAY be used to transmit SOAP messages between nodes
(see 4. SOAP Protocol Binding Framework)

Some of the information items defined by this document (see 5. SOAP Message Construct) are identified using namespace-qualified
names [Namespaces in XML]. See Table 1 for a list of the namespace names defined in this document.

Note:

This specification uses the term XML Expanded Name to refer to the value space pair {absolute uri reference, local-name}
for a value of type xsd:QName. Similar terminology is under consideration for inclusion in future versions of Namespace
in XML [Namespaces in XML].

Should future versions of namespace in XML [Namespaces in XML] adopt alternative terminology, we anticipate that corresponding
changes will be made to this recommendation in the form of an erratum, or in conjunction with some other future revision.

SOAP does not require that XML Schema processing (assesment of validation) be performed to establish the correctness
or 'schema implied' values of element and attribute information items defined by Parts 1 and 2 of this specification.
The values associated with element and attribute information items defined in this specification MUST be carried
explicitly in the transmitted SOAP message except where stated otherwise (see 5. SOAP Message Construct).

SOAP attribute information items have types described by XML Schema [XML Schema Part 2]. Unless otherwise stated, all
lexical forms are supported for each such attribute, and lexical forms representing the same value in the XML Schema
value space are considered equivalent for purposes of SOAP Processing, e.g the boolean lexical forms "1" and "true"
are the same.

For brevity, text in this specification refers only to only lexical form for each value, e.g, "if the value 
of the mustUnderstand attribute information item is 'true'"

Specifications for processing of application-defined data carried in a SOAP message but not defined by this specification
MAY call for additional validaiton of the SOAP message in conjunction with application-level processing. In such cases,
the choice of schema langauge and/or validation technology is at the discretion of the application.

SOAP uses XML Base [XML Base] for determining a base URI for relative URI references used as values in information
items defined by this specification (see 6. Use of URIs in SOAP).

The media type "application/soap+xml" SHOULD be used for XML 1.0 serialization of the SOAP message infoset
(see SOAP 1.2 Part 2 [SOAP Part 2], The "application/soap+xml" Media Type).

1.3.1 Processing Requirements:

The ability to use SOAP in a particular environment will vary depending on the actual constraints, choice
of tools, processing model or nature of the messages being exchanged. SOAP has been designed to have a 
relativily small number of dependencies on other XML specifications, none of which are perceived as having
prohibitive processing requirements.

Also, limiting use of SOAP to small messages instead of arbitrarly-sized messages and supporting only a few
specific message types instead of implementing generalized processing could significantly lower processing
requirements.

1.4 Example SOAP Message:

The following example shows a sample notification message expressed in SOAP. The message contains two pieces
of application-defined data not defined by this specification: a SOAP header block with a local name of
altercontrol and a body element with a local name of alert.

In general, SOAP header blocks contain information which might be of use to SOAP intermediaries as well as
the ultimate destination of the message. In this example, an intermediary might prioritize the delivery
of the message based on the priority and expiration information in the SOAP header block.

The body contains the actual message payload, in this case, the alert message.

Example 1: SOAP message containing SOAP header block and a SOAP body

<env:Envelope xmlns:env="http://www.w3.org/2003/05/soap-envelope">
	<env:Header>
		<n:alertcontrol xmlns:n="http://example.org/alertcontrol">
			<n:priority>1</n:priority>
			<n:expires>2001-06-22T14:00:00-05:00</n:expires>
		</n:altercontrol>
	</env:Header>
	<env:Body>
		<m:alert xmlns:m="http://example.org/alert">
			<m:msg>Pick up mary at school at 2pm</m:msg>
		</m:alert>
	</env:Body>
</env:Envelope>

1.5 SOAP Terminology:

This section describes the terms and concepts introduced in Part 1 of the SOAP Version 1.2 specification
(this document).

1.5.1 Protocol Concepts:

SOAP: The formal set of conventions governing the format and processing rules of a SOAP message. These conventions
include the interactions among SOAP nodes generating and accepting SOAP messages for the purpose of exchanging information
along a SOAP message path.

SOAP node: The embodiment of the processing logic necessary to transmit, receive, process and/or relay a SOAP message,
according to the set of conventions defined by this recommendation. A SOAP node is responsible for enforcing the rules that
govern the exchange of SOAP messages (see 2. SOAP Processing Model). It accesses the services provided by the underlying
protocols through one or more SOAP bindings.

SOAP role: A SOAP receiver's expected function in processing a message. A SOAP receiver can act in multiple roles.

SOAP binding: The formal set of rules for carrying a SOAP message within or on top of another protocol (underlying protocol)
for the purposes of exchange (see 4. SOAP Protocol Binding Framework). Examples of SOAP bindings include carrying a SOAP
message within an HTTP entity-body, or over a TCP stream.

SOAP Feature: An extension of the SOAP messaging framework (see 3. SOAP Extensibility Model). Examples of features include
"reliability", "security", "correlation", "routing", and "Message Exchange Patterns" (MEPs).

SOAP module: A SOAP Module is a specification that contains the combined syntax and semantics of SOAP header blocks specified
according to the rules in 3.3 SOAP Modules. A SOAP module realizes zero or more SOAP features.

SOAP message exchange pattern (MEP): A template for the exchange of SOAP messages between SOAP nodes enabled by one or more
underlying SOAP protocol binding (see 4. SOAP Protocl Binding Framework). a SOAP MEP is an example of a SOAP feature (see
3.2 SOAP Message Exchange Patterns (MEPs))

SOAP application: An entity, typically software, that produces, consumes or otherwise acts upon SOAP messages in a manner
conforming to the SOAP processing model (see 2. SOAP Processing Model)

1.5.2 Data Encapsulation Concepts

SOAP message: The basic unit of communication between SOAP nodes.

SOAP Envelope: The outermost element inforamtion item of a SOAP message.

SOAP header: A collection of zero or more SOAP header blocks each of which might be
targeted at any SOAP receiver within the SOAP message path.

SOAP header block: An element information item used to delimit data that logically constitutes a single computational
unit within the SOAP header. The type of a SOAP header block is identified by the XML expanded name of the header
block element information item.

SOAP body: A collection of zero or more element information items targeted at an ultimate SOAP receiver in the SOAP message
path (see 5.3 SOAP body)

SOAP fault: A SOAP Element information item which contains fault information generated by a SOAP node.

1.5.3 Message Sender and Receiver Concepts:

SOAP sender: A SOAP node that transmits a SOAP message.

SOAP receiver: A SOAP node that accepts a SOAP message.

SOAP message path: The set of SOAP nodes through which a single SOAP message passes. This includes the initial
SOAP sender, zero or more SOAP intermediaries, and an ultimate SOAP receiver.

Initial SOAP sender: The SOAP sender that originates a SOAP message at the starting point ofa SOAP message path.

SOAP intermediary: A SOAP intermediary is both a SOAP receiver and a SOAP sender and is targetable from within a 
SOAP message. It processes the SOAP header blocks targeted at it and acts to forward a SOAP message towards an
ultimate SOAP receiver.

Ultimate SOAP receiver: The SOAP receiver that is a final destination of a SOAP message. It is responsible 
for processing the contents of the SOAP body and any SOAP header blocks targeted at it. In some circumstnaces,
a SOAP message might not reach an ultimate SOAP reicever, for example because of a problem at a SOAP intermediary.

An ultimate SOAP receiver cannot also be a SOAP intermediary for the same SOAP message (see 2. SOAP Processing Model).

2. SOAP Processing Model:

SOAP provides a distributed processing 	model that assumes a SOAP message originates at an initial SOAP sender and is
sent to an ultimate SOAP receiver via zero or more SOAP intermediaries. Note that the SOAP distributed processing model
can support many MEPs inlcuding but not limited to one-way messages, request/response interactions, and peer-to-peer
conversations (see 3.2 SOAP Message Exchange Patterns (MEPs) for a desc of the relationship between SOAP message exchange
patterns and the SOAP extensibility model).

This section defines the SOAP Distributed processing model. THe SOAP processing model specifies how a SOAP receiver
processes a SOAP message. It applies to a single message only, in isolation from any other SOAP message. The SOAP
processing model itself does not maintain any state or perform any correlation or coordination between messages,
even, for example, when used in combination with a SOAP feature which involves sending multiple SOAP messages
in sequence, each subsequent message depending on the response to the previous message. It is the responsibility
of each such feature to define any combined processing.

Section 3. SOAP Extensibility Model describes how SOAP can be extended and how SOAP extensions might interact
with the SOAP processing model and the SOAP protocol binding framework. Section 4. SOAP Protocol Binding Framework
defines a framefork for describing the rules of how SOAP messages can be exchanged over a variety of underlying
protocols.

2.1 SOAP Nodes:

A SOAP node can be the initial SOAP sender, an ultimate SOAP receiver, or a SOAP intermediary. A SOAP node
receiving a SOAP message MUST perform processing according to the SOAP processing model as described in this
section and in the remainder of this specification. A SOAP node is identified by a URI, see 5.4.3 SOAP Node Element.

2.2 SOAP Roles and SOAP Nodes

In processing a SOAP message, a SOAP node is said to act in one or more SOAP roles, each of which is identified
by a URI Known as the SOAP role name. The role assumed by a Node MUST be invariant during the processing of an
individual SOAP message. This specification deals only with the processing of individual SOAP messages. No statement
is made regarding the possibility that a given SOAP node might or might not act in varying roles when processing
more than one SOAP message.

Table 2 defines three role names which have special significance in a SOAP message (see 2.6 Processing SOAP Messages)

Table 2: SOAP Roles defined by this specification

Short-name 		Name 												Desc

next  			"http://www.w3.org/2003/05/soap-envelope/role/next" Each SOAP intermediary and the ultimate SOAP receiver MUST act in this role.

none 			"http://www.w3.org/2003/05/soap-envelope/role/none" SOAP nodes MUST NOT act in this role.

ultimateReceiver "http://www.w3.org/2003/05/soap-envelope/role/ultimateReceiver" The ultimate receiver MUST act in this role

In addition to the SOAP role name defined in Table 2, other role names MAY be used as nessecary to meet the needs of SOAP applications.

While the purpose of a SOAP role name is to identify a SOAP node or nodes, there are no routing or message exchange semantics associated
with the SOAP role name. For example, SOAP roles MAY be named with a URI usable to route SOAP messages to an appropiate SOAP node.

Conversely, it is also appropiate to use SOAP roles with names that are related more indirectly to message routing (e.g "http://example.org/
banking/anyAccountMgr") or which are unrelated to routing (e.g, a URI meant to identify "all cache management software". For example, a SOAP
header block targeted at such a role might be used to carry an indication to any concerned software that the containing SOAP message
is idempotent, and can safely be cached and replayed).

An explonation of Idempotence:

idempotence is a word to describe a RESTful service, an operation or service call that has clients make the same call
repeatedly while producing the same result. In other words, making multiple identical requests has the same effect as making
a single request.

Note that while idempotent operations produce the same result on the server (no side effect), teh response itself may not
be the same (e.g a resource's state may change between requests).

The PUT and DELETE methods are defined to be idempotent. However, there is a caveat on DELETE. The problem with DELETE,
which if successful would normally return a 200 (OK) or 204 (No Content), will often return 404 (not found) on subsequent
calls, unless the service is configured to "mark" resources for deletion without actually deleting them.

However, when the service actually deletes the resource, the next call will not find the resource to delete it
and return a 404. However, the state on the server is the same after each DELETE call, but the response is differnet.

GET, HEAD, OPTIONS and TRACE methods are defined as safe, meaning they are only intended for retrieving data. This makes
them idempotent as well, since multiple identical requests will behave the same.

With the exception of the three SOAP role names defined in table 2, this specification does not prescribe the critera by which
a given node determines the set of roles in which it acts on a given message. For example, implementations can base 
this determination on factors including, but not limited to: hard coded choices in the implementation, information provided
by the underlying protocol binding (e.g, the URI to which this message was physically deliverred) or configuration
information provided by users during system installation.

2.3 Targeting SOAP Header Blocks:

A SOAP header block MAY carry a role attribute information item (see 5.2.2 SOAP role Attribute) that is used to target the
header block at SOAP nodes operating in the specified role. This specification refers to the value of the SOAP role 
attribute information item as the SOAP role for the corresponding SOAP header block.

A SOAP header block is said to be targeted at a SOAP node if the SOAP role for the header block is the name of a role 
in which the SOAP node operates. SOAP header blocks targeted at the special role "http://www.w3.org/2003/05/soap-envelope/role/none"
are never formally processed. Such SOAP header blocks MAY carry data that is required for processing of other SOAP header
blocks.

Unless removed by the action of an intermediary (see 2.7 Relaying SOAP Messages), such blocks are relayed with the message
to the ultimate receiver (see also 3.3 SOAP Modules)

2.4 Understanding SOAP Header Blocks:

It is like that specifications for a wide variety of header functions (i.e, SOAP modules) will be developed over time
(see 3.3 SOAP Modules), and that some SOAP nodes might include the software necessary to implement one or more such
extensions. A SOAP header block is said to be understood by a SOPE node if the software at that SOAP node has been
written to fully conform to and implement the semantics specified for the XML expanded name of the outer-most element
information item of that header block.

A SOAP header block MAY carry a mustUnderstand attribute information item (see 5.2.3 SOAP mustUnderstand Attribute).
When the value of such an attribute informaiton item is "true", the SOAP header block is said to be mandatory.

Mandatory SOAP header blocks are presumed to somehow modify semantics of other SOAP header blocks or SOAP body
elements. Therefore, for every mandatory SOAP header block targeted to a node, that node MUST either process the
header block or not process the SOAP message at all, and instead generate a fault (see 2.6 Processing SOAP
Messages and 5.4 SOAP Fault).

Tagging SOAP header blocks as mandatory thus assures that such modifications will not be silently (and presumably,
errornously) ignored by a SOAP node to which the header block is targeted.

The mustUnderstand attribute information item is not intended as a mechanism for detecting errors in routing, misidentification
of nodes, failure of a node to serve in its intended role(s) etc. Any of these conditions can result in a failure to even
attempt processing of a given SOAP header block from a SOAP envelope.

This specificaiton therefore does not require any fault to be generated based on the presence or value of the 
mustUnderstand attribute information on a SOAP header block not targeted at the current processing node.

In particular, it is not an error for an ultimate SOAP receiver to receive a message containing a mandatory 
SOAP header block that is targeted at a role other than the ones assumed by the ultimate SOAP receiver.
This is the case, for example, when a SOAP header block has survived erronously due to a routing or
targeting error at a preceding intermediary.

2.5 Structure and Interpretation of SOAP Bodies:

An ultimate SOAP receiver MUST correctly process the immediate children of the SOAP body (see 5.3 SOAP Body).
However, with the exception of SOAP faults (see 5.4 SOAP Fault), Part 1 of this specification 
(this document) mandates no particular structure or interpetation of these elements, and provides
no standard means for specifying the processing to be done.

2.6 Processing SOAP Messages:

This section sets out the rules by which SOAP messages are processed. Nothing in this specification prevents
the use of optimistic concurrency, roll back, or other techniques that might provide increased flexibility
in processing order. Unless otherwise stated, processing of all generated SOAP messages, SOAP faults and application-level
side effects MUST be semantically equivalent to performing the following steps separately, and in the order given.

1. Determine the set of roles in which the node is to act. The contents of the SOAP envelope, including any SOAP
header blocks and the SOAP body, MAY be inspected in making such determination.

2. Identify all header blocks targeted at the node that are mandatory

3. If one or more of the SOAP header blocks identified in the preceding step are not understood by the
node then generate a single SOAP fault with the Value of Code set to "env:MustUnderstand" (see 5.4.8 SOAP
mustUnderstand Faults). If such a fault is generated, any further processing MUST NOT be done. 

Faults relating to the contents of the SOAP body MUST NOT be generated in this step.

Note: Throughout this document, the term "Value of Code" is used as a shorthand for "Value of the Value child information
item of the code element information item" (see 5.4.1 SOAP Code Element)

4. Process all mandatory SOAP header blocks targeted at the node and, in the case of an ultimate SOAP receiver, the 
SOAP body. A SOAP node MAY also choose to process non-mandatory SOAP header blocks targeted at it.

5. In the case of a SOAP intermediary, and where the SOAP message exchange pattern and results of processing (e.g, no fault
generated) require that the SOAP message be sent further along the SOAP message path, relay the message as described
in section 2.7 Relaying SOAP Messages.

In all cases where a SOAP header block is processed, the SOAP node MUST understand the SOAP header block and MUST
do such processing in a manner fully conformant with the specification for the header block. The successful
processing of one header block does not guarantee successful processing of another block with the same XML
expanded name within the same message: the specification for the header block determines the circumstances
in which such processing would result in a fault.

An ultimate SOAP receiver MUST process the SOAP body, in a manner consistent with 2.5 Structure and Interpretation
of SOAP Bodies. Failure is indicated by the generation of a fault (see 5.4 SOAP Fault). SOAP message processing MAY
result in the generation of a SOAP fault; more than one SOAP fault MUST NOT be generated when processing a SOAP message.

A message may contain or result in multiple errors during processing. Except where the order of detection is specifically
indicated (as in 2.4 Understanding SOAP Header Blocks), a SOAP node is at liberty to reflect any single fault from the
set of possible faults prescribed for the errors encountered.

The selection of a fault need to be predicated on the application of the "MUST", "SHOULD" or "MAY" keywords to be
generation of the fault, with the exception that if one or more of the prescribed faults is qualified with the
"MUST" keyword, then any one fault from the set of possible faults MUST be generated.

SOAP nodes MAY make reference to any information in the SOAP envelope when processing a SOAP body or SOAP header block.
For example, a caching function can cache the entire SOAP message, if desired.

The processing of one or more SOAP header blocks MAY control or determine the order of processing for other SOAP
header blocks and/or the SOAP body. For example, one could create a SOAP header block to force processing of other
SOAP header blocks in lexical order.

In the absence of such a controlling SOAP header block, the order of header and body processing is at the discretion
of the SOAP node. Header blocks MAY be processed in arbitrary order. Header block processing MAY precede, MAY be interleaved
with, or MAY follow processing of the SOAP body. For example, processing of a "begin transaction" header block would typically
precede body processing, a "logging" function might run concurrently with body processing and a "commit transaction" header block
might be honored following completion of all other work.

Note: The above rules apply to processing at a single node. SOAP extensions can be designed to ensure that SOAP header blocks
are processed in an appropiate order, as the message moves along the message path towards the ultimate SOAP receiver.
Specifically, such extensions might specify that a fault with a Value of Code set to "env:Sender" is generated if some
SOAP header blocks have inadvertedly survived past some intended point in the message path.

Such extensions might depend on the presence or value of the mustUnderstand attribute information item in the surviving
SOAP header blocks when determining whether an error has occurred.

2.7 Relaying SOAP Messages:

As mentioned earlier in this section, it is assumed that a SOAP message originates at an intial SOAP sender and is sent
to an ultimate SOAP receiver via zero or more SOAP intermediaries. While SOAP does not itself define any routing
or forward semantics, it is anticipated that such functionality can be described as one or more SOAP features (see
3. SOAP Extensibility Model). The purpose of this section is to describe how message forwarding interacts with the
SOAP distributed processing model.

SOAP defines two different types of intermediaries: forwarding intermediaries and active intermediaries. These two
types of intermediary are described in this section.

2.7.1 Relaying SOAP Header Blocks:

The relaying of SOAP header blocks targeted at an intermediary SOAP node depends on whether the SOAP header blocks
are processed or not by that node. A SOAP header block is said to be reinserted if the processing of that header
block determines that the header block is to be reinserted in the forwarded message.

The specification for a SOAP header block may call for the header block to be relayed in the forwarded message
if the header block is targeted at a role played by the SOAP intermediary, but not otherwise processed
by the intermediary. Such header blocks are said to be relayable.

A SOAP header block MAY carry a relay attribute information item (see 5.2.4 SOAP relay Attribute). When the
value of such an attribute information item is "true", the header block is said to be relayable.
The forwarding of relayable header blocks is described in section 2.7.2 SOAP Forwarding Intermediaries.

The relay attribute information item has no effect on SOAP header blocks targeted at a role other
than one assumed by a SOAP intermediary.

The relay attribute information item has no effect on the SOAP processing model when the header block also
carries a mustUnderstand attribute information item with a value of "true".

The relay attribute information item has no effect on the processing of SOAP messages by the SOAP ultimate
receiver.

Table 3 summarizes the forwarding behavior of a SOAP node for a given header block. Each row contains a different
combination of the value of the header block's role attribute information item, whether the SOAP node is acting
in that role and whether the header block has been understood and processed, and shows whether the header block
will be forwarded or removed.

Table 3: SOAP Nodes Forwarding behavior

Role 				Header block

Short-name 			Assumed 	Understood & Processed 		Forwarded

next 				Yes 		Yes/No 						No, unless reinserted/ No, unless relay = "true"

user-defined 		Yes/No 		(Yes/No)/(N/A) 						(No, unless reinserted/ No, unless relay = "true")/Yes

ultimateReceiver 	Yes 		Yes/No 						n/a, n/a

none 				No 			n/a 						Yes

2.7.2 SOAP Forwarding Intermediaries:

The semantics of one or more SOAP header blocks in a SOAP message, or the SOAP MEP used, MAY require that the SOAP
message be forwarded to another SOAP node on behalf of the initiator of the inbound SOAP message. In this case,
the processing SOAP node acts in the role of a SOAP forwarding intermediary.

Forwarding SOAP intermediaries MUST process the message according to the SOAP processing model defined 2.6 Processing
SOAP Messages. In addition, when generating a SOAP message for the purpose of forwarding, they MUST:

1. Remove all processed SOAP header blocks

2. Remove all non-relayable SOAP header blocks that were targeted at the forwarding node but ignored during processing

3. Retain all relayable SOAP header blocks that were targeted at the forwarding node but ignored during processing.

Forwarding SOAP intermediaries MUST also obey the specification for the SOAP forwarding features being used.
The specification for each such a feature MUST describe the required semantics, including the rules describing
how the forwarded message is constructed.

Such rules MAY describe placement of inserted or reinserted SOAP header blocks. Inserted SOAP header blocks might
be indistinguishable from one or more of the header blocks removed by the intermediary. Processing is defined here 
in terms of re-inserting header blocks (rather than leaving them in place) to emphasize the need to process them
at each SOAP node along the SOAP message path.

2.7.2.1 Relayed Infoset:

This section decribes the behavior of SOAP forwarding intermediaries with respect to preservation of the
XML infoset properties of a relayed SOAP message.

Unless overriden by the processing of SOAP features at an intermediary (see 2.7.2 SOAP Forwarding Intermediaries),
the following rules apply:

1. All XML infoset properties of a message MUST be preserved, except as specified in rules 2 through 22.

2. The element information item for a header block targeted at an intermediary MAY be removed, by that intermediary,
from the [children] property of the SOAP Header element information item as detailed in 2.7.2 SOAP Forwarding
Intermediaries

3. Element information items for additional header blocks MAY be added to the [children] property of the SOAP Header
element information item as detailed in 2.7.2 SOAP Forwarding Intermediaries. In this case, a SOAP Header element
information item MAY be added, as the first member of the [children] property of the SOAP Envelope element information
item, if it is NOT already present.

4. White space character information items MAY be removed from the [children] property of the SOAP Envelope 
element information item

5. White space character information items MAY be added to the [children] property of the SOAP Envelope element information item

6. White space character information items MAY be removed from the [children] property of the SOAP Header element information item

7. White space character information items MAY be added to the [children] property of the SOAP Header element information item

8. Comment information items MAY be added to the [children] property of the SOAP Envelope element information item

9. Comment information items MAY be removed from the [children] property of the SOAP Envelope element information item

10. Comment information items MAY be added to the [children] property of the SOAP Header element information item.

11. Comment information items MAY be removed from the [children] property of the SOAP Header element information item

12. Attribute information items MAY be added to the [attributes] property of the SOAP Envelope element information item

13. Attribute information items MAY be added to the [attributes] property of the SOAP Header element information item

14. Attribute information items MAY be added to the [namespace attributes] property of the SOAP Envelope element information item

15. Attribute information items MAY be added to the [namespace attributes] property of the SOAP Header element information item

16. SOAP role attribute information items that are present in the [attributes] property of SOAP header block element information
items may be transformed as described in 5.2.2 SOAP role Attribute

17. SOAP mustUnderstand attribute information items that are present in the [attributes] property of SOAP header block element
information items may be transformed as described in 5.2.3 SOAP mustUnderstand Attribute

18. SOAP relay attribute information items that are present in the [attributes] property of SOAP header block element
information items may be transformed as described in 5.2.4 SOAP relay Attribute

19. The [base URI] property of the document information item need not be maintained.

20. The [base URI] property of element information items MAY be changed or removed.

21. The [character encoding scheme] property of the document information item MAY be changed or removed.

22. All namespace information items in the [in-scope namespaces] of element information items MUST be preserved.
Additional namespace information items MAY be added.

Note: The rules above allow for signing of SOAP header blocks, the SOAP body, and combinations of SOAP header blocks
and the SOAP body.

In the absence of a canonicalization algorithm to normalize the infoset transformations and if the "http://www.w3.org/TR/2001/REC-xml-c14n-20010315"
canonicalization algorithm is used then items 1-6 and 11-14 are incompatible with signing the SOAP envelope and items 1, 2, 5, 6, 12 and 14
are incompatible with signing the SOAP header.

Similarly, if the "http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments" canonicalization algorithm is used then items 7 and 8
are incompatible with signing the SOAP envelope and items 9 and 10 are incompatible with signing the SOAP header.

Note: White space character information items are those whose [character code] property has a value of #x20, #x9, #xD or #xA

2.7.3 SOAP Active Intermediaries

In addition to the processing performed by forwarding SOAP intermediaries, active SOAP intermediaries undertake additional
processing that can modify the outbound SOAP messages in ways NOT described in the inbound SOAP message. That is,
they can undertake processing not described by SOAP header blocks in the incoming SOAP message.

The potentional set of services provided by an active SOAP intermediary includes, but is not limited to: security services,
annotation services and content manipulation services.

The results of such active processing could impact the interpretation of SOAP messages by downstream SOAP nodes. For example,
as part of generating an outbound SOAP message, an active SOAP intermediary might have removed and encrypted some or all of
the SOAP header blocks found in the inbound SOAP message.

It is strongly recommended that SOAP features provided by active SOAP intermediaries be described in a manner that allows
such modifications to be detected by affected SOAP nodes in the message path.

2.8 SOAP Versioning Model:

The version of a SOAP message is identified by the XML expanded name of the child element information item
of the document information item with a [local name] of Envelope and a [namespace name] of "http://www.w3.org/2003/05/soap-envelope"
(see 5.1 SOAP Envelope).

A SOAP node determines whether it supports the version of a SOAP message on a per message basis. In this context "support" means
understanding the semantics of that version of a SOAP envelope. The versioning model is directed only at the SOAP Envelope element
information item. It does not address versioning of SOAP header blocks, encodings, protocol bindings or anything else.

A SOAP node MAY support multiple envelope versions. However, when processing a message, a SOAP node MUST use the semantics defined
by the version of that message.

If a SOAP node receives a message whose version is not supported it MUST generate a fault (see 5.4 SOAP Fault) with a Value of
Code set to "env:VersionMismatch". Any other malformation of the message construct MUST result in the generation of a fault with
a Value of Code set to "env:Sender".

Appendix A. Version Transition From SOAP/1.1 to SOAP Version 1.2 defines a mechanism for transitioning from SOAP/1.1 to SOAP Version 1.2
using the Upgrade element information item (see 5.4.7 VersionMismatch Faults).

3. SOAP Extensibility Model:

SOAP provides a simple messaging framework whose core functionality is concerned with providing extensibility.
The extensibility mechanisms described below can be used to add capabilities found in richer messaging environments.

3.1 SOAP Features

A SOAP feature is an extension of the SOAP messaging framework. Although SOAP poses no constraints on the potential scope of such features,
example features may include "reliability", "security", "correlation", "routing" and message exchange patterns (MEPs) such as
request/response, one-way and peer-to-peer conversations.

The SOAP extensibility model provides two mechanisms through which features can be expressed: the SOAP Processing Model and 
and the SOAP Protocol Binding Framework (see 2. SOAP Processing Model and 4. SOAP Protocol Binding Framework).

The former describes the behavior of a single SOAP node with respect to the processing of an individual message.
The latter mediates the act of sending and receiving SOAP messages by a SOAP node via an underlying protocol.

THe SOAP Processing Model enables SOAP nodes that include the mechanisms necessary to implement one or more features
to express such features within the SOAP envelope as SOAP header blocks (see 2.4 Understanding SOAP Header Blocks).
Such header blocks can be intended for any SOAP node or nodes along a SOAP message path (see 2.3 Targeting SOAP Header
Blocks). The combined syntax and semantics of SOAP header blocks are known as a SOAP module, and are specified according
to the rules in 3.3 SOAP Modules.

In contrast, a SOAP protocol binding operates between two adjacent SOAP nodes along a SOAP message path. There is no
requirement that the same underlying protocol is used for all hops along a SOAP message path. In some cases, underlying
protocols are equipped, either directly or through extension, with mechanisms for providing certain features.

The SOAP Protocol Binding Framework provides a scheme for describing these features and how they relate to SOAP
nodes through a binding specification (see 4. SOAP Protocol Binding Framework).

Certain features might require end-to-end as opposed to hop-by-hop processing semantics. Although the SOAP Protocol
Binding Framework allows end-to-end features to be expressed outside the SOAP envelope, no standard mechanism is
provided for the processing by intermediaries of the resulting messages. A binding specification that expresses
such features external to the SOAP envelope needs to define its own processing rules for those externally expressed
features. 

A SOAP node is expected to conform to these processing rules (for example, describing what information is passed
along with the SOAP message as it leaves the intermediary). The processing of SOAP envelopes in accordance with the
SOAP Processing Model (see 2. SOAP Processing Model) MUST NOT be overriden by binding specifications.

It is recommended that, where practical, end-to-end features be expressed as SOAP header blocks, so that the rules
defined by the SOAP Processing Model can be employed.

3.1.1 Requirements on Features:

The specification of a feature MUST include the following:

1. A URI used to name the feature. This enables the feature to be unambigiously referenced in description languages
or during negotiation.


2. The information (state) required at each node to implement the feature.

3. The processing required at each node in order to fullfill the obligations of the feature including any handling
of communication failures that might occur in the underlying protocol (see also 4.2 Binding Framework).

4. The information to be transmitted from node to node.

See 3.2 SOAP Message Exchange Patterns (MEPs) for additional requirements on MEP features.

3.2 SOAP Message Exchange Patterns (MEPs):

A Message Exchange Pattern (MEP) is a template that establishes a pattern for the exchange of messages between
SOAP nodes. MEPs are a type of feature, and unless otherwise stated, references in this specification to the
term "feature" apply also to MEPs. The request-response MEP specified in SOAP 1.2 Part 2 [SOAP Part 2] illustrates
the specification of a MEP feature.

The specification of a message exchange pattern MUST:

As mandated by 3.1.1 Requirements on Features, provide a URI to name the MEP

Describe the life cycle of a message exchange conforming to the pattern

Describe the temporal/causal relationships, if any, of multiple messages exchanged in conformance with
the pattern (e.g, responses follow requests and are sent to the originator of the request.)

Describe the normal and abnormal termination of a message exchange conforming to the pattern.

Underlying protocol binding specifications can declare their support for one or more named MEPs.

MEPs are SOAP features, so an MEP specification MUST conform to the requirements for SOAP feature specifications
(see 3.1.1 Requirements on Features). An MEP specification MUST also include:

1. Any requirements to generate additional messages (such as responses to requests in a request/response MEP).

2. Rules for the delivery or other disposition of SOAP faults generated during the operation of the MEP.

3.3 SOAP Modules:

The term "SOAP module" refers to the specification of the syntax and semantics of one or more SOAP header blocks.
A SOAP module realizes zero or more SOAP features. A module specification adheres to the following rules. It:

1. MUST identify itself with a URI. This enables the module to be unambigiously referenced in description languages
or during negotiation

2. MUST declare the features provided by a module (see 3.1 SOAP Features)

3. MUST clearly and completely specify the content and semantics of the SOAP header blocks used to implement the behavior
in question, including if appropiate any modifications to the SOAP processing model. The SOAP extensibility model
does not limit the extent to which SOAP can be extended. Nor does it prevent extensions from modifying the SOAP
processing model from that described in 2. SOAP Processing Model.

4. MAY utilize the property conventions defined in SOAP 1.2 Part 2 [SOAP Part 2], section A Convention for Describing
Features and Bindings, in descirbing the functionality that the module provides. If these conventions are followed,
the module specification MUST clearly describe the relationship between the abstract properties and their representations
in the SOAP envelope. Note that it is possible to write a feature specification purely in terms of abstract properties,
and then write a separate module specification which implements that feature, mapping the properties defined in the 
feature specification to SOAP header blocks in the SOAP module.

5. MUST clearly specify any known interaction with or changes to the interpetation of the SOAP body. Furthermore, it MUST
clearly specify any known interactions with or changes to the interpetation of other SOAP features and SOAP modules.
For example, we can imagine a module which encrypts and removes the SOAP body, inserting instead a SOAP header block
containing a checksum and an indication of the encryption mechanism used.

The specification for such a module would indicate that the decryption algorithm on the receiving side is to be run
prior to any other modules which rely on the contents of the SOAP body.

4. SOAP Protocol Binding Framework:

SOAP enables exchange of SOAP messages using a variety of underlying protocols. The formal set of rules for carrying a 
SOAP message within or on top of another protocol (underlying protocol) for the purpose of exchange is called a binding.
The SOAP Protocol Binding Framework provides general rules for the specification of protocol bindings; the framework
also describes the relationship between bindings and SOAP nodes that implement those bindings.

The HTTP binding in SOAP 1.2 Part 2 [SOAP Part 2] illustrates the specification of a binding. Additional bindings can be
created by specifications that conform to the binding framework introduced in this chapter.

A SOAP binding specification:

Declares the features provided by a binding.

Describes how the services of the underlying protocol are used to transmit SOAP message infosets.

Describes how the services of the underlying protocol are used to honor the contract formed by the features
suppored by that binding.

Describes the handling of all potentional failures that can be anticipated within the binding.

Defines the requirements for building a conformant implementation of the binding being specified.

A binding does not provide a separate processing model and does not constitute a SOAP node by itself.
Rather a SOAP binding is an integral part of a SOAP node (see 2. SOAP Processing Model).

4.1 Goals of the Binding Framework

The goals of the binding framework are:

1. To set out the requirements and concepts that are common to all binding specifications.

2. To facilitate homogeneous description in situations where multiple bindings support common
features, promoting reuse across bindings.

3. To facilitate consistency in the specification of optional features.

Two or more bindings can offer a given optional feature, such as reliable delivery, using different means.
One binding might exploit an underlying protocol that directly facilitates the feature (e.g, the protocol
is reliable), and the other binding might provide the necessary logic itself (e.g, reliability is acheived
via logging and retransmission). In such cases, the feature can be made available to applications
in a consistent manner, regardless of which binding is used.

4.2 Binding Framework:

The creation, transmission and processing of a SOAP message, possibly through one or more intermediaries, is specified
in terms of a distributed state macchine. The state consists of information known to a SOAP node at a given point in time,
including but not limited to the contents of messages being assembled for transmission or received for processing.

The state at each node can be updated either by local processing, or by information received from an adjancent node.

Section 2. SOAP Processing Model of this specification describes the processing that is common to all SOAP nodes
when receiving a message. The purpose of a binding specification is to augment those core SOAP rules with
additional processing that is particular to the binding, and to specify the manner in which the underlying protocols
is used to transmit information between adjacent nodes in the message path.

The distributed state machine that manages the transmission of a given SOAP message through its message path
is the combination of the core SOAP processing (see 2. SOAP Processing Model) operating at each node, in
conjunction with the binding specifications connecting each pair of nodes. A binding specification 
MUST enable one or more MEPs.

In cases where multiple features are supported by a binding specification, the specifications for those features
MUST provide any information necessary for their successful use in combination. Similarly, any dependencies
of one feature on another (i.e, if successful use of one feature depends on use or non-use of another)
MUST be specified. The binding framework does not provide any explicit mechanism for controlling the use 
of such interdependent features.

The binding framework provides no fixed means of naming or typing the information comprising the state at a
given node. Individual feature and binding specifications are free to adopt their own conventions for
specifying state. Note, however, that consistency across bindings and features is likely to be enhanced in
situations where multiple features specifications adopt consistent conventions for representing state.

For example, multiple features might benefit from a consistent specification for an authentication
credential, a transaction ID, etc. the HTTP binding in SOAP 1.2 Part 2 [SOAP Part 2] illustrates
one such convention.

As desccribed in 5. SOAP Message Construct, each SOAP message is specified as an XML infoset that consists
of a document information item with exactly one child: the SOAP Envelope element information item.
Therefore, the minimum responsibility of a binding in transmitting a message is to specify the means 
by which the SOAP message infoset is transferred to and reconstituted by the binding at the receiving
SOAP node and to specify the manner in which the transmission of the envelope is effected using
the facilities of the underlying protocol.

5. SOAP Message Construct provides that all SOAP envelopes are serializable using an XML 1.0 serialization,
so XML 1.0 or later versions of XML MAY be used by bindings as the "on the write" representation of the
XML infoset. However, the binding framework does not require that every binding use an XML serialization
for transmission: compressed, encrypted, fragmented representations and so on can be used if appropiate.

A binding, if using an XML serialization of the XML infoset, MAY mandate that a particular character
encoding or set of encodings be used.

A binding, if using a XML serialization, must list the versions of XML used to serialize the infoset,
or if it delegates this to other means (like media type description). To preserve interoperability,
the list of supported XML versions should be exhaustive.

Bindings MAY provide for streaming when processing messages. That is, SOAP nodes MAY begin processing
a received SOAP message as soon as the necessary information is available. SOAP processing is specified
in terms of SOAP message infosets (see 5. SOAP Message Construct). Although streaming SOAP receivers
will aquire such XML infosets incremenetally, SOAP processing MUST yield results identical to those
that would have been archieved if the entire SOAP envelope were available prior to the start
of processing.

For example, as provided in 2.6 Processing SOAP Messages, identification of targeted SOAP header 
blocks, and checking of all mustUnderstand attributes is to be done before successful processing
can proceed. Depending on the representation used for the XML infoset, and the order in which 
it is transmitted, this rule might limit the degree to which streaming can be achieved.

Bindings MAY depend on the state that is modeled as being outside of the SOAP message infoset (e.g,
retry counts), and MAY transmit such information to adjacent nodes. For example, some bindings
take a message delivery address (typically a URI) that is not within the envelope.

5. SOAP Message Construct:

A SOAP message is specified as an XML infoset whose comment, element, attribute, namespace and
character information items are able to be serialized as XML 1.0. Note, requiring that the specified
information items in SOAP messages infosets be serializable as XML 1.0 does not require that they
be serialized using XML 1.0

A SOAP message Infoset consists of a document information item with exactly one member in its
[children] property, which MUST be the SOAP Envelope element information item (see 5.1 SOAP Envelope).
This element information item is also the value of the [document element] property. The [notations]
and [unparsed entities] properties areb oth empty. The Infoset Recommendation [XML InfoSet] allows
for content not directly serializable using XML; for example, the character #x0 is not prohibited
in the Infoset, but is disallowed in XML.

The XML Infoset of a SOAP Message MUST correspond to an XML 1.0 serialization [XML 1.0]

The XML infoset of a SOAP message MUST NOT contain a document type declaration information item.

SOAP messages sent by initial SOAP senders MUST NOT contain processing instruction information items.
SOAP intermediaries MUST NOT insert processing instruction information items in SOAP messages
they relay. SOAP receivers receiving a SOAP message containing a processing instruciton information
item SHOULD generate a SOAP fault with the Value of Code set to "env:Sender".

However, in the case where performance considerations make it impractical for an intermediary
to detect processing instruction information items in a message to be relayed, teh intermediary
MAY leave such processing instruction information items unchanged in the relayed message.

Element information items defined by this specification that only have element information items
defined as allowable members of their [children] property can also have zero or more character information
item children. The character code of each such character information item MUST be amongst the white
space characters as defined by XML 1.0 [XML 1.0]. Unless otherwise indicated, such character information
items are considered insiginficant.

Comment information items MAY appear as children and/or descendants of the [document element] element
information but not before or after that element information item. There are some restrictions in the
processing model with respect to when comment information items can be added and/or removed (see 2.7.2.1
Relayed iNfoset)

5.1 SOAP Envelope:

The SOAP Envelope element information item has:

A [local name] of Envelope

A [namespace name] of "http://www.w3.org/2003/05/soap-envelope"

Zero or more namespace-qualified attribute information items amongst its [attributes] property

One or two element information items in its [children] property in order as follows:

1. An optional Header element information item (see 5.2 SOAP Header)

2. A mandatory Body element information item (see 5.3 SOAP Body)

5.1.1 SOAP encodingStyle Attribute

The encodingStyle attribute information item indicates the encoding rules used to serialize
parts of a SOAP message.

The encodingStyle attribute information item has:

A [local name] of encodingStyle.

a [namespace name] of "http://www.w3.org/2003/05/soap-envelope"

The encodingStyle attribute information item is of type xs:anyURI. Its value identifies a set of serialization
rules that can be used to deserialize the SOAP message.

The encodingStyle attribute information item MAY appear on the following:

1. A SOAP header block (see 5.2.1 SOAP header block)

2. A child element information item of the SOAP Body element information item (see 5.3.1 SOAP Body
child Element) if that child is not a SOAP Fault element information item (see 5.4 SOAP Fault)

3. A child element information item of the SOAP Detail element information item (see 5.4.5.1 SOAP detail entry)

4. Any descendent of 1,2, and 3 above.

The encodingStyle attribute information item MUST NOT appear on any element other than above in a 
SOAP message infoset.

The scope of the encodingStyle attribute information item is that of its [owner element] and that element
information item's descendants, excluding the scope of any inner encodingStyle attribute information item.
If no encodingStyle attribute information item is in scope for a particular element information item or the
value of such an attribute information item is "http://www.w3.org/2003/05/soap-envelope/encoding/none" then
no claims are made regarding the encoding style of that element information item and its descendants.

Example 2: Values for the encodingStyle attribute information item.
"http://www.w3.org/2003/05/soap-encoding"
"http://example.org/encoding/"
"http://www.w3.org/2003/05/soap-envelope/encoding/none"

5.2 SOAP Header:

The SOAP Header element information item provides a mechanism for extending a SOAP message in a decentralized
and modular way (see 3. SOAP Extensibility Model and 2.4 Understanding SOAP Header Blocks).

The Header element information item has:

A [local name] of Header.

A [namespace name] of "http://www.w3.org/2003/05/soap-envelope"

Zero or more namespace-qualified attribute information items in its [attributes] property

Zero or more namespace-qualified element information items in its [children] property

Each child element information item of the SOAP Header is called a SOAP header block.

5.2.1 SOAP header block:

Each SOAP header block element information item:

MUST have a [namespace name] property which has a value; that is, the name of the element MUST
be namespace-qualified.

MAY have any number of character information item children. Child character information items whose
character code is amongst the white space characters as defined by XML 1.0 [XML 1.0] are considered
significant.

MAY have any number of element information item children. Such element information items MAY be namespace-qualified.

MAY have zero or more attribute information items in its [attribute] property. Among these MAY be any or all of the
following, which have special significance for SOAP processing:

encodingStyle attribute information item (see 5.1.1 SOAP encodingStyle Attribute)

role attribute information item (see 5.2.2 SOAP role Attribute)

mustUnderstand attribute information item (see 5.2.3 SOAP mustUnderstand Attribute)

relay attribute information item (see 5.2.4 SOAP relay Attribute)

Example 3: SOAP Header with a single SOAP header block

<env:Header xmlns:env="http://www.w3.org/2003/05/soap-envelope">
	<t:Transaction xmlns:t="http://example.org/2001/06/tx"
					env:mustUnderstand="true">
	5
	</t:Transaction>
</env:Header>

5.2.2 SOAP role Attribute:

A SOAP role is used to indicate the SOAP node to which a particular SOAP header block is targeted (see 2.2 SOAP
Roles and SOAP Nodes).

The role attribute information item has the following XML infoset properties:

A [local name] of role

A [namespace name] of "http://www.w3.org/2003/05/soap-envelope"

A [specified] property with a value of "true"

The type of the role attribute information item is xs:anyURI. The value of the role attribute information
item is a URI that names a role that a SOAP node can assume.

Omitting the SOAP role attribute information item is equivalent to supplying that attribute with a value of
"http://www.w3.org/2003/05/soap-envelope/role/ultimateReceiver".

SOAP senders SHOULD NOT generate, but SOAP receivers MUST accept, the SOAP role attribute information item
with a value of "http://www.w3.org/2003/05/soap-envelope/role/ultimateReceiver"

if relaying the message, a SOAP intermediary MAY omit a SOAP role attribute information item if its value
is "http://www.w3.org/2003/05/soap-envelope/role/ultimateReceiver" (see 2.7 Relaying SOAP Messages)

A SOAP sender generating a SOAP message SHOULD use the role attribute information item only on SOAP header blocks.
A SOAP receiver MUST ignore this attribute information item if it appears on descendants of a SOAP header block
or on a SOAP body child element information item (or its descendants)

5.2.3 SOAP mustUnderstand Attribute

The SOAP mustUnderstand attribute information item is used to indicate whether the processing of a SOAP header
block is mandatory or optional (see 2.4 Understanding SOAP Header Blocks)

The mustUnderstand attribute information item has the following XML infoset properties:

A [local name] of mustUnderstand.

A [namespace name] of "http://www.w3.org/2003/05/soap-envelope"

A [specified] property with a value of "true"

The type of the mustUnderstand attribute information is xs:boolean

Omitting this attribute information is defined as being semantically equivalent to including
it with a value of "false"

SOAP senders SHOULD NOT generate, but SOAP receivers MUST accept, the SOAP mustUnderstand attribute information
item with a value of "false" or "0".

If generating a SOAP mustUnderstand attribute information item, a SOAP sender SHOULD use the canonical representation
"true" of the attribute value (see XML Schema [XML Schema Part 2]). A SOAP receiver MUST accept any valid lexical
representation of the attribute value.

If relaying the message, a SOAP intermediary MAY substitute "true" for the value "1", or "false" for "0".
In addition, a SOAP intermediary MAY omit a SOAP mustUnderstand attribute information item if its value
is "false" (see 2.7 Relaying SOAP Messages).

A SOAP sender generating a SOAP message SHOULD use the mustUnderstand attribute information item only on
SOAP header blocks. A SOAP receiver MUST ignore this attribute information item if it appears on descendants
of a SOAP header block or on a SOAP body child element information item (or its descendents)

5.2.4 SOAP relay Attribute:

The SOAP relay attribute information item is used to indicate whether a SOAP header block targeted at a SOAP receiver
must be relayed if not processed (see 2.7.1 Relaying SOAP Header Blocks)

The relay attribute information item has the following XML infoset properties:

A [local name] of relay.

A [namespace name] of "http://www.w3.org/2003/05/soap-envelope"

A [specified] property with a value of "true".

The type of the relay attribute information item is xs:boolean.

Omitting this attribute information item is defined as being semantically equivalent to including
it with a value of "false".

SOAP senders SHOULD NOT generate, but SOAP receivers MUST accept, the SOAP relay attribute information item
with a value of "false" or "0".

If generating a SOAP relay attribute information item, a SOAP sender SHOULD use the canonical representation
"true" of the attribute value (see XML Schema [XML Schema Part 2]). A SOAP receiver MUST accept any valid
lexical representation of the attribute value.

If relaying the message, a SOAP intermediary MAY substitute "true" for the value "1", or "false" for "0". In addition,
a SOAP intermediary MAY omit a SOAP relay attribute information item if its value is "false" (see 2.7 Relaying SOAP
Messages).

A SOAP sender generating a SOAP message SHOULD use the relay attribute information item only on SOAP header blocks.
A SOAP receiver MUST ignore this attribute informaiton item if it appears on descendants of a SOAP header block
or on a SOAP body child element information item (or its descendents).

5.3 SOAP Body:

A SOAP body provides a mechanism for transmitting information to an ultimate SOAP receiver (see 2.5 Structure and Interpretation
of SOAP Bodies).

The Body element information item has:

A [local name] of Body

A [namespace name] of "http://www.w3.org/2003/05/soap-envelope"

Zero or more namespace-qualified attribute information items in its [attributes] property

Zero or more namespace-qualified element information items in its [children] property

The Body element information item MAY have any number of character information item children. The character
code of such character information items MUST be amongst the white space characters as defined by XML 1.0 
[XML 1.0]. These are considered significant.

5.3.1 SOAP Body child Element:

All child element information items of the SOAP Body element information item:

SHOULD have a [namespace name] properly which has a value; that is, the name of the element SHOULD be namespace-qualified.

Note: Namespace-qualified elements tend to produce messages whose interpretation is less ambigious than those with
unqualified elements. The use of unqualified elements is therefore discouraged.

MAY have any number of character information item children. Children character information items whose character
code is amongst the white space characters as defined by XML 1.0 [XML 1.0] are considered significant.

MAY have any number of element information item children. Such element information items MAY be namespace-qualified.

MAY have zero or more attribute information items in its [attributes] property. Among these MAY be the following,
which has special significance for SOAP processing:

encodingStyle attribute information item (see 5.1.1 SOAP encodingStyle Attriubte)

SOAP defines one particular direct child of the SOAP body, the SOAP fault, which is used for reporting errors
(see 5.4 SOAP Fault)

5.4 SOAP Fault:

A SOAP fault is used to carry error information within a SOAP message.

The Fault element information item has:

A [local name] of Fault.

A [namespace name] of "http://www.w3.org/2003/05/soap-envelope"

Two or more child element information items in its [children] property in order as follows:

1. A mandatory Code element information item (see 5.4.1 SOAP Code Element)

2. A mandatory Reason element information item (see 5.4.2 SOAP Reason Element)

3. An optional Node element information item (see 5.4.3 SOAP Node Element)

4. An optional Role element information item (see 5.4.4 SOAP Role Element)

5. An optional Detail element information item (see 5.4.5 SOAP Detail Element)

To be recognized as carrying SOAP error information, a SOAP message MUST contain a single SOAP Fault element
information item as the only child element information item of the SOAP Body.

When generating a fault, SOAP senders MUST NOT include additional element information items in the SOAP Body.
A message whose Body contains a Fault plus additional element information items has no SOAP-defined semantics.

A SOAP Fault element information item MAY appear within a SOAP header block, or as a descendant of a child
element information item of the SOAP Body ; in such cases, the element has no SOAP-defined semantics.

5.4.1 SOAP Code Element

The Code element information item has:

A [local name] of Code.

A [namespace name] of http://www.w3.org/2003/05/soap-envelope

One of two child element information items in its [children] property,
in order, as follows:

1. A mandatory Value element information item as described below (see 5.4.1.1 SOAP Value Element (with Code parent))

2. An optional Subcode element information item as described below (see 5.4.1.2 SOAP Subcode element)

5.4.1.1 SOAP Value element (with Code parent)

The Value element information item has:

A [local name] of Value

A [namespace name] of http://www.w3.org/2003/05/soap-envelope

The type of the Value element information item is env:faultCodeEnum. SOAP defines a small set
of SOAP fault codes covering high level SOAP faults (see 5.4.6 SOAP Fault Codes)

5.4.1.2 SOAP Subcode element

The Subcode element information item has:

A [local name] of Subcode

A [namespace name] of http://www.w3.org/2003/05/soap-envelope

One or two child element information items in its [children] property,
in order, as follows:

1. A mandatory Value element information item as described below (see 5.4.1.3 SOAP Value element (with Subcode parent))

2. An optional Subcode element information item (see 5.4.1.2 SOAP Subcode element)

5.4.1.3 SOAP Value element (with Subcode parnet)

The Value element information item has:

A [local name] of Value

A [namespace name] of http://www.w3.org/2003/05/soap-envelope

The type of the Value element information item is xs:QName. The value of this element is an application defined subcategory
of the value of the Value child element information item of the Subcode element information item's parent element information
item (see 5.4.6 SOAP Fault Codes)

5.4.2 SOAP Reason Element

The Reason element information item is intended to provide a human-readable explanation of the fault.

The Reason element information item has:

A [local name] of Reason

A [namespace name] of http://www.w3.org/2003/05/soap-envelope

One or more Text element information item children (see 5.4.2.1 SOAP Text Element). Each child Text element
information item SHOULD have a different value for its xml:lang attribute information item.

The type of the Reason element information item is env:faultReason.

5.4.2.1 SOAP Text Element:

The Text element information item is intended to carry the text of a human-readable explanation
of the fault.

The Text element information item has:

A [local name] of Text.

A [namespace name] of http://www.w3.org/2003/05/soap-envelope

A mandatory attribute information item with a [local name] of lang and [namespace name] of "http://www.w3.org/XML/1998/namespace".
Note that the definition in of the lang attribute information item requires that the [prefix] is "xml" or any capitalization
thereof (see XML 1.0 [XML 1.0], Language Identification)

Any number of character information item children. Child character information items whose character code is amongst the white
space characters as defined by XML 1.0 [XML 1.0] are considered significant

The type of the Text element information is env:reasontext

This element information item is similar to the 'Reason-Phrase' defined by HTTP [RFC 2616] and SHOULD provide information
explaining the nature of the fault. It is not intended for algorithmic processing.

5.4.3 SOAP Node Element:

The Node element information item is intended to provide information about which SOAP node on the SOAP message
path caused the fault to happen (see 2. SOAP Processing Model).

The Node element information item has:

A [local name] of Node.

A [namespace name] of http://www.w3.org/2003/05/soap-envelope

The type of the Node element information item is xs:anyURI

As described in section 2.1 SOAP Nodes, each SOAP node is identified by a URI.
The value of the Node element information item is the URI that identifies the SOAP node
that generated the fault. SOAP nodes that do not act as the ultimate SOAP receiver MUST
include this element information item.

An ultimate SOAP receiver MAY include this element information item to indicate explicitly 
that it generated the fault.

5.4.4 SOAP Role Element:

The Role element information item identifies the role the node was operating in at the point
the fault occurred.

The Role element information item has:

A [local name] of Role.

A [namespace name] of http://www.w3.org/2003/05/soap-envelope

The type of the Role element information item is xs:anyURI

The value of the Role element information item MUST be one of the roles assumed by the node during 
processing of the message (see 2.2 SOAP Roles and SOAP Nodes)

5.4.5 SOAP Detail Element

The Detail element information item is intended for carrying application specific error information

The Detail element information item has:

A [local name] of Detail

A [namespace name] of http://www.w3.org/2003/05/soap-envelope

Zero or more child element information items in its [children] property

The Detail element information item MAY have any number of character information item children. The character
code of each such character information item MUST be amongst the white space characters as defined by XML
1.0 [XML 1.0]. These are considered significant.

The Detail element information item MAY be present in a SOAP fault in which case it carries additional information
relative to the SOAP fault codes describing the fault (see 5.4.6 SOAP Fault Codes). For example, the Detail
element information item might contain information about a message not containing the proper credentials,
a timeout, etc. The presence of the Detail element information item has no significance as to which parts
of the faulty SOAP message were processed.

All child element information items of the Detail element information item are called detail entries
(see 5.4.5.1 SOAP detail entry)

5.4.5.1 SOAP detail entry

Each detail entry:

MAY have a [namespace name] property which has a value; that is, the name of the element MAY be namespace-qualified

MAY have any number of element information item children

MAY have any number of character information item children. Child character information items whose character code
is amongst the white space characters as defined by XML 1.0 [XML 1.0] are considered significant.

MAY have zero or more attribute information items in its [attributes] property. Among these MAY be the following,
which has special significance for SOAP processing:

encodingStyle attribute information item (see 5.1.1 SOAP encodingStyle Attribute)

If present, the SOAP encodingStyle attribute information item indicates the encoding style used for the
detail entry (see 5.1.1 SOAP encodingStyle Attribute)

5.4.6 SOAP Fault Codes:

SOAP fault codes are XML expanded names, and are intended to provide a means by which faults are classified.
A hierarchical list of SOAP codes and associated supporting information is included in every SOAP fault message,
with each such code identifying the fault category at an increasing level of detail.

The values of the Value child element information item of the Code element information item are restricted to
those defined by the env:faultCodeEnum type (see Table 4). Additional fault subcodes MAY be created for use by
applications or features. Such subcodes are carried in the Value child element information item of the Subcode
element information item.

SOAP fault codes are to be interperted as modifiers of the contents of the Detail element information item
in the sense that they provide the context for the Detail element information item. A SOAP node MUST understand
all SOAP fault codes in a SOAP fault message in order to be able to interpet the Detail element information
item in a SOAP fault.

Example 4: Sample SOAP fault where the Detail element information item is to be interpreted in the context of the
"env:Sender" and "m:Message Timeout" fault codes.

<env:Envelope xmlns:env="http://www.w3.org/2003/05/soap-envelope"
			  xmlns:m="http://www.example.org/timeouts"
			  xmlns:xml="http://www.w3.org/XML/1998/namespace">
	<env:Body>
		<env:Fault>
			<env:Code>
				<env:Value>env:Sender</env:Value>
				<env:Subcode>
					<env:Value>m:MessageTimeout</env:Value>
				</env:Subcode>
			</env:Code>
			<env:Reason>
				<env:Text xml:lang="en">Sender Timeout</env:Text>
			</env:Reason>
			<env:Detail>
				<m:MaxTime>P5M</m:MaxTime>
			</env:Detail>
		</env:Fault>
	</env:Body>
</env:Envelope>

This specification does not define a limit for how many Subcode element information items a SOAP fault
might contain. However, while not a requirement of this specification, it is anticipated that most practical
examples can be supported by relatively few Subcode element information items.

Table 4: SOAP Fault Codes

Local Name 					Meaning

VersionMismatch 			The faulting node found found an invalid element information item instead of the expected Envelope element
							information item. The namespace, local name or both did not match the Envelope element information item required
							by this recommendation (see 2.8 SOAP Versioning Model and 5.4.7 VersionMismatch Faults)

MustUnderstand 				An immediate child element information item of the SOAP Header element information item targeted at the faulting node
							that was not understood by the faulting node contained a SOAP mustUnderstand attribute information item with a value
							of "true" (see 5.2.3 SOAP mustUnderstand Attribute and 5.4.8 SOAP mustUnderstand Faults)

DataEncodingUnknown 		A SOAP header block or SOAP body child element information item targeted at the faulting SOAP node is scoped
							(see 5.1.1 SOAP encodingStyle Attribute) with a data encoding that the faulting node does not support.

Sender 						The message was incorectly formed or did not contain the appropiate information in order to succeed. For example,
							the message could lack the proper authentication or payment information. It is generally an indication
							that the message is not to be resent without change (see also 5.4 SOAP Fault for a description of the SOAP
							fault detail sub-element)

Receiver 					The message could not be processed for reasons attributable to the processing of the message rather than to
							the contents of the message itself. For example, processing could include communicating with an upstream
							SOAP node, which did not respond. The message could succeed if resent at a later point in time (see also
							5.4 SOAP Fault for a desc of the SOAP fault detail sub-element)

5.4.7 VersionMismatch Faults:

When a SOAP node generates a fault with a Value of Code set to "env:VersionMismatch", it SHOULD provide an Upgrade SOAP header
block in the generated fault message. The UpgradeSOAP header block, as described below, details the XML qualified names
(per XML Schema [XML Schema Part 2]) of the supported SOAP envelopes that the SOAP node supports (see 2.8 SOAP Versioning Model)

5.4.7.1 SOAP Upgrade Header Block

The Upgrade SOAP header block consists of an Upgrade element information item containing an ordered list of XML qualified
names of SOAP envelopes that the SOAP node supports in the order most to least preferred.

The Upgrade element information item has:

A [local name] of Upgrade

A [namespace name] of "http://www.w3.org/2003/05/soap-envelope"

One or more SupportedEnvelope element information items in its [children] property in 5.4.7.2 SOAP SupportedEnvelope Element

The Upgrade element information item MUST NOT have an encodingStyle attribute information item

5.4.7.2 SOAP SupportedEnvelope Element

The SupportedEnvelope element information item has:

A [local name] of SupportedEnvelope

A [namespace name] of "http://www.w3.org/2003/05/soap-envelope"

A qname attribute information item in its [attributes] property as described in 5.4.7.3 SOAP QName Attribute

5.4.7.3 SOAP QName Attribute

The qname attribute information item has the following XML infoset properties:

A [local name] of qname

A [namespace name] which has no value

A [specified] property with a value of "true"

The type of the qname attribute information item is xs:QName. Its value is the XML qualified name of a SOAP
Envelope element information item that the faulting node can understand.

Note:

When serializing the qname attribute information item there needs to be an in-scope namespace declaration for the
namespace name of the SOAP Envelope element information item that the faulting node can understand. The value of
the attribute information item uses the prefix of such a namespace declaration.

5.4.7.4 VersionMismatch Example

The following examples illustrates the case of a SOAP node that supports both SOAP Version 1.2 and SOAP/1.1 but which
prefers SOAP version 1.2 (see appendix A. Version Transition From SOAP/1.1 to SOAP Version 1.2 for a mechanism for
transitioning from SOAP/1.1 to SOAP Version 1.2).

This is indicated by including an Upgrade SOAP header block with two SupportEnvelope element information items, the
first containing the local name and namespace name of the SOAP Version 1.2 Envelope element information item, the
latter the local name and namespace name of the SOAP/1.1 Envelope element

Example 5: Version mismatch fault generated by a SOAP node. The message includes a SOAP Upgrade header block indicating
support for both SOAP Version 1.2 and SOAP/1.1 but with a preference for SOAP Version 1.2

<?xml version="1.0" ?>
<env:Envelope xmlns:env="http://www.w3.org/2003/05/soap-envelope"
			  xmlns:xml="http://www.w3.org/XML/1998/namespace">
	<env:Header>
		<env:Upgrade>
			<env:SupportedEnvelope qname="ns1:Envelope"
					xmlns:ns1="http://www.w3.org/2003/05/soap-envelope"/>
			<env:SupportedEnvelope qname="ns2:Envelope"
					xmlns:ns2="http://schemas.xmlsoap.org/soap/envelope/"/>
		</env:Upgrade>
	</env:Header>
	<env:Body>
		<env:Fault>
			<env:Code><env:Value>env:VersionMismatch</env:Value></env:Code>
				<env:Reason>
					<env:Text xml:lang="en">VersionMismatch</env:Text>
				</env:Reason>
		</env:Fault>
	</env:Body>
</env:Envelope>

5.4.8 SOAP mustUnderstand Faults:

When a SOAP node generates a fault with a Value of Code set to "env:MustUnderstand", it SHOULD provide NotUnderstood
SOAP header blocks in the generated fault message. The NotUnderstood SOAP header blocks, as described below, detail
the XML qualified names (per XML Schema [XML Schema Part 2]) of the particular SOAP header block(s) which were not understood.

A SOAP node MAY generate a SOAP fault for any one or more SOAP header blocks that were not understood in a SOAP message.
It is not a requirement that the fault contain the XML qualified names of all such SOAP header blocks.

5.4.8.1 SOAP NotUnderstood Element

Each NotUnderstood header block element information item has:

A [local name] of NotUnderstood

A [namespace name] of "http://www.w3.org/2003/05/soap-envelope"

A qname attribute information item in its [attributes] property as described in 5.4.8.2 SOAP QName Attribute

The NotUnderstood element information item MUST NOT have an encodingStyle attribute information item.

5.4.8.2 SOAP QName Attribute

The qname attribute information item has the following XML infoset properties:

A [local name] of qname

A [namespace name] which has no value

A [specified] property with a value of "true"

The type of the qname attribute information item is xs:QName. Its value is the XML qualified name of a SOAP
header block which the faulting node failed to understand.

Note: When serializing the qname attribute information item there needs to be an in-scope namespace declaration
for the namespace name of the SOAP header block that was not understood and the value of the attribute information
item uses the prefix of such a namespace declaration. The prefix used need to not be the same as the one used
in teh SOAP message that was not understood.

5.4.8.3 NotUnderstood Example

Consider the following example message:

Example 6: SOAP envelope that will cause a fault if Extension1 or Extension2 are not understood

<?xml version="1.0" ?>
<env:Envelope xmlns:env='http://www.w3.org/2003/05/soap-envelope'>
	<env:Header>
		<abc:Extension1 xmlns:abc='http://example.org/2001/06/ext'
			env:mustUnderstand='true'/>
		<def:Extension2 xmlns:def='http://example.com/stuff'
			env:mustUnderstand='true' />
	</env:Header>
	<env:Body>
		...
	</env:Body>
</env:Envelope>

The message in the above example will result in the fault message shown in the example below if the ultimate
receiver of the SOAP message does not understand the two SOAP header blocks abc:Extension1 and def:Extension2

Example 7 SOAP fault generated as a result of not understanding Extension1 and Extension2

<?xml version="1.0" ?>
<env:Envelope xmlns:env='http://www.w3.org/2003/05/soap-envelope'
			  xmlns:xml='http://www.w3.org/XML/1998/namespace'>
	<env:Header>
		<env:NotUnderstood qname='abc:Extension1'
						 xmlns:abc='http://example.org/2001/06/ext' />
		<env:NotUnderstood qname='def:Extension2
						 xmlns:def='http://example.com/stuff' />
	</env:Header>
	<env:Body>
		<env:Fault>
			<env:Code><env:Value>env:MustUnderstand</env:Value></env:Code>
			<env:Reason>
				<env:Text xml:lang='en'>One or more mandatory
					SOAP header blocks not understood
				</env:Text>
			</env:Reason>
		</env:Fault>
	</env:Body>
</env:Envelope>

6. Use of URIs in SOAP

SOAP uses URIs for some identifiers including, but not limited to, values of the encodingStyle (see 5.1.1 SOAP encodingStyle Attribute)
and role (see 5.2.2 SOAP role Attribute) attribute information items. To SOAP, a URI is simple a formatted string that identifies a web resource.

Where this specification calls for a URI, the string supplied MUST conform to the URI syntax as described by RFC 3986 [RFC 3986]. Note:
RFC 3987 [RFC 3987] provides means by which Internationalized Resource Identifiers, IRIs, can be encoded into corresponding URIs.

Although this section only applies to URIs directly used by information items defined by this specification, it is RECOMMENDED that
application-defined data carried within a SOAP envelope use the same mechanisms and guidelines defined here for handling URIs.

URIs used as values in information items identified by the "http://www.w3.org/2003/05/soap-envelope" and "http://www.w3.org/2003/05/soap-encoding"
XML namespaces can be either relative or absolute.

SOAP does not define a base URI but relies on the mechanisms defined in XML Base [XML Base] and RFC 3986 [RFC 3986] for establishing a base
URI against which relative URIs can be made absolute.

HTe underlying protocol binding MAY defined a base URI which can act as the base URI for hte SOAP envelope (see 4. SOAP Protocol Binding Framework
and SOAP 1.2 Part 2 [SOAP Part 2], section HTTP binding).

SOAP does not define any equivalence rules for URIs in general as these are defined by the individual URI schemes and by RFC 3986 [RFC 3986].
However, because of inconsistencies with respect to URI equivalnce rules in may current URI parses, it is RECOMMENDED that SOAP senders
do not rely on any special equivalence rules in SOAP receivers in order to determine equivalence between URI values used in a SOAP
message.

The use of IP addresses in URIs SHOULD be avoided whenver possible (see RFC 1900 [RFC 1900]). However, when used, the literal format
for IPv6 addresses in URIs as described by RFC 3986 [RFC 3986] SHOULD be supported.

SOAP does not place any priori limit on the length of a URI. Any SOAP node MUST be able to handlet he length of any URI that it publishes
and both SOAP senders and SOAP receivers SHOULD Be able to deal with URIs of at least 2048 chars in length.

7. Security Considerations

The SOAP Messaging Framework does not directly provide any mechanisms for dealing with access control, confidentiality, integrity
and non-repuidiation. Such mechanisms can be provided as SOAP extensions using the SOAP extensibility model (see 3. SOAP Extensibility
Model). This section describes the security considerations that designers and implementors need to take into consideration when designing
and using such mechanisms.

SOAP implementors need to anticipate rogue SOAP applications sending intentionally malicious data to a SOAP node (see 2. SOAP Processing MOdel).
It is strongly recommended that a SOAP node receiving a SOAP message is capable of evaluating to what level it can trust the sender of that
SOAP message and its contents.

7.1 SOAP Nodes

SOAP can carry application-defined data as SOAP header blocks or as SOAP body contents. Processing a SOAP header block might
include dealing with side effects such as state changes, logging of information, or the generation of additional messages.
It is strongly recommended that, for any dpeloyment scenario, only carefully specified SOAP header blocks with well understood
security implications of any side effects be processed by a SOAP node.

SImilarly, processing the SOAP body might imply the occurrence of side effects that could, if not properly understood, have severe
consequences for the receiving SOAP node. IT is strongly recommended that only well-defined body contents with known security
implications be processed.

Security considerations, however, are not just limited to recognizing the immediate child elements of a SOAP header block and 
the SOAP body. Implementors need to pay special attention to the security implications of all data carried within a SOAP
message that can cause the remote execution of any actions in the receiver's environment.

This includes not only data expressed as XML infoset properties but data that might be encoded as property values including
binary data or parameters, for example URI query strings. Before accepting data of any type, an application ought ot be
aware of the particular security implications associated with that data within the context it is being used.

SOAP implementors need to be careful to ensure that if processing of various parts of a SOAP message is provided through
modular software architechture, that each module is aware of the overall security context. For example, the SOAP body
might not be processed without knowing the context in which it was received.

7.2 SOAP Intermediaries

SOAP inherently provides a distributed processing model that might involve a SOAP message passing through multiple SOAP
nodes (see 2. SOAP Processing Model). SOAP intermediaries are by definition men in teh middle, and represent an
oppurotunity for man-in-the-middle attacks. Security breaches on systems that run SOAP intermediaries can result in
serious security and privacy problems.

A compromised SOAP intermediary, or an intermediary implemented or configured without regard to security and privacy
considerations, might be used in the comission of a wide range of potentional attacks.

Analyzing the security implications of potentional SOAP-related security problems, it is important to realize that hte
scope of security mechanisms provided by the underlying protocol might not be the same scope as the whole message path
of the SOAP message. There is no requirement in SOAP that all hops between participating SOAP nodes use the same underlying
protocol and even if this were the case, the very use of SOAP intermediaries is likely to reach beyond the scope of
transport-level security.

7.3 Underlying Protocol Bindings

The affects on security of not implementing a MUST or SHOULD, or doing something the specificaiton says MUST NOT or 
SHOULD NOT be done, can be very subtle. Binding specificaiton authors ought to describe, in detail, the security implications
of not following recommendations or requirements as most implementors will not have had the benefit of the experience and
discussions that produced the specification (See 4. SOAP Protocol Binding Framework)

In addition, a binding specificaiton might not address or provide countermeasures for all aspects of the inherent security
risks. The binding specification authors ought to identify any suchs risks as might remain and indicate where further
countermeasures would be needed above and beyond those provided for in the binding specification.

Authors of binding specifications need to be aware that SOAP extension modules expressed as SOAP header blocks could affect
the underlying protocol in unforseen ways. A SOAP message carried over a particular protocl binding might reuslt in
seemingly conflicting features.

An example of this is a SOAP message carried over HTTP, using the HTTP basic authentication mechanism in combination with
a SOAP-based authentication mechanism. It is strongly recommended that a binding specification descirbes any such interactions
between the extensions and the underlying protocols.

7.3.1 Binding to Application-Specific Protocols

Some underlying protocols could be designed for a particular purpose or application profile. SOAP bindings to such
protocols MAY use the same endpoint identification (e.g, TCP port number) as the underlying protocol, in order to
reuse the existing infrastructure associated with that protocol.

However, the use of well-known ports by SOAP might incur additional, unintended handling by intermediaries
and underlying implementations. For example, HTTP is commonly thought of as a "Web browsing" a protocol,
and network administrators might place certain restrictions upon its use, or could interpose services such
as filtering, content modification, routing, etc. Often, these services are interposed using port number
as a heuristic.

as a result, binding definitions for underlying protocols with well-known default ports or application profiles
SHOULD document potentional interactions with commonly deployed infrastructure at those default ports
or in conformance with default application profiles. Binding definitions SHOULD also illustrate the use of
binding on a non-default port as a means of avoiding unintended interaction with such services.

Having done Part 1, i move to Part 0 as to cover more ground. ALbeit, there is so much ground to cover,
that i might cover the other elements in due time as well, albeit for now, i should cover SOAP 0 and 2.

SOAP Version 1.2 Part 0: Primer (Second Edition):

Abstract:

SOAP Version 1.2 Part 0: Primer (Second Edition) is a non-normative document intended to provide an easily
understandable tutorial on the features of SOAP Version 1.2. In particular, it describes the features through
various usage scenarios, and is intended to complement the normative text contained in Part 1 and Part 2 of the
SOAP 1.2 Specifications.

This second edition includes additional material on the SOAP Message Transmission Optimization Mechanism
(MTOM), the XML-binary Optimized packaging (XOP) and the Resource Representation SOAP Header Block (RRSHB) specifications.

Status of This Document:

THis section describes the status of this document at the time of its publication. Other documents may supersede this
document. A list of current W3C publications and the latest version of this technical report can be found in the
W3C technical reports index at http://www.w3.org/TR/

This document is a W3C Recommendation: it has been Produced by the XML Protocol Working Group, which is part of the
Web Services Activity. This second edition is not a new version of the SOAP 1.2 Primer. Rather, as a convenience
to readers, it incorporates the changes reflected in the accumulated errata to the original Recommendation.

Additionally, it incorporates changes to incorporate an overview of the XML-binary Optimized Packaging, SOAP
Message Transmission Optimization Mechanism and Resource SOAP Header Block specifications and their usage.
Changes between these two versions are described in a diff document.

THis document has been reviewed by W3C Members, by software devs, and by other W3C groups and interested parties, and is endorsed
by the Director as a W3C recommendation. It is a stable document and may be used as reference material or cited from another
document.

W3C's role in making the Recommendation is to draw attention to the specification and to promote its widespread deployment.
This enhances the functionality and interoperability of the Web.

Please report errors in this document to the public mailing list xmlp-comments@w3.org (archive). It is inappropiate to
send discussion email to this address.

Since the primary purpose of this specificaiton is to present a set of SOAP Version 1.2 specifications and functionalities,
no implementation report is provided. However, the SOAP 1.2 Implementation Report can be found at http://www.w3.org/2000/xp/
Group/2/03/soap1.2implementation.html and the SOAP MTOM/XOP/RRSHB Implementation/Interop Summary can be found at
http://www.w3.org/2000/xp/Group/4/08/implementation.html

THis document is governed by the 24 January 2002 CPP as amended by the W3C Patent Policy Transition Procedure.
This document is informative only. W3C maintains a public list of any patent disclosures, made in connection
with the delivrables of the group, that page also includes instructiosn for disclosuring a patent. An indivudal who
has actual knowledge of a patent which the individual believes contains Essential Claim(s) must disclose the info
in accordance with section 6 of the W3C Patent Policy.

A list of current W3C Recommendations and other technical reports can be found at http://www.w3.org/TR

1. Introduction

SOAP Version 1.2 Part 0: Primer (Second Edition) is a non-normative document intended to provide an easily understandable tutorial
on teh features of the SOAP version 1.2 Specifications. Its purpose is to help a technically comptent person understand how SOAP
may be used, by describing representative SOAP message structures and message exchange patterns.

In particular, this primer describes the features of SOAP through various usage scenarios, and is intended to complement
the normative text contained in SOAP Version 1.2 PArt 1: Messaging Framework (hereafter SOAP Part 1), SOAP Version 1.2
Part 2: Adjuncts (hereafter [SOAP Part 2]), the SOAP Message Transmission Optimization Mechanism (MTOM) (hereafter MTOM),
XMl-binary Optimized Packaging [XOP] and the Resource Representation SOAP Header Block [ResRep] specifications.

It is expected that hte reader has some fmailiaryt with the basic syntax of XML, including the use of XML namespace and infosets,
and Web concepts such as URIs and HTTP. It is intended primarily for users of SOAP, such as application designers, rather than
implementors of the SOAP specification, although the latterm ay derive some benefit.

This primar aims at highlightning the essential features of SOAP Version 1.2, not at completeness in describing every
nuance or edge case. Therefore, there is no substitute for the main specifications to obtain a fuller understanding of SOAP.
To that end, this primer provides extensive links to the main specifications wherever new concepts are introduced or used.

SOAP Part 1 defines the SOAP envelope, which is a consturct that defines an overall framework for representing the contents
of a SOAP message, identifying who should deal with all or part of it, and whether handling such parts are optional or
mandatory. It also defines a protocol binding framework,which describes how the specification for a binding of SOAP onto
another underlying protocol may be written.

SOAP Part 2 defines a data model for SOAP, a particular encoding scheme for data types which may be used for conveying 
remote procedure calls (RPC), as well as one concrete realization of the underlying protocol binding framework defined in
SOAP PArt 1. This binding allows the exchange of SOAP messages either as a payload of a HTTP POST request and response,
or as a SOAP message in teh response to a HTTP GET.

MTOM decribes an abstract feature for optimizing the wire format of a SOAP message for certain type of content, as well
as a concrete implementation of it realized in an HTTP binding, while still mainting the modelling of a SOAP message
as a single XML Infoset.

XOP defines a convention for serializing more effectively an XML Infoset that has binary content. MTOM makes use of the
XOP format for optimizing the transmission of SOAP messages.

ResRep specifies a SOAP header block which carries a representation of a Web resource, which is needed for processing
a SOAP message but which a receiver would prefer not to or cannot obtain by dereferencing the URI for the resource
carried within the message.

This document (the primer) is not normative, which means that it does not provide the definitive specificaiton of SOAP
Version 1.2 or other specifications cited above. The examples provided here are intended to complement the formal
specifications, and in any question of interpretation the formal specifications naturally take precedence. The examples
shown here provide a subset of the uses expected for SOAP. IN actual usage scenarios, SOAP will most likely 
be part of an overall solution, and there will no doubt be otehr application-specific requirements which are not
captured in these examples.

1.1 Overview

SOAP Version 1.2 provides the definition of the XML-based information which can be used for exchanging structured 
and typed information between peers in a decentralized, distributed environment. [SOAP Part 1] explains that a 
SOAP message is formally specified as an XML. Information Set [XML Infoset] (henceforth often simply infoset),
which provides an abstract desc of its ocntents.

Infosets can have different on-the-wire representations (aka serializations), one common example of which is as an
XML 1.0 [XML 1.0] document. However, other serialization are also possible, and [MTOM] using the [XOP] format offers
one mechanism for doing so for the cases where there is a need to optimize the processing and size of the 
transmitted message.

SOAP is fundamentally a stateless, one-way message exchange paradigm, but applications can create more complex 
interaction patterns (e.g, request/response, request/mutliple responses etc.) by combining such one-way exchanges
with features provided by an underlying protocol and/or application-specific information. SOAP is silent on the
semantics of any applicaiton-specific data it conveys, as it is on issues such as the routing of SOAP messages,
reliable data transfer, firewall traversal, etc.

However, SOAP provides the framework by which application-specific information may be conveyed in an extensible 
manner. Also, SOAP provides a full desc of the required actions taken by a SOAP node on receiving a SOAP
message.

Section 2 of this document provides an introduction of the basic features of SOAP starting with the simplest
usage scenarios, namely a one-way SOAP message , followed by various request-response type exchanges, including
RPCs. Fault situations are also described.

Section 3 provides an overview of the SOAP processing model, which describes the rules for initial construction of
a message, rules by which messages are processed when received at an intermediary or ultimate destination, and rules
by which portions of the message can eb isnerted, deleted or modified by the actions of an intermediary.

Section 4 of this document describes the ways in which SOAP messages may be transported to realize various usage scenarios.
It decribes the SOAP HTTP binding specified in [SOAP Part2], as well as an example of how SOAP messages may be conveyed
in email messages. AS part of the HTTP binding, it introduces two message exchange patterns which are avialable to an app,
one of which uses the HTTP POST method, while the other uses HTTP GET.

Examples are also provided on how RPCs, in particular those that represent "safe" information retrieval, may be represented
in SOAP message exchange in a manner that is compatible with the architechtural principles of the World Wide Web.

Section 5 of this document provides a treatment of various aspects of SOAP that can be used in more complex usage scenarios.
These include the extensibility mechanism offered through the use of header elements, which may be targeted at specific intermediate
SOAP nodes to provide value-added services to communicating applications, using various encoding schemes to serialize application-specific
data in SOAP messages, and the means to provide a more optimized seralization of a SOAP message under certain circumstances.

Section 6 of this document describes the changes from SOAP Version 1.1 [SOAP 1.1]

Section 7 of htis document provides references

For ease of reference, terms and concepts used in this primer are hyped-linked to their definition in the
main specifications.

1.2 Notational Conventions

Throughout this primer, sample SOAP envelops and messages are shown as [XML 1.0] documents. [SOAP Part1] explains that 
a SOAP message is formally specified as an [XML InfoSet] which is an abstract desc of its ocntents. The distinction between
the SOAP message infosets and their representation as an XML document is unlikely to be of interest to those using this
primer as an intro to SOAP, those who do care (typically those who port SOAP to new protocol bindings where the messages
may have altenraitve representations) should understand these exampels as referring to the corresponding XML infosets.
Further elaboration of this point is provided in Section 4 of this document.

The namespace prefixes "env", "enc", "rep", "xop" and "xmime" used in the prose sections of this document are associated
with the namespace names "http://www.w3.org/2003/05/soap-envelope", "http://www.w3.org/2003/05/soap-encoding", 
"http://www.w3.org/2003/05/soap-rpc", "http://www.w3.org/2004/08/representation", "http://www.w3.org/2004/08/xop/include"
and "http://www.w3.org/2004/11/xmlmime" respectively.

The namespace prefixes "xs" and "xsi" used in the prose sections of this document are associated with the namespace
names "http://www.w3.org/2001/XMLSchema" and "http://www.w3.org/2001/XMLSchema-instance" respectively, both of which
are defined in the XML Schema specifications [XML Schema Part1], [XML Schema Part2].

Note that the choice of any other namespace prefix is arbitrary and not semantically significant.

Namespace URIs of the general form "http://example.org/..." and "http://example.com/..." represent an application-dependent
or context-dependent URI [RFC 3986]

2. Basic Usage Scenarios

A SOAP mesasge is fundamentally a one-way transmission between SOAP nodes, from a SOAP sender to a SOAP receiver,
but SOAP mesasges are expected to be combined by applications to imeplent more compelx interaction patterns 
ranging from request/response to multiple, back-and-forth "conversational" exchanges.

The primer starts by exposing the structure of a SOAP message and its exchange in some simple usage scenarios based
on a travel reservation app. Various aspects of this application will be used throughout the primer. In this 
scenario, the travel reservation application for an employee of a company negotiates a travel reservation
with a traveling booking service for a planned trip.

The information exchanged betwene the travel reservation app and the travel service app is in the form
of SOAP messages.

The ultimate recipient of a SOAP message sent from the travel application is the travel service application,
but it is possible that the SOAP message may be "routed" through one or more SOAP inetermediaries, which
act in some way on the message. Some simple examples of such SOAP intermediaries might be ones that log,
audit or possibly, amend each travel request. Examples, and a more detailed discussion of the behavior
and role of SOAP intermediaries, is postponed to section 5.1

Section 2.1 Decribes a travel reservation request expressed as a SOAP message, which offers the oppurtounity 
to describe the various "parts" of a SOAP message

Section 2.2.1 continues the same scenario to show a response from the travel service in teh form of another
SOAP message, which forms a part of a conversational message exchange as the various choices meeting the constraints
of the travel request are negotiated.

Section 2.2.2 Assumes that the various parameters of the travel reservation have been accepted by the traveller,
and an exchange - modelled as a remote procedure call (RPC) - between the travel reservation and the travel
service applications confirms the payment for the reservation.

Section 2.3 shows examples of fault handling.

2.1 SOAP Messages

Example 1 shows data for a travel reservation expressed in a SOAP message

Example 1

<?xml version='1.0' ?>
<env:Envelope xmlns:env="http://www.w3.org/2003/05/soap-envelope">
	<env:Header>
		<m:reservation xmlns:m="http://travelcompany.example.org/reservation"
				env:role="http://www.w3.org/2003/05/soap-envelope/role/next"
					env:mustUnderstand="true">
			<m:reference>uuid:093a2da1-q345-739r-ba5d-pqff98fe8j7d</m:reference>
			<m:dateAndTime>2001-11-29T13:20:00.00.000-05:00</m:dateAndTime>
		</m:reservation>
		<n:passenger xmlns:n="http://mycompany.example.com/employees"
				env:role="http://www.w3.org/2003/05/soap-envelope/role/next"
					env:mustUnderstand="true">
			<n:name>Some guy</n:name>
		</n:passenger>
	</env:Header>
	<env:Body>
		<p:itinerary
			xmlns:p="http://travelcompany.example.org/reservation/travel">
			<p:departure>
				<p:departing>New York</p:departing>
				<p:arriving>Los Angeles</p:arriving>
				<p:departureDate>2001-12-14</p:departureDate>
				<p:departureTime>some time</p:departureTime>
				<p:seatPreference>aisle</p:seatPreference>
			</p:departure>
			<p:return>
				<p:departing>LA</p:departing>
				<p:arriving>NY</p:arriving>
				<p:departureDate>2001-12-20</p:departureDate>
				<p:departureTime>tiems</p:departureTime>
				<p:seatPreference/>
			</p:return>
		</p:itinerary>
		<q:lodging
			xmlns::q="http://travelcompany.example.org/reservation/hotels">
			<q:preference>none</q:preference>
		</q:lodging>
	</env:Body>
</env:Envelope>

Sample SOAP message for a travel reservation containing header blocks and a body

The SOAP message in Example 1 contains two SOAP-specific sub-elements within the overall env:Envelope,
namely an env:Header and an env:Body. The contents of these elements are application defined and not 
part of the SOAP specifications, although the latter do have something to say about how such elements
must be handled.

A SOAP header element is optional, but it has been included in the example to explain certain features
of SOAP. A SOAP header is an extension mechanism that provides a way to pass information in SOAP
messages that is not application payload. Such "control" information includes, for example, passing
directives or contextual information related to the processing of the message.

This allows a SOAP message to be extended in an application-specific manner. The immediate child 
elements of the env:Header element are called header blocks, and represent a logical grouping
of data which, as shown later, can individually be targeted at SOAP nodes that might be encountered
in the path of a message from a sender to an ultimate receiver.

SOAP headers have been designed in anticipation of various uses for SOAP, many of which will
involve the participation of other SOAP processing nodes - called SOAP intermediaries - along a
message's path from an initial SOAP sender to an ultimate SOAP receiver.

This allows SOAP intermediates to provide value-added services. Headers, as shown later, may be
inspected, inserted, deleted or forwarded by SOAP nodes encountered along a SOAP message path.
(It should be kept in mind, though, that the SOAP specifications do not deal with what the contents
of header elements are, or how SOAP messages are routed between nodes, or the manner by which
the route is determined and so forth.)

These are a part of the overall application and could be the subject of other specifications.

The SOAP body is the mandatory element within the SOAP env:Envelope, which implies that this
is where the main end-to-end information conveyed in a SOAP message must be carried.

A pictorial rep of the SOAP message in Ex 1 is as follows:

//WIll paint this in terms of XML scheme, its actually a picture

<SOAP Envelope>
	<SOAP Header>
		<Header Block reservation>
		<Header Block passenger>
	</SOAP Header>
	<SOAP Body>
		<Body sub-element itinerary>
		<Body sub-element lodging>
	</SOAP Body>
</SOAP Envelope>

Figure 1: SOAp Message Structure

In Example 1, the header contains two header blocks, each of which is defined in its own XML namespace and which
represent some aspect pertaining to the overall processing of the body of the SOAP message. For this travel reservation
application, such "meta" information pertaining to the overall request is a reservation header block which provides
a reference and time stamp for this instance of a reservation, and the traveller's identity in the passanger
block.

The header blocks reservation and passenger must be processed by the next SOAP intermediary encountered in the message
path or, if there is no itnermediary, by the ultimate recipient of the message. The fact that it is targeted at the
next SOAP node encountered en route is indicated by the presence of the attribute env:role with the value "http://www.w3.org/2003/05/soap-envelope/role/next"
(hereafter simply "next"), which is a role that all SOAP nodes must be willing to play.

The presence of an env:mustUnderstand attribute with value "true" indicates that the node(s) processing the header must absolutely
process these header blocks in a manner consistent with their specifications, or else not process the message at all and throw a
fault. Note that whenever a header block is processed, either because it is marked env:mustUnderstand="true" or for another reason,
the block must be processed in accordance with the specification for that block. Such header block specs are application
defined and not part of SOAP. Section 3 will elaborate further on SOAP message processing based on the values of these attrs.

The choices of what data is placed in a header block and what goes in the SOAP body are decisions made at the time of application
design. The main point to keep in mind is that header blocks may be targeted at various nodes that might be encountered along
a message's path from a sender to the ultimate recipient.

Such intermediate SOAP nodes may provide value-added services based on data in such headers. In Example 1, the passanger
data is palced in a header block to illustrate the use of this data at a SOAP intermediary to do some additional processing.
For example, as shown later in section 5.1, the outbound message is altered by the SOAP intermediary by having the
travel policies pertaining to this passanger appended to the message as another header block.

The env:Body element and its associated child elements, itinerary and lodging, are intended for exchange of information
between the initial SOAP sender and the SOAP node which assumes the role of the ultimate SOAP receiver in the message
path, which is the travel service application. Therefore, the env:Body and its contents are implicitly targeted and
are expected to be understood by the ultimate receiver.

The means by which a SOAP node assumes such a role is not defined by the SOAP specification, and is determined
as a part of the overall application semantics and associated message flow.

Note that a SOAP intermediary may decide to play the role of the ultimate SOAP receiver for a given message transfer,
and thus process the env:Body. However, even though this sort of behavior cannot  be prevented, it is not something
should be done lightly as it may prevent the intentions of the message's sender, and have undesirable side effects
(such as not processing header blocks that might be targeted at intermediaries further along the message path).

A SOAP message such as that in Example 1 may be transferred by different underlying protocols and used in a variety
of message exchange patterns. For example, for a Web-based access to a travel service application, it could be
placed in the body of a HTTP POST request. In another protocol binding, it might be sent in an email message
(see section 4.2). Section 4 will describe how SOAP messages may be conveyed by a variety of underlying protocols.

For the time being, it is assumed that a mechanism exists for message transfer and the remainder of this section
concentrates on the details of the SOAP messages and their processing.

2.2 SOAP Message Exchange

SOAP Version 1.2 is a simple messaging framework for transferring information specified in the form of an XML
infoset between an initial SOAP sender and an ultimate SOAP receiver. The more interesting scenarios typically
involve multiple message exchanges between these two nodes. The simplest such exchange is a request-response
pattern.

Some early uses of [SOAP 1.1] emphasized the use of this pattern as means for conveying remote procedure calls
(RPC), but it is important to note that not all SOAP request-response exchanges can or need to be modified as RPCs.
The latter is used when there is a need to model a certain programmatic behavior, with the exchanged messages
conforming to a pre-defined description of the remote call and its return.

A much larger set of usage scenarios than that covered by the request-response pattern that can be modeled 
simply as XML-based content exchanged in SOAP messages to form a back-and-forth "conversation", where the
semantics are at the level of the sending and receiving applications. Section 2.2.1 covers the case of XML-based
content exchanged in SOAP messages between the travel reservation application and the travel service app
in a conversational pattern, while section 2.2.2 provides an example of an exchange modeled as an RPC.

2.2.1 Conversational Message Exchanges

Continuing with the travel request scenario, Example 2 shows a SOAP message returned from the travel
service in response to the reservation request message in Example 1. This response seeks to refine
some information in the request, namely the choice of airports in teh departing city.

Example 2

<?mxl version='1.0' ?>
<env:Envelope xmlns:env="http://www.w3.org/2003/05/soap-envelope">
	<env:Header>
		<m:reservation xmlns:m="http://travelcompany.example.org/reservation"
			env:role="http://www.w3.org/2003/05/soap-envelope/role/next"
				env:mustUnderstand="true">
			<m:reference>uuid:093a2da1-q345-739r-ba5d-pqff98fe8j7d</m:reference>
			<m:dateAndTime>2001-11-29T13:35:00.000-05:00</m:dateAndTime>
		</m:reservation>
		<n:passenger xmlns:n="http://mycompany.example.com/employees"
			env:role="http://www.w3.org/2003/05/soap-envelope/role/next"
				env:mustUnderstand="true">
			<n:name>Some guy</n:name>
		</n:passenger>
	</env:Header>
	<env:Body>
		<p:itinearyClarification
			xmlns:p="http://travelcompany.example.org/reservation/travel">
			<p:departure>
				<p:departing>
					<p:airportChoices>
						JFK LGA EWR
					</p:airportChoices>
				</p:departing>
			</p:departure>
			<p:return>
				<p:arriving>
					<p:airportChoices>
						JFK LGA EWR
					</p:airportChoices>
				</p:arriving>
			</p:return>
		</p:itinearyClarification>
	</env:Body>
</env:Envelope>

SOAP message sent in response to the message in Example 1

As described earlier, the env:Body contains the primary content of the message, which in this example
includes a list of the various alternatives for the airport, conforming to a schema definition in the 
XML namespace, http://travelcompany.example.org/reservation/travel.

In this example, the header blocks from Example 1 are returned (with some sub-element values altered)
in the response. This could allow message correlation at the SOAP level, but such headers are very likely
to also have other application-specific issues.

THe message exchanges in Example 1 and 2 are cases where XML-based contents conforming to some application-defined
schema are exchanged via SOAP-messages. Once again, a discussion of the means by which such messages are transferred
is deferred to section 4.

It is easy enough to see how such exchanges can build up to a mutliple back-and-forth "conversational" message
exchange pattern. Example 3 shows a SOAP message sent by the travel reservation application in response to
that in Example 2 choosing one from the list of available airports.

The header block reservation with the same value of the reference sub-element accompanies each message in this conversation,
thereby offering a way, should it be needed, to correlate the messages exchanged between them at the application level.

Example 3

<?xml version='1.0' ?>
<env:Envelope xmlns:env="http://www.w3.org/2003/05/soap-envelope">
	<env:Header>
		<m:reservation
			xmlns:m="http://travelcompany.example.org/reservation"
				env:role="http://www.w3.org/2003/05/soap-envelope/role/next"
					env:mustUnderstand="true">
			<m:reference>uuid:093a2da1-q345-739r-ba5d-pqff98fe8j7d</m:reference>
			<m:dateAndTime>2001-11-29T13:36:50.000-05:00</m:dateAndTime>
		</m:reservation>
		<n:passenger xmlns:n="http://mycompany.example.com/employees"
			env:role="http://www.w3.org/2003/05/soap-envelope/role/next"
				env:mustUnderstand="true">
			<n:name>Some guy</n:name>
		</n:passenger>
	</env:Header>
	<env:Body>
		<p:itinerary
			xmlns:p="http://travelcompany.example.org/reservation/travel">
			<p:departure>
				<p:departing>LGA</p:departing>
			</p:departure>
			<p:return>
				<p:arriving>EWR</p:arriving>
			</p:return>
		</p:itinerary>
	</env:Body>
</env:Envelope>

Response to the message in Example 2 continuing a conversational message exchange

2.2.2 Remote Procedure Calls

One of the design goals of SOAP Version 1.2 is to encapsulate remote procedure call functionality using the extensibility
and flexibility of XML. SOAP Part 2 Section 4 has defined an uniform representation for RPC invocations and responses
carried in SOAP messages.

This section continues with the travel reservation scenario to illustrate the use of SOAP messages to convey
remote procedure calls and their return.

To that end, the next example shows the payment for the trip using a credit card. (It is assumed that the conversational 
exchanges described in section 2.1.1 have resulted in a confirmed itinerary). Here, it is further assumed that the
payment happens in teh context of an overall transaction where the credit card is charged only when the travel and the
lodging (not shown in any example, but presumably reserved in a similar manner) are both confirmed.

The travel reservation application provides credit card information and the successful completion of the different
activities results in the card being charged and a reservation code returned. This reserve-and-charge interaction
between the travel reservation application and the travel service application is modeled as a SOAP RPC.

To invoke a SOAP RPC, the following information is needed:

1. The address of the target SOAP node.

2. The procedure or method name

3. The identifies and values of any arguments to be passed to the procedure or method together with any output
params and return value.

4. A clear separation of the arguments used to identify the Web resource which is the actual target for the RPC,
as contrasted with those that convey data or control information used for processing the call by the target resource.

5. The message exchange pattern which will be employed to convey the RPC, together with an identification of the so-called
"Web Method" (on which more later) to be used.

6. Optionally, data which may be carried as a part of SOAP header blocks.

Such information may be expressed by a variety of means, including formal Interface Definition Languages (IDL). Note that
SOAP does not provide any IDL, formal or informal. Note also that the above info differs in subtle ways from information
generally needed to invoke other, non-SOAP RPCs.

Regarding Item 1 above, there is, from a SOAP perspective, a SOAP node which "contains" or "supports" the target of the
RPC. It is the SOAP node which (appropiately) adopts the role of the ultimate SOAP receiver. As required by Item 1, the
ultimate recipient can identify the target of the named procedure or method by looking for its URI. The manner in which
the target URI is made available depends on the underlying protocol binding.

One possibility is that the URI identifying the target is carried in a SOAP header block. Some protocol bindings, such as
the SOAP HTTP binding defined in SOAP Part2, offer a mechanism for carrying the URI outside the SOAP message. In general,
one of the properties of a protocol binding specification must be a description of how the target URI is carried as part
of the binding. Section 4.1 provides some concrete examples of how the URI is carried in the case of the standardized
SOAP protocol binding to HTTP.

Item 4 and Item 5 above are required to ensure that RPC applications that employ SOAP can do so in a manner which is compatible
with the architechtural principles of the World Wide Web. Section 4.1.3 discusses how the information provided by 
items 4 and 5 are utilized.

For the remainder of this section, it is assumed that the RPC conveyed in a SOAP message as shown in Example 4 is appropiately
targeted and dispatched. The purpose of this section is to highlight the syntactical aspects of RPC requests and 
returns carried within a SOAP message.

Example 4

<?xml version='1.0' ?>
<env:Envelope xmlns:env="http://www.w3.org/2003/05/soap-envelope" >
	<env:Header>
		<t:transaction
				xmlns:t="http://thirdparty.example.org/transaction"
				env:encodingStyle="http://example.com/encoding"
				env:mustUnderstand="true" >5<t:transaction>
	</env:Header>
	<env:Body>
		<m:chargeReservation
			env:encodingStyle="http://www.w3.org/2003/05/soap-encoding"
				xmlns:m="http://travelcompany.example.org/">
			<m:reservation xmlns:m="http://travelcompany.example.org/reservation">
				<m:code>FT35ZBQ</m:code>
			</m:reservation>
			<o:creditCard xmlns:o="http://mycompany.example.com/financial">
				<n:name xmlns:n="http://mycompany.example.com/employees">
					guy
				</n:name>
				<o:number>123456789099999</o:number>
				<o:expiration>2005-02</o:expiration>
			</o:creditCard>
		</m:chargeReservation>
	</env:Body>
</env:Envelope>

SOAP RPC request with a mandatory header and two input (or "in") params

The RPC itself is carried as a child of the env:Body element, and is modelled as a struct which
takes the name of the procedure or method, in this case chargeReservation (A struct is a concept from the SOAP Data
Model defined in SOAP Part 2 that models a structure or record type that occurs in some common programming languages).

The design of the RPC in the example (whose formal desc has not been explicitly provided) takes two input (or "in")
params, the reservation corresponding to the planned trip identified by the reservation code, and the creditCard
information. The latter is also a struct, which takes three elements, the card holders name, the card number and an expiration date.

In this example, the env:encodingStyle attribute with the value http://www.w3.org/2003/05/soap-encoding shows that the
contents of the chargeReservation structure have been serialized according to the SOAP encoding rules, i.e, the particular
rules defined in SOAP Part 2 section 3. Even though SOAP specifies this particular encoding scheme, its use is optional
and the specification makes clear that other encoding schemes may be used for application-specific data within a SOAP
message.

It is for this purpose that it provides the env:encodingStyle attribute to qualify header blocks and body sub-elements.
The choice of the value for this attribute is an application-specific decision and the ability of a caller and callee
to interoperate is assumed to have been settled "out-of-band". Section 5.2 shows an example of using another
encoding scheme.

As noted in Item 6 above, RPCs may also require additional information to be carried, which can be important for
the processing of the call in a distributed environment, but which are not part of the formal procedure or method
desc. (Note, however, that providing such additional contextual information is not specific to RPCs, but may be required
in general for processing of any distributed app).

In the example, the RPC is carried out in the context of an overall transaction which involves several activities which
must all complete successfully before the RPC returns successfully. Example 4 shows how a header block transaction
directed at the ultimate recipient (implied by the absence of the env:role attribute) is used to carry such
information.

The value "5" is some transaction identifier set by and meaningful to the application. No further elaboration of the
application-specific semantics of this header are provided here, as it is not germane to the discussion of the syntactical
aspects of SOAP RPC messages.

Let us assume that the RPC in the charging example has been designed to have the procedure desc which indicates there there
are two output (or "out") params, one providing the reference code for the reservation and the other a URL where the details
of the reservation may be viewed. The RPC response is returned in the env:Body element of a SOAP message, which is modeled
as a struct taking the procedure name chargeReservation and, as a convention, the word "Response" appended.

The two output (or "out") params accompanying the response are the alphanumeric code identifying the reservation in question,
and a URI for the location, viewAt, from where the reservation may be retrieved. 

This is shown in Example 5a, where the header again identifies the transaction within which this RPC is performed.

Exampel 5a

<?xml version='1.0' ?>
<env:Envelope xmlns:env="http://www.w3.org/2003/05/soap-envelope">
	<env:Header>
		<t:transaction
			xmlns:t="http://thirdparty.example.org/transaction"
				env:encodingStyle="http://example.com/encoding"
					env:mustUnderstand="true">5</t:transaction>
	</env:Header>
	<env:Body>
		<m:chargeReservationResponse
			env:encodingStyle="http://www.w3.org/2003/05/soap-encoding"
				xmlns:m="http://travelcompany.example.org/">
			<m:code>FT35ZBQ</m:code>
			<m:viewAt>
				http://travelcompany.example.org/reservations?code=FT35ZBQ
			</m:viewAt>
		</m:chargeReservationResponse>
	</env:Body>
</env:Envelope>

RPC response with two output (or "out") params for the call shown in Example 4

RPCs often have descriptions where a particular output param is distinguished, the so-called "return" value.
The SOAP RPC convention offers a way to distinguish this "return" value from the other output params in
the procedure desc. To show this, the charging example is modified to have an RPC desc that is almost
the same as that for Example 5a, i.e, with the same two "out" params, but in addition it also has a
"return" value, which is an enumeration with potentional values of "confirmed" and "pending".

The RPC response conforming to this desc is shown in Example 5b, where the SOAP header, as before, identifies
the transaction within which this RPC is performed.

Example 5b

<?xml version='1.0' ?>
<env:Envelope xmlns:env="http://www.w3.org/2003/05/soap-envelope" >
	<env:Header>
		<t:transaction
			xmlns:t="http://thirdparty.example.org/transaction"
				env:encodingStyle="http://example.com/encoding"
					env:mustUnderstand="true">5</:transaction>
	</env:Header>
	<env:Body>
		<m:chargeReservationResponse
			env:encodingStyle="http://www.w3.org/2003/05/soap-encoding"
				xmlns:rpc="http://www.w3.org/2003/05/soap-rpc"
					xmlns:m="http://travelcompany.example.org/">
			<rpc:result>m:status</rpc:result>
			<m:status>confirmed</m:status>
			<m:viewAt>
				http://travelcompany.example.org/reservations?code=FT35ZBQ
			</m:viewAt>
		</m:chargeReservationResponse>
	</env:Body>
</env:Envelope>

RPC response with a "return" value and two "out" params for the call shown in Example 4

In Example 5b, the return value is identified by the element rpc:result, and contains the XML
Qualified Name (of type xs:QName) of another element within the struct which is m:status.
This, in turn, contains the actual return value, "confirmed".

This technique allows the actual return value to be strongly typed according to some schema.
If the rpc:result element is absent, as is the case in Example 5a, the return value is not present
or is of the type void.

While, in principle, using SOAP for RPC is independent of the decision to use a particular means
for transferring the RPC call and its return, certain protocol bindings that support the SOAP Request-Response
message exchange pattern may be more naturally suited for such purposes.

A protocol binding supporting this message exchange pattern can provide the correlation between a request and a response.
Of course, the designer of an RPC-based application could choose to put a correlation ID relating a call and its return
in a SOAP header, thereby making the RPC independent of any underlying transfer mechanism.

In any case, application designers have to be aware of all the characteristics of the particular protocols
chosen for transferring SOAP RPCs, such as latency, synchrony, etc.

In the commonly used case, standardized in SOAP Part 2 section 7, of using HTTP as the underlying transfer protocol,
an RPC invocation maps naturally to the HTTP request and an RPC response maps to the HTTP response. Section 4.1,
provides examples of carrying RPCs using the HTTP binding.

However, it is worth keeping mind that even though most examples of SOAP for RPC use the HTTP protocol binding,
it is not limited to that means alone.

2.3 Fault Scenarios:

SOAP provides a model for handling situations when faults arise in the processing of a message. SOAP distinguishes
between the conditions that result in a fault, and the ability to signal that fault to the originator of the
faulty message or another node. The ability to signal the fault depends on the message transfer mechanism used,
and one aspect of the binding specification of SOAP onto an underlying protocol is to specify how faults are signaled,
if at all.

The remainder of this section assumes that a transfer mechanism is available for signaling faults generated while processing
received messages, and concentrates on the structure of the SOAP fault message.

The SOAP env:Body element has another distinguished role in that it is the place where such fault information is placed.
The SOAP fault model (see SOAP Part 1, section 2.6) requires that all SOAP-specific and application-specific faults be 
reported using a single distinguished element, env:Fault, carried within the env:Body element.

The env:Fault element contains two mandatory sub-elements, env:Code and env:Reason, and (optionally) application-specific
information in the env:Detail sub-element. Another optional sub-element, env:Node, identifies via a URI the SOAP node which
generated the fault, its absence implying that it was the ultimate recipient of the message which did so.

There is yet another optional sub-element, env:Role, which identifies the role being played by the node which generated
the fault.

The env:Code sub-element of env:Fault is itself made up of a mandatory env:Value sub-element, whose content is specified
in the SOAP specification (see SOAP Part 1 section 5.4.6) as well as an optional env:Subcode sub-element.

Example 6a shows a SOAP message returned in response to the RPC request in Example 4, and indicating a failure to
process the RPC.

Example 6a

<?xml version='1.0' ?>
<env:Envelope xmlns:env="http://www.w3.org/2003/05/soap-envelope"
			xmlns:rpc='http://www.w3.org/2003/05/soap-rpc'>
	<env:Body>
		<env:Fault>
			<env:Code>
				<env:Value>env:Sender</env:Value>
				<env:Subcode>
					<env:Value>rpc:BadArguments</env:Value>
				</env:Subcode>
			</env:Code>
			<env:Reason>
				<env:Text xml:lang="en-US">Processing error</env:Text>
				<env:Text xml:lang="cs">Chyba zpracováni</env:Text>
			</env:Reason>
			<env:Detail>
				<e:myFaultDetails
					xmlns:e="http://travelcompany.example.org/faults">
					<e:message>Name does not match card number</e:message>
					<e:errorcode>999</e:errorcode>
				</e:myFaultDetails>
			</env:Detail>
		</env:Fault>
	</env:Body>
</env:Envelope>

Sample SOAP message indicating failure to process the RPC in Example 4

In Example 6a, the top-level env:Value uses a standardized XML Qualified Name (of type xs:QName) to identify that
it is an env:Sender fault, which indicates that it is related to some syntactical error or inappropiate information in the
message. (When a env:Sender fault is received by the sender, it is expected that some corrective action is taken before a 
similar message is sent again).

The env:Subcode element is optional, and, if present, as it is in this example, qualifies the parent value 
further. In Example 6a, the env:Subcode denotes that an RPC specific fault, rpc:BadArguments, defined in SOAP
Part 2 section 4.4, is the cause of the failure to process the request.

The structure of the env:Subcode element has been chosen to be hierarchial - each child env:Subcode element has a 
mandatory env:Value and an optional env:Subcode sub-element - to allow application-specific codes to be carried.
This hierarchical structure of the env:Code element allows for an uniform mechanism for conveying multiple level
of fault codes. The top-level env:Value is a base fault that is specified in the SOAP Version 1.2 specifications
(see SOAP Part 1 section 5.4.6) and must be understood by all SOAP nodes.

Nested env:Values are application-specific, and represent further elaboration or refinement of the base fault
from an application perspective. Some of these values may well be standardized, such as the RPC codes standardized
in SOAP 1.2 (see SOAP part 2 section 4.4) or in some other standards that use SOAP as an encapsulation protocol.

THe only requirement for defining such application-specific subcode values is that they be namespace qualified
using any namespace other than the SOAP env namespace which defines the main classifications for SOAP faults.
There is no requirement from a SOAP perspective that applications need to understand, or even look at all
levels of the subcode values.

The env:Reason sub-element is not meant for algorithmic processing, but rather for human understanding,
so, even though this is a mandatory item, the chosen value need not be standardized. Therefore all that
is required is that it reasonably accurately describes the fault situation. It must have one or more env:Text
sub-elements, each with a unique xml:lang attribute, which allows applications to make the fault reason available
in multiple languages.

(Applications could negotiate the language of the fault text using a mechanism built using SOAP headers, however,
this is outside the scope of the SOAP specifications)

The absence of a env:Node sub-element with env:Fault in Example 6a implies that it is generated by the ultimate receiver
of the call. The contents of env:Detail, as shown in the example, are application-specific.

During the processing of a SOAP message, a fault may also be generated if a mandatory header element is not understood
or the information contained in it cannot be processed. Errors in processing a header block are also signalled using a 
env:Fault element within the env:Body, but with a particular distinguished header block, env:NotUnderstood, that 
identifies the offending header block.

Example 6b shows an example of a response to the RFC in Example 4 indicating a failure to process the t:transaction
header block. Note the presence of the env:MustUnderstand fault code in the env:Body, and the identification of the
header not understood using an (unqualified) attribute, qname, in the special (empty) header block env:NotUnderstood.

Example 6b:

<?xml version='1.0' ?>
<env:Envelope xmlns:env="http://www.w3.org/2003/05/soap-envelope">
	<env:Header>
		<env:NotUnderstood qname="t:transaction"
					xmlns:t="http://thirdparty.example.org/transaction"/>
	</env:Header>
	<env:Body>
		<env:Fault>
			<env:Code>
				<env:Value>env:MustUnderstand</env:Value>
			</env:Code>
			<env:Reason>
				<env:Text xml:lang="en-US">Header not understood</env:Text>
				<env:Text xml:lang="fr">En-tête non compris</env:Text>
			</env:Reason>
		</env:Fault>
	</env:Body>
</env:Envelope>

Sample SOAP message indicating failure to process the header block in Example 4

If there were several mandatory header blocks that were not understood, then each could be
identified by its qname attribute in a series of such env:NotUnderstood header blocks.

3. SOAP Processing Model

Having established the various syntactical aspects of a SOAP message as well as some basic message
exchange patterns, this section provides a general overview of the SOAP processing model (specified in
SOAP Part 1, section 2). The SOAP processing model describes the actions taken by a SOAP node on
receiving a SOAP message.

Example 7a shows a SOAP message with several header blocks (with their contents omitted for brevity).
Variations of this will be used in the remainder of this section to illustrate various aspects of
the processing model.

Example 7a

<?xml version="1.0" ?>
	<env:Envelope xmlns:env="http://www.w3.org/2003/05/soap-envelope">
		<env:Header>
			<p:oneBlock xmlns:p="http://example.com"
					env:role="http://example.com/Log">
			...
			...
			</p:oneBlock>
			<q:anotherBlock xmlns:q="http://example.com"
				env:role="http://www.w3.org/2003/05/soap-envelope/role/next">
			...
			...
			</r:aThirdBlock>
		</env:Header>
		<env:Body>
			...
			...
		</env:Body>
	</env:Envelope>

SOAP message showing a variety of header blocks

The SOAP processing model describes the (logical) actions taken by a SOAP node on receiving a SOAP message.
There is a requirement for the node to analyze those parts of a message that are SOAP-specific, namely those
elements in the SOAP "env" namespace. Such elements are the envelope itself, the header element and the body element.

A first step is, of course, the overall check that the SOAP message is syntactically correct. That is, it conforms to
the SOAP XML infoset subject to the restrictions on the use of certain XML constructs - Processing Instructions and
Document Type Definitions - as defined in SOAP Part 1, Section 5.

3.1 The "role" Attribute

Further processing of header blocks and the body depend on the role(s) assumed by the SOAP node for the processing
of a given message. SOAP defines the (optional) env:role attribute - syntactically, xs:anyURI - that may be present
in a header block, which identifies the role played by the intended target of that header block.

A SOAP node is required to process a header block if it assumes the role identified by the value of the URI.
How a SOAP node assumes a particular role is not a part of the SOAP specifications.

Three standardized roles have been defined (see SOAP Part 1, section 2.2) which are:

"http://www.w3.org/2003/05/soap-envelope/role/none" (hereafter simply "none")
"http://www.w3.org/2003/05/soap-envelope/role/next" (hereafter simply "next") and
"http://www.w3.org/2003/05/soap-envelope/role/ultimateReceiver" (hereafter simply "ultimateReceiver")

In Example 7a, the header block oneBlock is targeted at any SOAP node that plays the application-defined role by the
URI http://example.com/Log. For purposes of illustration, it is assumed that the specification for such a header block
requires that any SOAP node adopting this role log the entire message.

Every SOAP node receiving a message with a header block that has a env:role attribute of "next" must be capable of processing
the contents of the element, as this is a standardized role that every SOAP node must be willing to assume. A header block
thus attributed is one which is expected to be examined and (possibly) processed by the next SOAP node along the path of a message,
assuming that such a header has not been removed as a result of processing at some node earlier in the message path.

In Example 7a, the header block anotherBlock is targeted at the next node in the message path. In this case, the SOAP message
received by the node playing the application-defined role of "http://example.com/Log", must also be willing to play the
SOAP-defined role of "next". This is also true for the node which is the ultimate recipient of the message, as it obviously
(and implicitly) also plays the "next" role by virtue of being next in the message path.

The third header block, aThirdBlock, in Example 7a does not have the env:role attribute. It is targeted at a SOAP node
which assumes the "ultimateReceiver" role (which can be explicitly declared or is implicit if the env:role attribute
is absent in a header block) is played by a SOAP node that assumes the role of the ultimate recipient of a particular
SOAP message.

The absence of a env:role attribute in the aThirdBlock header block means that this header element is targeted
at the SOAP node that assumes the "ultimateReceiver" role.

Note that the env:Body element does not have a env:role attribute. The body element is always targeted at the SOAP
node that assumes the "ultimateReceiver" role. In that sense, the body element is just like a header block targeted
at the ultimate receiver, but it has been distinguished to allow for SOAP nodes (typically SOAP intermediaries) to skip
over it if they assume roles other than that of the ultimate receiver.

SOAP does not prescribe any structure for the env:Body element, except that it recommends that any sub-elements
be XML namespace qualified. Some applications, such as that in Example 1, may choose to organize the sub-elements
of env:Body in blocks, but this is not of concern to the SOAP processing model.

THe other distinguished role for the env:Body element, as the container where information on SOAP-specific faults,
i.e, failure to process elements of a SOAP message, is placed has been described previously in section 2.3

If a header element has the standardized env:role attribute with value "none", it means that no SOAP node should
process the contents, although a node may need to examine it if the content are data referenced by another header
element that is targeted at the particular SOAP node.

If the env:role attribute has an empty value, i.e, env:role="", it means that the relative URI identifying 
the role is resolved to the base URI for the SOAP message in question. SOAP Version 1.2 does not define a 
base URI for a SOAP message, btu defers to the mechanisms defined in XMLBase for deriving the base URI,
which can be used to make any relative URIs absolute.

One such mechanism is for protocol binding to establish a base URI, possibly by reference to the
encapsulating protocol in which the SOAP message is embedded for transport (In fact, when SOAP messages are transported
using HTTP, SOAP Part 2 section 7.1.2 defines teh base URI as the Request-URI of the HTTP request, or the value
of the HTTP Content-Location header.)

The following table summarizes the applicable standardized roles that may be assumed at various SOAP nodes.
("Yes" and "No" means that the corresponding node does or does not, respectively, play the named role)

Role 				Absent 			"none" 			"next" 			"ultimateReceiver"

Node 			

initial sender 		N/A 			N/A 			N/A 			N/A

intermediary   		no 				no 				yes 			no

ultimate receiver 	yes 			no 				yes 			yes

3.2 The "mustUnderstand" Attribute

Example 7b augments the previous example by introducing another (optional) attribute for header
blocks, the env:mustUnderstand attribute.

Example 7b

<?xml version="1.0" ?>
	<env:Envelope xmlns:env="http://www.w3.org/2003/05/soap-envelope">
		<env:Header>
			<p:oneBlock xmlns:p="http://example.com"
					env:role="http://example.com/Log"
						env:mustUnderstand="true">
			...
			...
			</p:oneBlock>
			<q:anotherBlock xmlns:q="http://example.com"
				env:role="http://www.w3.org/2003/05/soap-envelope/role/next">
			...
			...
			</q:anotherBlock>
			<r:aThirdBlock xmlns:r="http://example.com">
			...
			...
			</r:aThirdBlock>
		</env:Header>
		<env:Body>
			...
			...
		</env:Body>
	</env:Envelope>

SOAP message showing a variety of header blocks, one of whch is mandatory for processing

After a SOAP node has correctly identified the header blocks (and possibly the body) targeted at itself
using the env:role attribute, the additional attribute, env:mustUnderstand, in the header elements determines
further processing actions that have to be taken.

In order to ensure that SOAP nodes do not ignore header block which are important to the overall purpose
of the application, SOAP header blocks also provide for the additional optional attribute, env:mustUnderstand,
which, if "true", means that the targeted SOAP node MUST process the block according to the specification of that block.

Such a block is colloquially referred to as a mandatory header block. In fact, processing of the SOAP message must
not even start until the node has identified all the mandatory header blocks targeted at itself, and "understood" them.

Understanding a header means that the node must be prepared to do whatever is described in the specification
of that block. (Keep in mind that the specifications of header blocks are not a part of the SOAP specifications).

In Example 7b, the header block oneBlock is marked with a env:mustUnderstand value set to "true", which means that
it is mandatory to process this block if the SOAP node plays the role identified by "http://example.com/Log". The other
two header blocks are not so marked, which means that SOAP node at which these blocks are targeted need not process them.
(presumably the specifications for these blocks allow for this)

A env:mustUnderstand value of "true" means that the SOAP node must process the header with the semantics described
in that header's specification, or else generate a SOAP fault. Processing the header appropiately may include
removing the header from any generated SOAP message, reinserting the header with the same or altered value, or inserting
a new header. The inability to process a mandatory header requires that all further processing of the SOAP message 
cease, and a SOAP fault be generated. The message is not forwarded any further.

The env:Body element has no env:mustUnderstand attribute but it MUST be processed by the ultimate recipient.
in Example 7b, the ultimate recipient of the message - the SOAP node which plays the "ultimateReceiver" role
- must process the env:Body and may process the header block aThirdBlock.

It may also process the header block anotherBlock, as it is targeted at it (in the role of "next"), but it 
is not mandatory to do so if the specifications for processing the blocks do not demand it. (If the specification
for anotherBlock demanded that it must be processed at the next recipient, it would have required that it be marked
with a env:mustUnderstand="true")

The role(s) a SOAP node plays when processing a SOAP message can be determined by many factors. The role could
be known as a priori, or set by some out-of-band means, or a node can inspect all parts of a received message
to determine which roles will assume before processing the message.

An interesting case arises when a SOAP node, during the course of processing a message, decides that there 
are additional roles that it needs to adopt. No matter when this determination is made, externally it must
appear as though the processing model has been adhered to.

That is, it must appear as though the role had been known from the start of the processing of the message.
In particular, the external appearance must be that the env:mustUnderstand checking of any headers with
those additional roles assumed was performed before any processing began. Also, if a SOAP node assumes
such additional roles, it must ensure that it is prepared to do everything that the specificatios
for those roles require.

The following table summarizes how the processing actions for a header block are qualified by the env:mustUnderstand
attribute with respect to a node that has been appropiately targeted (via the env:role attribute)

Node 			Intermediary 			Ultimate Receiver

mustUnderstand

"true" 			must process 			Must process

"false" 		may process 			may process

absent 			may process 			may process

As a result of processing a SOAP message, a SOAP node may generate a single SOAP fault if it fails to process
a message, or, depending on the application, generate additional SOAP messages for consumption at other
SOAP nodes.

SOAP Part 1 section 5.4 describes the structure of the fault message while the SOAP processing model
defines the conditions under which it is generated. As illustrated previously in section 2.3, a SOAP fault
is a SOAP message with a standardized env:Body sub-element named env:Fault.

SOAP makes a distinction between generating a fault and ensuring that the fault is returned to the originator
of the message or to another appropiate node which can benefit from this information. However, whether a generated
fault can be propagated appropiately depends on the underlying protocol binding chosen for the SOAP message 
exchange.

The specification does not define what happens if faults are generated during the propagation of one-way messages.
The only normative underlying protocol binding, which is the SOAP HTTP binding, offers the HTTP response as a 
means for reporting a fault in the incoming SOAP message. (See section 4 for more details on SOAP protocol bindings)

3.3 The "relay" Attribute

SOAP Version 1.2 defines another optional attribute for header blocks, env:relay of type xs:boolean, which indicates
if a header block targeted at a SOAP intermediary must be relayed if it is NOT processed.

Note that if a header block is processed, the SOAP processing rules (see SOAP Part 1 section 2.7.2) requires that
it be removed from the outbound message. (It may, however, be reinserted, either unchanged or with its contents altered,
if the processing of other header blocks determines that the header block be retained in the forwarded message.)

The default behavior for an unprocessed header block targeted at a role played by a SOAP intermediary is that it must
be removed before the message is relayed.

The reason for this choice of default is to lean on the side of safety by ensuring that a SOAP intermediary make
no assumptions about the survivability past itself of a header block targeted at a role it assumes, and representing
some value-added feature, particularly if it chooses not to process the header block, very likely because it does 
not "understand" it. 

That is because certain header blocks represent hop-by-hop features, and it may not make
sense to unknowingly propagate it end-to-end. As an intermediary may not be in a position to make this determination,
it was thought that it would be safer if unprocessed header blocks were removed before the message was relayed.

However, there are instances when an application designer would like to introduce a new feature, manifested through
a SOAP header block, targeted at any capable intermediary which might be encountered in teh SOAP message path.
Such a header block would be available to those intermediaries that "understood" it, but ignored and relayed onwards
by those that did not.

Being a new feature, the processing software for this header block may be implemented, at least initially,
in some but not all SOAP nodes. Marking such a header block with env:mustUnderstand="false" is obviously
needed, so that intermediaries that have not implemented the feature do not generate a fault.

To circumvent the default rule of the processing model, marking a header block with the additional attribute
env:relay with the value "true" allows the intermediary to forward the header block targeted at itself
in the even that it chooses not to process it.

Targeting the header block at the role "next" together with the env:relay attribute set to "true" can
always serve to ensure that each intermediary has a chance to examine the header, because one of the
anticipated uses of the "next" role is with header blocks that carry information that are expected
to persist along a SOAP message path.

Of course, the application designer can always define a custom role that allows targetting at specific
intermediaries that assume this role. Therefore, there is no restriction on the use of the env:relay
attribute with any role except of course the roles of "none" and "ultimateReceiver", for which it is
meaningless

Example 7c shows the use of env:relay attribute.

Example 7c

<?xml version="1.0" ?>
	<env:Envelope xmlns:env="http://www.w3.org/2003/05/soap-envelope">
		<env:Header>
			<p:oneBlock xmlns:p="http://example.com"
					env:role="http://example.com/Log"
						env:mustUnderstand="true">
			...
			...
			</p:oneBlock>
			<q:anotherBlock xmlns:q="http://example.com"
				env:role="http://www.w3.org/2003/05/soap-envelope/role/next"
				env:relay="true">
			...
			...
			</q:anotherBlock>
			<r:aThirdBlock xmlns:r="http://example.com">
			...
			...
			</r:aThirdBlock>
		</env:Header>
		<env:Body>
			...
			...
		</env:Body>
	</env:Envelope>

SOAP message showing a variety of header blocks, one of which must be relayed
if unprocessed.

The header block q:anotherBlock, targeted at the "next" node in the message path, has the additional attribute
env:relay="true". A SOAP node receiving this message may process this header block if it "understands" it,
but if it does so the processing rules require that this header block be removed before forwarding.

However, if the SOAP node chooses to ignore this header block, which it can because it is not mandatory to
process it, as indicated by the absence of the env:mustUnderstand attribute, then it must forward it.

Processing the header block p:oneBlock is mandatory and the SOAP processing rules requires that it
not be relayed, unless the processing of some other header block requires that it be present in the 
outbound message. The header block r:aThirdBlock does not have an env:relay attribute, which is equivalent
to having it with the value of env:relay = "false".

Hence, this header is not forwarded if it is not processed.

SOAP 1.2 Part 1 Table 3 summarizes the conditions which determine when a SOAP intermediary assuming a 
given role is allowed to forward unprocessed header blocks.

4. Using Various Protocol Bindings

SOAP messages may be exchanged using a variety of "underlying" protocols, including other application
layer protocols. The specification of how SOAP messages may be passed from one SOAP node to another using
an underlying protocol is called a SOAP binding.

SOAP Part 1 defines a SOAP message in the form of an XML Infoset, i.e, in terms of element and attribute information
items of an abstract "document" called the env:Envelope (see SOAP Part 1, section 5). Any SOAP env:Envelope infoset
representation will be made concrete through a protocol binding, whose task, among other things, is to provide
a serialized representation of the infoset that can be conveyed to the next SOAP node in the message path
in a manner such that the original infoset can be reconstructed without loss of information.

In typical examples of SOAP messages, and certainly in all the examples in this primer, the serialization
shown is that of a well-formed [XML 1.0] document. However, there may be other protocol bindings - for example
a protocol binding between two SOAP nodes over a limited bandwidth interface - where an alternative, compressed
serialization of the same infoset may be chosen.

Another binding, chosen for a different purpose, may provide a serialization which is an encrypted structure
representing the same infoset. The [MTOM] specification provides a SOAP binding to HTTP that allows for an
optimized serialization of the SOAP message infoset under certain circumstances. A more detailed discusson
of this binding is deferred to Section 5.3

In addition to providing a concrete realization of a SOAP infoset between adjacent SOAP nodes along a SOAP
message path, a protocol binding provides the mechanisms to support features that are needed by a SOAP
application. A feature is a specfication of a certain functionality required in the interactions between
two SOAP nodes, which may be provided by a binding.

A feature description is identified by a URI, so that all applications referencing it are assured of the
same semantics. Features are qualified by properties, which provide additional information that help
in the implementation of the feature. For example, a typical usage scenario might require many concurrent
request-response exchanges between adjacent SOAP nodes, in which case the feature that is required is the
ability to correlate a request with a response. 

The abstract property associated with this feature is a "correlation ID". Other examples includes 
"an encrypted channel" feature, or a "reliable delivery channel" feature, or a particular SOAP message
exchange pattern feature. In particular, the MTOM specification defines an Abstract SOAP Transmission
Optimization feature, which may be used by SOAP bindings to optimize the serialization of selected
element information items of a SOAP message infoset. (See section 5.3.1 for details)

A SOAP binding specification (see SOAP Part 1 section 4) describes, among other things, which (if any)
features it provides. Some features may be provided natively by the underlying protocol. If the feature
is not available through the binding, it may be implemented within the SOAP envelope, using SOAP header
blocks. The specification of a feature implemented using SOAP header blocks is called a SOAP module.

For example, if SOAP message exchanges were being transported directly over a datagram protocol like
UDP, obviously the message correlation feature mentioned earlier would have to be provided by
other means, either directly by the application or more likely as a part of the SOAP infosets being
exchanged.

In the latter case, the message correlation feature has a binding-specific expression within the
SOAP envelope, i.e, as a SOAP header block, defined in a "Request-Response Correlation" module
identified by a URI.

However, if the SOAP infosets were being exchanged using an underlying protocol that was itself
request/response, the application could implicitly "inherit" this feature provided by the binding,
and no further support need to be provided at the application or the SOAP level.

(In fact, the HTTP binding for SOAP takes advantage of just this feature of HTTP). The Abstract
SOAP Transmission Optimization feature defined in MTOM is similarly implemented as a part of an
augmented SOAP HTTP binding, by serializing particular nodes of a SOAP message infoset in binary
format together with a modified SOAP Envelope, which are then carried in separate parts of a
MIME Multipart/Related RFC 2387 package (see section 5.3.2 for details)

However, a SOAP message may travel over several hops between a sender and the ultimate receiver,
where each hop may be a different protocol binding. In other words, a feature (e.g, message correlation,
reliability etc.) that is supported by the protocol binding in one hop may not be supported by another
along the message path.

SOAP itself does not provide any mechanism for hiding the differences in features provided by different
underlying protocols. However, any end-to-end or multi-hop feature that is required by a particular
application, but which may not be available in the underlying infrastructure along the anticipated
message path, can be compressed for by being carried as a part of the SOAP message infoset,
i.e, as a SOAP header block specified in some module.

Thus it is apparent that there are a number of issues that have to be tackled by an application designer
to accomplish particular application semantics, including how ot take advantage of the native features
of underlying protocols that are available for use in the chosen environment.

SOAP Part 1 section 4.2 provides a general framework for describing how SOAP-based applications may
choose to use the features provided by an underlying protocol binding to accomplish particular
application semantics. It is intended to provide guidelines for writing interoperable protocol binding
specifications for exchanging SOAP messages.

Among other things, a binding specification must define one particular feature, namely the message exchange
pattern(s) that it supports. SOAP Part 2 defines two such message exchange patterns, namely a SOAP 
Request-Response message exchange pattern where one SOAP message is exchanged in each direction between
two adjacent SOAP nodes, and a SOAP Response message exchange pattern which consists of a non-SOAP
message acting as a request followed by a SOAP message included as a part of the response.

SOAP Part 2 also offers the application designer a general feature called the SOAP Web Method feature
that allows applications full control over the choice of the so-called "Web method" - one of 
GET, POST, PUT, DELETE whose semantics are as defined in the HTTP 1.1 specifications -
that may be used over the binding. 

This feature is defined to ensure that applications using SOAP can do so in a manner 
which is compatible with the architechtural principles of the World Wide Web.

(Very briefly, the simplicity and scalability of the Web is largely due to the fact that there
are a few "generic" methods (GET, POST, PUT, DELETE) which can be used to interact with any
resource made available on the Web via a URI.) The SOAP Web Method feature is supported 
by the SOAP HTTP binding, although, in principle, it is available to all SOAP underlying
protocol bindings.

SOAP Part 2 section 7 specifies one standardized protocol binding using the binding
framework of SOAP Part 1, namely how SOAP is used in conjunction with the HTTP as
the underlying protocol. SOAP Version 1.2 restricts itself to the definition of a
HTTP binding allowing only the use of the POST method in conjunction with the Request-Response
message exchange pattern and the GET method with the SOAP Response message exchange pattern.

Other specifications in future could define SOAP bindings to HTTP or other transports 
that make use of the other Web methods (i.e, PUT, DELETE)

The next sections show examples of two underlying protocol bindings for SOAP, namely those
to HTTP 1.1 and email. It should be emphasized again that the only normative binding for SOAP 1.2
messages is to HTTP 1.1. The examples in section 4.2 showing email as a transport mechanism for
SOAP is simply meant to suggest that other choices for the transfer of SOAP messages are possible,
although not standardized at this time.

A W3C Note SOAP Email Binding offers an application of the SOAP protocol binding framework of
SOAP Part 1 by describing an experimental binding of SOAP to email transport, specifically RFC 2822-based
message transport. The discussion of MTOM and its concrete realization in an HTTP binding 
is provided in section 5.3

4.1 The SOAP HTTP Binding

HTTP has a well-known connection model and a message exchange pattern. The client identifies
the server via a URI, connects to it using the underlying TCP/IP network, issues a HTTP request
message and receives a HTTP response message over the same TCP connection. HTTP implicitly correlates
its request message with its response message; therefore, an application using this binding can choose
to infer a correlation between a SOAP message sent in the body of a HTTP request message and a 
SOAP message returned in the HTTP response.

Similarly, HTTP identifies the server endpoint via a URI, the Request-URI, which can also serve
as the identification of a SOAP node at the server.

HTTP allows for multiple intermediaries between the initial client and the origin server identified
by the Request-URI, in which case the request/response model is a series of such pairs. Note, however,
that HTTP intermediaries are distinct from SOAP intermediaries.

The HTTP binding in [SOAP Part 2] makes use of the SOAP Web Method feature to allow applications to choose
the so-called Web method - restricting it to one of GET or POST - to use over the HTTP message exchange.
In addition, it makes use of two message exchange patterns that offer applications two ways of exchanging
SOAP messages via HTTP: 

1) the use of the HTTP POST method for conveying SOAP messages in the bodies
of HTTP request and response messages

and

2) the use of the HTTP GET method in a HTTP request to return a SOAP message in the body of a 
HTTP response. The first usage pattern is the HTTP-specific instantiation of a binding feature
called the SOAP request-response-message exchange pattern, while the second uses a feature called
the SOAP response message exchange pattern.

The purpose of providing these two types of usages is to accommodate the two interaction paradigms
which are well established on the World Wide Web. The first type of interaction allows for the use 
of data within the body of a HTTP POST to create or modify the state of a resource identified by the
URI to which the HTTP request is destined.

The second type of interaction pattern offers the ability to use a HTTP GET request to obtain a
representation of a resource without altering its state in any way. In the first case, the SOAP-specific
aspect of concern is that the body of the HTTP POST request is a SOAP message which has to be processed
(per the SOAP processing model) as a part of the application-specific processing required to conform
to the POST semantics.

In the second case, the typical usage that is forseen is the case where the representation of the resource
that is being requested is returned not as a HTML, or indeed a generic XML document, but as a SOAP message.

That is, the HTTP content type header of the response message identifies as being of media type "application/soap+xml"
[RFC 3902]. Presumably, there will be publishers of resources on the Web who determine that such resources
are best retrieved and made available in the form of SOAP messages.

Note, however, that resources, can, in general, be made available in multiple representations, and the desired
or preferred representation is indicated by the requesting application using the HTTP Accept header.

One further aspect of the SOAP HTTP binding is the question of how an application determines which of these
two types of message exchange patterns to use. [SOAP Part2] offers guidance on circumstances when applications
may use one of the two specified message exchange patterns. (It is guidance - albeit a strong one - as it 
phrased in the form of a "SHOULD" in the specifications rather than an absolute requirement identified by
the word, "MUST", where these words are inerperted as defined in the IETF [RFC 2119].)

The SOAP response message exchange pattern with the HTTP GET method is used when an application is assured
that the message exchange is for the purposes of information retrieval, where the information resource is
"untouched" as a result of the interaction. 

Such interactions are referred to as safe and idempotent in
the HTTP specification. As the HTTP SOAP GET usage does not allow for a SOAP message in teh request,
applications that need features in the outbound interaction that can only be supported by a binding-specific
expression within the SOAP infoset (i.e, as SOAP header blocks) obviously cannot make use of this message
exchange pattern. Note that the HTTP POST binding is available for use in all cases.

The following subsections provide examples of the use of these two message exchange patterns defined
for the HTTP binding.

4.1.1 SOAP HTTP GET Usage

Using the HTTP binding with the SOAP Response message exchange pattern is restricted to the HTTP GET method.
This means that teh response to a HTTP GET request from a requesting SOAP node is a SOAP message in the 
HTTP response.

Example 8a shows a HTTP GET directed by the traveller's application (in the continuing travel reservation scenario)
at the URI http://travelcompany.example.org/reservations?code=FT35ZBQ> where the traveler's itinerary may be
viewed. (How this URL was made available can be seen in Example 5a)

Example 8a

GET /travelcompany.example.org/reservations?code=FT35ZBQ 	HTTP/1.1
Host: travelcompany.example.org
Accept: text/html;q=0.5, application/soap+xml

HTTP GET Request

The HTTP Accept header is used to indicate the preferred representation of the resource being requested,
which in this example is an "application/soap+xml" media type for consumption by a machine client,
rather than the "text/html" media type for rendition by a browser client for consumption by a human.

Example 8b shows the HTTP response to the GET in Example 8a. The body of the HTTP response contains 
a SOAP message showing the travel details. A discussion of the contents of the SOAP message is
postponed until section 5.2, as it is not relevant, at this point, to understanding the HTTP
GET binding usage.

Example 8b

HTTP/1.1 	200 OK
Content-Type: application/soap+xml; charset="utf-8"
Content-Length: nnnn

<?xml version='1.0' ?>
<env:Envelope xmlns:env="http://www.w3.org/2003/05/soap-envelope">
	<env:Header>
		<m:reservation xmlns:m="http://travelcompany.example.org/reservation"
			env:role="http://www.w3.org/2003/05/soap-envelope/role/next"
				env:mustUnderstand="true">
			<m:reference>uuid:093a2da1-q345-739r-ba5d-pqff98fe8j7d</m:reference>
			<m:dateAndTime>2001-11-30T16:25:00.000-05:00</m:dateAndTime>
		</m:reservation>
	</env:Header>
	<env:Body>
		<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
					xmlns:x="http://travelcompany.example.org/vocab#"
			env:encodingStyle="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
			<x:ReservationRequest
		rdf:about="http://travelcompany.example.org/reservations?code=FT35ZBQ">
				<x:passenger>Some Guy</x:passenger>
				<x:outbound>
					<x:TravelRequest>
						<x:to>LAX</x:to>
						<x:from>LGA</x:from>
						<x:date>2001-12-14</x:date>
					</x:TravelRequest>
				</x:outbound>
				<x:return>
					<x:TravelRequest>
						<x:to>JFK</x:to>
						<x:from>LAX</x:from>
						<x:date>2001-12-20</x:date>
					</x:TravelRequest>
				</x:return>
			</x:ReservationRequest>
		</rdf:RDF>
	</env:Body>
</env:Envelope>

SOAP message returned as a response to the HTTP GET in Example 8a

Note that the reservation details could well have been returned as an (X)HTML document, but this
example wanted to show a case where the reservation application is returning the state of the resource
(the reservation) in a data-centric media form (a SOAP message) which can be machine processed,
instead of (X)HTML which would be processed by a browser. Indeed, in the most likely anticipated uses of 
SOAP, the consuming application will not be a browser.

Also, as shown in the example, the use of SOAP in the HTTP response body offers the possibility of expressing 
some application-specific feature through the use of SOAP headers. By using SOAP, the application is provided
with a useful and consistent framework and processing model for expressing such features.

4.1.2 SOAP HTTP POST Usage

Using the HTTP binding with the SOAP Request-Response message exchange pattern is restricted to the HTTP POST
method. Note that the use of this message exchange pattern in the SOAP HTTP binding is available to all
applications, whether they involve the exchange of general XML data or RPCs (as in the following examples)
encapsulated in SOAP messages.

Examples 9 and 10 show an example of a HTTP binding using the SOAP Request-Response message exchange pattern,
using the same scenario as that for Example 4 and Example 5a, respectively, namely conveying an RPC and its
return in the body of a SOAP message. The examples and discussion in this section only concentrate on the
HTTP headers and their role.

Example 9

POST /Reservations HTTP/1.1
Host: travelcompany.example.org
Content-Type: application/soap+xml; charset="utf-8"
Content-Length: nnnn

<?xml version='1.0' ?>
<env:Envelope xmlns:env="http://www.w3.org/2003/05/soap-envelope">
	<env:Header>
		<t:transaction
				xmlns:t="http://thirdparty.example.org/transaction"
				env:encodingStyle="http://example.com/encoding"
				env:mustUnderstand="true">5</t:transaction>
	</env:Header>
	<env:Body>
		<m:chargeReservation
			env:encodingStyle="http://www.w3.org/2003/05/soap-encoding"
				xmlns:m="http://travelcompany.example.org/">
		<m:reservation xmlns:m="http://travelcompany.example.org/reservation">
			<m:code>FT35ZBQ</m:code>
		</m:reservation>
			<o:creditCard xmlns:o="http://mycompany.example.com/financial">
				<n:name xmlns:n="http://mycompany.example.com/employees">
					stuff
				</n:name>
				<o:number>stuff</o:number>
				<o:expiration>2005-02</o:expiration>
			</o:creditCard>
		</m:chargeReservation>
	</env:Body>
</env:Envelope>

RPC in Example 4 carried in an HTTP POST Request

Example 9 shows an RPC request directed at the travel service application. The SOAP message is sent
in the body of a HTTP POST method directed at the URI identifying the "Reservations" resource on the
server travelcompany.example.org.

When using HTTP, the Request-URI indicates the resource to which the invocation is "posted".
Other than requiring that it be a valid URI, SOAP places no formal restriction on the form of the request
URI (see [RFC 3986]) for more information on URIS.

However, one of the principles of the Web architechtures is that all important resources be identified by URIs.
This implies that most well-architechted SOAP services will be embodied as a large number of resources, each 
with its own URI. Indeed, many such resources are likely to be created dynamically during the operation of a service,
such as, for instance, the specific travel reservation shown in the example.

So, a well-architechted travel service application should have different URIs for each reservation, and SOAP requests
to retrieve or manipulate those reservations will be directed at their URIs, and not a single monolithic "Reservations"
URI, as shown in Example 9.

Example 13 in section 4.1.3 shows the preferred way to address resources such as a particular travel reservation.
Therefore, we defer until section 4.1.3 further discussion of Web architechture compatible SOAP/HTTP usage.

When placing SOAP messages in HTTP bodies, the HTTP Content-type header must be chosen as "application/soap+xml"
[RFC 3902]. (The optional charset param, which can take the value of "utf-8" or "utf-16", is shown in this example,
but if it is absent the character set rules for freestanding [XML 1.0] apply to the body of the HTTP request.)

Example 10 shows the RFC return (with details omitted) sent by the travel service application in the corresponding
HTTP response to the request from Example 5a. SOAP, using HTTP transport, follows the semantics of the HTTP status
codes for communicating status information in HTTP. For example, the 2xx series of HTTP status codes indicate that
the client's request (including the SOAP component) was successfully received, understood and accepted etc.

Example 10

HTTP/1.1 200 OK
Content-Type: application/soap+xml; charset="utf-8"
Content-Length: nnnn

<?xml version='1.0' ?>
<env:Envelope xmlns:env="http://www.w3.org/2003/05/soap-envelope" >
	<env:Header>
		...
		...
	</env:Header>
	<env:Body>
		...
		...
	</env:Body>
</env:Envelope>

RPC return in Example 5a embedded in a HTTP Response indicating a successful completion

If an error occurs processing the request, the HTTP binding specification requires that a HTTP 500
"Internal Server Error" be used with an embedded SOAP message containing a SOAP fault indicating
the server-side processing error.

Example 11 is the same SOAP fault message as Example 6a, but this time with the HTTP headers added.

Example 11

HTTP/1.1 500 Internal Server Error
Content-Type: application/soap+xml; charset="utf-8"
Content-Length: nnnn

<?xml version='1.0' ?>
<env:Envelope xmlns:env="http://www.w3.org/2003/05/soap-envelope">
	<env:Body>
		<env:Fault>
			<env:Code>
				<env:Value>env:Sender</env:Value>
				<env:Subcode>
					<env:Value>rpc:BadArguments</env:Value>
				</env:Subcode>
			</env:Code>
			<env:Reason>
				<env:Text xml:lang="en-US">Processing error</env:Text>
				<env:Text xml:lang="cs">Chyba zrapcování</env:Text>
			</env:Reason>
			<env:Detail>
				<e:myFaultDetails
					xmlns:e="http://travelcompany.example.org/faults">
					<e:message>Name does not match card number</e:message>
					<e:errorcode>999</e:errorcode>
				</e:myFaultDetails>
			</env:Detail>
		</env:Fault>
	</env:Body>
</env:Envelope>

Sample SOAP message in a HTTP Response indicating failure to handle the SOAP Body in Example 4

SOAP Part 2 Table 16 provides detailed behavior for handling the various possible HTTP response codes,
i.e, the 2xx (successful), 3xx (redirection), 4xx (client error) and 5xx (server error).

4.1.3 Web Architechture Compatible SOAP Usage

One of the most central concepts of the World Wide Web is that of a URI as a resource identifier.
SOAP services that use the HTTP binding and wish to interoperate with other Web software should
use URIs to address all important resources in their service.

For example, a very important - indeed predominant - use of the World Wide Web is pure information 
retrieval, where the representation of an available resource, identified by a URI, is fetched using
a HTTP GET request without affecting the resource in any way. (This is called a safe and idempotent method
in HTTP terminology). The key point is that the publisher of a resource makes available its URI, which 
consumers may "GET".

There are many instances when SOAP messages are designed for uses which are purely for information retrieval,
such as when the state of some resource (or object, in programming terms) is requested, as opposed to uses
that perform resource manipulation. In such instances, the use of a SOAP body to carry the request for the
state, with an element of the body representing the object in question, is seen as counter to the spirit
of the Web because the resource is not identified by the Request-URI of the HTTP GET. 

(In some SOAP/RPC implementations,
the HTTP Request-URI is often not the identifier of the resource itself but some intermediate entity which has to
evaluate the SOAP message to identify the resource).

To highlight the changes needed, Example 12a shows the way that is not recommended for doing safe information
retrieval on the Web. This is an example of an RPC carried in a SOAP message, again using the travel reservation
theme, where the request is to retrieve the itinerary for a particular reservation identified by one of the
parameters, reservationCode, of the RPC. (For purposes of this discussion, it is assumed that the application
using this RPC request does not need features which require the use of SOAP headers.)

Example 12a

POST /Reservations HTTP/1.1
Host: travelcompany.example.org
Content-Type: application/soap+xml; charset="utf-8"
Content-Length: nnnn

<?xml version='1.0' ?>
<env:Envelope xmlns:env="http://www.w3.org/2003/05/soap-envelope" >
	<env:Body>
		<m:retrieveItinerary
			env:encodingStyle="http://www.w3.org/2003/05/soap-encoding"
				xmlns:m="http://travelcompany.example.org/">
			<m:reservationCode>FT35ZBQ</m:reservationCode>
		</m:retrieveItinerary>
	</env:Body>
</env:Envelope>

This representation is discouraged in cases where the operation is "safe" retrieval (i.e, it has no side effects)

Note that the resource to be retrieved is not identified by the target URI in the HTTP request but has to be obtained by looking within
the SOAP envelope. Thus, it is not possible, as would be the case with other "gettable" URIs on the Web, to make this available via
HTTP alone to consumers on the World Wide Web.

SOAP Part 2 section 4.1 offers recommendations on how RPCs that constitute safe and idempotent information retrievals may be defined
in a Web-friendly manner. It does so by distinguishing aspects of the method and specific parameters in an RPC definition that serve
to identify resources from those that serve other purposes.

In Example 12a, the resource to be retrieved is identified by two things: the first is that it is an itinerary (part of the method
name), and the second is the reference to a specific instance (a parameter to the method). In such a case, the recommendation
is that these resource-identifying parts be made available in the HTTP Request-URI identifying the resource, as for
example as follows:

http://travelcompany.example.org/reservations/itinerary?reservationCode=FT35ZBQ

Furthermore, when an RPC definition is such that all parts of its method description can be described as resource-identifying,
the entire target of the RPC may be identified by a URI. In this case, if the supplier of the resource can also assure that a
retrieval request is safe, then SOAP Version 1.2 recommends that the choice of the Web method property of GET and the use of the
SOAP Response message exchange pattern be used as described in section 4.1.1

This will ensure that the SOAP RPC is performed in a Web architechture compatible manner. Example 12b shows the preferred way
for a SOAP node to request the safe retrieval of a resource.

Example 12b

GET /Reservations/itinerary?reservationCode=FT35ZBQ HTTP/1.1
Host: travelcompany.example.org
Accept: application/soap+xml

The Web architechture compatible alternative to representing the RFC
in Example 12a

It should be noted that SOAP Version 1.2 does not specify any algorithm on how to compute a URI from the definition
of an RPC which has been determined to represent pure information retrieval.

Note, however, that if the application requires the use of features that can only have a binding-specific expression within
the SOAP infoset, i.e, using SOAP header blocks, then the application must choose HTTP POST method with a SOAP message
in the request body.

It also requires the use of the SOAP Request-Response message exchange pattern implemented via a HTTP POST if the RPC
description includes data (parameters) which are not resource-identifying. Even in this case, the HTTP POST with a
SOAP message can be represented in a Web-friendly manner.

As with the use of the GET, SOAP Part 2 recommends for the general case that any part of the SOAP message that serves
to identify the resource to which the request is POSTed be identified in the HTTP Request-URI. The same parameters, may,
of course, be retained in the SOAP env:Body element. (The params must be retained in the Body in the case of a SOAP-based
RPC as these are related to the procedure/method description expected by the receiving application.)

Example 13 is the same as that in Example 9, except that the HTTP Request-URI has been modified to include the reservation
code, which serves to identify the resource (the reservation in question, which is being confirmed and paid for).

Example 13

POST /Reservations?code=FT35ZBQ HTTP/1.1
Host: travelcompany.example.org
Content-Type: application/soap+xml; charset="utf-8"
Content-Length: nnnn

<?xml version='1.0' ?>
<env:Envelope xmlns:env="http://www.w3.org/2003/05/soap-envelope" >
	<env:Header>
		<t:transaction
				xmlns:t="http://thirdparty.example.org/transaction"
				env:encodingStyle="http://example.com/encoding"
				env:mustUnderstand="true" >5</t:transaction>
	</env:Header>
	<env:Body>
		<m:chargeReservation
			env:encodingStyle="http://www.w3.org/2003/05/soap-encoding"
				xmlns:m="http://travelcompany.example.org/reservation">
		<m:reservation xmlns:m="http://travelcompany.example.org/reservation">
			<m:code>FT35ZBQ</m:code>
		</m:reservation>
		<o:creditCard xmlns:o="http://mycompany.example.com/financial">
			<n:name xmlns:n="http://mycompany.example.com/employees">
				guy
			</n:name>
			<o:number>123456789etc</o:number>
			<o:expiration>2005-02</o:expiration>
		</o:creditCard>
	</m:chargeReservation>
</env:Body>
</env:Envelope>

Error of indention as per usual, but cba to fix.

RPC from Example 4 carried in an HTTP POST Request in a Web-friendly manner

In example 13, the resource to be manipulated is identified by two things: The first is that it is a 
reservation (part of the method name), and the second is the specific instance of a reservation
(which is the value of the parameter code to the method). 

The remainder of the parameters in the RPC such as the creditCard number are not resource-identifying,
but are ancillary data to be processed by the resource.

Ancillar means: 

adjective

1. providing necessary support to the primary activities or operation of an organization, system, etc.

noun

1. A person whose work provides necessary support to the primary activities of an organization, system, etc.

It is the recommendation of SOAP Part 2 that resources that may be accessed by SOAP-based RPCs should, where practical,
place any such resource-identifying information as part of the URI identifying the target of the RPC. It should be noted,
however, that SOAP Part 2 does not offer any algorithm to do so. Such algorithms may be developed in future. Note, however,
that all the resource-identifying elements have been retained as in Example 9 in their encoded form in the SOAP env:Body element.

In other words, as seen from the above examples, the recommendation in the SOAP specifications is to use URIs in a Web-architechture
compatible way - that is, as resource identifiers - whether or not it is GET or POST that is used.

4.2 SOAP Over Email

Application developers can use the Internet email infrastructure to move SOAP messages as either email text or attachments.
The examples shown below offer one way to carry SOAP messages, and should not be construed as being the standard way of doing so.

The SOAP Version 1.2 specifications do not specify such a binding. However, there is a non-normative W3C Note SOAP Email Binding
describing an email binding for SOAP, its main purpose being to demonstrate the application of the general SOAP Protocol Binding
Framework described in SOAP Part 1

Example 14 shows the travel reservation request message from Example 1 carried as an email message between a sending and receiving
mail user agent. It is implied that the receiver node has SOAP capabilities, to which the body of the email is delivered for processing.
(It is assumed that the sending node also has SOAP capabilities so as to be able to process any SOAP faults received in response,
or to correlate any SOAP messages received in response to this one.)

Example 14

From: a.oyvind@mycompany.example.com
To: reservation@travelcompany.example.org
Subject: Travel to LA
Date: Thu, 29 Nov 2001 13:20:00 EST
Message-Id: <EE(stuff generally)@mycompany.example.com>
Content-Type: application/soap+xml

<?xml version='1.0' ?>
<env:Envelope xmlns:env="http://www.w3.org/2003/05/soap-envelope">
	<env:Header>
		<m:reservation xmlns:m="http://travelcompany.example.org/reservation"
			env:role="http://www.w3.org/2003/05/soap-envelope/role/next"
				env:mustUnderstand="true">
			<m:reference>uuid:093a2da1-q345-739r-ba5d-pqff98fe8j7d</m:reference>
			<m:dateAndTime>2001-11-29T13:20:00.000-05:00</m:dateAndTime>
		</m:reservation>
		<n:passenger xmlns:n="http://mycompany.example.com/employees"
			env:role="http://www.w3.org/2003/05/soap-envelope/role/next"
				env:mustUnderstand="true">
			<n:name>Some guy</n:name>
		</n:passenger>
	</env:Header>
	<env:Body>
		<p:itinerary
			xmlns:p="http://travelcompany.example.org/reservation/travel">
			<p:departure>
				<p:departing>New York</p:departing>
				<p:arriving>Los Angeles</p:arriving>
				<p:departureDate>2001-12-14</p:departureDate>
				<p:departureTime>late afternoon</p:departureTime>
				<p:seatPreference>aisle</p:seatPreference>
			</p:departure>
			<p:return>
				<p:departing>Los Angeles</p:departing>
				<p:arriving>New York</p:arriving>
				<p:departureDate>2001-12-20</p:departureDate>
				<p:departureTime>late afternoon</p:departureTime>
				<p:seatPreference/>
			</p:return>
		</p:itinerary>
		<q:lodging
			xmlns:q="http://travelcompany.example.org/reservation/hotels">
			<q:preference>none</q:preference>
		</q:lodging>
	</env:Body>
</env:Envelope>

SOAP message from Example 1 carried in a SMTP message

The header in Example 14 is in the standard form RFC 2822 for email messages

Although an email is a one-way message exchange, and no guarantee of delivery is provided,
email infrastructure like the Simple Mail Transport Protocol (SMTP) specification SMTP offer
a delivery notification mechanism which, in the case of SMTP, are called Delivery Status Notification
(DSN) and Message Disposition Notification (MDN).

These notifications take the form of email messages sent to the email address specified in the mail header.
Applications, as well as email end users, can use these mechanisms to provide the status of an email transmission,
but these,if delivered, are notifications at the SMTP level. The application developer must fully understand the
capabilities and limitations of these delivery notifications or risk assuming a successful data delivery when
none occurred.

SMTP delivery status messages are separate from message processing at the SOAP layer. Resulting SOAP responses
to the contained SOAP data will be returned through a new email message which may or may not have a link
to the original requesting email at the SMTP level. The use of the RFC 2822 In-reply-to: header can achive
a correlation at the SMTP leve, but does not necessarily offer a correlation at the SOAP level.

Example 15 is exactly the same scenario as described for Example 2, which shows the SOAP message (body details
omitted for brevity) sent from the travel service application to the travel reservation application
seeking clarification on some reservation details, except that it is carried as an email message.

In this example, the original email's Message-Id is carried in the additional email header In-reply-to:,
which correlates email messages at the SMTP level, but cannot provide a SOAP-specific correlation.
In this example, the application relies on the reservation header block to correlate SOAP messages.
Again, how such correlation is achieved is application-specific and is not within the scope of SOAP.

Example 15:

From: reservations@travelcompany.example.org
To: a.oyvind@mycompany.example.com
Subject: Which NY airport?
Date: Thu, 29 Nov 2001 13:35:11 EST
Message-Id: <(stuff)@travelcompany.example.org>
In-reply-to: <(different stuff)@mycompany.example.com>
Content-Type: application/soap+xml

<?xml version='1.0' ?>
<env:Envelope xmlns:env="http://www.w3.org/2003/05/soap-envelope">
	<env:Header>
		<m:reservation xmlns:m="http://travelcompany.example.org/reservation"
			env:role="http://www.w3.org/2003/05/soap-envelope/role/next"
				env:mustUnderstand="true">
			<m:reference>uuid:093a2da1-q345-739r-ba5d-pqff98fe8j7d</m:reference>
			<m:dateAndTime>2001-11-29T13:35:00.000-05:00</m:dateAndTime>
		</m:reservation>
		<n:passenger xmlns:n="http://mycompany.example.com/employees"
			env:role="http://www.w3.org/2003/05/soap-envelope/role/next"
				env:mustUnderstand="true">
			<n:name>Some guy</n:name>
		</n:passenger>
	</env:Header>
	<env:Body>
		<p:itinerary
			xmlns:p="http://travelcompany.example.org/reservation/travel">
			<p:itineraryClarifications>
				...
				...
			</p:itineraryClarifications>
		</p:itinerary>
	</env:Body>
</env:Envelope>

SOAP message from Example 2 carried in an email message with a header correlating 
it to a previous message

5. Advanced Usage Scenarios

5.1 Using SOAP Intermediaries

The travel reservation scenario used throughout the primer offers an opportunity to express 
some uses of SOAP intermediaries. Recall that the basic exchange was the exchange of a travel
reservation request between a travel reservation application and a travel service application.

SOAP does not specify how such a message path is determined and followed. That is outside the
scope of the SOAP specification. It does describe, though, how a SOAP node should behave if
it receives a SOAP message for which it is not the ultimate receiver. SOAP Version 1.2 describes
two types of intermediaries: forwarding intermediaries and active intermediaries.

A forwarding intermediary is a SOAP node which, based on the semantics of a header block in a received
SOAP message or based on the message exchange pattern in use, forwards the SOAP message to another
SOAP node. For example, processing a "routing" header block describing a message path feature in an incoming
SOAP message may dictate that the SOAP message be forwarded to another SOAP node identified by data
in that header block.

The format of the SOAP header of the outbound SOAP message, i.e, the placement of inserted or reinserted
header blocks, is determined by the overall processing at this forwarding intermediary based on the semantics
of the processed header blocks.

An active intermediary is one that does additional processing on an incoming SOAP message before forwarding the
message using criteria that are not described by incoming SOAP header blocks, or by the message exchange pattern
in use. Some example of such active intervention at a SOAP node could be, for instance, encrypting some parts of
a SOAP message and providing the information on the cipher key in a header block, or including some additional
information in a new header block in the outbound message providing a timestamp or an annotation, for example,
for interpetation by appropiately targeted nodes downstream.

One mechanism by which an active intermediary can describe the modification performed on a message is by inserting
header blocks into the outbound SOAP message. These header blocks can inform downstream SOAP nodes acting in roles
whose correct operation depends on receiving such notification.

In this case, the semantics of such inserted header blocks should also call for either the same or other header blocks
to be (re)inserted at subsequent intermediaries as necessary to ensure that hte message can be safely processed 
by nodes yet further downstream. For example, if a message with header blocks removed for encryption passes through
a second intermediary (without the original header blocks being decrypted and reconstructed), then indication that
the encryption has occurred must be retained in the second relayed message.

In the following example, a SOAP node is introduced in the message path between the travel reservation and travel
service applications, which intercepts the message shown in Example 1. An example of such a SOAP node is one of which
logs all travel requests for off-line review by a corporate travel office.

Note that hte header blocks reservation and passenger in that example are intended for the node(s) that assume the role
"next", which means that it is targeted at the next SOAP node in the message path that receives the message. The header
blocks are mandatory (the mustUnderstand attribute is set to "true"), which means that the node must have knowledge
(through an external specification of the header block's semantics) of what to do.

A logging specificaition for such header blocks might simply require that various details of the message be recorded
at every node that receives such a message, and that the message be relayed along the message path unchanged.
(Note that the specifications of the header blocks must require that the same header blocks be reinserted in the
outbound message, because otherwise, the SOAP processing model would require that they be removed).

In this case, the SOAP node acts as a forwarding intermediary.

A more complex scenario is one where the received SOAP message is amended in some way not anticipated by the initial
sender. In the following example, it is assumed that a corporate travel application at the SOAP intermediary attaches
a header block to the SOAP message from Example 1 before relaying it along its message path towards the travel service
application - the ultimate recipient. The header block contains the constraints imposed by a travel policy for this
requested trip.

The specification of such a header block might require that the ultimate recipient (and only the ultimate recipient,
as implied by the absence of the role attribute) make use of the information conveyed by it when processing 
the body of the message.

Example 16 shows an active intermediary inserting an additional header block, travelPolicy, intended for the ultimate
recipient which includes information that qualifies the application-level processing of this travel request.

Example 16

<?xml version='1.0' ?>
<env:Envelope xmlns:env="http://www.w3.org/2003/05/soap-envelope">
	<env:Header>
		<m:reservation xmlns:m="http://travelcompany.example.org/reservation"
			env:role="http://www.w3.org/2003/05/soap-envelope/role/next"
				env:mustUnderstand="true">
			<m:reference>uuid:093a2da1-q345-739r-ba5d-pqff98fe8j7d</m:reference>
			<m:dateAndTime>2001-11-29T13:20:00.000-05:00</m:dateAndTime>
		</m:reservation>
		<n:passenger xmlns:n="http://mycompany.example.com/employees"
			env:role="http://www.w3.org/2003/05/soap-envelope/role/next"
				env:mustUnderstand="true">
			<n:name>Some guy</n:name>
		</n:passenger>
		<z:travelPolicy
			xmlns:z="http://mycompany.example.com/policies"
				env:mustUnderstand="true">
			<z:class>economy</z:class>
			<z:fareBasis>non-refundable</z:fareBasis>
			<z:exceptions>none</z:exceptions>
		</z:travelPolicy>
	</env:Header>
	<env:Body>
		<p:itinerary
			xmlns:p="http://travelcompany.example.org/reservation/travel">
			<p:departure>
				<p:departing>NY</p:departing>
				<p:arriving>LA</p:arriving>
				<p:departureDate>2001-12-14</p:departureDate>
				<p:departureTime>late afternoon</p:departureTime>
				<p:seatPreference>aisle</p:seatPreference>
			</p:departure>
			<p:return>
				<p:departing>LA</p:departing>
				<p:arriving>NY</p:arriving>
				<p:departureDate>2001-12-20</p:departureDate>
				<p:departureTime>late afternoon</p:departureTime>
				<p:seatPreference>aisle</p:seatPreference>
			</p:return>
		</p:itinerary>
		<q:lodging
			xmlns:q="http://travelcompany.example.org/reservation/hotels">
			<q:preference>none</q:preference>
		</q:lodging>
	</env:Body>
</env:Envelope>

SOAP message from Example 1 for a travel reservation after an active intermediary has
inserted a mandatory header intended for the ultimate recipient of the message

5.2 Using Other Encoding Schemes

Even though SOAP Version 1.2 defines a particular encoding scheme (see SOAP Part 2 section 3), its use is optional and
the specification makes clear that other encoding schemes may be used for application-specific data within a SOAP
message. For this purpose it provides the attribute env:encodingStyle, of type xs:anyURI, to qualify header blocks,
any child elements of the SOAP env:Body, and any child elements of the env:Detail element and their descendants.

It signals a serialization scheme for the nested contents, or at least the one in place until another element is encountered
which indicates another encoding style for its nested contents. The choice of the value for the env:encodingStyle attribute
is an application-specific decision and the ability to interoperate is assumed to have been settled "out-of-band".

If this attribute is not present, then no claims are being made about the encoding being used.

The use of an alternative encoding scheme is illustrated in Example 17. Continuing with the travel reservation theme,
this example shows a SOAP message which is sent to the passenger from the travel service after the reservation
is confirmed, showing the travel details. (The same message was used in Example 8b in another context)

Example 17

<?xml version='1.0' ?>
<env:Envelope xmlns:env="http://www.w3.org/2003/05/soap-envelope">
	<env:Header>
		<m:reservation xmlns:m="http://travelcompany.example.org/reservation"
			env:role="http://www.w3.org/2003/05/soap-envelope/role/next"
				env:mustUnderstand="true">
			<m:reference>uuid:093a2da1-q345-739r-ba5d-etc.</m:reference>
			<m:dateAndTime>2001-11-30T16:25:00.000-05:00</m:dateAndTime>
		</m:reservation>
	</env:Header>
	<env:Body>
		<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
					xmlns:x="http://travelcompany.example.org/vocab#"
			env:encodingStyle="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
			<x:ReservationRequest
		rdf:about="http://travelcompany.example.org/reservations?code=FT35ZBQ">
				<x:passenger>Some guy</x:passenger>
				<x:outbound>
					<x:TravelRequest>
						<x:to>LAX</x:to>
						<x:from>LGA</x:from>
						<x:date>2001-12-14</x:date>
					</x:TravelRequest>
				</x:outbound>
				<x:return>
					<x:TravelRequest>
						<x:to>JFK</x:to>
						<x:from>LAX</x:from>
						<x:date>2001-12-20</x:date>
					</x:TravelRequest>
				</x:return>
			</x:ReservationRequest>
		</rdf:RDF>
	</env:Body>
</env:Envelope>

SOAP message showing the use of an alternative encoding for the Body element

In example 17, the body of the SOAP message contains a description of the itinerary using the encoding
of a graph of resources and their properties using the syntax of the Resource Description Framework (RDF) [RDF].
(Very briefly, as RDF syntax or usage is not subject of this primer, an RDF graph relates resources - such as the
travel reservation resource available at http://travelcompany.example.org/reservations?code=FT35ZBQ - to other resources
(or values) via properties, such as the passenger, the outbound and return date of travel. The RDF encoding for the itinerary
might have been chosen, for example, to allow the passenger's travel application to store it in a RDF-capable calendar
application, which could then be queried in complex ways.)

5.3 Optimized serialization of SOAP messages

There are many use cases where it is necessary for an application to send a large amount of binary
(i.e, non-textual) data (e.g a JPEG image, binary executable etc.) in a SOAP message. The conventional
way of conveying binary data in an XML document, such as the SOAP env:Envelope, is to transform the binary data
into a character representation of type xs:base64Binary using the Base64 content-transfer-encoding scheme defined
in RFC 2045.

The disadvantages of this approach are that there is a significant increase in message size, as well as a potentional
overhead in encoding/decoding the binary data to/from its character representation, which may create throughput
problems in case of message transmission over low bandwidth links or SOAP nodes with low processing power.

The MTOM specification provides a mechanism to support such use cases. It should be noted, though, that the specification
does not address the general problem of handling the inclusion of non-XML content in arbitrary XML documents, but
confines itself to the specific case of SOAP message transmission optimization for certain type of content.

In order to allow for independence from the underlying protocol binding, so that the optimization mechanism may be
available over a variety of transports, as well as to retain the principal SOAP binding paradigm - that the SOAP
message infoset, however serialized, be transmitted unchanged between adjacent nodes - MTOM defines an Abstract
SOAP Transmission Optimization feature, of which one implementation is provided for the particular case of HTTP-based
transmission of an optimized SOAP message in a MIME Multipart/Related [RFC 2387] package.

This makes use of the XOP format (on which more on in section 5.3.2) wich is an alternative serialization of an XML
infoset geared towards a more efficient processing and representation of Base64-encoded content.

5.3.1 The Abstract SOAP Transmission Optimization Feature

The Abstract SOAP Transmission Optimization feature is defined for certain element information item in the
SOAP message infoset which are identified as potential candidates for optimization. XML infosets identify
the structure and content of XML documents, but not the data type of the contents of elements and attributes.

One way to identify these would require schema validation of the infoset, something which is NOT a requirement
of SOAP. A more likely possibility is that the sending application already "Knows" the type  of data - a binary
stream, and perhaps also the nature of the media type that it represents - that it wishes to transmit because that
is the way in which the data is alredy available to it.

The Abstract SOAP Transmission Optimization feature assumes that the type information for those element information
items which are potentional candidates for optimization are somehow available to the sender of a SOAP message.
This feature is restricted to the optimization of character information items of any element information item
in the SOAP message infoset which is known to be of type xs:base64Binary in its canonical lexical form 
(see Schema part 2, Section 3.2.16 base64Binary) (The rationale for the restriction to the canonical form of 
xs:base64Binary is provided at the end of this section)

To motivate the need for MTOM, consider the example of a SOAP message sent in response to the request
for travel itinerary in Example12b. The travel reservation application may wish to send, in addition to
the information which can readily be represented in XML, a corporate logo, a map of the destination
and other usch info which is available in binary format (e.g image files).

If there were only a small amount of non-XML data, it may be possible to convert such data
to its base64 encoding and convey the result in a SOAP message sent in the HTTP response as shown in
Example 18 (with irrelevant content indicated by ellipses for brevity, and line breaks added for clarity)

Example 18

HTTP/1.1 200 OK
Content-Type: application/soap+xml; charset="utf-8"
Content-Length: nnnn

<?xml version='1.0' ?>
<env:Envelope xmlns:env="http://www.w3.org/2003/05/soap-envelope">
	<env:Header>
		<m:reservation xmlns:m="http://travelcompany.example.org/reservation"
				env:role="http://www.w3.org/2003/05/soap-envelope/role/next"
					env:mustUnderstand="true">
		:::
		</m:reservation>
		<n:passenger xmlns:n="http://mycompany.example.com/employees"
				env:role="http://www.w3.org/2003/05/soap-envelope/role/next"
					env:mustUnderstand="true">
		:::
		</n:passenger>
	</env:Header>
	<env:Body>
		<o:travelAgencyLogo xmlns:o="http://travelcompany.example.org/images">(long string):::(long string2)</o:travelAgencyLogo>
		<p:itinerary
			xmlns:p="http://travelcompany.example.org/reservation/travel">
			<p:departure>
				:::
			</p:departure>
			<p:return>
				:::
			</p:return>
		</p:itinerary>
		<q:lodging
			xmlns:q="http://travelcompany.example.org/reservation/hotels">
			<hotel>
				:::
			</hotel>
			<r:areaMap xmlns:r="http://travelcompany.example.org/maps">(stuff1):::(stuff2)</r:areaMap>
		</q:lodging>
	</env:Body>
</env:Envelope>

Sample SOAP message representing a travel itinerary showning non-XML data carried using
base64 encoding

Example 18 highlights two elements contained within the SOAP env:Body>, namely o:travelAgencyLogo and r:areaMap, containing the
base64 encoding of binary data corresponding to a corporate logo and an area map. While small amounts of binary data can be
placed in a SOAP message using the base64 encoding without incurring the performance overheads noted earlier,
binary data anticipated in typical use cases is typically quite large, often many orders of magnitude larger than
the XML content.

To avoid the performance penalty in such circumstances, MOTM offers an optimization that avoids the need to base64-encode
large binary content. (Note that SOAP nodes that do not implement MTOM have no choice but to carry binary data
re-encoded in its base64 char representation as in Example 18)

The Abstract SOAP Transmission Optimization feature provides the optimization by conceptually describing the 
binary data that needs to be conveyed of an element information item in the SOAP message infoset in terms of its
base64 encoding.

While this character based representation is conceptually present at the sender and receiver, MTOM works on the
optimistic assumption that the sending and receiving applications will not actually need the character-based
representation of the binary value, and therefore there will be no real processing overhead in conversion between
the binary value and its base64 encoding.

SImilarly, the implementation of this feature using the XOP format (more details are provided in section 5.3.2)
employs a MIME Multipart/Related [RFC 2387] package to convey the binary data as an "attachment" referenced 
from within a modified, serialized SOAP message, therefore - there is also no overhead of increased message size.

As noted earlier, it is assumed that the sending implementation somehow knows or determines the type information
of the element information items that are candidates for potentional optimization; otehrwise the optimization
feature does not work. The scope of MTOM is solely to optimize the transmission of the SOAP message infoset
for those element information items that have base64 encoded binary data in canonical form as their content.

As with all features, MTOM needs a SOAP protocol binding to transfer the optimized serialization.
Recall from Section 4 that a SOAP protocol binding must transfer the SOAP message infoset in such a way
that it can be constructed at the receiver unchanged. An MTOM-aware binding is one where a sender
can serialize a SOAP message infoset by transmitting the actual value - that is, the actual bits -
of certain element information items known to be in the canonical lexical representation of type
xs:base64Binary rather than their lexical character representation.

A receiver supporting this binding can, from the received value, reconstruct, at least conceptually,
the lexical character representation if that is required by the application.

MTOM provides an enhancement to the existing SOAP HTTP binding to provide an implementation of
the Abstract SOAP Transmission Optimization feature. It uses the XOP-based inclusion mechanism described
in section 5.3.2, and places the resulting MIME Multipart/Related package in teh body of a HTTP message.

As noted earlier, applications, in many implementations, will deal directly with the binary values and there
is no implication that a base64 encoded character representation of the received value needs to be
created, if there is no need to do so. However, there are instances when there may be a need to obtain
the character representation, for example, at a SOAP intermediary which has to forward the message on
 a non-MTOM-aware binding.

One important subtlety in ensuring that the original message infoset can be reconstructed faithfully
is to mandate, as does MTOM, that the original base64 encoded characters can be in their canonical form.
XML Schema Part 2 allows for multiple lexical representations of the xs:base64Binary data type, mainly
in the handling of white space, and therefore defines a canonical form which permits a 1-to-1 correspondence
between a binary value and its lexical representation.

By restricting itself to optimization candidates which are in the canonical form of xs:base64Binary,
it can be ensured that the transferred message infoset is reproduced unchanged.

Therefore, in the following sections, whenever we, for the sake of brevity, refer to base64-encoded data,
the reader should keep in mind that we mean XML element content whose type is in the canonical lexical 
representation of xs:base64Binary.

5.3.2 The Optimized Transmission Serialization Format

The next step in implementing the Abstract SOAP Transmission Optimization feature is to define the format
in which the SOAP message infoset (with potential optimization candidates identified, as described in the previous
section) is serialized in an optimal way for transmission.

The serialization technique is described in MTOM by making use of an "inclusion" technique specified in the XML-binary
Optimized Packaging [XOP] specification together with a MIME Multipart/Related packaging RFC 2387

XOP defines an xop:Include element that ties, at a SOAP binding level, the binary content for an element to its
infoset representation as base64-encoded character information items in the children property of that element
information item.

A SOAP binding that is capable of optimized serialization of an infoset containing such binary data represented
by their character information items uses this xop:Include element in the SOAP envelope as a placeholder to
link (using a href attribute) to the optimized (ie binary) data carried along with the SOAP envelope in an overall package.

The overall package chosen is the extensible MIME Multipart/Related [RFC 2387] format. The root body part of this
MIME package contains the XML 1.0 serialization of the SOAP env:Envelope, modified by the presence of one (or more)
xop:Include element(s), while the other (related) body part(s) of the MIME package contain the compact (ie binary)
data referenced by the xop:Include element(s).

The serialization of the SOAP message from Example 18, converted to this optimized format using XOP,is shown in Example 19a

Example 19a

MIME-Version: 1.0
Content-Type: Multipart/Related; boundary=example-boundary;
	type=application/xop+xml;
	start="<itinerary123.xml@travelcompany.example.org>";
	startinfo="application/soap+xml;action=\"http://travelcompany.example.org/Process\""
Content-Description: This is an example of an optimized SOAP message
	
--example-boundary
Content-Type: application/xop+xml; charset=UTF-8
type="application/soap+xml;action=\"http://travelcompany.example.org/Process\""
Content-Transfer-Encoding: 8bit
Content-ID: <itinerary123.xml@travelcompany.example.org>

<?xml version='1.0'?>
<env:Envelope xmlns:env="http://www.w3.org/2003/05/soap-envelope"
		xmlns:xmime='http://www.w3.org/2004/06/xmlmime'>
	<env:Header>
		<m:reservation xmlns:m="http://travelcompany.example.org/reservation"
				env:role="http://www.w3.org/2003/05/soap-envelope/role/next"
					env:mustUnderstand="true">
		:::
		</m:reservation>
		<n:passenger xmlns:n="http://mycompany.example.com/employees"
				env:role="http://www.w3.org/2003/05/soap-envelope/role/next"
					env:mustUnderstand="true">
		:::
		</n:passenger>
	</env:Header>
	<env:Body>
		<o:travelAgencyLogo xmlns:o="http://travelcompany.example.org/images"
			xmime:contentType='image/jpg'><xop:Include xmlns:xop='http://www.w3.org/2003/12/xop/include'
				href="cid:logo.gif@travelcompany.example.org"/></o:travelAgencyLogo>
		<p:itinerary
			xmlns:p="http://travelcompany.example.org/reservation/travel">
			<p:departure>
				:::
			</p:departure>
			<p:return>
				:::
			</p:return>
		</p:itinerary>
		<q:lodging
			xmlns:q="http://travelcompany.example.org/reservation/hotels">
			<hotel>
				:::
			</hotel>
			<r:areaMap xmlns:r="http://travelcompany.example.org/maps"
				xmime:contentType="image/jpg"><xop:Include xmlns:xop='http://www.w3.org/2003/12/xop/include'
					href="cid:map123.jpg@travelcompany.example.org"/></r:areaMap>
		</q:lodging>
	</env:Body>
</env:Envelope>

--example-boundary
Content-Type: image/jpg
Content-Transfer-Encoding: binary
Content-ID: <logo.gif@travelcompany.example.org>

::: the binary data :::

--example-boundary
Content-Type: image/jpg
Content-Transfer-Encoding: binary
Content-ID: <map123.jpg@travelcompany.example.org>

::: the binary :::

--example-boundary--

Sample SOAP message for a travel itinerary showing non-XML (binary) data carried using the XOP format

Xop can be seen as another module to process serialization of Binary data, so you run a include on it and 
access the namespace of them.

Also, a itinerary is a planned route or journey. A travel document recording a route or journey.

in Example 19a, the conventional MIME Multipart/Related package conveys a compound "object" broken up into
mutliple inter-related body parts. The "start" parameter of the overall Content-Type conveys, via Content-ID,
the body part which contains the compound objects "root", while the media type parameter value of "application/xop+xml"
identifies the contents as an XML document serialized using the XOP format.

The "startinfo" parameter of the package shows that this root part is the XML 1.0 serialization of the SOAP
env:Envelope modified by the inclusion of xop:Include elements where appropiate.

Compared with Example 18, note, in Example 19a, the presence of two xop:Include elements which replace the char representations
of the binary data corresponding to the company logo and the lodging area map. Each of these elements provides via
the href attribute the link by which the binding knows which MIME body part contains the binary data that
corresponds to the (canonical form of the) equivalent base64-encoded character representation.

Note also the presence of the additional attribute xmime:contentType (see MediaType Section 2.1 contentType Attribute) in the xop:Include
elements to indicate the media type of the contents of the o:TravelAgencyLogo and r:AreaMap elements.

When such an optimized MIME Multipart/Related package based on the XOP format is sent in a HTTP message, MTOM Section 
4.3 requires that the resultant MIME header are sent as HTTP headers, while the remainder of the package is
placed in the HTTP body. Example 19b shows the SOAP message from Example 19a returned in a HTTP response (with the
relevant HTTP headers highlighted)

Example 19b

HTTP/1.1 200 OK
Content-Type: Multipart/Related; boundary=example-boundary;
	type=application/xop+xml;
	start="<itinerary123.xml@travelcompany.example.org>";
	startinfo="application/soap+xml;action=\"http://travelcompany.example.org/Process\""
Content-Description: This is an example of an optimized SOAP message
Content-Length: nnnn

--example-boundary
Content-Type: application/xop+xml; charset=UTF-8
type="application/soap+xml;action=\"http://travelcompany.example.org/Process\""
Content-Transfer-Encoding: 8bit
Content-ID: <itinerary123.xml@travelcompany.example.org>

<?xml version='1.0'?>
<env:Envelope xmlns:env="http://www.w3.org/2003/05/soap-envelope"
	 xmlns:xmime='http://www.w3.org/2004/06/xmlmime'>
	<env:Header>
		<m:reservation xmlns:m="http://travelcompany.example.org/reservation"
				env:role="http://www.w3.org/2003/05/soap-envelope/role/next"
					env:mustUnderstand="true">
		:::
		</m:reservation>
		<n:passenger xmlns:n="http://mycompany.example.com/employees"
				env:role="http://www.w3.org/2003/05/soap-envelope/role/next"
					env:mustUnderstand="true">
		:::
		</n:passenger>
	</env:Header>
	<env:Body>
		<o:travelAgencyLogo xmlns:o="http://travelcompany.example.org/images"
			xmime:contentType='image/jpg'><xop:Include xmlns:xop='http://www.w3.org/2003/12/xop/include'
				href="cid:logo.gif@travelcompany.example.org"/></o:travelAgencyLogo>
		<p:itinerary
			xmlns:p="http://travelcompany.example.org/reservation/travel">
			<p:departure>
				:::
			</p:departure>
			<p:return>
				:::
			</p:return>
		</pitinerary>
		<q:lodging
			xmlns:q="http://travelcompany.example.org/reservation/hotels">
			<hotel>
				:::
			</hotel>
			<r:areaMap xmlns:r="http://travelcompany.example.org/maps"
				xmime:contentType="image/jpg"><xop:Include xmlns:xop='http://www.w3.org/2003/12/xop/include'
					href="cid:map123.jpg@travelcompany.example.org"/></r:areaMap>
		</q:lodging>
	</env:Body>
</env:Envelope>

--example-boundary
Content-Type: image/jpg
Content-Transfer-Encoding: binary
Content-ID: <logo.gif@travelcompany.example.org>

::: the binary data :::

--example-boundary
Content-Type: image/jpg
Content-Transfer-Encoding: binary
Content-ID: <map123.jpg@travelcompany.example.org>

::: the binary data :::

--example-boundary--

Sample SOAP message for a travel itinerary carried in a HTTP response, showing the MIME Multipart/Related
headers carried as HTTP headers

in Example 19b, the MIME Multipart/Related headers arising from the [XOP] format (see Example 19a) are carried
as HTTP headers in the HTTP 200 OK response

5.3.3 Using the Resource Representation SOAP Header Block

Another optimization that has been identified as useful for processing a SOAP message which includes
URI-based references to Web resources is one where the sender includes a representation of each such resource
in the SOAP message to either the ultimate reciever or an intermediary.

This helps in situations where the processing of the SOAP message depends on dereferencing the URIs, but which
may not be possible because the receiver is not able or wishes to avoid the overhead of the networking traffic
needed to do so. The gain is even greater if the same resource (the image of a logo, say) is referenced
multiple times within the message.

The Resource Representation SOAP Header Block ResRep specification describes a SOAP header block, containing
a rep:Representation element, which defines how URI-based representations of resources referenced within a 
SOAP message infoset may be carried and processed by an identified receiver. Its use is illustrated by examples
that follow.

Recall, from Example 18, that a base64-encoded form of the travel agency logo was sent in the SOAP message.
However, this may well have been included by providing a HTTP URL link to the location from which the
(ultimate) receiver could retrieve the image as a part of processing the message. This is shown, with all
inessentials deleted, in example 20.

Example 20

HTTP/1.1 200 OK
Content-Type: application/soap+xml; charset="utf-8"
Content-Length: nnnn

<?xml version='1.0' ?>
<env:Envelope xmlns:env="http://www.w3.org/2003/05/soap-envelope">
	<env:Header>
		:::
	</env:Header>
	<env:Body>
		<o:travelAgencyLogo xmlns:o="http://travelcompany.example.org/images">
			<o:image o:source="http://travelcompany.example.org/images/logo.jpg"/>
		</o:travelAgencyLogo>

			:::
			:::

	</env:Body>
</env:Envelope>

Sample SOAP message based on Example 18 showing the travel agency logo element content
as a link to a Web resource

In Example 20, the expectation is that the contents of the o:image element would be obtained by dereferencing
the URL identified by the o:source attribute. However, as identified earlier, if a situation were anticipated
where the processing overhead of dereferencing the URI were considered unacceptable, a representation of the logo
image can be sent using the rep:Representation element, as shown in Example 21 (with the header highlighted)

Example 21

HTTP/1.1 200 OK
Content-Type: application/soap+xml; charset="utf-8"
Content-Length: nnnn

<?xml version='1.0' ?>
<env:Envelope xmlns:env="http://www.w3.org/2003/05/soap-envelope"
	xmlns:rep='http://www.w3.org/2004/02/representation'
		xmlns:xmime='http://www.w3.org/2004/06/xmlmime'>
	<env:Header>
		<rep:Representation resource='http://travelcompany.example.org/images/logo.jpg'>
			<rep:Data xmime:contentType='image/jpg'>(stuff)
				:::
				(stuff)
			</rep:Data>
		</rep:Representation>
			:::
	</env:Header>
	<env:Body>
		<o:travelAgencyLogo xmlns:o="http://travelcompany.example.org/images">
			<o:image o:source="http://travelcompany.example.org/images/logo.jpg"/>
		</o:travelAgencyLogo>
			:::
			:::
	</env:Body>
</env:Envelope>

Sample SOAP message based on Example 20 showing a representation of a Web resource (an image of the travel agency logo)
carried in the Representation header

In example 21, the rep:Representation element contains a mandatory resource attribute whose value is the URI identifying
the Web REsource, while the rep:Data element is a base64-encoded representation of the resource. The optional xmime:contentType
attribute in rep:Data is used to identify the media type of the resource representation being conveyed. 

THe rep:Representation element can make use of other attributes (see ResRep Section 2.2 Representation header block Constructs 
for details) including the SOAP-defined ones, env:mustUnderstand and env:Role, described in section 3. The use of such additional
headers allows the targeted receiver to know that the resource representation is available to it.

If the binary content representing the resource were available to the sender, and sending the base64-encoded form of
that (presumably large) binary contents was deemed inefficient, the use of the rep:Representation element can be
combined with MTOM and the XOP format to gain the efficiencies of that feature. This is shown in Example 22,
with the xop:Include element highlighted.

Example 22

HTTP/1.1 200 OK
Content-Type: mime/multipart-related; charset="utf-8"
Content-Length: nnnn

MIME-Version: 1.0
Content-Type: Mutlipart/Related; boundary=example-boundary;
	type=application/xop+xml;
	start="<itinerary123.xml@travelcompany.example.org>";
	startinfo="application/soap+xml;action=\"http://travelcompany.example.org/Process\""
Content-Description: This is an example of an optimized SOAP message

--example-boundary
Content-Type: application/xop+xml; charset=UTF-8;
type="application/soap+xml;action=\"http://travelcompany.example.org/Process\""
Content-Transfer-Encoding: 8bit
Content-ID: <itinerary123.xml@travelcompany.example.org>

<?xml version='1.0' ?>
<env:Envelope xmlns:env="http://www.w3.org/2003/05/soap-envelope"
	xmlns:rep='http://www.w3.org/2004/02/representation'
		xmlns:xmime='http://www.w3.org/2004/06/xmlmime'>
	<env:Header>
		<rep:Representation resource='http://travelcompany.example.org/images/logo.jpg'>
			<xop:Include xmlns:xop='http://www.w3.org/2003/12/xop/include'
				href="cid:logo.gif@travelcompany.example.org"/></rep:Representation>
			:::
	</env:Header>
	<env:Body>
		<o:travelAgencyLogo xmlns:o="http://travelcompany.example.org/images">
			<o:image o:source= "http://travelcompany.example.org/images/logo.jpg"/>
		</o:travelAgencyLogo>
			:::
			:::
	</env:Body>
</env:Envelope>

--example-boundary
Content-Type: image/jpg
Content-Transfer-Encoding: binary
Content-ID: <logo.gif@travelcompany.example.org>

::: the binary data for the travel agency logo :::

--example-boundary
Content-Type: image/jpg
Content-Transfer-Encoding: binary
Content-ID: <map123.jpg@travelcompany.example.org>

::: the binary data :::

--example-boundary--

Sample SOAP message based on Example 21 showing the representation of a Web resource
(an image of the travel agency logo) carried in the Representation header using the MTOM/XOP optimization

6. Changes Between SOAP 1.1 and SOAP 1.2

SOAP Version 1.2 has a number of changes in syntax and provides additional (or clarified) semantics from those described in
SOAP 1.1. The following is a list of features where the two specifications differ. The purpose of this list is to
provide the reader with a quick and easily accessible summary of the differences between the two specifications.

The features have been put in categories purely for ease of reference, and in some cases, an item might equally
well have been placed in another category.

Document Structure

The SOAP 1.2 specifications have been provided in two parts. SOAP Part1 provides an abstract Infoset-based
definition of the SOAP message structure, a processing model and an underlying protocol binding framework,
while SOAP Part2 provides serialization rules for conveying that infoset as well as a particular HTTP binding.

SOAP 1.2 will not spell out the acronym

SOAP 1.2 has been rewritten in terms of XML infosets, and not as serializations of the form <?xml....?> required by
SOAP 1.1

Additional or Changed Syntax

SOAP 1.2 does not permit any element after the body. The SOAP 1.1 schema definition allowed for such a possibility
but the textual description is silent about it

SOAP 1.2 does not allow the env:encodingStyle attribute to appear on the SOAP env:Envelope, whereas SOAP 1.1 allows
it to appear on any element. SOAP 1.2 specifies specific elements where this attribute may be used

SOAP 1.2 defines the new env:NotUnderstood header element for conveying information on a mandatory header block which
could not be processed, as indicated by the presence of an env:MustUnderstand fault code. SOAP 1.1 provided the
fault code, but no details on its use.

In the SOAP 1.2 infoset-based description, the env:mustUnderstand attribute in header elements takes the (logical)
value "true" or "false", whereas in SOAP 1.1 they are the literal value "1" or "0" respectively.

SOAP 1.2 provides a new fault code DataEncodingUnknown

The various namespaces defined by the two protocols are of course different

SOAP 1.2 replaces the attribute env:actor with env:role but with essentially the same semantics

SOAP 1.2 defines a new attribute, env:relay, for header blocks to indicate if unprocessed header blocks
should be forwarded

SOAP 1.2 defines two new roles, "none" and "ultimateReceiver", together with a more detailed processing model
on how these behave

SOAP 1.2 has removed the "dot" notation for fault codes, which are now simply an XML Qualified Name, where the
namespace prefix is the SOAP envelope namespace.

SOAP 1.2 replaces "client" and "server" fault codes with "Sender" and "Receiver"

SOAP 1.2 uses the element names env:Code and env:Reason, respectively, for what used to be called faultcode and
faultstring in SOAP 1.1. SOAP 1.2 also allows multiple env:Text child elements of env:Reason qualified by
xml:lang to allow multiple language versions of the fault reason.

SOAP 1.2 provides a hierarchical structure for the mandatory SOAP env:Code sub-element in the env:Fault element,
and introdcues two new optional subelements, env:Node and env:Role

SOAP 1.2 removes the distinction that was present in SOAP 1.1 between header and body faults as indicated by
the presence of the env:Details element in env:Fault. In SOAP 1.2, the presence of the env:Details
element has no significance as to which part of the fault SOAP message was processed

SOAP 1.2 uses XML Base [XML Base] for determining a base URI for relative URI references whereas SOAP
1.1 is silent about the matter

SOAP HTTP binding

In the SOAP 1.2 HTTP binding, the SOAPAction HTTP header defined in SOAP 1.1 has been removed, and a new HTTP
status code 427 has been sought from IANA for indicating (at the discretion of the HTTP origin server) that its
presence is required by the server application. The contents of the former SOAPAction HTTP header are now expressed
as a value of an (optional) "action" parameter of the "application/soap+xml" media type that is signaled in the
HTTP binding.

In the SOAP 1.2 HTTP binding, the Content-type header should be "application/soap+xml" instead of "text/xml" as
in SOAP 1.1. The IETF registration for this new media type is RFC 3902

SOAP 1.2 provides a finer grained description of use of the various 2xx, 3xx, 4xx HTTP status codes

Support of the HTTP extensions framework has been removed from SOAP 1.2

SOAP 1.2 provides an additional message exchange patttern which may be used as part of the HTTP
binding that allows the use of HTTP GET for safe and idempotent information retrievals

RPC

SOAP 1.2 provides a rpc:result element accessor for RPCs

SOAP 1.2 provides several additional fault codes in the RPC namespace

SOAP 1.2 offers guidance on a Web-friendly approach to defining RPCs where the procedure's purpose
is purely "safe" informational retrieval.

SOAP encodings

An abstract data model based on a directed edge labeled graph has been formulated for SOAP 1.2
The SOAP 1.2 encodings are dependent on this data model. The SOAP RPC conventions are dependent
on this data model, but have no dependencies on the SOAP encoding. Support of the SOAP 1.2 encodings
and SOAP 1.2 RPC conventions are optional.

The syntax for the serialization of an array has been changed in SOAP 1.2 from that in SOAP 1.1

The support provided in SOAP 1.1 for partially transmitted and sparse arrays is not available
in SOAP 1.2

SOAP 1.2 allows the inline (embedded) serialization of multiref values

The href attribute in SOAP 1.1 (of type xs:anyURI) is called enc:ref in SOAP 1.2
and is of type IDREF

In SOAP 1.2, omitted accessors of compound types are made equal to NILs

SOAP 1.2 provides several fault sub-codes for indicating encoding errors

Types on nodes are made optional in SOAP 1.2

SOAP 1.2 has removed generic compound values from the SOAP Data Model

SOAP 1.2 has added an optional attribute enc:nodeType to elements encoded using SOAP encoding 
that identifies its structure (i.e, a simple value, a struct or an array)

SOAP Part 1 Appendix A provides version management rules for a SOAP node that can
support the version transition from SOAP 1.1 to SOAP Version 1.2. In particular, in defines
an env:Upgrade header block which can be used by a SOAP 1.2 node on receipt of a SOAP 1.1
message to send a SOAP fault message to the originator to signal which version of SOAP it supports.

The above belong to SOAP 1.2 Part 0, the following belongs to SOAP 1.2 Part 2:

SOAP Version 1.2 Part 2: Adjuncts (Second Edition)

Abstract:

SOAP Version 1.2 is a lightweight protocol intended for exchanging structured information in a decentralized,
distributed environment. SOAP Version 1.2 Part 2: Adjuncts defines a set of adjuncts that may be used with
SOAP Version 1.2 part 1 Messaging Framework. This specification depends on SOAP Version 1.2 Part 1: Messaging
Framework [SOAP Part 1]

1. Introduction

SOAP Version 1.2 (SOAP) is a lightweight protocol intended for exchange of structured information in a decentralized,
distributed environment. The SOAP specification consits of three parts. Part 2 (this document) defines a set of
adjuncts that MAY be used with the SOAP messaging framework:

1. The SOAP Data Model represents application-defined data structures and values as a directed, edge-labeled graph of nodes
(see 2. SOAP Data Model)

2. The SOAP Encoding defines a set of rules for encoding instances of data that conform to the SOAP Data Model for inlcusion
in SOAP messages (see 3. SOAP Encoding)

3. The SOAP RPC Representation defines a convention for how to use the SOAP Data Model for representing RPC calls and
responses (see 4. SOAP RPC Representation)

4. The section for describing features and bindings defines a convention for describing features and binding in terms
of properties and property values (see 5. A Convention for Describing Features and Bindings)

5. The section on SOAP-Supplied Message Exchange Patterns and Features defines a request response message exchange pattern
and a message exchange pattern supporting non-SOAP requests for SOAP responses (see 6. SOAP-Supplied Message Exchange Patterns
and Features)

6. The SOAP Web Method feature defines a feature for control of methods used on the World Wide Web (see 6.4 SOAP Web Method Feature)

7. The SOAP HTTP Binding defines a binding of SOAP to HTTP (see RFC 2616) following the rules of the SOAP Protocol Binding Framework,
SOAP Part 1 (see 7. SOAP HTTP Binding)

SOAP 1.2 Part 0 [SOAP Part 0] is a non-normative document intended to provide an easily understandable tutorial on the features
of the SOAP Version 1.2 specifications

SOAP 1.2 Part 1 [SOAP Part 1] defines the SOAP messaging framework.

Note: IN previous versions of this specification the SOAP name was an acronym. This is no longer the case.

1.1 Notational Conventions

The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL"
in this document are to be interpreted as described in RFC 2119 RFC 2119

This specification uses a number of namespace prefxies throughout, they are listed in Table 1. Note that the choice of any
namespace prefix is arbitrary and not semantically significant (see XML Infoset [XML InfoSet])

Prefix 			Namespace 									Notes

env 			"http://www.w3.org/2003/05/soap-envelope" 	Defined by SOAP 1.2 Part 1 [SOAP Part 1].

env 			"http://www.w3.org/2003/05/soap-encoding" 	A normative XML Schema [XML Schema Part 1], [XML Schema Part 2] document
															for the "http://www.w3.org/2003/05/soap-encoding" namespace can be found at
															http://www.w3.org/2003/05/soap-encoding.

rpc 			"http://www.w3.org/2003/05/soap-rpc" 		A normative XML Schema [XML Schema Part 1], [XML Schema Part 2] document
															for the "http://www.w3.org/2003/05/soap-rpc" namespace can be found at 
															http://www.w3.org/2003/05/soap-rpc.

xs 				"http://www.w3.org/2001/XMLSchema" 			Defined in the W3C XML Schema Specification [XML Schema Part 1], [XML Schema Part 2]

xsi 			"http://www.w3.org/2001/XMLSchema-instance" Defined in the W3C XML Schema specification [XML Schema Part 1], [XML Schema Part 2]

Namespace names of the general form "http://example.org/..." and "http://example.com/..." represent application or context-dependent URIs
(see RFC 3986 [RFC 3986])

This specification uses the Extended Backus-Naur Form (EBNF) as described in XML 1.0 [XML 1.0]

With the exception of examples and sections explicitly marked as "Non-Normative", all parts of this specification
are normative.

2. SOAP Data Model

The SOAP Data Model represents application-defined data structures and values as a directed edge-labeled graph of nodes.
Components of this graph are described in the following sections.

The purpose of the SOAP Data Model is to provide a mapping of non-XML based data to some wire representation. It is important
to note that use of the SOAP Data Model, the accompanying SOAP Encoding (see 3. SOAP Encoding), and/or the SOAP RPC Representation
(see 4. SOAP RPC Representation) is OPTIONAL. Applications which already model data in XML may not need to use the SOAP
Data Model.

Due to their optional nature, it is NOT a requirement to implement the SOAP Data Model, the SOAP Encoding and/or the
SOAP RPC Representation as part of a SOAP node.

2.1 Graph Edges

Edges in the graph are said to originate at a graph node and terminate at a graph node. An edge that originates
at a graph node is known as an outbound edge with respect to that graph node. An edge that terminates at a graph
node is known as an inbound edge with respect to that graph node.

An edge MAY originate and terminate at the same graph node. An edge MAY have only an originating graph node,
that is be outbound only. An edge MAY have only a terminating graph node, that is be inbound only.

The outbound edges of a given graph node MAY be distinguished by label or by position. Position is a total
order on such edges; thus, if any outbound edges from a given node are distinguished by position, then all
outbound edges from that node are so distinguished.

2.1.1 Edge labels

An edge label is an XML qualified name. Two edge labels are equal if and only if their XML expanded names
are equal. I.e, both of the following are true.

1. Their local name values are the same

2. Either of the following is true:

	1. Both of their namespace values are missing

	2. Their namespace name values are both present and are both the same.

See 2.3 Values for uses of edge labels and position to distinguish the members of encoded values,
and XML Schema [XML Schema Part 2] for more information about comparing XML qualified names.

2.2 Graph Nodes

A graph node has zero or more outbound edges. A graph node that has no outbound edges has an optional lexical
value. All graph nodes have an optional type name of type xs:QName in the namespace named "http://www.w3.org/2001/XMLSchema"
(See XML Schema [XML Schema Part 2])

A bit of a detour here, cause i feel like i need to clear out what a namespace means in a deeper sense - because even if i know
that it is a pointer to a file directory or resource locations containing reosurces, i want to have a deeper understanding of them.

So, namespace stuff follows:

Namespaces overview

In the broadest deifnition namespaces are a way of encapsulating items. THis can be see as an abstract concept
in many places. For example, in any operating system directories serve to group related files, and act as a
namespace for the files within them. As a concrete example, the file foo.txt can exist in both directory
/home/greg and in /home/other, but two copies of foo.txt cannot co-exist in teh same dir.

In addition, to access the foo.txt outside of the /home/greg dir, we must prepend the dirn ame to the
file name using the dir separator to get /home/greg/foo.txt This same principle extends to naemspaces
in the programming world

Version 			Desc

7.0.0 				Added Group use Declarations.

In the PHP world, namespaces are designed to solve two problems that authors of libraries and applications
encounter when creating re-usable code elements such as classes or functions:

1. Name collisions between code you create, and internal PHP classes/functions/constants or third-party classes/functions/constants

2. Ability to alias (or shorten) Extra_Long_Names designed to alleviate the first problem, improving readability of source code.

PHP Namespaces provide a way in which to group related classes, interfaces, functions and constants. Here is an example
of namespace syntax in PHP.

Example #1 Namespace syntax example

<?php
namespace my\name; // see "Defining Namespaces" section

class MyClass{}
function myfunction() {}
const MYCONST = 1;

$a = new MyClass;
$c = new \my\name\MyClass; // see "Global Space" section

$a = strlen('hi'); //see "Using namespaces: fallback to global
					// function/constant" section

$d = namespace \MYCONST; // see "namespace operator and __NAMESPACE__
						 // constant" section

$d = __NAMESPACE__ . '\MYCONST';
echo constant($d); // see "Namespaces and dynamic language features" section
?>

Note:
Namespace names PHP and php, and compound names starting with these names (like PHP|Classes) are reserved
for internal language use and should not be used in the userspace code.

A namespace is simply a pointer to a resource path where said resource is.

Defining namespaces

Although any valid PHP code can be contained within a namespace, only the following types of code are affected
by namespaces: classes (including abstracts and traits), interfaces, functions and constants

Namespaces are declared using the namespace keyword. A file containing a namespace must declare the namespace
at the top of the file before any other code - with one exception: the declare keyword.

Example #1 Declaring a single namespace

<?php
namespace MyProject;

const CONNECT_OK = 1;
class Connection { /* ... */ }
function connect() { /* ... */ }

?>

The only code construct allowed beore a namespace declaration is the declare statement, for defining
encoding of a source file. In addition, no non-PHP code may precede a namespace declaration, including
extra whitespace.

Example #2 Declaring a single namespace

<html>
<?php
namespace MyProject; // fatal error - namespace must be the first statement in the script
?>

In addition, unlike any other PHP construct, the same namespace may be defiend in multiple files,
allowing splitting up of a namespace's contents across the system.

If our code looks like:

<?php
	namespace NS;
?>

And you still get "Namespace declaration statement has to be the very first statement in the script"
Fatal error, then you probably use UTF-8 encoding (which is good) with Byte Orker Mark, aka BOM (which is bad?).

Try to convert your files to "UTF-8 without BOM", and it should be fine.

Regarding constants defined with define() inside namespaces....

define() will define constants exactly as specified. So, if you want to define a constant in a namespace,
you will need to specify the namespace in your call to define(), even if you are calling define() from
within a namespace.

The following examples will make it clear.

The following code will define the constant "MESSAGE" in the global namespace (i.e "\MESSAGE")

<?php
namespace test;
define('MESSAGE', 'Hello World');
?>

The following code will define two constants in teh "test" namespace.

<?php
namespace test;
define('test\HELLO', 'Hello world');
define(__NAMESPACE__ . '\GOODBYE', 'GOODBYE LOL');
?>

Also, it is better to be explicit abotu what constant to use.

<?php
	namespace NS;

	define(__NAMESPACE__ .'\foo','111');
	define('foo', '222');

	echo foo; // 111.
	echo \foo; // 222.
	echo \NS\foo; //111.
	echo NS\foo; //fatal error. assumes NS\NS\foo 
?>

Also, attempting to create namespaces with PHP keywords, will cause parse errors:

<?php
namespace Project/Classes/Function; //Causes pasre errors
namespace Project/Abstract/Factory; //Causes parse errors
?>

Note, even though namespace must be the first line, you can still include whitespace or comments before a namespace declaration:

<?php
//some
//text
//goes
//here

namespace Foo;
class Bar {
}
?>

Declaring sub-namespaces

Much like directories and files, PHP namespaces also contain the ability to specify a hierarchy of namespace
names. Thus, a namespace name can be defined with sub-levels:

Example #1 Declaring a single namespace with hierarchy

<?php
namespace MyProject\Sub\Level;

const CONNECT_OK = 1;
class Connection { /* ... */ }
function connect() { /* ... */ }

?>

The above example creates the constant MyProject\Sub\Level\CONNECT_OK, class MyProject\Sub\Level\Connection and
function MyProject\Sub\Level\connect.

Defining Multiple namespaces in the same file

Multiple namespaces may also be declared in the same file. There are two allowed syntaxes:

Example #1 Declaring multiple namespaces, simple combination syntax

<?php
namespace MyProject;

const CONNECT_OK = 1;
class Connection { /* ... */ }
function connect() { /* ... */ }

namespace AnotherProject;

const CONNECT_OK = 1;
class Connection { /* ... */ }
function connect() { /* ... */ }
?>

This syntax is not recommended for combining namespaces into a single file. Instead it is recommended
to use the alternate bracketed syntax.

Example #2 Declaring multiple namespaces, bracketed syntax

<?php
namespace MyProject {
	
const CONNECT_OK = 1;
class Connection { /* ... */ }
function connect() { /* ... */ }
}

namespace AnotherProject {
	
const CONNECT_OK = 1;
class Connection { /* ... */ }
function connect() { /* ... */ }
}
?>

It is strongly discouraged as a coding practice to combine multiple namespaces into the same file.
The primary use case is to combine multiple PHP scripts into the same file.

To combine global non-namespaced code with namespaced code, only bracketed syntax is supported.
Global code should be encased in a namespace statement with no namespace name as in:

Example #3 Declaring multiple namespaces and unnamespaced code

<?php
namespace MyProject {
	
const CONNECT_OK = 1;
class Connection { /* ... */ }
function connect() { /* ... */ }
}

namespace { //global code
session_start();
$a = MyProject\connect();
echo MyProject\Connection::start();
}
?>

No PHP code may exist outside of the namespace brackets except for an opening declare
statement.

Example #4 Declaring Multiple namespaces and unnamespaced code

<?php
declare(encoding='UTF-8');
namespace MyProject {

const CONNECT_OK = 1;
class Connection { /* ... */ }
function connect() { /* ... */ }
}

namespace { //global code
session_start();
$a = MyProject\connect();
echo MyProject\Connection::start();
}
?>

Note, that we cannot mix bracketed namespace declarations with unbracketed namespace declarations
- it will result in a Fatal error

<?php

namespace a;

echo "I belong to namespace a";

namespace b {
	echo "I'm from namespace b";
}

<?php
//Namespace can be used in this way also
namespace MyProject {

function connect() { echo "ONE"; }
	Sub\Level\connect();
}

namespace MyProject\Sub {
	
function connect() { echo "TWO"; }
	Level\connect();
}

namespace MyProject\Sub\Level {
	
	function connect() { echo "THREE"; }
	\MyProject\Sub\Level\connect(); //Or we can use this as below
	connect();
}

And an example of calling teh same named function from different namespaces:

//food.php

<?php
namespace Food;

require('Apple.php');
require('Orange.php');

use Apples;
use Oranges;

	Apples\eat();
	Oranges\eat();
?>

Each respective PHP file:

//Apple.php
<?php
namespace Apples;

function eat()
{
	echo "eat apple";
}
?>

//Orange.php
<?php
namespace Oranges;

function eat()
{
	echo "eat Orange";
}
?>

Using namespaces: Basics

Before discussing the use of namespaces, it is important to understand how PHP knows which namespaced
element your code is requesting. A simple analogy can be made between PHP namespaces and a filesystem.
There are three ways to access a file in a file system:

1. Relative file name like foo.txt. This resolves to currentdirectory/foo.txt where currentdirectory
is the directory currently occupied. So if the current directory is /home/foo, the name resolves to
/home/foo/foo.txt

2. Relative path name like subdirectory/foo.txt. This resolves to currentdirectory/subdirectory/foo.txt

3. Absolute name like /main/foo.txt. This resolves to /main/foo.txt

The same principle can be applied to namespaced elements in PHP. For example, a class name can be
referenced to in three ways:

1. Unqualified name, or an unprefixed class name like $a = new foo(); or foo::staticmethod().
If the current namespace is currentnamespace, this resolves to currentnamespace\foo.

If the code is global, non-namespaced code, this resolves to foo. One caveat: unqualified
names for functions and constants will resolve to global functions and constants if the namespaced
function or constant is not defined. See Using namespaces: fallback to global function/constant
for details.

2. Qualified name, or a prefixed class name like $a = new subnamespace\foo(); or subnamespace\foo::staticmethod();
If the current namespace is currentnamespace, this resolves to currentnamespace\subnamespace\foo. If the code
is global, non-namespaced code, this resolves to subnamespace\foo

3. Fully qualified name, or a prefixed name with global prefix operator like $a = new \currentnamespace\foo();
or \currentnamespace\foo::staticmethod(); This always resolves to the literal name specified in the code,
currentnamespace\foo

Here is an example of the three kinds of syntax in actual code:

file1.php

<?php
namespace Foo\Bar\subnamespace;

const FOO = 1;
function foo() {}
class foo
{
	static function staticmethod() {}
}
?>

file2.php

<?php
namespace Foo\Bar;
include 'file1.php';

const FOO = 2;
function foo() {}
class foo
{
	static function staticmethod() {}
}

// Unqualified name
foo(); //resolves to function Foo\Bar\foo
foo::staticmethod(); // resolves to class Foo\Bar\foo, method staticmethod
echo FOO; // resolves to constant Foo\Bar\FOO

//Qualified name
subnamespace\foo(); //Resolves to function Foo\Bar\subnamespace\foo
subnamespace\foo::staticmethod(); //resolves to class Foo\Bar\subnamespace\foo,
								  // method staticmethod

echo subnamespace\FOO;

//Fully qualified name
\Foo\Bar\foo(); //resolves to function Foo\Bar\foo
\Foo\Bar\foo::staticmethod(); //Resolves to class Foo\Bar\foo, method staticmethod
echo \Foo\Bar\FOO; // resolves to constant Foo\Bar\FOO
?>

Note that to access any global class, function or constant, a fully qualified name
can be used, such as \strlen() or \Exception or \INI_ALL.

Example #1 Accessing global classes, functions and constants from within a namespace

<?php
namespace foo;

function strlen() {}
const INI_ALL = 3;
class Exception {}

$a = \strlen('hi'); //calls global function strlen
$b = \INI_ALL; //Access global constant INI_ALL
$c = new \Exception('error'); // instansiates global class Exception
?>

Syntax for extending classes in namespaces is still the same.

Lets call this Object.php:

<?php

namespace com\rsumilang\common;

class Object{
	// code
}

?>

And now let us create a class called String that extends object in String.php:

<?php

class String extends com\rsumilang\common\Object{
	//Code
}
?>

Now, if you class String was defined in the same namespace as Object, then you do not
have to specify a full namespace path:

<?php

namespace com\rsumilang\common;

class String extends Object
{
	//code
}

?>

Lastly, you can also alias a namespace name to use a shorter name for the Class you
are extending in case your class is in a separate namespace:

<?php

namespace com\rsumilang\util;
use com\rsumlang\common as Common;

class String extends Common\Object
{
	//code
}

Also, when we are using exceptions to catch things in Namespaces, use a fully qualified name of 
the exception:

DO NOT:

<?php

namespace Foo;

try {
	// Something awful here
	// That will throw an ew exception from SPL
}
catch (Exception as $ex) {
	//We will never get here
	//This is because we are catching Foo\Exception
}
?>

Instead, use fully qualified name for the exception to catch it

<?php

namespace Foo;

try {
	//Something awful here
	//That will throw a new exception from SPL
}
catch (\Exception as $ex) {
	// Now we can get here at last
}
?>

Although any valid PHP code can be contained within a namespace, only four types of code are affected
by namespaces:

classes, interfaces, functions and constants

Namespaces and dynamic language features

PHP's implementation of namespaces is influenced by its dynamic nature as a programming language.
Thus, to convert codel ike the following example into namespaced code:

Example #1 Dynamically accessing ELements

example1.php

<?php
class classname
{
	function __construct()
	{
		echo __METHOD__ . "\n";
	}
}
function funcname()
{
	echo __FUNCTION__ . "\n";
}
const constname = "global";

$a = 'classname';
$obj = new $a; //prints classname::__construct
$b = 'funcname';
$b(); //prints funcname
echo constant('constname') . "\n"; //prints global
?>

One must use the fully qualified name (class name with namespace prefix). Note that because there
is no difference between a qualified and a fully qualified Name inside a dynamic class name, function name,
or constant name, the leading backslash is not necessary.

Example #2 Dynamically accessing namespaced elements

<?php
namespace namespacename;
class classname
{
	function __construct()
	{
		echo __METHOD__ . "\n";
	}
}
function funcname()
{
	echo __FUNCTION__ . "\n";
}
const constname = "namespaced";

//Note that if using double quotes, "\\namespacename\\classname" must be used 
$a = '\namespacename\classname';
$obj = new $a; // prints namespacename\classname::__consturct
$a = 'namespacename\classname';
$obj = new $a; // also prints namespacename\classname::__construct

$b = 'namespacename\funcname';
$b(); // prints namespacename\funcname

$b = '\namespacename\funcname';
$b(); //also prints namespacename\funcname
echo constant('\namespacename\constname') . "\n"; //prints namespaced
echo constant('namespacename\constname') . "\n"; //also prints namespaced
?>

When extending a class from another namespace that should instansiate a class from within the current namespace,
you need to pass on the namespace.

<?php //File1.php
namespace foo;
class A {
	public function factory() {
		return new C;
	}
}
class C {
	public function tell() {
		echo "foo";
	}
}
?>

<?php // File2.php
namespace bar;
class B extends \foo\A {}
class C {
	public function tell() {
		echo "bar";
	}
}
?>

<?php
include "File1.php";
include "File2.php";
$b = new bar\B;
$c = $b->factory();
$c->tell(); // "foo" but you want "bar"
?>

The reason the above targets foo, is because B is a extension of \foo\A, which calls C in its own namespace.
But if you want to reach the bar instead, you need to do as follows:

When extensing a class from another namespace that should instansiate a class from within the current namespace,
 you need to pass on the namespace.

<?php // File1.php
namespace foo;
class A {
	protected $namespace = __NAMESPACE__;
	public function factory() {
		$c = $this->namespace . '\C';
		return new $c;
	}
}
class C {
	public function tell() {
		echo "foo";
	}
}
?>

<?php // File2.php
namespace bar;
class B extends \foo\A {
	protected $namespace = __NAMESPACE__;
}
class C {
	public function tell() {
		echo "bar";
	}
}
?>

<?php
include "File1.php";
include "File2.php";
$b = new bar\B;
$c = $b->factory();
$c->tell(); // "bar"
?>

It seems that the namespace-backslashes are stripped from the source code in teh preview, maybe it works in the
main view. If not: fooA was written as \foo\A and barB as bar\B)

Please be aware of FQCN (Full Qualified Class Name) point.
Many people will have troubles with this:

<?php

// File1.php
namespace foo;

class Bar { ... }

function factory($class) {
	return new $class;
}

// File2.php
$bar = \foo\factory('Bar'); //Will try to instansiate \Bar, not \foo\Bar

?>

To fix that, and also incorporate a 2 step namespace resolution, you can check for \ as first char
of $class, and if not present, build manually the FQCN:

<?php

// File1.php
namespace foo;

function factory($class) {
	if ($class[0] != '\\') {
		echo '->';
		$class = '\\' . __NAMESPACE__ . '\\' . $class;
	}

	return new $class();
}

// File2.php
$bar = \foo\factory('Bar'); // Will correctly instansiate \foo\Bar

$bar2 = \foo\factory('\anotherfoo\Bar'); // Will correctly instansiate \anotherfoo\Bar

?>

One situation that dynamic class names are used is in 'factory' patterns. Thus, add the desired
namespace of your target class before the variable name.

namespaced.php
<?php
// namespaced.php
namespace Mypackage;
class Foo {
	public function factory($name, $global = FALSE)
	{
		if ($global)
			$class = $name;
		else
			$class = 'Mypackage\\' . $name;
		return new $class;
	}
}

class A {
	function __construct()
	{
		echo __METHOD__ . "<br />\n";
	}
}
class B {
	function __consturct()
	{
		echo __METHOD__ . "<br />\n";
	}
}
?>

global.php

<?php
//global.php
class A {
	function __construct()
	{
		echo __METHOD__;
	}
}
?>

index.php
<?php
//index.php
namespace Mypackage;
include('namespaced.php');
include('global.php');

$foo = new Foo();

$a = $foo->factory('A'); //Mypackage\A::__construct
$b = $foo->factory('B'); //Mypackage\B::__construct

$a2 = $foo->factory('A',TRUE); // A::__construct
$b2 = $foo->factory('B',TRUE); //Will produce : Fatal error: Class 'B' not found in ...namesapced.php on line ...
?>

namespace keyword and __NAMESPACE__ constant:

Also, note, dereference means to obtain the address of a data item held in another location from (a pointer)

PHP supports two ways of abstractly accessing elements within the current namespace, the __NAMESPACE__ magic
constant, and the namespace keyword.

The value of __NAMESPACE__ is a string that contains the current namespace name. In global, un-namespaced code,
it contains an empty string.

Example #1 __NAMESPACE__ example, namespaced code

<?php
namespace MyProject;

echo '"' . __NAMESPACE__ '"'; //outputs "MyProject"
?>

Example #2 __NAMESPACE__ example, global code

<?php

echo '"' . __NAMESPACE__ '"'; // outputs ""
?>

The __NAMESPACE__ constant is useful for dynamically constructing names, for instance:

Example #3 using __NAMESPACE__ for dynamic name construction

<?php
namespace MyProject;

function get($classname)
{
	$a = __NAMESPACE__ . '\\' . $classname;
	return new $a;
}
?>

The namespace keyword can be used to explicitly request an element from the current namespace
or sub-namespace. It is the namespace equivalent of the self operator for classes.

Example #4 the namespace operator, inside a namespace.

<?php
namespace MyProject;

use blah\blah as mine; // see "Using namespaces: Aliasing/Importing"

blah\mine(); //calls function MyProject\blah\mine()
namespace \blah\mine();; //calls function MyProject\blah\mine()

namespace \func(); // calls function MyProject\func()
namespace \sub\func(); // calls function MyProject\sub\func()
namespace \cname::method(); // calls static method "method" of class MyProject \cname
$a = new namespace\sub\cname(); // instansiates object of class MyProject\sub\cname
$b = namespace\CONSTANT; //assign value of constant MyProject\CONSTANT to $b
?>

Example #5, the namespace operator, in global code

<?php

namespace\func(); // calls function func()
namespace\sub\func(); //Calls function sub\func()
namespace\cname::method(); // calls static method "method" of class cname
$a = new namespace\sub\cname(); // instansiates object of class sub\cname
$b = namespace\CONSTANT; //assigns value of constant CONSTANT to $b
?>

Using namespaces: Aliasing/Importing

The ability to refer to an external fully qualified name with an alias, or importing,
is an important feature of namespaces. This is similar to the ability of unix-based
filesystems to create symbiotic links to a file or to a directory.

All versions of PHP that support namespaces support three kinds of aliasing or importing:
aliasing a class name, aliasing an interface name, and aliasing a namespace name. PHP 5.6+
also allows aliasing or importing function and constant names.

In PHP, aliasing is accomplished with the use operator. Here is an example showing all 5 kinds
of importing:

Example #1 Importing/aliasing with the use operator

<?php
namespace foo;
use My\Full\Classname as Another;

//this is the same as use My\Full\NSname as NSname
use My\Full\NSname;

//Importing a global class
use ArrayObject;

//IMporting a function (PHP 5.6+)
use function My\Full\functionName;

//aliasing a function (PHP 5.6+)
use function My\Full\functionName as func;

//importing a constant (PHP 5.6+)
use const My\Full\CONSTANT;

$obj = new namespace\Another; //instansiates object of class foo\Another
$obj = new Another; // instansiates object of class My\Full\Classname
NSname\subns\func(); //calls function My\Full\NSname\subns\func
$a = new ArrayObject(array(1)); // instansiates object of class ArrayObject
// without the "use ArrayObject" we would instansiate an object of class foo\ArrayObject
func(); // calls function My\Full\functionName
echo CONSTANT; // echoes the value of My\Full\CONSTANT
?>

Note that for namespaced names (fully qualified namespace names containing a namespace separator,
such as Foo\Bar as opposed to global names that do not, such as FooBar), the leading backslash is
unnecessary and not recommended, as import names must be fully qualified, and are not processed 
relative to the current namespace.

PHP additionally supports a convenience shortcut to place multiple use statements on the same line

Example #2 importing/aliasing with the use operator, multiple use statements combined

<?php
use My\Full\Classname as Another, My\Full\NSname;

$obj = new Another; // instansiates object of class My\Full\Classname
NSname\subns\func(); // calls function My\Full\NSname\subns\func
?>

Importing is performed at compile-time, and so does not affect dynamic class, function or
constant names.

Example #3 Importing and dynamic names

<?php
use My\Full\Classname as Another, My\Full\NSname;

$obj = new Another; //instansiates object of clas My\Full\Classname
$a = 'Another';

$obj = new $a; //instansiates object of class Another
?>

In addition, importing only affects unqualified and qualified names. Fully qualified names 
are absolute, and unaffected by imports.

Example #4 Importing and fully qualified names

<?php
use My\Full\Classname as Another, My\Full\NSname;

$obj = new Another; //instansiates object of class My\Full\Classname
$obj = new \Another; //instansiates object of class Another
$obj = new Another\thing; // instansiates object of class My\Full\Classname\thing
$obj = new \Another\thing; // instansiates object of class Another\thing
?>

Scoping rules for importing

The use keyword must be declared in the outermost scope of a file (the global scope)
or inside namespace declarations. This is because the importing is done at compile
tiem and not runtime, so it cannot be block scoped. 

The following example will show a illegal use of the use keyword:

Example #5 Illegal importing rule

<?php
namespace Languages;

function toGreenlandic()
{
	use Languages\Danish;

	//...
}
?>

Note: Importing rules are per file basis, meaning included files will NOT inherit the 
parent file's importing rules.

Group use declarations

From PHP 7.0 onwards, classes, functions and constants being imported from the same namespace can
be grouped together in a single use statement.

<?php

//Pre php 7 code
use some\namespace\ClassA;
use some\namespace\ClassB;
use some\namespace\ClassC as C;

use function some\namespace\fn_a;
use function some\namespace\fn_b;
use function some\namespace\fn_c;

use const some\namespace\ConstA;
use const some\namespace\ConstB;
use const some\namespace\ConstC;

//PHP 7+ code
use some\namespace\{ClassA, ClassB, ClassC as C};
use function some\namespace\{fn_a, fn_b, fn_c};
use const some\namespace\{ConstA, ConstB, ConstC};

Note that you cannot alias global namespace:

use \ as test;

echo test\strlen('');

will not work

The keyword "use" has been recycled for three distinct applications:
1- to import/alias classes, traits, constants, etc. in namespaces,
2- to insert traits in classes,
3- to inherit variables in closures.

This page is only about the first application: importing/aliasing. Traits can be inserted
in classes, but this is different importing a trait in a namespace, which cannot be done in
a block scope, as pointed out in example 5.

This can be confusing, especially since all searches for the keyword "use" are directed to
the documentation here on importing/aliasing.

Note, namespace resolutions are not recursively resolved. Which is why you have to use explicit
naming in terms of pathing when you use nested levels of namespaces and importing.

Also note, we are allowed to use the same resource multiple times as long as it is imported under
a different alias at each invocation.

For example:

<?php
use Lend;
use Lend\l1;
use Lend\l1 as l3;
use Lend\l2;
use Lend\l1\Keller;
use Lend\l1\Keller as Stellar;
use Lend\l1\Keller as Zellar;
use Lend\l2\Keller as Dellar;

...

?>

If you are testing your code at the CLI, note that namespace aliases do not work!

(Before i go on, all the backslashes in this example are changed to percent signs because
i cannot get sensisble results to display in the posting, they represent /)

Suppose weh ave a class that we want to test in myclass.php:

<?php
namespace my%space;
class myclass {
	//...
}
?>

And you then go into the CLI to test it. You would like to think that this would work, as you
type it line by line:

require 'myclass.php';
use my%space%myclass; // should set 'myclass' as alias for 'my%space%myclass'
$x = new myclass; // FATAL ERROR

I believe that this is because aliases are only resolved at compile time, whereas the CLI simply 
evaluates statements. So use statements are ineffective in the CLI.

If you put your test code into test.php:

<?php
require 'myclass.php';
use my%space%myclass;
$x = new myclass;
//...
?>

It will work fine. 

Global space:

Without any namespace definition, all class and function definitions are palced into the global space - as it was
in PHP before namespaces were supported. Prefixing a name with \ will specify that the name is required from
the global space even in the context of the namespace.

Example #1 Using global space specification

<?php
namespace A\B\C;

//This function is A\B\C\fopen
function fopen() {
	// ....
	$f = \fopen(...); //call global fopen
	return $f;
}
?>

Included files will default to the global namespace.

<?php
//test.php
namespace test {
	include 'test1.inc';
	echo '-' . __NAMESPACE__ . '-<br />';
}
?>

<?php
//test1.inc
	echo '-' . __NAMESPACE__ . '-<br />';
?>

Results in:

-- //calls test1.inc first
-test- //call test.php after that

Using namespaces: fallback to global function/constant

Inside a namespace, when PHP encounters an unqualified Name in a class name, function or constant
context, it resolves these with different priorities. Class names always resolve to the current namespace
name. Thus to access internal or non-namespaced user classes, one must refer to them with their fully
qualified name as in:

Example #1 Accessing global classes inside a namespace

<?php
namespace A\B\C;
class Exception extends \Exception {}

$a = new Exception('hi'); // $a is an object of class A\B\C\Exception
$b = new \Exception('hi'); // $b is an object of class Exception

$c = new ArrayObject; // fatal error, class A\B\C\ArrayObject not found
?>

For functions and constants, PHP will fall back to global functions or constants if a namespaced
function or constant does not exist.

Example #2 global functions/constants fallback inside a namespace

<?php
namespace A\B\C;

const E_ERROR = 45;
function strlen($str)
{
	return \strlen($str) - 1;
}

echo E_ERROR . "\n"; //prints "45"
echo INI_ALL . "\n"; //prints "7" - falls back to global INI_ALL

echo strlen('hi') . "\n"; //prints "1"
if (is_array('hi')) { // prints "is not array"
	echo "is array\n";
} else {
	echo "is not array\n";
}
?>

You can use the fallback policy to provide mocks for built-in functions like time(). You therefore
have to call those functions unqualified:

<?php
namespace foo;

function time() {
	return 1234;
}

assert (1234 == time());
?>

However there's a restriction that you have to define the mock function before the first
usage in the tested class method. This is documented in Bug #68541.

You can find the mock library php-mock at GitHub.

Name resolution rules

For the purposes of these resolution rules, here are some important definitions:

Namespace name definitions

Unqualified name
	This is an identifier without a namespace separator such as Foo

Qualified name
	This is an identifier with a namespace seperator, such as Foo\Bar

Note: Foobar comes from the Military FUBAR, which is fucked up beyond all recognition

Fully qualified name
	This is an identifier with a namespace separator that begins with a namespace separator,
	such as \Foo\Bar. The namespace \Foo is also a fully qualified name.

Relative name
	This is an identifier starting with namespace, such as namespace\Foo\Bar.

Names are resolved following these resolution rules:

1. Fully qualified names always resolve to the name without leading namespace separator.
For instance \A\B resolves to A\B.

2. Relative names always resolve to the name with namespace replaced by the current namespace.
If the name occurs in the global namespace, the namespace\ prefix is stripped. For example namespace\A
inside namespace X\Y resolves to X\Y\A. The same name inside the global namespace resolves to A.

3. For qualified names the first segment of the name is translated according to the current class/namespace
import table. For example, if the namespace A\B\C is imported as C, the name C\D\E is translated to A\B\C\D\E

4. For qualified names, if no import rule applies, the current namespace is prepended to the name. For example,
the name C\D\E inside namespace A\B, resolves to A\B\C\D\E

5. For unqualified names, the name is translated according to the current import table for the respective
symbol type. This means that class-like names are translated according to the class/namespace import table,
function names according to the function import table and constants according to the constant import table.

For example, after use A\B\C; a usage such as new C() resolves to the name A\B\C(). Similarly,
after use function A\B\fn; a usage such as fn() resolves to the name A\B\fn.

6. For unqualified names, if no import rule applies and the name refers to a class-like symbol, the current
namespace is prepended. For example new C() inside namespace A\B resolves to the name A\B\C

7. For unqualified names, if no import rule applies and the name refers to a function or constant and the code
is outside the global namespace, the name is resolved at runtime. Assuming the code is in namespace A\B, here is 
how a call to function foo() is resolved:

1. It looks for a function from the current namespace: A\B\foo()

2. It tries to find and call the global function foo()

Example #1 Name resolutions illustrated

<?php
namespace A;
use B\D, C\E as F;

//function calls

foo(); //first tries to call "foo" defined in namespace "A"
	   //then calls global function "foo"

\foo(); //calls function "foo" defined in global scope

my\foo(); //calls function "foo" defined in namespace "A\my"

F(); //first tries to call "F" defined in namespace "A"
	 //then calls global function "F"

// class references

new B(); //create object of class "B" defined in namespace "A"
		 //if not found, it tries to autoload class "A\B"

new D(); //using import rules, create object of class "D" defined in namespace "B"
		 //if not found, it tries to autoload class "B\D"

new F(); //Using import rules, create object of class "E" defined in namespace "C"
		//if not found, tries to autoload class "C\E"

new \B(); //creates object of class "B" defined in global scope
		 //if not found,it tries to autoload class "B"

new \D(); //creates object of class "D" defined in global scope
		  //if not found, it tries to autoload class "D"

new \F(); //creates object of class "F" defined in global scope
		  //if not found, it tries to autoload class "F"

// static methods/namespace functions from another namespace

B\foo(); //calls function "foo" from namespace "A\B"

B::foo(); //calls method "foo" of class "B" defined in namespace "A"
		  //if class "A\B" not found, it tries to autoload class "A\B"

D::foo(); //using import rules, calls method "foo" of class "D" defined in namespace "B"
		  //if class "B\D" not found, it tries to autoload class "B\D"

\B\foo(); //calls function "foo" from namespace "B"

\B::foo(); // calls method "foo" of class "B" from global scope
			//if class "B" not found, it tries to autoload class "B"

// static methods/namespace functions of current namespace

A\B::foo(); //calls method "foo" of class "B" from namespace "A\A"
			//if class "A\A\B" not found, it tries to autoload class "A\A\B"

\A\B::foo(); //calls method "foo" of class "B" from namespace "A"
			 //if class "A\B" not found, it tries to autoload class "A\B"
?>

If you like to declare an __autoload function within a namespace or class, use the spl_autoload_register()
function to register it and it will work fine.

The term "autoload" mentioned here shall not be confused with __autoload function to autoload objects.
Regarding the __autload and namespaces resolution id like to share the following experience:

Say you have the following dir structure:

- root
		| - loader.php
		| - ns
				| - foo.php

->foo.php

<?php
namespace ns;
class foo
{
	public $say;

	public function __construct()
	{
		$this->say = "bar";
	}
}
?>

-> loader.php

<?php
//GLOBAL SPACE <--
function __autoload($c)
{
	require_once $c . ".php";
}

class foo extends ns\foo // ns\foo is loaded here
{
	public function __construct()
	{
		parent::__construct();
		echo "<br />foo" . $this->say;
	}
}
$a = new ns\foo(); // ns\foo also loads ns/foo.php just fine here
echo $a->say; //prints bar as expected
$b = new foo; //prints foobar just fine
?>

If you keep your dir/file matching namespace/class consistence the object __autoload works just fine.

But if you try to give loader.php a namespace you will oviously get a fatal error. My sample is just
1 level dir, but i have tested with a very complex and deeper structure.

As working with namespaces and using (custom or basic) autoload structure; magic function __autoload
must be defined in global scope, not in a namespace, also, not in another function or method.

<?php
namespace Glue {
	//Define your custom structure and algos
	//For autoloading in this class
	class Import
	{
		public static function load ($classname)
		{
			echo 'Autoloading class '.$classname."\n";
			require_once $classname . '.php';
		}
	}
}

//Define function __autoload in global namespace

namespace {
	function __autoload ($classname)
	{
		\Glue\Import::load($classname);
	}
}
?>

FAQ: Things you need to know about namespaces

If i don't use namespaces, should i care about any of this?

No. Namespaces do not affect any existing code in any way, or any as-yet-to-be-written code that
does not contain namespaces. You can write this code if you wish:

Example #1 Accessing global classes outside a namespace

<?php
$a = new \stdClass;
?>

Example #2 Accessing global classes outside a namespace

<?php
$a = new stdClass;
?>

How do i use internal or global classes in a namespace?

Example #3 Accessing internal classes in namespaces

<?php
namespace foo;
$a = new \stdClass;

function test(\ArrayObject $typehintexample = null) {}

$a = \DirectoryIterator::CURRENT_AS_FILEINFO;

//Extending an internal or global class
class MyException extends \Exception {}
?>

How do i use namespaces classes, functions or constants in their own namespace?

Example #4 Accessing internal classes, functions or constants in namespaces

<?php
namespace foo;

class MyClass {}

// using a class from the current namespace as a type hint
function test(MyClass $typehintexample = null) {}
// another way to use a class from the current namespace as a type hint
function test(\foo\MyClass $typehintexample = null) {}

// extending a class from the current namespace
class Extended extends MyClass {}

// accessing a global function
$a = \globalfunc();

// accessing a global constant
$b = \INI_ALL;
?>

How does a name like \my\name or \name resolve?

Names that begin with a \ always resolve to what they look like, so \my\name is in fact
my\name and \Exception is Exception

Example #5 Fully Qualified Names

<?php
namespace foo;
$a = new \my\name(); //instansiates "my\name" class
echo \strlen('hi'); //calls function "strlen"
$a = \INI_ALL; // $a is set to the value of constant "INI_ALL"

How does a name like my\name resolve?

Names that contain a backslash but do not begin with a backslash like my\name can be resolved
in 2 different ways.

If there is an import statement that aliases another name to my, then the import alias is applied
to the my in my\name.

Otherwise, the current namespace name is prepended to my\name.

Example #6 Qualified Names

<?php
namespace foo;
use blah\blah as foo;

$a = new my\name(); //instansiates "foo\my\name" class
foo\bar::name(); // calls static method "name" in class "blah\blah\bar"
my\bar(); //calls function "foo\my\bar"
$a = my\BAR; // sets $a to the value of constant "foo\my\BAR"
?>

How does an unqualified class name like name resolve?

Class names that do not contain a backslash like name can be resolved in 2 different ways.

If there is an import statement that aliases another name to name, then the import alias is applied.

Otherwise, the current namespace name is prepended to name.

Example #7 Unqualified class names

<?php
namespace foo;
use blah\blah as foo;

$a = new name(); //instansiates "foo\name" class
foo::name(); // calls static method "name" in class "blah\blah"
?>

How does an unqualified function name or unqualified constant name like name resolve?

Function or constant names that do not contain a backslash like name can be resolved in 2 different ways.

First, the current namespace name is prepended to name.

Finally, if the constant or function name does not exist in the current namespace, a global constant
or function name is used if it exists.

Example #8 Unqualified function or constant names

<?php
namespace foo;
use blah\blah as foo;

const FOO = 1;

function my() {}
function foo() {}
function sort(&$a)
{
	\sort($a); // calls the global function "sort"
	$a = array_flip($a);
	return $a;
}

my(); // calls "foo\my"
$a = strlen('hi'); // calls global function "strlen" because "foo\strlen" does not exist
$arr = array(1,3,2);
$b = sort($arr); //calls function "foo\sort"
$c = foo(); // calls function "foo\foo" - import is not applied

$a = FOO; // sets $a to value of constant "foo\FOO" - import is not applied
$b = INI_ALL; // sets $b to value of global constant "INI_ALL"
?>

Import names cannot conflict with classes defined in the same file.

The following script combinations are legal:

file1.php

<?php
namespace my\stuff;
class MyClass {}
?>

another.php

<?php
namespace another;
class thing {}
?>

file2.php

<?php
namespace my\stuff;
include 'file1.php';
include 'another.php';

use another\thing as MyClass;
$a = new MyClass; // instansiates class "thing" from namespace another
?>

there is no name conflict, even though the class MyClass exists within the my\stuff namespace,
because the MyClass definition is in a separate file. However, the next example causes a fatal
error on name conflict because MyClass is defined in the same file as the use statement.

<?php
namespace my\stuff;
use another\thing as MyClass;
class MyClass {} // fatal error: MyClass conflicts with import statement
$a = new MyClass;
?>

Nested namespaces are not allowed

PHP does not allow for nested namespaces

<?php
namespace my\stuff {
	namespace nested {
		class foo {}
	}
}
?>

However, it is easy to simulate nested namespaces like so:

<?php
namespace my\stuff\nested {
	class foo {}
}
?>

Before PHP 5.6 neither functions nor constants can be imported via the use statement.

Before PHP 5.6 the only elements that are affected by use statements are namespaces and
class names. In order to shorten a long constant or function, import its containing namespace.

<?php
namespace mine;
use ultra\long\ns\name;

$a = name\CONSTANT;
name\func();
?>
As of PHP 5.6 aliasing or importing function and constant names is allowed.

Dynamic namespace names (quoted identifiers) should escape backslash

It is very important to realize that because the backslash is used as an escape 
character with strings, it should always be doubled when used inside a string.

Otherwise, there is a risk of unintended consequences:

Example #9 Dangers of using namespaced names inside a double-quoted string

<?php
$a = "dangerous\name"; // \n is a newline inside double quoted strings
$obj = new $a;

$a = 'not\at\all\dangerous'; // no problems here
$obj = new $a;
?>

Inside a single-quoted string, the backslash escape sequence is mucher safer to use, but it is still recommended
practice to escape backslashes in all strings as a best practice.

Undefined Constants referenced using any backslash die with fatal error

Any undefined constant that is unqualified like FOO will produce a notice explaining that PHP
assumed FOO was the value of the constant. Any constant, qualified or fully qualified, that contains 
a backslash will produce a fatal error if not found.

Example #10 Undefined constants

<?php
namespace bar;
$a = FOO; // produces notice - undefined constants "FOO" assumed "FOO";
$a = \FOO; // fatal error, undefined namespace constant FOO
$a = Bar\FOO; // fatal error, undefined namespace constant bar\Bar\FOO
$a = \Bar\FOO; // fatal error, undefined namespace constant Bar\FOO
?>

Cannot override special constants NULL, TRUE, FALSE, ZEND_THREAD_SAFE or ZEND_DEBUG_BUILD

Any attempt to define a namespaced constant that is a special, built-in constant results in a fatal error

Example #11 Undefined constants

<?php
namespace bar;
const NULL = 0; //fatal error
const true = 'stupid'; //also fatal error
//etc.
?>

There is a way to define a namespaced constant that is a special, built-in constant, using define
function and setting the third parameter case_insensitive to false:

<?php
namespace foo;
define(__NAMESPACE__ . '\NULL', 10); // defines the constant NULL in the current namespace
var_dump(NULL); //will show 10
var_dump(null); //will show NULL
?>

No need to specify the namespace in your call to define(), like it happens usually
<?php
namespace foo;
define(INI_ALL, 'bar'); //produces notice - constant INI_ALL already defined, but:

define(__NAMESPACE__ . '\INI_ALL', 'bar'); // defines the constant INI_ALL in the current namespace
var_dump(INI_ALL); //will show string(3)"bar". Nothing unexpected so far

define('NULL', 10); //defines the constant NULL in the current namespace
var_dump(NULL); //will show 10
var_dump(NULL); //will show NULL
?>

If the parameter case_insensitive is set to true
<?php
namespace foo;
define(__NAMESPACE__ . '\NULL', 10, true); //produces notice - Constant null already defined
?>

Back to the SOAP Documentation!

2.2 Graph Nodes

A graph node has zero or more outbound edges. A graph node that has no outbound edges has an optional
lexical value. All graph nodes have an optional type name of type xs:QName in the namespaced name "http://www.w3.org/2001/XMLSchema"
(see XML Schema [XML Schema Part 2]).

2.2.1 Single and Multi Reference Nodes

A graph node may be single reference or multi reference. A single reference graph node has a single inbound edge.
A multi reference graph node has multiple inbound edges.

2.3 Values

A simple value is represented as a graph node with a lexical value

A compound value is represented as a graph node with zero or more outbound
edges as follows:

1. A graph node whose outbound edges are distinguished solely by their labels is known as a "struct".
The outbound edges of a struct MUST be labeled with distinct names (see 2.1.1 Edge labels)

2. A graph node whose outbound edges are distinguished solely by position is known as an "array".
The outbound edges of an array MUST NOT be labeled.

3. SOAP Encoding

SOAP Encoding provides a means of encoding instances of data that conform to the data model described in
2. SOAP Data Model. This encoding MAY be used to transmit data in SOAP header blocks and/or SOAP bodies.

Other data models, alternate encodings of the SOAP Data Model as well as unencoded data MAY also be used
in SOAP messages (see SOAP 1.2 Part 1 [SOAP Part 1], SOAP encodingStyle Attribute for specification of alternative
encoding styles and see 4. SOAP RPC Representation for restrictions on data models and encodings used to represent
SOAP Remote Procedure Calls (RPC)).

The serialization rules defined in this section are identified by the URI "http://www.w3.org/2003/05/soap-encoding".
SOAP messages using this particular serialization SHOULD indicate that fact by using the SOAP encodingStyle
attribute information item (see SOAP 1.2 Part 1 [SOAP Part 1] SOAP encodingStyle Attribute)

3.1 Mapping between XML and the SOAP Data Model

XML allows very flexible encoding of data. SOAP Encoding defines a narrower set of rules
for encoding the graphs described in 2. SOAP Data Model. This section defines the encoding at a high
level, and the subsequent sub-sections describe the encoding rules in more detail.

The encodings described in this section can be used in conjunction with the mapping of RPC requests
and responses specified in 4. SOAP RPC Representation.

The encodings are described below from the perspective of a de-serializer. In each case, the presence
of an XML serialization is presumed, and the mapping to a corresponding graph is described.

More than one encoding is typically possible for a given graph. When serializing a graph for
transmission inside a SOAP message, a representation that deserializes to the identical graph
MUST be used; when multiple such representations are possible, any of them MAY be used.

When receiving an encoded SOAP message, all representations MUST be accepted.

3.1.1 Encoding Graph Edges and Nodes

Each graph edge is encoded as an element information item and each element information item
represents a graph edge. 3.1.3 Encoding Compound Values describes the relationship between
edge labels and the [local name] and [namespace name] properties of such element information items.

The graph node at which an edge terminates is determined by examination of the serialized XML as follows:

1. If the element information item representing the edges does not have a ref attribute information item 
(see 3.1.5.2 ref Attribute Information Item) among its attributes then that element information item
is said to represent a node in the graph and the edge terminates at that node. In such cases the element
information item represents both a graph edge and a graph node.

2. If the element information item representing the edge does have a ref attribute information item
(see 3.1.5.2 ref Attribute Information Item) among its attributes, then the value of that attribute
information item MUST be identical to the value of exactly one id attribute information item
(see 3.1.5.1 id Attribute Information Item) in the same envelope.

In this case the edge terminates at the graph node represented by the element information item
on which the id attribute information item appears. That element information item MUST be in 
the scope of an encodingStyle attribute with a value of "http://www.w3.org/2003/05/soap-encoding"
(see SOAP 1.2 Part 1 [SOAP Part 1], SOAP encodingStyle Attribute)

All nodes in the graph are encoded as described in 1 above. Additional inbound edges for multi
reference graph nodes are encoded as described in 2 above.

3.1.2 Encoding Simple Values

The lexical value of a graph node representing a simple value is the sequence of Unicode characters
identified by the character information item children of the element information item representing
that node. The element information item representing a simple value node MAY have among its attributes
a 'nodeType' attribute information item (see 3.1.7 nodeType Attribute Information Item).

Note that certain Unicode characters cannot be represented in XML (see XML 1.0 [XML 1.0])

3.1.3 Encoding Compound Values

An outbound edge of a graph node is encoded as an element information item child of
the element information item that represents the node (see 3.1.1 Encoding Graph Edges and Nodes).
Particular rules apply depending on what kind of compound value the graph node represents. These 
rules are as follows:

1. For a graph edge which is distinguished by label, the [local name] and [namespace name]
properties of the child element information item together determine the value of the edge label.

2. For a graph edge which is distinguished by position:

	The ordinal position of the graph edge corresponds to the position of the child information item
	relative to its siblings

	The [local name] and [namespace name] properties of the child element information item are not significant

3. The element information item representing a compound value node MAY have among its attributes a nodeType attribute
	information item (see 3.1.7 nodeType Attribute Information Item)

4. The following rules apply to the encoding of a graph node that represents an "array"
	
	The element information item representing an array node MAY have among its attributes an
	itemType attribute information item (see 3.1.4.1 item Type Attribute Information Item)

	The element information item representing an array node MAY have among its attributes
	an arraySize attribute information item (see 3.1.6 arraySize Attribute Information Item)

5. If a graph edge does not terminate in a graph node then it can either be omitted from the serialization
or it can be encoded as an element information item with an xsi:nil attribute information item whose
value is "true"

3.1.4 Computing the Type Name Property

The type name property of a graph node is a {namespace name, local name} pair computed as follows:

1. If the element information item representing the graph node has an xsi:type attribute information item
	among its attributes then the type name property of the graph node is the value of the xsi:type attribute
	information item

	Note: This attribute is of type xs:QName (see XML Schema [XML Schema Part 2]); its value consists of the
	pair {namespace name, local name}. Neither the prefix used to construct the QName nor any information
	relating to any definition of the type is considered to be part of the value. The SOAP Graph carries only
	the qualified name of the type.

2. Otherwise if the parent element information item of the element information item representing the graph node
	has an enc:itemType attribute information item (see 3.1.4.1 itemType Attribute Information Item) among its
	attributes then the type name property of the graph node is the value of the enc:itemType attribute information
	item

3. Otherwise the value of the type name property of the graph node is unspecified

Note:

These rules define how the type name property of a graph node in a graph is computed from a serialized encoding.
This specification does not mandate validation using any particular schema language or type system. Nor does 
it include built in types or provide any standardized faults to reflect value/type name conflicts.

However, nothing prohibits development of additional specifications to describe the use of SOAP Encoding with
particular schema languages or type systems. Such additional specifications MAY mandate validation using
particular schema languag, and MAY specify faults to be generated if validation fails.

Such additional specifications MAY specify augmentations to the deseralized graph based on information determined
from such a validation. The use by SOAP Encoding of xsi:type is intended to facilitate integration with the W3C
XML Schema language (see C. Using W3C XML Schema with SOAP Encoding).

Other XML based schema languages, data schemas and programmatic type systems MAY be used but only to the extent
that they are compatible with the serialization described in this specification.

3.1.4.1 itemType Attribute Information Item

The itemType attribute information item has the following Infoset properties:

A [local name] of itemType.

A [namespace name] of "http://www.w3.org/2003/05/soap-encoding"

A [specified] property with a value of "true"

The type of the itemType attribute information item is xs:QName. The value of the itemType attribute
information item is used to compute the type name property (see 3.1.4 Computing the Type Name Property)
of members of an array.

3.1.5 Unique identifiers

3.1.5.1 id Attribute Information Item

The id attribute information item has the following Infoset properties:

A [local name] of id.

A [namespace name] of "http://www.w3.org/2003/05/soap-encoding"

A [specified] property with a value of "true"

The type of the id attribute information item is xs:ID. The value of the id
attribute information item is a unique identifier that can be referred to by a ref 
attribute information item (see 3.1.5.2 ref Attribute Information Item)

3.1.5.2 ref Attribute Information Item

The ref attribute information item has the following Infoset properties:

A [local name] of ref

A [namespace name] of "http://www.w3.org/2003/05/soap-encoding"

A [specified] property with a value of "true"

The type of the ref attribute information item is xs:IDREF. The value of the ref
attribute information item is a reference to a unique identifier defined by an id
attribute information item (see 3.1.5.1 id Attribute Information Item)

3.1.5.3 Constraints on id and ref Attribute Information Items

The value of a ref attribute information item MUST also be the value of exactly one
id attribute information item

A ref attribute information item and an id attribute information item MUST NOT appear
on the same element information item.

3.1.6 arraySize Attribute Information Item

The arraySize attribute information item has the following Infoset properties:

A [local name] of arraySize

A [namespace name] of "http://www.w3.org/2003/05/soap-encoding"

The type of the arraySize attribute information item is enc:arraySize.
The value of the arraySize attribute information item MUST conform to the
following EBNF grammar

[1]  arraySizeValue  	::= ("*" | concreteSize) nextConcreteSize*

[2] nextConcreteSize 	::= whitespace concreteSize

[3] concreteSize 		::= [0-9]+

[4] white space 		::= (#x20 | #x9 | #xD | #xA)+

The arraySize attribute conveys a suggested mapping of a SOAP array to a multi-dimensional
program data structure. The cardinality of the arraySize list represents the number of dimensions,
with individual values providing the extents of the respective dimensions.

When SOAP encoding multidimensional arrays, node are selected such that the last subscript
(i.e, the subscript corresponding to the last specified dimension) varies most rapidly, and so
on with the first varying most slowly.

An asterisk MAY be used only in place of the first size to indicate a dimension of unspecified
extent; asterisks MUST NOT appear in other positions in the list. The default value of the
arraySize attribute information item is "*", i.e, a single dimension of unspecified extent.

3.1.7 nodeType Attribute Information Item

The nodeType attribute information item has the following Infoset properties:

A [local name] of nodeType.

A [namespace name] of "http://www.w3.org/2003/05/soap-encoding"

A [specified] property with a value of "true"

The type of the nodeType attribute information item is enc:nodeType.

The value of the nodeType attribute information item MUST, if present, be one of the strings "simple"
or "struct" or "array". The value indicates what kind of a value this node represents - a simple value,
a compound struct value or a compound array value respectively.

3.2 Decoding Faults

During deserialization a SOAP receiver:

SHOULD generate an "env:Sender" SOAP fault with a subcode of enc:MissingID if the message contains 
a ref attribute information item but no corresponding id attribute information item (see 3.1.5.3 Constraints
on id and ref Attribute Informaton Items)

SHOULD generate an "env:Sender" SOAP fault with a subcode of enc:DuplicateID if the message contains two
or more id attribute information item that have the same value. (see 3.1.5.3 Constraints on id and ref Attribute
Information Items)

MAY generate an "env:Sender" SOAP fault with a subcode of enc:UntypedValue if the type name property
of an encoded graph node is unspecified

4. SOAP RPC Representation

One of the design goals of SOAP is to facilitate the exchange of messages that map conveiniently to definitions
and invocations of methods and producers in commonly used programming languages. For that purpose, this
section defines a uniform representation of remote procedure call (RPC) requests and responses. It does not
define actual mappings to any particular programming language. The representation is entirely platform-independent
and considerable effort has been made to encourage usage that is consistent with the Web in general.

As mentioned in section 2. SOAP Data Model, use and implementation of the SOAP RPC Representation is OPTIONAL

THe SOAP encodingStyle attribute information item (see SOAP 1.2 Part 1 [SOAP Part 1] SOAP encodingStyle Attribute)
is used to indicate the encoding style of the RPC representation. The encoding thus specified MUST support the
2. SOAP Data Model. The encoding style defined in 3. SOAP Encoding supports such constructs and is therefore
suitable for use with the SOAP RPC Representation.

This SOAP RPC Representation is not predicated on any SOAP protocol binding. When SOAP is bound to HTTP, an RPC invocation
maps naturally to an HTTP request and an RPC response maps to an HTTP response. (see 7. SOAP HTTP Binding). However,
the SOAP RPC Representation is not limited to the SOAP HTTP Binding.

To invoke an RPC, the following information is needed:

The address of the target SOAP node.

A procedure or method name.

The identities and values of any arguments to be passed to the procedure or method. Arguments used to identify Web
resources SHOULD be distinguished from those representing data or control information (see 4.1.1 Identification of RPC
Resources)

Values for properties as required by any features of the binding to be used. FOr example, "GET" or "POST" for the 
http://www.w3.org/2003/05/soap/features/web-method/Method property of the 6.4 SOAP Web Method Feature.

Optional header data.

SOAP RPC relies on the protocol binding to provide a mechanism for carrying the URI of the target SOAP node. For
HTTP the request URI indicates the resource against which the invocation is being made. Other than requiring
it to be a valid URI, SOAP places no restriction on the form of an identifier (see RFC 3986 [RFC 3986] for more information
on URIs). The section 4.1.1 Identification of RPC Resources furhter discusses the use of URIs for identifying
RPC resources.

The SOAP RPC Representation employs the 6.2 SOAP Request-Response Message Exchange Pattern and 6.3 SOAP Response Message
Exchange Pattern. Use of the SOAP RPC Representation with other MEPs MAY be possible, but is beyond the scope of this
representation.

4.1 Use of RPC on the World Wide Web

The following guidelines SHOULD be followed when deploying SOAP RPC applications on the World Wide Web.

4.1.1 Identification of RPC Resources

The World Wide Web identifies resources with URIs, but common programming conventions convey identification
information in the arguments to procedures, or in the names of those procedures. For example, the call:

updateQuantityInStock(PartNumber="123", NewQuantity="200")

suggests that the resource to be updated is the QuantityInStock for PartNumber "123". Accordingly,
when mapping to or from a programming language method or procedure, any arguments that serve to identify
resources (such as the part number above) should when practical be represented in the URI to which the
SOAP message is addressed.

When mapping to or from a programming language method or procedure, the name of which identifies or
qualifies the identification of a resource(such as QuantityInStock above), such naming or qualification
should when practical be represented in the URI to which the SOAP message is addressed. No standard
means of representation of arguments or method names is provided by this specification.

Note: Conventions for specific URI encodings of procedure names and arguments, as well for controlling
the inclusion of such arguments in the SOAP RPC body could be established in conjunction with the
development of Web Services interface description languages.

They could be developed when SOAP is bound to particular programming languages or could be established
on an application- or procedure-specific basis.

4.2.1 Distinguishing Resource Retrievals from other RPCs

The World Wide Web depends on mechanisms that optimize commonly performed information retrieval tasks.
Specifically, protocols such as HTTP [RFC 2616] provide a GET method which is used to perform safe
retrievals, i.e, to perform retrievals that are idempotent, free of side effects, and for which
security considerations do not preclude the use of cached results or URI-based resource identification.

Certain procedure or method calls represent request for information retrieval. For example, the call:

getQuantityInStock(PartNumber="123")

might be used to retrieve the quantity established in the example above.

The following conventions can be employed to implement SOAP retrievals and other RPCs on the Web:

The conventions can be employed to imeplement SOAP retrievals and other RPCs on the Web:

The conventions described in 4.1.1 Identification of RPC Resources are used to identify the resource with a URI.

In case where all the arguments have been represented in the URI, no SOAP header blocks are to be transmitted
and the operation is a safe retrieval, the 6.4 SOAP Web Method Feature and the 6.3 SOAP Response Message Exchange
Pattern are used. Accordingly, no SOAP envelope is transmitted for the request, and the http://www.w3.org/2003/05/soap/features/web-method/Method
property is set to "GET". The results of the retrieval area a SOAP RPC response as described in 4.2.2 RPC Response

In cases where the operation to be performed is not a retrieval, when SOAP header blocks are to be transmitted (a digital
signature, for example) or when a retrieval is not safe, the 6.4 SOAP Web Method Feature and the 6.2 SOAP Request-Response
Message Exchange Pattern are used.

The request envelope is encoded as described in 4.2.1 RPC Invocation, and the results are as described in 4.2.2 RPC
Response. The http://www.w3.org/2003/05/soap/features/web-method/Method property is set to "POST".

The SOAP RPC Representation does not define any other value for the http://www.w3.org/2003/05/soap/features/web-method/Method

4.2 RPC and SOAP Body

RPC invocations (except for safe retrievals: see 4.1.2 Distinguishing Resource Retrievals from other RPCs) and responses
are both carried in the SOAP Body element (see SOAP 1.2 Part 1 [SOAP Part 1] SOAP Body) using the following representation:

4.2.1 RPC Invocation

An RPC invocation is modeled as follows:

The invocation is represented by a single struct containing an outbound edge for each [in] or [in/out]
parameter. The struct is named identically to the procedure or method and the conventions of B. Mapping
Application-Defined Names to XML Names SHOULD be used to represent method names that are not legal XML names.

Each outbound edge has a label corresponding to the name of the parameter. The conventions of B. Mapping Application-Defined
Names to XML Names SHOULD be used to represent parameter names that are not legal XML names.

Applications MAY process invocations with missing parameters but also MAY fail to process the invocation
and return a fault.

4.2.2 RPC Response

An RPC response is modeled as follows:

The response is represented by a single struct and containing an outbound edge for the return valued and each
[out] or [in/out] parameter. The name of the struct is not significant.

Each parameter is represented by an outbound edge with a label corresponding to the name of the parameter.
The conventions of B. Mapping Application-Defined Names to XML Names SHOULD be used to represent parameter names
that are not legal XML names.

A non-void return value is represented as follows:

1. There MUST Be an outbound edge with a local name of result and a namespace name of "http://www.w3.org/2003/05/soap-rpc"
which terminates in a terminal node

2. The type of that terminal node is a xs:QName and its value is the name of the outbound edge which terminates in the
actual return value.

If the return value of the procedure is void then an outbound edge with a local name of result and a namespace name of
"http://www.w3.org/2003/05/soap-rpc" MUST NOT be present.

Invocation faults are handled according to the rules in 4.4 RPC Faults. If a protocol binding adds additional rules
for fault expression, those MUST also be followed.

4.2.3 SOAP Encoding Restriction

When using SOAP encoding (see 3. SOAP Encoding) in conjunction with the RPC convention described here, the SOAP
Body MUST contain only a single child element information item, that child being the serialized RPC invocation
or response struct.

4.3 RPC and SOAP Header

Additional information relevant to the encoding of an RPC invocation but not part of the formal procedure
or method signature MAY be expressed in a SOAP envelope carrying an RPC invocation or response. Such additional
information MUST be expressed as SOAP header blocks.

4.4 RPC Faults

The SOAP RPC Representation introduces additional SOAP fault subcode values to be used in conjunction with the
fault codes described in SOAP 1.2 Part 1 [SOAP Part 1] SOAP Fault Codes

Errors arising during RPC invocations are reported according to the following rules:

1. A fault with a Value of Code set to "env:Receiver" SHOULD be generated when the receiver cannot handle the message
because of some temporary condition, e.g, when it is out of memory.

Note: Throughout this document, the term "Value of Code" is used as a shorthand for "value of the Value child element
information item of the Code element information item" (see SOAP 1.2 Part 1 [SOAP Part 1], SOAP Code Element)

2. A fault with a Value of Code set to "env:DataEncodingUnknown" SHOULD be generated when the arguments are encoded
in a data encoding unknown to the receiver.

3. A fault with a Value of CCode set to "env:Sender" and a Value of Subcode set to "rpc:ProcedureNotPresent"
MAY be generated when the receiver does not support the procedure or method specified.

Note: Throughout this document, the term "Value of Subcode" is used as a shorthand for "value of the Value
child element information item of the Subcode element information item" (see SOAP 1.2 Part 1 [SOAP Part 1],
SOAP Subcode element).

4. A fault with a Value of Code set to "env:Sender" and a Value of Subcode set to "rpc:BadArguments" MUST
be generated when the receiver cannot parse the arguments or when there is a mismatch in number and/or
type of the arguments between what the receiver expects and what was sent.

5. Other faults arising in an extension or from the application SHOULD be generated as described in SOAP
1.2 Part 1 [SOAP Part 1] SOAP Fault Codes

In all cases the values of the Detail and Reason element information items are implementation-defined. Details
of their use MAY be specified by an external document.

Note: Senders might receive different faults from those listed above in response to an RPC invocation if
the receiver does not support the (optional) RPC convention described here.

5. A Convention for Describing Features and Bindings

This section describes a convention describing Features (including MEPs) and Bindings in terms of properties
and property values. The convention is sufficient to describe the distributed states of Feature and Binding
specifications as mandated by the Binding Framework (see SOAP 1.2 Part 1 [SOAP Part 1] SOAP Protocol Binding
Framework) and it is used to describe a Request-Response MEP (see 6.2 SOAP Request-Response Message Exchange
Pattern), a Response MEP (see 6.3 SOAP Response Message Exchange Pattern), the SOAP Web Method feature
(see 6.4 SOAP Web Method Feature) and the SOAP HTTP Binding (see 7. SOAP HTTP Binding) elsewhere in this
document.

Along with the convention itself, an informal model is defined that describes how properties propagate
through a SOAP system. Note that this model is intended to be illustrative only, and is not meant
to imply any constraints on the structure or layering of any particular SOAP implementation.

5.1 Model and Properties

In general, a SOAP message is the information that one SOAP node wishes to exchange with another SOAP
node according to a particular set of features, including a MEP. In addition, there may be information
essential to exchanging a message that is not part of the message itself. Such information is sometimes
called message metadata.

In the model, the message, any message metadata, and the various information items that enable features
are represented as abstractions called properties.

5.1.1 Properties

Under the convention, properties are represented as follows:

Properties are named with URIs.

Where appropiate, property values SHOULD have an XML Schema [XML Schema Part 1] [XML Schema Part 2] type
listed in the specification which introduces the property

5.1.2 Property Scope

Properties within a SOAP node differ in terms of their scope and the origins of their values. As 
shown in the figure below, we make the distinction between per-message-exchange properties and more
widely scoped properties by assigning them to different containers called Message Exchange Context
and Environment Context respectively.

All properties, regardless of their scope, are shared by a SOAP node and a particular Binding.

						SOAP Node
			<<<<<<<<<<<< 		 >>>>>>>>>>>>>>
		Properties 					Properties (including exchanged messages)
			V 								V
			V 								V
			V 								V
		Environment 				Message Exchange Context (Per-message exchange context carrying exchange (instance) specific properties)
		Context (Environment  				V
containing per-Node properties.  			V
Externally observable and changeable) 		V
	V 				V 						V
	V 				V 						V
	V 				V 						V
Properties 		Properties 				Properties (including exchanged messages)
 					V 						V
 					>>>>>>>>>>>><<<<<<<<<<<<<
 							   V
 							   V
 							   V
 							Binding
 								V
 								V
 							Underlying
 							Protocol
 							 	^
 							 	^
 							 	^
 							 	V
 							 	V
 							 	V
 							   Net


Figure 1: Model describing properties shared between SOAP and Binding

5.1.2.1 Message Exchange Context

A message exchange context is a collection of properties whose scope is limited
to an instance of a given message exchange pattern. An example of a message exchange
context property is the identifier of the message exchange pattern in use.

5.1.2.2 Environment Context

The Environment Context is a collection of properties whose scope extends beyond an instance
of a given message exchange pattern. Examples of Environment Context properties are the IP address
of the SOAP node or the current date and time.

The values of properties in Environment Context may depend upon local circumstances (as depicted by the
external arrow from Environment Context in the figure above). More specifically, the properties in the 
example could be influenced by an operating system user ID on whose behalf a message exchange is being
executed.

The mapping of information in a particular implementation to such properties is outside of the binding
framework although the abstract representation of such information as properties is not.

5.1.3 Properties and Features

A feature may be expressed through multiple properties and a single property may enable more than one feature.
For example, the properties called User ID and Password may be used to enable a feature called Authentication.
As a second example, a single property called Message ID could be used to enable one feature called Transaction
and a second feature called Message Correlation.

6. SOAP-Supplied Message Exchange Patterns and Features

6.1 Property Conventions for SOAP Message Exchange Patterns

Table 2 describes the properties (in accordance with the property naming conventions defined in this document)
that support the description of message exchange patterns (MEPs). Other properties may be involved in the specification
of particular MEPs, but the properties in this table are generally applicable to all MEPs.

Table 2: Property definitions supporting the description of MEPs

Property name: http://www.w3.org/2003/05/soap/bindingFramework/ExchangeContext/ExchangePatternName
Value: The name of the MEP in operation
Type: xs:anyURI

Property name: http://www.w3.org/2003/05/soap/bindingFramework/ExchangeContext/FailureReason
Value: A value that denotes a pattern-specific, binding-independent reason for the failure of a message exchange.
Underlying protocol binding specifications may define properties to convey more binding-specific details of the
failure
Type: xs:anyURI

Property name: http://www.w3.org/2003/05/soap/bindingFramework/ExchangeContext/Role
Value: The identifier of the pattern-specific role of the local SOAP node participating
in the message exchange
Type: xs:anyURI

Property name: http://www.w3.org/2003/05/soap/bindingFramework/ExchangeContext/State
Value: The identifier of the current state of the message exchange. This value is managed by the binding
instance and may be inspected by other entities monitoring the progress of the message exchange
Type: xs:anyURI

6.2 SOAP Request-Response Message Exchange Pattern

This section defines the message exchange pattern (MEP) called "Request-Response". The
description is an abstract presentation of the operation of this MEP. It is not intended
to describe a real implementation or to suggest how a real implementation should be structured.

6.2.1 SOAP Feature Name

This message exchange pattern is identified by the URI (see SOAP 1.2 Part 1 [SOAP Part 1] SOAP Features)

"http://www.w3.org/2003/05/soap/mep/request-response/"

6.2.2 Description

The SOAP Request-Response MEP defines a pattern for the exchange of a SOAP message acting
 as a request followed by a message acting as a response. The response message MAY contain
 a SOAP envelope, or else the response MUST be a binding-specific message indicating that the
 request has been received. In the absence of failure in the underlying protocol, this MEP
 consists of exactly two messages.

In the normal operation of a message exchange conforming to the Request-Response MEP, a request
message is first transferred from the requesting SOAP node to the responding SOAP node.
Following the successful processing of the request message by the responding SOAP node,
a response message is transferred from the responding SOAP node to the requesting
SOAP node.

Abnormal operationg during a Request-Response message exchange might be caused by a failure
to transfer the request message, a failure at the responding SOAP node to process the
request message, or a failure to transfer the response message. Such failures might
be silent at either or both of the requesting and responding SOAP nodes involved, or
might result in the generation of a SOAP or binding-specific fault (see 6.2.4 Fault
Handling).

Also, during abnormal operation each SOAP node involved in the message exchange might
differ in its determination of the successful completion of the message exchange.

The scope of a Request-Response MEP is limited to the exchange of a request message
and a response message between one requesting and one responding SOAP node. This
pattern does not mandate any correlation between multiple requests nor specific
timing for multiple requests.

Implementations MAY choose to support multiple ongoing requests (and associated
response processing) at the same time.

6.2.3 State Machine Description

The Request-Response MEP defines a set of properties described in Table 3.

Table 3: Property definitions for Request-Response MEP

Property name: http://www.w3.org/2003/05/soap/mep/OutboundMessage

Value: An abstract structure that represents the current outbound message in the
message exchange. This abstracts both SOAP Envelope and any other information
structures that are transferred along with the envelope 

Type: Not specified

Property name: http://www.w3.org/2003/05/soap/mep/InboundMessage

Value: An abstract structure that represents the current inbound message in the
message exchange. This abstracts both SOAP Envelope and any other information structures that
are transferred along with the envelope 

type: Not specified

Property name: http://www.w3.org/2003/05/soap/mep/ImmediateDestination

Value : The identifier of the immediate destination of an outbound message

Type: xs:anyURI

Property name: http://www.w3.org/2003/05/soap/mep/ImmediateSender

Value : The identifier of the immediate sender of an inbound message

Type: xs:anyURI

To intiate a message exchange conforming to the Request-Response MEP, the requesting
SOAP node instansiates a local message exchange context. Table 4 describes how the
context is initialized.

Table 4: Instansiation of a Message Exchange Context for a requesting SOAP node

Property name: http://www.w3.org/2003/05/soap/bindingFramework/ExchangeContext/ExchangePatternName
value: "http://www.w3.org/2003/05/soap/mep/request-response"

Property name: http://www.w3.org/2003/05/soap/bindingFramework/ExchangeContext/FailureReason
Value: "None"
Notes: A relative URI whose base URI is the value of the property named: 
http://www.w3.org/2002/12/soap/bindingFramework/ExchangeContext/ExchangePatternName

Property name: http://www.w3.org/2003/05/soap/bindingFramework/ExchangeContext/Role
Value: "RequestingSOAPNode"
Notes: A relative URI whose base URI is the value property named:
http://www.w3.org/2002/12/soap/bindingFramework/ExchangeContext/ExchangePatternName

Property name: http://www.w3.org/2003/05/soap/bindingFramework/ExchangeContext/State
Value: "Init"
Notes: A relative URI whose base URI is the value of the property named:
http://www.w3.org/2002/12/soap/bindingFramework/ExchangeContext/Role

Property name: http://www.w3.org/2003/05/soap/mep/OutboundMessage
Value: An abstraction of the request message

Property name: http:://www.w3.org/2003/05/soap/mep/ImmediateDestination
Value: An identifier (URI) that denotes the responding SOAP node.

There may be other properties related to the operation of the message exchange
context instance. Such properties are initialized according to their own feature
specifications.

Once the message exchange context is initialized, control of the context is passed
to a (conforming) local binding instance.

The diagram below shows the logical state transition at the requesting and responding SOAP
nodes during their lifetime of the message exchange. At each SOAP node, the local binding
instance updates (logically) the value of the:

http://www.w3.org/2003/05/soap/bindingFramework/ExchangeContext/Role property of the local
message exchange context:

Requesting SOAP Node

Init
V
V
V
Requesting >>>>>>>>  Sending + Receiving
V 							V
V 	<<<<<<<<<<<<<<<<<<<<<<	V
V 	V						V
V 	V						V
Fail 					Success

Responding SOAP Node

Init
V
V
V
Receiving
V       >>>>>>>>>>>>>> Receiving + Sending
V 								V
V  								V
V  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<V
Fail 							Success


Figure 2: Request-Response MEP State Transition Diagram

When the local binding instance at the responding SOAP node starts to receive
an inbound request message, it (logically) instansiates a message exchange context.
Table 5 describes the properties that the binding initializes as part of the context's
instansiation.

Table 5: instansiation of Message Exchange Context for an inbound request message at a 
responding SOAP node

Property name: http://www.w3.org/2003/05/soap/bindingFramework/ExchangeContext/ExchangePatternName
Value: "http://www.w3.org/2003/05/soap/mep/request-response"
Notes: Initialized as early as possible during teh life cycle of the message exchange

Property name: http://www.w3.org/2003/05/soap/bindingFramework/ExchangeContext/FailureReason
Value: "None"
Notes: A relative URI whose base URI is the value of the property named:
http://www.w3.org/2002/12/soap/bindingFramework/ExchangeContext/ExchangePatternName

Property name: http://www.w3.org/2003/05/soap/bindingFramework/ExchangeContext/Role
value: "RespondingSOAPNode"
Notes: A relative URI whose base URI is the value of the property named:
http://www.w3.org/2002/12/soap/bindingFramework/ExchangeContext/ExchangePatternName. Initialized
as early as possible during the life cycle the message exchange.

Property name: http://www.w3.org/2003/05/soap/bindingFramework/ExchangeContext/State
Value: "Init"
Notes: A relative URI whose base URI is the value of the property named:
http://www.w3.org/2002/12/soap/bindingFramework/ExchangeContext/Role

When the requesting and responding SOAP nodes transition between states, the local binding
instance (logically) updates a number of propertie. Table 6 and Table 7 describe these
updates for the requesting and the responding SOAP nodes, respectively.

Table 6: Requesting SOAP Node State Transitions

CurrenState

"Init" 				Transition Condition: Unconditional
					NextState: "Requesting"
					Action: Initiate transmission of request message abstracted in http://www.w3.org/2003/05/soap/mep/OutboundMessage

"Requesting" 		Transition Condition: Message transmission failure
 					NextState: "Fail"
 					Action: Set http://www.w3.org/2003/05/soap/bindingFramework/ExchangeContext/FailureReason to "transmissionFailure"

 					Transition Condition: Start receiving response message
 					NextState: "Sending+Receiving"
 					Action: Set http://www.w3.org/2003/05/soap/mep/ImmediateSender to denote the sender of the response
 					message (may differ from the values in http://www.w3.org/2003/05/soap/mep/ImmediateDestination).
 					Start making an abstraction of the response message available in http://www.w3.org/2003/05/soap/mep/InboundMessage

"Sending+Receiving" Transition Condition: Message exchange failure
 					NextState: "Fail"
 					Action: Set http://www.w3.org/2003/05/soap/bindingFramework/ExchangeContext/FailureReason to "exchangeFailure"

 					Transition Condition: Completed sending request message. Completed receiving response message.
 					NextState: "Success"
 					Action: If a SOAP envelope is received in the response (i.e, in http://www.w3.org/2003/05/soap/mep/InboundMessage),
 					then process it according to the SOAP processing model.

Table 7: Responding SOAP Node State Transitions

CurrentState

"Init" 				Transition Condition: Start receiving request message
					NextState: "Receiving"
					Action: Set http://www.w3.org/2003/05/soap/mep/ImmediateSender to denote the sender of the
					request message (if determinable). Start making an abstract of the request message available
					in http://www.w3.org/2003/05/soap/mep/InboundMessage. Pass control of message exchange context
					to SOAP processor.

"Receiving" 		Transition Condition: Message reception failure
					NextState: "Fail"
					Action: Set http://www.w3.org/2003/05/soap/bindingFramework/ExchangeContext/FailureReason to
					"receptionFailure"

"Receiving+Sending" Transition Condition: Message exchange failure
					NextState: "Fail"
					Action: Set http://www.w3.org/2003/05/soap/bindingFramework/ExchangeContext/FailureReason
					to "exchangeFailure"

					Transition Condition: Completed receiving request message. Completed sending response message.
					NextState: "Success"

Bindings that implement this MEP MAY provide for streaming of SOAP responses. That is, responding SOAP nodes MAY begin
transmission of a SOAP response while a SOAP request is still being received and processed. When SOAP nodes implement
bindings that support streaming, the following rules apply

All the rules in SOAP 1.2 Part 1 [SOAP Part 1] Binding Framework regarding streaming of individual SOAP messages MUST be
obeyed for both request and response SOAP messages.

When using streaming SOAP bindings, requesting SOAP nodes MUST avoid deadlock by accepting and if necessary processing
SOAP response information while the SOAP request is being transmitted.

Note: Depending on the implementation used and the size of the messages involved, this rule MAY require that SOAP 
application stream application-level response processing in parallel with request generation.

A requesting SOAP node MAY enter the "Fail" state, and thus abort transmission of the outbound SOAP request, based
on information contained in an incoming streamed SOAP response.

6.2.4 Fault Handling

During the operation of the Request-Response MEP, the participating SOAP nodes may generate SOAP faults.

If a SOAP fault is generated by the responding SOAP nodes while it is in the "Receiving" state, the SOAP fault
is made available in http://www.w3.org/2003/05/soap/mep/OutboundMessage and the state machine transitions to the
"Receiving+Sending" state.

This MEP makes no claims about the disposition of handling of SOAP faults generated by the requesting SOAP node
during any processing of the response message that follows the "Success" state in the requesting SOAP nodes 
state transition table (see Table 6)

6.3 SOAP Response Message Exchange Pattern

This section defines the message exchange pattern (MEP) called "SOAP Response". The description is an abstract
presentation of the operation of this MEP. It is not intended to describe a real implementation or to suggest
how a real implementation should be structured.

6.3.1 SOAP Feature Name

This message exchange pattern is identified by the URI (see SOAP 1.2 Part 1 [SOAP Part 1] SOAP Features)

"http://www.w3.org/2003/05/soap/mep/soap-response/"

6.3.2 Description

The SOAP Response MEP defines a pattern for the exchange of a non-SOAP message acting as a request followed by
a SOAP message acting as a response. In the absence of failure in the underlying protocol, this MEP consists
of exactly two messages, only one of which is a SOAP message.

A request transmitted in a binding specific manner that does not include a SOAP envelope and hence does not
involve any SOAP processing by the receiving SOAP node.

A response message which contains a SOAP envelope. The MEP is completed by the processing of the SOAP envelope
following the rules of the SOAP processing model (See SOAP 1.2 part 1 [SOAP Part 1], section SOAP Processing Model)

Abnormal operation during a SOAP Response message exchange might be caused by a failure to transfer the request 
message or the response message. Such failures might be silent at either or both of the requesting and responding
SOAP nodes involved, or might result in the generation of a SOAP or binding-specific fault (see 6.3.4 Fault
Handling).

Also, during abnormal operation each SOAP node involved in the message exchange might differ in its determination
of the successful completion of the message exchange.

The scope of a SOAP Response MEP is limited to the request for an exchange of a response message between one
requesting and one responding SOAP node. This pattern does not mandate any correlation between multiple requests
nor specific timing for multiple requests. Implementations MAY choose to support multiple ongoing requests
(and associated response processing) at the same time.

Note: This MEP cannot be used in conjunction with features expressed as SOAP header blocks in teh request
because there is no SOAP envelope in which to carry them.

6.3.3 State Machine Description

the SOAP Response MEP defines a set of properties described in Table 8

Table 8 : Property definitions for SOAP Response MEP

Property Name 					Property Desc 															Property Type

http://www.w3.org/2003/ 		An abstract structure that represents the current outbound message in 	Not Specified
05/soap/mep/OutboundMessage 	the message exchange. This abstracts both SOAP Envelope Infoset
 								(which MAY be null) and any other information structures that are 
 								transferred along with the envelope

http://www.w3.org/2003/
05/soap/mep/InboundMessage 		An abstract structure that represents the current inbound message in 	Not specified
								the message exchange. This abstracts both SOAP Envelope Infoset
								(which MAY be null) and any other information structures that are
								transferred along with the envelope

http://www.w3.org/2003/ 		The identifier of the immediate destination of an outbound message 		xs:anyURI
05/soap/mep/Immediate
Destination

http://www.w3.org/2003/ 		The identifier of the immediate sender of an inbound message 			xs:anyURI
05/soap/mep/Immediate
Sender

To initiate a message exchange conforming to the SOAP Response MEP, teh requesting SOAP node instansiates a local
message exchange context. Table 9 describes how the context is initialized.

Table 9: Instansiation of a Message Exchange Context for a requesting SOAP Node

Property Name: http://www.w3.org/2003/05/soap/bindingFramework/ExchangeContext/ExchangePatternName
Value: "http://www.w3.org/2003/05/soap/mep/soap-response/"

Property name: http://www.w3.org/2003/05/soap/bindingFramework/ExchangeContext/FailureReason
Value: "None"
Notes: A relative URI that will be resolved against the value of the property named 
http://www.w3.org/2002/12/soap/bindingFramework/ExchangeContext/ExchangePatternName

Property name: http://www.w3.org/2003/05/soap/bindingFramework/ExchangeContext/Role
Value: "RequestingSOAPNode"
Notes: A relative URI that will be resolved against the value of the property named 
http://www.w3.org/2002/12/soap/bindingFramework/ExchangeContext/ExchangePaternName

Property name: http://www.w3.org/2003/05/soap/bindingFramework/ExchangeContext/State
Value: "Init"
Notes: A relative URI whose base URI is the value of the property named 
http://www.w3.org/2002/12/soap/bindingFramework/ExchangeContext/Role

Property name: http://www.w3.org/2003/05/soap/mep/OutboundMessage
Value: An abstraction of the request message that does not include a SOAP envelope infoset

Property name: http://www.w3.org/2003/05/soap/mep/ImmediateDestination
Value: An identifier (URI) that denotes the responding SOAP node

THere may be other properties related to the operation of the message exchange context instance.
Such properties are initialized according to their own feature specifications.

Once the message exchange context is initialized, control of the context is passed to a (conforming)
local binding instance.

The diagram below shows the logical state transitions at the requesting and responding SOAP nodes during
the lifetime of the message exchange. At each SOAP node, the local binding instance updates (logically)
the value of the http://www.w3.org/2003/05/soap/bindingFramework/ExchangeContext/State property
to reflect the current state of the message exchange.

The state names are relative URIs, relative to a Base URI value carried in the 
http://www.w3.org/2003/05/soap/bindingFramework/ExchangeContext/Role property of the
local message exchange context


Requesting SOAP Node

Init
V
V
V
Requesting>>>>>>>
V 				V
V 			Receiving
V 				V
V <<<<<<<<<<<< Success
Fail

Responding SOAP Node

Init
V
V
V
Receiving>>>>>>>
V 			V
V 			Sending
V<<<<<<<<<<<<<
Fail 		Success

Figure 3: SOAP Response MEP State Transition Diagram

When the local binding instance at the responding SOAP node starts to receive an inbound request message,
it (logically) instansiates a message exchange context. Table 10 describes the properties that the binding
initializes as part of the context's instantiation

Table 10: Instantiation of Message Exchange Context for an inbound request message

Property name: http://www.w3.org/2003/05/soap/bindingFramework/ExchangeContext/ExchangePatternName
Value: "http://www.w3.org/2003/05/soap/mep/soap-response/"
Notes: Initialized as early as possible during the life cycle of the message exchange

Property name: http://www.w3.org/2003/05/soap/bindingFramework/ExchangeContext/FailureReason
Value: "None"
Notes: a relative URI that will be resolved against the value of the property named: 
http://www.w3.org/2002/12/soap/bindingFramework/ExchangeContext/ExchangePatternName

Property name: http://www.w3.org/2003/05/soap/bindingFramework/ExchangeContext/Role
Value: "RespondingSOAPNode"
Notes: A relative URI that will be resolved against the value of the property named:
http://www.w3.org/2002/12/soap/bindingFramework/ExchangeContext/ExchangePatternName. Initialized as early
as possible during the life cycle the message exchange.

Property name: http://www.w3.org/2003/05/soap/bindingFramework/ExchangeContext/State
Value: "Init"
Notes: A relative URI that will be resolved against the value of the property named:
http://www.w3.org/2002/12/soap/bindingFramework/ExchangeContext/Role

When the requesting and responding SOAP nodes transition between states, the local binding instance (logically)
updates a number of properties. Table 11 and Table 12 describe these updates for the requesting and the
responding SOAP nodes, respectively.

Table 11: Requesting SOAP Node State Transitions

CurrentState

"Init" 			Transition Condition: Unconditional
				NextState: "Requesting"
				Action: Initiate request

"Requesting" 	Transition Condition: Message transmission failure
				NextState: "Fail"
				Action: Set http://www.w3.org/2003/05/soap/bindingFramework/ExchangeContext/FailureReason to "transmissionFailure"

				Transition Condition: Start receiving response message
				NextState: "Receiving"
				Action: Set http://www.w3.org/2003/05/soap/mep/ImmediateSender to denote the sender of the
				response message (may differ from the values in http://www.w3.org/2003/05/soap/mep/ImmediateDestination).

				Start making an abstraction of the response message available in
				 http://www.w3.org/2003/05/soap/mep/InboundMessage

"Receiving" 	Transition Condition: Message exchange failure
				NextState: "Fail"
				Action: Set http://www.w3.org/2003/05/soap/bindingFramework/ExchangeContext/FailureReason
				to "exchangeFailure"

				Transition Condition: Completed Receiving response message
				NextState: "Success"

Table 12: Responding SOAP Node State Transitions

CurrentState

"Init" 		Transition Condition: Start receiving request
			NextState: "Receiving"
			Action: Set http://www.w3.org/2003/05/soap/mep/ImmediateSender to denote the sender of the request
			message (if determinable). Pass control of message exchange context to SOAP processor.

"Receiving" Transition Condition: Message reception failure
			NextState: "Fail"
			Action: Set http://www.w3.org/2003/05/soap/bindingFramework/ExchangeContext/FailureReason to "receptionFailure"

			Transition Condition: Start of response message available in http://www.w3.org/2003/05/soap/mep/OutboundMessage
			NextState: "Sending"
			Action: Initiate transmission of response message abstracted in http://www.w3.org/2003/05/soap/mep/OutboundMessage

"Sending" 	Transition Condition: Message exchange failure
			NextState: "Fail"
			Action: Set http://www.w3.org/2003/05/soap/bindingFramework/ExchangeContext/FailureReason
			to "exchangeFailure"

			Transition Condition: Completed sending response message
			NextState: "Success"

6.3.4 Fault Handling

During the operation of the SOAP Response MEP, the participating SOAP nodes may generate SOAP faults.

If a SOAP fault is generated by the responding SOAP node while it is in the "Receiving" state, the SOAP fault
is made available in http://www.w3.org/2003/05/soap/mep/OutboundMessage and the state machine transitions to
the "Sending" state.

This MEP makes no claims about the disposition or handling of SOAP faults generated by the requesting SOAP node
during any processing of the response message that follows the "Success" state in teh requesting SOAP 
node's state transition table (see Table 11)

6.4 SOAP Web Method Feature

This section defines the "SOAP Web Method Feature"

6.4.1 SOAP Feature Name

The SOAP Web Method feature is identified by the URI (see SOAP 1.2 Part 1 [SOAP Part 1] SOAP Features)

"http://www.w3.org/2003/05/soap/features/web-method/"

6.4.2 Description

Underlying protocols designed for use on the World Wide Web provide for manipulation of resources using a small
set of Web methods such as GET, PUT, POST and DELETE. These methods are formally defiend in teh HTTP specification (RFC 2616),
but other underlying protocols might also support them. Bindings to HTTP or such other protocols SHOULD use the SOAP
Web Method feature to give application control over the WEb methods to be used when sending a SOAP message.

Binding supporting this feature SHOULD use the appropiate embodiment of that method if provided by the underlying 
protocol, for example, the HTTP binding provided with this specification represents the "GET" Web method
as an HTTP GET request, and the "POST" method as an HTTP POST request (see 7. SOAP HTTP Binding).
Bindings supporting this feature SHOULD provide to the receiving node indication of the Web method used
for transmission.

The SOAP Web Method feature MAY be implemented by bindings to underlying transports that have no preferred embodiment
of particular Web methods (e.g do not distinguish GET from POST). Such bindings SHOULD provide to the receiving
node indication of the Web method used for transmission, but need take no other action in support of the feature.

6.4.3 SOAP Web Method Feature State Machine

The SOAP Web Method feature defines a single property, which is described in Table 13

Table 13: Property Definition for the SOAP Web Method feature

Property name 					Property Desc 												Property Type
								
http://www.w3.org/2003/05/soap 	One of "GET", "POST", "PUT", "DELETE"  						Not specified
/features/web-method/Method 	(or others which may subsequently be added to the repetoire
								of Web methods)


This specification provides for use of the SOAP Web Method feature in conjunction with the 6.2 SOAP 
Request-Response Message Exchange Pattern and 6.3 SOAP Response Message Exchange Pattern message exchange
patterns. This feature MAY be used with other MEps if and only if provided for in the specifications
of those MEPs.

A node sending a request message MUST provide a value for the http://www.w3.org/2003/05/soap/features/web-method/Method
property. A protocol binding supporting this feature SHOULD set the value of the 
http://www.w3.org/2003/05/soap/features/web-method/Method  property at the receiving node to match that provided by the
sender, the means of transmission for the method property is binding-specific.

A responding node SHOULD respond in a manner consistent with the Web method requested (e.g a "GET" should result
in retrieval of a representation of the identified resource) or SHOULD fault in application-specific manner 
if the Web method cannot be supported.

Bindings implementing this feature MUST employ a Message Exchange Pattern with semantics that are compatible
with the Web method selected. For example, the SOAP Response Message Exchange Pattern (see 6.3 SOAP Response
Message Exchange Pattern) is compatible with GET.

6.5 SOAP Action Feature

This section defines the "SOAP Action Feature"

6.5.1 SOAP Feature Name

The SOAP Action feature is identified by the URI (see SOAP 1.2 Part 1 [SOAP Part 1] SOAP Features):

"http://www.w3.org/2003/05/soap/features/action/"

6.5.2 Description

Many SOAP 1.2 underlying protocl bindings will likely utilize the "application/soap+xml" media type (described in
A. The application/soap+xml Media Type) to transmit XML serializations of SOAP messages. The media type
specifies an optional action parameter, which can be used to optimize dispatch or routing, among other things.

The Action Feature specifies well-known URIs to indicate support for the action parameter in bindings
which use MIME, and also to refer to value of the parameter itself.

6.5.3 SOAP Action Feature State Machine

The SOAP Action feature defines a single property, which is described in Table 14. The value of this
property MUST be an absolute URI [RFC 3986] and MUST NOT be empty.

Table 14: Property definition for the SOAP Action feature

Property Name 												Property Type

http://www.w3.org/2003/05/soap/features/action/Action 		xsd:anyURI

If the http://www.w3.org/2003/05/soap/features/action/Action property has a value at a 
SOAP sender utilizing a binding supporting this feature, the sender MUST use the property
value as the value of the action parameter in the media type designator.

Conversely, if a value arrives in the action parameter of the media type designator at a 
SOAP receiver, the receiver MUST make that value available as the value of the 
http://www.w3.org/2003/05/soap/features/action/Action property.

7. SOAP HTTP Binding

7.1 Introduction

The SOAP HTTP Binding provides a binding of SOAP to HTTP. The binding conforms to the SOAP
Protocol Binding Framework (see SOAP 1.2 Part 1 [SOAP Part 1] SOAP Protocol Binding Framework)
and supports the message exchange patterns and features described in 6. SOAP-Supplied Message
Exchange Patterns and Features.

7.1.1 Optionality

The SOAP HTTP Binding is optional and SOAP nodes are NOT required to implement it. A SOAP node
that correctly and completely implements the SOAP HTTP Binding may to be said to "conform to
the SOAP 1.2 HTTP Binding"

The SOAP version 1.2 specification does not preclude development of other bindings to HTTP or
bindings to other protocols, but communication with nodes using such other bindings is not 
a goal.

Note that other bindings of SOAP to HTTP MAY be written to provide support for SOAP Message
exchange patterns other than 6.2 SOAP Request-Response Message Exchange Pattern or the
6.3 SOAP Response Message Exchange Pattern. Such alternate bindings MAY therefore make use
of HTTP features and status codes not required for this binding.

7.1.2 Use of HTTP

The SOAP HTTP binding defines a base URI according to the rules in HTTP/1.1 [RFC 2616].
I.e, the base URI is the HTTP Request-URI or the value of the HTTP Content-Location header
field.

This binding of SOAP to HTTP is intended to make appropiate use of HTTP as an application
protocol. For example, successful responses are sent with status code 200 or 202 and failures
are indicated as 4xx or 5xx. This binding is not intended to fully exploit the features
of HTTP, but rather to use HTTP specifically for the purpose of communicating with other
SOAP nodes implementing the same binding.

Therefore, this HTTP binding for SOAP does not specify the use and/or meaning of
all possible HTTP methods, header fields and status responses. It specifies only those
which are pertinent to the 6.2 SOAP Request-Response Message Exchange Pattern or 
the 6.3 SOAP Response Message Exchange Pattern, or which are likely to be introduced
by HTTP mechanisms (such as proxies) acting between the SOAP nodes.

Certain optional features provided by this binding depend on capabilities provided by
HTTP/1.1, for example content negotiation. Implementations SHOULD thus use HTTP/1.1
[RFC 2616] (or later compatible versions that share the same major version number).
Implementations MAY also be deployed using HTTP/1.0, although in this case certain
optional binding features may not be provided.

Note: SOAP HTTP Binding implementations need to account for the fact that HTTP/1.0
intermediaries (which may or may not also be SOAP intermediaries) may alter the
representation of SOAP messages, even in situations where both the initial SOAP
sender and ultimate SOAP receiver use HTTP/1.1

7.1.3 Interopability with non-SOAP HTTP Implementations

Particularly when used with the 6.3 SOAP Response Message Exchange Pattern,
the HTTP messages produced by this binding are likely to be indistinguishable 
from those produced by non-SOAP implementations performing similar operations.

Accordingly, some degree of interoperation can be made possible between SOAP
nodes and other HTTP implementations when using this binding. For example,
a conventional Web server (ie, not written specifically to conform to this
specification) might be used to respond to SOAP-initiated HTTP GET's with
representations of Content-Type "application/soap+xml".

Such interoperation is not a normative feature of this specification.
Even though HTTP often is used on the well-known TCP port 80, the use of HTTP
is not limited to that port. As a result, it is possible to have a dedicated
HTTP server for handling SOAP processing on a distinct TCP port. Alternatively,
it is possible to use a separate virtual host for dealing with SOAP processing.

Such configuration, however, is a matter of convenience and is not a requirement
of this specification (see SOAP 1.2 Part 1 [SOAP Part 1] Binding to Application-Specific
Protocols)

7.1.4 HTTP Media-Type

Conforming implementations of this binding:

1. MUST be capable of sending and receiving messages serialized using media type "application/soap+xml"
whose proper use and parameters are described in A. The application/soap+xml Media Type

2. MAY send requests and responses using other media types providing that such media types provide
for at least the transfer of SOAP XML Infoset

3. MAY, when sending requests, provide an HTTP Accept header field. This header field:

SHOULD indicate an ability to accept at minimum "application/soap+xml"

MAY additionally indicate willingness to accept other media types that satisfy 2 above.

7.2 Binding Name

This binding is identified by the URI (see SOAP 1.2 part 1 [SOAP Part 1] SOAP Protocol Binding Framework)

"http://www.w3.org/2003/05/soap/bindings/HTTP/"

7.3 Supported Message Exchange Patterns

An implementation of the SOAP HTTP Binding MUST support the following message exchange 
patterns (MEPs):

"http://www.w3.org/2003/05/soap/mep/request-response/" (see 6.2 SOAP Request-Response Message
Exchange Pattern)

"http://www.w3.org/2003/05/soap/mep/soap-response/" (see 6.3 SOAP Response Message Exchange Pattern)

7.4 Supported Features

An implementation of the SOAP HTTP Binding MUST support hte following additional features:

"http://www.w3.org/2003/05/soap/features/web-method/" (see 6.4 SOAP Web Method Feature)

"http://www.w3.org/2003/05/soap/features/action/" (see 6.5 SOAP Action Feature)

The possible values of http://www.w3.org/2003/05/soap/features/web-method/Method property
are restricted in this HTTP binding according to the MEP in use 
(as present in http://www.w3.org/2003/05/soap/bindingFramework/ExchangeContext/ExchangePatternName):

Table 15: Possible values of the Web-Method Method property

http://www.w3.org/2003/05/soap/bindingFramework/ExchangeContext/ExchangePatternName 	http://www.w3.org/2003/05/soap/features/web-method/Method

"http://www.w3.org/2003/05/soap/mep/request-response/" 									"POST"

"http://www.w3.org/2003/05/soap/mep/soap-response/" 									"GET"

Note: Other SOAP Version 1.2 bindings to HTTP may permit other combinations of:
http://www.w3.org/2003/05/soap/bindingFramework/ExchangeContext/ExchangePatternName 

and

http://www.w3.org/2003/05/soap/features/web-method/Method

7.5 MEP Operation

For binding instances conforming to this specification:

A SOAP node instansiated at an HTTP client may assume the role (i.e, the property http://www.w3.org/2002/12/soap/bindingFramework/ExchangeContext/Role )
of "RequestingSOAPNode"

A SOAP node instansiated at an HTTP server may assume the role (i.e, the property http://www.w3.org/2002/12/soap/bindingFramework/ExchangeContext/Role)
of "RespondingSOAPNode"

The remainder of this section describes the MEP state machine and its relation to the HTTP protocol. In the state tables below,
the states are defined as values of the property http://www.w3.org/2003/05/soap/bindingFramework/ExchangeContext/State

(see 6.2 SOAP Request-Response Message Exchange Pattern and 6.3 SOAP Response Message Exchange Pattern), and are of type
xs:anyURI. For brevity, relative URIs are used, the base URI being the value of:

http://www.w3.org/2003/05/soap/bindingFramework/ExchangeContext/Role

The message exchange pattern in use is indicated by the HTTP method used in the request. HTTP GET corresponds to
the SOAP-Response MEP, HTTP POST corresponds to the SOAP Request-Response MEP.

7.5.1 Behavior of Requesting SOAP Node

The overall flow of the behavior of a requesting SOAP node follows a state machine description consistent with
either 6.2 SOAP Request-Response Message Exchange Pattern or 6.3 SOAP Response Message Exchange Pattern
(differences are indicated as necessary).

This binding supports streaming and, as a result, requesting SOAP nodes MUST avoid deadlock by accepting
and if necessary processing SOAP response information while the SOAP request is being transmitted
(see 6.2.3 State Machine Description). The following subsections describe each state in detail.

7.5.1.1 Init

In the "Init" state, a HTTP request is formulated according to Table 16 and transmission of the
request is initiated.

Table 16: HTTP Request Fields

Field 					Value

HTTP Method 			According to the http://www.w3.org/2003/05/soap/features/web-method/Method property.
						POST and GET are the only values supported by this binding.

Request URI 			The value of the URI carried in the http://www.w3.org/2003/05/soap/mep/ImmediateDestination
						property of the message exchange context.

Content-Type  			The media type of the request entity body, if present, otherwise, omitted (see 7.1 Introduction
header field  			for a description of permissible media types). If the SOAP envelope infoset in the 
 						http://www.w3.org/2003/05/soap/mep/OutboundMessage property is null, then the Content-Type
 						header field MAY be omitted.

action parameter 		According to the value of the http://www.w3.org/2003/05/soap/features/action/Action property

Accept header field 	List of media types that are acceptable in response to the request message.
(optional)

Additional header 		Generated in accordance with the rules for the binding-specific expression of any option
fields 					features in use for this message exchange. For example, a Content-Encoding header field
						(see HTTP [RFC 2616], section 14.11) may be used to express an optional compression feature

HTTP entity body 		SOAP message serialized according to the rules for carrying SOAP messages in the media type
						given by the Content-Type header field. Rules for carrying SOAP messages in media type
						"application/soap+xml" are given in A. The application/soap+xml Media Type.

						If the SOAP envelope infoset in the http://www.w3.org/2003/05/soap/mep/OutboundMessage
						property is null, the entity body is omitted

7.5.1.2 Requesting

In the "Requesting" state, sending of the request continues while waiting for the start of the response message.
Table 17 details the transitions that take place when a requesting SOAP node receives an HTTP status line and
response header fields. For some status codes there is a choice of possible next state. In cases where "Fail"
is one of the choices, the transition is dependent on wether a SOAP message is present in the HTTP response.

If a SOAP message is present, the next state is "Sending+Receiving" or "Receiving", otherwise the next state is
"Fail". The choice between "Sending+Receiving" and "Receiving" depends on the MEP in use: "Sending+Receiving"
is the next state for Request-Response while "Receiving" is the next state for SOAP-Response.

Table 17: HTTP status code dependent transitions

Status Code Reason Phrase 	 Significance/Action 																	NextState

2xx 		Successful

200 		OK 		 		 The response message follows the HTTP response entity body. Start making an 			"Sending+Receiving" or "Receiving"
						     abstraction of the response message available in http://www.w3.org/2003/05/soap/mep

202 		OK 				 THe request has been accepted, but either (a) no response envelope is provided or (b) 	"Receiving" (which will immediately 	 
							 an envelope representing information related to the request is provided - such  		transition to "Success")
							 envelopes SHOULD be processed using the SOAP Processing model 
							 (see SOAP 1.2 Part 1 [SOAP Part 1], section SOAP Processing Model)

301, 302, 	Redirect 		The requested resource has moved. In the case of unsafe HTTP method, like POST or PUT, 	"Init" or "Fail"
302, 307 					explicit confirmation is required before proceeeding as follow.
							
							In the case of a safe method, like GET, or if the redirection has been approved, the 	
							HTTP request SHOULD be retried using the URI carried in the associated Location header
							field as the new value for the http://www.w3.org/2003/05/soap/mep/ImmediateDestination
							property

303 		See Other 		The requested resource has moved and the HTTP request SHOULD be retried using the URI 	"Init"
							carried in the associated Location header field as the new value for the 
							http://www.w3.org/2003/05/soap/mep/ImmediateDestination property. The value of
							http://www.w3.org/2003/05/soap/features/web-method/Method is changed to "GET",
							the value of http://www.w3.org/2003/05/soap/mep/OutboundMessage is set to "null".

							[Note: Status code 300 MUST NOT be sent unless the request SOAP envelope has
							been processed according to the SOAP processing model and the SOAP response
							is to be made available by retrieval from the URI provided with the 303]


4xx 		Client Error 	

400 		Bad Request 	Indicates a problem with the received HTTP request message 								"Sending+Receiving",
																													"Receiving" or "Fail"

401 		Unauthorized 	Indicates that the HTTP request requires authorization. 								"Requesting" or "Fail"
							
							The message exchange is regarded as having completed unsuccessfully

405 		Method not 		Indicate that the peer HTTP server does not support the requested HTTP method  			"Fail"
			allowed 		at the given request URI. The message exchange is regarded as having completed
							unsuccessfully.

415 		Unsupported 	Indicates that the peer HTTP server does not support the Content-type used to 			"Fail"
 			Media Type  	encode the request message. The message exchange is regarded as having completed
 							unsuccessfully.

5xx 		Server Error

500 		Internal Server Indicates a server problem or a problem with the received request 						"Sending+Receiving",
			Error 																									"Receiving" or "Fail"


Table 17 refers to some but not all of the existing HTTP/1.1 RFC 2616 status codes. In addition to these status codes,
HTTP provides an open-ended mechanism for supporting status codes defined by HTTP extensions (see RFC 2817 [RFC 2817])
for a registration mechanism for new status codes.

HTTP status codes are divided into status code classes as described in HTTP [RFC 2616] section 6.1.1. The SOAP HTTP binding
follows the rules of any HTTP application which means that an implementation of the SOAP HTTP binding must understand the class
of any status code, as indicated by the first digit, and treat any unrecognized response as being equivalent to the x00
status code of that class, with the exception that an unrecognized response must not be cached.

Note: There may be elements in the HTTP infrastructure configured to modify HTTP response entity bodies for 4xx and 5xx status
code responses. For example, some HTTP origin servers have such a feature as a configuration option. This behavior may
interfere with the use of 4xx and 5xx status code responses carrying SOAP fault messages in HTTP and it is recommended that
such behavior be disabled for resources accepting SOAP/HTTP requests.

If the rewriting behavior cannot be disabled, SOAP/HTTP cannot be used in such configurations.

7.5.1.3 Sending+Reciving

In the "Sending+Receiving" state (6.2 SOAP Request-Response Message Exchange Pattern only), the transmission
of the request message and receiving of the response message is completed. Only in the case that a status
code 200 is received, the response message is assumed to contain a SOAP envelope serialized according to
the rules for carrying SOAP messages in the media type given in the Content-Type header field.

The response MAYT be of content type other than "application/soap+xml". Such usage is considered non-normative,
and accordingly is not modeled in the state machine. Interpretation of such responses is at the discretion of
the receiver. Similarly, receipt of any response entity-body with a status code of 202 is not normative. If
such an unexpected response is of type "application/soap+xml", then SOAP processing of that response is beyond
the scope of the specificaiton for this binding.

7.5.1.4 Receiving

In the "Receiving" state (6.3 SOAP Response Message Exchange Pattern only), receiving of the response message
is completed. Only in the case of status code 200, the response message is assumed to contain a SOAP envelope
serialized according to the rules for carrying SOAP messages in the media type given in the Content-Type
header field.

The response MAY be of content type other than "application/soap+xml". Such a result is particullarly likely
when a SOAP request sent with a http://www.w3.org/2003/05/soap/features/web-method/Method of "GET" is directed
(intentionally or otherwise) to a non-SOAP HTTP server.

Such usage is considered non-normative, and accordingly is not modeled in the state machine. Interpretation
of such responses is at the discretion of the receiver. Similarly, receipt of any response entity-body
 with a status code of 202 is not normative. If such an unexpected response is of type "application/soap+xml",
then SOAP processing of that response is beyond the scope of the specification for this binding.

7.5.1.5 Success and Fail

"Success" and "Fail" are the terminal states of the Request-Response and SOAP-Response MEPs. Control over
the message exchange context returns to the local SOAP node.

If the "success" state has been reached and if a SOAP envelope that has been received, then the local node is
a SOAP Receiver as defined in SOAP 1.2 Part 1 [SOAP Part 1] section Message Sender and Receiver Concepts
and in particular MUST obey the requirement of section SOAP Nodes to process the message according to the
SOAP Processing Model (see SOAP Processing Model)

7.5.2 Behavior of Responding SOAP Node

The overall flow of the behavior of a responding SOAP node follows a state machine description with
either 6.2 SOAP Request-Response Message Exchange Pattern or 6.3 SOAP Response Message Exchange Pattern
(differences are indicated as nessecary). The following subsections describe each state in detail.

7.5.2.1 Init

In the "Init" state, the binding waits for the start of an inbound request message. Table 18 describes the
errors that a responding SOAP node might generate while in the "Init" state. In this state no SOAP
message has been received, therefore the SOAP node cannot generate a SOAP fault.

Table 18: Errors generated in the Init State

Problem with Message 		HTTP Status Code 	HTTP Reason Phrase (informative)

Malformed Request Message 	400 				Bad request

HTTP Method is neither POST 405 				Method Not Allowed
nor GET 			

Unsupported message  		415 				Unsupported Media
encapsulation method


7.5.2.2 receiving

In the "Receiving" state, the binding receives the request and any associated message and waits
for the start of a response message to be available. Table 19 describes the HTTP response header
fields generated by the responding SOAP node. Table 20 describes the HTTP status code associated
with SOAP faults that can be generated by the responding SOAP node.

Table 19: HTTP Response Headers Fields

Field 			Value

Status Line 	If a SOAP Envelope response is available in http://www.w3.org/2003/05/soap/map/OutboundMessage then 200,
				or set according to Table 20 if a SOAP fault was generated. Otherwise, if no such SOAP envelope is
				provided, then 202.

Content-Type 	If status line is 200, then the media type of the response body, see 7.1 Introduction for a description
header field 	of permissible media types. If status line is other than 200, then the Content-Type header is not sent.

Additional 		Generated in accordance with the rules for the binding-specific expression of any optional features in use
header fields  	for this message exchange. For example, a Content-Encoding header field (see HTTP RFC 2616) section 14.11
				may be used to express an optional compression feature.

HTTP Entity 	Only if status line is 200, the SOAP message serialized according to the rules for carrying SOAP messages
Body 			in the media type given by the Content-Type header field. Rules for carrying SOAP messages in
				"application/soap+xml" are given in A. The application/soap+xml Media Type.

Table 20: SOAP Fault to HTTP Status Mapping

SOAP Fault 				HTTP Status Code 	HTTP Reason Phrase (informative)

env:VersionMismatch 	500 				Internal server error

env:MustUnderstand 		500 				Internal server error

env:Sender 				400 				Bad request

env:Receiver 			500 				Internal Server error

env:DataEncodingUnknown 500 				Internal Server error

7.5.2.3 Receiving+Sending

In the "Receiving+Sending" state (6.2 SOAP Request-Response Message Exchange Pattern only) the binding completes receiving
of the request message and transmission of the response message.

7.5.2.4 Sending

In the "Sending" state (6.3 SOAP Response Message Exchange Pattern only) the binding completes transmission of the response message

7.5.2.5 Success and Fail

"Success" and "Fail" are the terminal states for the Request-Response and SOAP-Response MEPs. From the point-of-view of the local
node this message exchange has completed.

7.6 Security Considerations

The SOAP HTTP Binding (see 7. SOAP HTTP Binding) can be considered as an extension of the HTTP application protocol.
As such, all of the security considerations identified and described in section 15 of the HTTP specification
[RFC 2616] apply to the SOAP HTTP Binding in addition to those described in SOAP 1.2 Part 1 [SOAP Part 1] Security Considerations.

Implementors of the SOAP HTTP Binding should carefully review this material.

Going to write the appendixes as well:

A. The "application/soap+xml" Media Type

The original contents of this section have been superceded by RFC3902 [RFC 3902]

B. Mapping Application-Defined Names to XML Names

This appendix details an algorithm for taking an application-defined name, such as the
name of a variable or field in a programming language, and mapping it to the Unicode characters
that are legal in the names of XML elements and attributes as defined in Namespace in XML
[Namespaces in XML]

Hex Digits

[5] hexDigit ::= [0-9A-F]

B.1 Rules for Mapping Application-Defined Names to XML Names

1. An XML Name has two parts: Prefix and LocalPart. Let Prefix be determined per the rules
and constraints specified in Namespaces in XML [Namespaces in XML]

2. Let T be a name in an application, represented as a sequence of characters encoded in a particular
character encoding

3. Let M be the implementation-defined function for transcoding of the characters used in the application-defined
name to an equivalent string of Unicode characters

Note: Ideally, if this transcoding is from a non-Unicode encoding, it should be both reversible and Unicode Form
C normalizing (that is, combining sequences will be in the prescribed canonical order). It should be noted that
some transcodings cannot be perfectly reversible and that Normalization Form C (NFC) normalization may alter the
original sequence in a few cases (see Character Model for the World Wide Web [CharMod]). To ensure that matching
names continue to 

Note: This transcoding is explicitly to Unicode scalar values ("code points") and not to any particular
character encoding scheme of Unicode, such as UTF-8 or UTF-16

Note: Properly formed surrogate pair sequences must be converted to their respective scalar values ("code points")
[That is, the sequence U+D800 U+DC00 should be transcoded to the character U+10000]. If the transcoding begins
with a Unicode encoding, non-conforming (non-shortest form) UTF-8 and UTF-16 sequences must be converted to their
respective scalar values.

Note: The number of characters in T is not necessarily the same as the number of characters in M, because transcoding
may be one-to-many or many-to-one. The details of transcoding may be implementation-defined. There may be (very rarely)
cases where there is no equivalent Unicode representation for T; such cases are not covered here.

4. Let C be the sequence of Unicode scalar values (chars) represented By M(T)

5. Let N be the number of chars in C: Let C1, C2 .... CN be the chars of C, in order from most to least significant (logical order)

6. For each i between 1 (one) and N, let Xi be the Unicode character string defined by the following rules:

Case:

1. if Ci is undefined (that is, some character or sequence of characters as defined in the application's character sequence
T contains no mapping to Unicode), then Xi is implementation defined.

2. if i<=N-1 and Ci is "_" (U+005F LOW LINE) and Ci+1 is "x" (U+0078 LATIN SMALL LETTER X), then let Xi be "_x005F_"

3. if i=1, and N>=3, and C1 is "x" (U+0078 LATIN SMALL LETTER X) or "X" (U+0058 LATIN CAPITAL LETTER X) and C2 is "m"
	(U+006D LATIN SMALL LETTER M) or "M" (U+004D LATIN CAPITAL LETTER M) and C3 is "I" (U+006C LATIN SMALL LETTER L)
	or "L" (U+004C LATIN CAPITAL LETTER L) (in other words, a string three letters or longer starting with the text
	"xml" or any re-capitalization thereof), then if C1 is "x" (U+0078 LATIN SMALL LETTER X) then let X1 be "_x0078_";
	otherwise, if C1 is "X" (U+0058 LATIN CAPITAL LETTER X) then let X1 be "_x0058_"

4. If Ci is not valid XML NCName character (see Namespaces in XML [Namespaces in XML]) or if i=1 (one) and C1
is not a valid first character of an XML NCName then.

Let U1, U2, ... U6 be the six hex digits [PROD: 5] such that Ci is "U+" U1U2 ... U6 in the Unicode scalar value

Case: 

1. If U1=0 U2=0 U3=0 and U4=0 then let Xi="_x" U5 U6 "_"

This case implies that Ci is a character in the Basic Multilingual Plane (Plane 0)
of Unicode and can be wholly represented by a single UTF-16 code point sequence U+U5U6

2. Otherwise, let Xi be "_x" U1 U2 U3 U4 U5 U6 "_"

5. Otherwise, let Xi be Mi. That is, any character in X that is a valid character 
in a XML NCName is simply copied.

7. The LocalPart be the character string concatenation of X1, X2 ...., Xn in order from
most to least significant

8. Let XML Name be the QName per Namespaces in XML [Namespaces in XML]

B.2 Examples

Hello World -> Hello_x0020_world

Hello_xorld -> Hello_x005F_xorld

HelloWorld_ -> Helloworld_

		  x -> x
		xml -> _x0078_ml
	   -xml -> _x002D_xml
	   x-ml -> x-ml
etc.

C. Using W3C XML Schema with SOAP Encoding (Non-Normative)

As noted in 3.1.4 Computing the Type Name Property SOAP Graph nodes are labeled
with type names, but conforming processors are not required to preform validation
of encoded SOAP messages.

These sections describe techniques that can be used when validation with W3C XML schemas
is desired for use by SOAP applications. Any errors or faults resulting from such validation
are beyond those covered by the normative Recommendation, from the perspective of SOAP,
such faults are considered to be application-level failures.

C.1 Validating Using the Minimum Schema

Although W3C XML schemas are conventionally exchanged in the form of schema documents (see XML Schema
[XML SChema part 1]), the schema Recommendation is built on an abstract definition of schemas, to
which all processors need to conform. The schema Recommendation provides that all such schemas
include definitions for a core set of built in types, such as integers, dates and so on (see
XML Schema [XML Schema Part 1], Built-in Simple Type Definition)

Thus, it is possible to discuss validation of a SOAP message against such a minimal schema,
which is the one that would result from providing no additional definitions or declarations
(i.e, no schema document) to a schema processor.

The minimal schema provides that any well formed XML document will validate, except that there
where an xsi:type is provided, the type name must be built in, and the corresponding element
must be valid per that type. Thus, validation of a SOAP 1.2 message using a minimal schema
approximates the behavior of the built-in types of SOAP 1.1

C.2 Validating Using the SOAP Encoding Schema

Validation against the minimal schema (see C.1 Validating Using the Minimum Schema) will not
succeed where encoded graph nodes have multiple inbound edges. This is because elements representing
such graph nodes will carry id attribute information items which are not legal on elements of type
"xs:string", "xs:integer" etc.

The SOAP Encoding of such graphs MAY be validated against the SOAP Encoding schema. In order
for the encoding to validate, edge labels, and hence the [local name] and [namespace name]
properties of the element information items, need to match those defined in teh SOAP Encoding
schema. Validation of the encoded graph against the SOAP Encoding schema would result in the
type name property of the nodes in the graph being assigned the relevant type name.

C.3 Validating Using More Specific Schemas

It may be that schemas could be constructed to describe the encoding of certain graphs.
Validation of the encoded graph against such a schema would result in the type name property
of the graph nodes being assigned the relevant type name.

Such a schema can also supply default or fixed values for one or more of the itemType,
arraySize or nodeType attribute information items, the values of such defaulted attributes
affect teh deserialized graph in teh same manner as if the attributes had been explicitly
supplied in the message.

Errors of inconsistencies thus introcued (e.g, if the value of the attribute is errornous or
inappropiate) should be reported as application-level errors; faults from the 
"http://www.w3.org/2003/05/soap-encoding" namespace should be reported only if the normative
parts of this specification are violated.

The above things belonged to SOAP 1.2 Part 2, the following things belong to 
WSDL 1.1

Web Services Description Language (WSDL) 1.1

W3C Note 15 March 2001

Abstract

WSDL is an XML format for describing network services as a set of endpoints operating
on messages containing either document-oriented or procedure-oriented information.
The operations and messages are described abstractly and then bound to a concrete
network protocol and message format to define an endpoint.

Related concrete endpoints are combined into abstract endpoints (services). WSDL
is extensible to allow description of endpoints and their messages regardless of
what message formats or network protocols are used to communicate, however, the only
bindings described in this document describes how to use WSDL in conjunction
with SOAP 1.1, HTTP GET/POST, and MIME.

1. Introduction

As communications protocols and message formats are standardized in the web community,
it becomes increasingly possible and important to be able to describe the communications
in some structured way.

WSDL addresses this need by defining an XML grammar for describing network services as collections
of communication endpoints capable of exchanging messages. WSDL service definitions provide
documentation for distributed systems and serve as recipe for automating the details
involved in applications communication.

A WSDL document defines services as collections of network endpoints, or ports. In WSDL,
the abstract definition of endpoints and messages is separated from their concrete network
deployment or data format bindings.

This allows the reuse of abstract definitions: messages, which are abstract descriptions
of the data being exchanged, and port types which are abstract collections of operations.
The concrete protocol and data format specifications for a particular port type constitutes
a reusable binding.

A port is defined by associating a network address with a reusable binding, and a collection of
ports define a service. Hence, a WSDL document uses the following elements in teh definiton
of network services.

Types - a container for data type defintions using some type systems (such as XSD)

Message - An abstract, type definition of data being communicated

Operation - an abstract description of an action supported by the service.

Port Type - an abstract set of operations supported by one or more endpoints

Binding - a concrete protocol and data format specification for a particular 
port type

Port - A single endpoint defined as a combination of a binding and a network address

Service - a collection of related endpoints

These elements are described in detail in Section 2. It is important to observe that
WSDL does not introduce a new type definition language. WSDL recognizes the need for
rich type systems for describing message formats, and supports the XML Schemas
specificaiton (XSD) [11] as its canonical type system.

However, since it is unreasonable to expect a single type system grammar to be used
to describe all message formats present and future, WSDL allows using other type
definition languages via extensibility.

In addition, WSDL defines a common binding mechanism. This is used to attach a specific
protocol or data format or structure to an abstract message, operation, or endpoint.
It allows the reuse of abstract definitions.

In addition to the core service definition framework, this specification introduces
specific binding extensions for the following protocols and message formats:

SOAP 1.1 (see Section 3)

HTTP GET / POST (see Section 4)

MIME (see Section 5)

Although defined within this document, the above language extensions are layered on top of the
core service definition framework. Nothing precludes the use of other binding extensions with
WSDL.

1.2 WSDL Document Example

The following example shows the WSDL definition of a simple service providing stock quotes.
The service supports a single operation called GetLastTradePrice, which is deployed using
the SOAP 1.1 protocol over HTTP. The request takes a ticker symbol of type string,
and returns the price as a float. A detailed description of the elements used in this
definition can be found in Section 2 (core language) and Section 3 (SOAP binding)

This example uses a fixed XML format instead of the SOAP encoding (for an example using
the SOAP encoding, see Example 4)

Example 1 SOAP 1.1 Request/Response via HTTP

<?xml version="1.0"?>
<definitions name="StockQuote"

targetNamespace="http://example.com/stockquote.wsdl"
			xmlns:tns="http://example.com/stockquote.wsdl"
			xmlns:xsd1="http://example.com/stockquote.xsd"
			xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
			xmlns="http://schemas.xmlsoap.org/wsdl/">
	<types>
		<schema targetNamespace="http://example.com/stockquote.xsd"
				xmlns="http://www.w3.org/2000/10/XMLSchema">
			<element name="TradePriceRequest">
				<complexType>
					<all>
						<element name="tickerSymbol" type="string"/>
					</all>
				</complexType>
			</element>
			<element name="TradePrice">
				<complexType>
					<all>
						<element name="price" type="float"/>
					</all>
				</complexType>
			</element>
		</schema>
	</types>

	<message name="GetLastTradePriceInput">
		<part name="body" element="xsd1:TradePriceRequest"/>
	</message>

	<message name="GetLastTradePriceOutput">
		<part name="body" element="xsd1:TradePrice"/>
	</message>

	<portType name="StockQuotePortType">
		<operation name="GetLastTradePrice">
			<input message="tns:GetLastTradePriceInput"/>
			<output message="tns:GetLastTradePriceOutput"/>
		</operation>
	</portType>

	<binding name="StockQuoteSoapBinding" type="tns:StockQuotePortType">
		<soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
		<operation name="GetLastTradePrice">
			<soap:operation soapAction="http://example.com/GetLastTradePrice"/>
			<input>
				<soap:body use="literal"/>
			</input>
			<output>
				<soap:body use="literal"/>
			</output>
		</operation>
	</binding>

	<service name="StockQuoteService">
		<documentation>My first service</documentation>
		<port name="StockQuotePort" binding="tns:StockQuoteBinding">
			<soap:address location="http://example.com/stockquote"/>
		</port>
	</service>
</definitions>

1.2 Notational Conventions

1. The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY" and "OPTIONAL"
in this document are to be interpeted as described in RFC-2119[2]

2. The following namespace prefixes are used throughout this document:

prefix 		namespace URI 									definition

wsdl 		http://schemas.xmlsoap.org/wsdl/ 				WSDL namespace for WSDL framework

soap 		http://schemas.xmlsoap.org/wsdl/soap/			WSDL namespace for WSDL SOAP binding

http 		http://schemas.xmlosap.org/wsdl/http/ 			WSDL namespace for WSDL HTTP GET & POST binding

mime 		http://schemas.xmlsoap.org/wsdl/mime/ 			WSDL namespace for WSDL MIME binding

soapenc 	http://schemas.xmlsoap.org/soap/encoding/   	Encoding namespace as defined by SOAP 1.1 [8]

soapenv 	http://schemas.xmlsoap.org/soap/envelope/ 		Envelope namespace as defined by SOAP 1.1 [8]

xsi 		http://www.w3.org/2001/10/XMLSchema-instance  	Instance namespace as defined by XSD [10]

xsd 		http://www.w3.org/2000/10/XMLSchema 			Schema namespace as defined by XSD [10]

tns 		(various) 										The "this namespace" (tns) prefix is used as a convention
															to refer to the current document.

(other) 	(various) 										All other namespace prefixes are sample only. In particular,
															URIs starting with "http://example.com" represent some application-dependent
															or context-dependent URI [4]

3. This specificaiton uses an informal syntax to describe the XML grammar of a WSDL document:

The syntax appears as an XML instance, but the values indicate the data types instead of values

Characters are appended to elements and attributes as follows: "?" (0 or 1), "*" (0 or more), "+" (1 or more)

Elements names ending in "..." (such as <element.../> or <element...>) indicate that elements/attributes irrelevant to
the context are being omitted.

Grammar in bold has not been introduced earlier in the document, or is of particular interest in an example

<-- extensibility element --> is a placeholder for elements from some "other" namespace (like ##other in XSD).

The XML namespace prefixes (defined above) are used to indicate the namespace of the element being defined.

Examples starting with <?xml contain enough information to conform to this specification, others examples are fragments
and require additional information to be specified in order to conform.

XSD schemas are provided as a formal definition of WSDL grammar (see section A4)

2. Service Definition

This section describes the core elements of the WSDL language. Binding extensions for SOAP, HTTP and MIME are
included in Sections 3, 4, and 5.

2.1 WSDL Document Structure

A WSDL document is simply a set of definitions. There is a definitions element at the root, and definitions
inside. The grammar is as follows:

<wsdl:definitions name="nmtoken"? targetNamespace="uri"?>
	<import namespace="uri" location="uri"/>

	<wsdl:documentation .... /> ?

	<wsdl:types> ?
		<wsdl:documentation .... />?
		<xsd:schema .... />*
		<-- extensibility element --> *
	</wsdl:types>

	<wsdl:message name="nmtoken"> *
		<wsdl:documentation ... />?
		<part name="nmtoken" element="qname"? type="qname"?/> *
	</wsdl:message>

	<wsdl:portType name="nmtoken">*
		<wsdl:documentation .... />?
		<wsdl:operation name="nmtoken">*
			<wsdl:documentation .... /> ?
			<wsdl:input name="nmtoken"? message="qname">?
				<wsdl:documentation ... /> ?
			</wsdl:input>
			<wsdl:output name="nmtoken"? message="qname">?
				<wsdl:documentation ... /> ?
			</wsdl:output>
			<wsdl:fault name="nmtoken" message="qname"> *
				<wsdl:documentation ... /> ?
			</wsdl:fault>
		</wsdl:operation>
	</wsdl:portType>

	<wsdl:binding name="nmtoken" type="qname">*
		<wsdl:documentation .... />?
		<-- extensibility element --> *
		<wsdl:operation name="nmtoken">*
			<wsdl:documentation ... /> ?
			<wsdl:input> ?
				<wsdl:documentation ... /> ?
				<--extensibility element -->
			</wsdl:input>
			<wsdl:output> ?
				<wsdl:documentation ... /> ?
				<-- extensibility element --> *
			</wsdl:output>
			<wsdl:fault name="nmtoken"> *
				<wsdl:documentation ... /> ?
				<-- extensibility element --> *
			</wsdl:fault>
		</wsdl:operation>
	</wsdl:binding>

	<wsdl:service name="nmtoken"> *
		<wsdl:documentation ... />?
		<wsdl:port name="nmtoken" binding="qname"> *
			<wsdl:documentation ... /> ?
			<-- extensibility element -->
		</wsdl:port>
		<--extensibility element -->
	</wsdl:service>

	<-- extensibility element --> *
</wsdl:definitions>

Services are defined using six major elements:

types, which provides data type definitions used to describe the message exchanged

message, which represents an abstract definition of the data being transmitted. A message consists of logical parts,
each of which is associated with a definition within some type system

portType, which is a set of abstract operations. Each operations refers to an input message and output messages.

binding, which specifies concrete protocol and data format specifications for the operations and messages
defined by a particular portType

port, which specifies an address for a binding, thus defining a single communication endpoint

service, which is used to aggregate a set of related ports

These elements will be described in detail in Sections 2.2 to 2.7. In the rest of this section we
describe the rules introduced by WSDL for naming documents, referencing document definitions,
using language extensions and adding contextual documentation.

2.1.1 Document Naming and Linking

WSDL documents can be assigned an optional name attribute of type NCNAME that serves as a lightweight
form of documentation. Optionally, a targetNamespace attribute of type URI may be specified. 
The URI MUST NOT be a relative URI.

WSDL allows associating a namespace with a document location using an import statement

<definitions ... >
	<import namespace="urI" location="uri"/> *
</definitions>

A reference to a WSDL definition is made using a QName. The following types of definitions
contained in a WSDL document may be referenced:

WSDL definitions: service, port, message, bindings and portType

Other definitions: if additional definitions are added via extensibility, they SHOULD use QName linking

Each WSDL definition type listed above has its own name scope (i.e port names and message names never conflict).
Names within a name scope MUST be unique within the WSDL document.

The resolution of QNames in WSDL is similar to the resolution of QNames described by the XML Schemas
specification [11]

2.1.2 Authoring Style

The use of the import element allows the separation of the different elements of a service definition
into independent documents, which can then be imported as needed. This technique helps writing clearer
service definitions, by separating the definitions according to their level of abstraction.

It also maximizes the ability to reuse service defintions of all kinds. As a result, WSDL document
structured in this way are easier to use and maintain. Example 2 below shows how to use this 
authoring style to define the service presented in Example 1. Here we separate the definitions
in three documents: data type definitions, abstract definitions, and specific service bindings.

The use of this mechanism is of course not limtied to the definitions explicitly presented in the
example, which uses only language elements defined in this specification. Other types of definitions
based on additional language extensions can be encoded and reused in a similar fashion.

Example 2. Alternative authoring style for the service in Example 1.

http://example.com/stockquote/stockquote.xsd

<?xml version="1.0"?>
<schema targetNamespace="http://example.com/stockquote/schemas"
		xmlns="http://www.w3.org/2000/10/XMLSchema">
	<element name="TradePriceRequest">
		<complexType>
			<all>
				<element name="tickerSymbol" type="string"/>
			</all>
		</complexType>
	</element>
	<element name="TradePrice">
		<complexType>
			<all>
				<element name="price" type="float"/>
			</all>
		</complexType>
	</element>
</schema>

http://example.com/stockquote/stockquote.wsdl

<?xml version="1.0"?>
<definitions name="StockQuote"

targetNamespace="http://example.com/stockquote/definitions"
		xmlns:tns="http://example.com/stockquote/definitions"
		xmlns:xsd1="http://example.com/stockquote/schemas"
		xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
		xmlns="http://schemas.xmlsoap.org/wsdl/">

	<import namespace="http://example.org/stockquote/schemas"
			location="http://example.com/stockquote/stockquote.xsd"/>

	<message name="GetLastTradePriceInput">
		<part name="body" element="xsd1:TradePriceRequest"/>
	</message>

	<message name="GetLastTradePriceOutput">
		<part name="body" element=":xsd1:TradePrice"/>
	</message>

	<portType name="StockQuotePortType">
		<operation name="GetLastTradePrice">
			<input message="tns:GetLastTradePriceInput"/>
			<output message="tns:GetLastTradePriceOutput"/>
		</operation>
	</portType>
</definitions>

http://example.com/stockquote/stockquoteservice.wsdl

<?xml version="1.0"?>
<definitions name="StockQuote"

targetNamespace="http://example.com/stockquote/service"
		xmlns:tns="http://example.com/stockquote/service"
		xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
		xmlns:defs="http://example.com/stockquote/definitions"
		xmlns="http://schemas.xmlsoap.org/wsdl/">

	<import namespace="http://example.com/stockquote/definitions"
			location="http://example.com/stockquote/stockquote.wsdl"/>

	<binding name="StockQuoteSoapBinding" type="defs:StockQuotePortType">
		<soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
		<operation name="GetLastTradePrice">
			<soap:operation soapAction="http://example.com/GetLastTradePrice"/>
			<input>
				<soap:body use="literal"/>
			</input>
			<output>
				<soap:body use="literal"/>
			</output>
		</operation>
	</binding>

	<service name="StockQuoteService">
		<documentation>My First service</documentation>
		<port name="StockQuotePort" binding="tns:StockQuoteBinding">
			<soap:address location="http://example.com/stockquote"/>
		</port>
	</service>
</definitions>

2.1.3 Language Extensibility and Binding

In WSDL the term binding refers to the process associating protocol or data format information
with an abstract entity like a message, operation, or portType. WSDL allows elements representing
 a specific technology (referred to here as extensibility elements) under various elements defined
 by WSDL.

These points of extensibility are typically used to specify binding information for a particular protocol
or message format, but are not limited to such use. Extensibility elements MUSt use an XML namespace different
from that of WSDL. The specific locations in the document where extensibility elements can appear are described
in detail in section A3.

Extensibility elements are commonly used to specify some technology specific binding. To distinguish whether the 
semantic of the technology specific binding is required for communication or optional, extensibility elements
MAY place a wsdl:required attribute of type boolean on the element.

The default value for required is false. The required attribute is defined in the namespace "http://schemas.xmlsoap.org/wsdl/"

Extensibility elements allow innovation in the area of network and message protocols without having to revise the base WSDL
specification. WSDL recommends that specifications defining such protocols also define any necessary WSDL extensions
used to describe those protocols or formats.

See sections 3, 4, and 5 for examples of extensibility elements defined as part of the base WSDL specification.

2.1.4 Documentation

WSDL uses the optional wsdl:document element as a container for human readable documentation. The content
of the element is arbitrary text and elements ("mixed" in XSD). The documentation element is allowed
inside any WSDL language element.

2.2 Types

The types element closes data type definitions that are relevant for the exchanged messages.
For maximum interoperability and platform neutrality, WSDL prefers the use of XSD as the canonical
type system, and treats it as the intrinsic type system.

<definitions ...>
	<types>
		<xsd:schema ... />
	</types>
</definitions>

The XSD type system can be used to define the types in a message regardless of whether or not the 
resulting wire format is actually XML, or whether the resulting XSD schema validates the particular
wire format.

This is especially interesting if there will be multiple bindings for the same message, or if 
there is only one binding but that binding type does not already have a type system in widespread
use.

In tehse cases, the recommended approach for encoding abstract types using XSD is as follows:

Use element form (not attribute)

Do not include attributes or elements that are peculiar to the wire encoding (e.g have nothing to do
with the abstract content of the message). Some examples are soap:root, soap:encodingStyle,
xmi:id, xmi:name.

Array types should extend the Array type defined in the SOAP v1.1 encoding schema (http://schemas.xmlsoap.org/soap/encoding/)
(regardless of whether the resulting form actually uses the encoding specified in Section 5 of the SOAP v1.1 document).
Use the name ArrayOfXXX for array types (where XXX is the type of the items in the array). 

the type of the items in the array and the array dimensions are specified by using a default value for the soapenc:arrayType
attribute. At the time of this writing, the XSD specification does not have a mechanism for specifying the defualt value
of an attribute which contains a QName value. To overcome this limitation, WSDL introduces the arrayType attribute
(from namespace http://schemas.xmlsoap.org/wsdl/) which has the semantic of providing the default value.

if XSD is revised to support this functionality, teh revised mechanism SHOULD be used in favor of the arrayType
attribute defined by WSDL.

Use the xsd:anyType type to represent a field/parameter which can have any type.

However, since it is unreasonable to expect a single type system grammar can be used to describe
all abstract types present and future, WSDL allows type systems to be added via extensibility
elements. An extensibility element may appear under the types element to identify the type definiton
system being used and to provide an XML container element for the type definitions.

The role of this element can be compared to that of the schema element of the XML Schema language.

<definitions ....>
	<types>
		<-- type-system extensibility element -->
	</types>
</definitions>

2.3 Messages

Messages consists of one or more logical parts. Each part is associated with a type from some type
system using a message-typing attribute. The set of message-typing attributes is extensible.
WSDL defines several such message-typing attributes for use with XSD:

element: Refers to an XSD element using a QName

type: Refers to an XSD simpleType or complexType using a QName

Other message-typing attributes may be defined as long as they use a namespace different from
that of WSDL. Binding extensibility elements may also use message-typing attributes.

The syntax for defining a mesage is as follows. The message-typing attributes (which may vary depending
on the type system used) are shown in bold:

<definitions .... >
	<message name="nmtoken"> *
		<part name="nmtoken" element="qname"? type="qname"?/> *
	</message>
</definitions>

The message name attribute provides a unique name among all messages defiend within the
enclosing WSDL document

The part name attribute provides a unique name among all the parts of the enclosing message.

2.3.1 Message parts

Parts are a flexible mechanism for describing the logical abstract content of a message. A binding may
reference the name of a part in order to specify binding-specific information about the part.
For example, if defining a message for use with RPC, a part MAY represent a parameter in the message.

However, the bindings must be inspected in order to determine the actual meaning of the part.

Multiple part elements are used if the message has multiple logical units. For example, the following
message consists of a Purchase Order and an Invoce.

<definitions .... >
	<types>
		<schema ....>
			<element name="PO" type="tns:POType"/>
			<complexType name="POType">
				<all>
					<element name="id" type="string"/>
					<element name="name" type="string"/>
					<element name="items">
						<complexType>
							<all>
								<element name="item" type="tns:Item" minOccurs="0" maxOccurs="unbounded"/>
							</all>
						</complexType>
					</element>
				</all>
			</complexType>

			<complexType name="Item">
				<all>
					<element name="quantity" type="int"/>
					<element name="product" type="string"/>
				</all>
			</complexType>
			<element name="Invoice" type="tns:InvoiceType"/>
			<complexType name="InvoiceType">
				<all>
					<element name="id" type="string"/>
				</all>
			</complexType>
		</schema>
	</types>

	<message name="PO">
		<part name="po" element="tns:PO"/>
		<part name="invoice" element="tns:Invoice"/>
	</message>
</definitions>

However, if the message contents are sufficiently complex, then an alternative syntax may be used to specify the
composite structure of the message using the type system directly. In this usage, only one part may be specified.
In the following example, the body is either a purchase order, or a set of invoices.

<definitions .... >
	<types>
		<schema .... >
			<complexType name="POType">
				<all>
					<element name="id" type="string/>
					<element name="name" type="string"/>
					<element name="items">
						<complexType>
							<all>
								<element name="item" type="tns:Item" minOccurs="0" maxOccurs="unbounded"/>
							</all>
						</complexType>
					</element>
				</all>
			</complexType>

			<complexType name="Item">
				<all>
					<element name="quantity" type="int"/>
					<element name="product" type="string"/>
				</all>
			</complexType>
			<complexType name="InvoiceType">
				<all>
					<element name="id" type="string"/>
				</all>
			</complexType>

			<complexType name="Composite">
				<choice>
					<element name="PO" minOccurs="1" maxOccurs="1" type="tns:POType"/>
					<element name"Invoice" minOccurs="0" maxOccurs="unbounded" type="tns:InvoiceType"/>
				</choice>
			</complexType>
		</schema>
	</types>

	<message name="PO">
		<part name="composite" type="tns:Composite"/>
	</message>
</definitions>

2.3.2 Abstract vs. Concrete Messages

Message definitions are always considered to be an abstract definition of the message content.
A message binding describes how the abstract content is mapped into a concrete format. However,
in some cases, the abstract definition may match the concrete representation very closely or exactly
for one or more bindings, so those binding(s) will supply little or no mapping information.

However, another binding of the same message definition may require extensive mapping information.
For this reason, it is not until the binding is inspected that one can determine "how abstract"
the message really is.

2.4 Port Types

A port type is a named set of abstract operations and the abstract messages involved.

<wsdl:definitions .... >
	<wsdl:portType name="nmtoken">
		<wsdl:operation name="nmtoken" .... />
	</wsdl:portType>
</wsdl:definitions>

The port type name attribute provides a unqiue name among all port types defined within in the enclosing WSDL document.

An operation is named via the name attribute. WSDL has four transmission primitives that an endpoint can support:

One-way: The endpoint receives a message.

Request-response: The endpoint receives a message, and sends a correlated message.

Solicit-response: The endpoint sends a message, and receives a correlated message.

Notification: The endpoint sends a message.

WSDL refers to these primitives as operations. Although request/response or solicit/response can be modeled
abstractly using two one-way messages, it is useful to model these as primtive operation types because:

They are very common

The sequence can be correlated without having to introduce more complex flow information

Some endpoints can only receive messages if they are the result of a synch request response

A simple flow can algorithmically be derived from these primitives at the point when flow definition is desired

Although request/response or solicit/response are logically correlated in the WSDL document, a given binding
describes the concrete correlation information. For example, the request and response message may be exchanged
as part of one or two actual network communications.

Although the base WSDL structure supports bindings for these four transmission primitives, WSDL only defines
bindings for the One-way and Request-response primitives. It is expected that specifications that define the
protocols for Solicit-response or Notification would also include WSDL binding extensions that allow use
of these primitives.

Operations refer to the messages involved using the message attribute of type QName. This attribute follows
the rules defined by WSDL for linking (see section 2.1.2)

2.4.1 One-way Operation

The grammar for a one-way operation is:

<wsdl:definitions .... > <wsdl:portType .... > *
		<wsdl:operation name="nmtoken">
			<wsdl:input name="nmtoken"? message="qname"/>
		</wsdl:operation>
	</wsdl:portType>
</wsdl:definitions>

The input element specifies the abstract message format for the one-way operation.

2.4.2 Request-response Operation

The grammar for a request-response operation is:

<wsdl:definitions .... >
	<wsdl:portType .... > *
		<wsdl:operation name="nmtoken" parameterOrder="nmtokens">
			<wsdl:input name="nmtoken"? message="qname"/>
			<wsdl:output name="nmtoken"? message="qname"/>
			<wsdl:fault name="nmtoken" message="qname"/>*
		</wsdl:operation>
	</wsdl:portType>
</wsdl:definitions>

The input and output elements specify the abstract message format for the request and response, respectively.
The optional fault elements specify the abstract message format for any error messages that may be output as the
result of the operation beyond those specific to the protocol.

Note that a request-response operation is an abstract notion; a particular binding must be consulted to determine
how the messages are actually sent: within a single communication (such as a HTTP request/response) or as two
independent communications (such as two HTTP requests)

2.4.3 Solicit-response Operation

The grammar for a solicit-response operation is:

<wsdl:definitions .... >
	<wsdl:portType .... > *
		<wsdl:operation name="nmtoken" parameterOrder="nmtokens">
			<wsdl:output name="nmtoken"? message="qname"/>
			<wsdl:input name="nmtoken"? message="qname"/>
			<wsdl:fault name="nmtoken" message"qname"/>*
		</wsdl:operation>
	</wsdl:portType>
</wsdl:definitions>

The output and input elements specify the abstract message format for the solicited
request and response, respectively. The optional fault elements specify the abstract
message format for any error messages that may be output as the result of the operation
(beyond those specific to the protocol).

Note that a solicit-response operation is an abstract notion; a particular binding must be
consulted to determine how the messages are actually sent: within a single communication
(such as a HTTP request/response), or as two independent communications (such as two HTTP requests)

2.4.4 Notification Operation

The grammar for a notification operation is:

<wsdl:definitions .... >
	<wsdl:portType ... > *
		<wsdl:operation name="nmtoken">
			<wsdl:output name="nmtoken"? message="qname"/>
		</wsdl:operation>
	</wsdl:portType>
</wsdl:definitions>

The output element specifies the abstract message format for the notification operation.

2.4.5 Names of Elements within an Operation

The name attribute of the input and output elements provides a unique name among all input and output
elements within the enclosing port type.

In order to avoid having to name each input and output element within an operation, WSDL provides some
default values based on the operation name. If the name attribute is not specified on a one-way or
notification message, it defaults to the name of the operation.

If the name attribute is not specified on the input or output messages of a request-response or solicit-response
operation, the name defaults to the name of the operation with "Request"/"Solicit" or "Response" appended,
respectively.

Each fault element must be named to allow a binding to specify the concrete format of the fault message.
The name of the fault element is unique within the set of faults defined for the operation.

2.4.6 Parameter Order within an Operation

Operations do not specify whether they are to be used with RPC-like bindings or not. However, when using
an operation with an RPC-binding, it is useful to be able to capture the original RPC function signature.

For this reason, a request-response or solicit-response operation MAY specify a list of parameter names
via the parameterOrder attribute (of type nmtokens). The value of the attribute is a list of message part
names separated by a single space. The value of the parameterOrder attribute MUST follow the following
rules:

The part name order reflects the order of the parameters in the RPC signature

The return value part is not present in the list

If a part name appears in both the input and output message, it is an in/out parameter

If a part name appears in only the input message, it is an in parameter

If a part name appears in only the output message, it is an out parameter

Note that this information serves as a "hint" and may safely be ignored by those not concerned
with RPC signatures. Also, it is not required to be present, even if the operation is to be
used with an RPC-like binding.

2.5 Bindings

A binding defines message format and protocol details for operations and messages defined by a particular
portType. There may be any number of bindings for a given portType. The grammar for a binding is as follows:

<wsdl:definitions .... >
	<wsdl:binding name="nmtoken" type="qname"> *
		<-- extensibility element (1) --> *
		<wsdl:operation name="nmtoken"> *
			<-- extensibility element (2) --> *
			<wsdl:input name="nmtoken"? > ?
				<-- extensibility element (3) -->
			</wsdl:input>
			<wsdl:output name="nmtoken"? > ?
				<-- extensibility element (4) --> *
			</wsdl:output>
			<wsdl:fault name="nmtoken"> *
				<-- extensibility element (5) --> *
			</wsdl:fault>
		</wsdl:operation>
	</wsdl:binding>
</wsdl:definitions>

The name attribute provides a unique name among all bindings defined within in the enclosing WSDL document.

A binding references the portType that it binds using the type attribute. This QName value follows the linking
rules defined by WSDL (see section 2.1.2)

Binding extensibility elements are used to specify the concrete grammat for the input(3), output(4), and fault
messages (5). Per-operation binding information (2) as well as per-binding information (1) may also be specified.

An operation element within a binding specifies binding information for the operation with the same name within
the binding's portType. Since operation names are not required to be unique (for example, in the case of overloading
of method names), the name attribute in the operation binding element might not be enough to uniquely identify an operation.

In that case, the correct operation should be identified by providing the name attributes of the corresponding
wsdl:input and wsdl:output elements.

A binding MUST specify exactly ONE protocol.

A binding MUST NOT specify address information.

2.6 Ports

A port defines an individual endpoint by specifying a single address for a binding:

<wsdl:definitions .... >
	<wsdl:service .... > *
		<wsdl:port name="nmtoken" binding="qname"> *
			<-- extensibility element (1) -->
		</wsdl:port>
	</wsdl:service>
</wsdl:definitions>

The name attribute provides a unique name among all ports defined within in the enclosing
WSDL document.

The binding attribute (of type QName) refers to the binding using the linking rules defined
by WSDL (see Section 2.1.2)

Binding extensibility elements (1) are used to specify the address information for the port.

A port MUST NOT specify more than one address.

A port MUST NOT specify any binding information other than address information.

2.7 Services

A service groups a set of related ports together:

<wsdl:definitions .... >
	<wsdl:service name="nmtoken"> *
		<wsdl:port .... />*
	</wsdl:service>
</wsdl:definitions>

The name attribute provides a unique name among all services defined within in the enclosing
WSDL document.

Posts within a service have the following relationship:

None of the ports communicate with each other (e.g the output of one port is not the input of another)

If a service has several ports that share a port type, but employ different bindings or addresses, the ports are
alternatives. Each port provides semantically equivalent behavior (within the transport and message format limitations
imposed by each binding). This allows a consumer of a WSDL document to choose particular port(s) to communicate
with based on some criteria (protocol, distance, etc.)

By examining it's ports, we can determine a service's port types. This allows a consumer of a WSDL document to determine
if it wishes to communicate to a particular service based whether or not it supports several port types. This is useful
if there is some implied relationship between the operations of the port types, and that the entire set of port types
must be present in order to accomplish a particular task.

3. SOAP Binding

WSDL includes a binding for SOAP 1.1 endpoints, which supports the specification of the following protocol
specific information:

An indication that a binding is bound to the SOAP 1.1 protocol

A way of specifying an address for a SOAP endpoint.

The URI for the SOAPAction HTTP header for the HTTP binding of SOAP

A list of definitions or headers that are transmitted as part of the SOAP Envelope

This binding grammar it is not a exhaustive specification since the set of SOAP bindings is evolving.
Nothing precludes additional SOAP bindings to be derived from portions of this grammar. For example:

SOAP bindings that do not employ a URI addressing scheme may substitute another addressing scheme by replacing
the soap:address element defined in section 3.8

SOAP bindings that do not require a SOAPAction omit the soapAction attribute defined in section 3.4

3.1 SOAP Examples

In the following example, a SubscribeToQuotes SOAP 1.1 one-way message is sent to a StockQuote service via 
a SMTP binding. The request takes a ticker symbol of type string, and includes a header defining the
subscription URI.

Example 3. SOAP binding of one-way operation over SMTP using a SOAP Header

<?xml version="1.0"?>
<definitions name="StockQuote"
		targetNamespace="http://example.com/stockquote.wsdl"
		xmlns:tns="http://example.com/stockquote.wsdl"
		xmlns:xsd1="http://example.com/stockquote.xsd"
		xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
		xmlns="http://schemas.xmlsoap.org/wsdl/">

	<message name="SubscribeToQuotes">
		<part name="body" element="xsd1:SubscribeToQuotes"/>
		<part name="subscribeheader" element="xsd1:SubscriptionHeader"/>
	</message>

	<portType name="StockQuotePortType">
		<operation name="SubscribeToQuotes">
			<input message="tns:SubscribeToQuotes"/>
		</operation>
	</portType>

	<binding name="StockQuoteSoap" type="tns:StockQuotePortType">
		<soap:binding style="document" transport="http://example.com/smtp"/>
		<operation name="SubscribeToQuotes">
			<input message="tns:SubscribeToQuotes">
				<soap:body parts="body" use="literal"/>
				<soap:header message="tns:SubscribeToQuotes" part="subscribeheader" use="literal"/>
			</input>
		</operation>
	</binding>

	<service name="StockQuoteService">
		<port name="StockQuotePort" binding="tns:StockQuoteSoap">
			<soap:address location="mailto:subscribe@example.com"/>
		</port>
	</service>

	<types>
		<schema targetNamespace="http://example.com/stockquote.xsd"
				xmlns="http://www.w3.org/2000/10/XMLSchema">
			<element name="SubscribeToQuotes">
				<complexType>
					<all>
						<element name="tickerSymbol" type="string"/>
					</all>
				</complexType>
			</element>
			<element name="SubscriptionHeader" type="uriReference"/>
		</schema>
	</types>
</definitions>

This example describes that a GetTradePrice SOAP 1.1 request may be sent to a 
StockQuote service via the SOAP 1.1 HTTP binding. The request takes a ticker symbol of type
string, a time of type timeInstant, and returns the price as float in the SOAP response.

Example 4. SOAP binding of request-response RPC operation over HTTP

NOTE: xsd is a XML Schema Definition, the ruleset of hierarchies, ordering, attributes etc.


<?xml version="1.0"?>
<definitions name="StockQuote"
			targetNamespace="http://example.com/stockquote.wsdl"
			xmlns:tns="http://example.com/stockquote.wsdl"
			xmlns:xsd="http://www.w3.org/2000/10/XMLSchema"
			xmlns:xsd1="http://example.com/stockquote.xsd"
			xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
			xmlns="http://schemas.xmlsoap.org/wsdl/">

	<message name="GetTradePriceInput">
		<part name="tickerSymbol" element="xsd:string"/>
		<part name="time" element="xsd:timeInstant"/>
	</message>

	<message name="GetTradePriceOutput">
		<part name="result" type="xsd:float"/>
	</message>

	<portType name="StockQuotePortType">
		<operation name="GetTradePrice">
			<input message="tns:GetTradePriceInput"/>
			<output message="tns:GetTradePriceOutput"/>
		</operation>
	</portType>

	<binding name="StockQuoteSoapBinding" type="tns:StockQuotePortType">
		<soap:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http"/>
		<operation name="GetTradePrice">
			<soap:operation soapAction="http://example.com/GetTradePrice"/>
			<input>
				<soap:body use="encoded" namespace="http://example.com/stockquote"
							encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</input>
			<output>
				<soap:body use="encoded" namespace="http://example.com/stockquote"
							encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</output>
		</operation>>
	</binding>

	<service name="StockQuoteService">
		<documentation>My First Service</documentation>
		<port name="StockQuotePort" binding="tns:StockQuoteBinding">
			<soap:address location="http://example.com/stockquote"/>
		</port>
	</service>
</definitions>

This example describes that a GetTradePrices SOAP 1.1 request may be sent
to a StockQuote service via the SOAP 1.1 HTTP binding. The request takes a stock
quote symbol string, an application defined TimePeriod structure containing a start
and end time and returns an array of stock prices recorded by the service within that period of time,
as well as the frequency at which they were recorded as the SOAP response.

The RPC signature that corresponds to this service has in parameters tickerSymbol
and timePeriod followed by the output parameter frequency, and returns an array of floats.

Example 5. SOAP binding of request-response RPC operation over HTTP

<?xml version="1.0"?>
<definitions name="StockQuote"

targetNamespace="http://example.com/stockquote.wsdl"
			xmlns:tns="http://example.com/stockquote.wsdl"
			xmlns:xsd="http://www.w3.org/2000/10/XMLSchema"
			xmlns:xsd1="http://example.com/stockquote/schema"
			xmlns:soap="http://schemas.xmlsoap.org/soap/encoding/"
			xmlns="http://schemas.xmlsoap.org/wsdl/">
	<types>
		<schema targetNamespace="http://example.com/stockquote/schema"
				xmlns="http://www.w3.org/2000/10/XMLSchema">
			<complexType name="TimePeriod">
				<all>
					<element name="startTime" type="xsd:timeInstant"/>
					<element name="endTime" type="xsd:timeInstant"/>
				</all>
			</complexType>
			<complexType name="ArrayOfFloat">
				<complexContent>
					<restriction base="soapenc:Array">
						<attribute ref="soapenc:arrayType" wsdl:arrayType="xsd:float[]"/>
					</restriction>
				</complexContent>
			</complexType>
		</schema>
	</types>

	<message name="GetTradePricesInput">
		<part name="tickerSymbol" element="xsd:string"/>
		<part name="timePeriod" element="xsd1:TimePeriod"/>
	</message>

	<message name="GetTradePricesOutput">
		<part name="result" type="xsd1:ArrayOfFloat"/>
		<part name="frequency" type="xsd:float"/>
	</message>

	<portType name="StockQuotePortType">
		<operation name="GetLastTradePrice" parameterOrder="tickerSymbol timePeriod frequency">
			<input message="tns:GetTradePricesInput"/>
			<output message="tns:GetTradePricesOutput"/>
		</operation>
	</portType>

	<binding name="StockQuoteSoapBinding" type="tns:StockQuotePortType">
		<soap:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http"/>
		<operation name="GetTradePrices">
			<soap:operation soapAction="http://example.com/GetTradePrices"/>
			<input>
				<soap:body use="encoded" namespace="http://example.com/stockquote"
							encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</input>
			<output>
				<soap:body use="encoded" namespace="http://example.com/stockquote"
							encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
			</output>
		</operation>>
	</binding>

	<service name="StockQuoteService">
		<documentation>My First service</documentation>
		<port name="StockQuotePort" binding="tns:StockQuoteBinding">
			<soap:address location="http://example.com/stockquote"/>
		</port>
	</service>
</definitions>

3.2 How the SOAP Binding Extends WSDL

The SOAP Binding extends WSDL with the following extension elements:

<definitions .... >
	<binding .... >
		<soap:binding style="rpc|document" transport="uri">
		<operation .... >
			<soap:operation soapAction="uri"? style="rpc|document"?>?
			<input>
				<soap:body parts="nmtokens"? use="literal|encoded"
							encodingStyle="uri-list"? namespace="uri"?>
				<soap:header message="qname" part="nmtoken" use="literal|encoded"
							encodingStyle="uri-list"? namespace="uri"?>*
					<soap:headerfault message="qname" part="nmtoken" use="literal|encoded"
										encodingStyle="uri-list"? namespace="uri"?/>*
				<soap:header>
			</input>
			<output>
				<soap:body parts="nmtokens"? use="literal|encoded"
							encodingStyle="uri-list"? namespace="uri"?>
				<soap:header message="qname" parts="nmtoken" use="literal|encoded"
							 encodingStyle="uri-list"? namespace="uri"?>*
					<soap:headerfault message="qname" part="nmtoken" use="literal|encoded"
									encodingStyle="uri-list"? namespace="uri"?/>*
				<soap:header>
			</output>
			<fault>*
				<soap:fault name="nmtoken" use="literal|encoded"
							encodingStyle="uri-list"? namespace="uri"?>
			</fault>
		</operation>
	</binding>

	<port .... >
		<soap:address location="uri"/>
	</port>
</definitions>

Each extension element of the SOAP binding is covered in subsequent sections.

3.3 soap:binding

The purpose of the SOAP binding element is to signify that the binding is bound to the SOAP
protocol format: Envelope, Header and Body. This element makes no claims as to the encoding
or format of the message (e.g that it necessarily follows section 5 of the SOAP 1.1 spec)

The soap:binding elements MUST be present when using the SOAP binding

<definitions .... >
	<binding .... >
		<soap:binding transport="uri"? style="rpc|document"?>
	</binding>
</definitions>

THe value of the style attribute is the default for the style attribute for each
contained operation. If the style attribute is omitted, it is assumed to be "document".
See section 3.4 for more information on the semantics of style.

The value of the required transport attribute indicates which transport of SOAP this binding
corresponds to. The URI value http://schemas.xmlsoap.org/soap/http corresponds to the HTTP
binding in the SOAP specification. Other URIs may be used here to indicate other transports
(such as SMTP, FTP, etc.)

3.4 soap:operation

The soap:operation element provides information for the operation as a whole

<definitions .... >
	<binding .... >
		<operation .... >
			<soap:operation soapAction="uri"? style="rpc|document"?>?
		</operation>
	</binding>
</definitions>

The style attribute indicates whether the operation is RPC-oriented (messages containing parameters
and return values) or document-oriented (message containing document(s)). This information may be used
to select an appropiate programming model. The value of this attribute also affects the way in which the
Body of the SOAP message is constructed, as explained in Section 3.5 below.

If the attribute is not specified, it defaults to the value specified in the soap:binding element.
If the soap:binding element does not specify a style, it is assumed to be "document".

The soapAction attribute specfies the value of the SOAPAction header for this operation. This URI
value should be used directly as the value for the SOAPAction header; no attempt should be made to
make a relative URI value absolute when making the request.

For the HTTP protocol binding of SOAP, this value is required (it has no default value). For other SOAP
protocol bindings, it MUST NOT be specified, and the soap:operation element may be omitted.

3.5 soap:body

The soap:body element specifies how the message parts appear inside the SOAP Body element.

the parts of a message may either be abstract type definitions, or concrete schema definitions.
If abstract definitions, the types are serialized according to some set of rules defined by
an encoding style.

Each encoding style is identified using a list of URIs, as in the SOAP specification. Since
some encoding styles such as the SOAP Encoding (http://schemas.xmlsoap.org/soap/encoding/) allow
variation in the message format for a given set of abstract types, it is up to the reader of the
message to understand all the format variations: "reader makes right".

To avoid having to support all variations, a message may be defined concretely and then indicate
it's original encoding style (if any) as a hint. In this case, the writer of the message must conform
exactly to the specified schema. "writer makes right"

The soap:body binding element provides information on how to assemble the different message parts
inside the Body element of the SOAP message. The soap:body element is used in both RPC-oriented
and document-oriented messages, but the style of the enclosing operation has important effects
on how the Body section is structured:

If the operation style is rpc each part is a parameter or a return value and appears inside a wrapper
element within the body (following Section 7.1 of the SOAP specification). The wrapper element is named
identically to the operation name and its namespace is the value of the namespace attribute.

Each message part (parameter) appears under the wrapper, represented by an accessor named identically
to the corresponding parameter of the call. Parts are arranged in the same order as the parameters
of the call.

If the operation style is document there are no additional wrappers, and the message parts appear
directly under the SOAP Body element.

The same mechanisms are used to define the content of the Body and parameter accessor elements.

<definitions .... >
	<binding .... >
		<operation .... >
			<input>
				<soap:body parts="nmtokens"? use="literal|encoded"?
							encodingStyle="uri-list"? namespace="uri"?>
			</input>
			<output>
				<soap:body parts="nmtokens"? use="literal|encoded"?
							encodingStyle="uri-list"? namespace="uri"?>
			</output>
		</operation>
	</binding>
</definitions>

The optional parts attribute of type nmtokens indicates which parts appear somewhere within the 
SOAP Body portion of the message (other parts of a mesage may appear in other portions of the
message such as when SOAP is used in conjunction with the multipart/related MIME binding).

If the parts attribute is omitted, then all parts defined by the message are assumed to be 
included in the SOAP Body portion.

The required use attribute indicates whether the message parts are encoded using some
encoding rules, or whether the parts define the concrete schema of the message.

If use is encoded, then each message part references an abstract type using the type attribute.
These abstract types are used to produce a concrete message by applying an encoding specified
by the encodingStyle attribute. The part names, types and value of the namespace attribute are
all inputs to the encoding, although the namespaces attribute only applies to content not explicitly
defined by the abstract types.

If the referenced encoding style allows variations in it's format (such as the SOAP encoding does),
then all variations MUST be supported ("reader makes right").

If use is literal, then each part references a concrete schema definition using either the element or
type attribute. In the first case, the element referenced by the part will appear directly under the
Body element (for document style bindings) or under an accessor element named after the message part
(in rpc style).

In the second, the type referenced by the part becomes the schema type of the enclosing element
(Body for document style or part accessor element for rpc style). For an example (such as the
SOAP encoding), but that only the specified variation is supported ("writer makes right").

The value of the encodingStyle attribute is a list of URIs, each separated by a single space.
The URI's represent encodings used within the message, in order from most restrictive to least
restrictive (exactly like the encodingStyle attribute defined in the SOAP specification).

3.6 soap:fault

The soap:fault element specifies the contents of the contents of the SOAP Fault Details element.
It is patterned after the soap:body element (see section 3.5)

<definitions .... >
	<binding .... >
		<operation .... >
			<fault>*
				<soap:fault name="nmtoken" use="literal|encoded"
								encodingStyle="uri-list"? namespace="uri"?>
			</fault>
		</operation>
	</binding>
</definitions>

The name attribute relates the soap:fault to the wsdl:fault defined for the operation.

The fault message MUST have a single part. The use, encodingStyle and namespace attributes
are all used in the same way as with soap:body (see section 3.5), only style="document"
is assumed since faults do not contain parameters.

3.7 soap:header and soap:headerfault

The soap:header and soap:headerfault elements allows header to be defined that are transmitted
inside the Header element of the SOAP Envelope. It is patterned after the soap:body element
(see section 3.5)

It is not nessecary to exhaustively list all headers that appear in the SOAP Envelope using 
soap:header. For example, extensions (see section 2.1.3) to WSDL may imply specific headers
should be added to the actual payload and it is not required to list those headers here.

<definitions .... >
	<binding .... >
		<operation .... >
			<input>
				<soap:header message="qname" part="nmtoken" use="literal|encoded"
							 encodingStyle="uri-list"? namespace="uri"?>*
					<soap:headerfault message="qname" part="nmtoken" use="literal|encoded"
									encodingStyle="uri-list"? namespace="uri"?/>*
				</soap:header>
			</input>
			<output>
				<soap:header message="qname" part="nmtoken" use="literal|encoded"
							 encodingStyle="uri-list"? namespace="uri"?>*
					<soap:headerfault message="qname" part="nmtoken" use="literal|encoded"
									encodingStyle="uri-list"? namespace="uri"?/>*
				<soap:header>
			</output>
		</operation>
	</binding>
</definitions>

The use, encodingStyle and namespace attributes are all used in the same way as with
soap:body (see section 3.5), only style="document" is assumed since headers do not contain
parameters.

Together, the message attribute (of type QName) and the part attribute (of type nmtoken) reference
the message part that defines the header type. The schema referenced by the part MAY include
definitions for the soap:actor and soap:mustUnderstand attribute if use="literal", but MUST NOT
if use="encoded". The referenced message need not be the same as the message that defines the SOAP Body.

The optional headerfault elements which appear inside soap:header and have the same syntax as soap:header)
allows specification of the header type(s) that are used to transmit error information pretaining to the
header defined by the soap:header.

The SOAP specification states that errors pertaining to headers must be returned in headers, and this
mechanism allows specification of the format of such headers.

3.8 soap:address

The SOAP address binding is used to give a port an address (a URI). A port using the SOAP binding
MUST specify exactly one address. The URI scheme specified for the address must correspond to the
transport specified by the soap:binding.

<definitions .... >
	<port .... >
		<binding .... >
			<soap:address location="uri"/>
		</binding>
	</port>
</definitions>

4. HTTP GET & POST Binding

WSDL includes a binding for HTTP 1.1's GET and POST verbs in order to describe the interaction between
a Web Browser and a web site. This allows applications other than Web Browsers to interact with the site.
The following protocol specific information may be specified:

An indication that a binding uses HTTP GET or POST

An address for the port

A relative address for each operation (relative to the base address defined by the port)

4.1 HTTP GET/POST Examples

The following example shows three ports that are bound differently for a given port type.

If the values being passed are part1=1, part2=2, part3=3, the request format would be
as follows for each port:

port1: GET, URL="http://example.com/o1/A1B2/3"
port2: GET, URL="http://example.com/o1?p1=&p2=2&p3=3"
port3: POST, URL="http://example.com/o1", PAYLOAD="p1=1&p2=2&p3=3"

For each port, the response is either a GIF or a JPEG image

Example 6. GET and FORM POST returning GIF or JPG

<definitions .... >
	<message name="m1">
		<part name="part1" type="xsd:string"/>
		<part name="part2" type="xsd:int"/>
		<part name="part3" type="xsd:string"/>
	</message>

	<message name="m2">
		<part name="image" type="xsd:binary"/>
	</message>

	<portType name="pt1">
		<operation name="o1">
			<input message="tns:m1"/>
			<output message="tns:m2"/>
		</operation>
	</portType>

	<service name="service1">
		<port name="port1" binding="tns:b1">
			<http:address location="http://example.com/"/>
		</port>
		<port name="port2" binding="tns:b2">
			<http:address location="http://example.com/"/>
		</port>
		<port name="port3" binding="tns:b3">
			<http:address location="http://example.com/"/>
		</port>
	</service>

	<binding name="b1" type="pt1">
		<http:binding verb="GET"/>
		<operation name="o1">
			<http:operation location="o1/A(part1)B(part2)/(part3)"/>
			<input>
				<http:urlReplacement/>
			</input>
			<output>
				<mime:content type="image/gif"/>
				<mime:content type="image/jpeg"/>
			</output>
		</operation>
	</binding>

	<binding name="b2" type="pt1">
		<http:binding verb="GET"/>
		<operation name="o1">
			<http:operation location="o1"/>
			<input>
				<http:urlEncoded/>
			</input>
			<output>
				<mime:content type="image/gif"/>
				<mime:content type="image/jpeg"/>
			</output>
		</operation>
	</binding>

	<binding name="b3" type="pt1">
		<http:binding verb="POST"/>
		<operation name="o1">
			<http:operation location="o1"/>
			<input>
				<mime:content type="application/x-www-form-urlencoded"/>
			</input>
			<output>
				<mime:content type="image/gif"/>
				<mime:content type="image/jpeg"/>
			</output>
		</operation>
	</binding>
</definitions>

4.2 How the HTTP GET/POST Binding Extends WSDL

The HTTP GET/POST Binding extends WSDL with the following extension elements:

<definitions .... >
	<binding .... >
		<http:binding verb="nmtoken"/>
		<operation .... >
			<http:operation location="uri"/>
			<input .... >
				<-- mime elements -->
			</input>
			<output .... >
				<-- mime elements -->
			</output>
		</operation>
	</binding>

	<port .... >
		<http:address location="uri"/>
	</port>
</definitions>

These elements are covered in the subsequent sections.

4.3 http:address

The location attribute specifies the base URI for the port. The value of the
attribute is combined with the values of the location attribute of the http:operation
binding element. See section 4.5 for more details

4.4 http:binding

The http:binding element indicates that this binding uses the HTTP protocol.

<definitions .... >
	<binding .... >
		<http:binding verb="nmtoken"/>
	</binding>
</definitions>

The value of the required verb attribute indicates the HTTP verb. Common values
are GET or POST, but others may be used. Note that HTTP verbs are case sensitive..

4.5 http:operation

The location attribute specifies a relative URI for the operation. This URI is combined with
the URI specified in the http:address element to form the full URI for the HTTP request.
The URI value MUST be a relative URI.

<definitions .... >
	<binding .... >
		<operation .... >
			<http:operation location="uri"/>
		</operation>
	</binding>
</definitions>

4.6 http:urlEncoded

The urlEncoded element indicates that all the message parts are encoded into the HTTP request
URI using the standard URI-encoding rules (name1=value&name2=value)

The names of the parameters corresponds to the names of the message parts. Each value contributed
by the part is encoded using a name=value pair. This may be used with GET to specify URL encoding,
or with POST to specify a FORM-POSt. For GET, the "?" character is automatically appended as
necessary.

<http:urlEncoded/>

For more information on the rules for URI-encoding parameters, see [5], [6] and [7].

4.7 http:urlReplacement

The http:urlReplacement element indicates that all the message parts are encoded into the
HTTP request URI using a replacement algorithm:

The relative URI value of http:operation is searched for a set of search patterns.

The search occurs before the value of the http:operation is combined with the value of the
location attribute from http:address

There is one search pattern for each message part. The search pattern string is the name of the
message part surrounded with paranthesis "(" and ")".

For each match, the value of the corresponding message part is substituted for the match
at the location of the match.

Matches are performed before any values are replaced (replaced values do not trigger additional
matches)

Mesage parts MUST NOT have repeating values.

<http:urlReplacement/>

5. MIME Binding

WSDL includes a way to bind abstract types to concrete messages in some MIME format. Bindings for
the following MIME types are defined:

multipart/related

text/xml

application/x-www-form-urlencoded (the format used to submit a form in HTML)

Others (by specifying the MIME type string)

The set of defined MIME types is both large and evolving, so it is not a goal for WSDL
to exhaustively define XML grammar for each MIME type. Nothing precludes additional grammar
to be added to define additional MIME types as necessary.

If a MIME type string is sufficient to describe the content, the mime element defined below
can be used.

5.11 MIME Binding Example

Example 7. Using multipart/related with SOAP

This example describes that a GetCompanyInfo SOAP 1.1 request may be sent to a StockQuote
service via the SOAP 1.1 HTTP binding. The request takes a ticker symbol of type string.

The response contains multiple parts encoded in the MIME format multipart/related: a SOAP
Envelope containing the current stock price as a float, zero or more marketing literature documents
in HTML format and an optional company logo in either GIF or JPEG format.

<definitions .... >
	<types>
		<schema .... >
			<element name="GetCompanyInfo">
				<complexType>
					<all>
						<element name="tickerSymbol" type="string"/>
					</all>
				</complexType>
			</element>
			<element name="GetCompanyInfoResult">
				<complexType>
					<all>
						<element name="result" type="float"/>
					</all>
				</complexType>
			</element>
			<complexType name="ArrayOfBinary">
				<complexContent>
					<restriction base="soapenc:Array">
						<attribute ref="soapenc:arrayType" wsdl:arrayType="xsd:binary[]"/>
					</restriction>
				</complexContent>
			</complexType>
		</schema>
	</types>

	<message name="m1">
		<part name="body" element="tns:GetCompanyInfo"/>
	</message>

	<message name="m2">
		<part name="body" element="tns:GetCompanyInfoResult"/>
		<part name="docs" type="xsd:string"/>
		<part name="logo" type="tns:ArrayOfBinary"/>
	</message>

	<portType name="pt1">
		<operation name="GetCompanyInfo">
			<input message="m1"/>
			<output message="m2"/>
		</operation>
	</portType>

	<binding name="b1" type="tns:pt1">
		<operation name="GetCompanyInfo">
			<soap:operation soapAction="http://example.com/GetCompanyInfo"/>
			<input>
				<soap:body use="literal"/>
			</input>
			<output>
				<mime:multipartRelated>
					<mime:part>
						<soap:body parts="body" use="literal"/>
					</mime:part>
					<mime:part>
						<mime:content part="docs" type="text/html"/>
					</mime:part>
					<mime:part>
						<mime:content part="logo" type="image/gif"/>
						<mime:content part="logo" type="image/jpeg"/>
					</mime:part>
				</mime:multipartRelated>
			</output>
		</operation>
	</binding>

	<service name="CompanyInfoService">
		<port name="CompanyInfoPort"binding="tns:b1">
			<soap:address location="http://example.com/companyinfo"/>
		</port>
	</service>
</definitions>

5.2 How the MIME Binding extends WSDL

The MIME Binding extends WSDL with the following extension elements:

<mime:content part="nmtoken"? type="string"?/>

<mime:multipartRelated>
	<mime:part> *
		<-- mime element -->
	</mime:part>
</mime:multipartRelated>

<mime:mimeXml part="nmtoken"?/>

They are used at the following locations in WSDL:

<definitions .... >
	<binding .... >
		<operation .... >
			<input .... >
				<-- mime elements -->
			</input>
			<output .... >
				<-- mime elements -->
			</output>
		</operation>
	</binding>
</definitions>

MIME elements appear under input and output to specify the MIME format.
If multiple appear, they are considered to be alternatives.

5.3 mime:content:

To avoid having to define a new element for every MIME format, the mime:content element
may be used if there is no additional information to convey about the format other than
its MIME type string.

<mime:content part="nmtoken"? type="string"?/>

The part attribute is used to specify the name of the message part. If the message
has a single part, then the part attribute is optional. The type attribute contains the
MIME type string. 

A type value has two portions, separated by a slash (/), either of which may be a wildcard (*).
Not specifying the type attribute indicates that all MIME types are acceptable.

If the return format is XML, but the schema is not known ahead of time, the generic mime
element can be used indicating text/xml:

<mime:content type="text/xml"/>

A wildcard (*) can be used to specify a family of mime types, for example all text
types.

<mime:content type="text/*"/>

The following two examples both specify all mime types:

<mime:content type="*/*"/>
<mime:content/>

5.4 mime:multipartRelated

The multipart/related MIME type aggregates an arbitrary set of MIME formatted parts into
one message using the MIME type "multipart/related". The mime:multipartRelated element
describes the concrete format of such a message:

<mime:multipartRelated>
	<mime:part> *
		<-- mime element -->
	</mime:part>
</mime:multipartRelated>

The mime:part element describes each part of a multipart/related message. MIME elements
appear within mime:part to specify the concrete MIME type for the part. If more than one
MIME element appears inside a mime:part, they are alternatives.

5.5 soap:body

When using the MIME binding with SOAP requests, it is legal to use the soap:body element
as a MIME element. It indicates the content type is "text/xml", and there is an enclosing
SOAP Envelope.

5.6 mime:mimeXml

To specify XML payloads that are not SOAP compliant (do not have a SOAP Envelope), but do have
a particular schema, the mime:mimeXml element may be used to specify that concrete schema.

The part attribute refers to a message part defining the concrete schema of the root XML
element. The part attribute MAY be omitted if the message has only a single part. The part
references a concrete schema using the element attribute for simple parts or type attribute
for composite parts (see section 2.3.1)

<mime:mimeXml part="nmtoken"?/>

A 1. Notes on URIs

A 1.1 XML namespaces & schema locations

It is a common misperception to equate the targetNamespace of an XML schema or the
value of the xmlns attribute in XML instances with the location of the corresponding
schema.

Since namespaces are in fact URIs, and URIs may be locations, and you may be able
to retrieve a schema from that location, it does not mean that it is the only schema
that is associated with that namespace.

There can be multiple schemas associated with a particular namespace, and it is up
to a processor of XML to determine which one to use in a particular processing context.
The WSDL specifications provides the processing context here via the <import> mechanism,
which is based on the XML schemas grammar for the similar concept.

A 1.2 Relative URIs

Throughout this document you see fully qualified URIs used in WSDL and XSD documents.
The use of a fully qualified URI is simply to illustrate the referencing concepts.
The use of relative URIs is completely allowed and is warranted in many cases.

For information on processing relative URIs, see http://www.normos.org/ietf/rfc/rfc2396.txt

A 1.3 Generating URIs

When working with WSDL, it is sometimes desirable to make up a URI for an entity, but not
make the URI globally unique for all time and have it "mean" that version of the entity
(schema, WSDL document, etc.). There is a particular URI base reserved for use for this
type of behavior.

The base URI "http://tempuri.org/" can be used to construct a URI without any unique association
to an entity. For example, two people or programs could choose to simultaneously use the URI
"http://tempuri.org/myschema" for two completely different schemas, and as long as the scope
of the use of the URIs does not intersect, then they are considered unique enough.

This has the further benefit that the entity referred to by the URI can be versioned without
having to generate a new URI, as long as it makes sense within the processing context.
It is not recommended that "http://tempuri.org/" be used as a base for stable, fixed
entities.

A 2. Wire format for WSDL examples

A 2.1 Example 1

SOAP Message Embedded in HTTP Request

POST /StockQuote HTTP/1.1
Host: www.stockquoteserver.com
Content-Type: text/xml; charset="utf-8"
Content-Length: nnnn
SOAPAction: "Some-URI"

<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
	<soapenv:Body>
		<m:GetLastTradePrice xmlns:m="Some-URI">
			<m:tickerSymbol>DIS</m:tickerSymbol>
		</m:GetLastTradePrice>
	</soapenv:Body>
</soapenv:Envelope>

SOAP Message Embedded in HTTP Response

HTTP/1.1 200 OK
Content-Type: text/xml; charset="utf-8"
Content-Length: nnnn

<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
	<soapenv:Body>
		<m:GetLastTradePriceResponse xmlns:m="Some-URI">
			<m:price>34.5</m:price>
		</m:GetLastTradePriceResponse>
	</soapenv:Body>
</soapenv:Envelope>

A 3. Location of Extensibility Elements

Extensibility elements can appear at the following locations in a WSDL document:

Location 			Meaning 										Possible usage

definitions 		The extensibility element applies to the WSDL 	Introduce additional information or definitions to a WSDL document as a whole.
					document as a whole.

definitions/types 	The extensibility element is a type system. 	Specify the format of the message in a type system other than XSD

definitions/service The extenisbility element applies to the service Introduce additonal information or definitions for the service.

definitions/ 		The extensbility element applies to the port 	Specify an addess for the port
service/
port

definitions/ 		The extensibility element applies to the binding Provide protocol specific info that applies to all the operations
binding 			as a whole. 										in teh port type being bound

definitions/ 		The extensbility element applies to the operation Provide protocol specific information that applies to both the input message
binding/ 			as a whole 											and the output message
operation


definitions/ 		The extensibility element applies to the input 	 Provide details on how abstract message parts map into the concrete 
binding/ 			message for the operation. 						 protocol and data formats of the binding
operation/
input 																 Provide additional protocol specific information for the input message

definitions/ 		The extensibility element applies to the output  Provide details on how abstract message parts map into the concrete
binding/ 			message of the operation. 						 protocol and data formats of the binding
operation/ 
output 																 Provide additional protocol specific info for the output message

definitions/ 		The extensbility element applies to a fault 	 Provide details on how abstract message parts map into the concrete
binding/ 			message of the operation 						 protocol and data formats of the binding.
operation/
fault 																 Provide additional protocol specific information for the fault message.

A 4. Schemas

A 4.1 WSDL Schema

<schema xmlns="http://www.w3.org/2000/10/XMLSchema"
		xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
		targetNamespace="http://schemas.xmlsoap.org/wsdl/"
		elementFormDefault="qualified">
	<element name="documentation">
		<complexType mixed="true">
			<choice minOccurs="0" maxOccurs="unbounded">
				<any minOccurs="0" maxOccurs="unbounded"/>
			</choice>
			<anyAttribute/>
		</complexType>
	</element>
	<complexType name="documented" abstract="true">
		<sequence>
			<element ref="wsdl:documentation" minOccurs="0"/>
		</sequence>
	</complexType>
	<complexType name="openAtts" abstract="true">
		<annotation>
			<documentation>
			This type is extended by component types
			to allow attributes from other namespaces to be added.
			</documentation>
		</annotation>
		<sequence>
			<element ref="wsdl:documentation" minOccurs="0"/>
		</sequence>
		<anyAttribute namespace="##other"/>
	</complexType>
	<element name="definitions" type="wsdl:definitionsType">
		<key name="message">
			<selector xpath="message"/>
			<field xpath="@name"/>
		</key>
		<key name="portType">
			<selector xpath="portType"/>
			<field xpath="@name"/>
		</key>
		<key name="binding">
			<selector xpath="binding"/>
			<field xpath="@name"/>
		</key>
		<key name="service">
			<selector xpath="service"/>
			<field xpath="@name"/>
		</key>
		<key name="import">
			<selector xpath="import"/>
			<field xpath="@namespace"/>
		</key>
		<key name="port">
			<selector xpath="service/port"/>
			<field xpath="@name"/>
		</key>
	</element>
	<complexType name="definitionsType">
		<complexContent>
			<extension base="wsdl:documented">
				<sequence>
					<element ref="wsdl:import" minOccurs="0" maxOccurs="unbounded"/>
					<element ref="wsdl:types" minOccurs="0"/>
					<element ref="wsdl:message" minOccurs="0" maxOccurs="unbounded"/>
					<element ref="wsdl:portType" minOccurs="0" maxOccurs="unbounded"/>
					<element ref="wsdl:binding" minOcurrs="0" maxOccurs="unbounded"/>
					<element ref="wsdl:service" minOccurs="0" maxOccurs="unbounded"/>
					<any namespace="##other" minOccurs="0" maxOccurs="unbounded">
						<annotation>
							<documentation>to support extensibility elements </documentation>
						</annotation>
					</any>
				</sequence>
				<attribute name="targetNamespace" type="uriReference" use="optional"/>
				<attribute name="name" type="NMTOKEN" use="optional"/>
			</extension>
		</complexContent>
	</complexType>
	<element name="import" type="wsdl:importType"/>
	<complexType name="importType">
		<complexContent>
	<extension base="wsdl:documented">
	<attribute name="namespace" type="uriReference" use="required"/>
		<attribute name="location" type="uriReference" use="required"/>
	</extension>
	</complexContent>
	</complexType>
		<element name="types" type="wsdl:typestype"/>
		<complexType name="typesType">
			<complexContent>
		<extension base="wsdl:documented">
		<sequence>
		<any namespace="##other" minOccurs="0" maxOccurs="unbounded"/>
	</sequence>
		</extension>
	</complexContent>
	</complexType>
		<element name="message" type="wsdl:messageType">
			<unique name="part">
				<selector xpath="part"/>
				<field xpath="@name"/>
			</unique>
		</element>
		<complexType name="messageType">
			<complexContent>
		<extension base="wsdl:documented">
		<sequence>
		<element ref="wsdl:part" minOccurs="0" maxOccurs="unbounded"/>
	</sequence>
			<attribute name="name" type="NCName" use="required"/>
		</extension>
	</complexContent>
	</complexType>
	<element name="part" type="wsdl:partType"/>
	<complexType name="partType">
		<complexContent>
	//Note, i realize there are indention errors here, but it is a general
	//concept here
	<extension base="wsdl:openAtts">
	<attribute name="name" type="NMTOKEN" use="optional"/>
		<attribute name="type" type="QName" use="optional"/>
		<attribute name="element" type="QName" use="optional"/>
	</extension>
	</complexContent>
	</complexType>
		<element name="portType" type="wsdl:portTypeType"/>
		<complexType name="portTypeType">
			<complexContent>
		<extension base="wsdl:documented">
		<sequence>
		<element ref="wsdl:operation" minOccurs="0" maxOccurs="unbounded"/>
	</sequence>
		<attribute name="name" type="NCName" use="required"/>
	</extension>
	</complexContent>
	</complexType>
		<element name="operation" type="wsdl:operationType"/>
		<complexType name="operationType">
			<complexContent>
		<extension base="wsdl:documented">
			<choice>
				<group ref="wsdl:one-way-operation"/>
				<group ref="wsdl:request-response-operation"/>
				<group ref="wsdl:solicit-response-operation"/>
				<group ref="wsdl:notification-operation"/>
			</choice>
			<attribute name="name" type="NCName" user="required"/>
		</extension>
	</complexContent>
	</complexType>
	<group name="one-way-operation">
		<sequence>
			<element ref="wsdl:input"/>
		</sequence>
	</group>
	<group name="request-response-operation">
		<sequence>
			<element ref="wsdl:input"/>
			<element ref="wsdl:output"/>
			<element ref="wsdl:fault" minOccurs="0" maxOccurs="unbounded"/>
		</sequence>
	</group>
	<group name="solicit-response-operation">
		<sequence>
			<element ref="wsdl:output"/>
			<element ref="wsdl:input"/>
			<element ref="wsdl:fault" minOccurs="0" maxOccurs="unbounded"/>
		</sequence>
	</group>
	<group name="notification-operation">
		<sequence>
			<element ref="wsdl:output"/>
		</sequence>
	</group>
	<element name="input" type="wsdl:paramType"/>
	<element name="output" type="wsdl:paramType"/>
	<element name="fault" type="wsdl:faultType"/>
	<complexType name="paramType">
		<complexContent>
	<extension base="wsdl:documented">
	<attribute name="name" type="NMTOKEN" use="optional"/>
		<attribute name="message" type="QName" use="required"/>
	</extension>
	</complexContent>
	</complexType>
	<complexType name="faultType">
		<complexContent>
	<extension base="wsdl:documented">
	<attribute name="name" type="NMTOKEN" use="required"/>
		<attribute name="message" type="QName" use="required"/>
	</extension>
	</complexContent>
	</complexType>
	<complexType name="startWithExtensionType" abstract="true">
		<complexContent>
	<extension base="wsdl:documented">
	<sequence>
	<any namespace="##other" minOccurs="0" maxOccurs="unbounded"/>
	</sequence>
	</extension>
	</complexContent>
	</complexType>
		<element name="binding" type="wsdl:bindingType"/>
		<complexType name="bindingType">
			<complexContent>
	<extension base="wsdl:startWithExtensionType">
	<sequence>
	<element name="operation" type="wsdl:binding_operationType" minOccurs="0" maxOccurs="unbounded"/>
	</sequence>
		<attribute name="name" type="NCName" use="required"/>
		<attribute name="type" type="QName" use="required"/>
	</extension>
	</complexContent>
	</complexType>
	<complexType name="binding_operationType">
		<complexContent>
	<extension base="wsdl:startWithExtensionsType">
	<sequence>
	<element name="input" type="wsdl:startWithExtensionsType" minOccurs="0"/>
		<element name="output" type="wsdl:startWithExtensionType" minOccurs="0"/>
		<element name="fault" minOccurs="0" maxOccurs="unbounded">
			<complexType>
				<complexContent>
	<extension base="wsdl:startWithExtensionsType">
	<attribute name="name" type="NMTOKEN" use="required"/>
			</extension>
	</complexContent>
	</complexType>
		</element>
	</sequence>
		<attribute name="name" type="NCName" use="required"/>
	</extension>
	</complexContent>
	</complexType>
	<element name="service" type="wsdl:serviceType"/>
	<complexType name="serviceType">
		<complexContent>
	<extension base="wsdl:documented">
	<sequence>
	<element ref="wsdl:port" minOccurs="0" maxOccurs="unbounded"/>
		<any namespace="##other" minOccurs="0"/>
	</sequence>
		<attribute name="name" type="NCName" use="required"/>
	</extension>
	</complexContent>
	</complexType>
	<element name="port" type="wsdl:portType"/>
	<complexType name="portType">
		<complexContent>
	<extension base="wsdl:documented">
	<sequence>
	<any namespace="##other" minOccurs="0"/>
	</sequence>
		<attribute name="name" type="NCName" use="required"/>
		<attribute name="binding" type="QName" use="required"/>
	</extension>
	</complexContent>
	</complexType>
	<attribute name="arrayType" type="string"/>
</schema>

A 4.2 SOAP binding Schema

<schema xmlns="http://www.w3.org/2000/10/XMLSchema"
		xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
		targetNamespace="http://schemas.xmlsoap.org/wsdl/soap/">
	<element name="binding" type="soap:bindingType"/>
	<complexType name="bindingType">
		<attribute name="transport" type="uriReference" use="optional"/>
		<attribute name="style" type="soap:styleChoice" use="optional"/>
	</complexType>
	<simpleType name="styleChoice">
		<restriction base="string">
	<enumeration value="rpc"/>
		<enumeration value="rpc"/>
	</restriction>
	</simpleType>
	<element name="operation" type="soap:operationType"/>
	<complexType name="operationType"
		<attribute name="soapAction" type="uriReference" use="optional"/>
		<attribute name="style" type="soap:styleChoice" use="optional"/>
	</complexType>
	<element name="body" type="soap:bodyType"/>
	<complexType name="bodyType">
		<attribute name="encodingStyle" type="uriReference" use="optional"/>
		<attribute name="parts" type="NMTOKENS" use="optional"/>
		<attribute name="use" type="soap:useChoice" use="optional"/>
		<attribute name="namespace" type="uriReference" use="optional"/>
	</complexType>
	<simpleType name="useChoice">
		<restriction base="string">
	<enumeration value="literal"/>
		<enumeration value="encoded"/>
	</restriction>
	</simpleType>
	<element name="fault" type="soap:faultType"/>
	<complexType name="faultType">
		<complexContent>
	<restriction base="soap:bodyType">
	<attribute name="parts" type="NMTOKENS" use="prohibited"/>
	</restriction>
	</complexContent>
		<element name="header" type="soap:headerType"/>
		<complexType name="headerType">
			<all>
				<element ref="soap:headerfault">
			</all>
			<attribute name="message" type="QName" use="required"/>
			<attribute name="parts" type="NMTOKENS" use="required"/>
			<attribute name="use" type="soap:useChoice" use="required"/>
			<attribute name="encodingStyle" type="uriReference" use="optional"/>
			<attribute name="namespace" type="uriReference" use="optional"/>
		</complexType>
		<element name="headerfault" type="soap:headerfaultType"/>
		<complexType name="headerfaultType">
			<attribute name="message" type="QName" use="required"/>
			<attribute name="parts" type="NMTOKENS" use="required"/>
			<attribute name="use" type="soap:useChoice" use="required"/>
			<attribute name="encodingStyle" type="uriReference" use="optional"/>
			<attribute name="namespace" type="uriReference" use="optional"/>
		</complexType>
		<element name="address" type="soap:addressType"/>
		<complexType name="addressType">
			<attribute name="location" type="uriReference" use="required"/>
		</complexType>
	</schema>

Again, some indeniton error here, idk where

A 4.3 HTTP Binding Schema

<schema xmlns="http://www.w3.org/2000/10/XMLSchema"
		xmlns:http="http://schemas.xmlsoap.org/wsdl/http/"
		targetNamespace="http://schemas.xmlsoap.org/wsdl/http/">
	<element name="address" type="http:addressType"/>
	<complexType name="addressType">
		<attribute name="location" type="uriReference" use="required"/>
	</complexType>
	<element name="binding" type="http:bindingType"/>
	<complexType name="bindingType">
		<attribute name="verb" type="NMTOKEN" use="required"/>
	</complexType>
	<element name="operation" type="http:operationType"/>
	<complexType name="operationType">
		<attribute name="location" type="uriReference" use="required"/>
	</complexType>
	<element name="urlEncoded">
		<complexType>
	</complexType>
	</element>
	<element name="urlReplacement">
		<complexType>
	</complexType>
	</element>
</schema>

A 4.4 MIME Binding Schema

<schema targetNamespace="http://schemas.xmlsoap.org/wsdl/mime/"
		xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/"
		xmlns="http://www.w3.org/2000/10/XMLSchema">
	<element name="content" type="mime:contentType"/>
	<complexType name="contentType" content="empty">
		<attribute name="type" type="string" use="optional"/>
		<attribute name="part" type="NMTOKEN" use="optional"/>
	</complexType>
	<element name="multipartRelated" type="mime:multipartRelatedType"/>
	<complexType name="multipartRelatedType" content="elementOnly">
		<element ref="mime:part" minOccurs="0" maxOccurs="unbounded"/>
	</complexType>
	<element name="part" type="mime:partType"/>
	<complexType name="partType" content="elementOnly">
		<any namespace="targetNamespace" minOccurs="0" maxOccurs="unbounded"/>
		<attribute name="name" type="NMTOKEN" use="required"/>
	</complexType>
	<element name="mimeXml" type="mime:mimeXmlType"/>
	<complexType name="mimeXmlType" content="empty">
		<attribute name="part" type="NMTOKEN" use="optional"/>
	</complexType>
</schema>

The above things belonged to SOAP 1.1, SOAP 1.2 and WSDL 1.1

We now, move on to SOAP in terms of PHP context.

Predefined Constnats

The constants below are predefined by this extension, and will only be available
when the extension has either been compiled into PHP or dynamically loaded at runtime.

 							SOAP Constants
Constnat 								value  		desc

SOAP_1_1 (integer) 						1

SOAP_1_2 (integer) 						2
	
SOAP_PERSISTENCE_SESSION(integer) 		1

SOAP_PERSISTENCE_REQUEST(integer) 		2

SOAP_FUNCTIONS_ALL (integer) 			999

SOAP_ENCODED (integer) 					1

SOAP_LITERAL (integer) 					2

SOAP_RPC (integer) 						1

SOAP_DOCUMENT (integer) 				2

SOAP_ACTOR_NEXT (integer) 				1

SOAP_ACTOR_NONE (integer) 				2

SOAP_ACTOR_UNLIMATERECEIVER(integer) 	3

SOAP_COMPRESSION_ACCEPT (integer) 		32

SOAP_COMPRESSION_GZIP (integer) 		0

SOAP_COMPRESSION_DEFLATE (integer) 		16

SOAP_AUTHENTICATION_BASIC (integer) 	0

SOAP_AUTHENTICATION_DIGEST (integer) 	1

SOAP_SSL_METHOD_TLS (integer) 			0 		Since PHP 5.5.0.

SOAP_SSL_METHOD_SSLv2 (integer) 		1 		Since PHP 5.5.0.

SOAP_SSL_METHOD_SSLv3 (integer) 		2 		Since PHP 5.5.0.

SOAP_SSL_METHOD_SSLv23 (integer) 		3 		Since PHP 5.5.0.

UNKNOWN_TYPE (integer) 					999998 	

XSD_STRING(integer) 					101

XSD_BOOLEAN(integer) 					102

XSD_DECIMAL(integer) 					103

XSD_FLOAT (integer) 					104

XSD_DOUBLE (integer) 					105

XSD_DURATION (integer) 					106

XSD_DATETIME (integer) 					107

XSD_TIME (integer) 						108

XSD_DATE (integer) 						109

XSD_GYEARMONTH (integer) 				110

XSD_GYEAR (integer) 					111

XSD_GMONTHDAY (integer) 				112

XSD_GDAY (integer) 						113

XSD_GMONTH (integer) 					114

XSD_HEXBINARY (integer) 				115

XSD_BASE64BINARY (integer) 				116

XSD_ANYURI (integer) 					117

XSD_QNAME (integer) 					118

XSD_NOTATION (integer) 					119

XSD_NORMALIZEDSTRING (integer) 			120

XSD_TOKEN (integer) 					121

XSD_LANGUAGE (integer) 					122

XSD_NMTOKEN (integer) 					123

XSD_NAME (integer) 						124

XSD_NCNAME (integer) 					125

XSD_ID (integer) 						126

XSD_IDREF (integer) 					127

XSD_IDREFS (integer) 					128

XSD_ENTITY (integer) 					129

XSD_ENTITIES (integer) 					130

XSD_INTEGER (integer) 					131

XSD_NONPOSITIVEINTEGER(integer) 		132

XSD_NEGATIVEINTEGER (integer) 			133

XSD_LONG (integer) 						134

XSD_INT (integer) 						135

XSD_SHORT (integer) 					136

XSD_BYTE (integer) 						137

XSD_NONNEGATIVEINTEGER(integer) 		138

XSD_UNSIGNEDLONG (integer) 				139

XSD_UNSIGNEDINT (integer) 				140

XSD_UNSIGNEDSHORT (integer) 			141

XSD_UNSIGNEDBYTE (integer) 				142

XSD_POSITIVEINTEGER (integer) 			143

XSD_NMTOKENS (integer) 					144

XSD_ANYTYPE (integer) 					145

XSD_ANYXML (integer) 					147

APACHE_MAP (integer) 					200

SOAP_ENC_OBJECT (integer) 				301

SOAP_ENC_ARRAY (integer) 				300

XSD_1999_TIMEINSTNAT (integer) 			401

XSD_NAMESPACE (integer) 				http://www.w3.org/2001/XMLSchema

XSD_1999_TIMEINSTANT (integer) 			http://www.w3.org/1999/XMLSchema

SOAP_SINGLE_ELEMENT_ARRAYS (integer) 	1

SOAP_WAIT_ONE_WAY_CALLS (integR) 		2

SOAP_USE_XSI_ARRAY_TYPE (integer) 		4

WSDL_CACHE_NONE (integer) 				0

WSDL_CACHE_DISK (integer) 				1

WSDL_CACHE_MEMORY (integeR) 			2

WSDL_CACHE_BOTH (integer) 				3

SOAP Functions

Table of Contents

is_soap_fault - Checks if a SOAP call has failed

use_soap_error_handler - Set whether to use the SOAP error handler

To debug a SOAP service using SoapServer(), a WSDL file and Zend Studio Client/Server, you have
to append ?start_debug=1&amp;debug_port=10000 to the service location:

---- snip ----
... method/ service definition ....

<service name="SOAPService">
	<port
		name="SOAPServicePort"
		binding="typens:SOAPServiceBinding">
		<soap:address
		location="$URL?start_debug=1&amp;debug_port=10000"/>
	</port>
</service>
--- snap ---

Just a note on "DTD not recognised" faults. Check to make sure your WSDL file contains:

<?xml version='1.0' encoding='UTF-8' ?>

Also make sure you use full paths, to your service (in the wsdl, client and server)

...
<wsdlsoap:address location='http://www.mysite.com.au/web_services/myserver.php' />
...
<?php
// SOAP server
$server = new SoapServer('http://www.mysite.com.au/web_services/hello.wsdl');
...
...
?>

<?php
// SOAP client
$client = new SoapClient('http://www.mysite.com.au/web_services/hello.wsdl');
...
...
?>

For when we work a wsdl full of complex types that just want a class structure to hang
your code on and not worry about typing in long parameter lists (or creating a script to do so):
wsdl2php is a wonderful timesaver. Gets a structure going so you can go in and add what
validaiton and special data munging you need.

The two functions belonging to SOAP inherently, is as follows:

is_soap_fault:

is_soap_fault - Checks if a SOAP call has failed

Desription:

bool is_soap_fault ( mixed $object )

This function is useful to check if the SOAP call failed, but without using exceptions.
To use it, create a SoapClient object with the exceptions options set to zero or FALSE.

In this case, the SOAP method will return a special SoapFault object which encapsulates
the fault details (faultcode, faultstring, faultactor and faultdetails).

If exceptions is not set then SOAP call will throw an exception on error. is_soap_fault()
checks if the given parameter is a SoapFault object.

Params:

object: The object to test

Return values:

Returns true on error, FALSE otherwise.

Examples:

Example #1 is_soap_fault() example

<?php
$client = new SoapClient("some.wsdl", array('exceptions' => 0));
$result = $client->SomeFunction();
if (is_soap_fault($result)) {
	trigger_error("SOAP Fault: (faultcode: {$result->faultcode}, faultstring: {$result->faultstring})", E_USER_ERROR);
}
?>

Example #2 SOAP's standard method for error reporting is exceptions

<?php
try {
	$client = new SoapClient("some.wsdl");
	$result = $client->SomeFunction(/* ... */);
} catch (SoapFault $fault) {
	trigger_error("SOAP Fault: (faultcode: {$fault->faultcode}, faultstring: {$fault->faultstring})", E_USER_ERROR);
}
?>

use_soap_error_handler:

use_soap_error_handler - Sets whether to use the SOAP error handler

Desc:

bool use_soap_error_handler ([ bool $handler = true ])

This function sets whether or not to use the SOAP error handler in the SOAP server.
It will return the previous value. If set to TRUE, details of errors in a SoapServer
application will be sent to the client as a SOAP fault message.

If FALSE, the standard PHP error handler is used. The default is to send error to the
client as SOAP fault message.

Parameters:

handler: Set to TRUE to send error details to clients.

Return:

Returns the original value

Beyond this, there are some additional methods and things regarding SOAP.

PROBLEM (with SOAP extension under PHP5) of transferring object, that contains objects
or array of objects. Nested object would not transfer.

SOLUTION: This class was developed by trail and error by me. So these 23 lines of code for most devs
writing under PHP5 solves the fate of using SOAP extension.

<?php
//ACcording to specifications of organization process of SOAP class in php5, we must wrap up complex
// objects in SOapVar class. Otherwise objects would not be encoded properly and could not be loaded
// on remote SOAP handler.

//Function "getAsSoap" call for encoding object for transmission. After encoding it can be properly
//transmitted.
abstract class SOAPable {
	public function getAsSOAP() {
		foreach($this as $key=>&$value) {
			$this->prepareSOAPrecursive($this->$key);
		}
		return $this;
	}

	private function prepareSOAPrecursive(&$element) {
		if(is_array($element)) {
			foreach($element as $key=>&$val) {
				$this->prepareSOAPrecursive($val);
			}
			$element = new SoapVar($element, SOAP_ENC_ARRAY);
		}elseif(is_object($element)) {
			if($element instanceof SOAPable) {
				$element->getAsSOAP();
			}
			$element = new SoapVar($element, SOAP_ENC_OBJECT);
		}
	}
}

//Abstract example

class PersonList extends SOAPable {
	protected $ArrayOfPerson; //variable MUST be protected or public
}

class Person extends SOAPable {
	//any data
}

$client = new SoapClient("test.wsdl", array( 'soap_version'=>SOAP_1_2, 'trace'=>1, 'classmap' => array('Person' => "Person",
	'PersonList' => "PersonList")));

$PersonList = new PersonList;

//Some actions

$PersonList->getAsSOAP();

$client->someMethod($PersonList);

?>

So every class, which will transfer via SOAP, must be an extendable from the class SOAPable.

As you can see in the code above, function prepareSOAPrecursive search another nested objects
in parent object or in arrays, and if it does, tries ot call the function getAsSOAP() for preparation
of nested objects, after that simply wrap up via SoapVAR class.

So in code before transmitting, simply call $obj->getAsSOAP()

And here is an example of a PHP client talking to a asmx server:

<?php
	
	$soapClient = new SoapClient("https://soapserver.example.com/blahblah.asmx?wsdl");

	//prepare SoapHeader parameters
	$sh_param = array(
				'Username' 	=> 'username',
				'Password' 	=> 'password');
	$headers = new SoapHeader('http://soapserver.example.com/webservices', 'UserCredentials', $sh_param);

	//Prepare Soap Client
	$soapClient->__setSoapHeaders(array($headers));

	//Setup the RemoteFunction parameters
	$ap_param = array(
				'amount' 		=> $irow['total_price']);

	// call RemoteFunction()
	$error = 0;
	try {
		$info = $soapClient->__call("RemoteFunction", array($ap_param));
	} catch (SoapFault $fault) {
		$error = 1;
		print("
		alert('Sorry, blah returned the following ERROR: ".$fault->faultcode."-".$fault->faultstring.". We will now
take you back to our home page.');
		window.location = 'main.php';
		");
	}

	if ($error == 0) {
		$auth_num = $info->RemoteFunctionResult;

		if ($auth_num < 0) {
			....

			// Setup the OtherRemoteFunction() parameters
			$at_param = array(
						'amount' 		=> $irow['total_price'],
						'description' 	=> $description);

			// Call OtherRemoteFunction()
			$trans = $soapClient->__call("OtherRemoteFunction", array($at_param));
			$trans_result = $trans->OtherRemoteFunctionResult;

			....
		} else {
			// Record the transaction error in the db

			//kill the link to SOAP
			unset($soapClient);
		}
	}

?>

//MIght be encapsulation error here, there were }} too many, but idk,
//might be the author might be something subtle, just note 

Support for MTOM adding this code to your project:

<?php
class MySoapClient extends SoapClient
{
	public function __doRequest($request, $location, $action, $version, $one_way = 0)
	{
		$response = parent::__doRequest($request, $action, $version, $one_way);
		// parse $response, extract with multipart messages and so on

		//This part removes stuff
		$start=strpos($response,'<?xml');
		$end=strrpos($response,'>');
		$response_string = substr($response,$start,$end-$start+1);
		return($response_string);
	}
}
?>

Then you can do this:

<?php
	new MySoapClient($wsdl_url);
?>

The SoapClient class

Introduction:

The SoapClient class provides a client for >> SOAP 1.1, >> SOAP 1.2 servers. It can be used
in WSDL or non-WSDL mode.

Class synopsis:

SoapClient {
	// Methods
	public mixed __call ( string $function_name , string $arguments )
	public SoapClient ( mixed $wsdl [, array $options ] )
	public string ___doRequest ( string $request , string $location , string $action , int $version [,
		int $one_way = 0 ])
	public array __getFunctions()
	public string __getLastRequest()

	public string __getLastRequestHeaders()
	public string __getLastResponse()
	public string __getLastResponseHeaders()
	public array __getTypes()

	public void __setCookie ( string $name [, string $value ])
	public string __setLocation ([ string $new_location ])
	public bool __setSoapHeaders ([ mixed $soapheaders ])
	public mixed __soapCall ( string $function_name , array $arguments [, array $options [, mixed $input_headers [,
			array &$output_headers ]]] )
	public SoapClient ( mixed $wsdl [, array $options ])
}

Table of Contents:

SoapClient::__call - Calls a SOAP function (deprecated)
SoapClient::__construct - SoapClient constructor
SoapClient::__doRequest - Performs a SOAP request

SoapClient::__getFunctions - returns list of available SOAP functions
SoapClient::__getLastRequest- Returns last SOAP request
SoapClient::__getLastRequestHeaders - Returns the SOAP headers from last request

SoapClient::__getLastResponse - Returns last SOAP response
SoapClient::__getLastResponseHeaders - Returns the SOAP headers from the last response
SoapClient::__getTypes - returns a list of SOAP types

SoapClient::__setCookie - The __setCookie purpose
SoapClient::__setLocation - Sets the location of the Web service to use
SoapClient::__setSoapHeaders - Sets SOAP headers for subsequent calls
SoapClient::__soapCall - Calls a SOAP function
SoapClient::SoapClient - SoapClient constructor

When you need to connect to services requiring to send extra headers use this method.

Here is how we can do it with PHP and SOapClient:

<?php
class exampleChannelAdvisorAuth
{
	public $DeveloperKey;
	public $Password;

	public function __construct($key, $pass)
	{
		$this->DeveloperKey = $key;
		$this->Password = $pass;
	}
}

$devKey = "";
$password = "";
$accountId = "";

//Create the SoapClient instance
$url = "";
$client = new SoapClient($url, array("trace" => 1, "exception" => 0));

//Create the header
$auth = new ChannelAdvisorAuth($devKey, $password);
$header = new SoapHeader("http://www.example.com/webservices/", "APICredentials", $auth, false);

// call wsdl function
$result = $client->__soapCall("DeleteMarketplaceAd", array(
	"DeleteMarketplaceAd" => array(
		"accountID" => $accountId,
		"marketplaceAdID" 	=> "9938745" 		// The ads ID
	)
), NULL, $header);

//Echo the result
echo "<pre>".print_r($result, true)."</pre>";
if($result->DeleteMarketplaceAdResult->Status == "Success")
{
	echo "Item deleted";
}
?>

There is a known bug with some versions of Xdebug which can cause SoapClient to not throw an
exception but instead cause a fatal error.

Surround the SoapClient to call with xdebug_disable(); and xdebug_enable(); to work around this problem.

After migrating to PHP 5.6.5 the SOAP 1.2 did not work anymore. So i solved the problem by adding
optional parameters:

//options for ssl in php 5.6.5
$opts = array(
	'ssl' => array('ciphers' => 'RC4-SHA', 'verify_peer'=>false, 'verify_peer_name'=>false)
);
//SOAP 1.2 client
$params = array ('encoding' => 'UTF-8', 'verifypeer' => false, 'verifyhost' => false, 'soap_version' => SOAP_1_2,
'trace' => 1, 'exceptions' => 1, "connection_timeout" => 180, 'stream_context' => stream_context_create($opts));

$oSoapClient = new SoapClient($url . "?WSDL", $params);

If you are making soap calls in WSDL mode, and the address of your web service includes a port different
from 80 (like http://my_ip_address:8080//service.asmx?wsdl), the WSDL file is fetched correctly, but all
subsequent reusts are made without any port in the host field. This causes a SoapFault exception when
trying to call any of the service's methods.

You need to redefine the soapClient class and force the port in each call.

When they want to pass variables into the http header that is how it is done:

<?php

$aHTTP['http']['header'] = "User-Agent: PHP-SOAP/5.5.11\r\n";

$aHTTP['http']['header'] .= "username: XXXXXXXXXXX\r\n"."password: XXXXX\r\n";

$context = stream_context_create($aHTTP);

$client = new SoapClient("https://ocppws-cert.extra.bcv.org.ve:443/AltoValor/BancoUniversal?WSDL", array('trace' => 1,
"stream_context" => $context));

$result = $client->jornadaActiva();
var_dump($result);
?>

Under IIS and PHP 7, when creating an new SoapClient, it will throw an internal 500 error.

This could be caused by invalid permissions to the wsdl cache directory when using 'cache_wsdl'=>WSDL_CACHE_DISK
or WSDL_CACHE_BOTH.

This worked for me:

try {
	$arrContextOptions=array("ssl"=>array("verify_peer"=>false, "verify_peer_name"=>false,'crypto_method' =>
STREAM_CRYPTO_METHOD_TLS_CLIENT));
	
	$options = array(
			'soap_version'=>SOAP_1_2,
			'exceptions'=>true,
			'trace'=>1,
			'cache_wsdl'=>WSDL_CACHE_NONE,
			'stream_context' => stream_context_create($arrContextOptions)
	);
	$client = new SoapClient('https://url/dir/file.wsdl', $options);
} catch (Exception $e) {
	echo "<h2>Exception Error!</h2>";
	echo $e->getMessage();
}

CAUTION:

I had quite a bit of trouble trying to make a request with fopen through a proxy to a 
secure url. I kept getting a 400 Bad Request back from the remote host. It was receiving
the proxy url as the SNI host.

In order to get around this i had to explicitly set the SNI host to the domain i was
trying to reach. It is apparently the issue outlined in this bug:

Request #63519 Incorrect handle of HTTPS request through proxy using SNI

Desc:

The http wrapper allow streams to access to remote files using the HTTPS (HTTP over SSL/TLS) protocl
and supports passing request through HTTP proxy.

Unfortunately, SSL-related options and HTTP proxy option are handled by different contexts,
unaware each of the other. Thus, from the point of view of SSL, the stream is connected
to the proxy, while from the point of view of HTTP the stream is connected to the remote
web server.

Using default setting, this produces a mismatch between the value in the SNI_server_name
indicator, which reports the proxy host name, and the HTTP header Host:, which reports
the web server host name. As a result, web servers with support for SNI handle incorrectly
the request or (e.g Apache) raise a 400 error.

Test script:

Suppose you need to access the remote URL https://www.example.com/ using the proxy
proxy.example.com

This is the code fragment:

$path = 'https://www.example.com/';

$opts = array(
	'http' => array(
		'method' => 'GET',
		'proxy' => 'tcp://proxy.example.com:8080',
	)
);

$context = stream_context_create($opts);
$fp = fopen($path, 'r', false, $context);
$meta = stream_get_meta_data($fp);
print_r($meta);
fclose($fp);

Expected result:

It would be advisable that the stream module could detect and
handle automatically this situation.

A workaround is to explicitly set the web server host name in 
the SNI field:

$path = 'https://www.example.com/';
$hostname = parse_url($path, PHP_URL_HOST);

$opts = array(
	'http'=>array(
		'method' => 'GET',
		'proxy' => 'tcp://proxy.example.com:8080',
	),
	'ssl' => array(
		'SNI_server_name' => $hostname,
		'SNI_enabled' => TRUE,
	)
);

Actual result:

If the web server is an Apache httpd 2.2.12 or later, it results:

Array
(
	[wrapper_data] => Array
		(
			[0] => HTTP/1.1 400 OK
...

With a line such as:

[Thu Nov ...] [error] Hostname proxy.example.com provided via SNI and
hostname www.example.com provided via HTTP are different

In the error log of the web server.
The behavior of other web server implementations can vary.

If you have not access to an Apache web server configured to use SNI,
you can emulate a web server using a recent OpenSSL with self-signed
certificates and start with the command:

C:\>openssl_s_server -key server.key -cert server.crt -accept 8443 -www -tlsextdebug

The value in the SNI field will be well recognizable in the dump.

<?php
$domain = parse_url($file, PHP_URL_HOST);
$proxy_string = "tcp://" . WP_PROXY_HOST . ":" . WP_PROXY_PORT;
$opts = array(
	'http' => array('proxy' => $proxy_string),
	'ssl' => array('SNI_enabled' => true, 'SNI_server_name' => $domain));
$context = stream_context_create($opts);
$handle = fopen($file, 'r', false, $context);
?>

SoapClient::__call

SoapClient::__call - Calls a SOAP function (deprecated)

Desc:

public mixed SoapClient::__call ( string $function_name , string $arguments )

Calling this method directly is deprecated. Usually, SOAP functions can be called
as methods of the SoapClient object; in situations where this is not possible
or additional options are needed, use SoapClient::__soapCall().

If you are using a WSDL, the library will stip out anything from your parameters
that is not defined in WSDL, without giving you any notice about this.

So, if your parameters are not fully matching the WSDL, it will simply send
no parameters at all.

This can be a bit hard to debug if you do not have access to the target
server.

__soapCall() expects parameters in an array called 'parameters' as opposed
to calling the function via it's WSDL name, where it accepts the params
as a plain array.

I.e, if a function called sendOrder expects a parameter (array) called
orderDetails, you can call it like this:

$orderDetails = array(/* your data */)
$soap->sendOrder(array('orderDetails' => $orderDetails));

Which is equivalent to:

$client->__soapCall('sendOrder', array('parameters' => array('orderDetails' => $orderDetails)));

Note the additional 'parameters' key used in __soapCall()

Extend of __call that adds a retry to handle the ocassional 'Could not connect to host' exceptions:

<?php
class LocalSoapClient extends SoapClient
{
	public function __call($function_name, $arguments)
	{
		$result = false;
		$max_retries = 5;
		$retry_count = 0;

		while(! $result && $retry_count < $max_retries)
		{
			try
			{
				$result = parent::__call($function_name, $arguments);
			}
			catch(SoapFault $fault)
			{
				if($fault->faultstring != 'Could not connect to host')
				{
					throw $fault;
				}
			}
			sleep(1);
			$retry_count++;
		}
		if($retry_count == $max_retries)
		{
			throw new SoapFault('Could not connect to host after 5 attempts');
		}
		return $result;
	}
}
?>

SoapClient::__construct

SoapClient::__construct - SoapClient constructor

Desc:

public SoapClient::SoapClient (mixed $wsdl [, array $options ])

This function is an alias of SoapClient::SoapClient()

SoapClient::__doRequest:

Performs a SOAP request

Desc:

public string SoapClient::__doRequest( string $request , string $location, string $action, int $version [,
	int $one_way = 0 ])

Performs SOAP request over HTTP.

This method can be overriden in subclasses to imeplement different transport layers, perform additional
XML processing or other purpose.

Params:

request: The XML SOAP request

location: The URL to request.

action: The SOAP action.

version: The SOAP version.

one_way: If one_way is set to 1, this method returns nothing. Use this where a response
is not expected.

Returns a XML SOAP response.

Changelog:

Version 			Desc

5.1.3 				The one_way param was added.

Examples:

Example #1 SoapClient::__doRequest() example:

<?php
function Add($x, $y) {
	return $x+$y;
}

class LocalSoapClient extends SoapClient {
	
	function __consturct($wsdl, $options) {
		parent::__construct($wsdl, $options);
		$this->server = new SoapServer($wsdl, $options);
		$this->server->addFunction('Add');
	}

	function __doRequest($request, $location, $action, $version, $one_way = 0) {
		ob_start();
		$this->server->handle($request);
		$response = ob_get_contents();
		ob_end_clean();
		return $response;
	}
}

$x = new LocalSoapClient(NULL,array('location'=>'test://',
									'uri'=>'http://testuri.org'));

var_dump($x->Add(3,4));
?>

Note when extending __doRequest, calling __getLastRequest will probably report
incorrect information unless you make sure to update the internal __last_request variable.

function __doRequest($request, $location, $action, $version) {
	$request = preg_replace('/abc/', 'def', $request);
	$ret = parent::__doRequest($request, $location, $action, $version);
	$this->__last_request = $request;
	return $ret;
}

If you happen to get an error during your request which says "SOAP-ERROR: Encoding: Can't decode
apache map, only Strings or Longs are allowed as keys", the reason seems to be the response xml
using integer for keys and php failing to understand them

Here is something that worked for me (converts integer keys to strings):

<?php
class mySoap extends SoapClient
{
	public function __doRequest($request, $location, $action, $version)
	{
		$result = parent::__doRequest($request, $location, $action, $version);
		$result = str_replace('<key xsi:type="xsd:int">', '<key xsi:type="xsd:string">', $result);
		return $result;
	}
}

// $soap = new mySoap(...
?>

If you want to communicate with a default configured ASP.NET server with SOAP 1.1 support,
override your __doRequest with the following code. Adjust the namespace parameter, and all
is good to go.

<?php
class MSSoapClient extends SoapClient {
	
	function __doRequest($request, $location, $action, $version) {
		$namespace = "http://tempuri.com";

		$request = preg_replace('/<ns1:(\w+)/', '<$1 xmlns="'.$namespace.'"', $request, 1);
		$request = preg_replace('/<ns1:(\w+)/', '<$1', $request);
		$request = str_replace(array('/ns1:', 'xmlns:ns1="'.$namespace.'"'), array('/', ''), $request);

		//parent call
		return parent::__doRequest($request, $location, $action, $version);
	}
}

$client = new MSSoapClient(...);
?>

Note that the SoapClient.__doRequest() method circumvents the throwing of SoapFault exceptions.

Specifically, if you call the __doRequest() method and it fails, it would normally throw a 
SoapFault exception. However, the __doRequest() method does not actually throw the exception.

Instead, the exception is saved in a class attribute called SoapFault.__soap_fault, and is actually
thrown AFTER the __doRequest method completes (but the call stack will show that the exception
 was created inside the __doRequest method.)

 I successfully used the following code to query the locally cached exception object
 that was not thrown:

<?php
$exception = null;
try {
 	$result = parent::__doRequest($request, $location, $action, $version, $one_way);
}
catch (SoapFault $sf) {
	//THis code was not reached
	$exception $sf;
}
catch (Exception $e) {
	//Nor was this code reached either
	$exception = $e;
}
if((isset($this->__soap_fault)) && ($this->__soap_fault != null)) {
	//This is where the exception from __doRequest is stored
	$exception = $this->__soap_fault;
}

//decide what to do about the exception here
// [enter code here]
//or throw the exception
if($exception != null) {
	throw $exception;
}
//Note: you may want to unset the __soap_fault value if you do not want it
//thrown aga up the call stack
?>

Note that __getLastRequest() data are buffered _before_ the call to __doRequest(). Thus any modifications
you make to the XML while in __doRequest() will not be visible in the output of __getLastRequest().
This is so at least in v5.2.0

I was needing to add a blank soap header (<SOAP-ENV:Header />) and found no other place that has
done this. The only way i was able to support this was to extend SoapClient and re-define __doRequest.
Hope this helps someone or if there is support for htis in the lib, please point to it:

<?php
class MySoapCli extends SoapClient {
	function __doRequest($request, $location, $action, $version) {
		$dom = new DomDocument('1.0', 'UTF-8');
		$dom->preserveWhiteSpace = false;
		$dom->loadXML($request);
		$hdr = $dom->createElementNS('http://schemas.xmlsoap.org/soap/envelope/', 'SOAP-ENV:Header');
		$dom->documentElement->insertBefore($hdr, $dom->documentElement->firstChild);
		$request = $dom->saveXML();
		return parent::__doRequest($request, $location, $action, $version);
	}
}
?>

Beware of PHP inconsistencies behaviour in __doRequest() method. It seems that some
arguments passed to this method are passed by reference.

If you try to create your own __doRequest() method and store its arguments as SoapClient
properties oyu will find that after __soapCall all of them will be null or unknown.

<?php
	protected $__soapAction = '';

	public function __doRequest($request, $location, $action, $version, $oneWay = 0) {
		ob_start();
		$this->server->handle($request);
		$response = ob_get_contents();
		ob_end_clean();
		$this->__soapAction = $action;
		return $response;
	}
?>

In the above example, $this->__soapAction will be null after $obj->__soapCall()

To store $action value, you must cast it to a string (so PHP will be forced to
create a new variable with a different memory pointer):

<?php
	public function __doRequest($request, $location, $action, $version, $oneWay = 0) {
		ob_start();
		$this->server->handle($request);
		$response = ob_get_contents();
		ob_end_clean();
		$this->__soapAction = (string)$action;
		return $response;
	}
?>

Btw, WSDL stands for Web Services Description Language. Its a XML document that
describes a web service.

Do you have problems with the PHP5 SoapClient when you need to send a request to a service
with a ComplexType param?

maybe because my service was built in Delphi with REMObjects SDK 3.0, i had these problems.
Regarldess, the solution:

<?php
$versie = new stdClass(); //define a basic class object
$versie->versieID = $aVersie->versieID(); //fill it with the exact attributes as your complexType
//object in the wsdl is

$versie->versieNummer = $aVersie->versieNummer();
$versie->isActief = $aVersie->isActief();

$soapVersieType = new SoapVar($versie, SOAP_ENC_OBJECT, "Versie", "http://127.0.1:8999/SOAP?wsdl"); //
//create the complex soap type, Versie is the name of my complex type in teh wsdl, the latter url
//being the location of the wsdl

try{
	$result = $soapClient->BewaarVersie($this->sessieID, $soapVersieType); //BewaarVersie is a function
	//derived from my WSDL with two params
}
catch(SoapFault $e){
	trigger_error('Something soap went wrong: '.$e->faultstring,E_USER_WARNING);
}
?>

After some more testing, i found out that the conversion to the StdClass() object was not 
required. My 'Versie' local object has the attirbutes for the 'Versie' wsdl complex type
defiend as private vars and give no pain when i created the SoapVar with an instance of
the local 'Versie' Object.

Change Blocking mode for Socket stream and set Timeout for Soap requests

<?php

class TimeoutSoapClient extends SoapClient
{
	const TIMEOUT = 20;
	public function __doRequest($request, $location, $action, $version, $one_way = 0)
	{
		$url_parts = parse_url($location);
		$host = $url_parts['host'];
		$http_req = 'POST' . $location . ' HTTP/1.0'."\r\n";
		$http_req .= 'Host: '.$host."\r\n";
		$http_req .= 'SoapAction: '.$action."\r\n";
		$http_req .= "\r\n";
		$http_req .= $request;
		$port = 80;
		if ($url_parts['scheme'] == 'https')
		{
			$port = 443;
			$host = 'ssl://'.$host;
		}
		$socket = fsockopen($host, $port);
		fwrite($socket, $request);
		stream_set_blocking($socket, false);
		$response = '';
		$stop = microtime(true) + self::TIMEOUT;
		while (!feof($socket))
		{
			$response .= fread($socket, 2000);
			if (microtime(true) > $stop)
			{
				throw new SoapFault('Client', 'HTTP timeout');
			}
		}
		return $response;
	}
}

You can also use this method to correct the SOAP request before sending it, if necessary.
You can use the DOM API to accomplish that:

<?php

public ExtendedClient extends SoapClient {
	
	function __construct($wsdl, $options = null) {
		parent::__construct($wsdl, $options);
	}

	function __doRequest($request, $location, $action, $version) {
		$dom = new DOMDocument('1.0');

		try {

			//loads the SOAP request to the Document
			$dom->loadXML($request);
		} catch (DOMException $e) {
			die('Parse error with code ' . $e->code);
		}

		//create a XPath object to query the request
		$path = new DOMXPath($dom);

		//Search for a node
		$nodesToFix = $path->query('//SOAP-ENV:Envelope/SOAP-ENV:Body/path/to/node');

		//check if nodes are ok
		$this->checkNodes($path, $nodesToFix);

		//save the modified SOAP request
		$request = $dom->saveXML();

		//doRequest
		return parent::__doRequest($request, $location, $action, $version);
	}

	function checkNodes(DOMXPath $path, DOMNodeList $nodes) {
		//iterate through the node list
		for ($i = 0; $i < $nodes->length; $i++) {
			$aNode = $nodes->item($i);

			//just an example
			if ($node->nodeValue == null) {
				//Do something, for instance, let's remove it
				$node->parentNode->removeChild($node);
			}
		}
	}
}
?>

This gives the dev the chance to solve interoperability problems with a web service

I just wanted to note in plain english how to build up this request, because i made some
assumptions by just misterpeting the params.

This is for future reference (for myself) and others that might end up a bit mystified? (mistified said in text,
error?), by just not understanding the finesses of soap and are trying to learn.

$this->__doRequest(string $request, string $location, string $action, int $version [, int $one_way = 0 ] );

$request = The XML Soap envelope

$location = The url to the WSDL file. No matter that you defined this before when setting up the object, you need
to reuse it here

$action = the soap action to be performed. THis is defined in teh wsdl file and can be in teh form of a single
form or an url. It is just a parameter and might not be an actual valid url

$version = SOAP_1_1 = content headers (Content-Type: text/xml; charset=utf-8)

SOAP_1_2 = content headers (Content-Type: application/soap+xml; charset=utf-8; action="somesoapaction defined in $action")

If you send a SOAP_1_2 request to a SOAP_1_1 server you might get a reply in teh following form

HTTP/1.1 415 Cannot process the message because the content type 'application/soap+xml; charset=utf-8;
action="somesoapaction defined in $action"' was not the expected type 'text/xml; charset=utf-8'.

You need to switch down to SOAP_1_1 in that case to get the proper formatting the server can understand

If your application interacts with SOAP services and you wish to cache the responses for consumtpion later,
then overriding SoapClient::__doRequest is the way to go.

For instance, if you know that the information presented does not change that oten and you do not
want to do a superfluos HTTP request, you can grab a response from a local cache and let SoapClient
do the transformation to PHP data types.

<?php
class YourNamespace_SoapClient_Local extends SoapClient {
	protected $cacheDocument = "";
	public function __construct($wsdl, $options) {
		parent::__construct($wsdl, $options);
	}

	// SetCacheDocument() sets the previously cached document contents
	public function SetCacheDocument($document) {
		$this->cacheDocument = $document;
	}

	// __doRequest() overrides the standard SoapClient to handle a local request
	public function __doRequest() {
		return $this->cacheDocument;
	}
}

// code snippet showing usage within a class
// $document is a cached SOAP response document from a previous request, saved with SoapClient::__getLastResponse()
// to some cache somewhere

//For the purposes of this example, it is assumed that $this->wsdl, $this->options, $this->method and $this->params
// are set.

public function SoapRequest($document) {
	$method = $this->method;
	if($document == "") {
		//uncached
		try {
			//Default options
			$client = new SoapClient($this->wsdl, $this->options);
			$result = $client->$method($this->params);
			//send the response to the cache
			$this->CacheResponse($client->__getLastResponse());
		} catch (SoapFault $fault) {
			//lOg something
			return FALSE;
		}
	} else{
		//cached document
		try {
			//The WSDL needs to be set to allow the method ot be called on teh client object
			// and to trigger SoapClient to decode the response to native data types

			$client = new YourNamespace_SoapClient_Local($this->wsdl, $this->options);
			$client->SetCacheDocument($document);
			$result = $client->$method($this->params);
		} catch (SoapFault $fault) {
			//log something
			return FALSE;
		}
	}
	return $result;
}
?>

SoapClient::__getFunctions:

SoapClient::__getFunctions - Returns list of available SOAP functions

Desc:

public array SoapClient::__getFunctions()

Returns an array functions described in the WSDL for the Web Service.

Note: This function only works in WSDL mode.

Returns:

The array of SOAP function prototypes, detailing the return types, the function name and type-hinted
params.

Examples:

Example #1 SoapClient::__getFunctions() example

<?php
$client = new SoapClient('http://soap.amazon.com/schemas3/AmazonWebServices.wsdl');
var_dump($client->__getFunctions());
?>

The above example will output:

array(26) {
	[0]=>
	string(70) "ProductInfo KeywordSearchRequest (KeywordRequest $KeywordSearchRequest)"
	[1]=>
	string(79) "ProductInfo TextStreamSearchRequest(TextStreamRequest $TextStreamSearchRequest)"
	[2]=>
	string(64) "ProductInfo PowerSearchRequest(PowerRequest $PowerSearchRequest)"
...
	[23]=>
	string(107) "ShoppingCart RemoveShoppingCartItemsRequest(RemoveShoppingCartItemsRequest
$RemoveShoppingCartItemsRequest)"
	[24]=>
	string(107) "ShoppingCart ModifyShoppingCartItemsRequest (ModifyShoppingCartItemsRequest
$ModifyShoppingCartItemsRequest)"
	[25]=>
	string(118) "GetTransactionDetailResponse GetTransactionDetailsRequest(GetTransactionDetailsRequest
$GetTransactionDetailsRequest)"
}

_getFunctions can return null, not only array. This happens if the WSDL has not been parsed yet.
This may be helpful to someone debugging.

This function did not work if schema is not in wsdl file.

The following code works for me while it appears soap.amazon.com has been deprecated and taken
out of service.

<?php
$client = new SoapClient('http://webservices.amazon.com/AWSECommerceService/AWSECommerceService.wsdl');
var_dump($client->__getFunctions());
?>

SoapClient::__getLastRequest:

SoapClient::__getLastRequest - Returns last SOAP request

Desc:

public string SoapClient::__getLastRequest()

Returns the XML sent in the last SOAP request.

Note: This method works only if the SoapClient object was created with
trace option set to TRUE.


Returns:

The last SOAP request, as an XML string.

Examples:

Example #1 SoapClient::__getLastRequest() example:

<?php
$client = new SoapClient("some.wsdl", array('trace' => 1));
$result = $client->SomeFunction();
echo "REQUEST:\n" . $client->__getLastRequest() . "\n";
?>

Adding htmlentities() can be helpful since it makes the XML visible in your
browser without needing to view the source:

<?php

echo "REQUEST:\n" . htmlentities($client->__getLastRequest()) . "\n";

?>

Note that when you create soapClient with option "trace" set to FALSE or omit it,
then "__getLastRequest()" always returns NULL.

I guess many peoples calls getLastRequest and it returns nothing.

To see the soap request, we must run trace with it:

<?php
// below $option=array('trace',1);
// correct one is below
$option = array('trace'=>1);

$client = new SoapClient('some.wsdl', $option);

try{
	$client->aMethodAtRemote();
} catch (SoapFault $fault) {
	// <xmp> tag displays xml output in html
	echo 'Request: <br/><xmp>'.
	$client->__getLastRequest().
	'</xmp><br/><br/> Error Message: <br/>'.
	$fault->getMessage();
}
?>

The trace param is what allows us to see the SOAP request

An example of creating a file and linking to said file:

$outputxml = '/output.xml';

file_put_contents($_SERVER['DOCUMENT_ROOT'] . $outputxml, $client->__getLastRequest());

echo '<a href="' . $outputxml. '">here</a>';

Just to make it a bit more readable:

echo "REQUEST:\n" . htmlentities(str_ireplace('><', ">\n<", $client->__getLastRequest())) . "\n";
echo "Response:\n" . htmlentities(str_ireplace('><', ">\n<", $client->__getLastResponse())) . "\n";

if we are using \n, we need to enclose above statements in <pre> as well.

SoapClient:__getLastRequestHeaders:

SoapClient::__getLastRequestHeaders - Returns the SOAP headers from the last request

desc:

public string SoapClient::__getLastRequestHeaders()

Returns the SOAP request headers from the last request.

Note: This function only works if the SoapClient object was created with the
trace option set to TRUE.

Return values:

The last SOAP request headers.

Examples:

Example #1 SoapClient::__getLastRequestHeaders() example

<?php
$client = SoapClient("some.wsdl", array('trace' => 1));
$result = $client->SomeFunction();
echo "REQUESTED HEADERS:\n" . $client->__getLastRequestHeaders() . "\n";
?>

SoapClient::__getLastResponse:

SoapClient::__getLastResponse - Returns last SOAP response

Description:

public string SoapClient::__getLastResponse()

Returns the XML received in the last SOAP response.

Note: This method works only if the SoapClient object was created with the trace
option set to TRUE.

Returns:

The last SOAP response, as an XML string.

Examples:

Example #1 SoapClient::__getLastResponse() example:

<?php
$client = SoapClient("some.wsdl", array('trace' => 1));
$result = $client->SomeFunction();
echo "Response:\n" . $client->__getLastResponse() . "\n";
?>

You almost for sure will need to wrap a try/catch block around your SOAP call in order to
debug something that is not working.

Otherwise PHP throws a fatal error before you can execute this function.

Example:

<?php
	$soapClient = new SoapClient($url);
	echo htmlentities($soapClient->__getFunctions());
	//Assume that has output 'someFunction' (among others)
	try {
		$results = $soapClient->someFunction(...);
	}
	catch (SoapFault $soapFault) {
		var_dump($soapFault);
		echo "Request :<br>" . htmlentities($soapClient->__getLastRequest()) . "<br>"; //Unsure if , is a legit thing in echoing, so just doing . instead of ,. Original is ,
		echo "Response :<br>" . htmlentities($soapClient->__getLastResponse()) . "<br>";
	}
?>

Without try/catch, you are just gonna get the Fatal Error and PHP commits suicide before
it can call __getLastRequest or __getLastResponse

SoapClient::__getLastResponseHeaders:

SoapClient::__getLastResponseHeaders -- Returns the SOAP headers from the last response

Desc:

public string SoapClient::__getLastResponseHeaders()

Returns the SOAP headers from the last response.

Note: This function only works if the SoapClient object was created with the trace option set to true.

Returns:

The last SOAP response headers.

Examples:

Example #1 SoapClient::__getLastResponse() example

<?php
$client = SoapClient("some.wsdl", array('trace' => 1));
$result = $client->SomeFunction();
echo "RESPONSE HEADERS:\n" . $client->__getLastResponseHeaders() . "\n";
?>

For long running scripts which may be set to a longer timeout in the PHP script,
be aware that the IIS connection timeout settings do not restart when you intiiate
a SOAP call even though you are using a new web address than your current running
script..

Because of this, we noted a SOAP call that seemed to not return headers from a 
Web Service. It was found to be related to IIS timing out. This was in IIS 7.5.
The resolution was to increase the connection timeout for IIS at the website/domain level.

There were no faults or exceptions captured when this occured so your only indication
is that you have no header information.

Note, SoapClient does not wait for a response for one-way operations (i.e <wsdl:operation>s that do not
have a <wsdl:response>). To see if a request failed, use $sc = new SoapClient('some.wsdl', array('features'=>SOAP_WAIT_ONE_WAY_CALLS));

Bug #36083 SoapClient waits for responses on one-way operations

Desc:

Try to call SoapService in one-way operation.
Client waits until SoapServer answers. I think the SoapServer has to return
HTTP "202 Accepted" response (see Bug #32776), that is right, but the response
must been sent before the Server executed SoapServer->handle()

SoapClient:

<?php
	$starttime = microtime(true);
	$client = new SoapClient("oneway.wsdl", array('trace' => 1));
	$client->foo("fooInput");
	echo "UsedTime: ".(microtime(true) - $starttime);
?>

SoapServer:

<?php
	function foo($input) {
		sleep(7);
	}
	$Server = new SoapServer("oneway.wsdl");
	$Server->addFunction("foo");
	$Server->handle();
?>

WSDL (part):
		<portType name="serverPortType">
				<operation name="foo">
						<input message="typens:foo"/>
				</operation>
		</portType>
		<binding name="serverBinding" type="typens:serverPortType">
				<soap:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http"/>
				<operation name="foo">
						<soap:operation soapAction="urn:serverAction"/>
						<input>
								<soap:body namespace="urn:oneway.wsdl" use="literal"/>
						</input>
				</operation>
		</binding>

Expected result:

Server must answer under 1 second, so Client output results is like:

Usedtime: 0.00349999847412

Actual result:

Server answers after sleep(7), Client waits until Server sending all Headers.
So Client Output Result is like:

UsedTime: 7.00349999847412

SoapClient::__getLastResponseHeaders returns NULL if wsdl operation !has output

soapClient::__getTypes:

SoapClient::__getTypes - Returns a list of SOAP types

Desc:

public array SoapClient::__getTypes()

Returns an array of types described in the WSDL for the Web Service..

Note: this function only works in WSDL mode.

Returns:

The array of SOAP types, detailing all structures and types.

Examples:

Example #1 SoapClient::__getTypes() example:

<?php
$client = new SoapClient('http://soap.amazon.com/schemas3/AmazonWebServices.wsdl');
var_dump($client->__getTypes());
?>

The above will output:

array(88) {
	[0]=>
	string(30) "ProductLine ProductLineArray[]"
	[1]=>
	string(85) "struct ProductLine" {
string Mode;
string RelevanceRank;
ProductInfo ProductInfo;
}"
	[2]=>
	string(105) "struct ProductInfo {
string TotalResults;
string TotalPages;
string ListName;
DetailsArray Details;
}"
...
	[85]=>
	string(32) "ShortSummary ShortSummaryArray[]"
	[86]=>
	string(121) "struct GetTransactionDetailsRequest {
string tag;
string devtag;
string key;
OrderIdArray OrderIds;
string locale;
}"
	[87]=>
	string(75) "struct GetTransactionDetailsResponse {
ShortSummaryArray ShortSummaries;
}"
}

<?php
//to see formated types

$soap = new SoapClient('http://domain.com/ws.php?WSDL');

echo '<pre>';
echo '<h2>Types:</h2>';
$types = $soap->__getTypes();
foreach ($types as $type) {
	$type = preg_replace(
		array('/(\w+) ([a-zA-Z0-9]+)/', '/\n /'),
		array('<font color="green">${1}</font> <font color="blue">${2}</font>', "\n\t"),
		$type
	);
	echo $type;
	echo "\n\n";
}
echo '</pre>';

SoapClient::__setCookie:

SoapClient::__setCookie - The __setCookie purpose

Desc:

public void SoapClient::__setCookie(string $name [, string $value ])

Defines a cookie to be sent along with the SOAP requests.

Note: Calling this method will affect all the following calls to SoapClient
methods.

Params:

name: The name of the cookie

value: The value of the cookie. If not specified, the cookie will be deleted.

You can access the cookies sent by SOAP server using $client->_cookies

Most you need to send session cookies back to server.

On the server side, you can access the cookie via $_COOKIE['cookie_name'].

Also remember that since HTTP is a stateless protocol, you have to send the
cookie with every single SOAP call in order for it to be visible at server
site.

SoapClient::__setLocation:

SoapClient::__setLocation - Sets the location of the Web service to use

Desc:

public string SoapClient::__setLocation ([ string $new_location ])

Sets the endpoint URL that will be touched by following SOAP requests.
This is equivalent to specifying the location option when constructing the SoapClient.

Note: Calling this method is optional. The SoapClient uses the endpoint from the WSDL file by default.

Params:

new_location: The new endpoint URL.

Returns:

The old endpoint URL.

Examples:

Example #1 SoapClient::__setLocation() example

<?php
$client = new SoapClient('http://example.com/webservice.php?wsdl');

$client->_setLocation('http://www.somethirdparty.com');

$old_location = $client->__setLocation(); //Unsets the location option

echo $old_location;

?>

The above outputs:

http://www.somethirdparty.com

SoapClient::__setSoapHeaders:

SoapClient::__setSoapHeaders -- Sets SOAP headers for subsequent calls

Desc:

public bool SoapClient::__setSoapHeaders ([ mixed $soapheaders ])

Defines headers to be sent along with the SOAP requests.

Note: Calling this method will replace any previous values.

Params:

soapheaders: The headers to be set. It could be SoapHeader object or array of SoapHeader objects.
If not specified or set to NULL, the headers will be deleted.

Return:

Returns TRUE on success, or FALSE on failure.

Examples:

Example #1 SoapClient::__setSoapHeaders() example

<?php

$client = new SoapClient(null, array('location' => "http://localhost/soap.php",
									 'uri' => "http://test-uri/"));
$header = new SoapHeader('http://soapinterop.org/echoheader/',
							'echoMeStringRequest',
							'hello world');

$client->__setSoapHeaders($header);

$client->__soapCall("echoVoid", null);
?>

Example #2 Set Multiple Headers

<?php

$client = new SoapClient(null, array('location' => "http://localhost/soap.php",
									 'uri' => "http://test-uri/"));

$headers = array();

$headers[] = new SoapHeader('http://soapinterop.org/echoheader/',
							'echoMeStringRequest',
							'hello world');

$headers[] = new SoapHeader('http://soapinterop.org/echoheader/',
							'echoMeStringRequest',
							'hello world again');

$client->__setSoapHeaders($headers);

$client->__soapCall("echoVoid", null);
?>

To create complex SOAP Headers, you can do something like this:

Required SOAP Header:

<soap:Header>
	<RequestorCredentials xmlns="http://namespace.example.com/">
		<Token>string</Token>
		<Version>string</Version>
		<MerchantID>string</MerchantID>
		<UserCredentials>
			<UserID>string</UserID>
			<Password>string</Password>
		</UserCredentials>
	</RequestorCredentials>
</soap:Header>

Corresponding PHP code:

<?php

$ns = 'http://namespace.example.com/'; //Namespace of the WS.

//Body of the SOap Header
$headerbody = array('Token' => $someToken,
					'Version' => $someVersion,
					'MerchantID' => $someMerchantId,
					'UserCredentials'=>array('UserID'=>$UserID,
											'Password'=>$Pwd));

//Create Soap Header
$header = new SOAPHeader($ns, 'RequestorCredentials', $headerbody);

//Set the Headers of SOap Client.
$soap_client->__setSoapHeaders($header);

?>

You cannot add an additional header. If you want two headers, and one already exists,
first delete it with $client->__setSoapHeaders(NULL).

Then issue $client->__setSoapHeaders($headers) where $headers is an array of
soapHeader() objects.

SoapClient::__soapCall:

SoapClient::__soapCall - calls a SOAP function

Desc:

public mixed SoapClient:::__soapCall ( string $function_name, array $arguments [, array $options [, mixed
	$input_headers [, array &$output_headers ]]] )


This is a low level API function that is used to make a SOAP call. Usually, in WSDL mode, SOAP
functions can be called as methods of the SoapClient object. This method is useful in non-WSDL
mode when soapaction is unknown, uri differs from the default or when sending and/or receiving SOAP
Headers.

On error, a call to a SOAP function can cause PHP to throw exceptions or return a SoapFault object 
if exceptions are disabled. To check if the function call failed to catch the SoapFault exceptions,
check the result with is_soap_fault().

Params:

function_name: The name of the SOAP function to call.

arguments: An array of the arguments to pass to the function. This can be either an ordered or an associative
array. Note that most SOAP servers require param names to be provided, in which case this must be an associative
array.

options: An associative array of options to pass to the client.

The location option is the URL of the remote Web service.

The uri option is the target namespace of the SOAP service.

The soapaction option is the action to call.

input_headers:

An array of headers to be sent along with the SOAP request.

output_headers:

If supplied, this array will be filled with headers from the SOAP response.

Returns:

SOAP functions may return one, or multiple values. If only one value is returned by the SOAP
function, the return value of __soapCall will be a simple value (e.g an integer, a string etc.).
If multiple values are returned, __soapCall will return an associative array of named output
params.

On error, if the SoapClient object was constructed with the exceptions option set to FALSE,
a SoapFault object will be returned.

Examples:

Example #1 SoapClient::__soapCall() example

<?php

$client = new SoapClient("some.wsdl");
$client->SomeFunction($a, $b, $c);

$client->__soapCall("SomeFunction", array($a, $b, $c));
$client->__soapCall("SomeFunction", array($a, $b, $c), NULL,
					new SoapHeader(), $output_headers);

$client = new SoapClient(null, array('location' => "http://localhost/soap.php",
									 'uri' => "http://test-uri/"));

$client->SomeFunction($a, $b, $c);
$client->__soapCall("SomeFunction", array($a, $b, $c));
$client->__soapCall("SomeFunction", array($a, $b, $c),
					array('soapaction' => 'some_action',
						  'uri' => 'some_uri'));
?>

Note that calling __soapCall and calling the generated method from WSDL requires
specifying parameters in two different ways.

For example, if you have a web service with method login that takes username and password,
you can call it the following way:

<?php
$params = array('username'=>'name', 'password'=>'secret');
$client->login($params);
?>

If you want to call __soapCall, you must wrap the arguments in another array as follows:

<?php
$client->__soapCall('login', array($params));
?>

At php 7.0.8 the stdClass generated by SoapClient from the response does not use "minOccurs"
and "maxOccurs" WSDL modifiers to distinct properties in stdClass-es (aka keys in "associative arrays")
and elements in arrays ("aka indexed arrays").

instead, the implementation decides whether tag is _a key in associative array_ or _one
of elements with the same tag in indexed array_ by simply the fact whether there is just one element
with such tag in the sequence or many.

Consider an alive example:

<?php
response xml:
...
<ValidatingCarrier>
	<Alternate>AA</Alternate>
</ValidatingCarrier>
...
<ValidatingCarrier>
	<Alternate>AA</Alternate>
	<Alternate>AY</Alternate>
</ValidatingCarrier>
...

response structure generated by SoapClient:
...
[ValidatingCarrier] => stdClass Object(
	[Alternate] => AA // here it is a string
)
...
[ValidatingCarrier] => stdClass Object(
	[Alternate] => Array ( //and here this is an array
		[0] => AA
		[1] => AY
	)
)
...

field XSD definition:
<xs:element name="Alternate" type="CarrierCode" minOccurs="0" maxOccurs="24">
?>

You see, the definition in XSD tells us this tag can be repeated up to 24 times,
what means it would be an indexed array, but SoapClient does not take that into
account and treats the first <Alternate> in example as a value instead of array containing
this value.

Undoubtely, a value should be a property in the stdClass (a key in associative array) _only_
when maxOccurs is 1 or less or not specified (default is 1, see https://www.w3.org/TR/xmlschema-0/#OccurrenceConstraints).

One thing to note.

I was trying to get .NET objects from a provided web service, however, it always seemed to
return empty objects. It did return the backbone, but nothing within the objects that made
up the structure.

Anyhow, it seems that you have to be very precise with the arrays when calling these functions.
Par example, do this:

<?php
$obj = $client->__soapCall($SOAPCall, array('parameters'=>$SoapCallParameters));
?>

Meaning that you must put an array as the second argument with 'parameters' as the key
and the soap call parameters as the value.

Also make sure the parameter variable, in my case $SoapCallParameters is in the form
of what is requested by the webservice.

So don't just make an array of the form:

<?php

(
	[0] => 'Mary',
	[1] => 1983
)

?>

But if the webservice requests a 'muid' variable as 'Mary' and a 'birthyear' as 1983, then make
your array like this:

<?php

(
	[muid] => 'Mary',
	[birthyear] => 1983
)

?>

The above arrays refer to the $SoapCallParameters variable.

<?php
$client = new SoapClient("http://server/sumservice.asmx?WSDL");
$params->a = 2;
$params->b = 3;

$objectresult = $client->Sum($params);
$simpleresult = $objectresult->SumResult;
print($simpleresult); //produces "-1"
+>

Note that hte lines:

"$client>Sum($params);"

and

"$simpleresult = $objectresult->SumResult;"

are based off of each other, if your web service function is called
"Sum", then add "Result" to the end of it to get the results of the
call.

EG:

<?php
$client = new SoapClient("http://server/mathservice.asmx?WSDL");
$params->a = 2;
$params->b = 3;
$objectresult = $client->Minus($params); //note the name of the function is "Minus"
$simpleresult = $objectresult->MinusResult; // note the name of the result is referenced as "MinusResult"
print($simpleresult); //produces "5"
?>

When calling over SOAP to a .NET application, you may end up with an object as a result
instead of a simple type, even if you are just grabbing a simple type (like a boolean
result). use a property accessor to get the actual result, like this:

<?php
$client = new SoapClient("http://server/myservice.asmx?WSDL");
$objectresult = $client->MyMethod($param1, $param2);
$simpleresult = $objectresult->MyMethodResult;
?>

Note that .NET seems to name the result MethodNameResult for method MethodName.

The call to __soapCall returned an object to me either. This is the function which
makes my life easier:

function obj2array($obj) {
	$out = array();
	foreach ($obj as $key => $val) {
		switch(true) {
			case is_object($val):
				$out[$key] = obj2array($val);
				break;
			case is_array($val):
				$out[$key] = obj2array($val);
				break;
			default:
				$out[$key] = $val;
		}
	}
	return $out;
}

Usage:

...
$response = $client->__soapCall("track", array('parameters' => $request));
$response = obj2array($response);

To get the xml:

<foo bar="moo">cheese</foo>

You'd pass in:

<?php
array("foo" => array("_" => "cheese", "bar"=>"moo"));
?>

To avoid the SOAP client returning sometimes objects and sometimes arrays of objects,
there is a setting:

$this->soapClient = new \SoapClient($wsdlUrl, array(
	'features' => SOAP_SINGLE_ELEMENT_ARRAYS,
	'trace' => DEBUG_SOAP
));

I am using SOAP call response headers to sign request results.

After alot of hours, i finally got the best way to get SOAP response headers
(other than parsing __getLastResponse() which requires trace option enabled) is using
__soapCall() wrapper.

<?php

class API extends SoapClient
{
	// constructor etc.

	//Get SOAP Server response headers
	public function __soapCall($function, $arguments, $options = array(), $input_headers = null, &$output_headers = null)
	{
		parent::__soapCall($function, $arguments, $options, $input_headers, $output_headers);

		print_r($output_headers); //Array of response headers
	}

	//If you are using WSDL you need this, so you still can call functions directly without calling __soapCall manually
	public function __call($func, $args)
	{
		return $this->__soapCall($func, $args);
	}
?>

If your service is a .NET doc/lit, which means the input message has a single part named 'parameters'
that is a structure that wraps the parameters. Your call should look like this:

<?php

$params = array('param_name_1'=>$val_1, 'param_name_2'=>$val_2);
$client->call('MethodName', array('parameters' => $params));

?>


SoapClient::SoapClient:

SoapClient::SoapClient - SoapClient constructor

Desc:

public SoapClient::SoapClient ( mixed $wsdl [, array $options ])

This constructor creates SoapClient objects in WSDL or non-WSDL mode.

Params:

wsdl: URI of the WSDL file or NULL if working in non-WSDL mode.

Note: During development, WSDL catching may be disabled by the use of the soap.wsdl_cache_ttl php.ini setting
otherwise changes made to the WSDL file will have no effect until soap.wsdl_cache_ttl is expired.

options:

An array of options. If working in WSDL mode, this parameter is optional. If working in non-WSDL mode,
the location and uri options must be set, where location is the URL of the SOAP server to send the
request to, and uri is the target namespace of the SOAP service.

The style and use options only work in non-WSDL mode. In WSDL mode, they come from the WSDL file.

The soap_version option should be one of either SOAP_1_1 or SOAP_1_2 to select SOAP 1.1 or 1.2,
respectively. If omitted, 1.1 is used.

For HTTP authentication, the login and password options can be used to supply credentials. For making
an HTTP connection through a proxy server, the options proxy_host, proxy_port, proxy_login and proxy_password
are also available.

For HTTPS client certificate authentication use local_cert and passphrase options. An authentication may
be supplied in the authentication option. The authentication method may be either SOAP_AUTHENTICATION_BASIC
(default) or SOAP_AUTHENTICATION_DIGEST.

The compression option allows to use compression of HTTP SOAP requests and responses.

The encoding option defines internal character encoding. This option does not change the encoding
of SOAP requests (it is always utf-8), but converts strings into it.

The trace option enables tracing of requests so faults can be backtraced. This defaults to FALSE.

The classmap option can be used to map some WSDL types to PHP classes. This option must be an array
with WSDL types as keys and names of PHP classes as values.

Setting the boolean trace option enables use of the methods SoapClient->__getLastRequest, SoapClient->__getLastRequestHeaders,
SoapClient->__getLastResponse and SoapClient->__getLastResponseHeaders.

The exceptions option is a boolean value defining whether soap errors throw exceptions of type
SoapFault.

The connection_timeout option defines a timeout in seconds for the connection to the SOAP service.
This option does not define a timeout for services with slow responses. To limit the time to wait
for calls to finish the default_socket_timeout setting is available.

The typemap option is an array of type mappings. Type mappings is an array with keys type_name,
type_ns (namespace URI), from_xml (callback accepting one string parameter) and to_xml (callback
accepting one object parameter).

The cache_wsdl option is one of WSDL_CACHE_NONE, WSDL_CACHE_DISK, WSDL_CACHE_MEMORY or
WSDL_CACHE_BOTH.

The user_agent option specifies string to use in User-Agent header.

The stream_context option is a resource for context.

The features option is a bitmask of SOAP_SINGLE_ELEMENT, ARRAYS, SOAP_USE_XSI_ARRAY_TYPE, SOAP_WAIT_ONE_WAY_CALLS.

The keep_alive option is a boolean value defining whether to send the Connection: Keep-Alive header or
Connection: close.

The ssl_method option is one of SOAP_SSL_METHOD_TLS, SOAP_SSL_METHOD_SSLv2, SOAP_SSL_METHOD_SSLv3 or
SOAP_SSL_METHOD_SSLv23.

Errors/Exceptions:

SoapClient::SoapClient() will generate an E_ERROR error if the location and uri options are not provided
in non-WSDL mode.

A SoapFault exception will be thrown if the wsdl URI cannot be loaded.

Changelog:

Verison 				Desc

5.5.0 					New ssl_method option.

5.4.0 					New keep_alive option.

Examples:

Example #1 SoapClient::SoapClient() example:

<?php

$client = new SoapClient("some.wsdl");

$client = new SoapClient("some.wsdl", array('soap_version' 	=> SOAP_1_2));

$client = new SoapClient("some.wsdl", array('login' => "some_name",
											'password' => "some_password"));

$client = new SoapClient("some.wsdl", array('proxy_host' => "localhost",
											'proxy_port' => 8080));

$client = new SoapClient("some.wsdl", array('proxy_host' => "localhost",
											'proxy_port' => 8080,
											'proxy_login' => "some_name",
											'proxy_password' => "some_password"));

$client = new SoapClient("some.wsdl", array('local_cert' => "cert_key.pem"));

$client = new SoapClient(null, array('location' => "http://localhost/soap.php",
									'uri' => "http://test-uri/"));

$client = new SoapClient(null, array('location' => "http://localhost/soap.php",
									'uri' => "http://test-uri/",
									'style' => SOAP_DOCUMENT,
									'use' => SOAP_LITERAL));

$client = new SoapClient("some.wsdl",
	array('compression' => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP));

$client = new SoapClient("some.wsdl", array('encoding' => 'ISO-8859-1'));

class MyBook {
	public $title;
	public $author;
}

$client = new SoapClient("books.wsdl", array('classmap' => array('book' => "MyBook")));

?>

It took me than a week to figure out how to implemenet WSSE (Web Service Security) headers
in native PHP SOAP. There are not much resource savilable on this.

Step1: Create two classes to create a structure for the WSSE headers

<?php
class clsWSSEAuth{
	private $Username;
	private $Password;
	function __construct($username, $password) {
		$this->Username=$username;
		$this->Password=$password;
	}
}

class clsWSSEToken {
	private $UsernameToken;
	function __construct($innerVal){
		$this->UsernameToken = $innerVal;
	}
}
?>

Step2: Create SOAP Variables for Username and PAssword:

<?php
$username = 1111;
$password = 1111;

//Check with your provided which security name-space they are using.
$strWSSENS = "http://schemas.xmlsoap.org/ws/2002/07/secext";

$objSoapVarUser = new SoapVar($username, XSD_STRING, NULL, $strWSSENS, NULL, $strWSSENS);
$objSoapVarPass = new SoapVar($password, XSD_STRING, NULL, $strWSSENS, NULL, $strWSSENS);
?>

Step3: Create Object for Auth class and pass in soap var

<?php
$objWSSEAuth = new clsWSSEAuth($objSoapVarUser, $objSoapVarPass);
?>

Step4: Create SoapVar out of the object of Auth class

<?php
$objSoapVarWSSEAuth = new SoapVar($objWSSEAuth, SOAP_ENC_OBJECT, NULL, $strWSSENS, 'UsernameToken', $strWSSENS);
?>

Step5: Create object for Token Class

<?php
$objWSSEToken = new clsWSSEToken($objSoapVarWSSEAuth);
?>

Step6: Create SoapVar out of object of Token Class

<?php
$objSoapVarWSSEToken = new SoapVar($objWSSEToken, SOAP_ENC_OBJECT, NULL, $strWSSENS, 'UsernameToken',
$strWSSENS);
?>

Step7: Create SoapVar for 'Security' Node

<?php
$objSoapVarHeaderVal=new SoapVar($objSoapVarWSSEToken, SOAP_ENC_OBJECT, NULL, $strWSSENS, 'Security', $strWSSENS);
?>

Step8: Create header object out of security soapvar

<?php
$objSoapVarWSSHeader = new SoapHeader($strWSSENS, 'Security', $objSoapVarHeaderVal, true, 'http://abce.com');

//third param here makes 'mustUnderstand=1
//Fourth param generators 'actor="http://abce.com"'
?>

Step9: Create Object of Soap Client

<?php
$objClient = new SoapClient($WSDL, $arrOptions);
?>

Step10: Set headers for soapclient object

<?php
$objClient->__setSoapHeaders(array($objSoapVarWSSEHeader));
?>

Step 11: Final call to method

<?php
$objResponse = $objClient->__soapCall($strMethod, $requestPayloadString);
?>

As noted in the bug report http://bugs.php.net/bug.php?id=36226, it is considered
a feature that sequences with a single element do not come out as arrays. to override this
"feature", we can do the following:

$x = new SoapClient($wsdl, array('features' =>
SOAP_SINGLE_ELEMENT_ARRAYS));

This does not seem to be documented, but when you want to use compression for your outgoing
requests, you ahve to OR with the compression level:

<?php
$client = new SoapClient("some.wsdl",
	array('compression' => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | 9));
?>

Note, when programming some soap server, set the "soap.wsdl_cache_enabled" directive
in php.ini file to 0:

soap.wsdl_cache_enabled=0

Otherwise, it will give a bunch of strange errors saying that your wsdl is incorrect or missing.

If you need to use ws-security with a nonce and a timestamp, you can use this:

<?php

class WsseAuthHeader extends SoapHeader {

private $wss_ns = 'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd';
private $wsu_ns = 'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd';

function __construct($user, $pass) {
	
	$created = gmdate('Y-m-d\TH:i:s\Z');
	$nonce = mt_rand();
	$passdigest = base64_encode(pack('H*', sha1(pack('H*', $nonce) . pack('a*', $created). pack('a*', $pass))));

	$auth = new stdClass();
	$auth->Username = new SoapVar($user, XSD_STRING, NULL, $this->wss_ns, NULL, $this->wss_ns);
	$auth->Password = new SoapVar($pass, XSD_STRING, NULL, $this->wss_ns, NULL, $this->wss_ns);

	$auth->Nonce = new SoapVar($passdigest, XSD_STRING, NULL, $this->wss_ns, NULL, $this->wss_ns);
	$auth->Created = new SoapVar($created, XSD_STRING, NULL, $this->wss_ns, NULL, $this->wsu_ns);

	$username_token = new stdClass();
	$username_token->UsernameToken = new SoapVar($auth, SOAP_ENC_OBJECT, NULL, $this->wss_ns, 'UsernameToken',
$this->wss_ns);

	$security_sv = new SoapVar(
		new SoapVar($username_token, SOAP_ENC_OBJECT, NULL, $this->wss_ns, 'UsernameToken', $this->wss_ns),
		SOAP_ENC_OBJECT, NULL, $this->wss_ns, 'Security', $this->wss_ns);
	parent::__construct($this->wss_ns, 'Security', $security_sv, true);
}
}

?>

And with your SoapClient do:

<?php
$client = new SoapClient("http://host/path");
$client->__setSoapHeaders(Array(new WsseAuthHeader("user", "pass")));
?>

When using HTTP basic authentication, PHP will only send the credentials when invoking
the service, not when fetching the WSDL.

The same goes for using an SSL client certificate, the SoapClient will onl present the
certificate on the actual remote call, not when getting the WSDL. The workaround is
the same as above. HttpRequest works as expected.

Example for a soap client with HTTP authentication over a proxy:

<?php
new SoapClient(
	'service.wsdl',
	array(
		//Stuff for development
		'trace' => 1,
		'exceptions' => true,
		'cache_wsdl' => WSDL_CACHE_NONE,
		'features' => SOAP_SINGLE_ELEMENT_ARRAYS,

		//Auth credentials for the SOAP request.
		'login' => 'username',
		'password' => 'password',

		//proxy url
		'proxy_host' => 'example.com', //Do not add the schema here (http or https). it wont work
		'proxy_port' => 44300,

		//Auth credentials for the proxy.
		'proxy_login' => NULL,
		'proxy_password' => NULL,
	)
);
?>

Providing an URL to a WSDL file on the remote server (which as well is protected with
HTTP authentication) did not work. I downloaded the WSDL and stored it on the local server.

Do note that *contrary* to the ssl context option (http://php.net/manual/en/context.ssl.php#context.ssl.local-pk),
`local_pk` is NOT a valid option. For the `local_cert` option, you should combine the private key with
the certificate file.

Alternatively, if you want to keep the private key and certificate file separate, you can create a 
stream context and pass that as the `context` option:

<?php
$context = stream_context_create([
	'ssl' => [
		'local_cert' => '/path/to/cert/file',
		'local_pk' => '/path/to/private/key'
	]]);

$client = new \SoapClient($wsdl, [
	'context' => $context,
	//Other options
]);

I found a good use for typemap. When using classmap any xml tags that had attributes, attribute values
were not captured, so a typemap allows you to override how a class gets implemented and being
able to get any attributes not previously captured.

<ItemList>
	<Item productId="1234">
		<feature>red</feature>
	</Item>
	<Item productId="5678">
		<feature>blue</feature>
	</Item>
</ItemList>

<?php //semi-pseudo code
namespace ExampleNS;

class ItemList{
	public $item = [];
}

class Item {
	public $productId;
	public $feature;
}

class Service {
	public function __construct() {
		$options = [	
			'classmap' => [
				'ItemList' => 'ExampleNS\ItemList',
				'Item' => 'ExampleNS\Item'
			],
			'typemap' => [
				'type_ns' => 'http://some.wsdl.ns/sdo',
				'type_name' => 'Item',
				'from_xml' => [__CLASS__,'newConversion']
			]
		];
	}

	public function newConversion($xml){
		return simplexml_load_string($xml);
		//or more appropiately dig into the simplexml object and
		// instansiate the correct classes intended to be defined and
		// return those
	}
}
?>

If your service is protected through basic http auth, and you are not using
wsdl, you will have to put the login in the SoapClient's option:

<?php
$client = new SoapClient(
	null,
	array(
		'soap_version' => SOAP_1_2,
		'location' => ...
		...,
		'login' => 'username',
		'password' => '*****',
	)
);
?>

A note regarding boolean values that may seem obvious on reflection but 
could be a gotcha for some:

Seeing a SOAP request example with <SomeBooleanParam>true</SomeBooleanParam> may lead you to
pass in string "true" or "false" as the param, which is incorrect, the correct method
is to use boolean data types.

<?php
$client = new SoapClient($wsdl,$options);
$method = "DoSomething";
$params = new stdClass;

$params->SomeBooleanParam = TRUE;
$client->$method($params);
// simplified request snippet would be
// <SomeBooleanParam>true</SomeBooleanParam>

// this will also be correct, but not for the right reasons:
$params->SomeBooleanParam = "true";
$client->$method($params);

//simplified request snippet would be
// <SomeBooleanParam>true</SomeBooleanParam>

//This is where you may be wondering what is going on
$params->SomeBooleanParam = "false";
$client->$method($params);

//Simplifeid reuqest snippet owuld be
// <SomeBooleanParam>true</SomeBooleanParam>

//you need to do this instead
$params->SomeBooleanParam = FALSE;
$client->$method($params);

//simplified request snippet would be
// <SomeBooleanParam>false</SomeBooleanParam>
?>

For anyone having trouble with ArrayOf_xsd_string and getting an error similar to 
'No deserializer defined for array type {http://www.w3.org/2001/XMLSchema}string'

Try using the 'features' param, set to SOAP_USE_XSI_ARRAY_TYPE - this makes sure the
correct deserialized is used.

eg.
<?php
$client = new SoapClient("some.wsdl", array('features' => SOAP_USE_XSI_ARRAY_TYPE));
?>

The "cache_wsdl" option takes constants like WSDL_CACHE_NONE or WSDL_CACHE_DISK that are
listed on the "SOAP constants" page -> /manual/env/soap.constants.php

Note that if libxml_disable_entity_loader() has been called, you cannot specify a WSDL
file - you will get a error that PHP "failed to load externally entity"

To resolve this, add:

<?php
libxml_disable_entity_loader(false);
//Soap client goes here vvv
?>

Above any calls to instansiable SoapClient.

You can get a wsdl, if basic authentication is required:

<?php

$login = 'bert';
$password = 'berts password';

$client = new SoapClient(
	'http://' . urlencode($login) . ':' . urlencode($password) . '@www.server.com/path/to/wsdl',
	array(
		'login' => $login,
		'password' => $password
	)
);

?>

Here is a function for easier debugging:

<?php
function soapDebug($client){
	
	$requestHeaders = $client->__getLastRequestHeaders();
	$request = prettyXml($client->__getLastRequest());
	$responseHeaders = $client->__getLastResponseHeaders();
	$response = prettyXml($client->__getLastResponse());

	echo '<code>' . nl2br(htmlspecialchars($requestHeaders, true)) . '</code>';
	echo highlight_string($request, true) . "<br/>\n";

	echo '<code>' . nl2br(htmlspecialchars($responseHeaders, true)) . '</code>' . "<br/>\n";
	echo highlight_string($response, true) . "<br/>\n";
}

$client = new SoapClient(null, array(
	'location' => 'http://sita.local/_mpay/server.php',
	'uri' => 'http://sita.local/_mpay/',
	'trace' => 1,
));

$result = $client->__soapCall('getDate', array('format' => 'Y-m-d H:i:s'));
soapDebug($client);
?>

To monitor SOAP calls in and out of a unix server:

sudo tcdump -nn -vv -A -s 0 -i eth0 dst or src host xxx.xxx.xxx.xxx and port 80

And always use 'cache_wsdl' => WSDL_CACHE_NONE

It should be noted that if you receive a return error: 'Object reference not set to an
instance of an object.'. This could be due to something as simple as passing the incorrect
params. When you look at this XML:

<Get xmlns="http://example.com">
	<request>
		<CustomerId>string</CustomerId>
		<From>dateTime</From>
		<To>dateTime</To>
	</request>
</Get>

Your code should look something like this:

<?php
	try {
		$options = array(
			'soap_version'=>SOAP_1_2,
			'exceptions'=>true,
			'trace'=>1,
			'cache_wsdl'=>WSDL_CACHE_NONE
		);
		$client = new SoapClient('http://example.com/doc.asmx?WSDL', $options);
// Note where 'Get' and 'request' tags are in the XML
		$results = $client->Get(array('request'=>array('CustomerId'=>'1234')));
	} catch (Exception $e) {
		echo "<h2>Exception Error!</h2>";
		echo $e->getMessage();
	}
$results = $client->Get(array('request'=>array('CustomerId'=>'842115')));
?>

Another bug report:

SOAP Basic Authentication Failure Error Messages

Desc:

When an incorrect user name or password is passed to a SoapClient in WSDL mode,
teh resulting SoapFault exception which is thrown contains the generic faultstring
of "SOAP-ERROR: Parsing WSDL: Could not load from..." and faultcode of "WSDL".

A warning is given with "HTTP request failed! HTTP/1.1 401 Unauthorized", however
this is not catchable. The more desirable result in the case would be the same as
non-WSDL mode where the faultstring is "Unauthorized" and faultcode is "HTTP".

Reproduced on Windows XP with Apache/2.0.55 PHP 5.1.6, Apache/2.2.3 PHP 5.2.0
and Apache/2.2.3 PHP 6.0.0

Reproduce code:

//WSDL is behind basic auth
try {
	$soap = new SoapClient('http://localhost/some.wsdl', array('login' => 'badlogin', 'password' => 'badpass'));
} catch (SoapFault $e) {
	echo '<p>Fault String: ' .$e->faultstring.'<p>';
	echo '<p>Fault Code: '.$e->faultcode.'<p>';
}

Expected results:

Fault String: Unauthorized

Fault Code: HTTP

Actual Result:

Warning: SoapClient::__construct({snip:wsdl}) [function.SoapClient---construct]: failed to open stream:
HTTP request failed! HTTP/1.1 401 Unauthorized in {snip:path}

Warning: SoapClient::__construct() [function.SoapClient---construct]: I/O warning: failed to load
external entity "{snip:wsdl}" in {snip:path}

Fault String: SOAP-ERROR: Parsing WSDL: Could not load from 'http://localhost/some.wsdl'

Fault Code: WSDL

Having xdebug may interefere with the constructor throwing exceptions

If you're using CLI and there are multiple IP addresses available for outgoing SOAP-requests,
try this "secret" to set outgoing IP:

e.g for local IP 10.1.4.71:

$opts = array('socket' => array('bindto' => '10.1.4.71:0'));
$context = stream_context_create($opts);
$client = new SoapClient(null, array('location'=>'http://....', 'uri' => '...', 'stream_context' => $context)),

You can also set other options for the stream context, please refer to this page:

Appendix M: http://www.php.net/manual/en/wrappers.php

Supported Protocols and Wrappers:

PHP comes with many built-in wrappers for various URL-style protocols for use with the filesystem
functions such as fopen(), copy(), file_exists() and filesize(). In addition to these wrappers,
 it is possible to register custom wrappers using the stream_wrapper_register() function.

Note: The URL syntax used to describe a wrapper only supports the scheme://... syntax. The scheme:/ and
scheme: syntaxes are not supported.

Table of Contents:

file:// - Accessing local filesystem

http:// - Accessing HTTP(s) URLs

ftp:// - Accessing FTP(s) URLs

php:// - accessing various I/O streams

zlib:// - Compression Streams

data:// - Data (RFC 2397)

glob:// - Find pathnames matching pattern

phar:// - PHP Archive

ssh2:// - Secure Shell 2

rar:// - RAR

ogg:// - Audo streams

expect:// - Process interaction Streams

To create a raw tcp listener system i use the following:

xinetd daemon with config like:
service test
{
	disable = no
	type = UNLISTED
	socket_type = stream
	protocol = tcp
	bind = 127.0.0.1
	port = 12345
	wait = no
	user = apache
	group = apache
	instances = 10
	server = /usr/local/bin/php
	server_args = -n [your php file here]
	only_from = 127.0.0.1 #lol
	log_type = FILE /var/log/phperrors.log
	log_on_success += DURATION
}

Now use fgets(STDIN) to read the input. Writing can be done STDOUT or just echo. be ware that
you are completely bypassing the webserver and thus certain vars wont be available.

You can decompress (gzip) a input stream by combining wrappers:

eg: $x = file_get_contents("compress.zlib://php://input");

I used this method to decompress a gzip stream that was pushed to my server

You can use "php://input" to accept and parse "PUT", "DELETE" etc. requests

<?php
//Example to parse "PUT" requests
parse_str(file_get_contents('php://input'), $_PUT);

//The result
print_r($_PUT);
?>

This is useful for Resful APIs, for instance.

Note: All response headers (from both the final responding server and intermediate
redirecters) can be found in $http_response_header or stream_get_meta_data()

For php://filter the /resource=foo part must come last. And foo needs no escaping at all.
php://filter/resource=foo/read=somefilter would try to open a file 'foo/read=somefilter'
while php://filter/read=somefilter/resource=foo will open file 'foo' with the somefilter
filter applied.

Example of how to use the php://input to get raw post data:

//read the raw data in
$roughHTTPPOST = file_get_contents("php://input");
//parse it into vars
parse_str($roughHTTPPOST);

If you do readfile("php://input") you will get the length of the post data

Note that STDIN and similar are defined only in CLI

Every time you open a php://memory stream, you get a new storage allocated.
Thus, php://memory is not a shared bank of memory.

For https for windows enable this extension:

extension=php_openssl.dll

For reading a XML stream, this will work just fine:

<?php

$arq = file_get_contents('php://input');

?>

Then you can parse the XML like this:

<?php

$xml = xml_parser_create();

xml_parse_into_struct($xml, $arq, $vs); //guessing arq is actually arg, just that their g is weird

xml_parser_free($xml);

$data = "";

foreach($vs as $v){
	if($v['level'] == 3 && $v['type'] == 'complete')
			$data .= "\n".$v['tag']." -> ".$v['value'];
}
echo $data;
?>

This is particularly useful for receiving mobile originated (MO) SMS messages from cellular
phone companies.

Here is a snippet to read compressed raw post data without enabling global variables.

I needed to read xml posted data submitted by ocs agent. The data was sent as Content-Type: application/x-compressed
(zlib compressed data).

It seems related to an old bug which still seems broken:

Another bug report:

Bug #49411 zlib.inflate stream filter is broken

Desc:

The ZLib "inflate" stream filter appears to be broken in PHP 5.2.9 and 5.2.10.
When trying to inflate a GZip file or even a stream previously compressed
with zlib.deflate, zlib.inflate returns no output.

Reproduce code:

<?php
//zlibtest.php
//Usage:
// 	$ echo TEST TEST TEST TEST | gzip | php zlibtest.php

$input = fopen("php://stdin", "rb");
stream_filter_append($input, 'zlib.inflate', STREAM_FILTER_READ);
while(!feof($input) && ($buffer = fread($input, 8192)) !== FALSE)
		fwrite(STDOUT, $buffer);
fclose($input);

//inexplicably, this will produce no output on STDOUT
// even the example at http://us3.php.net/filters.compression behaves incorrectly

?>

Expected result:

TEST TEST TEST TEST on the command line

Actual result:

No output

This bug is still broken.

Another example:

<?php
$data = '';
$fh = fopen('php://input', 'rb');
stream_filter_append($fh, 'zlib.inflate', STREAM_FILTER_READ, array('window'=>15));
while(!feof($fh)) {
	$data .= fread($fh, 8192);
}
?>

Not only are STDIN, STDOUT and STDERR only allowed for CLI programs, but they are not
allowed for programs that are read from STDIN. That can confuse you if you try
to type in a simple test program.

While writing to error stream, error_log() function comes as a shorthand to writing
to php://stderr. This function also allows to web server log when running through
a web server such as apache.

The way to open php://output in append mode:

$fp =fopen("php://output","w");
fwrite($fp,"Hello, World!<BR>\n");
fclose($fp);

IN trying to do AJAX with PHP and JS, i came upon an issue where the POST argument from
the following JS could not be read in via pHP 5 using the $_REQUEST or $_POST. I finally
figured out how to read in the raw data using the php://input directive.

Js Code:

//Create request instance
xhttp = new XMLHttpRequest();
//Set the event handler
xhttp.onreadystatechange = serviceReturn;
//prep the call, http method=POST, true=asynch call
var Args = 'number='+NbrValue;
xhttp.open("POST", "http://<?php echo $_SERVER['SERVER_NAME'] ?>/webservices/ws_service.php", true);
//Send the call with args
xhttp.send(Args);

PHP code:

//read the raw data in
$roughHTTPPost = file_get_contents("php://input");
//parse it into vars
parse_str($roughHTTPPOST);

As of Version 5.0.4 you can dynamically change your location even if you are 
usin a wsdl:

<?php

$client = new SoapClient("http://some.host.net/wsdl/somefile.wsdl", array(
	"location" => 'myurl.com'));

?>

Notice that we can use the location key.
This means that we can have the same wsdl file not define a location unitl runtime
which is great if you have a development test site or if you distribute your files
to otehr companies.

Prior to this, you would have to ship a custom wsdl file to every client you had
with their location hardcoded.

A full working PHP .net soap configuration:

1. web.config on .net server must work with basichttp binding.

2. parameters to soap functions must be passed as:

array ('parm1_name'=>'parm1_value',
			'parm2_name'=>'parm2_value'...)

<?php
header('Content-Type: text/plain');

try {
	$options = array(
		'soap_version'=>SOAP_1_1,
		'exceptions'=>true,
		'trace'=>1,
		'cache_wsdl'=>WSDL_CACHE_NONE
	);
	$client = new SoapClient('http://www.example.com/end_point.wsdl', $options);
	//Note where 'Get' and 'request' tags are in the XML

} catch (Exception $e) {
	echo "<h2>Exception Error!</h2>";
	echo $e->getMessage();
}

echo 'Running HelloWorld!';

try {
	$response=$client->HelloWorld();
}
catch(Exception $e)
{
	echo 'Caught exception: ' . $e->getMessage() . "\n";
}

print_r($response);
?>

As of 5.5, ssl_method defaults to SOAP_SSL_METHOD_SSLv23. Just wanted to add
this because it was not explicitly specified above.

When using classmap option to map the SOAP results to a class, the constuctor
of the object you have mapped to is not called.

$client = new SoapClient("url_to_wsdl",
	array('classmap' => array('contact' => "Contact")));

$params = array("1");

$contact = $client->__soapCall("get_contact", $params);

The expected result:

A contact object that has properties initialized (i.e, db connections)

Actual result:

A contact object without the properties.

If your WSDL file contains a param with a base64Binary type, you should not use base64_encode()
when passing along your soap vars. When doing the request, the SOAP library automatically base64
encodes your data, so otherwise you will be encoding it twice.

WSDL snipplet:
<element name="content" type="base64Binary" xmime:expectedContentTypes="*/*/"/>

<?php
$string = 'data_you_want_to_send__like_xml_in_soap';
$soap_data = array(
		'foo' => 'bar',
		//'content' => base64_encode($string) //do not do this
		'content' => $string //do this
);
$response = $client->Send($soap_data);
?>

I kept having an issue using an HTTP proxy with SOAP. The proxy_port parameter
has to be an integer, i.e, "proxy_port"=>"80" won't work.

It has to be "proxy_port"=>80.

To those fighting with NTLM authenticated proxy servers, here is a solution:

<?php
class NTLM_SoapClient extends SoapClient {
	public function __construct($wsdl, $options = array()) {
		if (empty($options['proxy_login']) || empty($options['proxy_password'])) throw new Exception('Login and 
password required for NTLM authentication!');
		$this->proxy_login = $options['proxy_login'];
		$this->proxy_password = $options['proxy_password'];
		$this->proxy_host = (empty($options['proxy_host']) ? 'localhost' : $options['proxy_host']);
		$this->proxy-port = (empty($options['proxy_port']) ? 8080 : $options['proxy_port']);
		parent::__construct($wsdl, $options); 
	}

	//call a url using curl with ntlm auth

	//@param string $url
	//@param string $data
	//@return string
	//@throws SoapFault on curl connection error
	protected function callCurl($url, $data) {
	$handle = curl_init();
	curl_setopt($handle, CURLOPT_HEADER, false);
	curl_setopt($handle, CURLOPT_URL, $url);
	curl_setopt($handle, CURLOPT_FAILONERROR, true);

	curl_setopt($handle, CURLOPT_HTTPHEADER, Array("PHP SOAP-NTLM Client"));
	curl_setopt($handle, CURLOPT_RETURNTRANSFER, true);
	curl_setopt($handle, CURLOPT_POSTFIELDS, $data);

	curl_setopt($handle, CURLOPT_PROXYUSERPWD, $this->proxy_login.':'.$this->proxy_password);
	curl_setopt($handle, CURLOPT_PROXY, $this->proxy_host.':'.$this->proxy_port);
	curl_setopt($handle, CURLOPT_PROXYAUTH, CURLAUTH_NTLM);

	$response = curl_exec($handle);
	if (empty($response)) {
		throw new SoapFault('CURL error: ' . curl_error($handle), curl_errno($handle)); //maybe . instead of ,
	}
	curl_close($handle);
	return $response;
	}

	public function __doRequest($request,$location,$action,$version,$one_way = 0) {
		return $this->callCurl($location,$request);
	}
}
?>

Requires curl and could be extended.

Being new to SOAP, i was searching for a while to find out why my message was getting a response in
soapUI, but not with my php code. The specific service i was addressing gives a HTTP 202 Accepted
on success (no response), but returns a SOAP message on errors.

Situation:

Using an authenticated client connection, and a WSDL file, SOAP calls with type "One-Way" do not give
a response header, even though a response is expected.

Solution:
When calling the client constructor, set SOAP_WAIT_ONE_WAY_CALLS in the $options['features']

When using classmap, never put a fully qualified classname (starting with \), due to the following bug:

Bug #69280 SoapClient classmap does not support fully qualified class name

Desc:

If you have in your wsdl an object that extends another one
(xs:extension)(RealClass1 extends AbstractClass in my case)
then your call will succeed (soap call containing xsi:type=RealClass1) if you have in your
classmap:
'RealClass1' => 'RealClass1'
But will fail (RealClass1 casted to abstractclass) if you have:
'RealClass1' => '\RealClass1'

Same thing with namespaces:

'RealClass1' => 'myNS\RealClass1' works
'RealClass1' => '\myNS\RealClass1' does not work

Expected result:

<?xml version="1.0" encoding="UTF-8">
<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" 
xmlns:ns1="http://tempuri.org/"
<SOAP-ENV:Body>
<ns1:TestMethod>
<ns1:testObj xsi:type="ns1:RealClass1">
<ns1:prop>prop</ns1:prop>
<ns1:prop1>prop1</ns1:prop1>
</ns1:testObj>
</ns1:TestMethod>
</SOAP-ENV:Body>
</SOAP-ENV:Envelope>

(with xsi:type="ns1:RealClass1", and prop1)

Actual result:

<?xml version="1.0" encoding="UTF-8"?>
<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns1="http://tempuri.org/">
<SOAP-ENV:Body>
<ns1:TestMethod>
<ns1:testObj>
<ns1:prop>prop</ns1:prop>
</ns1:testObj>
</ns1:TestMethod>
</SOAP-ENV:Body>
</SOAP-ENV:Envelope>

(testObj is downcasted from RealClass1 to AbstractClass and looses prop1)
(prop is a property of AbstractClass, prop1 property of RealClass1)

I was going to file a bug for this as well, but found this one. Adding my notes
as another data point.

BACKGROUND:

I am using SoapClient with a classmap specified in the options:
http://php.net/manual/en/soapclient.soapclient.php#refsect1-soapclient.soapclient-parameters

To map WSDL types to PHP classes. For example, i have a PHP class called NumerValue based on the
NumberValue complexType defined in:

https://ads.google.com/apis/ads/publisher/v201511/LineItemService?wsdl

NumberValue has an abstract parent class called Value.

Thus when passed in a SoapClient::__soapCall argument:
http://php.net/manual/en/soapclient.soapcall.php#refsect1-soapclient.soapcall-parameters

And converted into SOAP XML by PHP's SoapClient, it needs an xsi:type added to its node
since it is a subclass. E.g,

<ns1:getCreativesByStatement>
	<ns1:filterStatement>
		<ns1:query>WHERE id = :id ORDER BY id ASC LIMIT 1</ns1:query>
		<ns1:values>
			<ns1:key>id</ns1:key>
			<ns1:value xsi:type="ns1:NumberValue">
				<ns1:value>123456789</ns1:value>
			</ns1:value>
		</ns1:values>
	</ns1:filterStatement>
</ns1:getCreativesByStatement>

ISSUE:

The issue is that we are using a namespace for NumberValue and if we add a prefixing '\'
in the SoapClient classmap to indicate global namespace like so:
array('NumberValue' => '\\Google\\AdsApi\\Dfp\\v201511\NumberValue');

SoapClient does not seem to add the xsi:type on SOAP POSTs (outgoing SOAP calls),
as it does not seem to be able to map the class to the WSDL type. On SOAP responses,
it seems to map the WSDL type to class correctly as expected. E.g, it produces:

<ns1:getCreativesByStatement>
	<ns1:filterStatement>
		<ns1:query>WHERE id = :id ORDER BY id ASC LIMIT 1</ns1:query>
		<ns1:values>
			<ns1:key>id</ns1:key>
			<ns1:value/>
		</ns1:values>
	</ns1:filterStatement>
</ns1:getCreativesByStatement>

If i remove the prefixing '\', it works, E.g,
array('NumberValue' => 'Google\\AdsApi\\Dfp\\v201511\\NumberValue');

The prefix of '\' should not matter or affect the behaviour of SoapClient in this
case right? Or is it a bug?

A related bug is that it only supports global namespaces right now anyway

But if the SoapClient classmaps were ever to respect the declared namespace hten
it owuld need to work with a prefixing '\'

The SoapServer class:

Introduction:

The SoapServer class provides a server for the >> SOAP 1.1 and >> SOAP 1.2 protocols.
It can be used with or without a WSDL service description.

Class synopsis:

SoapServer {
	
	// Methods
	public void addFunction ( mixed $functions )
	public void addSoapHeader ( SoapHeader $object )
	public __construct ( mixed $wsdl [, array $options ] )
	public void fault ( string $code, string $string [, string $actor [, string $details [, string $name ]]] )

	public array getFunctions()
	public void handle ([ string $soap_request ] )
	public void setClass ( string $class_name [, mixed $args [, mixed $... ]] )

	public void setObject ( object $object )
	public void setPersistence ( int $mode )
	public SoapServer ( mixed $wsdl [, array $options ] )
}

Table of contents:

SoapServer::addFunction - adds one or more functions to handle SOAP requests

SoapServer::addSoapHeader - add a SOAP header to the response

SoapServer::__construct - SoapServer constructor

SoapServer::fault - Issue SoapServer fault indicating an error

SoapServer::getFunctions - Returns list of defined functions

SoapServer::handle - Handles a SOAP request

SoapServer::setClass - Sets the class which handles SOAP requests

SoapServer::setObject - Sets the object which will be used to handle SOAP requests

SoapServer::setPersistence - Sets SoapServer persistence mode

SoapServer::SoapServer - SoapServer constructor

While there are plenty of mentions online that SoapServer does not support SOAP Headers,
that is not true.

In your class, if you declare a function with the name of the header, the function will
be called when that header is received.

<?php
class MySoapService {
	private $user_is_valid;

	function MyHeader($header) {
		if ((isset($header->Username)) && (isset($header->Password))) {
			if(ValidateUser($header->Username, $header->Password)) {
				$user_is_valid = true;
			}
		}
	}

	function MySoapRequest($request) {
		if ($user_is_valid) {
			//process request
		}
		else {
			throw new MyFault("MySoapRequest", "User not valid.");
		}
	}
}
?>

SoapServer does not support WSDL with literal/document. I have a class:

<?php
class My_Soap {
	//returns Hello World
	//
	//@param string $world
	//@return string

	public function getInterAdmins($world) {
		return 'hello' . $world;
	}
}
?>

To fix this i had to create proxy class:

<?php
class My_Soap_LiteralDocumentProxy {
	public function __call($methodName, $args) {
		$soapClass = new My_Soap();
		$result = call_user_func_array(array($soapClass, $methodName), $args[0]);
		return array($methodName . 'Result' => $result);
	}
}
?>

Now make sure that the WSDL is created using My_Soap. And that the Server is created
using My_Soap_LiteralDocumentProxy:

<?php

if (isset($_GET['wsdl'])) {
	$wsdl = new Zend_Soap_AutoDiscover(); //It generates the WSDL
	$wsdl->setOperationBodyStyle(array(
		'use' => 'literal'
	));
	$wsdl->setBindingStyle(array(
		'style' => 'document'
	));
	$wsdl->setClass('My_Soap');
	$wsdl->handle();
} else {
	$server = new Zend_Soap_Server('http://localhost/something/webservice.php?wsdl');
	$server->setClass('My_Soap_LiteralDocumentProxy');
	$server->handle();
}

?>

Also, a simple example a SOAP service:

require_once("nusoap.php");

$server = new soap_server();

function multiplication($number1, $number2){
	$result = $number1*$number2;
	return $result;
}

$server->service($HTTP_RAW_POST_DATA);

require_once("nusoap.php");

$client = new nusoap_client("http://localhost/test.php");

$error = $client->getError();
if ($error){
	echo "Error: $error";
}

$result = $client->call("multiplication", array("valor1" => "10", "valor2" => "15"));

$error = $client->getError();
if ($error){
	echo "Error: $error";
} else {
	echo "Resultado: $res";
}

require_once("nusoap.php");

$server = new soap_server();

$ns = "test";
$server->configureWSDL('test', $ns);
$server->wsdl->schemaTargetNamespace = $ns;

$server->register('multiplication', array('valor1' => 'xsd:integer', 'valor2' => 'xsd:integer'), array('return' => 'xsd:integer'), $ns);

function multiplication($valor1, $valor2){
	$result = $valor1 * $valor2;
	return $res;
}

$server->service($HTTP_RAW_POST_DATA);

SoapServer::addFunction:

Adds one or more functions to handle SOAP requests

Desc:

public void SoapServer::addFunction ( mixed $functions )

Exports one or more functions for remote clients

Parameters:

functions:

To export one function, pass the function name into this parameter as a string.

To export several functions, pass an array of function names.

To export all the functions, pass a special constant SOAP_FUNCTIONS_ALL.

Note: functions must receive all input arguments in the same order as defined in the WSDL
file (They should not receive any output parameters as arguments) and return one or more
values. To return several values they must return an array with named output params.

Examples:

Example #1 SoapServer::addFunction() example:

<?php

function echoString($inputString)
{
	return $inputString;
}

$server->addFunction("echoString");

function echoTwoStrings($inputString1, $inputString2)
{
	return array("outputString1" => $inputString1,
				 "outputString2" => $inputString2);
}

$server->addFunction(array("echoString", "echoTwoStrings"));

$server->addFunction(SOAP_FUNCTIONS_ALL);

?>

Be careful with SOAP_FUNCTIONS_ALL, as it adds ALL available PHP functions to your server.

This can be a potentional security threat, imagine clients doing this:

echo $client->file_get_contents("c:\\my files\\my_passwords.doc");

And voila, they have the contents of your file my_passwords.doc

SoapServer::addSoapHeader:

Add a SOAP header to the response

Desc:

public void SoapServer::addSoapHeader ( SoapHeader $object )

Adds a SOAP header to be returned with the response to the current request.

Params:

object: The header to be returned

Notably, addSoapHeaders() must be called within handling class/object.

If you call addSoapHeaders() like this:

$server = new SoapServer("some.wsdl");
$server->setObject(new Service());
$server->addSoapHeaders(new SoapHeader("ns", "Header", "value"));
$server->handle();

Your SOAP header will not be added to the server response as it will
be overwritten by result of handle() function.

If you want to add SOAP headers to the resulting response, you should
make $server global/static variable and then call addSoapHeaders() from
within of the method of Service class which will handle the request.

SoapServer::__construct

SoapServer constructor

Desc:

public SoapServer::__construct ( mixed $wsdl [, array $options ] )

This function is an alias of SoapServer::SoapServer()

//WOrking server with Client for Localhost

// server.php

<?php
class MyClass {
	public function helloWorld() {
		return 'Hallo walt ' . print_r(func_get_args(), true);
	}
}

try {
	$server = new SOAPServer(
		NULL,
		array(
			'uri' => 'http://localhost/soap/server.php'
		)
	);

	$server->setClass('MyClass');
	$server->handle();
}

catch(SOAPFault $f) {
	print $f->faultstring;
}

// client.php

<?php
$client = new SoapClient(null, array(
		'location' => "http://localhost/soap/server.php",
		'uri' => "http://localhost/soap/server.php",
		'trace' => 1 ));

echo $return = $client->__soapCall("helloWorld",array("world"));
?>

SoapServer::fault:

Issue SoapServer fault indicating an error

Desc:

public void SoapServer::fault ( string $code, string $string [, string $actor [, string $details [, string $name ]]] )

Sends a response to the client of the current request indicating an error.

Note: This can only be called when handling a request.

Params:

Code: The error code to return

String: A brief description of the error

Actor: A string identifying the actor that caused the fault.

details: More details on the fault

name: The name of the fault. This can be used to select a name from a WSDL file.

This function currently terminates execution as well, which may be undesirable. 

Desc:

Calling SoapServer->fault() causes execution to terminate, there is no way for the developer
to get the XML response itself and process it differently.

Reproduce code:

$server = SoapServer(NULL, array('location' => 'http://example.com', 'uri' => 'http://example.com'));
$server->fault('foo', 'bar');
echo 'We are past $server->fault()!'

Expected result:

We are past $server->fault()!

Actual result:

"We are past $server->fault()!" is never printed, only the XML for the Soap Fault is.

SoapServer::getFunctions:

SoapServer::getFunctions - Returns a list of defined functions

Desc:

public array SoapServer::getFunctions()

Returns a list of the defined functions in the SoapServer object. This method returns the
list of all functions added by SoapServer::addFunction() or SoapServer::setClass()

Returns:

An array of the defined functions

Examples:

Example #1 SoapServer::getFunctions() example

<?php
$server = new SoapServer(NULL, array("uri" => "http://test-uri"));
$server->addFunction(SOAP_FUNCTIONS_ALL);
if ($_SERVER["REQUEST_METHOD"] == "POST") {
	$server->handle();
} else {
	echo "This SOAP server can handle following functions: ";
	$functions = $server->getFunctions();
	foreach($functions as $func) {
		echo $func . "\n";
	}
}
?>

SoapServer::handle:

Handle a SOAP request

Desc:

public void SoapServer::handle ([ string $soap_request ])

Processes a SOAP request, calls necessary functions, and sends a response back.

Params:

soap_request: The SOAP request. If this argument is omitted, the request is assumed to be in the 
raw POST data of the HTTP request.

Examples:

Example #1 SoapServer::handle() example

<?php
function test($x)
{
	return $x;
}

$server = new SoapServer(null, array('uri' => "http://test-uri/"));
$server->addFunction("test");
$server->handle();
?>

Sometimes returned data can contain characters which are not valid in xml 1.0.
This causes the xml being output by SoapServer::handle to be invalid.

Although it is probably better to sanitize the data earlier, a comination of
output buffering and a simple regex can be used as a quick fix to make sure
the output is indeed valid xml.

For example:

<?php
	ob_start();
	$soapServer->handle();
	$soapXml = ob_get_contents();
	ob_end_clean();
	$soapXml = preg_replace('/[^\x{0009}\x{000a}\x{000d}\x{0020}-\x{D7FF}\x{E000}-\x{FFFD}]+/u', '', $soapXml);
	echo $soapXml;
?>

After much headache and looking through PHP source code, i finally found out why the handle()
function would immediately send back a fault with the string "Bad Request".

Turns out that my client was sending valid XML, but the first line of the XML was the actual XML declaration::

<?xml version="1.0" encoding="UTF-8"?>

When the "handle" function in the SoapServer class is called, it first tries to parse the XML. When the XML
document cannot be parsed, a "Bad Request" fault is returned and execution of the script immediately stops.

I assume that the XML parser built into PHP (libxml2) already assumes the document to be XML and when it finds
the declaration, it thinks it is not valid.

I added some XML parsing calls to my service before the handle() function is called to check for valid XML
and avoid the "Bad Request" fault. This also allows me to send back a more suitable error message:

<?php
$parser = xml_parser_create("UTF-8");
if (!xml_parse($parser,$HTTP_RAW_POST_DATA,true)){
	$webService->fault("500", "Cannot parse XML: ".
		xml_error_string(xml_get_error_code($parser)).
		" at line: ".xml_get_current_line_number($parser).
		", column: ".xml_get_current_column_number($parser));
}
?>

Additional information to the comment of "Joeri Thissen"

In some cases the replacements generates a timeout (looks like it is in combination with Nginx). The problem
is that PHP has already sent a content-length and the webserver is still waiting for new content.

To fix this, you have to reset the HTTP content-length with the right value:

<?php
ob_start();
$soapServer->handle();
$result = ob_get_contents();
ob_end_clean();

$result = str_replace("abcdef", "abc", $result);
$length = strlen($result);

header("Content-Length: " . $length);
echo $result;

Seems pretty logical once you find the solution, but it took me quite a while to figure this one out:
If you are using WSDL based SOAP requests and you have more than one operation in your binding (with the
same params), make sure the <soap:operation> style is set to rpc, NOT body!

When you specify 'body' here, all that will be transmitted in the request is the params for the function
call, and SoapServer->handle() will use the first function it finds with the same parameter-makeup to
handle the call.

ie if you have 2 functions:
<?php
function One ( string $blah );
function Two ( string $blah );
?>

Making a client call with SoapClient->Two('test'); will result in One() being called, as body
takes the first matching function in terms of params.

Thus, our type must be set to rpc, to account for both calls.

Please note that when defining several serivces in one wsdl file, and calling one of those services,
you may always get the response for your first service.

This is a known bug. You will find its description and some workarounds here: https://bugs.php.net/bug.php?id=49169

SoapServer calls wrong function, although "SOAP action" header is correct

Desc:

When two <wsdl:operation>s have the same API (that is, have the same <wsdl:message>s), the SoapServer calls the
function corresponding to the _first_ <wsdl:operation> specified in the <wsdl:binding>, even although the SoapClient
sends the correct "SOAP action" header, which is correctly received on the server.

Again, this is related to the fact of rpc description instead of Body or Document.

Be aware that SoapServer::handle(); method sends additional HTTP headers to the browser. One of them is
"Content-Type: application/soap+xml". If you want to execute SOAP methods locally as a part of SoapClient::__doRequest()
you may need to reset (override) this header back to "Content-Type: text/html" like so:

<?php
function Add($x,$y) {
	return $x+$y;
}

class LocalSoapClient extends SoapClient {
	
	function __construct($wsdl, $options) {
		parent::__construct($wsdl, $options);
		$this->server = new SoapServer($wsdl, $options);
		$this->server->addFunction('Add');
	}

	function __doRequest($request, $location, $action, $version) {
		ob_start();
		$this->server->handle($request);
		$response = ob_get_contents();
		ob_end_clean();
		return $response;
	}
}

$x = new LocalSoapClient(NULL, array('location' => 'test://', 'uri' => 'http://testuri.org'));

header("Content-Type: text/html");

var_dump($x->Add(3,4));

?>

Sometimes the bug of not having a rpc style defined, can be hidden by a Apache segmentation fault along with
an HTTP headers error SoapFault thrown to the client.

if you get eithero f those 2, try checking to make sure that style="rpc" in your WSDL file's soap:operation's.

SoapServer::setClass:

Sets the class which handles SOAP requests

Desc:

public void SoapServer::setClass( string $class_name [, mixed $args [, mixed $... ]] )

Exports all methods from specified class.

This object cna be made persistent across request for a given PHP session with the SoapServer::setPersistence() method.

Params:

class_name: The name of the exported class.

args: These optional params will be passed to the default class constructor during object creation.

You can also retrieve object properties the following way while using __autoload($class_name)

<?php

# Start session
session_start();

# Auto load class as required
function __autoload($class_name)
{
	require_once "/var/www/example/class/" . $class_name . ".php";
}

// service

$_SESSION[_bogus_session_name] = unserialize($_SESSION[_bogus_session_name]);
$server = new SoapServer('service.wsdl');
$server->setClass("MyClass");
$server->setPersistence(SOAP_PERSISTENCE_SESSION);
$server->handle();
$_SESSION[_bogus_session_name] = serialize($_SESSION[_bogus_session_name])

?>

If you want your SOAP client to be able to save and then retrieve the object props, you need to
set the SOAP server to be persistent by setting session.auto_start = 0, invoking session_start(),
and SoapServer->setPersistence(SOAP_PERSISTENCE_SESSION) in the following manner:

<?php
	//set ini
	ini_set("soap.wsdl_cache_enabled", 0);
	ini_set("session.auto_start", 0);

	//class file
	require_once('MyClass.php');

	//Service
	$server = new SoapServer('service.wsdl');
	$server->setClass("MyClass");
	$server->setPersistence(SOAP_PERSISTENCE_SESSION);
	$server->handle();
?>

SoapServer::setObject:

Sets the object which will be used to handle SOAP requests

Desc:

public void SoapServer::setObject ( object $object )

This set a specific object as the handler for SOAP requests, rather than just
a class as in SoapServer::setClass()

Params:

object: The object to handle the requests.

SoapServer::setPersistence:

Sets SoapServer persistence mode

Desc:

public void SoapServer::setPersistence ( int $mode )

This function allows changing the persistence state of a SoapServer object between
requests. This function allows saving data between requests utilizing PHP sessions.

This method only has an affect on a SoapServer after it has exported functions utilizing
SoapServer::setClass()

Note: The persistence of SOAP_PERSISTENCE_SESSION makes only objects of the given class persistent,
but not the class static data. In this case, use $this->bar instead of self::$bar.

Note: SOAP_PERSISTENCE_SESSION serializes data on the class object between requests. In order 
to properly utilize resources (e.g. PDO), __wakeup() and __sleep() magic methods should be
utilized.

The PDO class:

Intro:

Represents a connection between PHP and a database server.

Class synopsis:

PDO {
	public __construct ( string $dsn [, string $username [, string $password [, array $options ]]] )
	public bool beginTransaction()
	public bool commit()
	public mixed errorCode()
	public array errorInfo()
	public int exec( string $statement )
	public mixed getAttribute ( int $attribute )
	public static array getAvailableDrivers()
	public bool inTransaction()
	public string lastInsertId ([ string $name = NULL ])
	public PDOStatement prepare ( string $statement [, array $driver_options = array() ])
	public PDOStatement query ( string $statement )
	public string quote ( string $string [, int $parameter_type = PDO::PARAM_STR ])
	public bool rollBack()
	public bool setAttribute (int $attribute, mixed $value)
}

Table of Contents:

PDO::beginTransaction - intiates a transaction
PDO::commit - Commits a transaction
PDO::__construct - Creates a PDO instance representing a connection to a DB

PDO::errorCode - Fetch the SQLSTATE associated with the last operation on the database handle
PDO::errorInfo - Fetch extended error information associated with the last operation on the database handle

PDO::exec - Execute a SQL statement and return the number of affected rows
PDO::getAttribute - Retrieve a database connection attribute

PDO::getAvailableDrivers - Return an array of available PDO drivers
PDO::inTransaction - Checks if inside a transaction
PDO::lastInsertId - Returns the ID of the last inserted row or sequence value

PDO::prepare - Prepares a statement for execution and returns a statement object
PDO::query - Executes an SQL statement, returning a result set as a PDOStatement object
PDO::quote - Quotes a string for use in a query

PDO::rollBack - Rolls back a transaction
PDO::setAttribute - Set an attribute

"And storing username/password inside class is not a very good idea for production code."

Good idea is to store database connection settings in *.ini files but you have to restrict
access to them. For example this way:

my_setting.ini:
[database]
driver = mysql
host = localhost
;port = 3306
schema = db_schema
username = user
password = secret

Database connection:

<?php
class MyPDO extends PDO
{
	public function __construct($file = 'my_setting.ini')
	{
		if (!$settings = parse_ini_file($file, TRUE)) throw new exception('Unable to open ' . $file . '.');

		$dns = $settings['database']['driver'] .
		':host=' . $settings['database']['host'] .
		((!empty($settings['database']['port'])) ? (';port=' . $settings['database']['port']) : '') .
		';dbname=' . $settings['database']['schema'];

		parent::__construct($dns, $settings['database']['username'], $settings['database']['password']);
	}
}
?>

Database connection parameters are accessible via human readable ini file for those who screams even if
they see one PHP/HTML/any_other command.

Keep in mind, you MUST NOT use 'root' user in your apps, unless your app is designed to do DB maintance.

And storing username/pw inside a class is not a very good idea for production code. You would need to
edit the actual working code to change settings, which is bad.

Starting with PHP 5.4, you are unable to use persistent connections when you have your own database
class derived from the native PDO class. If your code uses this combination, you will encounter segmentation
faults during the cleanup of the PHP process.

You can still use _either_ a derived PDO class _or_ persistent connections.

Bug #63176 Segmentation fault when instansiating 2 persistent PDO to the same db server

Desc:

Download the PHP version 5.4.7, compiled with ./configure --enable-debug --with-pdo-mysql
--enable-pcntl

Run the test script and it gives a segmentation fault when the script finishes. If i remove the
attribute from PDO2 it works fine. If the persistent option is disabled it works fine too.

gdb backtrace available on https://gist.github.com/<stuff>

Test script:

<?php

class PDO2 extends PDO {
	protected $transLevel;
}

class ModelA {
	public function __construct() {
		$this->db = new PDO2('mysql:host=localhost', 'root', 'root', array(PDO::ATTR_PERSISTENT => true));
		$this->db->query('SELECT 1')->fetchAll();
	}
}

$a = new ModelA();
$b = new ModelA();

Expectation:

No segmentation fault

Actual result:

Segmentation fault (core dumped)

PDO and Depedency Injection

Depdency injection is good for testing. But for anyone wanting various data mapper objects to have
a database connection, dependency injection can make other model code very messy because DB objects
have to be instansiated all over the place and given to the data mapper objects.

The code below is a good way to maintain dependency injection while keeping clean and minimal model
code.

<?php

class DataMapper
{
	public static $db;

	public static function init($db)
	{
		self::$db = $db;
	}
}

class VendorMapper extends DataMapper
{
	public static function add($vendor)
	{
		$st = self::$db->prepare(
			"insert into vendors set
			first_name = :first_name,
			last_name = :last_name"
		);
		$st->execute(array(
			':first_name' => $vendor->first_name,
			':last_name' => $vendor->last_name
		));
	}
}

//In your bootstrap
$db = new PDO(...);
DataMapper::init($db);

//In your model logic
$vendor = new Vendor('John', 'Doe');
VendorMapper::add($vendor);

?>

Here is an singleton PDO example:

##### config.ini #######
db_driver=mysql
db_user=root
db_password=924892xp

[dsn]
host=localhost
port=3306
dbname=localhost

[db_options]
PDO::MYSQL_ATTR_INIT_COMMAND=set names utf8

[db_attributes]
ATTR_ERRMODE=ERRMODE_EXCEPTION
###################

<?php class Database {
	private static $link = null;

	private static function getLink() {
		if (self::$link) {
			return self::$link;
		}

		$ini = _BASE_DIR . "config.ini";
		$parse = parse_ini_file($ini, true);

		$driver = $parse["db_driver"];
		$dsn = "${driver}:";
		$user = $parse["db_user"];
		$password = $parse["db_password"];
		$options = $parse["db_options"];
		$attributes = $parse["db_attributes"];

		foreach ($parse["dsn"] as $k => $v) {
			$dsn .= "${k}=${v};";
		}

		self::$link = new PDO($dsn, $user, $password, $options);

		foreach($attributes as $k => $v) {
			self::$link->setAttribute(constant("PDO::{$k}")
				, constant("PDO::{$v}"));
		}

		return self::$link;
	}

	public static function __callStatic ($name, $args) {
		$callback = array(self::getLink(), $name);
		return call_user_func_array($callback, $args);
	}
}
?>

<?php //Examples
$stmt = Database::prepare("SELECT 'something' ;");
$stmt->execute();
var_dump($stmt->fetchAll());
$stmt->closeCursor();
?>

Since i do not have notes on the PDO Extension, i will ntoe all about it here as well, and 
then return to hte SoapServer.

Introduction:

The PHP Data Objects (PDO) extension defines a lightweight, consistent interface for accessing databases
in PHP. Each database driver that implements the PDO interface can expose database-specific features as 
regex functions.

Note that you cannot perform any database functions using the PDO extension by itself; you must use
a database-specific PDO driver to acccess a database server.

PDO provides a data-access abstraction layer, which means that, regardless of which database
you are using, you use the same functions to issue queries and fetch data. PDO does not provide
a database abstraction; it does not rewrite SQL or emulate missing features.

You should use a full-blown abstraction layer if you need that facility.

PDO ships with PHP 5.1, and is available as PECL extension for PHP 5.0; PDO requires the new
OO features in teh core of pHP 5, and so will not run with earlier versions of pHP.

Installation/Configuration:

Installation:

Installing PDO on Unix systems

1. PDO and teh PDO_SQLITE driver is enabled by default as of PHP 5.1.0. You may need to enable
the PDO driver for your database of choice; consult the documentation for database-specific
PDO drivers to find out more about that.

Note: When building PDO as a shared extension (not recommended) then all PDO drivers must be
loaded after PDO itself.

2. When installing PDO as a shared module, the php.ini file needs to be updated so that the
PDO extension will be loaded automatically when PHP runs. You will also need to enable any
database specific drivers there too; make sure that they are listed after the pdo.so line,
as PDO msut be initialized before the database-specific extensions can be loaded.

If you built PDO and the database-specific extensions statically, you can skip this step.

extension=pdo.so

Windows users

1. PDO and all the major drivers ship with PHP as shared extensions, and simply need to be
activated by editing the php.ini file:

extension=php_pdo.dll

Note: this step is not necessary as of PHP 5.3 and above, as a DLL is no longer required 
for PDO.

2. Next, choose the other database-specific DLL files and either use dl() to load them
at runtime, or enable them in php.ini below php_pdo.dll. For example:

extension=php_pdo.dll
extension=php_pdo_firebird.dll
extension=php_pdo_informix.dll
extension=php_pdo_mssql.dll
extension=php_pdo_oci.dll
extension=php_pdo_oci8.dll
extension=php_pdo_odbc.dll
extension=php_pdo_pgsql.dll
extension=php_pdo_sqlite.dll

Note: Remember that after making changes to your php.ini file, you will need to
restart PHP for your new configuration directives to take effect.

Runtime Configuration:

The behaviour of these functions is affected by settings in php.ini.

PDO Configuration Options

Name 			Default 				Changable 			Changelog

pdo.dsn.* 								php.ini only

Here is a short explanation of the configuration directives.

pdo.dsn.* string
Defines DSN alias. See PDO::__construct() for thorough explanation.

Predefined Constants:

The constants below are defined by this extension, and will only be available when the
extension has either been compiled into PHP or dynamically loaded at runtime.

Warning: PDO uses class constants since PHP 5.1. Prior releases use global constants in teh form
PDO_PARAM_BOOL.

PDO::PARAM_BOOL (integer): Represents a boolean data type.

PDO::PARAM_NULL (integer): Represents the SQL NULL data type.

PDO::PARAM_INT (integer): Represents the SQL INTEGER data type.

PDO::PARAM_STR (integer): Represents the SQL CHAR, VARCHAR, or other string data type.

PDO::PARAM_LOB (integer): Represents the SQL large object data type.

PDO::PARAM_STMT (integer): Represents a recordset type. Not currently supported by any drivers.

PDO::PARAM_INPUT_OUTPUT (integer): Specifies that the parameter is an INOUT parameter for a stored
procedure. You must bitwise-OR this value with an explicit PDO::PARAM_* data type.

PDO::FETCH_LAZY (integer): Specifies that the fetch method shall return each row as an object
with variable names that corresponds to the column names returned in the result set.

PDO::FETCH_LAZY creates the object variable names as they are accessed. Not valid inside
PDOStatement::fetchAll().

PDO::FETCH_ASSOC (integer):

Specifies that the fetch method shall return each row as an array indexed by column name
as returned in the corresponding result set. If the result set contains multiple columns
with the same name, PDO::FETCH_ASSOC returns only a single value per column name.

PDO::FETCH_NAMED (integer):

Specifies that the fetch method shall return each row as an array indexed by column name
as returned in the corresponding result set. If the result set contains multiple columns
with the same name, PDO::FETCH_NAMED returns an array of values per column name.

PDO::FETCH_NUM (integer):

Specifies that the fetch method shall return each row as an array indexed by colum number
as returned in the corresponding result set, starting at column 0.

PDO::FETCH_BOTH (integer):

Specifies that the fetch method shall return each row as an array indexed by both column
name and number as returned in the corresponding result set, starting at column 0.

PDO::FETCH_OBJ (integer):

Specifies that the fetch method shall return each row as an object with property names
that correspond to the colum names returned in the result set.

PDO::FETCH_BOUND (integer):

Specifies that the fetch method shall return TRUE and assign the values of the columns
in the result set to the PHP variables to which they were bound with the PDOStatement::bindParam()
or PDOStatement::bindColumn() methods.

PDO::FETCH_COLUMN (integer):

Specifies that the fetch method shall return only a single requested column for the next row
in teh result set.

PDO::FETCH_CLASS (integer):

Specifies that the fetch method shall return a new instance of the requested class, mapping
the columns to named properties in the class.

Note: The magic __set() method is called if the property does not exist in the requested
class.

PDO::FETCH_INTO (integer):

Specifies that the fetch method shall update an existing instance of the requested class,
mapping the columns to named properties in the class.

PDO::FETCH_FUNC (integer):

Allows completely customize the way data is treated on the fly (only valid inside PDOStatement::fetchAll()).

PDO::FETCH_GROUP (integer):

Group return by values. Usually combined with PDO::FETCH_COLUMN or PDO::FETCH_KEY_PAIR.

PDO::FETCH_UNIQUE (integer):

Fetch only the unqiue values.

PDO::FETCH_KEY_PAIR (integer):

Fetch a two-column result into an array where the first column is a key and the second
column is the value. Available since PHP 5.2.3

PDO::FETCH_CLASSTYPE (integer):

Determine the class name from the value of first column.

PDO::FETCH_SERIALIZE (integer):

As PDO::FETCH_INTO but object is provided as a serialized string. Available since PHP 5.1.0.
Since PHP 5.3.0 the class constructor is never called if this flag is set.

PDO::FETCH_PROPS_LATE(integer):

Call the constructor before setting properties. Available since PHP 5.2.0

PDO::ATTR_AUTOCOMMIT(integer):

If this value is FALSE, PDO attempts to disable autocommit so that hte connection
begins a transaction.

PDO::ATTR_PREFETCH (integer):

Setting the prefetch size allows you to balance speed against memory usage for your application.
Not all database/driver combinations support setting of the prefetch size. A larger prefetch
size results in increased performance at the cost of higher memory usage.

PDO::ATTR_TIMEOUT(integer):

Sets the timeout value in seconds for communications with the database.

PDO::ATTR_ERRMODE(integer):

See the Errors and error handling section for more information about this attribute.

PDO::ATTR_SERVER_VERSION (integer):

This is a read only attribute;it will return information about the version of the database
server to which PDO is connected.

PDO::ATTR_CLIENT_VERSION (integer):

This is a read only attribute; it will return information about the version of the client
libraries that the PDO driver is using.

PDO::ATTR_SERVER_INFO(integer):

This is a read only attribute; it will return some meta information about the database
server to which PDO is connected.

PDO::ATTR_CONNECTION_STATUS (integer)

PDO::ATTR_CASE(integer): Force column names to a specific case specified by the PDO::CASE_* constants.

PDO::ATTR_CURSOR_NAME(integer): Get or set the name to use for a cursor. Most useful when using
scrollable cursors and positioned updates.

PDO::ATTR_CURSOR(integer): Selects the cursor type. PDO currently supports either PDO::CURSOR_FWDONLY
and PDO::CURSOR_SCROLL. Stick with PDO::CURSOR_FWDONLY unless you know that you need a scrollable
cursor.

PDO::ATTR_DRIVER_NAME (string):

Returns the name of the driver.

Example #1 using PDO::ATTR_DRIVER_NAME

<?php
if ($db->getAttribute(PDO::ATTR_DRIVER_NAME) == 'mysql') {
	echo "Running on mysql; doing something mysql specific here\n";
} 
?>

PDO::ATTR_ORACLE_NULLS(integer):

Convert empty strings to SQL NULL values on data fetches.

PDO::ATTR_PERSISTENT(integer):

Request a persistent connection, rather than creating a new connection. See
Connections and Connection management for more information on this attribute.

PDO::ATTR_STATEMENT_CLASS(integer)

PDO::ATTR_FETCH_CATALOG_NAMES(integer):

Prepend the containing catalog name to each column name returned in the result set.
The catalog name and column name are separated by a decimal (.) character. Support
of this attribute is at the driver level; it may not be supported by your driver.

PDO::ATTR_FETCH_TABLE_NAMES(integer):

Prepend the containing table name to each column name returned in the result set.
The table name and column name are seperated by a decimal (.) character. Support
of this attribute is at the driver level; it may not be supported by your driver.

PDO::ATTR_STRINGIFY_FETCHES (integer)

PDO::ATTR_MAX_COLUMN_LEN (integer)

PDO::ATTR_DEFAULT_FETCH_MODE(integer):

Available since PHP 5.2.0

PDO::ATTR_EMULATE_PREPARES (integer):

Available since PHP 5.1.3.

PDO::ERRMODE_SILENT (integer):

Do not raise an error or exception if an error occurs. The developer is expected
to explicitly check for errors. This is the default mode. See Errors and error
handling for more information about this attribute.

PDO::ERRMODE_WARNING(integer):

Issue a PHP E_WARNING message if an error occurs. See Errors and error handling 
for more information about this attribute.

PDO::ERRMODE_EXCEPTION(integer):

Throw a PDOEXception if a error occurs. See Errors and error handling for more
information about this attribute.

PDO::CASE_NATURAL (integer):

Leave column names as returned by the database driver.

PDO::CASE_LOWER (integer):

Force column names to lower case.

PDO::CASE_UPPER (integer):

Force column names to upper case.

PDO::NULL_NATURAL(integer)

PDO::NULL_EMPTY_STRING(integer)

PDO::NULL_TO_STRING(integer)

PDO::FETCH_ORI_NEXT(integer): Fetch the next row in the result set. Valid only for
scrollable cursors.

PDO::FETCH_ORI_PRIOR(integer): Fetch the first row in the result set. Valid only for
scrollable cursors.

PDO::FETCH_ORI_FIRST(integer): Fetch the first row in the result set. Valid only
for scrollable cursors

PDO::FETCH_ORI_LAST(integer): Fetch the last row in the result set. Valid only
for scrollable cursors.

PDO::FETCH_ORI_ABS(integer): Fetch the requested row by row number from the result
set. Valid only for scrollable cursors.

PDO::FETCH_ORI_REL(integer): Fetch the requested row by relative position from
the current position of the cursor in the result set. Valid only for scrollable
cursors.

PDO::CURSOR_FWDONLY(integer): Create a PDOStatement object with a forward-only cursor.
This is the default cursor choice, as it is the fastest and most common data access
pattern in PHP.

PDO::CURSOR_SCROLL(integer): Create a PDOStatement object with a scrollable cursor.
Pass the PDO::FETCH_ORI_* constants to control the rows fetched from the result set.

PDO::ERR_NONE(string): Corresponds to SQLSTATE '00000', meaning that the SQL statement
was successfully issued with no errors or warnings. This constant is for your convenience
when checking PDO::errorCode() or PDOStatement::errorCode() to determine if an error
occurred.

You will usually know if this is the case by examining the return code from the method
that raised the error condition anyway.

PDO::PARAM_EVT_ALLOC(integer):

Allocation event

PDO::PARAM_EVT_FREE(integer):

Deallocation event

PDO::PARAM_EVT_EXEC_PRE(integer):

Event triggered prior to execution of a prepared statement.

PDO::PARAM_EVT_EXEC_POST(integer):

Event triggered subsequent to execution of a prepared statement.

PDO::PARAM_EVT_FETCH_PRE(integer):

Event triggered prior to fetching a result from a resultset.

PDO::PARAM_EVT_FETCH_POST(integer):

Event triggered subsequent to fetching a result from a resultset.

PDO::PARAM_EVT_NORMALIZE(integer):

Event triggered during bound parameter registration allowing the driver
to normalize the parameter name.

PDO::SQLITE_DETERMINISTIC(integer):

Specifies that a function created with PDO::sqliteCreateFunction() is deterministic,
i.e it always returns the same result given the same input within a single 
SQL statement. (Available as of PHP 7.1.4)

It should be noted that PDO::FETCH_CLASS will call the constructor *after* setting the
values (or calling __set)

Default value for \PDO::ATTR_TIMEOUT is 30 seconds.

When you use REAL type column on SQLite, your setting of pdo parameter of
bindValue() is PDO::PARAM_STR.

...
$stmt->bindValue(':elapse_time', $e_time, PDO::PARAM_STR);
...

Connections and Connection management:

Connections are established by creating instances of the PDO base class. It does not
matter which driver you want to use; you always use the PDO class name. The constructor
accepts parameters for specifying the database source (known as the DSN) and optionally
for the username and password (if any).

Example #1 Connecting to MySQL

<?php
$dbh = new PDO('mysql:host=localhost;dbname=test', $user, $pass);
?>

If there are any connection errors, a PDOException object will be thrown. You may
catch the exception if you want to handle the error condition, or you may opt
to leave it for an application global exception handler that you set up via
set_exception_handler().

Example #2 Handling connection errors

<?php
try {
	$dbh = new PDO('mysql:host=localhost;dbname=test', $user, $pass);
	foreach($dbh->query('SELECT * FROM FOO') as $row) {
		print_r($row);
	}
	$dbh = null;
} catch (PDOException $e) {
	print "Error!: " . $e->getMessage() . "<br/>";
	die();
}
?>

Warning: If your application does not catch the exception thrown from the PDO constructor,
the default action taken by the zend engine is to terminate the script and display a back
trace. This back trace will likely reveal the full database connection details, including
the username nad password. It is your responsibility to catch this exception, either
explicitly (via a catch statement) or implicitly via set_exception_handler().

Upon successful connection to the database, an instance of the PDO class is returned
to your script. The connection remains active for the lifetime of that PDO object.
To close the connection, you need to destroy the object by ensuring that all remaining
references to it are deleted - you do this by assigning NULL to the variable that holds
the object. If you do not do this explicitly, PHP will automatically close the
connection when your script ends.

Note: If there are still other references to this PDO instance (such as from a PDOStatement
instance, or from other variables referencing the same PDO instance), these have to be
removed also (for instance, by assigning NULL to the variable that references the
PDOStatement).

Example #3 Closing a connection

<?php
$dbh = new PDO('mysql:host=localhost;dbname=test', $user, $pass);
//use the connection here
$sth = $dbh->query('SELECT * FROM foo');

//And now we are done close it
$sth = null;
$dbh = null;
?>

Many web apps will benefit from making persistent connections to database servers.
Persistent connections are not closed at the end of the script, but are cached 
and re-used when another script requests a connection using the same credentials.

The persistent connection cache allows you to avoid the overhead of establishing
a new connection every time a script needs to talk to a database, resulting in a 
faster web app.

Example #4 Persistent Connections

<?php
$dbh = new PDO('mysql:host=localhost;dbname=test', $user, $pass, array(
	PDO::ATTR_PERSISTENT => true
));
?>

Note: If you wish to use persistent connections, you must set PDO::ATTR_PERSISTENT
in the array of driver options passed to the PDO constructor. If setting this attribute
with PDO::setAttribute() after instansiation of the object, the driver will not use
persistent connections.

Note: If you are using the PDO ODBC driver and your ODBC libraries support ODBC
Connection Pooling (unixODBC and Windows are two that do; there may be more),
then it is recommended that you do not use persistent PDO connections, and
instead leave the connection caching to the ODBC connection Pooling layer.

The ODBC Connection Pool is shared with other modules in the process; if PDO
is told to cache the connection, then that connection would never be returned
to the ODBC connection pool, resulting in additional connections being created
to service those other modules.

Using PHP 5.4.26, pdo_pgsql with libpg 9.2.8 (self compiled). As usual PHP never
explains some critical stuff in documentation. You should not expect that your
connection is closed when you set $dbh = null unless all you do is just
instansiating the PDO class. Try the following:

<?php
$pdo = new PDO('pgsql:host=192.168.137.1;port=5432;dbname=anydb', 'anyuser', 'pw');
sleep(5);
$stmt = $pdo->prepare('SELECT * FROM sometable');
$stmt->execute();
$pdo = null;
sleep(60);
?>

Now check your database. And what a surprise, your connections hangs for another
60 seconds. Now that might be expected, because you haven't cleared the resultset.

<?php
$pdo = new PDO('pgsql:host=192.168.137.160;port=5432;dbname=platin', 'cappytoi', '1111');
sleep(5);
$stmt = $pdo->prepare('SELECT * FROM admin');
$stmt->execute();
$stmt->closeCursor();
$pdo = null;
sleep(60);
?>

The above, will not close the statement, however, as the following is required:

<?php
$pdo = new PDO('pgsql:host=192.168.137.160;port=5432;dbname=platin', 'cappytoi', '1111');
sleep(5);
$stmt = $pdo->prepare('SELECT * FROM admin');
$stmt->execute();
$stmt->closeCursor(); //this is not even required
$stmt = null; //Doing this is mandatory for connection to get closed
$pdo = null;
sleep(60);
?>

PDO is just one of a kind because it saves you to depend on 3rd party abstraction
layers. But it becomes annoying to see there is no implementation of a "disconnect"
method even though there is a request for it for 2 years.

Developers underestimate the requirement of such a method. First of all, doing
$stmt = null everywhere is annoying and what is most annoying is you cannot
forcibly disconnect even when you set $pdo = null.

It might get cleared on script's termination but this is not always possible because script
termination may be delayed due to slow client connection etc.

Anyway, here is how to disconnect forcibly using postgresql:

<?php
$pdo = new PDO('pgsql:host=192.168.137.160;port=5432;dbname=platin', 'cappytoi', '1111');
sleep(5);
$stmt = $pdo->prepare('SELECT * FROM admin');
$stmt->execute();
$pdo->query('SELECT pg_terminate_backend(pg_backend_pid());');
$pdo = null;
sleep(60);
?>

Following may be used for MYSQL: (not guaranteed)

KILL CONNECTION_ID()

I would please advice people who talk about database port in reference with stock
files to please read up on about what a socket file is. TCP/IP uses ports, a socket
file however is a direct pipe line to your database.

So no, you should not replace localhost with local ip if you use a different port
on your database server, because the socket file has nothing to do with your
TCP/IP setup. And whenever possible, using the local socket file is much faster
than establishing new TCP/IP connections on each request which is only meant
for remote database servers.

If you want to keep connections after fork exit, you can kill with SIGKILL forked
process.

<?php
$dbh = new PDO('pgsql:host=localhost;dbname=test', $user, $pass);
$pid = pcntl_fork();
if($pid == 0){
	//Forked process will exit immediately
	exit;
}
sleep(1);
$statement = $dbh->query('select 1');
var_dump($statement);
?>

Result: false

<?php
$dbh = new PDO('pgsql:host=localhost;dbname=test', $user, $pass);
$pid = pcntl_fork();
if($pid == 0){
	//use sigkill to close process
	register_shutdown_function(function(){
		posix_kill(getmypid(), SIGKILL);
	});
	//forked process will exit immedieatly
	exit;
}
sleep(1);
$statement = $dbh->query('select 1');
var_dump($statement);
?>

Result: object(PDOStatement)#3 (1) {
	["queryString"]=>
	string(8) "select 1"
}

As http://stackoverflow.com/questions/17630772/pdo-cannot-connect-remote-mysql-server points
out; sometimes when you want to connect to an external server like this:

<?php
$conn = new PDO('mysql:host=123.4.5.6;dbname=test_db;port=3306', 'username', 'password');
?>

It will fail no matter what. However, if you put a space between mysql: and host like this:

<?php
$conn = new PDO('mysql: host=123.4.5.6;dbname=test_db;port=3306', 'username', 'password');
?>

It will magically work. I am not sure if this applies in all cases or server setups.
But i think it is worth mentioning in the docs.

To avoid exposing your connection details should you fail to remember to catch any exception
thrown by the PDO constructor, you can use the following class to implicitly change the
exception handler temporarily.

<?php

class SafePDO extends PDO {
	
	public static function exception_handler($exception) {
		//Output the exception details
		die('Uncaught exception: ', $exception->getMessage());
	}

	public function __construct($dsn, $username='', $password='', $driver_options=array()) {
		//Temporarily change the PHP exception handler while we
		set_exception_handler(array(__CLASS__, 'exception_handler'));

		//Create a PDO object
		parent::__construct($dsn, $username, $password, $driver_options);

		//Change the exception handler back to whatever it was before
		restore_exception_handler();
	}
}

//connect to the database with defined constants
$dbh = new SafePDO(PDO_DSN, PDO_USER, PDO_PASSWORD);

?>

Just thought i'd add in and give an explanation as to why you need to use 127.0.0.1
if you have a different port number.

The mysql libraries will automatically use Unix sockets if the host of "localhost"
is used. To force TCP/IP you need to set an IP address.

If you are using PHP 5.4 and later, you can no longer use persistent connections
when you have your own database class that derives from the native POD object.
If you do, you will get segmentation faults during the PHP process shutdown.

Please see this bug report:

Same as before.

Note that you can specify a port number with "port=####", but this port number will
be ignored if hte host is localhost. If you want to connect to a local port other
than the default, use host=127.0.0.1 instead of localhost.

Transactions and auto-commit:

Now that you have connected via PDO, you must understand how PDO manages transactions before
you start iussuing queries. If you have never encountered transactions before, they offer
4 major features: Atomicity, Consistency, Isolation and Durability (ACID).

In laymen's terms, any work carried out in a transaction, even if it is carried
out in stages, is guaranteed to be applied to the database safely, and without
interference from other connections, when it is comitted.

Transactional work can also be automatically undone at your request (provided
you have not already comitted it), which makes error handling your scripts easier.

Transactions are typically implemented by "saving-up" your batch of changes to be
applied all at once, this has the nice side effect of drastically improving the 
efficiency of those updates.

In other words, transactions can make your scripts faster and potentionally
more robust (you still need to use them correctly to reap that benefit).

Unfortunately, not every DB supports transactions, so PDO needs to run in what
is known as "auto-commit" mode when you first open the connection. Auto-commit
mode means that every query that you run has its own implicit transaction, if
the database supports it or no transaction if the db does not support transactions.

If you need a transaction, you must use the PDO::beginTransaction() method to
initiate one. If the underlying driver does not support transactions, a PDOException
will be thrown (regardless of your error handling settings: this is always a serious
error condition).

Once you are in a transaction, you may use PDO::commit() or PDO::rollBack() to
finish it, depending on the success of the code you run during the transaction.

Warning: PDO only checks for transaction capabilities on driver level. If certain
runtime conditions mean that transactions are unavailable, PDO::beginTransaction()
will still return TRUE without error if the database server accepts the request 
to start a transaction.

An example of this would be trying to use transactions on MyISAM tables on 
a MySQL database.

When the script ends or when a connection is about to be closed, if you have an
outstanding transaction, PDO will automatically roll it back. This is a safety
measure to help avoid inconsistency in the cases where the script terminates
unexpectedly - if you did not explicitly commit the transaction, then it assumed
that something went awry, so the rollback is performed for the safety of your data.

Warning: The automatic rollback only happens if you initiate the transaction via
PDO::beginTransaction(). If you manually issue a query that begins a transaction
PDO has no way of knowing about it and thus cannot roll it back if something bad
happens.

Example #1 Executing a batch in a transaction

In the following example, let us assume that we are creating a set of entries for a new
employee, who has been assigned an ID number of 23. In addition to entering the basic
data for that person, we also need to record their salary. It is pretty simple to make
two separate updates, but by enclosing them within the PDO::beginTransaction()
and PDO::commit() calls, we are guaranteeing that no one else will be able to see those
changes until they are complete.

If something goes wrong, the catch block rolls back all changes made since the transaction
was started, and then prints out an error message.

<?php
try {
	$dbh = new PDO('odbc:SAMPLE', 'db2inst1', 'ibmdb2',
		array(PDO::ATTR_PERSISTENT => true));
	echo "Connected\n";

} catch (Exception $e) {
	die("Unable to connect: " . $e->getMessage());
}

try {
	$dbh->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

	$dbh->beginTransaction();
	$dbh->exec("insert into staff (id, first, last) values (23, 'joe', 'Bloggs')");
	$dbh->exec("insert into salarychange (id, amount, changedate)
		values (23, 50000, NOW())");
	$dbh->commit();
} catch (Exception $e) {
	$dbh->rollBack();
	echo "Failed: " . $e->getMessage();
}
?>

You are not limited to making updates in a transaction, you can also issue complex queries
to extract data, and possibly use that information to build up more updates and queries;
while the transaction is active, you are guaranteed that no one else can make changes
while you are in the middle of your work. For further reading on transactions, refer
to the documentation provided by your database server.

Typically, data definition language clauses (DDL) will trigger the database engine to automatically
commit:

http://dev.mysql.com/doc/refman/5.0/en/implicit-commit.html

Many other databases (e.g. Oracle) will implicitly commit before and after running DDL statements.

13.3.3 Statements That Cause an Implicit Commit:

The statements listed in this section (and any synonyms for them) implicitly end any transaction
active in the current session, as if you had done a COMMIT before executing the statement.

Most of these statements also cause an implicit commit after executing. The intent is to handle
each such statement in its own special transaction because it cannot be rolled back anyway.
Transaction-control and locking statements are exceptions: If an implicit commit occurs before
execution, another does not occur after.

Data definition language (DDL) statements that define or modify database objects:

ALTER DATABASE ... UPGRADE DATA DIRECTORY NAME, ALTER EVENT, ALTER PROCEDURE, ALTER
SERVER, ALTER TABLE, ALTER VIEW, CREATE DATABASE, CREATE EVENT, CREATE INDEX, CREATE
PROCEDURE, CREATE SERVER, CREATE TABLE, CREATE TRIGGER, CREATE VIEW, DROP DATABASE,
DROP EVENT, DROP INDEX, DROP PROCEDURE, DROP SERVER, DROP TABLE, DROP TRIGGER,
DROP VIEW, INSTALL PLUGIN (as of MySQL 5.7.6), RENAME TABLE, TRUNCATE TABLE,
UNINSTALL PLUGIN (as of MySQL 5.7.6)

ALTER FUNCTION, CREATE FUNCTION and DROP FUNCTION also cause an implicit commit
when used with stored functions, but not with user-defined functions. (ALTER
FUNCTION can only be used with stored functions.)

CREATE TABLE and DROP TABLE statements do not commit a transaction if the TEMPORARY
keyword is used. (This does not apply to other operations on temporary tables such as
ALTER TABLE and CREATE INDEX, which do cause a commit).

However, although no implicit commit occurs, neither can the statement be rolled back,
which means that the use of such statements causes transactional atomicity to be 
violated. For example, if you use CREATE TEMPORARY TABLE and then roll back the transaction,
the table remains in existence.

The CREATE TABLE statement in InnoDB is processed as a single transaction. This means that
a ROLLBACK from the user does not undo CREATE TABLE statements the user made during that
transaction.

CREATE TABLE ... SELECT causes an implicit commit before and after the statement is executed
when you are creating nontemporary tables. (No commit occurs for CREATE TEMPORARY TABLE ...
SELECT). This is to prevent an issue during replication where the table could be created
on the master after a rollback, but fail to be recorded in the binary log, and therefore
not replicated to the slave.

Statements that implicitly use or modify tables in the mysql database:

ALTER USER, CREATE USER, DROP USER, GRANT, RENAME USER, REVOKE, SET PASSWORD.

Transaction-control and locking statements. BEGIN, LOCK TABLES, SET autocommit = 1
(if the value is not already 1), START TRANSACTION, UNLOCK TABLES.

UNLOCK TABLES commits a transaction only if any tables currently have been locked
with LOCK TABLES to acquire nontransactional table locks. A commit does not occur
for UNLOCK TABLES following FLUSH TABLES WITH READ LOCK because the latter statement
does not acquire table-level locks.

Transactions cannot be nested. This is a consequence of the implicit commit performed
for any current transaction when you issue a START TRANSACTION statement or one
of its synonyms.

Statements that cause an implicit commit cannot be used in an XA transaction while the
transaction is in ACTIVE state.

The BEGIN statement differs from the use of the BEGIN keyword that starts a BEGIN ... END
compound statement. The latter does not cause an implicit commit. See section 13.6.1,
"BEGIN ... END Compound-Statement Syntax".

Data loading statements : LOAD DATA INFILE, LOAD DATA INFILE causes an implicit commit only 
for tables using the NDB storage engine.

Administrative statements: ANALYZE TABLE, CACHE INDEX, CHECK TABLE, FLUSH, LOAD INDEX INTO CACHE,
OPTIMIZE TABLE, REPAIR TABLE, RESET

Replication control statements: START SLAVE, STOP SLAVE, RESET SLAVE, CHANGE MASTER TO.

Prepared statements and stored procedures:

Many of the more mature databases support the concept of prepared statements. What are they?
They can be thought of as a kind of compiled template for the SQL that an application wants
to run, that can be customized using variable parameters. Prepared statements offer two
major benefits:

The query only needs to be parsed (or prepared) once, but can be executed multiple times
with the same or different parameters. When the query is prepared, the database will analyze,
compile and optimize its plan for executing the query.

For complex queries this process can take up enough time that it will noticably slow down
an application if there is a need to repeat the same query many times with different parameters.
By using a prepared statement the application avoids repeating the analyze/compile/optimize cycle.

This means that prepared statements use fewer resources and thus run faster.

The parameters to prepared statements do not need to be quoted; the driver automatically handles
this. If an application exclusively uses prepared statements, the developer can be sure that no
SQL injection will occur (however, if other portions of the query are being built up with unescaped
input, SQL injection is still possible).

Prepared statements are so useful that they are the only feature that PDO will emulate for drivers
that do not support them. This ensures that an application will be able to use the same data 
access paradigm regardless of the capabilities of the database.

Example #1 Repeated inserts using prepared statements

This example performs an INSERT query by substituting a name and a value for the named placeholders

<?php
$stmt = $dbh->prepare("INSERT INTO REGISTRY (name, value) VALUES (:name, :value)");
$stmt->bindParam(':name', $name);
$stmt->bindParam(':value', $value);

//insert one row
$name = 'one';
$value = 1;
$stmt->execute();

//insert another row with different values
$name = 'two';
$value = 2;
$stmt->execute();
?>

Example #2 Repeated inserts using prepared statements

This example performs an INSERT query by substituting a name and a value for the positional
? placeholders.

<?php
$stmt = $dbh->prepare("INSERT INTO REGISTRY (name, value) VALUES (?, ?)");
$stmt->bindParam(1, $name);
$stmt->bindParam(2, $value);

//insert one row
$name = 'one';
$value = 1;
$stmt->execute();

//insert another row with different values
$name = 'two';
$value = 2;
$stmt->execute();
?>

Example #3 Fetching data using prepared statements

This example fetches data based on a key value supplied by a form. The user input is automatically
quoted, so there is no risk of a SQL injection attack.

<?php
$stmt = $dbh->prepare("SELECT * FROM REGISTRY where name = ?");
if ($stmt->execute(array($_GET['name']))) {
	while ($row = $stmt->fetch()) {
		print_r($row);
	}
}
?>

Example #4 Calling a stored procedure with an output parameter

If the database driver supports it, an application may also bind parameters for output
as well as input. Output parameters are typically used to retrieve values from stored procedures.

Output parameters are slightly more complex to use than input parameters, in that a developer
must know how large a given param might be when they bind it. if the value turns out to be
larger than the size they suggested, an error is raised.

<?php
$stmt = $dbh->prepare("CALL sp_returns_string(?)");
$stmt->bindParam(1, $return_value, PDO::PARAM_STR, 4000);

//Call the stored procedure
$stmt->execute();

print "procedure returned $return_value\n";
?>

Example #5 Calling a stored procedure with an input/output parameter

Developers may also specify parameters that hold values both input and output; the syntax
is similar to output parameters. in this next example, the string 'hello' is passed
into the stored procedure, and when it returns, hello is replaced with the return
value of hte procedure.

<?php
$stmt = $dbh->prepare("CALL sp_takes_string_returns_string(?)");
$value = 'hello';
$stmt->bindParam(1, $value, PDO::PARAM_STR|PDO::PARAM_INPUT_OUTPUT, 4000);

//call the stored procedure
$stmt->execute();

print "procedure returned $value\n";
?>

Example #6 Invalid use of placeholder

<?php
$stmt = $dbh->prepare("SELECT * FROM REGISTRY where name LIKE '%?%'");
$stmt->execute(array($_GET['name']));

//placeholder must be used in the place of the whole vvalue
$stmt = $dbh->prepare("SELECT * FROM REGISTRY where name LIKE ?");
$stmt->execute(array("%$_GET[name]%"));
?>

Note that when using name parameters with bindParam, the name itself, cannot contain a dash '-'.

example:

<?php
$stmt = $dbh->prepare("INSERT INTO user (firstname, surname) VALUES (:f-name, :s-name)");
$stmt->bindParam(':f-name', 'John');
$stmt->bindParam(':s-name', 'Smith');
$stmt->execute();
?>

The dashes in 'f-name' and 's-name' should be replaced with an underscore or not dahs at all.

Bug #43130 bind parameter cannot contain dashes

Desc:

Parameters to bind in a prepared statement cannot contain dashes (-) in the name. It probably
assumes that "-value" should be another variable.

Reproduce code:

$db = new PDO("mysql:host=localhost;dbname=testing", 'xxxx', 'xxxx');
$stmt = $db->prepare("SELECT id FROM testing WHERE id=:id-value");
$stmt->bindParam('id-value', $id);
$id = 1;
$stmt->execute();
var_dump($stmt->fetch());

Expected result:

array(2) {["id"]=> string(1) "1" [0]=> string(1) "1" }

Actual result:

Warning: PDOStatement::execute() [function.PDOStatement-execute]: SQLSTATE[HY093]: Invalid
parameter number: parameter was not defined in C:\htdocs\test.php on line 8
bool (false)

Errors and error handling:

PDO offers you a choice of 3 different error handling strategies, to fit your style 
of application development.

PDO::ERRMODE_SILENT:

This is the default mode. PDO will simply set the error code for you to inspect using
the PDO::errorCode() and PDO::errorInfo() methods on both the statement and database
objects; if the error resulted from a call on a statement object, you would invoke the
PDOStatement::errorCode() or PDOStatement::errorInfo() method on that object.

If the error resulted from a call on the database object, you would invoke those methods
on the database object instead.

PDO::ERRMODE_WARNING:

In addition to setting the error code, PDO will emit a traditional E_WARNING message.
This setting is useful during debugging/testing, if you just want to see what problems
occurred without interruppting the flow of the app.

PDO::ERRMODE_EXCEPTION:

In addition to setting the error code, PDO will throw a PDOException and set its properties
to reflect the error code and error information. This setting is also useful during debugging,
as it will effectively "blow up" the script at the point of the error, very quickly pointing
a finger at potentional problem areas in your code (remember: transactions are automatically
rolled back if the exception causes the script to terminate).

Exception mode is also useful because you can structure your error handling more clearly 
than with traditional PHP-style warning, and with less code/nesting than by running in
silent mode and explicitly checking the return value of each database call.

See Exceptions for more information about Exceptions in PHP.

PDO standardizes on using SQL-92 SQLSTATE error code strings; individual PDO drivers
are responsible for mapping their native codes to the appropiate SQLSTATE codes. The
PDO::errorCode() method returns a single SQLSTATE code. If you need more specific
information about an error, PDO also offers an PDO::errorInfo() method which returns
an array containing the SQLSTATE code, the driver specific error code and driver
specific error string.

Example #1 Create a PDO instance and set the error mode

<?php
$dsn = 'mysql:dbname=testdb;host=127.0.0.1';
$user = 'dbuser';
$password = 'dbpass';

try {
	$dbh = new PDO($dsn, $user, $password);
	$dbh->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
} catch (PDOException $e) {
	echo 'Connection failed: ' . $e->getMessage();
}

?>

Note: PDO::__consturct() will always throw a PDOException if the connection fails 
regardless of which PDO::ATTR_ERRMODE is currently set. Uncaught exceptions
are fatal.

Example #2 Create a PDO instance and set the error mode from the constructor

<?php
$dsn = 'mysql:dbname=test;host=127.0.0.1';
$user = 'googleguy';
$password = 'googleguy';

// Using try/catch around the constructor is still valid even though we set the ERRMODE to WARNING
// since PDO::__construct will always throw a PDOException if the connection fails

try {
	$dbh = new PDO($dsn, $user, $password, array(PDO::ATTR_ERRMODE => PDO::ERRMODE_WARNING));
} catch (PDOException $e) {
	echo 'Connection failed: ' . $e->getMessage();
	exit;
}

//This will cause PDO to throw an error of level E_WARNING instead of an exception (when the table does not exist)
$dbh->query("SELECT wrongcolumn FROM wrongtable");
?>

The above will output:

Warning: PDO::query(): SQLSTATE[42S02]: Base table or view not found: 1146 Table 'test.wrongtable'
does not exist in /tmp/pdo_test.php on line 18

Setting the PDO::ATTR_ERRMODE to PDO::ERRMODE_EXCEPTION applies to both PDO and PDO::PDOStatement objects.
Also, exceptions are thrown by: PDO::beginTransaction(), PDO::prepare(), PDOStatement::execute(),
PDO::commit(), PDOStatement::fetch(), PDOStatement::fetchAll() and so on.

Some of these are specified in their respective documentations as to return 'false' in case of an
error.

Large Objects (LOBs):

At some point in your application, you might find that you need to store "large" data in
your database. Large typically means "around 4kb or more", although some databases can
happily handle up to 32kb before data becomes "large".

Large objects can be either textual or binary in nature. PDO allows you to work with this
large data type by using the PDO::PARAM_LOB type code in your PDOStatement::bindParam()
or PDOStatement::bindColumn() calls. PDO::PARAM_LOB tells PDO to map the data as a 
stream, so that you can manipulate it using the PHP Streams API.

Example #1 Displaying an image from a database

This example binds the LOB into the variable named $lob and then sends it to the browser
using fpassthru(). Since the LOB is represented as a stream, functions such as 
fgets(), fread() and stream_get_contents() can be used on it.

<?php
$db = new PDO('odbc:SAMPLE', 'db2inst1', 'ibmdb2');
$stmt = $db->prepare("select contenttype, imagedata from images where id=?");
$stmt->execute(array($_GET['id']));
$stmt->bindColumn(1, $type, PDO::PARAM_STR, 256);
$stmt->bindColumn(2, $lob, PDO::PARAM_LOB);
$stmt->fetch(PDO::FETCH_BOUND);

header("Content-Type: $type");
fpassthru($lob);
?>

Example #2 inserting an image into a Database

This example opens up a file and passes the file handle to PDO to insert
it as a LOB. PDO will do its best to get the contents of the file up to
the database in the most efficient manner possible.

<?php
$db = new PDO('odbc:SAMPLE', 'db2inst1', 'ibmdb2');
$stmt = $db->prepare("insert into images (id, contenttype, imagedata) values (?, ?, ?)");
$id = get_new_id(); //Some function to allocate a new ID

//Assume that we are running as part of a file upload form
// You can find more information in the PHP documentation

$fp = fopen($_FILES['file']['tmp_name'], 'rb');

$stmt->bindParam(1, $id);
$stmt->bindParam(2, $_FILES['file']['type']);
$stmt->bindParam(3, $fp, PDO::PARAM_LOB);

$db->beginTransaction();
$stmt->execute();
$db->commit();
?>

Example #3 Inserting an image into a database: Oracle

Oracle requires a slightly different syntax for inserting a lob from a file.
It is also essential that you perform the insert under a transaction, otherwise
your newly inserted LOB will be commited with a zero-length as part of the implicit
commit that happens when the query is executed:

<?php
$db = new PDO('oci:', 'scott', 'tiger');
$stmt = $db->prepare("insert into images (id, contenttype, imagedata) " .
"VALUES (?, ?, EMPTY_BLOB()) RETURNING imagedata INTO ?");
$id = get_new_id(); // Some function to allocate a new ID

//assume that we are running as part of a file upload form
// You can find more information in the PHP documentation

$fp = fopen($_FILES['file']['tmp_name'], 'rb');

$stmt->bindParam(1, $id);
$stmt->bindParam(2, $_FILES['file']['type']);
$stmt->bindParam(3, $fp, PDO::PARAM_LOB);

$db->beginTransaction();
$stmt->execute();
$db->commit();
?>

There seems to be a bug that affects example 1 above. PDO::PARAM_LOB when used with pdo::bindColumn()
is supposed to return a stream but it returns a string. Passing this string to fpassthru() then triggers
an error with the message 'supplied argument is not a valid stream resource'. This has been reported
in bug #40913. The work around is to do the following:

<?php
$stmt = $db->prepare("select contenttype, imagedata from images where id=?");
$stmt->execute(array($_GET['id']));
$stmt->bindColumn(1, $type, PDO::PARAM_STR, 256);
$stmt->bindColumn(2, $lob, PDO::PARAM_LOB);
$stmt->fetch(PDO::FETCH_BOUND);

header("Content-Type: $type");
echo($lob);
?>

Since the browser is expecting an image after the call to header() writing the string
representation of the binary output with echo() has the same effect as calling
fpassthru().

PDOStatement's methods bindParam and bindValue also work with strings, as in:

<?php
	$data = file_get_contents($filename);
	$stmt->bindValue(1, $data, PDO::PARAM_LOB);
?>

This was the only way i could get it to work with PostgreSQL.

A big gotcha exists for Oracle users.

You have to save CLOB objects using PDO::PARAM_STR, not PDO::PARAM_LOB

But you MUST send the 4th argument, usually strlen($subject) or you get a LONG error.

I spend a lot of time trying to get this to work, but no matter what i did PDO corrupted my data.

I finally discovered that i had been using:

$pdo->exec('SET CHARACTER SET utf8');

in the TRY part of my connection script.

This off course does not work when you feed binary input to PDO using the parameter lob.

PDO::beginTransaction:

Initiates a transaction

Desc:

public bool PDO::beginTransaction()

Turns off autocommit mode. While autocommit mode is turned off, changes made to the database
via the PDO object instance are not committed until you end the transaction by calling PDO::commit().

Calling PDO::rollBack() will roll back all changes to the Database and return the connection to
autocommit mode.

Some databases, including MySQL, automatically issue an implicit COMMIT when a database language
(DDL) statement such as DROP TABLE or CREATE TABLE is issued within a transaction. The implicit
COMMIT will prevent you from rolling back any other changes within the transaction boundary.

Returns:

Returns TRUE on success or FALSE on failure.

Errors/Exceptions:

Throws a PDOException if there is already a transaction started or the driver
does not support transactions.

Note: An exception is raised even when the PDO::ATTR_ERRMODE attribute is not
PDO::ERRMODE_EXCEPTION

Examples:

Example #1 Roll back a transaction

The following example begins a transaction and issues two statements that modify the
database before rolling back the changes. On MySQL, however, the DROP TABLE statement
automatically commits the transaction so that none of the changes in the transaction
are rolled back.

<?php
//Begin a transaction, turning off autocommit
$dbh->beginTransaction();

//Change the DB schema and data
$sth = $dbh->exec("DROP TABLE fruit");
$sth = $dbh->exec("UPDATE dessert
	SET name = 'hamburger'");

//Recognize mistake and roll back changes
$dbh->rollBack();

//Database connection is now back in autocommit mode
?>

The nested transaction example here is great, but it is missing a key piece of the puzzle.
Commits will commit everything, i only wanted commits to actually commit when the outermost
commit has been completed. This can be done in InnoDB with savepoints.

<?php

class Database extends PDO
{
	protected $transactionCount = 0;

	public function beginTransaction()
	{
		if(!$this->transactionCounter++) {
			return parent::beginTransaction();
		}
		$this->exec('SAVEPOINT trans'.$this->transactionCounter);
		return $this->transactionCounter >= 0;
	}

	public function commit()
	{
		if(!--$this->transactionCounter) {
			return parent::commit();
		}

		return $this->transactionCounter >= 0;
	}

	public function rollback()
	{
		if (--$this->transactionCounter) {
			$this->exec('ROLLBACK TO trans'.($this->transactionCounter + 1));
			return true;
		}
		return parent::rollback();
	}
}

You can generate problems with nested beginTransaction and commit calls.

Example:

beginTransaction()
do important stuff
call method
	beginTransaction()
	basic stuff 1
	basic stuff 2
	commit()
do most important stuff
commit()

Won't work and is dangerous since you could close your transaction too early
with the nested commit()

There is no need to mess you code and pass like a bool which indicate if transaction
is already running. You could just overload the beginTransaction() and commit() 
in your PDO wrapper like this:

<?php
class Database extends \\PDO
{
	protected $transactionCounter = 0;
	function beginTransaction()
	{
		if(!$this->transactionCounter++)
			return parent::beginTransaction();
		return $this->transactionCounter >= 0;
	}

	function commit()
	{
		if(!--$this->transactionCounter)
			return parent::commit();
		return $this->transactionCounter >= 0;
	}

	function rollback()
	{
		if($this->transactionCounter >= 0)
		{
			$this->transactionCounter = 0;
			return parent::rollback();
		}
		$this->transactionCounter = 0;
		return false;
	}
//....
}
?>

If you are using PDO::SQLITE and need to support a high level of concurrency with locking, try
preparing your statements prior to calling beginTransaction() and you may also need to call 
closeCursor() on SELECT statements to prevent the driver from thinking that there are open
transactions.

Here is an example (Windows, PHP Version 5.2.8). We test this by opening 2 browser tabs to
this script and running them at the same time. If we put the beginTransaction before the 
prepare, the second browser tab would hit the catch block and the commit would throw another
PDOException indicating that transactions were still open.

<?php
$conn = new PDO('sqlite:C:\path\to\file.sqlite');
$stmt = $conn->prepare('INSERT INTO my_table(my_id, my_value) VALUES(?, ?)');
$waiting = true; //set a loop condition to test for
while($waiting) {
	try {
		$conn->beginTransaction();
		for($i=0; $i < 10; $i++)
		{
			$stmt->bindValue(1, $i, PDO::PARAM_INT);
			$stmt->bindValue(2, 'TEST', PDO::PARAM_STR);
			$stmt->execute();
			sleep(1);
		}
		$conn->commit();
		$waiting = false;
	} catch(PDOException $e) {
		if(stripos($e->getMessage(), 'DATABASE IS LOCKED') !== false) {
			//This should be specific to SQLite, Sleep for 0.25 sec
			// nad try again. We do have to commit the open transaction
			// first though
			$conn->commit();
			usleep(250000);
		} else {
			$conn->rollBack();
			throw $e;
		}
	}
}
?>

Tho, you can also extend the PDO Class and hold a private flag to check if a transaction
is already started.

class MyPDO extends PDO {
	protected $hasActiveTransaction = false;

	function beginTransaction() {
		if ($this->hasActiveTransaction) {
			return false;
		} else {
			$this->hasActiveTransaction = parent::beginTransaction();
			return $this->hasActiveTransaction;
		}
	}

	function commit() {
		parent::commit();
		$this->hasActiveTransaction = false;
	}

	function rollback() {
		parent::rollback();
		$this->hasActiveTransaction	 = false;
	}
}

Be aware that you also can not use TRUNCATE TABLE as this statement will trigger a commit
jsut like CREATE TABLE or DROP TABLE

It is best to only use SELECT, UPDATE and DELETE within a transaction, all other statements
may cause commits thus breaking the atomicity of your transactions and their ability to
rollback.

Obviously you can use DELETE FROM <table> instead of TRUNCATE TABLE but be aware that there
are differences between both statements, for example TRUNCATE resets the auto_increment
while DELETE does not.

With Oracle, any structure statement will do an implicit commit.

So: ALTER TABLE "my_table" DROP COLUMN "my_column";
Cannot be rollbacked

Ok, i am finding a solution for "NESTED" transactions in MySQL, and as you know
in the MYSQL documentation it says that it is not possible to have transactions
within transactions.

I was trying to use the Database class proposed here in http://php.net/manual/en/pdo.begintransaction.php
but unfortunately that is wrong for many things related to the control flow thati h ave been solving
with the following code:

<?php

class TransactionController extends \\PDO {
	public static $warn_rollback_was_thrown = false;
	public static $transaction_rollbacked = false;
	public function __construct()
	{
		parent::__construct(... connection info ...);
	}
	public static $nest = 0;
	public function reset()
	{
		TransactionController::$transaction_rollbacked = false;
		TransactionController::$warn_rollback_was_thrown = false;
		TransactionController::$nest = 0;
	}

	function beginTransaction()
	{
		$result = null;
		if (TransactionController::$nest == 0) {
			$this->reset();
			$result = $this->beginTransaction();
		}
		TransactionController::$nest++;
		return $result;
	}

	public function commit()
	{
		$result = null;

		if (TransactionController::$nest == 0 && 
				!TransactionController::$transaction_rollbacked &&
				!TransactionController::$warn_rollback_was_thrown) {
					$result = parent::commit();
				}
				TransactionController::$nest--;
				return $result;
	}

	public function rollback()
	{
		$result = null;
		if (TransactionController::$nest >= 0) {
			if (TransactionController::$nest == 0) {
				$result = parent::rollback();
				TransactionController::$transaction_rollbacked = true;
			}
			else {
				TransactionController::$warn_rollback_was_thrown = true;
			}
		}
		TransactionController::$nest--;
		return $result;
	}

	public function transactionFailed()
	{
		return TransactionController::$warn_rollback_was_thrown == true;
	}

	//To force rollback you can only do it from $nest = 0
	public function forceRollback()
	{
		if (TransactionController::$nest == 0) {
			throws new \PDOException();
		}
	}
}
?>

PDO::commit:

Commits a transaction

Desc:

public bool PDO::commit()

Commits a transaction, returning the database connection to autocommit mode until the next call
to PDO::beginTransaction() starts a new transaction.

Return:

Returns TRUE on success or FALSE on failure.

Errors/Exceptions:

Throws a PDOException if there is no active transaction.

Note: An exception is raised even when the PDO::ATTR_ERRMODE attribute is not PDO::ERRMODE_EXCEPTION

Examples:

Example #1 Comitting a basic transaction

<?php
//begin a transaction, turning off autocommit
$dbh->beginTransaction();

//Insert multiple records on all-or-nothing basis
$sql = 'INSERT INTO fruit
	(name, colour, calories)
	VALUES (?, ?, ?)';

$sth = $dbh->prepare($sql);

foreach ($fruits as $fruit) {
	$sth->execute(array(
		$fruit->name,
		$fruit->colour,
		$fruit->calories,
	));
}

//Commit the changes
$dbh->commit();

//Database connection is now back in autocommit mode
?>

Example #2 Comitting a DDL transaction

<?php
//begin a transaction turning off autocommit
$dbh->beingTransaction();

//Change the db schema
$sth = $dbh->exec("DROP TABLE fruit");

//Commit the changes
$dbh->commit();

//Database connection is now back in autocommit mode
?>

note: Not all databases will allow transactions to operate on DDL statements:
Some will generate errors, whereas others (including MySQL) will automatically
commit the transaction after hte first DDL statement has been encountered

Keep in mind the following bug. It means you cannot rely on commit() return value
while using MySQL.

Bug #66528 NoPDOException or errorCode if database becomes unavailable before PDO::commit

Desc:

If the database resource (e.g the MySQL-Server) becomes unavailable before a PDO::commit(),
it emits a warning only, e.g, "MySQL server has gone away" or "Error reading result set's header"
and code execution proceeds.

Additionally, neither PDO::errorCode() nor PDO::errorInfo() are set. Inspected just after the
warnings both suggest that everything is perfectly fine. This is unacceptable.

Since warnings will only get logged in production mode and code execution proceeds
without know there actually was an error (PDO::commit() returns ture regardless).

That along with the other bug of PDO::commit(), makes it impossible to verify if a PDO
commit succeeded or not.

Please note that using PDO::query('commit'); instead of PDO::commit() actually respects
PDO::ATTR_ERRMODE and behaves in a more proper way, e.g, if set to PDO::ERRMODE_EXCEPTION
actually throws a PDOException and PDO::errorCode/errorInfo will be set accordingly.

Warnings though will show regardless (When you are on it, fix that as well please).

This is the only workaround in current implementations to reliably use transactions
with PDOMySQL.

A severe interupptiong like connection loss to db should be treated with the same error
handling that is used when establishing the connection. better still, just do it like
PDO::query, honor PDO::ATTR_ERRMODE or throw a PDOException per defualt.

No matter what will be implemented, PDO::errorCode and PDO::errorInfo must be fixed
so they reflect errors that occur when using PDO::commit().

Test script:

<?php
$dbh = new PDO('mysql:dbname=test;host=127.0.0.1;charset=UTF8', 'testuser', '');
$dbh->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

//prepare table for test
$dbh->query('DROP TABLE IF EXISTS importantdata');
$dbh->query('create table test.importantdata (a int) engine=innodb');

try {
	$dbh->beginTransaction();
	$dbh->query('insert into importantdata (a) VALUES (1), (2)');

	sleep(20); //Shut down the mysql server

	$dbh->commit();
} catch (PDOException $e) {
	exit($e->getMessage());
}
print_r($dbh->errorInfo());
echo 'I should never get here';
?>

Expected result:

"SQLSTATE[HY000]: General error: 2006 MySQL Server ahs gone away"
[... Script executon stopped]

Actual result:

Warning: PDO::commit(): MySQL server has gone away in /tmp/test.php
on line 16

Warning: PDO::commit(): Error reading result set's header in /tmp/test.php
on line 16
Array
(
	[0] => 00000
	[1] =>
	[2] =>
)

I should never get here
[... Script execution procceeds]

PDO::__construct:

PDO::__construct - Creates a PDO instance representing a connection to a database

Desc:

public PDO::__construct ( string $dsn [, string $username [, string $password [, array $options ]]] )

Creates a PDO instance to represent a connection to the requested db.

Params:

dsn: The Data Source Name, or DSN, contains the information required to connect to the DB.

In general, a DSN consists of the PDO driver name, followed by a colon, followed by the PDO driver-specific
connection syntax. Further information is available from the PDO driver-specific documentation.

The dsn parameter supports three different methods of specifying the arguments required to create
a database connection:

Driver invocation:

dsn contains the full DSN.

URI invocation:

dsn consists of uri: followed by a URI that defines the location of a file containing the
DNS string. The URI can specify a local file or a remote url:

uri:file:///path/to/dsnfile

Aliasing:

dns consists of a name name that maps to pdo.dsn.name in php.ini defining the DNS string.

note: The alias must be defined in php.ini, and not .htaccess or httpd.conf

username:

The user name for the DSN string. This parameter is optional for some PDO drivers.

password:

The password for the DSN string. This parameter is optional for some PDO drivers.

options:

A key=>value array of driver-specific connection options.

Returns:

Returns a PDO object on success.

Errors/Exceptions:

PDO::__construct() throws a PDOException if the attempt to connect to the requested
database fails

Examples:

Example #1 Create a PDO instance via driver invocation

<?php
//Connect to a MySQL DB using driver invocation
$dsn = 'mysql:dbname=testdb;host=127.0.0.1';
$user = 'dbuser';
$password = 'dbpass';

try {
	$dbh = new PDO($dsn, $user, $password);
} catch (PDOException $e) {
	echo 'Connection failed: ' . $e->getMessage();
}

?>

Example #2 Create a PDO instance via URI invocation

THe following examples assume that hte file /usr/local/dbconnect exists with file
premissions that enable PHP to read the file. The file contains the PDO DSN
to connect to a DB2 database through the PDO_ODBC driver:

odbc:DSN=SAMPLE;UID=john;PWD=mypass

The PHP script can then create a database connection by simply passing the uri: parameter
and pointing to the file URI:

<?php
//Connect to an ODBC database using driver invocation
$dsn = 'uri:file:///usr/local/dbconnect';
$user = '';
$password = '';

try {
	$dbh = new PDO($dsn, $user, $password);
} catch (PDOException $e) {
	echo 'Connection faild: ' . $e->getMessage();
}

?>

Example #3 Create a PDO instance using an alias

The following example assumes that php.ini contains the following entry to enable
a connection to a MySQL database using only the alias mydb:

[PDO]
pdo.dsn.mydb="mysql:dbname=testdb;host=localhost"

<?php
//Connect to an ODBC database using an alias
$dsn = 'mydb';
$user = '';
$password = '';

try {
	$dbh = new PDO($dsn, $user, $password);
} catch (PDOException $e) {
	echo 'Connection failed: ' . $e->getMessage();
}

?>

Note:

Before PHP5.3, a class which extends PDO and implements __call magic will always receive
lower case $method

To get UTF-8 charset you can specify that in the DSN

$link = new PDO("mysql:host=localhost;dbname=DB;charset=UTF8");

If you use the UTF-8 encoding, you have to use the fourth parameter:

<?php
$db = new PDO('mysql:host=myhost;dbname=mydb', 'login', 'password', array(PDO::MYSQL_ATTR_INIT_COMMAND => 'SET NAMES
\'UTF8\''));
?>

To connect through unix socket you need to use:

<?php
$dsn = 'mysql:dbname=testdb;unix_socket=/path/to/socket';
?>

You musn't specify host when using socket

To specify a DB connection use the following DSN string:

<?php
$dsn = 'mysql:dbname=testdb;host=127.0.0.1;port=3333';
?>

I would like to point out that in PHP 7.0 in the dsn parameter you cannot use 'host=localhost'
to solve this you can use 'host=127.0.0.1' instead.

Sqlite:

<?php
try{
	$pdo = new PDO('sqlite:example.db');
} catch (PDOException $e) {
	die('DB Error');
}
?>

If 'example.db' does not exist, no exception is thrown but the file 'example.db' is created.

Although not explicitly stated, parameters in the PDO $dsn string may be case-sensitive on
some platforms or drivers.

<?php
//The dbname will not be parsed with incorrect casing:
$pdo = new PDO("mysql:host=hostname;DBName=database", "user", "password");

//The correct dbname is lowercase as displayed in the manual
$pdo = new PDO("mysql:host=hostname;dbname=database", "user", "password");
?>

PDO::errorCode:

PDO::errorCode - Fetch the SQLSTATE associated with the last operation on the database handle

Desc:

public mixed PDO::errorCode()

Return Values:

Returns an SQLSTATE, a five characters aplhanumeric identifier defined in the ANSI SQL-92
standard. Briefly, an SQLSTATE consists of two charaters class value followed by a three
characters subclass value. A class value of 01 indicates a warning and is accompanied
by a return code of SQL_SUCCESS_WITH_INFO.

Class values other than '01', except for the class 'IM', indicates an error. The class
'IM' is specific to warnings and errors that derive from the implementation of PDO
(or perhaps ODBC, if you are using the ODBC driver) itself. The subclass value '000'
in any class indicates that there is no subclass for that SQLSTATE.

PDO::errorCode() only retrieves error codes for operations performed directly
on the database handle. If you create a PDOStatement object through PDO::prepare()
or PDO::query() and invoke an error on the statement handle, PDO::errorCode() will
not reflect that error.

You must call PDOStatement::errorCode() to return the error code for an operation
performed on a particular statement handle.

Returns NULL if no operation has been run on the database handle.

Examples:

Example #1 Retrieving an SQLSTATE code

<?php
//Provoke an error - the BONES table does not exist
$dbh->exec("INSERT INTO bones(skull) VALUES ('lucy')");

echo "\nPDO::errorCode(): ", $dbh->errorCode();
?>

The above example will output:

PDO::errorCode() : 42S02

A list containing all SQL-92 SQLSTATE Return Codes:

Class 			Class Def 				Subclass 			Subclass def

00 		Successful completion 			000 				None

01 		Warning  						000 				None

										001 				Cursor operation conflict

										002 				Disconnect error

										003 				Null value eliminated in set function

										004 				String data, right truncation

										005 				INsufficient item descriptor areas

										006 				Privlege not revoked

										007 				Privlege not granted

										008 				Implicit zero-bit padding

										009 				Search expression too long for information schema

										00A 				Query expression too long for information schema

02 		No Data 						000 				None

07 		Dynamic SQL Error 				000 				None
									
										001 				Using clause does not match dynamic params

										002 				Using clause doesn't match target specifications

										003 				Cursor specification can't be executed

										004 				Using clause required for dynamic params

										005 				Prepared statement not a cursor specification

										006 				Restricted data type attribute violation

										007 				Using clause required for result fields

										008 				Invalid descriptor count

										009 				Invalid descriptor index

08 		Connection Exception 			000 				None
										
										001 				SQL-client unable to establish SQL-connection

										002 				Connection name in use

										003 				Connection does not exist

										004 				SQL-server rejected establishment of SQL-connection

										006 				Connection Failure

										007 				Transaction resolution unknown

0A 		Feature not supported 			000 				None

										001 				Multiple server transactions

21 		Cardinality violation 			000 				None

22 		Data exception 					000 				None

										001 				String data, right truncation

										002 				Null value, no indicator

										003 				Numeric value out of range

										005 				Error in assignment

										007 				Invalid date-time format

										008 				Date-time field overflow

										009 				Invalid time zone displacement value

										011 				Substring error

										012 				Division by zero

										015 				Internal field overflow

										018 				Invalid character value for cast

										019 				Invalid escape char

										021 				Character not in repetoire

										022 				Indicator overflow

										023 				Invalid parameter value

										024 				Unterminated C string

										025 				Invalid escape sequence

										026 				String data, length mismatch

										027 				Trim error

23 		Integrity constraint violation 	000 				None
										
24 		Invalid cursor state 			000 				None

25 		Invalid transaction state 		000 				None

26 		Invalid SQL statement name 		000 				None

27 		Triggered data change violation 000 				None

28 		Invalid authorization spec 		000 				None

2A 		Syntax error or access rule 	000 				None
		violation in direct SQL 
		statement

2B 		Dependent priv desc still exist 000 				None

2C 		Invalid char set name 			000 				None

2D 		Invalid transaction termin. 	000 				None

2E 		Invalid connection name 		000 				None

33 		Invalid SQL descriptor name 	000 				None

34 		Invalid cursor name 			000 				None

35 		Invalid condition number 		000 				None

37 		Syntax error or access rule 	000 				None
		violation in dynamic SQL
		statement

3C 		Ambigious cursor name 			000 				None

3F 		Invalid schema name 			000 				None

40 		Transaction rollback 			000 				None
		
										001 				Serialization failure

										002 				Integrity constraint violation

										003 				Statement completion unknown

42 		Syntax error on access rule 	000 				None
		violation

44 		With check option violation 	000 				None

Use the following Code to let PDO throw Exceptions (PDOException) on Error.

<?PHP
$pdo = new PDO(whatever);
$pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
try {
	$pdo->exec("QUERY WITH SYNTAX ERROR");
} catch (PDOException $e) {
	if ($e->getCode() == '2A000')
		echo "Syntax Error: " . $e->getMessage();
}
?>

PDO::errorInfo:

PDO::errorInfo - Fetch extended error information associated with the last operation
on the database handle.

Desc:

public array PDO::errorInfo()

Return Values:

PDO::errorInfo() returns an array of error information about the last operation performed
by this db handle. The array consists of the following fields:

Element 			Information

0 					SQLSTATE error code (a five char alphanumeric identifier defined in the ANSI SQL standard)

1 					Driver-specific error code.

2 					Driver-specific error message.

Note: If the SQLSTATE error is not set or there is no driver-specific error, the elements following
element 0 will be set to NULL.

PDO::errorInfo() only retrives error information for operations performed directly on the db handle.
If you create a PDOStatement object through PDO::prepare() or PDO::query() and invoke an error on the
statement handle, PDO::errorInfo() will not reflect the error from the statement handle.

You must call PDOStatement::errorInfo() to return the error information for an operation performed
on a particular statement handle.

Examples:

Example #1 Displaying errorInfo() fields for a PDO_ODBC connection to a DB2 database

<?php
//Provoke an error - bogus SQL syntax
$stmt = $dbh->prepare('bogus sql');
if (!$stmt) {
	echo "\nPDO::errorInfo():\n";
	print_r($dbh->errorInfo());
}
?>

The above example will output:

PDO::errorInfo():
Array
(
	[0] => HY000
	[1] => 1
	[2] => near "bogus": syntax error
)

Please note: that this example won't work if PDO::ATTR_EMULATE_PREPARES is true.

You should set it to false:

<?php
$dbh->setAttribute(PDO::ATTR_EMULATE_PREPARES,false);
$stmt = $dbh->prepare('bogus sql');
if (!$stmt) {
	echo "\nPDO::errorInfo():\n";
	print_r($dbh->errorInfo());
}
?>

Here are the error codes for sqlite, straight from their site:

The error codes for SQLite version 3 are unchanged from version 2.
They are as follows:

#define SQLITE_OK 			0 //Successful result
#define SQLITE_ERROR 		1 //SQL error or missing database
#define SQLITE_INTERNAL 	2 //An internal logic error in SQLite

#define SQLITE_PERM 		3 //Access permission denied
#define SQLITE_ABORT 		4 //Callback routine requested an abort
#define SQLITE_BUSY 		5 //The database file is locked

#define SQLITE_LOCKED 		6 //A table in the db is locked
#define SQLITE_NOMEM 		7 //A malloc() failed
#define SQLITE_READONLY 	8 //Attempt to write a readonly database

#define SQLITE_INTERRUPT 	9 //Operation terminated by sqlite_interuppt()
#define SQLITE_IOERR 	   10 //Some kind of disk I/O error occurred
#define SQLITE_CORRUPT 	   11 //The database disk image is malformed

#define SQLITE_NOTFOUND    12 //(internal only) Table or record not found
#define SQLITE_FULL 	   13 //Insertion failed because DB is full

#define SQLITE_CANTOPEN    14 //Unable to open the DB file
#define SQLITE_PROTOCOL    15 //Database lock protocol error
#define SQLITE_EMPTY 	   16 // (internal only) Database table is empty

#define SQLITE_SCHEMA 	   17 //The db schema changed
#define SQLITE_TOOBIG      18 //Too much data for one row of a table
#define SQLITE_CONSTRAINT  19 //abort due to constraint violation
#define SQLITE_MISMATCH    20 //Data type mismatch

#define SQLITE_MISUSE 	   21 //Library used incorrectly
#define SQLITE_NOLFS 	   22 // uses OS features not supported on host
#define SQLITE_AUTH        23 //Authorization denied

#define SQLITE_ROW 		   100 //sqlite_step() has another row ready
#define SQLITE_DONE 	   101 //sqlite_step() has finished executing

Some PDO drivers return a larger array. For example, the SQL Server driver
returns 5 values.

For example:

<?php
$numRows = $db->exec("DELETE FROM [TableName] WHERE ID between 6 and 17");
print_r($db->errorInfo());
?>

Result:

Array
(
	[0] => 00000
	[1] => 0
	[2] => (null) [0] (severity 0) []
	[3] => 0
	[4] => 0
)

PDO::exec:

PDO::exec - Execute an SQL statement and return the number of affected rows

Desc:

public int PDO::exec ( string $statement )

PDO::exec() executes an SQL statement in a single function call, returning the
number of rows affected by the statement.

PDO::exec() does not return results from a SELECT statement. For a SELECT statement
that you only need to issue once during your program, consider issuing PDO::query().
For a statement you need to issue multiple times, prepare a PDOStatement object with
PDO::prepare() and issue the statement with PDOStatement::execute().

Params:

Statement: The SQL statement to prepare and execute.

Data inside the query should be properly escaped.

Return values:

PDO::exec() returns the number of rows that were modified or deleted by the SQL
statement you issued. If no rows were affected, PDO::exec() returns 0.

Warning: This function may return Boolean FALSE, but you may also return a non-Boolean
value which evaluates to FALSE. Please read the section on Booleans for more information.
Use the === operator for testing the return value of this function.


The following example incorrectly relies on the return value of PDO::exec(), wherein a statement
that affected 0 rows results in a call to die():

<?php
$db->exec() or die(print_r($db->errorInfo(), true)); //incorrect
?>

Examples:

Example #1 Issuing a DELETE statement

Count the number of rows deleted by a DELETE statement with no WHERE clause.

<?php
$dbh = new PDO('odbc:sample', 'db2inst1', 'ibmdb2');

//Delete all rows from the FRUIT table
$count = $dbh->exec("DELETE FROM fruit WHERE colour = 'red'");

//Return number of rows that were deleted
print("Deleted $count rows.\n");
?>

The above will output:

Deleted 1 rows.

This function cannot be used with any queries that return results. This includes SELECT,
OPTIMIZE TABLE, etc.

It is worth noting here, that - in addition to the hints given in docs up there - using prepare,
bind and execute provides more benefits than multiply querying a statement: Performance and
security.

If you insert some binary data (e.g. image file) into database using INSERT INTO ... then it
may boost performance of parsing your statement since it is kept small (a few bytes, only, while
the image may be several MiBytes) and there is no need to escape/quote the file's binary
data to become a proper string value.

And, finally and for example, if you want to get a more secure PHP application which isn't
affectable by SQL injection attacks you _have to_ consider using prepare/execute on every
statement containing data (like INSERTs or SELECTs with WHERE-clauses). Separating the
statement code from related data using prepare, bind and execute is best method - fast and
secure. You do not even need to escape/quote/format-check any data.

PDO::eval() might return `false` for some statements (e.g. CREATE TABLE) even if the operation
completed successfully, when using PDO_DBLIB and FreeTDS. So it is not a reliable way of
testing the op status.

PDO::errorInfo() can be used to test the SQLSTATE error code for '00000' (success) and '01000'
(success with warning)

<?php
function execute(PDO $conn, $sql) {
	$affected = $conn->exec($sql);
	if ($affected === false) {
		$err = $conn->errorInfo();
		if ($err[0] === '00000' || $err[0] === '01000') {
			return true;
		}
	}
	return $affected;
}
?>

PDO::errorInfo(): http://php.net/manual/en/pdo.errorinfo.php
List of SQLSTATE Codes: http://www-01.ibm.com/support/knowledgecenter/SSGU8G_11.70.0/com.ibm.sqls.doc/ids_sqs_0809.html

This function does not execute multi_query
to get it see SQLITE_EXEC comments there is a pereg function that get all queries and
execute all then and return the last one

PDO::getAttribute:

PDO::getAttribute - Retrieve a database connection attribute

Desc:

public mixed PDO::getAttribute ( int $attribute )

This function returns the value of a database connection attribute. To retrieve PDOStatement
attributes, refer to PDOStatement::getAttribute()

Note that some database/driver combinations may not support all of the database connection
attributes.

Params:

attribute:

One of the PDO::ATTR_* constants. The constants that apply to db connections are as follows:

PDO::ATTR_AUTOCOMMIT

PDO::ATTR_CASE

PDO::ATTR_CLIENT_VERSION

PDO::ATTR_CONNECTION_STATUS

PDO::ATTR_DRIVER_NAME

PDO::ATTR_ERRMODE

PDO::ATTR_ORACLE_NULLS

PDO::ATTR_PERSISTENT

PDO::ATTR_PREFETCH

PDO::ATTR_SERVER_INFO

PDO::ATTR_SERVER_VERSION

PDO::ATTR_TIMEOUT

Return values:

A successful call returns the value of the requested PDO attribute.
An unsuccessful call returns null.

Examples:

Example #1 Retrieving database connection attributes

<?php
$conn = new PDO('odbc:sample', 'db2inst1', 'ibmdb2');
$attributes = array(
	"AUTOCOMMIT", "ERRMODE", "CASE", "CLIENT_VERSION", "CONNECTION_STATUS",
	"ORACLE_NULLS", "PERSISTENT", "PREFETCH", "SERVER_INFO", "SERVER_VERSION",
	"TIMEOUT"
);

foreach ($attributes as $val) {
	echo "PDO::ATTR_$val: ";
	echo $conn->getAttribute(constant("PDO::ATTR_$val")) . "\n";
}
?>

Oracle does not have the following attributes:

PDO::ATTR_CONNECTION_STATUS: SQLSTATE[IM001]: Driver does not support this function: driver does
not support that attribute
PDO::ATTR_PREFETCH: SQLSTATE[IM001]: Driver does not support this function: driver does not support that attribute
PDO::ATTR_TIMEOUT: SQLSTATE[IM001]: Driver does not support this function: driver does not support that attribute

The rest works fine.

MySQL on version "5.6.29" does not support "PDO::ATTR_PREFETCH" and "PDO::ATTR_TIMEOUT"

PDO::getAvailableDrivers:

PDO::getAvailableDrivers - Return an array of available PDO drivers

Desc:

public static array PDO::getAvailableDrivers()

array pdo_drivers()

This function returns all currently available PDO drivers which can be used
in DSN parameter of PDO::__construct()

Return:

PDO::getAvailableDrivers() returns an array of PDO driver names. If no drivers are available,
it returns an empty array.

Examples:

Example #1 A PDO::getAvailableDrivers() example:

<?php
print_r(PDO::getAvailableDrivers());
?>

The above example will output something similar to:

Array
(
	[0] => mysql
	[1] => sqlite
)

Since the method is static, one practice is using it to check whether a specific
server database driver is available and configured correctly with PDO before 
establishing the connection:

<?php
try {
	if (!in_array("mysql", PDO::getAvailableDrivers(),TRUE))
	{
		throw new PDOException("Cannot work without a proper DB setting");
	}
}
catch (PDOException $pdoEx)
{
	echo "Database Error .. Details :<br /> {$pdoEx->getMessage()}";
}
?>

Or to check for any driver in general:

<?php
	if (empty(PDO::getAvailableDrivers()))
	{
		throw new PDOException("PDO does not support any driver.");
	}
?>

PDO::inTransaction:

PDO::inTransaction - Checks if inside a transaction

Desc:

public bool PDO::inTransaction()

Checks if a transaction is currently active within the driver. This method only
works for database drivers that support transactions.

Returns:

Returns TRUE if a transaction is currently active, and FALSE if not.

On OS X 10.9 with PHP 5.4.10, this function seems to correctly return bool(true) or
bool(false) and not anymore integers

Exceptions regarding existing active transactions were thrown while i was almost
certain sufficient checks were in place. However, I quickly found out that
a strict boolean comparison to PDO::inTransaction() was failing.

var_dump(PDO::inTransaction()); // int(1) || int(0)

Again, as per usual, use === to check validity of the value, not ==

PDO::lastInsertId:

PDO::lastInsertId - Returns the ID of the last inserted row or sequence value

Desc:

public string PDO::lastInsertId ([ string $name = NULL ])

Returns the ID of the last inserted row, or the last value from a sequence object, depending
on the underlying driver. For example, PDO_PGSQL requires you to specify the name of a 
sequence object for the name param.

Note: This method may not return a meaningful or consistent result across different PDO
drivers, because the underlying database may not even support the notion of auto-increment
fields or sequences.

Params:

name: Name of the sequence object from which the ID should be returned.

Return Values:

If a sequence name was not specified for the name parameter, PDO::lastInsertId() returns
a string representing the row ID of the last row that was inserted into the DB.

If a sequence name was specified for the name param, PDO::lastInsertId() returns a string
representing the last value retrieved from the specified sequence object.

If the PDO driver does not support this capability, PDO::lastInsertId() triggers an
IM001 SQLSTATE.

Remember, if you use a transaction you should use lastInsertId BEFORE you commit
otherwise it will return 0.

Beware of lastInsertId() when working with transactions in mysql. The following code
returned 0 instea dof hte insert id:

<?php
try {
	$dbh = new PDO('mysql:host=localhost;dbname=test', 'username', 'password');

	$stmt = $dbh->prepare("INSERT INTO test (name, email) VALUES(?,?)");

	try {
		$dbh->beginTransaction();
		$tmt->execute(array('user', 'user@example.com'));
		$dbh->commit();
		print $dbh->lastInsertId();
	} catch(PDOException $e) {
		$dbh->rollback();
		print "Error!: " . $e->getMessage() . "</br>";
	}
} catch( PDOException $e) {
	print "Error!: " . $e->getMessage() . "</br>";
}
?>

When no exception is thrown, lastInsertId returns 0. However, if lastInsertId is called
before calling commit, the right id is returned.

If you are accessing MSSQL/SQL server 2008 R2 (or higher) from Linux via FreeTDS there
is a slightly neater way of getting the last insert ID than the solution(s) outlined below.

The specific SQL involved is outlined here:

http://msdn.microsoft.com/en-us/library/ms177564.aspx

This topic applies to: SQL Server (starting with 2008), Azure SQL Database

Returns information from, or expression based on, each row affected by an INSERT,
UPDATE, DELETE, or MERGE statement. These results can be returned to the processing
application for use in such things as confirmation messages, archiving and other
such application requirements.

The results can also be inserted into a table or table variable. Additionally, you can
capture the results of an OUTPUT clause in a nested INSERT, UPDATE, DELETE, or MERGE
statement, and insert those results into a target table or view.

Note: An UPDATE, INSERT, or DELETE statement that has an OUTPUT clause will return
rows to the client even if the statement encounters errors and is rolled back.
The result should not be used if any error occurs when you run the statement.

Used in:

DELETE

INSERT

UPDATE

MERGE

Transact-SQL syntax Conventions

Syntax:

<OUTPUT_CLAUSE> ::=
{
	[ OUTPUT <dml_select_list> INTO { @table_variable | output_table } [ ( column_list ) ] ]
	[ OUTPUT <dml_select_list> ]
}
<dml_select_list> ::=
{ <column_name> | scalar_expression } [ [AS] column_alias_identifier ]
	[ ,...n ]

<column_name> ::=
{ DELETED | INSERTED | from_table_name } . { * | column_name }
	| $action

Arguments:

@table_variable

Specifies a table variable that the returned rows are inserted into instead of being returned
to the caller. @table_variable must be declared before the INSERT, UPDATE, DELETE or MERGE
statement.

If column_list is not specified, the table variable must have the same number of columns as the
OUTPUT result set. The exceptions are identity and computed columns, which must be skipped.
If column_list is specified, any omitted columns must either allow null values or have default
values assigned to them.

For more information about table variables, see table (Transact-SQL).

output_table

Specifies a table that the returend rows are inserted into instead of being returned to the
caller. output_table may be a temporary table.

If column_list is not specified, the table must have the same number of columns as the
OUTPUT result set. The exceptions are identity and computed columns. These must be 
skipped. If column_list is specified, any omitted columns must either allow null values
or have default values assigned to them.

output_table cannot:

Have enabled triggers defined on it.

Participate on either side of a FOREIGN KEY constraint

Have CHECK constraints or enabled rules

column_list: Is an optional list of column names on the target table of the INTO clause.
It is analogous to the column list allowed in the INSERT statement.

scalar_expression: Is any combination of symbols and operators that evaluate to a single value.
Aggregate functions are not permitted in scalar_expression.

Any reference to columns in the table being modified must be qualified with the INSERTED
or DELETED prefix.

column_alias_identifier: Is an alternative name used to reference the column name.

DELETED: 

Is a column prefix that specifies the value deleted by the update or delete operation.
Columns prefixed with DELETED reflect the value before the UPDATE, DELETE or
MERGE statements is completed.

DELETED cannot be used with the OUTPUT clause in the INSERT statement.

INSERTED:

Is a column prefix that specifies the value added by the insert or update operation.
Columns prefixed with INSERTED reflect the value after the UPDATE, INSERT, or
MERGE statement is completed but before triggers are executed.

INSERTED cannot be used with the OUTPUT clause in the DELETE statement.

from_table_name:

Is a column prefix that specifies a table included in the FROM clause of a DELETE,
UPDATE or MERGE statement that is used to specify the rows to update or delete.

If the table being modified is also specified in the FROM clause, any reference
to columns in that table must be qualified with the INSERTED or DELETED prefix.

*

Specifies taht all columns affected by the delete, insert or update action will
be returned in the order in which they exist in the table.

For example, OUTPUT DELETED.* in the following DELETE statement returns
all columns deleted from the ShoppingCartItem table:

DELETE Sales.ShoppingCartItem
	OUTPUT DELETED.*;

column_name:

Is an explicit column reference. Any reference to the table being modified
must be correctly qualified by either the INSERTED or the DELETED prefix
as appropiate, for example: INSERTED.column_name.

$action

Is available only for the MERGE statement. Specifies a column of type nvarchar(10)
in the OUTPUT clause in a MERGE statement that returns one of three values
for each row: 'INSERT', 'UPDATE', or 'DELETE', according to the action that
was performed on that row.

Remarks:

The OUTPUT <dml_select_list> clause and the OUTPUT <dml_select_list> INTO {@table_variable | output_table}
clause can be defined in a single INSERT, UPDATE, DELETE or MERGE statement.

Note: Unless specified otherwise, references to the OUTPUT clause refer to both the OUTPUT clause
and the OUTPUT INTO clause.

The OUTPUT clause may be useful to retrieve the value of identity or computed columns after an
INSERT or UPDATE operation.

When a computed column is included in the <dml_select_list>, the corresponding column in the
output table or table variable is not a computed column. The values in the new column are the
values that were computed at the time the statement was executed.

There is no guarantee that the order in which the changes are applied to the table and the
order in which the rows are inserted into the output table or table variable will correspond.

If parameters or variables are modified as part of an UPDATE statement, the OUTPUT clause always
returns the value of the parameter or variable as it was before the statement executed instead
of the modified value.

You can use OUTPUT with an UPDATE or DELETE statement positioned on a cursor that uses
WHERE CURRENT OF syntax.

The OUTPUT clause is not supported in the following statements:

DML statements that reference local partitioned views, distributed partitioned views,
or remote tables.

INSERT statements can contain an EXECUTE statement.

Full-text predicates are not allowed in the OUTPUT clause when the database compability
level is set to 100.

The OUTPUT INTO clause cannot be used to insert into a view, or rowset function.

A user-defined function cannot be created if it contains an OUTPUT INTO clause
that has a table as its target.

To prevent nondeterministic behavior, the OUTPUT clause cannot contain the following
references:

Subqueries or user-defined functions that perform user or system data access, or are
assumed to perform such access. User-defined functions are assumed to perform data
access if they are not schema-bound.

A column from a view or inline table-valued function when that column is defined by
one of the following methods:

A subquery.

A user-defined function that performs user or system data access, or is assumed
to perform such access.

A computed column that contains a user-defined function that performs user or system
data access in its definition.

When SQL Server detects such a column in the OUTPUT clause, error 4186 is raised.

Inserting Data Returned From an OUTPUT Clause Into a Table

When you are capturing the results of an OUTPUT clause in a nested INSERT, UPDATE,
DELETE or MERGE statement and inserting those results into a target table, keep
the following information in mind:

The whole operation is atomic. Either both the INSERT statement and the nested DML 
statement that contains the OUTPUT clause execute or the whole statement fails.

THe following restrictions apply to the target of the outer INSERT statement:

The target cannot be a remote table, view, or common table expression.

The target cannot have a FOREIGN KEY constraint, or be referenced by a 
FOREIGN KEY constraint.

Triggers cannot be defined on the target.

The target cannot participate in merge replication or updatable subscriptions
for transactional replication.

The following restrictions apply to the nested DML statement:

The target cannot be a remote table or partitioned view.

The source itself cannot contain a <dml_table_source> clause.

The OUTPUT INTO clause is not supported in INSERT statements that contain a 
<dml_table_source> clause.

@@ROWCOUNT returns the rows inserted only by the outer INSERT statement.

@@IDENTITY, SCOPE_IDENTITY, and IDENT_CURRENT return identity values generated
only by the nested DML statement, and not those generated by the outer INSERT
statement.

Query notifications treat the statement as a single entity, and the type of any message
that is created will be the type of the nested DML, even if the significant change 
is from the outer INSERT statement itself.

In the <dml_table_source> clause, the SELECT and WHERE clauses cannot include subqueries,
aggregate functions, ranking functions, full-text predicates, user-defined functions
that perform data access, or the TEXTPTR function.

Parallelism:

An OUTPUT clause that returns results to the client will always use a serial plan.

In the context of a database set to compatibility level 130 or higher, if an INSERT ... SELECT
operation uses a WITH (TABLOCK) hint for the SELECT statement and also uses OUTPUT ... INTO
to insert into a temporary or user table, then the target table for the INSERT ... SELECT
will be eligble for parallelism depending on the subtree cost. The target table referenced
in the OUTPUT INTO clause will not be eligible for parallelism.

Triggers:

Columns returned from OUTPUT reflect the data as it is after the INSERT, UPDATE or DELETE statement
has completed but before triggers are executed.

For INSTEAD OF triggers, the returned results are generated as if the INSERT, UPDATE, or DELETE
had actually occurred, even if no modifications take place as the result of the trigger operation.
If a statement that includes an OUTPUT clause is used inside the body of a trigger, table aliases
must be used to reference the trigger inserted and deleted tables to avoid duplicating column
references with the INSERTED and DELETED tables associated with OUTPUT.

If the OUTPUT clause is specified without also specifying the INTO keyword, the target of
the DML operation cannot have any enabled trigger defined on it for the given DML action.
For example, if the OUTPUT clause is defined in an UPDATE statement, the target table
cannot have any enabled UPDATE triggers.

If the sp_configure option disallow results from triggers is set, an OUTPUT clause without
an INTO clause causes the statement to fail when it is invoked from within a trigger.

Data Types:

The OUTPUT clause supports the large object data types: nvarchar(max), varchar(max), varbinary(max),
ntext, image, and xml. When you use the .WRITE clause in the UPDATE statement to modify an
nvarchar(max), varchar(max), or varbinary(max) column, the full before and after images of the
values are returned if they are referenced. The TEXTPTR() function cannot appear as part of
an expression on a text, ntext, or image column in the OUTPUT clause.

Queues:

You can use OUTPUT in applications that use tables as queues, or to hold intermediate result sets.
That is, the application is constantly adding or removing rows from the table. The following
example uses the OUTPUT clause in a DELETE statement to return the deleted row to the calling
application.

USE AdventureWorks2012;
GO
DELETE TOP(1) dbo.DatabaseLog WITH (READPAST)
OUTPUT deleted.*
WHERE DatabaseLogID = 7;
GO

This example removes a row from a table used as a queue and returns the deleted values to the
processing application in a single action. Other semantics may also be implemented, such as
using a table to implement a stack. However, SQL Server does not guarantee the order in which
rows are processed and returned by DML statements using the OUTPUT clause.

It is up to the application to include an appropiate WHERE clause that can guarantee the desired
semantics, or understand that when multiple rows may qualify for the DML operation, there is
no guaranteed order. The following example uses a subquery and assumes uniqueness is a characteristic
of the DatabaseLogID column in order to implement the desired ordering semantics.

USE tempdb;
GO
CREATE TABLE dbo.table1
(
	id INT,
	employee VARCHAR(32)
);
GO

INSERT INTO dbo.table1 VALUES
		(1, 'Fred')
		,(2, 'Tom')
		,(3, 'Sally')
		,(4, 'Alice');
GO

DECLARE @MyTableVar TABLE
(
	id INT,
	employee VARCHAR(32)
);

PRINT 'table1, before delete'
SELECT * FROM dbo.table1;

DELETE FROM dbo.table1
OUTPUT DELETED.* INTO @MyTableVar
WHERE id = 4 OR id = 2;

PRINT 'table1, after delete'
SELECT * FROM dbo.table1;

PRINT '@MyTableVar, after delete'
SELECT * FROM @MyTableVar;

DROP TABLE dbo.table1;

--Results
--table1, before delete
--id 		employee
---------------------------------------------------
--1 		Fred
--2 		Tom
--3 		Sally
--4 		Alice
--
--table1, after delete
--id 		employee
--------------------------------------------------
--1 	   Fred
--3 	   Sally
--@MyTableVar, after delete
--id 	   employee
--------------------------------------------------
--2 	   Tom
--4 	   Alice

Note: Use the READPAST table hint in UPDATE and DELETE statements if your scenario allows for
multiple applications to perform a destructive read from one table. This prevents locking
issues that can come up if another application is already reading the first qualifying record
in the table.

Permissions:

SELECT permissions are required on any columns retrieved through <dml_select_list> or used in <scalar_expression>.

INSERT permissions are required on any tables specified in <output_table>.

Examples:

A. Using OUTPUT INTO with a simple INSERT statement

The following example inserts a row into the ScrapReason table and uses the OUTPUT clause to
return the results of the statements to the @MyTableVar``table variable. Because the ScrapReasonID
column is defined with an IDENTITY property, a value is not specified in the INSERT statement
for that column. However, note that the value generated by the Database Engine for that column
is returned in the OUTPUT clause in the column inserted.ScarpReasonID

USE AdventureWorks2012;
GO
DECLARE @MyTableVar table( NewScrapReasonID smallint,
						   Name varchar(50),
						   ModifiedDate datetime);
INSERT Production.ScrapReason
	OUTPUT INSERTED.ScrapReasonID, INSERTED.Name, INSERTED.ModifiedDate
		INTO @MyTableVar
VALUES (N'Operator error', GETDATE());

--Display the result set of the table variable.
SELECT NewScrapReasonID, Name, ModifiedDate FROM @MyTableVar;
--Display the result set of the table.
SELECT ScarpReasonID, Name, ModifiedDate
FROM Production.ScrapReason;
GO

B. Using OUTPUT with a DELETE statement

The following example deletes all rows in the ShoppingCartItem table. The clause OUTPUT deleted.*
specifies taht the results of the DELETE statement, that is all columns in the deleted rows,
be returned to the calling application. The SELECT statement that follows verifies the results of
the delete operation on the ShoppingCartItem table.

USE AdventureWorks2012;
GO
DELETE Sales.ShoppingCartItem
OUTPUT DELETED.*
WHERE ShoppingCartID = 20621;

--Verify the rows in the table matching the WHERE clause have been deleted.
SELECT COUNT(*) AS [Rows in Table] FROM Sales.ShoppingCartItem WHERE ShoppingCartID = 20621;
GO

C. Using OUTPUT INTO with an UPDATE statement

The following example updates the VacationHours column in the Employee table by 25 percent
for the first 10 rows. The OUTPUT clause returns the VacationHours value that exists before
applying the UPDATE statement in the column deleted.VacationHours, and the updated value in the
column inserted.VacationHours to the @MyTableVar``table variable.

Two SELECT statements follow that return the values in @MyTableVar and the results of the update
operation in the Employee table.

USE AdventureWorks2012;
GO

DECLARE @MyTableVar table(
	EmpID int NOT NULL,
	OldVacationHours int,
	NewVacationHours int,
	ModifiedDate datetime);

UPDATE TOP (10) HumanResources.Employee
SET VacationHours = VacationHours * 1.25,
	ModifiedDate = GETDATE()
OUTPUT inserted.BusinessEntityID,
	   deleted.VacationHours,
	   inserted.VacationHours,
	   inserted.ModifiedDate
INTO @MyTableVar;

--Display the result set of the table variable.
SELECT EmpID, OldVacationHours, NewVacationHours, ModifiedDate
FROM @MyTableVar;
GO
--Display the result set of the table.
SELECT TOP (10) BusinessEntityID, VacationHours, ModifiedDate
FROM HumanResources.Employee;
GO

D. Using OUTPUT INTO to return an expression

The following example builds on example C by defining an expression in the OUTPUT clause
as the difference between the updated VacationHours value and the VacationHours value
before the update was applied.

The value of this expression is returned to the @MyTableVar``table variable in
the column VacationHoursDifference

USE AdventureWorks2012;
GO
DECLARE @MyTableVar table(
	EmpID int NOT NULL,
	OldVacationHours int,
	NewVacationHours int,
	VacationHoursDifference int,
	ModifiedDate datetime);

UPDATE TOP (10) HumanResources.Employee
SET VacationHours = VacationHours * 1.25,
	ModifiedDate = GETDATE()
OUTPUT inserted.BusinessEntityID,
	   deleted.VacationHours,
	   inserted.VacationHours,
	   inserted.VacationHours - deleted.VacationHours,
	   inserted.ModifiedDate
INTO @MyTableVar;

--Display the result set of the table variable.
SELECT EmpID, OldVacationHours, NewVacationHours,
	VacationHoursDifference, ModifiedDate
FROM @MyTableVar;
GO
SELECT TOP (10) BusinessEntityID, VacationHours, ModifiedDate
FROM HumanResources.Employee;
GO

E. Using OUTPUT INTO with from_table_name in an UPDATE statement

The following example updates the ScrapReasonID column in the WorkOrder table for all
work orders with a specified ProductID and ScrapReasonID. The OUTPUT INTO clause returns
values from the table being updated ( WorkOrder ) and also from the Product table.
The Product table is used in the FROM clause to specify the rows to update. Because
the WorkOrder table has an AFTER UPDATE trigger defined on it, the INTO keyword
is required.

USE AdventureWorks2012;
GO
DECLARE @MyTestVar table (
	OldScrapReasonID int NOT NULL,
	NewScrapReasonID int NOT NULL,
	WorkOrderID int NOT NULL,
	ProductID int NOT NULL,
	ProductName nvarchar(50) NOT NULL);

UPDATE Production.WorkOrder
SET ScrapReasonID = 4
OUTPUT deleted.ScrapReasonID,
	   inserted.ScrapReasonID,
	   inserted.WorkOrderID,
	   inserted.ProductID,
	   p.Name
	INTO @MyTestVar
From Production.WorkOrder AS wo
	INNER JOIN Production.Product AS p
	ON wo.ProductID = p.ProductID
	AND wo.ScrapReasonID = 16
	AND p.ProductID = 733;

SELECT OldScrapReasonID, NewScrapReasonID, WorkOrderID,
	ProductID, ProductName
FROM @MyTestVar;
GO

F. Using OUTPUT INTO with from_table_name in a DELETE statement

The following example deletes rows in the ProductProductPhoto table based on search
criteria defined in the FROM clause of DELETE statement. The OUTPUT clause returns
columns from the table being deleted ( deleted.ProductID, deleted.ProductPhotoID) and 
columns from the Product table. TThis table is used in the FROM clause to specify
the rows to delete.

USE AdventureWorks2012;
GO
DECLARE @MyTableVar table (
	ProductID int NOT NULL,
	ProductName nvarchar(50) NOT NULL,
	ProductModelID int NOT NULL,
	PhotoID int NOT NULL);

DELETE Production.ProductProductPhoto
OUTPUT DELETED.ProductID,
	   p.Name,
	   p.ProductModelID,
	   DELETED.ProductPhotoID
	INTO @MyTableVar
FROM Production.ProductProductPhoto AS ph
JOIN Production.Product as p
	ON ph.ProductID = p.ProductID
	WHERE p.ProductModelID BETWEEN 120 and 130;

--Display the results of the table variable.
SELECT ProductID, ProductName, ProductModelID, PhotoID
FROM @MyTableVar
ORDER BY ProductModelID;
GO

G. Using OUTPUT INTO with a large object data type

The following example updates a partial value in DocumentSummary, an nvarchar(max) column
in the Production.Document table, by using the .WRITE clause. The word components is replaced
by the word features by specifying the replacement word, the beginning location (offset) of
the word to be replaced in the existing data, and the number of characters to be replaced (length).

The example uses the OUTPUT clause to return the before and after images of the DocumentSummary
column to the @MyTableVar``table variable. Note that the full before and after images of the
DocumentSummary column are returned.

USE AdventureWorks2012;
GO
DECLARE @MyTableVar table(
	SummaryBefore nvarchar(max),
	SummaryAfter nvarchar(max));

UPDATE Production.Document
SET DocumentSummary .WRITE (N'features',28,10)
OUTPUT deleted.DocumentSummary,
		inserted.DocumentSummary
	INTO @MyTableVar
WHERE Title = N'Front Reflector Bracket Installation';

SELECT SummaryBefore, SummaryAfter
FROM @MyTableVar;
GO

H. Using OUTPUT in an INSTEAD OF trigger

The following example uses the OUTPUT clause in a trigger to return the results of the
trigger operation. First, a view is created on the ScrapReason table, and then an
INSTEAD OF INSERT trigger is defined on the view that lets only the Name column
of the base table to be modified by the user.

Because the column ScarpReasonID is an IDENTITY column in the base table, the trigger
ignores the user-supplied value. This allows the Database Engine to automatically
generate the correct value. Also, the value supplied by the user for ModifiedDate
is ignored and is set to the current date.

The OUTPUT clause returns the values actually inserted into the ScarpReason table.

USE AdventureWorks2012;
GO
iF OBJECT_ID('dbo.vw_ScarpReason', 'V') IS NOT NULL
	DROP VIEW dbo.vw_ScrapReason;
GO
CREATE VIEW dbo.vw_ScarpReason
AS (SELECT ScrapReasonID, Name, ModifiedDate
	FROM Production.ScrapReason);
GO

CREATE TRIGGER dbo.io_ScrapReason
	ON dbo.vw_ScrapReason
INSTEAD OF INSERT
AS
BEGIN
--ScrapReasonID is not specified in the list of columns to be inserted
--because it is an IDENTITY column.
	INSERT INTO Production.ScrapReason (Name, ModifiedDate)
		OUTPUT INSERTED.ScrapReasonID, INSERTED.Name,
			   INSERTED.ModifiedDate
	SELECT Name, getdate()
	FROM inserted;
END
GO
INSERT vw_ScrapReason (ScrapReasonID, Name, ModifiedDate)
VALUES (99, N'My scrap reason', '20030404');
GO

Here is the result set generated on April 12, 2004 ('2004-04-12').Notice that the
ScrapReasonIDActual and ModifiedDate columns reflect the values generated by the 
trigger operation instead of the values provided in the INSERT statement.

ScrapReasonID Name ModifiedDate

------------------------------------------------

17 My scrap reason 2004-04-12 16:23:33.050

I. Using OUTPUT INTO with identity and computed columns

The following example creates the EmployeeSales table and then inserts several rows into
it using an INSERT statement with a SELECT statement to retrieve data from source tables.
The EmployeeSales table contains an identity column (EmployeeID) and a computed column
(ProjectedSales)

USE AdventureWorks2012;
GO
IF OBJECT_ID ('dbo.EmployeeSales', 'U') IS NOT NULL
	DROP TABLE dbo.EmployeeSales;
GO
CREATE TABLE dbo.EmployeeSales
( EmployeeID 	int IDENTITY (1,5) NOT NULL,
  LastName 		nvarchar(20) NOT NULL,
  FirstName 	nvarchar(20) NOT NULL,
  CurrentSales money NOT NULL,
  ProjectedSales AS CurrentSales * 1.10
);
GO
DECLARE @MyTableVar table(
	EmployeeID 	int NOT NULL,
	LastName 	nvarchar(20) NOT NULL,
	FirstName 	nvarchar(20) NOT NULL,
	CurrentSales money NOT NULL,
	ProjectedSales money NOT NULL
	);

INSERT INTO dbo.EmployeeSales (LastName, FirstName, CurrentSales)
	OUTPUT INSERTED.LastName,
		   INSERTED.FirstName,
		   INSERTED.CurrentSales
	INTO @MyTableVar
		SELECT c.LastName, c.FirstName, sp.SalesYTD
		FROM Sales.SalesPerson AS sp
		INNER JOIN Person.Person AS c
			ON sp.BusinessEntityID = c.BussinessEntityID
		WHERE sp.BusinessEntityID LIKE '2%'
		ORDER BY c.LastName, c.FirstName;

SELECT EmployeeID, LastName, FirstName, CurrentSales, ProjectedSales
FROM @MyTableVar;
GO
SELECT EmployeeID, LastName, FirstName, CurrentSales, ProjectedSales
FROM dbo.EmployeeSales;
GO

J. Using OUTPUT and OUTPUT INTO in a single statement

The following example deletes rows in the ProductProductPhoto table based on search criteria
defined in the FROM clause of DELETE statement. The OUTPUT INTO clause returns columns from
the table being deleted (deleted.ProductID, deleted.ProductPhotoID) and columns from the Product
table to the @MyTableVar``table variable. The Product table is used in the FROM clause to specify
the rows to delete. The OUTPUT clause returns the deleted.ProductID, deleted.ProductPhotoID
columns and the date and time the row was deleted from teh ProductProductPhoto

USE AdventureWorks2012;
GO
DECLARE @MyTableVar table (
	ProductID int NOT NULL,
	ProductName nvarchar(50) NOT NULL,
	ProductModelID int NOT NULL,
	PhotoID int NOT NULL);

DELETE Production.ProductProductPhoto
OUTPUT DELETED.ProductID,
	   p.Name,
	   p.ProductModelID,
	   DELETED.ProductPhotoID
	INTO @MyTableVar
OUTPUT DELETED.ProductID, DELETED.ProductPhotoID, GETDATE() AS DeletedDate
FROM Production.ProductProductPhoto AS ph
JOIN Production.Product as p
	ON ph.ProductID = p.ProductID
WHERE p.ProductID BETWEEN 800 and 810;

--Display the results of the table variable
SELECT ProductID, ProductName, PhotoID, ProductModelID
FROM @MyTableVar;
GO

K. Inserting data returned from an OUTPUT clause

The following example captures data returned from the OUTPUT clause of a MERGE statement,
and inserts that data into another table. The MERGE statement updates the Quantity column
of the ProductInventory table daily, based on orders that are processed in the SalesOrderDetail
table.

It also deletes rows for products whose inventories drop to 0 or below. The example captures
the rows that are deleted and inserts htem into another table, ZeroInventory,
which tracks products iwth no inventory.

USE AdventureWorks2012;
GO
IF OBJECT_ID(N'Production.ZeroInventory', N'U') IS NOT NULL
	DROP TABLE Production.ZeroInventory;
GO
--Create ZeroInventory tabe
CREATE TABLE Production.ZeroInventory (DeletedProductID int, RemovedOnDate DateTime);
GO

INSERT INTO Production.ZeroInventory (DeletedProductID, RemovedOnDate)
SELECT ProductID, GETDATE()
FROM
( 	MERGE Production.ProductInventory AS pi
	USING (SELECT ProductID, SUM(OrderQty) FROM Sales.SalesOrderDetail AS sod
		   JOIN Sales.SalesOrderHeader AS soh
		   ON sod.SalesOrderID = soh.SalesOrderID
		   AND soh.OrderDate = '20070401'
		   GROUP BY ProductID) AS src (ProductID, OrderQty)
	ON (pi.ProductID = src.ProductID)
	WHEN MATCHED AND pi.Quantity - src.OrderQty <= 0
		THEN DELETE
	WHEN MATCHED
		THEN UPDATE SET pi.Quantity = pi.Quantity - src.OrderQty
	OUTPUT $action, deleted.ProductID) AS Changes (Action, ProductID)
WHERE Action = 'DELETE';
IF @@ROWCOUNT = 0
PRINT 'Warning: No rows were inserted';
GO
SELECT DeletedProductID, RemovedOnDate FROM Production.ZeroInventory;

Going back to the PHP stuff

So for example, with a table containing the two columns (product_id, product_name)
where product_id is a uniqueidentifier or something similar you coul do the following:

<?php

//ASsume $dbh connection handle is already established

$sql = "INSERT INTO product (product_name) OUTPUT INSERTED.product_id VALUES (?)";

$sth = $dbh->prepare($sql);

$sth->execute(array('widgets'));

$temp = $sth->fetch(PDO::FETCH_ASSOC);

?>

Then $temp will contain an array like:

Array
(
	[product_id] => <stuff>
)

Just be warned that there are some issues relating to how uniqueidentifier columns
are handled by PDO_DBLIB/FreeTDS depending on the TDS version you choose that have 
only been fixed as of PHP 5.3.7.

Information regarding this and the patch can be found as follows:

Bug #54167 PDO_DBLIB returns null on SQLUNIQUE field

Desc:

SQLUNIQUE (type 36) is uniqueidentifier field in Microsoft SQL server.
It is presently unhandled by PDO_DBLIB, so returns NULL rather than the
actual column value for all queries.

Patch to ext/pdo_dblib/dblib_stmt.c is attached which fixes the issue so
that PDO_DBLIB returns the uniqueidentifier as a string.

Sorry to contradict Jonathon Hibbard's comment (http://php.net/manual/en/pdo.lastinsertid.php#82838), but
my experience with INSERT INTO ... ON DUPLICATE KEY UPDATE is totally different. Maybe
it is due to PHP version (I am on Windows, 5.4.7), or to the DB engine (MySQL in my case).

Nevertheless, if i do an INSERT INTO ... ON DUPLICATE KEY UPDATE (something like id=id or equivalent,
where the updated value is equal to hte original one), this is what i am getting:

If the key did not exist, the value is inserted, and lastInsertId() returns the expected
id for the new row.

If the row exists AND a value is updated, with lastInsertId() I get the ID of the updated
row.

If the row exists but NO value is updated, lastInsertId() returns 0.

That contradicts his example, where he assures that - "INSERT INTO city (`city`) VALUES (`Paris`) ON DUPLICATE
KEY UPDATE `city` = 'Paris'"
returns 2 (??) on lastInsertId() and that he expected to return 1 "since no records were inserted" (??).

It should be mentioned that this function does not retrieve the ID (Primary Key) of the row, but it's
OID instead. 

So, if you use one of the latest PostgreSQL versions this function will not help you unless you
add OID to the table specifically when you create it.

In case anyone was wondering, something like:

$val = 5;
$sql = "REPLACE table (column) VALUES (:val)";
$stmt = $dbh->prepare($sql);
$stmt->bindParam(':val', $val, PDO::PARAM_INT);
$stmt->execute();
$lastId = $dbh->lastInsertId();

will return the last inserted id, whether the record was replaced or simply inserted
the REPLACE syntax, simply inserts, or deletes > inserts
so lastInsertId() still works

Refer to http://mysql.com/doc/refman/5.0/en/replace.html
for REPLACE usage

WARNING for PostgreSQL users. In response to the comment by <user>:

...
$last_insert_id = $objPDO->lastInsertId("$strTable_id_seq");

This does appear to function as expected. What is a little unclear ot me is whether this
simply returns the current value of the sequence; if it does, this is not a particularly
relaible indicator as to the id of the record your code just inserted, especially if
your site or application is especially high traffic.
...

NEVEr ever use lastInsertId() with PostgreSQL sequences, ESPECIALLY when your application's
insert/update load is high. PostgreSQL sequences are non-transactional (a natural design
feature to avoid exclusive locking which otherwise produces unacceptable performance).

THis means that any concurrent transaction incrementing the same sequence will render the
value returned by lastInsertId() invalid with respect to the last insert by your transaction.

Example:

Transaction 1 inserts with nextval('some_seq') yielding 100;
Concurrent transaction 2 inserts with nextval('some_seq') yielding 101;
Transaction 1 calls lastInsertId(), expecting 100, but gets 101.

This PDO method is useless for PostgreSQL, always use INSERT ... RETURNING instead.

I think i get a nice solution in Postgres to get the ID using the RETURNING that comes
with Postgress since version 8.2. In the example below, i add to my insert clause the
"returning" along with the primary key of my table, then after the execute, i do a fetch
getting an array with the value of the last inserted id.

<?php
	public function insert($employee){

		$sqlQuery = "INSERT INTO employee(user_id,name,address,city) VALUES(:user_id,:name,:address,:city) RETURNING
employee_id";
		
		$statement = $this->prepare($sqlQuery);

		$a = "2002-03-11 12:01AM";

		$statement->bindParam(":user_id", $employee->getUserId(), PDO::PARAM_INT);
		$statement->bindParam(":name"; $employee->getName(), PDO::PARAM_STR);
		$statement->bindParam(":address", $employee->getAddress(), PDO::PARAM_STR);
		$statement->bindParam(":city", $employee->getCity(), PDO::PARAM_STR);
		$statement->execute();

		$result = $statement->fetch(PDO::FETCH_ASSOC);
		return $result["employee_id"];
	}
?>

This function is not compatible with the newer MS SQL Driver.

PDO::lastInsertId:

Returns the identifier for the row most recently inserted into a table in the db. The table must
have an IDENTITY NOT NULL column.

SYntax:

string PDO::lastInsertId ([ $name ]);

Params:

$name. An optional string that lets you specify the table.

Return values:

A string of the identifier for the row most recently added. An empty string
if the method call failsl.

Remarks:

Support for PDO was added in version 2.0 of the Microsoft Drivers for PHP for SQl server.

Example:

<?php
	$database = "test";
	$server = "(local)";
	$conn = new PDO("sqlsrv:server=$server; Database = $database", "", "");

	$conn->exec("use Test");

	$ret = $conn->exec("INSERT INTO Table1 VALUES('19')");
	$ret = $conn->exec("INSERT INTO ScrollTest VALUES(1, '19')");

	$lastRow = $conn->lastInsertId('Table1');
	echo $lastRow . "\n";

	//defaults to ScrollTest
	$lastRow = $conn->lastInsertId();
	echo $lastRow . "\n";
?>

PDO::prepare:

PDO::prepare - prepares a statement for execution and returns a statement object

Desc:

public PDOStatement PDO::prepare ( string $statement [, array $driver_options = array() ])

Prepares an SQL statement to be executed by the PDOStatement::execute() method. The SQL statement
can contain zero or more named (:name) or question mark (?) param markers for which real values
will be substituted when the statement is executed.

You cannot use both named and question mark param markers within the same SQL statement; pick one
or the other param style. Use these params to bind any user-input, do not include the user-input
directly in the query.

You múst include a unique parameter marker for each value you wish to pass in to the statement when
you call PDOStatement::execute(). You cannot use a named param marker of the same name more than once
in a prepared statement, unless emulation mode is on.

Note: Param markers can represent a complete data literal only. Neither part of literal, nor keyword,
nor identifier, not whatever arbitrary query part can be bound using params. For example, you cannot
bind multiple values to a single param in the IN() clause of an SQL statement.

Calling PDO::prepare() and PDOStatement::execute() for statements that will be issued multiple times
with different parameter values optimizes the performance of your application by allowing the driver
to negotiate client and/or server side caching of the query plan and meta info, and helps to prevent
SQL injection attacks by eliminating the need to manually quote params.

PDO will emulate prepared statements/bound params for drivers taht do not natively support them,
and can also rewrite named or questin mark style param markers to something more appropiate, if
the driver supports one style but not the other.

Params:

statement: This must be a valid SQL statement template for the target db server.

driver_options: This array holds one or more key=>value pairs to set attribute values for the
PDOStatement object that htis method returns. You would most commonly use this to set the PDO::ATTR_CURSOR
value to PDO::CURSOR_SCROLL to request a scrollable cursor. Some drivers have driver specific
options that may be set at prepare-time

Returns:

If the database server successfully prepares the statement, PDO::prepare() returns a PDOStatment
object. If the database server cannot successfully prepare the statement, PDO::prepare() returns
FALSE or emits PDOException (depending on error handling).

Note: Emulated prepared statements does not communicate with the Db server so PDO::prepare()
does not check the statement.

Examples:

EXample #1 Prepare an SQL statement with named params

<?php
//Execute a prepared statement by passing an array of values
$sql = 'SELECT name, colour, calories
	FROM fruit
	WHERE calories < :calories and colour = :colour';
$sth = $dbh->prepare($sql, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
$sth->execute(array(':calories' => 150, ':colour' => 'red'));
$red = $sth->fetchAll();

$sth->execute(array(':calories' => 175, ':colour' => 'yellow'));
$yellow = $sth->fetchAll();
?>

Example #2 Prepare an SQL statement with question mark params

<?php
//Execute a prepared statement by passing an array of values
$sth = $dbh->prepare('SELECT name, colour, calories
	FROM fruit
	WHERE calories < ? AND colour = ?');
$sth->execute(array(150, 'red'));
$red = $sth->fetchAll();
$sth->execute(array(175, 'yelow'));
$yellow = $sth->fetchAll();
?>

For those wondering why adding quotes to around a placeholder is wrong, any why you cannot use
placeholder for table or column names:

There is a common misconception about how the placeholders in prepared statements work: They are
not simply substtituted in as (escaped) strings, and the resulting SQL executed. Instead, a DBMS
asked to "prepare" a statement comes up with a completey query plan for how it would execute
that query, including which tables and indexes it would use, which will be the same regardless
of how you fill in the PH.

The plan for "SELECT name FROM my_table WHERE id = :value" will be the same whatever you substitute
for ":value", but the seemingly similar "SELECT name FROM :table WHERE id = :value" cannot be planned,
because the DBMS has no idea what table you are actually going to select from.

Even when using "emulated prepares", PDO cannot let you use PHs anywhere, because it would have to
work out what you meant: does "Select :foo From some_table" mean ":foo" is going to be a column
reference or a literal string?

When your query is using a dynamic column reference, you should be explicitly white-listing the
columns you know to exist on the table, e.g, using a switch statement with an exception thrown
in the default: clause.

After a bunch of searching, i have learned 2 things about prepared statements:

1.) It fails if you enclose it in a single quote (')
This fails: "SELECT * FROM users WHERE email=':email'"
This works: "SELECT * FROM users WHERE email=:email"

2.) You cannot search with a prepared statement
This fails: "SELECT * FROM users WHERE :search=:email"
This succeeds: "SELECT * FROM users WHERE $search=:email"


IN my case, i allow the user to enter their username or email, determine which they have
entered and set $search to "username" or "email": AS this value is not entered by the user 
there is no potentional for SQL injection and thus safe to use as i have done.

You can also pass an array of values to PDOStatement::execute(). This is also secured
against SQL injection. You do not necessarily have to use bindParam() or bindValue().

With PDO_MYSQL you need to remember about the PDO::ATTR_EMULATE_PREPARES option.

The default value is TRUE, like
$dbh->setAttribute(PDO::ATTR_EMULATE_PREPARES,true);

This means that no prepared statement is created with $dbh->prepare() call. With exec()
call PDO replaces the PHs with values itself and sends MySQL a generic query string.

The first consequnece is that hte call $dbh->prepare('garbage');
reports no error. YOu will get an SQL error during the $dbh->exec() call.
The second one is the SQL injection risk in special cases, like using a PH for the table name.

The reason for emulation is a poor performance of mySQL with prepared statements.
Emulation works significantly faster.

I want to note that it does not matter where you are using a variable inside the query directly,
that is not secure against SQL injections (unless performing a long security operation)

The following example is insecure against SQL injections:

<?php

$statement = $databaseConnection->prepare("SELECT * FROM `$_POST['table']` WHERE $_POST['search_for']=:search");
$statement->bindParam(":search", $search);
$search = 18; //For example
$statement->execute();
?>

If an attacker passes '1;-- ' as input named 'search_for', he is not a very bad attacker, because he did not
delete your data. IN the baove example, an attacker can do anything with the connected DB (unless you have
restricted the connected user). Unfortunately, as others mentioned, you cannot use prepared statements as
other parts of a query; just can be used to search in indexes.

Note on that SQL injection properties of prepared statements.

Prepared statements only protect you from SQL injection IF you use the bindParam or bindValue option.

For example if you have a table called users with two fields, username and email and someone updates
their username you might run:

UPDATE `users` SET `user`='$var'

where $var would be the user submitted text.

Now if you did:

<?php
$a = new PDO("mysql:host=localhost;dbname=database;", "root", "");
$b=$a->prepare("UPDATE `users` SET user='$var'");
$b->execute();
?>

And the user had entered User', email='test for a test the injection would occura nd the email would be
updaoted to test as well as the user being updated to User'

Using bindParam as follows:

<?php
$var="User', email='test";
$a = new PDO("mysql:host=localhost;dbname=database;", "root", "");
$b=$a->prepare("UPDATE `users` SET user=:var");
$b->bindParam(":var",$var);
$b->execute();
?>

The sql would be scaped and update the username to User' and email='test'

If you run queries in a loop, do not include $pdo->prepare() inside the loop, it will save you
some resources (and time).

prepare statement inside loop:
for($i=0; $i<1000; $i++) {
	$rs = $pdo->prepare("SELECT `id` FROM `admins` WHERE `groupID` = :groupID AND `id` <> :id");
	$rs->execute([':groupID' => $group, ':id' => $id]);
}

// Took 0.066626071929932 microseconds

prepare statement outside loop:
$rs = $pdo->prepare("SELECT `id` FROM `admins` WHERE `groupID` = :groupID AND `id` <> :id");
for($i=0; $i<1000;$i++) {
	$rs->execute([':groupID' => $group, ':id' => $id]);
}

// took 0.06448118209839 microseconds

For (1,000 simple queries) it took 0.002 MS less
not much, but worth mentioning

Noteworthy in my opinion is that if you prepare a statement but do not bind a value to
the markers it will insert null by default, e.g.:

<?php
// @var PDO $db
$prep = $db->prepare('INSERT INTO item(title, link) VALUES(:title, :link)');
$prep->execute();
?>

WIll attempt to insert null, null into the item table.

Note that for Postgres, even though Postgres does support prepared statements, PHP's PDO driver
NEVER sends the prepared statement to the Postgres in advance of the call to PDO::execute().

Therefore, PDO::prepare() will never throw an error for things like faulty SQL syntax.

It also means that the server will not parse and plan the SQL until the first time PDO::execute()
is called, which may or may not adversely affect your optimization plans.

Do not just automatically use prepare() for all of your queries.

If you are only submitting one query, using PDO::query() with PDO::quote() is much faster (about
3x faster in my test results with MySQL). A prepared query is only faster if you are submitting
thousands of identical queries at once (with different data).

If you Google for performance comparssions you will find that this is generally consistentlly the
case, or you can write some code and do your own comparison for your particular config and query
scenario. But generally, PDO::query() will always be faster except when submitting a large number
of identical queries.

prepared queries do have the advantage of escaping the data for you, so you have to be sure to
use quote() when using query().

Attention using MySQL and prepared statements.
Using a placeholder multiple times inside a statement does not work. PDO just translates the
first occurrence and leaves the second one as is.

select id,name from demo_de where name LIKE :name OR name=:name

You have to use

select id,name from demo_de where name LIKE :name OR name=:name2

And bind name two times. I dont know if other DBs (for example Oracle or MSSQL) support multiple
occurrances.

PDO::query:

PDO::query - Executes an SQL statement, returning a result set as a PDOStatement object

Desc:

public PDOStatement PDO::query ( string $statement )

public PDOStatement PDO::query ( string $statement, int $PDO::FETCH_COLUMN, int $colno )

public PDOStatement PDO::query ( string $statement, int $PDO::FETCH_CLASS, string $classname, array $ctoargs)

public PDOStatement PDO::query ( string $statement, int $PDO::FETCH_INTO, object $object)

PDO::query() executes an SQL statement in a single function call, returning the result set (if any) returned
by the statement as a PDOStatement object.

For a query that you need to issue multiple times, you will realize better pformance if you prepare a PDOstatement
object using PDO::prepare() and issue the statement with multiple calls to PDOStatement::execute()

If you do not fetch all of the data in a result set before issuing your next call to PDO::query(), your call may
fail. Call PDOStatement::closeCursor() to release the database resources associated with the PDOStatement
object before issuing your next call to PDO::query()

Note: Although this function is only documented as having a single parameter, you may pass additional arguments
to this function. They will be treated as though you called PDOStatement::setFetchMode() on the resultant statement
object.

Params:

statement: The SQL statement to prepare and execute.

Data inside the query should be properly escaped.

Returns:

PDO::query() returns a PDOStatement object, or FALSE on failure.

Examples:

Example #1 Demonstrate PDO::query

A nice feature of PDO::query() is that it enables you to iterate over the rowset returned by a successfully
executed SELECT statement:

<?php
function getFruit($conn) {
	$sql = 'SELECT name, color, calories FROM fruit ORDER BY name';
	foreach ($conn->query($sql) as $row) {
		print $row['name'] . "\t";
		print $row['color'] . "\t";
		print $row['calories'] . "\n";
	}
}
?>

The above will output:

apple 	red 	150
banana 	yellow 	250
kiwi 	brown 	75
lemon 	yellow 	25
orange 	orange 	300
pear 	green 	150
watermelon pink 	90

The handling of errors by this function is controlled by the attribute PDO::ATTR_ERRMODE.

Use the following to make it throw an exception:

<?php
$dbh->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
?>

Trying to pass like second argument PDO::FETCH_ASSOC it still works.

So passing FETCH TYPE like argument seems to work.

This saves you from something like:

<?php
$result = $stmt->setFetchMode(PDO::FETCH_NUM);
?>

Example:
<?php
$res = $db->query('SELECT * FROM `mytable` WHERE true', PDO::FETCH_ASSOC);
?>

If you are using PDO to create an SQLite dbfile that will be used by an Android app,
you can set common values via the $dbh->query("PRAGMA ...") statement;

a typical example would be the user_version of the db or the page_size:
<?php
...
$dbh = new PDO($PDO_DSN, null, null, null);
$dbh->query("PRAGMA page_size = 4096"); //Android match page size
$dbh->query("PRAGMA user_version = 2"); //This match super(context, DB_NAME, null, DB_VERSION) of the
//DatabaseOpenHelper
...
?>

Connecting:

<?php
try{
	$db = new PDO("dbtype:host=yourhost;dbname=yourdbname;charset=utf8","username", "password");
} catch(PDOException $e){
	echo "Error: ".$e;
}
?>

Execute query with secure data:

<?php
try{
	$db = new PDO("dbtype:host=yourhost;dbname=yourdbname;charset=utf8", "username", "password");
	$mysecuredata=14;
	$db->query("Select * from table where id=".$mysecuredata);
} catch(PDOException $e){
	echo "Error: ".$e;
}
?>

Execute query with insecure data:

<?php
try{
	$db = new PDO("dbtype:host=yourhost;dbname=yourdbname;charset=utf8", "username", "password");
	$myinsecuredata=$_GET["id"];
	$query=$db->prepare("Select * from table where id=?");
	$query->execute(array($myinsecuredata));
} catch(PDOException $e){
	echo "ERror: ".$e;
}
?>

Getting data in DB:

<?php
try{
	$db = new PDO("dbtype:host=yourhost;dbname=yourdbname;charset=utf8", "username", "password");
	$myinsecuredata = $_GET["table"];
	$query=$db->prepare("Select * from ?");
	$query->execute(array($myinsecuredata));
	while($row=$query->fetch(PDO::FETCH_OBJ)) {
		//Its getting data in line and its an object
		echo $row->yourcolumnname;
	}
}catch(PDOException $e){
	echo "Error: ".$e;
}
?>

When a query fails, it returns false. This only occurs in silent mode.
If exception mode has been activiated, a exception will be thrown.

$pdoObj = new PDO($dsn, $user, $pass);
$pdoObj->setAttribute("PDO::ATTR_ERRMODE", PDO::ERRMODE_EXCEPTION);

PDO::quote:

PDO::quote - Quotes a string for use in a query

Desc:

public string PDO::quote ( string $string [, int $parameter_type = PDO::PARAM_STR ])

PDO::quote() places quotes around the input string (if required ) and escapes special chars within
the input string, using a quoting style appropiate to the underlying driver.

If you are using this function to build SQL statements, you are strongly recommended to use
PDO::prepare() to prepare SQL statements with bound parameters instead of using PDO::quote()
to interpolate useri nput into an SQL statement.

Prepared statements with bound params are not only more portable, more convenient, immune to 
SQL injections, but are often much faster to execute than interpolated queries, as both
server and client side can cache a compiled form of the query.

Not all PDO Drivers implement this method (notably PDO_ODBC). Consider using prepared statements
instead.

Caution:

Security: The default charset

The charset must be set either on the server level, or within the DB connection itself (depending
on the driver) for it to affect PDO::quote(). See the driver-specific documentation for more info.

I will go over to write about the PDO drivers as well, as i find use in knowing about them:

PDO Drivers:

Table of Contents:

CUBRID (PDO)
MS SQL Server (PDO)
Firebird (PDO)
IBM (PDO)
Informix(PDO)
MySQL(PDO)
MS SQL Server (PDO)
Oracle (PDO)
ODBC and DB2(PDO)
PostgreSQL(PDO)
SQLite(PDO)
4D(PDO)

The following drivers are currently implemented in the PDO interface:

Driver name 			Supported DBs

PDO_CUBRID 				Cubrid

PDO_DBLIB 				FreeTDS/Microsoft SQL Server/Sybase

PDO_FIREBIRD 			Firebird

PDO_IBM 				IBM DB2

PDO_INFORMIX 			IBM informix Dynamic server

PDO_MYSQL 				MySQL 3.x/4.x/5.x

PDO_OCI 				Oracle Call Interface

PDO_ODBC 				ODBC v3 (IBM DB2, unixODBC and win32 ODBC)

PDO_PGSQL 				PostgreSQL

PDO_SQLITE 				SQLite 3 and SQLite 2

PDO_SQLSRV 				Microsoft SQL Server / SQL Azure

PDO_4D 					4D

For those seeking Netezza access you can use php_odbc or pdo_odbc. They both work flawlessly.
Found some issues between Web vs CLI that were around LD_LIBRARY_PATH setting in Unix.
As long as this is set in Unix and Apache environemtn, it will work.

CUBRID Functions(PDO_CUBRID)

Introduction:

PDO_CUBRID is a driver that implements the PHP Data Objects (PDO) interface to enable access
from PHP to CUBRID databases.

Note: Current version of PDO_CUBRID does not support persistent connection now.

Installation:

To Build the PDO_CUBRID extension, the CUBRID DBMS must be installed on the same system as 
PHP. PDO_CUBRID is a PECL extension, so follow the instructions in installation of PECL
extensions to install the PDO_CUBRID extension. Issue the configure command to point to
the location of your CUBRID base dir as follows:

$ ./configure --with-pdo-cubrid=/path/to/CUBRID[,shared]

The configure command defaults to the value of the CUBRID environment variable.
A DLL for this PECL extension is currently unavailable. See also the building on
Windows section. Detailed information about installation on linux nad Windows
manually, please read build-guide.html in PECL package CUBRID for reference.

Features:

PDO_CUBRID Features

Feature 					Desc

Scrollable Cursor 		PDO_CUBRID supports scrollable cursors. The default cursor type is forward only,
						and you can use parameter driver_options in PDO::prepare() to change cursor type.

Timeout 				PDO_CUBRID supports sql statement execution timeout setting. You can use PDO::setAttribute8)
						to set timeout value.

Autocommit_mode 		PDO_CUBRID supports both autocommit_mode and transaction, and autocommit_mode is enabled by default.
and Transaction 		You can use PDO::setAttribute() to change its state.
						If you use PDO::beginTransaction() to begin a transaction, it will disable autocommit_mode automatically
						and restore it after PDO::commit() or PDO::rollBack(). Note that before disabling the autocommit_mode,
						any pending work is automatically ocmitted.

Multiple SQL 			PDO_CUBRID supports Multiple SQL statements. Multiple SQL statements are seperated by semicolons (;) 
Statements

Schema Information 		PDO_CUBRID implements a function PDO::cubrid_schema() to get schema information

LOBs 					PDO_CUBRID supports BLOB/CLOB data type. The LOB in PDO is represented as a stream, so you can insert
						LOBs by binding a stream, and get LOBs by reading a stream returned by CUBRID PDO. For example:

						Example #1 insert LOBs in CCUBRID PDO

						<?php
						$fp = fopen('lob_test.png', 'rb');

						$sql_stmt = "INSERT INTO lob_test(name, content) VALUES('lob_test.png', ?)";

						$stmt = $dbh->prepare($sql_stmt);
						$ret = $stmt->bindParam(1, $fp, PDO::PARAM_LOB);
						$ret = $stmt->execute();
						?>

						Example #2 Fetch LOBs in CUBRID PDO

						<?php
						$sql_stmt = "SELECT content FROM lob test WHERE name='lob_test.png'";

						$stmt = $dbh->prepare($sql_stmt);
						$stmt->execute();
						$result = $stmt->fetch(PDO::FETCH_NUM);

						header("Content-Type: image/png");
						fpassthru($result[0]);
						?>

Column Meta 			The PDOStatement::getColumnMeta() in CUBRID PDO will return an associative array
						containing the following values:

						type
						name
						table
						def
						precision
						scale
						not_null
						auto_increment
						unique_key
						multiple_key
						primary_key
						foreign_key
						reverse_index
						reverse_unique

Collection Data Type 	PDO_CUBRID supports SET/MULTISET/SEQUENCE data type. If you do not specify data type,
						the default data type is char for example:

						Example #3 Insert set in CUBRID PDO with default data type

						<?php
						$conn_str = "cubrid:dbname=demodb;host=localhost;port=33000";
						$cubrid_pdo = new PDO($conn_str, 'dba', '');

						$cubrid_pdo->exec("DROP TABLE if exists test_tbl");
						$cubrid_pdo->exec("CREATE TABLE test_tbl (col_1 SET(VARCHAR))");

						$sql_stmt_insert = "INSERT INTO test_tbl VALUES (?);";
						$stmt = $cubrid_pdo->prepare($sql_stmt_insert);
						$data = array("abc", "def", "ghi");
						$ret = $stmt->bindParam(1, $data, PDO::PARAM_NULL);
						$ret = $stmt->execute();
						var_Dump($ret);
						?>

						Example #4 Specify data type when insert set in CUBRID PDO

						<?php
						$conn_str = "cubrid:dbname=demodb;host=localhost;port=33000";
						$cubrid_pdo = new PDO($conn_str, 'dba', '');

						$cubrid_pdo->exec("DROP TABLE if exists test_tbl");
						$cubrid_pdo->exec("CREATE TABLE test_tbl (col_1 SET(int))");

						$sql_stmt_insert = "INSERT INTO test_tbl VALUES (?);";
						$stmt = $cubrid_pdo->prepare($sql_stmt_insert);
						$data = array(1,2,3,4);

						$ret = $stmt->bindParam(1, $data, 0,0, "int");
						$ret = $stmt->execute();
						var_Dump($ret);
						?>

						CUBRID Bind Data Types:(The fifth param of PDOStatement::bindParam):
						CHAR
						STRING
						NCHAR
						VARNCHAR
						BIT
						VARBIT
						NUMERIC
						NUMBER
						INT
						SHORT
						BIGINT
						MONETARY
						FLOAT
						DOUBLE
						DATE
						TIME
						DATETIME
						TIMESTAMP

Predefined Constants:

The constants below are defined by this driver, and will only be available when the extension
has been either compiled into PHP or dynamically loaded at runtime. In addition, these driver-specific
constants should only be used if you are using this driver. Using driver-specific attributes with
another driver may result in unexpected behaviour. PDO::getAttribute() may be used to obtain the
PDO_ATTR_DRIVER_NAME attribute to check the driver, if your code can run against multiple drivers.

The following constants can be used when setting the database attribute. They can be passed to PDO::getAttribute()
or PDO::setAttribute()

PDO::CUBRID attribute flags

Constant 								Desc

PDO::CUBRID_ATTR_ISOLATION_LEVEL 		Transaction isolation level for the db connection.

PDO::CUBRID_ATTR_LOCK_TIMEOUT 			Transaction timeout in seconds.

PDO::CUBRID_ATTR_MAX_STRING_LENGTH 		Read only. The maximum string length for bit, varbit, char, varchar,
										nchar, nchar varying data types when using CUBRID PDO API.

The following constants can be used when setting the transaction isolation level. They can be passed to
PDO::getAttribute() or returned by PDO::setAttribute()

PDO::CUBRID isolation level flags

Constant 									Desc

PDO::TRAN_COMMIT_CLASS_UNCOMMIT_INSTANCE 	The lowest isolation level (1). A dirty, non-repeatable or phantom read may
											occur for the tuple and a non-repeatable read may occur for the table as well.

PDO::TRAN_COMMIT_CLASS_COMMIT_INSTANCE 		A relativily low isolation level (2). A dirty read does not occur, but not-repeatable
											or phantom read may occur.

PDO::TRAN_REP_CLASS_UNCOMMIT_INSTANCE 		The default isolation of CUBRID (3). A dirty, non-repeatable or phantom read may occur
											for the tuple, but repeatable read is ensured for the table.

PDO::TRAIN_REP_CLASS_COMMIT_INSTANCE 		A relativily low isolation level (4). A dirty read does not occur, but non-repeatable
											or phantom read may.

PDO::TRAIN_REP_CLASS_REP_INSTANCE 			A relativily high isolation level (5). A dirty or non-repeatable read does not occur,
											but a phantom read may.

PDO::TRAIN_SERIALIZABLE 					The highest isolation level (6). Problems concerning concurrency (e.g dirty read,
											non-repeatable read, phantom read, etc.) do not occur.

The following constants can be used when getting schema information. They can be passed to PDO::cubrid_schema().

PDO::CUBRID schema flags

Constant 									Desc

PDO::CUBRID_SCH_TABLE 						Get a name and type of table in CUBRID.

PDO::CUBRID_SCH_VIEW 						Get name and type of view in CUBRID

PDO::CUBRID_SCH_QUERY_SPEC 					Get the query definition of view

PDO::CUBRID_SCH_ATTRIBUTE 					Get the attributes of table column.

PDO::CUBRID_SCH_TABLE_ATTRIBUTE 			Get the attributes of table

PDO::CUBRID_SCH_METHOD 						Get the instance method. The instance method is a method called by a class instance.
											It is used more often than the class method because most operations are executed
											in the instance.

PDO::CUBRID_SCH_TABLE_METHOD 				Get the class method. The class method is a method called by a class object.
											It is usually used to create a new class instance or to initialize it.
											It is also used to access or update class attributes.

PDO::CUBRID_SCH_METHOD_FILE 				Get the information of the file where the method of the table is defined

PDO::CUBRID_SCH_SUPER_TABLE 				Get the name and type of table which inherits attributes from 

PDO::CUBRID_SCH_SUB_TABLE 					Get the name and type of table which inherites attributes from thsi table

PDO::CUBRID_SCH_CONSTRAINT 					Get the table constraints

PDO::CUBRID_SCH_TRIGGER 					Get the table triggers.

PDO::CUBRID_SCH_TABLE_PRIVILEGE 			Get the privilege information of table

PDO::CUBRID_SCH_COL_PRIVILEGE 				Get the privilege information of column.

PDO::CUBRID_SCH_DIRECT_SUPER_TABLE 			Get the direct super table of table

PDO::CUBRID_SCH_PRIMARY_KEY 				Get the table primary key.

PDO::CUBRID_SCH_IMPORTED_KEYS 				get imported keys of table.

PDO::CUBRID_SCH_EXPORTED_KEYS 				get exported keys of table.

PDO::CUBRID_SCH_CROSS_REFERENCE 			Get reference relation of tow tables.

Microsoft SQL Server and Sybase Functions (PDO_DBLIB):

Intro:

PDO_DBLIB is a driver taht implements the PHP Data Objects (PDO) interface to enable access
from PHP to Microsoft SQL Server and Sybase databases through the FreeTDS library.

This extension is not available anymore on Windows with PHP 5.3 or later.

On Windows, you should use SqlSrv, an alternative driver for MS SQL is available from Microsoft:
http://msdn.microsoft.com/en-us/sqlserver/<stuff>.aspx

If it is not possible to use SqlSrv, you can use the PDO_ODBC driver to connect to Microsoft SQL Server
and Sybase DB's, as the native Windows DB-LIB is ancient, thread unsafe and no longer supported by MS.

Here is a class that allows you to connect to MSSQL/Azure DB with Transaction Support:

<?php

class pdo_dblib_mssql{
	
	private $db;
	private $cTransID;
	private $childTrans = array();

	public function __construct($hostname, $port, $dbname, $username, $pwd){

		$this->hostname = $hostname;
		$this->port = $port;
		$this->dbname = $dbname;
		$this->username = $username;
		$this->pwd = $pwd;

		$this->connect();
	}

	public function beginTransaction(){
		$cAlphanum = "<stuff>";
		$this->cTransID = "T".substr(str_shuffle($cAlphanum), 0, 7);

		array_unshift($this->childTrans, $this->cTransID);

		$stmt = $this->db->prepare("BEGIN TRAN [$this->cTransID];");
		return $stmt->execute();
	}

	public function rollBack(){

		while(count($this->childTrans) > 0){
			$cTmp = array_shift($this->childTrans);
			$stmt = $this->db->prepare("ROLLBACK TRAN [$cTmp];");
			$stmt->execute();
		}

		return $stmt;
	}

	public function close(){
		$this->db = null;
	}

	public funciton connect(){

		try {
			$this->db = new PDO ("dblib:host=$this->hostname:$this->port;dbname=$this->dbname", "$this->username",
"$this->pwd");
		} catch (PDOException $e) {
			$this->logsys .= "Failed to get DB handle: " . $e->getMessage() . "\n";
		}
	}
}

?>

There is currently little sybase related PDO docs out there. The ones that ih ave found often mention a spec
for a dns that is invalid. Here is how i am currently connecting to sybase ASE:

1. Compile up freetds http://www.freetds.org on top of open client;
2. Add the PDO and PD_DBLIB modules to php 5 as per the documentation; I am currently using the PDO-beta and
PDO_DBLIB-beta;
3. Check mods installed ok using "pear list" and "php -m";

The documentation often says ot use "sybase:" as your DSN, this does not work. use "dblib:" instead. Here 
is an example:

<?php
try{
	$hostname = "myhost";
	$port = 10060;
	$dbname = "tempdb";
	$username = "dbuser";
	$pw = "password";
	$dbh = new PDO ("dblib:host=$hostname:$port;dbname=$dbname","$username", "$pw");
} catch (PDOException $e) {
	echo "Failed to get DB handle: " . $e->getMessage(); . "\n";
	exit;
}
$stmt = $dbh->prepare("select name from master..sysdatabases where name = db_name()");
$stmt->execute();
while ($row = $stmt->fetch()) {
	print_r($row);
}
unset($dbh); unset($stmt);
?>

If you work with MSSQL Server 7.0/2000/... under Windows and use non latin Encoding then
better to use PDO_MYSQL until PDO_ODBC bugs will be fixed (MSSQL ext far more stable and 
usable for PHP versions <= 5.1.2)

If your MSSQL connection use strings in OEM encoding (cp866 for russian charset)

1. Run microsoft Server/Client Network Utility on work PC and UNCHECK "DBLibrary options"/"Automatic
ANSI to OEM conversion"

2. Restart Web server if needed.

Keep in mind the limitation sql server imposes on clients using the connection methods that dblib uses:
no ntext column values can be transmitted, you will get an insightfull '404' error when trying.

The full texto f hte error is::

Unicode data in a Unicode-only collation or ntext data cannot be sent to clients using DB-Library 
(Such as ISQL) or ODBC version 3.7 or earlier.

For more info on errors that mssql might throw at you, please see:

http://mdsn.microsoft.com/en-us/library/<stuff>

Here is how to call a stored procedure from MS SQL Server:

<?php
$return = null;
$param1 = 'value1';
$param2 = 'value2';

$ds = $db->prepare('{? = call ?,?}');
$ds->bindParam(1, $return, PDO::PARAM_INT | PDO::PARAM_INPUT_OUTPUT,4);
$ds->bindParam(2, $param1, PDO::PARAM_INT | PDO::PARAM_INPUT_OUTPUT,4);
$ds->bindParam(3, $param2, PDO::PARAM_INT | PDO::PARAM_INPUT_OUTPUT,4);

$ds->execute();
?>

Hope ffully this will save someone who is having problems connecting to MSSQL. I was having
a heck of a time trying to get my dev server to connect to a remote MSSQL 2005 box.

When using PDO like so:
<?php
$mssql = new PDO('dblib:host=<host>;dbname=<dbname>', '<user>', '<password>');
?>

I was receiving the message:

Adaptive Server is unavailable or does not exist

And mssql_connect() simply told me "COuld not connect to server"

I tried everything, different config opts for FreeTDS/PHP, different versions, etc. But the answer
was one line in php.ini:

mssql.secure_connection = Off

This line, which defaults to Off, needs to be ON if you are using NT authentication:

mssql.secure_connection = On

Here is my build:

FreeTDS-0.82 configured like:
./configure --with-tdsver=8.0 --enable-msdblib --with-gnu-ld

PHP 5.2.11 configured like:
./configure --with-mssql=/usr/local --with-pdo-dblib=/usr/local [other options]

Running on Apache/2.2.13 (Unix/Linux)

The contents of the MS SQL Server (PDO) is as follows:

PDO_DBLIB DSN:

PDO_DBLIB DSN - Connecting to Microsoft SQL Server and Sybase databases

Desc:

The PDO_DBLIB Data Source Name (DSN) is composed of the following elements:

DSN prefix

	The DSN prefix is sybase: if PDO_DBLIB was linked against the Sybase ct-lib libraries, mssql: if PDO_DBLIB was
	linked against the Microsoft SQL server libraries, or dblib: if PDO_DBLIB was linked against the FreeTDS libraries.

host
	The hostname on which the database server resides. Defaults to 127.0.0.1

dbname
	The name of teh database

charset
	The client charset

appname
	The application name (used in sysprocesses). Defaults to "PHP Generic DB-lib" or "PHP freetds".

secure
	Currently unused.

Examples:

Example #1 PDO_DBLIB DSN examples

The following examples show a PDO_DBLIB DSN for connecting to Microsoft SQL Server and Sybase 
databases:

mssql:host=localhost;dbname=testdb
sybase:host=localhost;dbname=testdb
dblib:host=localhost;dbname=testdb

Instead of specifying tds version and client charset in freetds.conf, you may pass it as a parameter:

<?php $dsn = 'dblib:version=7.0;charset=UTF-8;host=domain.example.com;dbname=example;'; ?>

If you are using FreeTDS driver and you want to use "charset" param then you may have to edit freetds.conf
(e.g. /etc/freetds/freetds.conf) and force connection using at least version 7.0 of the protocol.

tds = version 7.0

Charset param accepts all encodings supported by iconv (execute iconv --list to show all encodings).

Be careful if you are using dblib with prepared statements, as it will crash if the first execution
did not return anything.

Bug #40639 DBLIB driver segfaults on repeated preapred select statements:

Desc:

The DBLIB PDO driver seems to crash when first execution of repeated prepared statement wont actually
return any rows. If the first execution does return rows, it works fine.

Reproduce code:

$pdo = new PDO('dblib:host=hostname;dbname=dbname', 'user', 'pass');
$query = "SELECT 'foo' WHERE '1' = :value";
$stmt = $pdo->prepare($query);

$values = array('0', '1');

foreach ($values as $value){
	$stmt->bindValue(':value', $value);
	$stmt->execute();
	while ($stmt->fetch() !== false);
	$stmt->closeCursor();
}

Expected result:

Nothing

Actual result:

(gbdb) run dblib2.php
Starting program: /usr/local/bin/php dblib2.php
Reading symbols for shared libraries .+++..+++++..++++.. done

Program received signal EXC_BAD_ACCESS, Could not access memory.
Reason: KERN_PROTECTION_FAILURE at address: 0x0000000000
0x00000faf43 in do fetch (stmt=0x172a624, do_bind=0,
return_value=0x172a944, how=PDO_FETCH_USE_DEFAULT,
ori=PDO_FETCH_ORI_NEXT, offset=0, return_all=0x0) at /usr/local/src/PHP_5_2/ext/pdo/pdo_stmt.c:1026
1026
(return_value, stmt->columns[i].name, val);

Albeit there are more comments on this specific bug, most of them seem to refer to breakpoints and function
calls akin to the above format. Not very useful, in the larger scheme of things., even if i find them
really interesting. Moving on.

When you connect to a non standard 1433 port

for win32 use DSN like 'mssql:host=hostname,port;dbname=database'

for FreeTDS and DB-Lib use DNS like 'mssql:host=hostname:port;dbname=database'

FYI: PDO dblib module (pdo_dblib.so) was installed when i isntalled php-mssql in CentOS 7.
I thought php-mssql would just include the soon to be deprecated mssql PHP functions but it
also contains the PDO connector. After installing this i am able to connect to our MSSQL
2014 DB via PDO.

Firebird Functions (PDO_FIREBIRD)

Intro:

PDO_FIREBIRD is a driver that implements the PHP Data Objects (PDO) interface to enable access
from PHP to Firebird database.

Installation:

Use --with-pdo-firebird[=DIR] to install the PDO Firebird extension, where the optional [=DIR] is the Firebird
install dir.

$ ./configure --with-pdo-firebird

Predefined Constants:

The constants below are defiend by this driver, and will only be available when the extension has been
compiled into PHP or dynamically loaded at runtime. In addition, these driver-specific constants
should only be used if you are using this driver. Using driver-specific attributes with another
driver may result in unexpected behavior. PDO::getAttribute() may be used to obtain the PDO_ATTR_DRIVER_NAME
attribute to check the driver, if your code can run against multiple drivers.

PDO::FB_ATTR_DATE_FORMAT (integer):
	Available since PHP 5.3.0

	Sets the date format

PDO::FB_ATTR_TIME_FORMAT (integer):
	Sets the time format

	Available since PHP 5.3.0

PDO::FB_ATTR_TIMESTAMP_FORMAT (integer):
	Sets the timestamp format

	Available since PHP 5.3.0

Table of Contents:

PDO_FIREBIRD_DSN - Connecting to Firebird Databases.

After two days of trouble with no visible issues, when rebooting the system two popups came up:

PHP Startup: Unable to load dynamic library
'c:/wamp/bin/php/php.5.3.13/ext/php_interbase.dll' - %1 Not a application valid to Win32

PHP Startup: Unable to load dynamic library
'c:/wamp/bin/php/php.5.3.13/ext/php_pdo_firebird.dll' - %1 Not a applicaiton valid to Win32

I have just reinstalled wampserer and all seems to run well.

To see if your Firebird PDO driver runs well:

<?php
foreach(PDO::getAvailableDrivers() as $driver) {
	echo $driver . '<br/>';
}
?>

You need to set:

setAttribute(PDO::FB_ATTR_TIMESTAMP_FORMAT, '%s')
for timestamp values

PDO_FIREBIRD DSN:

PDO_FIREBIRD DSN - Connecting to Firebird Databases

Desc:

The PDO_FIREBIRD Data Source Name (DSN) is composed of the following elements:

DSN prefix
	The DSN prefix is firebird:.

dbname
	The name of the db

charset
	The char set

role
	The SQL role name

Examples:

Example #1 PDO_FIREBIRD DSN example with path

The following example shows a PDO_FIREBIRD DSN for connecting to Firebird databases:

firebird:dbname=/path/to/DATABASE.FDB

Example #2 PDO_FIREBIRD DSN example with port and path

THe following example shows a PDO_FIREBIRD DSN for connecting to a Firebird database using
hostname port and path:

firebird:dbname=hostname/port:/path/to/DATABASE.FDB

Example #3 PDO_FIREBIRD DSN example with localhost and path to employee.fdb on Debian system

The following example shows a PDO_FIREBIRD DSN for connecting to a Firebird database employee.fdb 
using localhost:

firebird:dbname=localhost:/var/lib/firebird/2.5/data/employee.fdb

IBM Functions (PDO_IBM):

Intro:

PDO_IBM is a driver that implements the PHP Data Objects (PDO) interface to enable access from PHP
to IBM databases.

Installation:

To build the PDO_IBM extension, the DB2 Clientv9.1 or later must be installed on the same system as PHP.
The DB2 Client can be downloaded from the IBM Application Development site.

Note:

The DB2 Clientv9.1 or later supports direct access to DB2 for Linux, UNIX, and Windows v8 and v9.1 servers

The DB2 Clientv9.1 also supports access to DB2 UBD for i5 and DB2 UDB for z/OS servers using the separately 
purchased DB2 Connect product

PDO_IBM is a PECL extension, so follow the instructions in Installation of PECL extensions to install the
PDO_IBM extension. Issue the configure command to point to the location of your DB2 Client header files
and libs as follows:

bash$ ./configure --with-pdo-ibm=/path/to/sqllib[,shared]

The configure command defaults to the value of the DB2DIR environment variable.

Table of Contents:

PDO_IBM DSN - Connecting to IBM databases

PDO_IBM DSN

PRO_IBM DSN - Connecting to IBM databases

Desc:

The PDO_IBM Data Source Name (DSN) is based on the IBM CLI DSN. The major components of the
PDO_IBM DSN are:

DSN prefix:
	The DSN prefix is ibm:.

DSN
	The DSN can be any of the following:

		a) Data source setup using db2cli.ini or odbc.ini

		b) Catalogued database name i.e database alias in the DB2 client catalog

		c) Complete connection string in the following format: DRIVER={IBM DB2 ODBC DRIVER};DATABASE=database;
		HOSTNAME=hostname;PORT=port;PROTOCOL=TCPIP;UID=username;PWD=password; where the params represent the
		following values:

		database: The name of the db

		hostname: The hostname or IP address of the database server

		port: The TCP/IP port on which the database is listening for requests

		username: The username with which you are connecting to the db.

		password: THe password with which you are connecting to the DB

Examples:

Example #1 PDO_IBM DSN example using db2cli.ini

The following example shows a PDO_IBM DSN for connecting to an DB2 database cataloged as
DB2_9 in db2cli.ini:

$db = new PDO("ibm:DSN=DB2_9", "", "");

[DB2_9]
Database=testdb
Protocol=tcpip
Hostname=11.22.33.444
Servicename=56789

Example #2 PDO_IBM DSN example using a connection string

The following example shows a PDO_IBM DSN for connecting to an DB2 database named testdb
using the DB2 CLI connection string syntax.

$db = new PDO("ibm:DRIVER={IBM DB2 ODBC DRIVER};DATABASE=testdb;" .
	"HOSTNAME=11.22.33.444;PORT=56789;PROTOCOL=TCPIP;", "testuser", "testpass");

Informix Functions (PDO_INFORMIX)

Intro:

PDO_INFORMIX is a driver that implements the PHP Data Objects (PDO) interface to enable access
from PHP to Informix databases.

Installation:

To build the PDO_INFORMIX extension, the Informix Client SDK 2.81 UC1 or higher must be installed
on the same system as PHP. The Informix Client SDK is available from the IBM Informix Support Site.

PDO_INFORMIX is a PECL extension, so follow the instructions in Installation of PECL extensions to
install the PDO_INFORMIX extension. Issue the configure command to point to the location of your
Informix Client SDK header files and libraries as follows:

bash$ ./configure --with-pdo-informix=/path/to/SDK[,shared]

The configure command defaults to the value of the INFORMIXDIR environment variable.

Scrollable cursors:

PDO_INFORMIX supports scrollable cursors; however, they are not enabled by default. To enable
scrollable cursor support, you must either set ENABLESCROLLABLECURSORS=1 in the corresponding
ODBC connection settings in odbc.ini or pass the EnableScrollableCursors=1 clause in the DSN
connection string.

Table of Contents:

PDO_INFORMIX DSN - Connecting to informix databases

Take care, with php-5.2.4 --with-pdo-informix=shared,/home/informix
does not work, just says:
Notice: Following unknown configure options were used:
--with-pdo-informix=shared,/home/informix

I noticed thet SQLite is installed by php by default. Oh and it happens to use PDO. So do not forget
to use --without-sqlite.

My successful config looks like this:

./configure --with-mysql --with-apxs=/usr/local/apache/bin/apxs --with-curl --with-xsl --disable-pdo
--without-sqlite

In case that you loaded the extension, in solaris systems, and you are getting something similar
to this: 

PHP Warning: PHP Startup: Unable to load dynamic library '/opt/php547/lib/php/extensions/no-debug-non-zts-20100525
/pdo_informix.so' - ld.so.1: php: fatal: libifgls.so: DF_1_NOOPEN tagged object may not be dlopen()'ed in Unknown
on line 0

In this case set the following Environment variables:
export INFORMIXDIR=/path/to/Informix/CSDK/
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$INFORMIXDIR/lib:$INFORMIXDIR/lib/cli:$INFORMIXDIR/lib/esql

http://members.iiug.org/forums/oat/index.cgi/noframes/read/196

Solved the issue with PHP 5.2.4 and others.

The embedded PDO in php since 5.1+ is INCOMPATIBLE with the latest PDO_MYSQL and PDO_INFORMIX, etc.
I just spent 2 days working on this. This solution works on numerous versions of Linux i have tried
as well as SunOS and HPUX.

The basic issue, getting this message when running PHP with PDO and trying to get PDO_INFORMIX working,
but having a version conflict:

"PHP Fatal error: PDO: driver informix requires PDO API version 20060409;
this is PDO version 20060511 in Unknown on line 0"

The "embedded" PDO that is within PHP since version 5.1 CONFLICTS with the PDO the PEAR/PECL
modules are expecting.

1) Rebuild PHP with no pdo (--disable-pdo) (and you cannot have any stuff like --with-mysql-pdo, either)

2) Then use PEAR/PECL to install PDO: pear install pdo

3) Then use PEAR/PECL to install PDO_INFORMIX:
				pear install --alldeps pdo_informix

4) make sure your php.ini extensions_dir points to the directory
	where these are placed

5) Then add these references to php.ini:
	extensions=pdo.so
	extensions=pdo_informix.so
	extensions=pdo_mysql.so (etc.)

6) run php -v now and you should not see any errors.

7) run "pear list" and "pecl list" to see the installed modules

8) run php -i |egrep "pdo|PDO" to see:

php -i |egrep "pdo|PDO"
Configure Command => './configure' '--disable-pdo'
'--with-apxs2=/usr/local/apache2/bin/apxs' '--with-openssl=/usr'
'--enable-force-cgi-redirect' '--with-gd' '--with-jpeg-dir=/usr/lib'
'--with-zlib' '--enable-bcmath' '--enable-mbstring=all' '--with-curl'
PDO
PDO support => enabled
PDO drivers => mysql, informix
pdo_informix
pdo_informix support => enabled
pdo_mysql
PDO Driver for MySQL, client library version => 5.0.51a

I would have tried the embedded PDO and then also --with-informix-pdo=shared but as an
earlier post here showed, the --with-informix is unknown.

PDO_INFORMIX DSN

PDO_INFORMIX DSN - Connecting to Informix databases

Desc:

The PDO_INFORMIX Data Source Name (DSN) is based on the Informix ODBC DSN string. Details on configuring
an Informix ODBC DSN are available from the Informix Dynamic Server Information Center. The major components
of the PDO_INFORMIX DSN are:

DSN prefix:
	The DSN prefix is informix:

DSN:
	The DSN can be either a data source setup using odbc.ini or a complete connection string.

Examples:

Example #1 PDO_INFORMIX DSN example using odbc.ini

The following example shows a PDO_INFORMIX DSN for connecting to an Informix database cataloged
as Infdrv33 in odbc.ini:

$db = new PDO("informix:DSN=Infdrv33", "", "");

[ODBC Data Sources]
Infdrv33=INFORMIX 3.3 32-BIT

[Infdrv33]
Driver=/opt/informix/csdk_2.81.UC1G2/lib/cli/iclis09b.so
Description=INFORMIX 3.3 32-BIT
Database=common_db
LogonID=testuser
pwd=testpass
Servername=ids_server
DB_LOCALE=en_US.819
OPTIMIZEAUTOCOMMIT=1
ENABLESCROLLABLECURSORS=1

Example #2 PDO_INFORMIX DSN example using a connection string

The following example shows a PDO_INFORMIX DSN for connecting to an Informix database named
common_db using the Informix connection string syntax.

$db = new PDO("informix:host=host.domain.com; service=9800;
	database=common_db; server=ids_server; protocol=onsoctcp;
	EnableScrollableCursors=1", "testuser", "testpass");

MySQL Functions (PDO_MYSQL)

Intro:

PDO_MYSQL is a driver that implements the PHP Data Objects (PDO) interface to enable access
from PHP to MySQL 3.x, 4.x and 5.x databases.

PDO_MYSQL will take advantage of native prepared statement support present in MySQL 4.1 and higher.
If you are using an older version of the mysql client libs, PDO will emulate them for you.

Warning: Beware: Some MySQL table types (storage engines) do not support transactions. When writing
transactional database code using a table type that does not support transactions, MySQL will pretend
that a transaction was initiated successfully. In addition, any DDL queries issued will implicitly
commint any pending transactions.

Installation:

The common Unix distributions include binary versions of PHP that can be installed. Although these binary
versions are typically built with support for the MySQL extensions, the extension libraries themselves
may need to be installed using an additional package. Check the package manager than comes with your
chosen distribution for availability.

For example, on Ubuntu the php5-mysql package installs the ext/mysql, ext/mysqli, and PDO_MYSQL PHP extensions.
On CentOS, the php-mysql package also installs these three PHP extensions.

Alternatively, you can compile this extension yourself. Building PHP from source allows you to specify the
MySQL extensions you want to use, as well as your choice of client library for each extension.

When compiling, use --with-pdo-mysql[=DIR] to install the PDO MySQL extension, where the optional [=DIR]
is the MySQL base library. As of PHP 5.4, mysqlnd is the default lib. For details about choosing a lib,
see Choosing a MySQL library.

Optionally, the --with-mysql-sock[=DIR] sets to location to the MySQL unix socket pointer for all MySQL
extensions, including PDO_MYSQL. If unspecified, the default locations are searched.

Optionally, the --with-zlib-dir[=DIR] is used to set the path to the libz install prefix.

$ ./configure --with-pdo-mysql --with-mysql-sock=/var/mysql/mysql.sock

SSL support is enabled using the appropiate PDO_MySQL constants, which is equivalent to calling the
MySQL C API function mysql_ssl_set(). Also, SSL cannot be enabled with PDO::setAttribute() because the
connection already exists. See also the MySQL documentation about connecting to MySQL with SSL.

27.8.7.73 mysql_ssl_set()

my_bool mysql_ssl_set(MYSQL *mysql, const char *key, const char *cert, const char *ca, const char *capath,
	const char *cipher)

Desc:

mysql_ssl_set() is used for establishing encrypted connections using SSL. The mysql argument must be a valid
connection handler. Any unused SSL arguments may be given as NULL.

If used, mysql_ssl_set() must be called before mysql_real_connect(). mysql_ssl_set() does nothing unless SSL
support is enabled in the client lib.

It is optional to call mysql_ssl_set() to obtain an encrypted connection becuase by default, MySQL programs
attempt to connect using encryption if the server supports encrypted connections, falling back to an unencrypted
connection if an encrypted connection cannot be established (see Section 6.4.1 "Configuring MySQL to Use Encrypted
Connections"). mysql_ssl_set() may be useful to applications that must specify particular certificate and key files,
encryption ciphers, and so forth.

mysql_ssl_set() specifies SSL information such as certificate and key files for establishing an encrypted connection
if such connections are available, but does not enforce any requirement taht the connection obtained be encrypted.
To require an encrypted connection, use the technique described in Section 27.8.15 "C API Encrypted Connection Support".

mysql_ssl_set() is a convenience function that is essentially equivalent to this set of mysql_options() calls:

mysql_options(mysql, MYSQL_OPT_SSL_KEY, key);
mysql_options(mysql, MYSQL_OPT_SSL_CERT, cert);
mysql_options(mysql, MYSQL_OPT_SSL_CA, ca),
mysql_options(mysql, MYSQL_OPT_SSL_CAPATH, capath);
mysql_options(mysql, MYSQL_OPT_SSL_CIPHER, cipher);

Because of that equivalence, applications can, instead of calling mysql_ssl_set(), call mysql_options() directly,
omitting calls for those options for which the option value is NULL. Moreover, mysql_options() offers encrypted-connection
options not available using mysql_ssl_set(), such as MYSQL_OPT_SSL_MODE to specify the security state of the
connection, and MYSQL_OPT_TLS_VERSION to specify the protocols permitted by the client for encrypted connections.

Arguments:

mysql: The connection handler returned from mysql_init()

key: The path name to the key file

cert: The path name to the cert file

ca: The path name to the cert authority file

capath: The path name to a dir that contains trusted SSL CA certificates in PEM format.

cipher: A list of permissible ciphers ot use for SSL encryption

Return values:

This function always returns 0. If SSL setup is incorrect, a subsequent mysql_real_connect() call returns an error
when you attempt to connect.

Changelog

Version 		Desc

5.4.0 			mysqlnd becamse the default MySQL library when compiling PDO_MYSQL. Previously, libmysqlclient was
				the default MySQL lib.

5.4.0 			MySQL client libraries 4.1 and below are no longer supported.

5.3.9 			Added SSL support with mysqlnd and OpenSSL.

5.3.7 			Added SSL support with libmysqlclient and OpenSSL.

Predefined Constants:

The constants below are defined by this driver, and will only be available when the extension has been either compiled 
into PHP or dynamically loaded at runtime. In addition, these driver-specific constants should only be used if you are
using this driver. Using driver-specific attributes with another driver may result in unexpected behaviour.

PDO::getAttribute() may be used to obtain the PDO_ATTR_DRIVER_NAME attribute to check the driver, if your code can run
against multiple drivers.

PDO::MYSQL_ATTR_USE_BUFFERED_QUERY (int)
	If this attribute is set to TRUE on a PDOStatement, the MySQL driver will use the buffered versions of the MySQL API.
	If you are writing portable code, you should use PDOStatement::fetchAll() instead.

	Example #1 Forcing queries to be buffered in mysql

	<?php
	if ($db->getAttribute(PDO::ATTR_DRIVER_NAME) == 'mysql') {
		$stmt = $db->prepare('select * from foo',
			array(PDO::MYSQL_ATTR_USE_BUFFERED_QUERY => true));
	} else {
		die("my application only works with mysql; I should use \$stmt->fetchAll() instead");
	}
	?>

PDO::MYSQL_ATTR_LOCAL_INFILE(integer):
	Enable LOAD LOCAL INFILE.

	Note, this constant can only be used in the driver_options array when constructing a new database handle.

PDO::MYSQL_ATTR_INIT_COMMAND(integer):
	Command to execute when connecting to the MySQL server. Will automatically be re-executed when reconnecting.

	Note, this constant can only be used in the driver_options array when constructing a new database handle.

PDO::MYSQL_ATTR_READ_DEFAULT_FILE(integer):
	Read options from the named option file instead of from my.cnf. This option is not available if mysqlnd is
	used, because mysqlnd does not read the mysql configuration files.

PDO::MYSQL_ATTR_READ_DEFAULT_GROUP(integer):
	Read options from the named group from my.cnf or file specified with MYSQL_READ_DEFAULT_FILE. This option 
	is not available if mysqlnd is used, because mysqlnd does not read the mysql configuration files.

PDO::MYSQL_ATTR_MAX_BUFFER_SIZE(integer):
	Maximum bufer size. Defaults to 1 MiB. This constant is not supported when compiled against mysqlnd

PDO::MYSQL_ATTR_DIRECT_QUERY(integer):
	Perform direct queries, do not use prepared statements.

PDO::MYSQL_ATTR_ROUND_ROWS(integer):
	Return the number of found (matched) rows, not the number of changed rows.

PDO::MYSQL_ATTR_IGNORE_SPACE(integer):
	Permit spaces after function names. Makes all functions names reserved words.

PDO::MYSQL_ATTR_COMPRESS(integer):
	Enable network communication compression. This is also supported when compiled against 
	mysqlnd as of PHP 5.3.11

PDO::MYSQL_ATTR_SSL_CA(integer):
	The file path ot the SSL certificate authority

	This exists as of 5.3.7

PDO::MYSQL_ATTR_SSL_CAPATH(integer):
	The file path to the directory that contains the trusted SSL CA certificates, which are stored
	in PEM format.

	This exists as of PHP 5.3.7

PDO::MYSQL_ATTR_SSL_CERT(integer):
	The file path to the SSL certificate.

	This exists as of PHP 5.3.7

PDO::MYSQL_ATTR_SSL_CIPHER(integer):
	A list of one or more permissible ciphers to use for SSL encryption, in a format understood
	by OpenSSL. For example: DHE-RSA-AES256-SHA:AES128-SHA

	This exists as of PHP 5.3.7

PDO::MYSQL_ATTR_SSL_KEY(integer):
	The file path to the SSL key.

	This exists as of PHP 5.3.7

PDO::MYSQL_ATTR_MULTI_STATEMENTS(integer):
	Disables multi query execution in both PDO::prepare() and PDO::query() when set to False.

	Note, this constant can only be used in the driver_options array when constructing a new
	database handle.

	This exists as of PHP 5.5.21 and PHP 5.6.5

Runtime Config:

The behaviour of these functions is affected by settings in php.ini:

PDO_MYSQL Configuration Options

Name 								Default 						Changeable

pdo_mysql.default_socket 			"/tmp/mysql.sock"  				PHP_INI_SYSTEM

pdo_mysql.debug 					NULL 							PHP_INI_SYSTEM

For further details and definitions of the PHP_INI_* modes, see the Where a configuration
may be set.
Here is a short explonation of the confiuration directives:

pdo_mysql.default_socket string
	Sets a Unix domain socket. This value can be set at compile time if a domain socket is found at configure.
	This ini setting is Unix only.

pdo_mysql.debug boolean
	Enables debugging for PDO_MYSQL. This setting is only available when PDO_MYSQL is compiled against 
	mysqlnd and in PDO debug mode.

Table of Contents:

PDO_MYSQL DSN - Connecting to MySQL databases

A way of doing a PDORepository

<?php
	abstract class PDORepository{
		const USERNAME="root";
		const PASSWORD="";
		const HOST="localhost";
		const DB="parcial";

		private function getConnection(){
			$username = self::USERNAME;
			$password = self::PASSWORD;
			$host = self::HOST;
			$db = self::DB;
			$connection = new PDO("mysql:dbname=$db;host=$host", $username, $password);
			return $connection;
		}
		protected function queryList($sql, $args){
			$connection = $this->getConnection();
			$stmt = $connection->prepare($sql);
			$stmt->execute($args);
			return $stmt;
		}
	}
?>

Comments on this page has already been done.

Microsoft SQL Server Functions (PDO_SQLSRV)

Intro:

PDO_SQLSRV is a driver that implements the PHP Data Objects (PDO) interface to enable access from
PHP to MS SQL Server (starting with SQL Server 2005) and SQL Azure databases.

Installation:

The PDO_SQLSRV extension is enabled by adding appropiate DLL files to your PHP extension directory and
the corresponding entry to the php.ini file. The PDO_SQLSRV download comes 8 driver files, four of which
are for PDO support.

If you are running non-thread-safe PHP (PHP 5.3), use the php_pdo_sqlsrv_53_nts.dll file. (You should
use a non-thread-safe version if you are using IIS as your web server). If you are running thread-safe
PHP, use the php_pdo_sqlsrv_53_ts.dll file. Similarly, for PHP 5.4, use the php_pdo_sqlsrv_54_nts.dll
or php_pdo_sqlsrv_54_ts.dll depending on whether your PHP installation is non-thread-safe or thread-safe.

The most recent version of the driver is available for download here: SQLSRV 3.0 Download. 

If you need support for PHP 5.2 and/or PHP compiled with VC6, use the 2.0 release of the driver:
SQLSRV 2.0 download

For more information about system requirements, see SQLSRV System Requirements.

The PDO_SQLSRV extension is only compatible with PHP running on Windows. For Linux, see ODC
and Microsoft' SQL Server ODBC Driver for Linux.

Predefined Constants:

The constants below are defined by this driver, and will only be available when the extension has
been either compiled into PHP or dynamically loaded at runtime. In addition, these driver-specific
constants should only be used if you are using this driver. Using driver-specific attributes with
another driver may result in unexpected behaviour.

PDO::getAttribute() may be used to obtain the PDO_ATTR_DRIVER_NAME attribute to check the driver,
if your code can run against multiple drivers.

PDO::SQLSRV_TXN_READ_UNCOMITTED (integer):
	This constant is an acceptable value for the SQLSRV DSN key TransactionIsolation. This constant
	sets the transaction isolation level for the connection to Read Uncommitted.

PDO::SQLSRV_TXN_READ_COMMITTED (integer):
	This constant is an acceptable value for the SQLSRV DSN key TransactionIsolation. This constant
	sets the transaction isolation level for the connection to Read Committed.

PDO::SQLSRV_TXN_REPEATABLE_READ (integer):
	This constant is an acceptable value for the SQLSRV DSN key TransactionIsolation. This constant
	sets the transaction isolation level for the connection to Repeateable Read.

PDO::SQLSRV_TXN_SNAPSHOT (integer):
	This constant is an acceptable value for the SQLSRV DSN key TransactionIsolation. This constant
	sets the transaction isolation level for the connection to Snapshot.

PDO::SQLSRV_TXN_SERIALIZABLE (integer):
	This constant is an acceptable value for the SQLSRV DSN key TransactionIsolation. This constant
	sets the transaction isolation level for the connection to Serializable.

PDO::SQLSRV_ENCODING_BINARY (integer):
	Specifies that data is sent/retrieved as raw byte stream to/from the server without performing
	encoding or translation. This constant can be passed to PDOStatement::setAttribute, PDO::prepare,
	PDOStatement::bindColumn, and PDOStatement::bindParam.

PDO::SQLSRV_ENCODING_SYSTEM (integer):
	Specifies that data is sent/retrieved to/from the server as 8-bit chars as specified in the code
	page of the Windows locale that is set on the system. Any multi-byte characters or characters that
	do not map into this code page are substituted with a single byte question mark (?) char.
	THis constant can be passed to PDOStatement::setAttribute, PDO::setAttribute, PDO::PDO::prepare,
	PDOStatement::bindColumn, and PDOStatement::bindParam.

PDO::SQLSRV_ENCODING_UTF8(integer):
	Specifies that data is sent/retrieved to/from the server in UTF-8 encoding. This is the default
	encoding. This constant can be passed to PDOStatement::setAttribute, PDO::setAttribute,
	PDO::prepare, PDOStatement::bindColumn, and PDOStatement::bindParam.

PDO::SQLSRV_ENCODING_DEFAULT (integer):
	Specifies that data is sent/retrieved to/from the server according to PDO::SQLSRV_ENCODING_SYSTEM
	if specified during connection. The connection's encoding is used if specified in a prepare statement.
	This constant can be passed to PDOStatement::setAttribute, PDO::setAttribute, PDO::prepare,
	PDOStatement::bindColumn, and PDOStatement::bindParam.

PDO::SQLSRV_ATTR_QUERY_TIMEOUT (integer):
	A non-negative integer representing the timeout period, in seconds. Zero (0) is the default and
	means no timeout. This constant can be passed to PDOStatement::setAttribute, PDO::setAttribute,
	and PDO::prepare.

PDO::SQLSRV_ATTR_DIRECT_QUERY (integer):
	Indicates that a query should be executed directly, without being prepared. This constant can be
	passed to PDO::setAttribute, and PDO::prepare. For more information, see Direct and Prepared
	Statement Execution.

Table of Contents:

PDO_SQLSRV_DSN - Connecting to MS SQL Server and SQL Azure databases.

An updated driver compatible with both PHP 7.0 and Linux is available on the PHP-7.0-Linux branch
of https://github.com/Microsoft/msphpsql/

This is more up to date and supports some additional features over the ODBC / DBLIB drivers.

It is currently considered an 'Early Technical Preview' and hence has some limitations, but
in my experience it has been stable.

SQLSRV 3.2 is now available from Microsoft that supports PHP 5.6

http://www.microsoft.com/en-us/download/details.aspx?id=20098

As of 12/12/2014, Microsoft has officialy released version 3.1.

support for 5.5 has 4 drivers:
php_pdo_sqlsrv_55_nts.dll
php_pdo_sqlsrv_55_ts.dll
php_sqlsrv_55_nts.dll
php_sqlsrv_55_ts.dll

Note: Version 3.1 now supports PHP 5.5 and requires Microsoft ODBC Driver 11
(or higher)

MS SQL Server (PDO)

PDO_SQLSRV DSN:

PDO_SQLSRV DSN - Connecting to MS SQL Server and SQL Azure databases.

Desc:

The PDO_SQLSRV Data Source Name (DSN) is composed of the following elements:

DSN prefix:
	The DSN prefix is sqlsrv:

APP:
	The application name used in tracing.

ConnectionPooling:
	Specifies whether the connection is assigned from a connection pool (1 or TRUE) or not (0 or FALSE).

Database:
	The name of the database

Encrypt:
	Specifies whether the communication with SQL Server is encrypted (1 or TRUE) or unencrypted (0 or FALSE).

Failover_Partner:
	Specifies the server and instance of the database's mirror (if enabled and configured) to use when the primary
	server is unavailable.

LoginTimeout:
	Specifies the number of seconds to wait before failing the connection attempt.

MultipleActiveResultSets:
	Disables or explicitly enables support for multiple active Result sets (MARS).

Quotedld:
	Specifies whether to use SQL-92 rules for quoted identifiers (1 or TRUE) or to use legacy Transact-SQL
	rules (0 or FALSE).

Server:
	The name of the database server.

TraceFile:
	Specifies the path for the file used for trace data.

TraceOn:
	Specifies whether ODBC tracing is enabled (1 or TRUE) or disabled (0 or FALSE) for the connection
	being established.

TransactionIsolation:
	Specifies the transaction isolation level. The accepted values for this option are PDO::SQLSRV_TXN_READ_UNCOMMITTED,
	PDO::SQLSRV_TXN_READ_COMMITTED, PDO::SQLSRV_TXN_REPEATABLE_READ, PDO::SQLSRV_TXN_SNAPSHOT, and PDO::SQLSRV_TXN_SERIALIZABLE.

TrustServerCertificate:
	Specifies whether the client should trust (1 or TRUE) or reject (0 or FALSE) a self-signed server certificate.

WSID:
	Specifies the name of the computer for tracing.

Examples:

Example #1 PDO_SQLSRV DSN examples:

The following example shows how to connect to a specified MS SQL Server db:

$c = new PDO("sqlsrv:Server=localhost;Database=testdb", "UserName", "Password");

The following example shows how to connect to a MS SQL Server db on a specified port:

$c = new PDO("sqlsrv:Server=localhost,1521;Database=testdb", "UserName", "Password");

The following example shows how to connect to a SQL Azure database with server ID 12345abcde.
Note that when you connect to SQL Azure with PDO, your username will be UserName@12345abcde
(UserName@ServerId)

$c = new PDO("sqlsrv:Server=12345abcde.database.windows.net;Database=testdb", "UserName@12345abcde",
	"Password");

I suspect the problem with "Server=foo-sql\MSSQLSERVER" was you did not escape the backslash, with a backslash.

If hostname worked, then IP would work as well given a hostname resolves to an IP unless your DNS was mapping to
the wrong IP which would be a simple issue.

I suspect you are running your web services on the same host as mssql? If so, confirm that your mssql server is set
to bind to IP addresses (if you want access from the outside of that box). If you are only able to connect via a name
(as in a NetBIOS or Active Directory name), it is likely you are connecting to a "socket" or named pipe.

I found with MS-SQL Server 2008 on Windows Server 2008 R2 that i needed to use the MSSQL Server name. The servers
hostname or IP address would not work ( with or without port, and/or SQL instance name, etc.) After trying several
combinations, this is what i found worked in my config:

host-ip: 10.4.2.50
host-name: mssqlhost.mydomain.org
mssql-server-name: foo-sql
mssql-instance-name: MSSQLSERVER
database-name: mydb

<?php

$dbh = new PDO("sqlsrv:Server=foo-sql,1433;Database=mydb", $user, $pass);

?>

The above worked with and without port (,1433). I also noticed adding the instance name [localhost] and the
server instance name [SQLEXPRESS], separating them with a double backslash before it would work:

<?php
$conn = new PDO('sqlsrv:Server=localhost\\SQLEXPRESS;Database=MyDatabase', 'MyUsername', 'MyPassword');
?>

Oracle Functions (PDO_OCl)

installation:

use --with-pdo-oci[=DIR] to install the PDO Oracle OCI extension, where the optional [=DIR] is the Oracle
Home directory. [=DIR] defaults to the $ORACLE_HOME environment variable.

Use --with-pdo-oci=instantclient,prefix,version for an Oracle instant Client SDK, where prefix and version
are configured.

// Using $ORACLE_HOME
$ ./configure --with-pdo-oci

// Using OCI for Linux with 10.2.0.3 RPMs with a /usr prefix
$ ./configure --with-pdo-oci=instantclient,/usr,10.2.0.3

Table of Contents:

PDO_OCI DSN - Connecting to Oracle databases

If instant client has been installed but the full oracle client not yet, you can
use pdo to connect to oracle database like the following code:

<?php
$tns = "
(DESCRIPTION =
	(ADDRESS_LIST = 
		(ADRESS = (PROTOCOL = TCP)(HOST = yourip)(PORT = 1521))
	)
	(CONNECT_DATA =
		(SERVICE_NAME = orcl)
	)
)
";

$db_username = "yourname";
$db_password = "yourpassword";
try{
	$conn = new PDO("oci:dbname=".$tns,$db_username,$db_password);
} catch(PDOException $e){
	echo ($e->getMessage());
}
?>

If you are getting the "I am too dumb to find oci.h" error, try creating a variety of paths.
One variety uses just the major and minor of your OIC version (eg, 11.2 for 11.2.0.2) and another
variety uses client64 as well as client.

Something like this (for 11.2.0.2):
ln -s /usr/include/oracle/11.2.0.2/ /usr/include/oracle/11.2
ln -s /usr/include/oracle/11.2/client /usr/include/oracle/11.2/client64
ln -s /usr/lib/oracle/11.2.0.2/ /usr/lib/oracle/11.2
ln -s /usr/lib/oracle/11.2/client /usr/lib/oracle/11.2/client64

This should cpover your bases for 64-bit systems, as well as PHP patched to use the major.minor
version number only. See also PHP bug #44989

If oracle and oracle instant client has been installed, without db in the same host

For UNIX/LINUX, set $LD_LIBRARY_PATH appent your instant client path and client/lib path to it.

For windows, setyour path like this:

After set the path, set TNS_ADMIN environment, point to where tnsnames.ora is located.

Then you can use service name to connect to your DB:

<?php
$param = $_POST;
$db_username = "yourusername";
$db_password = "yourpassword";
$db = "oci:dbname=yoursid";
$conn = new PDO($db,$db_username,$db_password);
$name = $param['module'];
$file = $param['file'];
$stmt = $conn->exec("INSERT INTO AL_MODULE (AL_MODULENAME, AL_MODULEFILE) VALUES ('$name', '$file')");

?>

To enable PDO support on PHP for Oracle Instant Client 11.1.x, you should follow the syntax above in the
compile command, just as pointed by Andrew:

Bug #39312 Cannot install PDO_OCI

Desc:

I installed the instantclient library and when i try to run configure i get the following error:
checking for oci.h.. configure: error: I am too dumb to figure out where the include dir is in your
instant client install

reproduce code:

Here is my configure settings:
--with-oci8=instantclient,/usr/lib/oracle/10.1.0.3/client/lib --with-pdo-oci=instantclient,/usr/lib/oracle,10.1.0.3

Taking by default you have installed the OIC at /usr/lib/oracle (instant client and sdk at subfolder):

./configure --with-oci8=shared,instantclient,/usr/lib/oracle
--with-pdo-oci=instantclient,/usr/lib/oracle,11.1

Just saying your release version from the Oracle OIC

It compiles fine then

PDO_OCI DSN

PDO_OCI DSN - Connecting to Oracle databases

Desc:

The PDO_OCI Data Source Name (DSN) is composed of the following elements:

DSN prefix:
	The DSN prefix is oci:

dbname (Oracle Instant Client)
	The URI for the Oracle Instant Client connection takes the form of dbname=// hostname : port-number / database.
	If you are connecting to a database defined in tnsnames.ora, use only the name of the database:dbname = database.

charset:
	The client-side character set for the current environment handle.

Examples:

Example #1 PDO_OCI DSN examples

The following examples show a PDO_OCI DSN for connecting to Oracle databases:

// Connect to a database defined in tnsnames.ora
oci:dbname=mydb

// Connect using the Oracle Instant Client
oci:dbname=//localhost:1521/mydb

If you get the error: TNS: Could not resolve servicen ame

Remember that the PDO wants to use the default client, which will only use the tnsnames.ora in %ORACLE_HOME%\network\admin.
Check that file and make sure your service is defined in there.

Btw, there is a bug with pdo_oci8 with 9i - Do not use it. Make sure you just use pdo_oci.dll

ODBC and DB2 Functions (PDO_ODBC)

Intro:

PDO_ODBC is a driver that implements the PHP Data Objects (PDO) interface to enable access from PHP to
databases through ODBC drivers or through the IBM DB2 Call Level Interface (DB2 CLI) library. PDO_ODBC
currently supports three different "flavours" of database drivers:

ibm-db2
	Supports access to IBM DB2 Universal Database, Cloudscape, and Apache Derby servers through the free DB2 client.

unixODBC
	Supports access to database servers through the unixODBC driver manager and the database's own ODBC drivers.

Generic
	Offers a compile option for ODBC driver managers that are not explicitly supported by PDO_ODBC

On Windows, php_pdo_odbc.dll has to be enabled as extension in php.ini. It is linked against the Windows ODBC
Driver Manager so taht PHP can connect to any database cataloged as a System DSN, and is the recommended driver
for connecting to Microsoft SQL Server databases.

Installation:

PDO_ODBC on UNIX Systems

1. As of PHP 5.1, PDO_ODBC is included in the PHP source. You can compile the PDO_ODBC extension as either a 
static or shared module using the following configure commands.

ibm_db2

	./configure --with-pdo-odbc=ibm-db2,/opt/IBM/db2/V8.1/

	To build PDO_ODBC with the ibm-db2 flavour, you have to have previously installed the DB2 application 
	development headers on the same machine on which you are compiling PDO_ODBC. The DB2 application development
	headers are an installable option in the DB2 servers, and are also available as part of the DB2 Application
	Development Client freely avaialble for download from the IBM DB2 UNiversal Database.

	If you do not supply a location for the DB2 libraries and headers to the configure command, PDO_ODBC defaults
	to /home/db2inst1/sqllib.

unixODBC
	
	./configure --with-pdo-odbc=unixODBC,/usr/local

	If you do not supply a location for the unixODBC libraries and headers to the configure command,
	PDO_ODBC defaults to /usr/local.

generic
	
	./configure --with-pdo-odbc=generic,/usr/local,libname,ldflags,cflags

Runtime Configuration

The behaviour of these functions is affected by settings in php.ini

PDO_ODBC Configuration Options

Name 							default 			Changable 			Changelog

pdo_odbc.connection_pooling 	"strict" 			PHP_INI_ALL 		Available since PHP 5.1.0

pdo_odbc.db2_instance_name 		NULL 				PHP_INI_SYSTEM 		Available since PHP 5.1.1. This deprecated feature will
																		certainly be removed in the future.

For further details and definitions of the PHP_INI_* modes, see the Where a configuration setting may be set.

Here is a short explonation of the configuration directives:

pdo_odbc.connection_pooling string
	
	Whether to pool ODBC connections. Can be one of "strict", "relaxed" or "off" (equals to ""). The parameter
	describes how strict the connection manager should be when matching connection parameters to existing
	pooled connections. Stirct is the recommended default, and will result in the use of cached connections
	only when all the connection parameters match exactly. Relaxed will result in the use of cached connections
	when similar connection parameters are used. This can result in increased use of the cache, at hte risk
	of bleeding connection information betwene (for example) virtual hosts.

	This setting can only be changed from the php.ini file, and affects the entire process; any other modules
	loaded into the process that use the same ODBC libraries will be affected too, including the Unified ODBC extension.

	Warning: Relaxed matching should not be used on a shared server, for security reasons.

	Tip: Leave this setting as the default strict setting unless you have good reason to change it

pdo_odbc.db2_instance_name string
	
	if you compile PDO_ODBC using the db2 flavour, this setting sets teh value of the DB2INSTANCE environment
	variable on Linux and UNIX operating systems to the specified name of the DB2 instance. This enables
	PDO_ODBC to resolve the location of the DB2 libraries and make cataloged connections to DB2 databases.

	This setting can only be changed from the php.ini file, and affects the entire process; any other modules
	loaded into the process that use the same ODBC libraries will be affected too, including the Unified ODBC
	extension.

	This setting has no effect on Windows.

Table Of Contents

PDO_ODBC DSN - COnnecting to ODBC or DB2 databases

I just spent a couple of hours trying to track down the Exception "Could not find driver". This was despite
having ODBC and PDO_ODBC installed and all of the configuration seemed to be correct.

Turned out the problem was that i used ODBC in upper-case in the dsn. As soon as i changed the dns to
"odbc:database" it worked.

AS this code used to work a few months ago, this sudden case-sensitivity was new.

Using SQL Server Native Client 11.0 on Linux as PDO_ODBC driver:

Download the SQL Server native client 11.0 on linux ODBC driver

COnfiguration ODBC:

/usr/local/etc/odbcsys.ini
--
[SQL Server Native Client 11.0]
Description = Microsoft SQL Server ODBC Driver V1.0 for Linux
Driver = /opt/microsoft/sqlncli/lib64/libsqlncli-11.0.so.1720.0
UsageCount = 1

/usr/local/etc/odbc.ini
--
[MSSQLServer]
Driver = SQL Server Native Client 11.0
Description = Sample Database
Trace = Yes
Server =
Port = 1433
Database =

Test the connection:
mssql.php
--
<?php
	putenv('ODBCSYSINI=/usr/local/etc');
	putenv('ODBCINI=/usr/local/etc/odbc.ini');
	$username = '';
	$password = '';
	try {
		$dbh = new PDO("odbc:MSSQLServer",
						"$username",
						"$password"
						);
	} catch (PDOException $exception) {
		echo $exception->getMessage();
		exit;
	}
	echo var_dump($dbh);
	unset($dbh);
?>

Using SQL 2005, PDO_ODBC and datetime fields is a royal pain. MSDN documetantion on CAST CONVERT 
shows that there is supposed to be an implicit convert between character types and datetime types.
That is true, until you put it in a stored procedure and use variable declarations.

For instance this fails:

declare @date varchar;
SET @date = '20080101';
SELECT cast(@date AS datetime) AS poo

While this succeeds:

declare @date varchar(19);
SET @date = '20080101';
SELECT cast(@date AS datetime) AS poo

The PDO Driver appears to attempt an implicit conversion and so it fails whenever you try to insert
data into the datetime column types.

So to workaround this nuance in SQL, declare a char column type with explicit width. Then your implicit
type conversion will work.

If you want to avoid installing DB2 Connect and/or PECL modules ibm_db2 and PDO_IBM, you can also use
IBM DB2 databases through unixODBC.

If you ahve DB2 database on a i server you need to install IBM iAccess (http://www.ibm.com/systems/i/software/access/linux/index.html)
and unixODBC. Just install the libraries (rpm) and modify configurations in /etc/odbcinst.ini (sample configuration
in /opt/ibm/iSeriesAccess/unixodbcregistration) and /etc/odbc.ini

To my experience this is much easier than to install the DB2 Connect.

MSSQL - PHP on Apache - Linux Redhat

When using php 5.2.10 please beware of this error:

http://bugs.php.net/bug.php?id=42068

Bug #42068 zend_mm_heap corrupted error when freeing resultset (Works with PDO ODBC)

Desc:

Using Intersystems' Cache 64 bit ODBC driver (libcacheodbc.so) with unixODBC causes PHP 
5.2.3 to crash. (I never had a problem with the 32 bit driver). Also, using another ODBC
tool, like isql, works fine.

I have managed to track down this problem in PHP's source code, in php_odbc.c, in the function
PHP_FUNCTION(odbc_free_result), there are the following lines:

//Start fragment
ZEND_FETCH_RESOURCE(result, odbc_result *, pv_res, -1, "ODBC result", le_result);
if (result->values) {
	for (i = 0; i < result->numcols; i++) {
		if (result->values[i].value) {
			efree(result->values[i].value);
		}
	}
	efree(result->values);
	result->values = NULL;
}
//End fragment

Commenting out the line of:
efree(result->values);
causes PHP to Segfault.

Commenting out:
efree(result->values[i].value);
still gives the zend_mm_heap corrupted error.

When i comment out both it works. 

So what causes it? It is only with the 64 bit driver/PHP/Linux that this error occurs.
Using the 32 bit driver works. Other databases' ODBC drivers works fine too.

Note: This error was also present in PHP 5.2.1. In PHP 5.1.6, I got a "glibc double free detected"-error.

Reproduce code:

<?php
echo "Opening connection...\n";
$connection = odbc_connect($dsn,"",""); //connect to dsn
echo "Executing SQL...\n";
$result = odbc_do($connection,$sqlstring);
//Optional code to do something with resultset here
//The following line crashes PHP with zend_mm_heap corrupted
commenting out this line does not help since the result will be
//Freed automaticaly anyway
echo "Freeing...\n";
odbc_free_result($result);
echo "Closing...\n";
odbc_close($connection);
echo "Done.\n";
?>

Expected result:

Opening connection..
Executing SQL...
Freeing...
Closing...
Done.

Actual result:
Opening connection..
Executing SQL...
Freeing...
zend_mm_heap corrupted

Standard odbc_connect will not work, thus you must use pdo_odbc

COnnecting to MSSQL using pdo odbc - walthrough:

1. Download and configure FreeTDS with-unixodbc

./configure --prefix=/opt/SYSfreetds --with-unixodbc

make;make test; make install

2. install php-odbc and unixODBC

php-odbc-5.2.10-1.x86-64.rpm
unixODBC.x86_64.x86x64

3. Setup ODBC links

a)
Create a tds.driver file with the following contents:

[FreeTDS]
Description = v0.63 with protocol v8.0
Driver 		= /opt/SYSfreetds/lib/libtdsodbc.so

Register the ODBC driver - the tds.driver file

odbcinst -i -d -f tds.driver

b)

Create a tds.datasource file - ODBC Data Source with contents:

[SOURCENAME]
Driver=FreeTDS
Description=Test MS SQL Database with FreeTDS
Trace=No
Server=BobTheServer
Port=1433
TDS Version=8.0
Database=yourDBname

Register the ODBC data source

odbcinst -i -s -f tds.datasource

Beware that the odbc.ini file will be installed in the current users home directory. This may need
to be used if you are using a webserver as the apache home directory could be different.

Ensure .odbc.ini is in apaches home dir, possible "/var/www"

4. Test the ODBC link on the command line

isql -v SOURCENAME 'username' 'password'

Connected!

sql-statement
help [tablename]
quit

SQL>

5. Edit /etc/php.ini

Make sure the following is set:
	mssql.secure_connection = On

6. Restart apache gracefully

7. PHP to run:

<?php
$dbh = new PDO('odbc:SOURCENAME', 'username', 'password');
$stmt = $dbh->prepare("$query");
$stmt->execute();
while ($row = $stmt->fetch()) {
	print_r($row);
}
unset($dbh); unset($stmt);
?>

Trouble-shooting:

Please try strace / truss if you encounteri ssues. It could be you are referencing wrong libraries
somewhere.

Ensure you ahve restarted apache once the odbc files are in place

PDO_ODBC DSN

PDO_ODBC DSN - Connecting to ODBC or DB2 databases

Desc:

The PDO_ODBC Data Source Name (DSN) is composed of the following elements:

DSN prefix:
	The DNS prefix is odbc:. If you are connecting to a database cataloged in the ODBC driver manager or the DB2
	catalog, you can append the cataloged name of the database to the DSN.

DSN:
	The name of the database as cataloged in the ODBC driver manager or the DB2 Catalog. Alternatly, you can provide
	 a complete ODBC connection string to connect to a database as described at http://www.connectionstrings.com

UID:
	The name of the user for the connection. If you specify th user name in the DSN, PDO ignores the value of the
	user name argument in the PDO constructor.

PWD:
	The password of the user for the connection. If you specify the password in the DSN, PDO ignores the value
	of the password argument in the PDO Constructor.

Examples:

Example #1 PDO_ODBC DSN example (ODBC driver manager):

The following example shows a PDO_ODBC DSN for connecting to an ODBC database cataloged as testdb in the 
ODBC driver manager:

odbc:testdb

Example #2 PDO_ODBC DSN example (IBM DB2 uncataloged connection)

The following example shows a PDO_ODBC DSN for connecting to an IBM DB2 database named SAMPLE using the
full ODBC DSN syntax:

odbc:DRIVER={IBM DB2 ODBC DRIVER};HOSTNAME=localhost;PORT=50000;DATABASE=SAMPLE;PROTOCOL=TCPIP;
UID=db2inst1;PWD=ibmdb2;

Example #3 PDO_ODBC DSN example (Microsoft Access uncataloged connection)

The following example shows a PDO_ODBC DSN for connecting to a Microsoft Access database stored at
C:\db.mdb using the full ODBC DSN syntax:

odbc:Driver={Microsoft Access Driver (*.mdb)};Dbq=C:\\db.mdb;Uid=Admin

PostgreSQL Functions (PDO_PGSQL)

intro:

PDO_PGSQL is a driver that implements the PHP Data Objects (PDO) interface to enable access from
PHP to PostgreSQL databases.

Resource types:

This extension defines a stream resourced returned by PDO::pgsqlLOBOpen().

Installation:

Use --with-pdo-pgsql[=DIR] to install the PDO PostgreSQL extension, where the optional [=DIR]
is the PostgreSQL base install dir, or the path to pg_config:

$ ./configure --with-pdo-pgsql

PostgreSQL (PDO):

PDO_PGSQL DSN:

PDO_PGSQL DSN - Connecting to PostgreSQL databases

Desc:

The PDO_PGSQL Data Source Name (DSN) is composed of the following elements, delimited by
spaces or semicolons:

DSN prefix:
	The DSN prefix is pgsql:.

host:
	The hostname on which the database server resides.

port:
	The port on which the database server is running.

dbname:
	The name of the database.

user:
	The name of the user for the connection. If you specify the user name in the DSN, PDO
	ignores the value of the user name argument in the PDO constructor.

password:
	THe password of the user for the connection. If you specify the password in the DSN,
	PDO ignores the value of the password argument in the PDO constructor.

Note:
This bytea fields are returned as streams.

Examples:

Example #1 	PDO_PGSQL DSN examples

The following example shows a PDO_PGSQL DSN for connecting to a PostgreSQL database:

pgsql:host=localhost;port=5432;dbname=testdb;user=bruce;password=mypass

You can also connect to PostgreSQL via a UNIX domain socket by leaving the host empty.
This should have less overhead than using TCP e.g:

$dbh = new PDO('pgsql:user=exampleuser dbname=exampledb password=examplepass');

In fact as the C library call PQconnectdb underlies this implementation, you can supply anything
that this library call would take - the "pgsql:" prefix gets stripped off before PQconnectdb is
called, and if you supply any of the optional arguments (e.g user), then these arguments will
be added to the string that you supplied... Check the docs for your relevant PostgreSQL client
library e.g:

http://www.postgresql.org/docs/8.3/static/libpq-connect.html

If you really want, you can use ';'s to separate your args - these will just be converted
to spaces before PQconnectdb is called.

The PDO_PGSQL DSN should be seperated by semi-colons not spaces. It should follow the convention
like the rest of the PDO DSNs.

'pgsql:dbname=example;user=nobody;password=change_me;host=localhost'

PDO::pgsqlCopyFromArray

PDO::pgsqlCopyFromArray - Copy data from PHP array into table

Desc:

public bool PDO::pgsqlCopyFromArray ( string $table_name , array $rows [, string $delimiter = '\t' [, string $null_as =
	"\\\\N" [, string $fields ]]] )

Copies data from rows array to table_name using delimiter as fields delimiter and fields list

Params:

table_name: String containing table name

rows: Array of strings with fields separated by delimiter

delimiter: Delimiter used in rows array

null_as: How to interpet null values

fields: List of fields to insert

Return values:

Returns TRUE on success, or FALSE on failure.

If your $nullAs is '\\N', then you should use $nullAs as is in concatenation of cells of $rows,
but send to pgsqlCopyFromArray() escaped version. Also fifth arg $fields should be a SQL-valid
string for the column_names placeholder in COPY statement of PostgreSQL.

I provided my smart wrapper for pgsqlCopyFromArray() which do this automatically.

<?php
//@param PDO $db
//@param string $tableName
//@param string[] $fields List of fields names
//@param array[] $records Two-dimension array of cells (array of rows).
//@return boolean
function pgInsertByCopy (PDO $db, $tableName, array $fields, array $records) {
	static $delimiter = "\t", $nullAs = '\\N';

	$rows = [];

	foreach ($records as $record) {
		$record = array_map(
				function ($field) use( $record, $delimiter, $nullAs) {
					$value = array_key_exists($field, $record) ? $record[$field] : null;

					if (is_null($values)) {
						$value = $nullAs;
					} elseif (is_bool($value)) {
						$value = $value ? 't' : 'f';
					}

					$value = str_replace($delimiter, '', $value);
					///Convert multiline text to one line
					$value = addcslashes($value, "\0..\37");

					return $value;
				}, $fields);
		$rows[] = implode($delimiter, $record) . "\n";
	}

	return $db->pgsqlCopyFromArray($tableName, $rows, $delimiter, addslashes($nullAs), implode(',', $fields));
}
?>

PDO::pgsqlCopyFromFile:

PDO::pgsqlCopyFromFile - Copy data from file into table

Desc:

public bool PDO::pgsqlCopyFromFile ( string $table_name, string $filename [, string $delimiter = '\t' [, string
	$null_as = "\\\\N" [, string $fields ]]] )

Copies data from file specified by filename into table table_name using delimiter as fields delimiter 
and fields list.

Parameters:

table_name:
	String containing table name

filename:
	Filename containing data to import

delimiter:
	Delimiter used in file specified by filename

null_as:
	How to interpet null values

fields:
	List of fields to insert

Return values:
	Return TRUE on success, or FALSE on failure.

PDO::pgsqlCopyToArray:

PDO::pgsqlCopyToArray - Copy data from database table into PHP array

Desc:

public array PDO::pgsqlCopyToArray ( string $table_name , array $rows [, string $delimiter = '\t' [, string $null_as = "\\\\N" [, string $fields ]]] )

Copies data from table into array using delimiter as fields delimiter and fields list

Parameters:

table_name: String containing table name

delimiter: Delimiter used in rows array

null_as: How to interpet null values

fields: List of fields to export

Return values:

Returns an array of rows, or FALSE on failure.

PDO::pgsqlCopyToFile:

PDO::pgsqlCopyToFile - Copy data from table into file

Desc:

public bool PDO::pgsqlCopyToFile ( string $table_name , string $filename [, string $delimiter = '\t' [, string $null_as = "\\\\N" 
	[, string $fields ]]] )

Copies data from table into file specified by filename using delimiter as fields delimiter and fields list

Params:

table_name: String containing table name

filename: Filename to export data

delimiter: Delimiter used in file specified by filename

null_as: How to interpret null values

fields: List of fields to insert

Return  values:

Returns TRUE on success, or FALSE on failure.

PDO::pgsqlGetNotify:

PDO::pgsqlGetNotify - Get asynch notification

Desc:

public array PDO::pgsqlGetNotify ([ int $result_type = PDO::FETCH_USE_DEFAULT [, int $ms_timeout = 0 ]] )

Returns a result set representing a pending asynch notification

Params:

result_type: The format the result set should be returned as, represented as a PDO::FETCH_* constant.

ms_timeout: The length of time to wait for a response, in milliseconds.

Return values:

If one or more notifications is pending, returns a single row, with fields message and pid, otherwise
returns FALSE.

PDO::pgsqlGetPid:

PDO::pgsqlGetPid - Get the server PID

Desc:

public int PDO::pgsqlGetPid()

Returns the server's PID

Returns:

The server's PID

PDO::pgsqlLOBCreate:

PDO::pgsqlLOBCreate - Creates a new large object

Desc:

public string PDO::pgsqlLOBCreate()

PDO::pgsqlLOBCreate() creates a large object and returns the OID of that object. You may then
open a stream on the object using PDO::pgsqlLOBOpen() to read or write data to it.

The OID can be stored in columns of type OID and be used to reference the large object,
without causing the row to grow arbitrarily large. The large object will continue to live in the
database until it is removed by calling PDO::pgsqlLOBUnlink()

Large objects can be up to 2GB in size, but are cumbersome to use; you need to ensure that 
PDO::pgsqlLOBUnlink() is called prior to deleting the last row that references its OID from
your database.

In addition, large objects have no access controls. As an alternative, try the bytea column
type; recent versions of PostgreSQL allow bytea columns of up to 1GB in size and transparently
manage the storage for optimal row size.

Note: This functon must be called within a transaction

Reutrn Values:

Returns the OID of the newly created large objects on success, or FALSE on failure.

Examples:

Example #1 A PDO::pgsqlLOBCreate() example

This example creates a new large object and copies the content of a file into it.
The OID is then stored into a table.

<?php
$db = new PDO('pgsql:dbname=test host=localhost', $user, $pass);
$db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
$db->beginTransaction();

$oid = $db->pgsqlLOBCreate();
$stream = $db->pgsqlLOBOpen($oid, 'w');
$local = fopen($filename, 'rb');
stream_copy_to_stream($local, $stream);

$local = null;
$stream = null;
$stmt = $db->prepare("INSERT INTO BLOBS (ident, oid) VALUES (?, ?)");

$stmt->execute(array($some_id, $oid));
$db->commit();
?>

IMHO, there is a better way to handle the deletion of lob objects than the suggested here.
The programmer can easily forget to unlink the lob. With the following trigger , no
programmer actions are required.

By the way, one problem with bytea fields is that when you query the database, if you
ask for that field, the data is actually retrieved. When you query for and oid,
only the oid is retrieved and then you can open the lob whenever you want (if it is required).

CREATE OR REPLACE FUNCTION oidtable_after_update_delete()
	RETURNS "trigger" AS
$BODY$
BEGIN
	IF (TG_OP = 'UPDATE') THEN
		IF (OLD.oidfield = NEW.oidfield) OR (OLD.oidfield IS NULL) THEN
			RETURN NEW;
		END IF;
	END IF;
	IF (EXISTS (SELECT 1 FROM pg_largeobject WHERE loid = OLD.oidfield)) THEN
		PERFORM LO_UNLINK (OLD.oidfield);
	END IF;
	RETURN NEW;
END;
$BODY$
	LANGUAGE 'plgsql' VOLATILE;

CREATE TRIGGER oidtable_after_update_delete
	AFTER UPDATE OR DELETE
	ON oidtable
	FOR EACH ROW
	EXECUTE PROCEDURE oidtable_after_update_delete();

PDO::pgsqlLOBOpen:

PDO::pgsqlLOBOpen - Opens an existing large object stream

Desc:

public resource PDO::pgsqlLOBOpen ( string $oid [, string $mode = "rb" ] )

PDO::pgsqlLOBOpen() opens a stream to access the data referenced by oid. If mode
is r, the stream is opened for reading, if mode is w, then the stream will be
opened for writing. You can use all the usual filesystem functions, such as fread(),
fwrite() and fgets() to manipulate the contents of the stream.

Note: This function, and all manipulations of the large object, must be called and 
carried out within a transaction.

Params:

oid: A large object identifier

mode: If mode is r, open the stream for reading. If mode is w, open the stream for writing.

Return values:

Returns a stream resource on success or FALSE on failure.

Examples:

Example #1 A PDO::pgsqlLOBOpen() example:

Following on from the PDO::pgsqlLOBCreate() example, this code snippet retrieves the large
object from the database and outputs it to the browser.

<?php
$db = new PDO('pgsql:dbname=test host=localhost', $user, $pass);
$db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
$db->beginTransaction();

$stmt = $db->prepare("select oid from BLOBS where ident = ?");
$stmt->execute(array($some_id));
$stmt->bindColumn('oid', $oid, PDO::PARAM_STR);

$stmt->fetch(PDO::FETCH_BOUND);
$stream = $db->pgsqlLOBOpen($oid, 'r');
header("Content-type: application/octet-stream");
fpassthru($stream);
?>

THis is what worked for me. If you ahve the oid, then all you need to do is:

<?php
$pdo = new PDO($dsn, $user, $pass);
$pdo->beginTransaction();
$data = $pdo->pgsqlLOBOpen($oid, 'r');

header("Content-Type: $mime");
//ANy other headers
fpassthru($data); // echo stream_get_contents($data); also works
?>

The beginTransaction() is required, if you want to $pdo->commit()  (it is not required)
then do it after the fpassthru.

On a side note, those using Zend Framework can call getConnection() on the standard PDO
database object which will get them the $pdo object as above. Then just remember to disableLayout()
and setNoRender() as necessary.

Also, remember that fread() will only parse the first 8192 bytes from the stream. use:

<?php
$data = stream_get_contents($stream);
?>

If you ahve a larger output to parse.

The above example is missing some data. After spending several hours trying to get it work,
Jeff Davis from the PostgreSQL channel on IRC (freenode) figured out what was missing.

The below example will work, but you have to insert the MIME type and file size of the
large object that you are storing, so you can use that data for extraction.

<?php
$db = new PDO('pgsql:dbname=test host=localhost', $user, $pass);
$db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

$db->beginTransaction();
$stmt = $db->prepare("SELECT oid, blob_type, filesize FROM BLOBS WHERE ident = ?");
$stmt->execute(array($some_id));

$stmt->bindColumn('oid', $lob, PDO::PARAM_LOB);
$stmt->bindColumn('blob_type', $blob_type, PDO::PARAM_STR);
$stmt->bindColumn('filesize', $filesize, PDO::PARAM_STR);

$stmt->fetch(PDO::FETCH_BOUND);
$stream = $pdo->pgsqlLOBOpen($lob, 'r');
$data = fread($stream, $filesize);
header("Content-type: $blob_type");
echo $data;
?>

Also fpassthru() will just give this result: Warning: fpassthru(): supplied argument is not a valid
stream resource in ...

Use echo or print instead.

PDO::pgsqlLOBUnlink:

PDO::pgsqlLOBUnlink - Deletes the large object

Desc:

public bool PDO::pgsqlLOBUnlink ( string $oid )

Deletes a large object from the database identified by OID.

Note: This function must be called within a transaction.

Params:

oid: A large object identifier

Return values:

Returns TRUE on success, or FALSE on failure.

Examples:

Example #1 A PDO::pgsqlLOBUnlink8) example:

This example unlinks a large object from the database prior to deleting the row that references it
from the blobs table we have been using in our PDO::pgsqlLOBCreate() and PDO::pgsqlLOBOpen() examples.

<?php
$db = new PDO('pgsql:dbname=test host=localhost', $user, $pass);
$db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
$db->beginTransaction();

$db->pgsqlLOBUnlink($oid);
$stmt = $db->prepare("DELETE FROM BLOBS where ident = ?");
$stmt->execute(array($some_id));
$db->commit();
?>

SQLite Functions (PDO_SQLITE):

Intro:

PDO_SQLITE is a driver that implements the PHP Data Objects (PDO) interface to enable access to
SQLite 3 databases.

In php 5.1, the SQLite extension also provides a driver for SQlite2 databases; While it is not technically
a part of the PDO_SQLITE driver, it behaves similarly, so it is documented alongside it. The SQLite 2 driver
for PDO is provided primarily to make it easier to import legacy SQlite 2 database files into an application
that uses the faster, more efficient SQLite 3 driver. As a result, the SQLite 2 driver is not as feature-rich
as the SQLite 3 driver.

Note: PDO_SQLITE allows using strings apart from streams together with PDO::PARAM_LOB.

Installation:

As of pHP 5.4 sqlite is no longer part of PHP and is only available through PECL.

INstead of compiling an old version of SQLite to create a database using an older database format
that the version of SQLite bundled with PDO can handle, you can (much more easily) just run the
query "PRAGMA legacy_file_format = TRUE;" BEFORE creating the database (if you ahve an existing
database, run ".dump" from the sqlite shell on your db, run the sqlite shell on a new db, run the
PRAGMA, then paste the contents of the .dump)

That will ensure SQlite creates a DB readable by SQLite 3.0 and later

If you receive an error while trying to write a sqlite database (update, delete, drop):

Warning: PDO::query() [function.query]: SQLSTATE[HY000]: General error: 1 unable to open database

The folder that houses the db file must be writable

Note that as of the date of this post, PDO_SQLITE will not interact with database files created
with the current version of the SQLite console application, sqlite-3.3.6

It is currently necessary to obtain version 3.2.8, available from http://www.sqlite.org/ but only
by entering the URI manually, as there is no link. Go to http://www.sqlite.org/download.html and 
find the URI of the version you are looking for, then make the appropiate versions number substitution.

PDO_SQLITE DSN:

PDO_SQLITE DSN - Connecting to SQlite databases

Desc:

The PDO_SQLITE Data Source Name (DSN) is composed of the following elements:

DSN prefix (SQLite 3)
	The DSN prefix is sqlite:

		To access a database on disk, append the absolute path to the DSN prefix.

		TO create a db in memory, append :memory: to the DSN prefix

DSN prefix (SQLite 2)
	The SQLite extension in PHP 5.1 provides a PDO driver that supports accessing and creating
	SQLite 2 databases. This enables you to access databases you may have created within the
	SQLite extension in previous versions of PHP.

	Note: The sqlite2 driver is only available in PHP 5.1.x if you have enabled both PDO and
	ext/sqlite. It is not currently available via PECL.

	The DSN prefix for connecting to SQLite 2 database is sqlite2:.

		To access a database on disk, append the absolute path to the DSN prefix.

		To create a database in memory, append :memory: to the DSN prefix.

Examples:

Example #1 PDO_SQLITE DSN Examples

The following examples show PDO_SQLITE DSN for connecting to SQLite databases:

sqlite:/opt/databases/mydb.sq3
sqlite::memory:
sqlite2:/opt/databases/mydb.sq2
sqlite2::memory:

In memory, sqlite has some limitations. The memory space could be the request, the session, but no
way seems documented to share a base in memory among users.

For a request, open your base with the code $pdo = new PDO('sqlite::memory:');
and your base will disppear on the next request.

For session persistency:

<?php
$pdo = new PDO(
	'sqlite::memory:',
	null,
	null,
	array(PDO::ATTR_PERSISTENT => true)
);
?>

Do not forget that "extension=php_pdo_sqlite.dll" has to be enabled in php.ini (if you
use xampp it will be disabled by default)

SQLite sometimes uses additional files in the same folder while writing to the DB. These files
can sometimes be seen and usually contain the name of your DB and the word 'journal' in their
filename.

Security wise, it might be a good idea to store the SQLite database in a separate folder to
shield teh rest from user www.

The directory that contains your sqlite db, must be writable by the web server. Making just
the file writable will not work.

Some notes that may or may not be obvious

In general, when using an in-memory (:memory:) database from within a PHP script (such as code in a index.php
file for a web user), the memory used for the database exists only as long as the PHP code is running.

Usually, this is only as long as it takes to deliver output back to the web server trying to serve the web
page to the client. There is no way (that i know of, please correct me if i am wrong), to share an in-memory
database across different web connections, including different multiple connections from the same client.

This does include "persistent" connections. The reason for this is because in-memory databases are in-memory
databases, and the memory allocated by the web server/PHP processor is allocated and released "on the fly".
Otherwise, web servers which serve thousands of web pages would quickly consume all available memory
(and swap pace), and come to a grinding halt when the system no longer has available memory to handle
more requests.

If you need to share data across sessions, connections, or scripts, you will need to use a database file
in a folder/directory which is *writable* by the web server/PHP extension, as SQLite3 may use some
temporary files while working with the database. (In my Debian Linux installation, this is the "www-data"
psuedo-user/group.) (You can consult the SQLite3 documentation if you wish to know what temporary files
it uses; They are well-documented).

In short, it is a logical error to think of in-memory databases as anything other than very short-term
temporary databases. They may be useful if you only wish to work with a subset of a larger db within
 a single web page AND only while the PHP script is generating the web page.

 That is, you cannot use in-memory dbs to store a user's "shopping cart", for example, because a shopping
 cart would still need to load many different web pages, invoking many different PHP scripts, each with
 their own memory space. Likewise, once PHP has generated the output of the web page for the server to
 send on to the client, PHP is no longer "part of the picture", and any memory it had allocated may be
 freed for other uses - including your in-memory database.

 This is not a lmitation of the web server, PHP or SQLite, but of how OS works in general to share
 limited resources (such as memory) between processes/users/connections/etc.

PDO::sqliteCreateAggregate:

PDO::sqliteCreateAggregate - Registers an aggregating User Defined Function for use in SQL statements

Desc:

public bool PDO::sqliteCreateAggregate ( string $function_name, callable $step_func, callable $finalize_func [,
	int $num_args ] )

Warning: THis function is experimental. The behaviour of this function, its name and surrounding documentation
may change without notice in a future release of PHP. This function should be used at your own risk.

This method is similar to PDO::sqliteCreateFunction except that it registers functions that can be used to
calculate a result aggregated across all the rows of a query.

The key difference between this method and PDO::sqliteCreateFunction is that two functions are required
to manage the aggregate.

Params:

function_name: The name of the function used in SQL statements.

step_func: Callback function called for each row of the result set. Your PHP function should
	accumulate the result and store it in teh aggregation context.

This function needs to be defined as:

mixed step ( mixed $context, int $rownumber, mixed $value1 [, mixed $value2 [, mixed $.. ]] )

Context will be NULL for the first row, on subsequent rows it will have the value that was previously
returned from the step function; you should use this to maintain the aggregate state.

rownumber will hold the current row number.

The return value of this function will be used as the context argument in the next call of the
step or finalize functions.

finalize_func:

Callback function to aggregate the "stepped" data from each row. Once all the rows have been processed,
this function will be called and it should then take the data from the aggregation context and return
the result. Callback functions should return a type understood by SQLite (ie. scalar type)

This function needs to be defined as:

mixed fini ( mixed $context, int $rownumber )

context will hold the return value from the very last call to the step function.

rownumber will hold the number of rows over which the aggregate was performed.

The return value of this function will be used as the return value for the aggregate.

num_args:

Hint to the SQLite parser if the callback function accepts a predetermined number of arguments.

Return values:

Returns TRUE on success, or FALSE on failure.

Examples:

Example #1 max_length aggregation function example

<?php
$data = array(
	'one',
	'two',
	'three',
	'four',
	'five',
	'six',
	'seven',
	'eight',
	'nine',
	'ten',
	);
$db = new PDO('sqlite::memory:');
$db->exec("CREATE TABLE strings(a)");
$insert = $db->prepare('INSERT INTO strings VALUES (?)');

foreach ($data as $str) {
	$insert->execute(array($str));
}
$insert = null;

function max_len_step(&$context, $rownumber, $string)
{
	if (strlen($string) > $context) {
		$context = strlen($string);
	}
	return $context;
}

function max_len_finalize(&$context, $rownumber)
{
	return $context === null ? 0 : $context;
}

$db->sqliteCreateAggregate('max_len', 'max_len_step', 'max_len_finalize');

var_dump($db->query('SELECT max_len(a) from strings')->fetchAll());

?>

IN this example, we are creating an aggregating function that will calculate the length of
the longest string in one of the columns of the table. 

For each row, the max_len_step function is called and passed a context parameter.
This context parameter is just like any other PHP variable and be set to hold an array
or even an object value. In this example, we are simply using it to hold the maximum length
we have seen so far; if the string has a length longer than the current maximum, we update the
context to hold this new maximum length.

After all of the rows have been processed, SQLite calls the max_len_finalize function to determine
the aggregate result. Here, we could perform some kind of calculation based on the data found in the
context. In our simple example though, we have been calculating the result as the query progressed,
so we simply need to return the context value.

TIP: It is NOT recommended for you to store a copy of the value in the context and then process them
at the end, as you would cause SQLite to use a lot of memory to process the query - just think of
how much memory you would need if a million rows were stored in memory, each containing a string 32
bytes in length.

Typ: You can use PDO::sqliteCreateFunction and PDO::sqliteCreateAggregate to override SQLite native
SQL functions.

Note: This method is not available with the SQLite2 driver. Use the old style sqlite APIs for that
instead.

PDO::sqliteCreateCollation:

PDO::sqliteCreateCollation - Registers a User Defined Function for use as a collating function in
SQL statements.

Desc:

public bool PDO::sqliteCreateCollation ( string $name, callable $callback )

Warning: This function is EXPERIMENTAL. The behaviour of this function, its name, and surrounding
documentation may change without notice in a future release of PHP. This function should be used
at your own risk.

Params:

name: Name of the SQL collating function to be created or redefined.

callback: The name of a PHP function or user-defined function to apply as a callback,
defining the behavior of the collation. It should accept two strings and return as
strcmp() does, i.e, it should return -1, 1, or 0 if the first string sorts before, sorts
after or is equal to the second.

This function needs to be defined as:

int collation ( string $string1 , string $string2 )

Returns:

Returns TRUE onsuccess, false on failure.

Examples:

Example #1 PDO::sqliteCreateCollation() example:

<?php
$db = new PDO('sqlite::memory:');
$db->exec("CREATE TABLE test (col1 string)");
$db->exec("INSERT INTO test VALUES ('a1')");
$db->exec("INSERT INTO test VALUES ('a10')");
$db->exec("INSERT INTO test VALUES ('a2')");

$db->sqliteCreateCollation('NATURAL_CMP', 'strnatcmp');
foreach ($db->query("SELECT col1 FROM test ORDER BY col1") as $row) {
	echo $row['col1'] . "\n";
}
echo "\n";

foreach ($db->query("SELECT col1 FROM test ORDER BY col1 COLLATE NATURAL_CMP") as $row) {
	echo $row['col1'] . "\n";
}
?>

The above will output:

a1
a10
a2


a1
a2
a10

Notes:

This method is not available with the SQLite2 driver. Use the old style sqlite API for that instead.

PDO::sqliteCreateFunction:

PDO::sqliteCreateFunction - Registers a User Defined Function for use in SQL statements.

Desc:

public bool PDO::sqliteCreateFunction ( string $function_name, callable $callback [, int $num_args = -1 [, int $flags = 0 ]] )

Warning: This function is experimental. The behaviour of this function, its name and surrounding documentation may
change without notice in a future release of PHP. This function should be used at your own risk.

This method allows you to register a PHP function with SQLite as an UDF (User Defined Function), so that it can
be called from within your SQL statements..

The UDF can be used in any SQL statement that can call functions, such as SELECT and UPDATE statements 
and also in triggers.

Params:

function_name: The name of the function in SQL statements.

callback: Callback function to handle the defined SQL function.

Note: Callback functions should return a type understood by SQLite (i.e scalar type)

num_args: The number of arguments that the SQL function takes. If this parameter is -1, then the SQL function
may take any number of arguments.

flags: A bitwise conjunction of flags. Currently, only PDO::SQLITE_DETERMINISTIC is supported, which specifies
that the function always returns the same inputs within a single SQL statement.

Return values:

returns true on success, or FALSE on failure.

Changelog:

Version 			Desc

PHP 7.1.4 			The flags has been added.

Examples:

Example #1 PDO::sqliteCreateFunction() example

<?php
function md5_and_reverse($string)
{
	return strrev(md5($string));
}

$db = new PDO('sqlite:sqlitedb');
$db->sqliteCreateFunction('md5rev', 'md5_and_reverse', 1);
$rows = $db->query('SELECT md5rev(filename) FROM files')->fetchAll();
?>

In this example, we have a function that calculates the md5 sum of a string, and then reverse it. When the
SQL statement executes, it returns the value of the filename transformed by our function. The data returned
in $rows contains the processed result.

The beauty of this technique is that you do not need to process the result using a foreach loop after you
have queried for the data.

Tip: You can use PDO::sqliteCreateFunction and PDO::sqliteCreateAggregate to override SQLite native SQL
functions.

Note: This method is not available with the SQLite2 driver. Use the old style sqlite API for that instead.

Groups looks like this '1,2,3,999'

<?php
//int strpos ( string $haystack , mixed $needle [, int $offset = 0 ] )
$dbUser = new PDO('sqlite:'.ROOT.'/var/db/users.db3');
$dbUser->sqliteCreateFunction('strpos', 'strpos', 2);
$sql = 'SELECT username FROM users WHERE strpos(groups,",2,");';

$rows = $dbUser->query($sql)->fetchAll(PDO::FETCH_ASSOC);
print_r($rows);
?>

4D Functions (PDO_4D):

Introduction:

Warning: This extension is EXPERIMENTAL. The behaviour of this extension including the names of its
functions and any other documentation surrounding this extension may change without notice in a future
release of PHP. This extension should be used at your own risk.

PDO_4D is a driver that implements the PHP Data Objects (PDO) interface to enable access from
PHP to 4D databases.

4D is an integrated platform that speeds and simplifies the development and deployment of business
applications, used in over 70 countries, by a community of thousands of developers and vertical
solution providers, with millions of end-users worldwide.

By offering a suite of integrated tools such as ANSI SQL relational and transactional database,
a graphical development enviroment, a fourth-generation language with over 1000 high-level commands,
a built-in HTTP server, application server, etc. 4D facilitates the creation and maintenance of applications
from one to hunderds of simultaneous users, whether on Windows, Mac or from any WEb client.

4D is also an open platform, offering a complete API for plug-in creation, including various connectors
that allow it to act as a back-end or front-end for many envs (Oracle via OCI, SOAP client or server,
Flex data source, all ODBC databases, XML over HTTP, etc.)

In addition to the ability to interact with 4D applications across Web Services, 4D databases
can now be directly accesed using the PDO_4D driver.

More details about the 4D development env on http://www.4d.com/

PDO_4D is known to work with 4D versions 12 beta nad up, for Max OS X and Windows. Older
plat-forms may work, but are unsupported.

Table of Contents:

PDO_4D DSN - Connecting to 4D SQL server

Constants for PDO_4D - Constants for PDO_4D

SQL types with PDO_4D and PHP - SQL types with PDO_4D and PHP

SQL acceptable by 4D - PDO and SQL 4D

Examples with PDO_4D - Examples PDO_4D

4D (PDO)

PDO_4D DSN:

PDO_4D DSN - Connecting to 4D SQL server

Desc:

The PDO_4D DSN consits of:

DSN prefix
	The DSN prefix is 4D:.

host
	The host on which the 4D SQL server is.

port
	The port number for the server. This is optional.

user
	The login name when connecting to the database

password
	The password for the above login.

dbname
	The name of the database. This parameter is optional, and it is not used.

charset
	The 4D character set

Examples:

Example #1 DSN examples for PDO_4D

The following examples has two DSN for PDO_4D, that connects to a 4D database:

4D:host=localhost;charset=UTF-8

Other possible values:
4D:host=localhost
4D:

Constants for PDO_4D:

Constants for PDO_4D - Constants for PDO_4D

Predefined Constants:

The constants below are defined by this driver, and will only be available when the
extension has been either compiled into PHP or dynamically loaded at runtime. In addition,
these driver-specific constants should only be used if you are using this driver.

Using driver-specific attributes with another driver may result in unexpected behaviour.
PDO::getAttribute() may be used to obtain the PDO_ATTR_DRIVER_NAME attribute to check
the driver, if your code can run against multiple drivers.

PDO::FOUND_ATTR_CHARSET (integer):
	Change the charset in which 4D returns data. (Default is UTF-8)

PDO::FOUND_ATTR_PREFERRED_IMAGE_TYPES (integer):
	The requested format of the image, when selecting a row with a column type PICTURE.
	It may be any type that 4D supports.

SQL types with PDO_4D and PHP:

SQL types with PDO_4D and PHP - SQL types with PDO_4D and PHP

Supported SQL types

Type SQL 4D 			Equivalent 4D 			Note

ALPHA_NUMERIC 			TEXT

VARCHAR 				TEXT

TEXT 					TEXT

TIMESTAMP 				DATE

INTERVAL 				HOUR

DURATION 				HOUR

BOOLEAN 				BOOLEAN

BIT 					BOOLEAN

BYTE 					INT32

INT16 					SMALLINT

SMALLINT 				SMALLINT

INT32 					INT32

INT 					INT32

INT64 					INT64

NUMERIC 				INT64

REAL 					REAL 				Unsupported (use VARCHAR conversion)

FLOAT 					FLOAT 				Unsupported (use VARCHAR conversion)

DOUBLE PRECISION 		FLOAT

BLOB 					BLOB 				Must use a prepared statement, and PDO::PARAM_LOB

BIT VARYING 			BLOB 				Must use a prepared statement, and PDO::PARAM_LOB

CLOB 					TEXT

PICTURE 				PICTURE 			Must use a prepared statement, and PDO::PARAM_LOB

SQL acceptable by 4D:

SQL acceptable by 4D - PDO and SQL 4D

Desc:

4D implements strictly the ANSI 89 standard, and have it enforced. It is highly recommended to read
the 4D SQL documentation to learn about the available commands. The URL of the manual is: http://doc.4d.com/
Below is a list of 4D SQL characteristics: it is not exhaustive, but may serve as an introduction.

Characteristics of 4D SQL

Characteristics 		Alternative 						Note

INTEGER 				Modify the SQL to use INT. 			INT is the supported integer type in 4Dv12.0

CHAR 					Use VARCHAR instead. 				Unsupported in 4Dv12.0

UNION 					Unsupported. Make separate queries. Unsupported in 4Dv12.0

SELECT 1+1; 			SELECT 1 + 1 FROM_USER_SCHEMAS; 	FROM is required

FLOAT 					Cast the FLOAT value into a FLOAT 	Unsupported in current versions of the PDO_4D driver 
						or STRING, with an SQL 4D function
						(CAST, ROUND, TRUNC or TRUNCATE)

Strong typing 			Take care your SQL query, or your 	One must provide the right type that 4D expect. 
						PHP code provides data with the 	One cannot insert '1' (as string) in an INTEGER Column.
						expected type

PDO::execute($row)(): 	Use the prepared statements, 		The PDO extension cast all values through execute() as 
only works if all the 	and use the right types. 			string, and expect the SQL database to parse the values.
table's column are of
type TEXT or VARCHAR

SELECT NULL FROM  		Do not use NULL constants. 			It is not allowed to use the NULL constant in the select
TABLE 					Extract them from the table 		list

SHOW TABLES 			Use system tables 					The list of tables, schemas, index, etc are in these system
															tables: _USER_TABLES, _USER_COLUMNS, _USER_INDEXES,
															_USER_CONSTRAINTS, _USER_IND_COLUMNS, _USER_CONS_COLUMNS and
															_USER_SCHEMAS.

SQL structure delimiter Use the following function to 		To escape SQL elements names (tables, fields, users, groups, schema,
						protect SQL elements: function 		primary key, etc.) The whole identifier must be beween square brackets, 
						sqlEscapeElement(elem) { return 	and the closing brackets ']' must be doubled.
						'[' . str_replace(']',']]',$elem)
						.']';}

Examples with PDO_4D:

Examples with PDO_4D - Examples PDO_4D

This basic example shows how to connect, execute a query, read data and disconnect from
a 4DL SQL server.

Example #1 Basic example with PDO_4D

<?php
$dsn = '4D:host=localhost;charset=UTF-8';
$user = 'test';
$pass = 'test';

//Connection to the 4D SQL server
$db = new PDO($dsn, $user, $pass);

try {
	$db->exec('CREATE TABLE test(id varCHAR(1) NOT NULL, val VARCHAR(10))');
} catch (PDOException $e) {
	die("Error 4D : " . $e->getMessage());
}

$db->exec("INSERT INTO test VALUES('A', 'B')");
$db->exec("INSERT INTO test VALUES('C', 'D')");
$db->exec("INSERT INTO test VALUES('E', 'F')");

$stmt = $db->prepare('SELECT id, val from test');

$stmt->execute();
print_r($stmt->fetchAll());

unset($stmt);
unset($db);
?>

The above will output:

Array
(
	[0] => Array
		(
			[ID] => A
			[0] => A
			[VAL] => B
			[1] => B
		)

	[1] => Array
		(
			[ID] => C
			[0] => C
			[VAL] => D
			[1] => d
		)

	[2] => Array
		(
			[ID] => E
			[0] => E
			[VAL] => F
			[1] => F
		)
)

This example shows how to execute a query in 4D language, and how to read the
result through PDO_4D.

Example #2 Accessing 4D language from pdo_4d

Set up a 4D method, called method. Make sure in the method properties that the option
Available via SQL is checked. The 4D code is the following.

C_TEXT($0)
$0:=Application Version(*)

The PHP code to use the above 4D method is:

<?php
$dsn = '4D:host=localhost;charset=UTF-8';
$user = 'test';
$pass = 'test';

//Connection to the 4D server
$db = new PDO($dsn, $user, $pass);

$stmt = $db->prepare('SELECT {FN method() AS VARCHAR } FROM _USER_SCHEMAS LIMIT 1');

$stmt->execute();
print_r($stmt->fetchAll());

unset($stmt);
unset($db);
?>

The above example will output:

(
	[0] => Array
		(
			[<expression>] => F001140
			[0] => F0011140
		)
)

Example #3 Escaping 4D table names

This examples illustrates how to escape characters in a 4D SQL query

<?php
$dsn = '4D:host=localhost;charset=UTF-8';
$user = 'test';
$pass = 'test';

//Connection to 4D server 4D
$db = new PDO($dsn, $user, $pass);

$objects = array('[', ']', '[]', '][', '[[', ']]', '[[[', ']]]', 'TBL ]]32[23');

foreach($objects as $id => $object) {
	$object = str_replace(']', ']]', $object);
	print "$object\n";

	$db->exec('CREATE TABLE IF NOT EXISTS ['.$object.'](['.$object.'] FLOAT)');

	$req = "INSERT INTO [$object] ([$object]) VALUES ($id);";
	$db->query($req);

	$q = $db->prepare("SELECT [$object] FROM [$object]");
	$q->execute();
	$x[] = $q->fetch(PDO::FETCH_NUM);

	$db->exec('DROP TABLE ['.$object.'];');
}
?>

The above will output:

[
]]
[]]
]][
[[
]]]]
[[[
]]]]]]
TBL ]]]]]32[23

Back to PDO quote:

Params:

string: The string to be quoted.

parameter_type: Provides a data type hint for drivers that have alternate quoting styles.

Return Values:

Returns a quoted string that is theoretically safe to pass into an SQL statement. Returns FALSE
if the driver does not support quoting in this way.

Examples:

Example #1 Quoting a normal string

<?php
$conn = new PDO('sqlite:/home/lynn/music.sql3');

//Simple string
$string = 'Nice';
print "Unquoted string: $string\n";
print "Quoted string: " . $conn->quote($string) . "\n";
?>

The above will output:

Unquoted string: Nice
Quoted string: 'Nice'

Example #2 Quoting a dangerous string

<?php
$conn = new PDO('sqlite:/home/lynn/music.sql3');

//Dangerous string
$string = 'Naughty \' string';
print "Unquoted string: $string\n";
print "Quoted string:" . $conn->quote($string) . "\n";
?>

The above will output:

Unquoted string: Naughty ' string
Quoted string: 'Naughty'' string'

Example #3 Quoting a complex string

<?php
$conn = new PDO('sqlite:/home/lynn/music.sql3');

//Complex string
$string = "Co'mpl''ex \"st'\"ring";
print "Unquoted string: $string\n";
print "Quoted string: " . $conn->quote($string) . "\n";
?>

The above example will output:

Unquoted string: Co'mpl''ex "st'"ring
Quoted string: 'Co''mpl''''ex "st''"ring'

When converting from the old mysql_ functions to PDO, note that the quote function is not exactly the same
as the old mysql_real_escape_string function. It escapes, but also adds quotes; hence the name.

After i replaced mysql_real_escape_string with $pdo->quote, it took me a bit to figure out why my strings
were turning up in results with quotes around them. 

One have to understand that string formatting has nothing to do with identifiers.
And thus string formatting should NEVER ever be used to format an identifier ( table of field name)
To quote an identifier, you have to format it as identifier, not as string.
To do so, you have to:

- Enclose identifier in backticks.
- Escape backticks inside by doubling them

So, the code would be:
<?php
function quoteIdent($field) {
	return "`".str_replace("`","``",$field)."`";
}
?>

This will make your identifier properly formatted and thus immune to injection

However, there is another possible attack vector - using dynamical identifiers in the query
may give an outsider control over fields they are not allowed to:
Say, a field user_role in the users table and a dynamically built INSERT query based on a 
$_POST array may allow a privilege escalation with easily forged $_POST array.

Or a select query which let a user to choose fields to display may reveal some sensitive
information to attacker.

To prevent this kind of attack yet keep queries dynamic, one ought to use the WHITELISTING approach.

Every dynamical identifier have to be checked against a hardcoded whitelist like this:

<?php
$allowed = array("name", "price", "qty");
$key = array_search($_GET['field'], $allowed);
if ($key == false) {
	throw new Exception('Wrong field name');
}
$field = $db->quoteIdent($allowed[$key]);
$query = "SELECT $field FROM t"; //value is safe
?>

(Personally, i would not use a query like this, but that is just an example of using a dynamical
identifier in the query)

And similar approach have to be used when filtering dynamical arrays for insert and update:


<?php
function filterArray($input, $allowed)
{
	foreach(array_keys($input) as $key)
	{
		if(!in_array($key,$allowed))
		{
			unset($input[$key]);
		}
	}
	return $input;
}
//used like this
$allowed = array('title','url','body', 'rating', 'term', 'type');
$data = $db->filterArray($_POST,$allowed);
//$data now contains allowed fields only
// and can be used to create INSERT or UPDATE query dynamically
?>

This function also converts new lines to \r\n

Note that this function just does what the documentation says: It escapes special chars
in strings.

It does NOT - however - detect a "NULL" value. If the value you try to quote is "NULL" it will
return the same value as when you process an empty string (-> ''), not the text "NULL".

PDO::rollBack:

PDO::rollBack - Rolls back a transaction

Desc:

public bool PDO::rollBack()

Rolls back the current transaction, as initiated by PDO::beginTransaction().

If the database was set to autocommit mode, this function will restore autocommit mode
after it has rolled back the transaction.

Some databases, including MySQL, automatically issue an implicit COMMIT when a database definition
language (DDL) statement such as DROP TABLE or CREATE TABLE is issued within a transaction.

The implicit COMMIT will prevent you from rolling back any other changes within the transaction
boundary.

Return values:

Returns TRUE on success, or FALSE on failure.

Errors/Exceptions:

Throws a PDOException if there is no active transaction.

Note: An exception is raised even when the PDO::ATTR_ERRMODE attribute is not PDO::ERRMODE_EXCEPTION.

Examples:

Example #1 Roll back a transaction

The following example begins a transaction and issues two statements that modify the database before
rolling back the changes. On MySQL, however, the DROP TABLE statement automatically commits the transaction
so that none of the changes in the transaction are rolled back.

<?php
//begin a transaction, turning off autocommit
$dbh->beginTransaction();


//Change the db schema and data
$sth = $dbh->exec("DROP TABLE fruit");
$sth = $dbh->exec("UPDATE dessert
	SET name = 'hamburger'");

//Recognize mistake and roll back changes
$dbh->rollBack();

//database connection is now back in autocommit mode
?>

Just a quick (and perhaps obvious) note for MySQL users:

Do not scratch your head if it is not working if you are using a MyISAM table to test
the rollbacks with.

Both rollBack() and beginTransaction() will return TRUE but the rollBack will not happen.

Convert the table to InnoDB and run the test again.

Should anyone reading this be slightly panicked because they just discover that their 
MySQL tables are MyIsam and not InnoDB, do not worry. You can very easily change the 
storage engine using the following query:

ALTER TABLE your_table_name ENGINE = innodb;

Here is a way of testing that your transaction has started when using MySQL's InnoDB
tables. It will fail if you are using MySQL's MyISAM tables, which do not support
transactions but will also not return an error when using them.

<?php
//Begin the transaction
$dbh->beginTransaction();

//To verify that a transaction has started, try to create an (illegal for InnoDB) nested transaction.
//if it works, the first transaction did not start correctly or is unsupported (such as on MyISAM tables)
try {
	$dbh->beginTransaction();
	die('Cancelling, Transaction was not properly started');
} catch (PDOException $e) {
	print "Transaction is running (because trying another one failed)\n";
}
?>

PDO::setAttribute:

PDO::setAttribute - Set an attribute

Desc:

public bool PDO::setAttribute ( int $attribute , mixed $value )

Sets an attribute on the database handle. Some of the available generic attributes are listed below;
some drivers may make use of additional driver specific attributes.

PDO::ATTR_CASE: Force column names to lower case.
	
	PDO::CASE_LOWER: Force column names to lower case.

	PDO::CASE_NATURAL: Leave column names as returned by the database driver.

	PDO::CASE_UPPER: Force column names to upper case.

PDO::ATTR_ERRMODE: Error reporting
	
	PDO::ERRMODE_SILENT: Just set error codes.

	PDO::ERRMODE_WARNING: Raise E_WARNING.

	PDO::ERRMODE_EXCEPTION: Throw exceptions

PDO::ATTR_ORACLE_NULLS (available with all drivers, not just Oracle): Conversion of NULL and empty strings.

	PDO::NULL_NATURAL: No conversion.

	PDO::NULL_EMPTY_STRING: Empty string is converted to NULL.

	PDO::NULL_TO_STRING: NULL is converted to an empty string.

PDO::ATTR_STRINGIFY_FETCHES: Convert numeric values to strings when fetching. Requires bool.

PDO::ATTR_STATEMENT_CLASS: Set user-supplied statement class derived from PDOStatement. Cannot be used
with persistent PDO instances. Requires array(string classname, array(mixed constructor_args)).

PDO::ATTR_TIMEOUT: Specifies the timeout duration in seconds. Not all drivers support this option,
and its meaning may differ from driver to driver. For example, sqlite will wait for up to this time
value before giving up on obtaining an writable lock, but other drivers may interpet this as a 
connect or a read timeout interval. Requires int.

PDO::ATTR_AUTOCOMMIT (available in OCI, Firebird and MySQL): Whether to autocommit every single statement.

PDO::ATTR_EMULATE_PREPARES: Enables or Disables emulation of prepared statements. Some drivers do not
support native prepared statements or have limited support for them. Use this setting to force PDO to
either always emulate prepared statements (if TRUE and emulated prepares are supported by the driver),
or try to use native prepared statements (if FALSE).

It will always fall back to emulating the prepared statement if the driver cannot successfully prepare the
current query. Requires bool.

PDO::MYSQL_ATTR_USE_BUFFERED_QUERY (available in MySQL): Use buffered queries.

PDO::ATTR_DEFAULT_FETCH_MODE: Set default fetch mode. Description of modes is available in
PDOStatement::fetch() documentation.

Returns:

Returns TRUE on success or FALSE on failure.

Because no examples are provided, and to alleviate any confusion as a result, the setAttribute() method
is invoked like so:

setAttribute(ATTRIBUTE, OPTION);

So, if i wanted to ensure that the column names returned from a query were returned in the case the
database driver returned them (rather than having them returned in all upper case [as is the default on
some of the PDO extensions]), i would do the following:

<?php
//Create a new database connection
$dbConnection = new PDO($dsn, $user, $pass);

//Set the case in which to return column_names
$dbConnection->setAttribute(PDO::ATTR_CASE, PDO::CASE_NATURAL);
?>

Hope this helps some of you who learn by example (as is the case with me).

it is worth nothing that not all attributes may be settable via setAttribute(). For example,
PDO::MYSQL_ATTR_MAX_BUFFER_SIZE is only settable in PDO::__construct(). You must pass 
PDO::MYSQL_ATTR_MAX_BUFFER_SIZE as part of the optional 4th parameter to the constructor.

This is detailed here:

Bug #38015 Can not set PDO_MYSQL_ATTR_MAX_BUFFER_SIZE

Desc:

I am using pdo_mysql client library 4.1.20.
I need treat the data of 1 mb or more.
But i can not set PDO_MYSQL_ATTR_MAX_BUFFER_SIZE.

Reproduce code:

$db = new PDO('mysql:host=localhost;dbname=test', 'user', 'pass');
var_dump($db->setAttribute(PDO::MYSQL_ATTR_MAX_BUFFER_SIZE, 1024 * 1024 * 10));

Expected result:

bool(false)

There is also a way to specify the default fetch mode:

<?php
$connection = new PDO($connection_string);
$connection->setAttribute(PDO::ATTR_DEFAULT_FETCH_MODE, PDO::FETCH_OBJ);
?>

Well, i have not seen it mentioned anywhere and thought it is worth mentioning. It might
help someone. If you are wondering whether you can set multiple attributes then the answer is yes.

You can do it like this:

try {
	$connection = new PDO("mysql:host=$host; dbname=$dbname", $user, $password);
	//You can begin setting all the attributes you want
	$connection->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
	$connection->setAttribute(PDO::ATTR_CASE, PDO::CASE_NATURAL);
	$connection->setAttribute(PDO::ATTR_ORACLE_NULLS, PDO::NULL_EMPTY_STRING);

	//That is how you can set multiple attributes
}
catch(PDOException $e)
{
	die("Database connection failed: " . $e->getMessage());
}

For PDO::ATTR_EMULATE_PREPARES, the manual states a boolean value is required.
However, when getAttribute() is used to check this value, an integer (1 or 0)
is returned rather than true or false.

This means that if you are checking a PDO object is configured as required then

<?php
	//Check emulate prepares is off
	if ($pdo->getAttribute(\PDO::ATTR_EMULATE_PREPARES) !== false) {
		//DO something
	}
?>

WIll always, 'do something', regardless.

Either:

<?php
	//Check emulate prepares is off
	if ($pdo->getAttribute(\PDO::ATTR_EMULATE_PREPARES) != false) {
		//Do something
	}
?>

Or

<?php
	//Check emulate prepares is off
	if ($pdo->getAttribute(\PDO::ATTR_EMULATE_PREPARES) !== 0) {
		// Do something
	}
?>

Is needed instead.

Also worth noting, is that setAttribute() does, in fact, accept an integer value
if you want to be consistent.

The PDOStatement class:

Introduction:

Represents a prepared statement and, after the statement is executed, an associated result set.

Class synopsis:

PDOStatement implements Traversable {
	
	//properties
	readonly string $queryString;

	//Methods
	public bool bindColumn ( mixed $column, mixed &$param [, int $type [, int $maxlen [, mixed $driverdata ]]] )
	public bool bindParam ( mixed $parameter , mixed &$variable [, int $data_type = PDO::PARAM_STR [, int $length [,
		mixed $driver_options ]]] )

	public bool bindValue ( mixed $parameter , mixed $value [, int $data_type = PDO::PARAM_STR ])
	public bool closeCursor()
	public int columnCount()

	public void debugDumpParams()
	public string errorCode()
	public array errorInfo()

	public bool execute ([ array $input_parameters ])
	public mixed fetch ([ int $fetch_style [, int $cursor_orientation = PDO::FETCH_ORI_NEXT [, int $cursor_offset = 0
	]]] )
	public array fetchAll ([ int $fetch_style [, mixed $fetch_argument [, array $ctor_args = array() ]]] )

	public mixed fetchColumn ([ int $column_number = 0 ])
	public mixed fetchObject ([ string $class_name = "stdClass" [, array $ctor_args ]] )

	public mixed getAttribute ( int $attribute )
	public array getColumnMeta ( int $column )
	public bool nextRowset()

	public int rowCount()
	public bool setAttribute ( int $attribute , mixed $value )
	public bool setFetchMode ( int $mode )
}

Properties:

queryString
	Used query string.

Table of Contents:

PDOStatement::bindColumn - Bind a column to a PHP variable
PDOStatement::bindParam - Binds a parameter to the specified variable name
PDOStatement::bindValue - Binds a value to a parameter

PDOStatement::closeCursor - Closes the cursor, enabling the statement to be executed again.
PDOStatement::columnCount - Returns the number of columns in the result set
PDOStatement::debugDumpParams - Dump an SQL prepared command

PDOStatement::errorCode - Fetch the SQLSTATE associated with the last operation on the statement handle
PDOStatement::erroInfo - Fetch extended error information associated with the last operation on the statement handle

PDOStatement::execute - Executes a prepared statement
PDOStatement::fetch - Fetches the next row from a result set
PDOStatement::fetchAll - Returns an array containing all of the result set rows
PDOStatement::fetchColumn - Returns a single column from the next row of a result set

PDOStatement::fetchObject - Fetches the next row and returns it as an object.
PDOStatement::getAttribute - Retrieve a statement attribute
PDOStatement::getColumnMeta - Returns metadata for a column in a result set

PDOStatement::nextRowset - Advances to the next rowset in a multi-rowset statement handle
PDOStatement::rowCount - Returns the number of rows affected by the last SQL statement
PDOStatement::setAttribute - Set a statement attribute
PDOStatement::setFetchMode - Set the default fetch mode for this statement

<?php

$host = "yourHost";
$user = "yourUser";
$pass = "yourPass";
$db = "yourDB";

$cursor = "cr_123456";

try
{
	$dbh = new PDO("pgsql:host=$host;port=5432;dbname=$db;user=$user;password=$pass");
	echo "Connected<p>";
}
catch (Exception $e)
{
	echo "Unable to connect: " . $e->getMessage() . "<p>";
}

$dbh->beginTransaction();

$query = "SELECT yourFunction(0::smallint, '2013-08-01 00:00', '2013-09-01 00:00', 1::smallint, '$cursor')";

$dbh->query($query);

$query = "FETCH ALL IN \"$cursor\"";

echo "begin data<p>";

foreach ($dbh->query($query) as $row)
{
	echo "$row[0] $row[1] $row[2] <br>";
}

echo "end data";

?>

The Traversable interface:

Intro:

Interface to detect if a class is a traversable using foreach.

Abstract base interface that cannot be implemented alone. Instead it must be implemented by either IteratorAggregate
or Iterator.

Note: Internal (built-in) classes that implement this interface can be used in a foreach construct and do not need
to implement IteratorAggregate or Iterator.

Note: This is an internal engine interface which cannot be implemented in PHP scripts. Either IteratorAggregate
or Iterator must be used instead. When implementing an interfance which extends Traversable, make sure to list
IteratorAggregate or Iterator before its name in the implements clause.

Interface synopsis:

Traversable {
}

This interface has no methods, its only purpose is to be the base interface for all traversable classes.

While you cannot implement this interface, you can use it in your checks to determine if something is 
usable in for each. Here is what i use if i am expecting something that must be iterable via foreach.

<?php
	if( !is_array($items) && !$items instanceof Traversable)
		//Throw exception here
?>

Note: While objects and arrays can be traversed by foreach, they do NOT implement "Traversable",
so you CANNOT check for foreach compability using an instanceof check.

Example:

$myarray = array('one', 'two', 'three');
$myobj = (object)$myarray;

if (!($myarray instanceof \Traversable)) {
	print "myarray is NOT traversable";
}
if (!($myobj instanceof \Traversable)) {
	print "myobj is NOT traversable";
}

foreach ($myarray as $value) {
	print $value;
}
foreach ($myobj as $value) {
	print $value;
}

Output:
myarray is NOT Traversable
myobj is NOT Traversable
one
two
three
one
two
three

Note that all objects can be iterated over with foreach anyway and it will go over each property. This just
describes whether or not the class implements an iterator, i.e has custom behaviour.

The PHP7 iterable pseudo type will match both Traversable and array. Great for return type-hinting
so that you do not have to expose your Domain to Infrastructure code, e.g, instead of a Repository
returning a cursor, it can return hint 'iterable':

<?php
UserRepository::findUsers(): iterable
?>

Link: http://php.net/manual/en/migration71.new-features.php#migration71.new-features.iterable-pseudo-type

Also, instead of:

<?php
	if(!is_array($items) && !$items instanceof Traversable)
		//Throw exception here
?>

You can now do with the is_iterable() method:

<?php
	if (!is_iterable($items))
		//Throw excetion here
?>

Link: http://php.net/manual/en/function.is-iterable.php

The new features link is available to be checked after i have read through PDO as a class, as a whole.

PDOStatement:

PDOStatement::bindColumn

PDOStatement::bindColumn - Bind a column to a PHP variable

Desc:

public bool PDOStatement::bindColumn ( mixed $column, mixed &$param [, int $type [, int $maxlen [, mixed $driverdata ]]] )

PDOStatement::bindColumn() arranges to have a particular variable bound to a given column in the result-set
from a query. Each call to PDOStatement::fetch() or PDOStatement::fetchAll() will update all the variables
that are bound to columns.

Note: Since information about the columns is not always available to PDO until the statement is executed,
portable applications should call this function after PDOStatement::execute().

However, to be able to bind a LOB column as a stream when using the PgSQL driver, applications should
call this method before calling PDOStatement::execute(), otherwise the large object OID will be 
returned as an integer.

Params:

column: Number of the column (1-indexed) or name of the column in the result set. If using the column
name, be aware that the name should match the case of the column, as returned by the driver.

Param: Name of the PHP variable to which the column will be bound

type: Data type of the parameter, specified by the PDO::PARAM_* constants.

maxlen: A hint for pre-allocation

driverdata: Optional parameter(s) for the driver.

Returns:

Returns TRUE on success, FALSE on failure.

Examples:

Example #1 Binding result set output to PHP variables

Binding columns in the result set to PHP variables is an effective way to make the data
contained in each row immediately available to your application. The following example
demonstrates how PDO allows you to bind and retrieve columns with a variety of options and
with intelligent defaults.

<?php
function readData($dbh) {
	$sql = 'SELECT name, colour, calories FROM fruit';
	try {
		$stmt = $dbh->prepare($sql);
		$stmt->execute();

		//Bind by column number
		$stmt->bindColumn(1, $name);
		$stmt->bindColumn(2, $colour);

		//Bind by column name
		$stmt->bindColumn('calories', $cals);

		while ($row = $stmt->fetch(PDO::FETCH_BOUND)) {
			$data = $name . "\t" . $colour . "\t" . $cals . "\n";
			print $data;
		}
	}
	catch (PDOException $e) {
		print $e->getMessage();
	}
}
readData($dbh);
?>

The above will output:

apple 	red 	150
banana 	yellow 	175
kiwi 	green 	75
orange 	orange 	150
mango 	red 	200
strawberry 		red 	25

PDOStatement::bindParam:

PDOStatement::bindParam - Binds a parameter to the specified variable name

Description:

public bool PDOStatement::bindParam ( mixed $parameter , mixed &$variable [, int $data_type = PDO::PARAM_STR [,
	int $length [, mixed $driver_options ]]] )

Binds a PHP variable to a corresponding named or question mark placeholder in the SQL statement that
was used to prepare the statement. Unlike PDOStatement::bindValue(), the variable is bound as a reference
and will only be evaluted at the time that PDOStatement::execute() is called.

Most parameters are input parameters, that is, parameters that are used in a read-only fashion to
build up the query. Some drivers support the invocation of stored procedures that return data as
output parameters, and some also as input/output parameters that both send in data and are
updated to receive it.

Params:

parameter: Parameter identifier. For a prepared statement using named placeholders, this will be
a parameter named of the form :name. For a prepared statement using question mark placeholders
, this will be the 1-indexed position of the parameter.

variable: Name of the PHP variable to bind to the SQL statement parameter.

data_type: Explicit data type for the parameter using the PDO::PARAM_* constants. To return an INOUT
parameter from a stored procedure, use the bitwise OR operator to set the PDO::PARAM_INPUT_OUTPUT
bits for the data_type parameter.

Length: Length of the data type. To indicate that a parameter is an OUT parameter from a stored
procedure, you must explicitly set the length.

driver_options

Return values:

Returns TRUE on success, or FALSE on failure.

Examples:

Example #1 Execute a prepared statement with named placeholders

<?php
//Execute a prepared statement by binding PHP variables
$calories = 150;
$colour = 'red';
$sth = $dbh->prepare('SELECT name, colour, calories
	FROM fruit
	WHERE calories < :calories AND colour :colour');
$sth->bindParam(':calories', $calories, PDO::PARAM_INT);
$sth->bindParam(':colour', $colour, PDO::PARAM_STR, 12);
$sth->execute();
?>

Example #2 Execute a prepared statement with question mark placeholders

<?php
//Execute a prepared statement by binding PHP variables
$calories = 150;
$colour = 'red';
$sth = $dbh->prepare('SELECT name, colour, calories
	FROM fruit
	WHERE calories < ? and colour = ?');
$sth->bindParam(1, $calories, PDO::PARAM_INT);
$sth->bindParam(2, $colour, PDO::PARAM_STR, 12);
$sth->execute();
?>

Example #3 Call a stored procedure with an INOUT parameter

<?php
//Call a stored procedure with an INOUT parameter
$colour = 'red';
$sth = $dbh->prepare('CALL puree_fruit(?)');
$sth->bindParam(1, $colour, PDO::PARAM_STR|PDO::PARAM_INPUT_OUTPUT, 12);
$sth->execute();
print("After pureeing fruit, the colour is: $colour");
?>

I know this has been said before, but i will write a note on it too because i think
it is important to keep in mind:

If you use PDO bindParam to do a search with a LIKE condition you cannot put the percentages
and quotes to the param placeholder '%:keywords%'.

This is WRONG:
"SELECT * FROM `users` WHERE `firstname` LIKE '%:keyword%'";

The CORRECT solution is to leave clean the placeholder like this:
"SELECT * FROM `users` WHERE `firstname` LIKE :keyword";

And then add the percentages to the PHP variable where you store the keyword:
$keyword = "%".$keyword."%";

And finally the quotes will be automatically added by PDO when executing the query
so you do not have to worry about them.

So the full example would be:
<?php
// Get the keyword from query string
$keyword = $_GET['keyword'];
//Prepare the command
$sth = $dbh->prepare('SELECT * FROM `users` WHERE `firstname` LIKE :keyword');

//Put the percentage sign on the keyword
$keyword = "%".$keyword."%";

//Bind the parameter
$sth->bindParam(':keyword', $keyword, PDO::PARAM_STR);
?>

This works ($val by reference):
<?php
foreach ($params as $key => &$val) {
	$sth->bindParam($key, $val);
}
?>

This will fail ($val by value, because bindParam needs &$variable):
<?php
foreach ($params as $key => $val) {
	$sth->bindParam($key, $val);
}
?>

Note that when using PDOStatement::bindParam an integer is changed to a string
value upon PDOStatement::execute(). (Tested with MySQL).

This can cause problems when trying to compare values using the === operator.

example:
<?php
$active = 1;
var_dump($active);
$ps->bindParam(":active", $active, PDO::PARAM_INT);

var_dump($active);
$ps->execute();
var_dump($active);
if ($active === 1) {
	// Do something here
	// note: this will fail since $active is now "1"
}
?>

Results in:
int(1)
int(1)
string(1) "1"

The documentation says this about the length parameter for bindParam:

"To indicate that a parameter is an OUT parameter from a stored procedure, you must explicitly
set the length."

For db2, I found that setting the length for the "INPUT_OUTPUT" parameters causes a problem for
varchar parameters that are input parameters. The problem i found is that the stored procedure
was called, but varchar input params were set to null inside my stored procedure and as a 
result, the stored procedure could not work properly.

Here is the signature for my stored procedure:

CREATE OR REPLACE PROCEDURE MY_SCHEMA_NAME.MY_STORED_PROCEDURE_NAME ( IN RUN_ID INTEGER, IN V_SCHEMA_NAME
VARCHAR(128), OUT our_rc INTEGER, OUT out_err_message VARCHAR(100),OUT out_sqlstate CHAR(5), OUT out_sqlcode INT)

here is the PHP code that works:

$command = "Call MY_SCHEMA_NAME.MY_STORED_PROCEDURE_NAME (?,?,?,?,?,?,?)";
$stmt = $this->GuestDb->prepare($command);

$stmt->bindParam(1, $RUN_ID, PDO::PARAM_INT);
$stmt->bindParam(2, $V_SCHEMA_NAME, PDO::PARAM_STR);
$stmt->bindParam(3, $V_TABNAME, PDO::PARAM_STR);

$stmt->bindParam(4, $out_rc, PDO::PARAM_INT|PDO::PARAM_INPUT_OUTPUT);
$stmt->bindParam(5, $out_err_message, PDO::PARAM_STR|PDO::PARAM_INPUT_OUTPUT);

$stmt->bindParam(6, $out_sqlstate, PDO::PARAM_STR|PDO::PARAM_INPUT_OUTPUT);
$stmt->bindParam(7, $out_sqlcode, PDO::PARAM_INT|PDO::PARAM_INPUT_OUTPUT);

Here is the php code that does not work:

$command = "Call MY_SCHEMA_NAME.MY_STORED_PROCEDURE_NAME (?,?,?,?,?,?,?)";
$stmt = $this->GuestDb->prepare($command);
$stmt->bindParam(1, $RUN_ID, PDO::PARAM_INT,12);
$stmt->bindParam(2, $V_SCHEMA_NAME, PDO::PARAM_STR,128);
$stmt->bindParam(3, $V_TABNAME, PDO::PARAM_STR, 100);

$stmt->bindParam(4, $out_rc, PDO::PARAM_INT|PDO::PARAM_INPUT_OUTPUT,12),
$stmt->bindParam(5, $out_err_message, PDO::PARAM_STR|PDO::PARAM_INPUT_OUTPUT,100);
$stmt->bindParam(6, $out_sqlstate, PDO::PARAM_STR|PDO::PARAM_INPUT_OUTPUT,6);

$stmt->bindParam(7, $out_sqlcode, PDO::PARAM_INT|PDO::PARAM_INPUT_OUTPUT,12);

Please note, that PDO format numbers according to current locale. So, if, locale set
number format to something else, that standard that query will NOT work properly.

For example:
in Polish locale (pl_PL) proper decimal separator is coma (","), so: 123,45, not 123.45.
If we try bind 123.45 to the query, we will end up with coma in the query.

<?php
setlocale(LC_ALL, 'pl_PL');
$sth = $dbh->prepare('SELECT name FROM products WHERE price < :price');
$sth->bindParam(':price', 123.45, PDO::PARAM_STR);
$sth->execute();

//Result:
// SELECT name FROM products WHERE price < '123,45';
?>

SQL Server 2008 R2

If this was in the documentation, i did not stumble across it. When using bound output
parameters with a stored procedure, the output parameters are updated AFTER the LAST
rowset has been processed.

If your stored procedure does not return any rowsets (no SELECT statements) then you are
set, your output parameters will be ready as soon as the stored procedure is processed.

Otherwise you need to process the rows, and then:
<?php $stmt->nextRowset(); ?>

Once that is done for each returning rowset you will have access to the output parameters.

Note that with bindParam the second parameter is passed by reference. This means that the
following will produce a warning if E_STRICT is enabled:

<?php
$stmt->bindParam('type', $object->getType());

//Strict standards: only variables should be passed by reference in /path/to/file.php on line 123
?>

IF the second param is not an actual variable, either set the result of $object->getType(); to
a variable and use that variable in bindParam or use bindValue instead.

There seems to be some confusion about whether you can bind a single value to multiple identical
placeholders. For example:

$sql = "SELECT * FROM user WHERE is_admin = :myValue AND is_deleted = :myValue";

$params = array("myValue" => "0");

Some users have reported that attempting to bind a single parameter to multiple placeholders
yields a parameter mismatch error in PHP version 5.2.0 and earlier. Starting with version 
5.2.1, however, this seems to work just fine.

However, this seems to work fine in 5.2.1 >=

Bug #40417 Suddenly binding as many vars as there are *identical* prepared tokens

Desc:

I have just upgraded from PHP 5.2.0 to PHP 5.2.1, and one of my scripts has broken on the
following point (note, the backend db is PostgreSQL 8.1.5)

Consider this prepared statement query, automatically generated as part of a basic
search engine operating on a table of shops:

SELECT index, name, town FROM shops WHERE enabled AND (lower(name) LIKE :word0 OR lower(address) LIKE :word0
OR lower(town) LIKE :word0 OR lower(company) LIKE :word0 OR lower(description) LIKE :word0) ORDER BY name;

YOu notice that 5 ':word0' tokens are defined. I then proceed to bind ':word0' to a certain value (individual
$word taken from a search field), *a single time* of course:

$shops -> bindValue(':word'.$i, '%'.$word.'%'); //$i = 0

Up to PHP 5.2.0, this worked as expected. Now in PHP 5.2.1 I am getting a PDOException : "SQLSTATE[HY093]: Invalid
parameter number: number of bound variables does not match number of tokens."

To work around this problem, I indeed have to call bindValue() as many times as there are tokens (5 in this example),
even though those tokens are identical. As a consequence, the name of the extra *ficticious* bound tokens does not
matter, except the binding 5 times the same token name (e.g. 5 times ':word0') does not work.

But binding ':word0' to ':word4' does, for instance.

I have noticed some similarity with PHP bug #33886, but i believe this is to be a slightly different
situation (bindValue() as oppposed to on-the-fly binding), not to mention that it breaks existing
scripts.

Bug #33886 PDO Prepared Statement fails if binding id (:blah) is used more than once

Desc:

When using the same binding id in a query the PDOStatement::execute() method still requires you to
specify the same amount of parameters.

Reproduce code:

<?php
$pdo = new PDO('pgsql:host=localhost dbname=bats user=user password=pass');
$pdo->setAttribute(PDO_ATTR_ERRMODE, PDO_ERRMODE_EXCEPTION);

$statement = $pdo->prepare("
			UPDATE groups
			SET
				lft = CASE WHEN lft > :right
					  THEN lft + 2
					  ELSE lft END,
				rgt = CASE WHEN rgt >= :right
					  THEN rgt + 2
					  ELSE rgt END
			WHERE
			  rgt >= :right
			");
$statement->execute(array(':right' => 5));

?>

Expected result:
Would expect the statement to execute without issue.

Actual result:
PHP Fatal error: Uncaught exception 'PDOException' with message 'SQLSTATE[08P01]: <<Unknown Error>>:
7 ERROR: bind message supplies 1 parameters, but prepared statement "pgo_pgsql_stmt_08257c0c" requires
3' in /usr/home/wb/bats/scripts/tests/pdoQuery.php:17

Stack trace:
#0 /usr/home/wb/bats/scripts/tests/pdoQuery.php(17): PDOStatement->execute(Array)
#1 {main}
  thrown in /usr/home/wb/bats/scripts/tests/pdoQuery.php on line 17

A caution for those using bindParam() on a placeholder in a LIKE '%...%' clause,
the following code will likely not work:

<?php
$q = "SELECT id, name FROM test WHERE name LIKE '%:foo%'";
$s = "carrot";
$sth = $dbh->prepare($q);
$sth->bindParam(':foo', $s);
$sth->execute();
?>

what is needed is something like the following:

<?php
$s = "%$s%";
$sth->bindParam(':foo', $s);
?>

This should work, tested against mysql 4.1, PHP 5.1.3

http://technet.microsoft.com/en-us/library/ff628166(v=sql.105).aspx

When binding null data to server columns of type varbinary, binary, or varbinary(max) you
should specify binary encoding (PDO::SQLSRV_ENCODING_BINARY) using the $driver_options.
See Constants for more information about encoding constants.

Support for PDO was added in version 2.0 of the Microsoft Drivers for PHP for SQL server.

<?php
$db = new PDO('sqlsrv:server=SQLSERVERNAME;Database=own_exchange', 'user', 'password');
$sql = "INSERT INTO dbo.files(file_name, file_source) VALUES(:file_name, :file_source)";
$stmt = $db->prepare($sql);
$stmt->bindParam(":file_name", $files->name, PDO::PARAM_STR);
$stmt->bindParam(":file_source", file_get_contents($files->tempName), PDO::PARAM_LOB, 0, PDO::SQLSRV_ENCODING_BINARY);
$stmt->execute();
?>

MySQL will return an error if a named placeholder has a hyphen in it:
UPDATE wardrobe SET `T-Shirt`=:T-SHIRT WHERE id=:id

Will return the following error: PDOException' with message 'SQLSTATE[HY093]: Invalid parameter number:
parameter was not defined'

To resolve, just remove hypens from named placeholders:
UPDATE wardrobe SET `T-Shirt`=:TSHIRT WHERE id=:id

Took me forever to find this elsewhere in the notes in the manual, so i thought i would put
this tidbit here to help others in the future.

When using a LIKE search in MySQL along with a prepared statement, the *value* must have
the appropiate parantheses attached before the bindParam() statement as such:

<?php
$dbc = $GLOBALS['dbc'];
$sql = "SELECT * FROM `tbl_name` WHERE tbl_col LIKE ?";
$stmt = $dbc->prepare($sql);

$value = "%{$value}%";
$stmt->bindParam($i, $value, PDO::PARAM_STR);
?>

Trying to use:
<?php
$stmt->bindParam($i, "%{$value}%", PDO::PARAM_STR);
?>

Will fail.

Do not try to use the same named parameter twice in a single SQL statement, for example:

<?php
$sql = 'SELECT * FROM some_table WHERE some_value > :value OR some_value < :value';
$stmt = $dbh->prepare($sql);
$stmt->execute(array(':value' => 3));
?>

This will return no rows and no error - you must use each parameter once and only once.
Apparently this is expected behaviour (according to the following report, soon) because
of portability issues.

//Method for PDO class connection, you can add your cases by yourself and use it.

class Conn{
...
...
$private $stmt;
public function bind($parameter, $value, $var_type = null){
	if(is_null($var_type)) {
		switch (true) {
			case is_bool($value):
				$var_type = PDO::PARAM_BOOL;
				break;
			case is_int($value):
				$var_type = PDO::PARAM_INT;
				break;
			case is_null($value):
				$var_type = PDO::PARAM_NULL;
				break;
			default:
				$var_type = PDO::PARAM_STR;
		}
	}
	$this->stmt->bindValue($parameter, $value, $var_type);
}
}

Tried to use INOUT or OUT and getting the return variable into PHP using MySQL v5.5.16 on XAMPP.

"MySQL does not support binding output params via its C API. You must use SQL level variables":

<?php
$stmt = $db->prepare("CALL sp_mysp(:Name, :Email, @sp_result)");

$outputArray = $db->query("select @sp_result")->fetch(PDO::FETCH_ASSOC);
?>

So the, workaround for MySQL and PDO is to use two SQL calls.

If you are storing files (or binary data), using PARAM_LOB (and moreover trying to do this
with Oracle), do not miss this page:

You will there notice that PDO-PGSQL and PDO-OCI do not work the same at all : not the same
argument nor the same behaviour.


If you are using the MySQL driver and have a stored procedure with an OUT or INOUT parameter,
you cannot (currently) use bindValue(). See http://bugs.php.net/bug.php?id=35935 for a workaround:

Bug #35935 MySQL stored procedure does not return value when using bindParam()

Desc:

I created a trivial stored procedure in MySQL (v5.0.17) that simply returns an integer
constant. If i call the procedure using a PDO statement and binding a return value 
$stmt->bindParam(), i get nothing.

On the other hand, if i issue two SQL queries to implicitly obtain the result,
things are ok (see below). So something is broken with the way PDO handles
bindParam.

I am using the latest stable release of PHP (5.1.1), MySQL 5.0.17 and mod_php
for Apache 2.2

Reproduce Code:

<?php
$DB = new PDO(...);
if($DB != NULL) {
	$stmt = $DB->prepare(" CALL test_pdo(?)");
	$stmt->bindParam(1, $return_value, PDO::PARAM_INT, 10);
	$stmt->execute();
	print "Procedure returned: $return_value \n";

	//Try instead plain SQL call
	$DB->query("CALL test_pdo(@nn)");
	$rows = $DB->query("SELECT @nn")->fetchAll();
	print "SELECT returned: \n";
	print_r($rows);
}
?>

And here is the actual MySQL stored procedure:
CREATE PROCEDURE test_pdo
	(OUT Pout INTEGER)
BEGIN
	SET Pout := 1912;
END

Expected result:

$return_value should have been set to "1912" and instead it is empty. The stored procedure is working
ok as the second call (in which i implicitly obtain the output by making two SQL queries) returns the
correct value (see below).

Actual result:

Procedure returned:

SELECT returned:
Array ( [0] => Array ( [@nn] => 1912 [0] => 1912))

<?php
//Bind bit value:

$sql = 'SELECT * FROM myTable WHERE level & ?';
$sth = \App::pdo()->prepare($sql);
$sth->bindValue(1, 0b0101, \PDO::PARAM_INT);
$sth->execute();
$result = $sth->fetchAll(\PDO::FETCH_ASSOC);

For those who are confused on insert query using PDO-bindparam:

$sql = $db->prepare("INSERT INTO db_fruit (id, type, colour) VALUES (?, ?, ?)");

$sql->bindParam(1, $newId);
$sql->bindParam(2, $name);
$sql->bindParam(3, $colour);
$sql->execute();

Avoid to use param with dot like ":table.column".
It will return an error 'PDOException' with message 'SQLSTATE[HY093]: Invalid parameter number: parameter was not defined ' in...

PDOStatement::bindValue:

PDOStatement::bindValue - Binds a value to a parameter

Desc:

public bool PDOStatement::bindValue ( mixed $parameter, mixed $value [, int $data_type = PDO::PARAM_STR ] )

Binds a value to a corresponding named or question mark placeholder in the SQL statement that was used
to prepare the statement.

Params:

parameter: Parameter identifier. For a prepared statement using named placeholders, this will be a 
parameter name of the form :name. For a prepared statement using question mark placeholders,
this will be the 1-indexed position of the parameter.

value: The value to bind to the parameter.

data_type: Explicit data type for the parameter using the PDO::PARAM_* constants.

Return values:

Returns TRUE on success, or FALSE on failure.

Examples:

Example #1 Execute a prepared statement with named placeholders

<?php
//Execute a prepared statement by binding PHP variables
$calories = 150;
$colour = 'red';
$sth = $dbh->prepare('SELECT name, colour, calories
	FROM fruit
	WHERE calories < :calories AND colour = :colour');
$sth->bindValue(':calories', $calories, PDO::PARAM_INT);
$sth->bindValue(':colour', $colour, PDO::PARAM_STR);
$sth->execute();
?>

Example #2 Execute a prepared statement with question mark placeholders

<?php
//Execute a prepared statement by binding PHP variables
$calories = 150;
$colour = 'red';
$sth = $dbh->prepare('SELECT name, colour, calories
	FROM fruit
	WHERE calories < ? AND colour = ?');
$sth->bindValue(1, $calories, PDO::PARAM_INT);
$sth->bindValue(2, $colour, PDO::PARAM_STR);
$sth->execute();
?>

What the bindValue() docs fail to explain without read them, is that bindParam() 
is passed to PDO byref - where as bindValue() is not.

Thus with bindValue() you can do something like $stmt->bindValue(":something", "bind this!");
whereas with bindParam() it will fail because you cannot pass a string by reference, for example.

Although bindValue() escapes quotes it does not escape "%" and "_", so be careful when using
LIKE. A malicious param full of %%% can dump your entire db if you do not escape the param yourself.
PDO does not provide any other escape method to handle it.

Be careful when trying to validate using PDO::PARAM_INT.

Take this sample into account:

<?php
// php --version
// PHP 5.6.25 (cli) (built: Aug 24 09:50:46)
// Copyright (c) 1997-2016 The PHP Group
// Zend Engine V2.6.0, Copyright (c) 1998-2016 Zend Technologies

$id = '1a';
$stm = $pdo->prepare('select * from author where id = :id');
$bind = $stm->bindValue(':id', $id, PDO::PARAM_INT);

$stm->execute();
$authors = $stm->fetchAll();

var_dump($id); //string(2)
var_dump($bind); //true
var_dump((int)$id); //int(1)
var_dump(is_int($id)); //false
var_dump($authors); //the author id=1

//Remember
var_dump(1 == '1'); //true
var_dump(1 === '1'); //false
var_dump(1 === '1a'); //false
var_dump(1 == '1a'); //true
?>

When binding params, apparently you cannot use a placeholder twice (e.g "select * from mails where
sender=:me or recipient=:me"), you will have to give them different names otherwise your query
will return empty handed (but not fail, unfortunately). Just in case you are struggling with
something like this.

Note that the third param ($data_type) in the majority of cases will not type cast the value into
anything else to be used in the query, nor will it throw any sort of error if the type does not
match up with the value provided.

This param essentialy has no effect whatsoever except throwing an error if it is set and is
not a float, so do not think that it is adding any extra level of security to the queries.

The two exceptions where type casting is performed:

- If you use PDO::PDO_PARAM_INT and provide a boolean, it will be converted to long
- If you use PDO::PDO_PARAM_BOOL and provide a long, it will be converted to a boolean

<?php

$query = 'SELECT * FROM `users` WHERE username = :username AND `password` = ENCRYPT( :password, `crypt_password`)';

$sth = $dbh->prepare($query);

//First try passing a random numerical value as the third param
var_dump($sth->bindValue(':username', 'bob', 12345.67)); //bool(true)

//next try passing a string using the boolean type
var_dump($sth->bindValue(':password','topsecret_pw', PDO::PARAM_BOOL)); //bool(true)

$sth->execute(); //Query is executed successfully
$result = $sth->fetchAll(); //Returns the result of teh query

?>

This function is useful for bind value on an array. You can specify the type of the value
in advance with $typeArray

<?php
//@param string $req : the query on which link the values
//@param array $array : Associative array containing the values to bind
//@param array $typeArray : assocaitive array with the desired value for its corresponding key in $array
function bindArrayValue($req, $array, $typeArray = false)
{
	if(is_object($req) && ($req instanceof PDOStatement))
	{
		foreach($array as $key => $value)
		{
			if($typeArray)
				$req->bindValue(":$key",$value,$typeArray[$key]);
			else
			{
				if(is_int($value))
					$param = PDO::PARAM_INT;
				elseif(is_bool($value))
					$param = PDO::PARAM_BOOL;
				elseif(is_null($value))
					$param = PDO::PARAM_NULL;
				elseif(is_string($value))
					$param = PDO::PARAM_STR;
				else
					$param = FALSE;

				if($param)
					$req->bindValue(":$key", $value, $param);
			}
		}
	}
}

//Example
//$array = array('language' => 'php', 'lines' => 254, 'publish' => true);
//$typeArray = array('language' => PDO::PARAM_STR, 'lines' => PDO::PARAM_INT,'publish' => PDO::PARAM_BOOL);
//$req = 'SELECT * FROM code WHERE langauge = :language AND lines = :lines AND publish = :publish';
//You can bind $array like that:
// bindArrayValue($array,$req,$typeArray);
// The function is more useful when you use limit clause because they need an int
?>

<?php
//Bind bit value

$sql = 'SELECT * FROM myTable WHERE level & ?';
$sth = \App::pdo()->prepare($sql);
$sth->bindValue(1, 0b0101, \PDO::PARAM_INT);
$sth->execute();
$result = $sth->fetchAll(\PDO::FETCH_ASSOC);

This actually works to bind NULL on an integer field in MySQL:

$stm->bindValue(':param', null, PDO::PARAM_INT);

PDO lacks methods to check if values can be bound to a param:

if ($statement->hasParameter(':param'))
{
	$statement->bindValue(':param', $value);
}

ATM you have to know which params exist in the SQL-statement. Otherwise you get an error.
You cannot test for them.

Be careful in edge cases.

WIth MySQL Native prepares your integer can be wrapped around on some matches:

<?php
$x = 2147483648;
var_dump($x); // prints: int(2147483648)
$s = $db->prepare('SELECT :int AS I, :str AS S;');
$s->bindValue(':int', $x, PDO::PARAM_INT);
$s->bindValue(':str', $x, PDO::PARAM_STR);
$s->execute();
var_dump($s->fetchAll(PDO::FETCH_ASSOC));
//Prints: array(2) {
//	["I"]=>
//	string(11) "-2147483648"
//  ["S"]=>
// 	string(10) "2147483648"
//}
?>

Also, trying to bind PDO::PARAM_BOOL in MySQL with native prepares can make your
query silently fail and return an empty set.

Emulated prepares work more stable in these cases, because they convert everything
to strings and just decide whenever to quote argument or not to quote.

The reason that we cannot define the value variable for bindValue() after calling it,
is because that it binds the value to the prepared statement immediately and does
not wait until the execute() to happen.

The following code will issue a notice and prevent the query from taking place:
<?php
	$st = $db->prepare("SELECT * FROM posts WHERE id= :val");
	$st->bindValue(':val',$val);

	$val = '2';
	$st->execute();
?>

The output:
Notice: Undefined variable: val.

Whereas in the case of bindParam, the evaluation of the value to the parameter will
not be performed until the call of execute(). And that is to gain the benefit of reference
passing.

<?php
	$st = $db->prepare("SELECT * FROM posts WHERE id = :val");
	$st->bindParam(':val', $val);

	$val = '2';

	//Some code
	$val = '3'; //re-assigning the value var
	$st->execute();
?>

works fine.

PDOStatement

PDOStatement::closeCursor:

PDOStatement::closeCursor - Closes the cursor, enabling the statement to be executed again.

Desc:

public bool PDOStatement::closeCursor()

PDOStatement::closeCursor() frees up the connection to the server so that other SQL statements
may be issued, but leaves the statement in a state that enables it to be executed again.

This method is useful for database drivers that do not support executing a PDOStatement object
when a previously executed PDOStatement object still has unfetched rows. If your database driver
suffers from this limitation, the problem may manifest itself in an out-of-sequence error.

PDOStatement::closeCursor() is implemented either as an optional driver specific method (allowing
for maximum efficiency), or as the generic PDO fallback if no driver specific function is installed.
The PDO generic fallback is semantically the same as writing the following code in your PHP script:

<?php
do {
	while ($stmt->fetch())
		;
	if (!$stmt->nextRowset())
		break;

} while (true);
?>

Return values:

Returns TRUE on success or FALSE on failure.

Examples:

Example #1 A PDOStatement::closeCursor() example

In the following example, the $stmt PDOStatement object returns multiple rows but the application
fetches only the first row, leaving the PDOStatement object in a state of having unfetched rows.
To ensure that the application will work with all database drivers, the author inserts a call to
PDOStatement::closeCursor() on $stmt before executing the $otherStmt PDOStatement object.

<?php
//Create a PDOStatement object
$stmt = $dbh->prepare('SELECT foo FROM bar');

//Create a second PDOStatement object
$otherStmt = $dbh->prepare('SELECT foobaz FROM foobar');

//Execute the first statement
$stmt->execute();

//Fetch only the first row from the results
$stmt->fetch();

//The following call to closeCursor() may be required by some drivers
$stmt->closeCursor();

//Now we can execute the second statement
$otherStmt->execute();
?>

In case this is helpful to anybody else who ends-up here after getting the following error:

SQLSTATE: 24000 [Microsoft][ODBC SQL Server Driver]Invalid cursor state

PDOStatement::closeCursor() did not fix the issue for me. However, adding SET NOCOUNT ON to the
beginning of my stored procedure did.

If you ran a SQL statement (vs a query that returns data) such as UPDATE, try unsetting your
PDOStatement object instead of calling PDOStatement::closeCursor()

PDOStatement::columnCount

PDOStatement::columnCount - Returns the number of columns in the result set

Desc:

public int PDOStatement::columnCount()

Use PDOStatement::columnCount() to return the number of columns in the result set
represented by the PDOStatement object.

If the PDOStatement object was returned from PDO::query(), the column count
is immediately available.

If the PDOStatement object was returned from PDO::prepare(), an accurate column
will not be available until you invoke PDOStatement::execute().

Return Values:

Returns the number of columns in the result set represented by the PDOStatement object, even
if the result set is empty. If there is no result set, PDOStatement::columnCount() returns 0.

Examples:

Example #1 Counting columns

This example demonstrates how PDOStatement::columnCount() operates with and without a 
result set.

<?php
$dbh = new PDO('odbc.sample', 'db2inst1', 'ibmdb2');

$sth = $dbh->prepare("SELECT name, colour FROM fruit");

//Count the number of columns in the (non-existent) result set
$colcount = $sth->columnCount();
print("Before execute(), result set has $colcount columns (should be 0)\n");

$sth->execute();

//Count the number of columns in the result set
$colcount = $sth->columnCount();
print("After execute(), result set has $colcount columns (should be 2)\n");

?>

The above example will output:

Before execute(), result set has 0 columns (should be 0)
After execute(), result set has 2 columns (should be 2)

When you use the query method, you will get count right away

<?php
$dbh = new PDO('odbc:sample', 'db2inst1', 'ibmdb2');

$sth = $dbh->query("SELECT name, colour FROM fruit");
$count = $sth->columnCount();

echo 'query count is '.$count;

?>

PDOStatement::debugDumpParams:

PDOStatement::debugDumpParams - Dump an SQL prepared command

Desc:

public void PDOStatement::debugDumpParams()

Dumps the information contained by a prepared statement directly on the output. It will provide
the SQL query in use, the number of parameters used (Params), the list of parameters with their
key name or position, their name, their position in the query (if this is supported by the PDO driver,
otherwise, it will be -1), type (param_type) as an integer, and a boolean value is_param.

This is a debug function, which dumps the data directly to the normal output.

Tip: As with anything that outputs its result directly to the browser, the output-control functions
can be used to capture the output of this function, and save it in a string (for example).

This will only dump the parameters in the statement at the moment of the dump. Extra parameters
are not stored in the statement, and not displayed.

Examples:

Example #1 PDOStatement::debugDumpParams() example with named parameters

<?php
//Execute a prepared statement by binding PHP vars
$calories = 150;
$colour = 'red';
$sth = $dbh->prepare('SELECT name, colour, calories
	FROM fruit
	WHERE calories < :calories AND colour = :colour');

$sth->bindParam(':calories', $calories, PDO::PARAM_INT);
$sth->bindValue(':colour', $colour, PDO::PARAM_STR, 12);
$sth->execute();

$sth->debugDumpParams();

?>

The above will output:

SQL: [96] SELECT name, colour, calories
	FROM fruit
	WHERE calories < :calories AND colour = :colour
Params: 	2
Key: Name: [9] 	:calories
paramno=-1
name=[9] ":calories"
is_param=1
param_type=1
Key: Name: [7] :colour
paramno=-1
name=[7] ":colour"
is_param=1
param_type=2

Example #2 PDOStatement::debugDumpParams() example with unnamed params

<?php

//Execute a prepared statement by binding PHP variables
$calories = 150;
$colour = 'red';
$name = 'apple';

$sth = $dbh->prepare('SELECT name, colour, calories
	FROM fruit
	WHERE calories < ? AND colour = ?');

$sth->bindParam(1, $calories, PDO::PARAM_INT);
$sth->bindValue(2, $colour, PDO::PARAM_STR);
$sth->execute();

$sth->debugDumpParams();

?>

The above will output:

SQL: [82] SELECT name, colour, calories
	FROM fruit
	WHERE calories < ? AND colour = ?
Params: 	2
Key: 	Position #0:
paramno=0
name=[0] ""
is_param=1
param_type=1
Key: Position #1:
paramno=1
name=[0] ""
is_param=1
param_type=2

This function does not print parameter values despite the documentation says it does. See https://bugs.php.net/bug.php?id=52384
(filed back in 2010)

Request #52384 PDOStatement::debugDumpParams does not emit the bind parameter value

Desc:

Per the PDO documentation, PDOStatement::debugDumpParams should emit the bind parameter value.
Currently however, it does not. Attached is a patch for 5.2 (which also applies cleanly to 5.3),
which emits the bind parameter value.

Test script:

<?php
$dbh = new PDO("sqlite:test.sdb");
$calories = (int) 150; //Force a type conversion to string
$colour = 'red';
$sth = $dbh->prepare('SELECT 1 WHERE 1 = :calories AND 2 = :colour');
if ($sth->bindParam(':calories', $calories, PDO::PARAM_INT) !== true)
	die('die on ' . __LINE__ . "\n");
if ($sth->bindValue(':colour', $colour, PDO::PARAM_STR) !== true)
	die('die on ' . __LINE__ . "\n");

$sth->debugDumpParams();

Expected result:

With Patch:

SQL  : [len = 44] SELECT 1 WHERE 1 = :calories AND 2 = :colour
Params: 2
Key: Name: [9] :calories
paramno=-1
name=[9] ":calories"
is_param=1
param_type=1
value=150
Key: Name: [7] :colour
paramno=-1
name=[7] ":colour"
is_param=1
param_type=2
value=red

Actual result:

SQL: [44] SELECT 1 WHERE 1 = :calories AND 2 = :colour
Params: 2
Key: Name: [9] :calories
paramno=-1
name=[9] ":calories"
is_param=1
param_type=1
Key: Name: [7] :colour
paramno=-1
name=[7] ":colour"
is_param=1
param_type=2

As noted, this does not actually simply print the prepared statement with data to be executed.

For trouble shooting purposes, I find the following useful:

<?php
	function parms($string,$data) {
		$indexed = $data==array_values($data);
		foreach($data as $k=>$v) {
			if(is_string($v)) $v="'$v'";
			if($indexed) $string=preg_replace('/\?/', $v, $string,1);
			else $string=str_replace(":$k", $v, $string);
		}
		return $string;
	}

	//index params
	$string='INSERT INTO stuff(name, value) VALUES (?,?)';
	$data = array('Fred',23);

	//named params
	$string='INSERT INTO stuff(name,value) VALUES (:name,:value)';
	$data=array('name'=>'Fred','value'=>23);

	print parms($string,$data);
?>

THis function does not have a return, so if you want to do something with it you will
have to do something like:

<?php
function pdo_debugStrParams($stmt) {
	ob_start();
	$stmt->debugDumpParams();
	$r = ob_get_contents();
	ob_end_clean();
	return $r;
}

// omitted: connect to the database and prepare a statement
echo '<pre>'.htmlspecialchars(pdo_debugStrParams($stmt)).'</pre>';
?>

It is not you, in PHP 5.2.6 and close versions this has an infinite loop bug. Upgrade to the
latest php where it has been fixed.

PDOStatement::errorCode:

PDOStatement::errorCode - Fetch the SQLSTATE associated with the last operation on the
statement handle

Desc:

public string PDOStatement::errorCode()

Return values:

Identical to PDO::errorCode(), except that PDOStatement::errorCode() only retrieves error codes
for operations performed with PDOStatement objects.

Examples:

Example #1 Retrieving an SQLSTATE code

<?php
//provoke an error - the BONES table does not exist
$err = $dbh->prepare('SELECT skull FROM bones');
$err->execute();

echo "\nPDOStatement::errorCode(): ";
print $err->errorCode();
?>

The above example will output:

PDOStatement::errorCode(): 42S02

Statement's errorCode() returns an empty string before execution, and '00000' (five zer0s) after a successful
execution:

<?php
$stmt = $pdo->prepare($query);
assert($stmt->errorCode === '');

$stmt->execute();
assert($stmt->errorCode === '00000');
?>

Neither this property nor the PDOStatement::errorInfo() properties are available if you create
your own exception handler.

I am using PHP 5.2.4, PDO_INFORMIX 1.2.0

Making this call at any point in the program after setting your own exception handler produces an error:

PHP Notice: Undefined property: PDOStatement::$errorCode in new_query.php on line

or

PHP Notice: Undefined property: PDOStatement::$errorInfo in new_query.php on line

But if i set the PDO to SILENT, only set error codes with:

$dbh->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_SILENT)

The process with if/else the call to this function works fine. The examples below only do error
checking to show the result codes of this function. Normally you would want more.

FAILS:

$dbh = new PDO("informix...");
$dbh->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

try {
	$result = $dbh->query("some shit"); //obvious SQL error
	if ($result) print "Success!";
}
catch 
{
	$myeCode = $dbh->errorCode();
	//Do stuff with the error

}

$dbh = 0;

The error handler gets called but knows nothing about $dbh->errorCode or $dbh->errorInfo.

WORKS:
$dbh = new PDO("informix...");
$dbh->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_SILENT);

$result = $dbh->query("some shit"); //obvious SQL error
if ($result)
{
	//Process result
	print "success";

	//All done, didn't make any changes
	$dbh->rollback();
}
else 
{
	$myeCode = $dbh->errorCode();
	print_r($myeCode);
}

$dbh=0; //close connection

PDOStatement::errorInfo:

PDOStatement::errorInfo - Fetch extended error information associated with the last operation
on the statement handle.

Desc:

public array PDOStatement::errorInfo()

Returns:

PDOStatement::errorInfo() returns an array of error information about the last operation performed
by this statement handle. The array consists of the following fields:

Element 		Information

0 				SQLSTATE error code (a five chars alphanumeric identifier defined in the ANSI SQL standard)

1 				Driver specific error code

2 				Driver specific error message

Examples:

Example #1 Displaying errorInfo() fields for a PDO_ODBC connection to a DB2 database

<?php
//Provoke an error - the BONES table does not exist
$sth = $dbh->prepare('SELECT skull FROM bones');
$sth->execute();

echo "\nPDOStatment::errorInfo():\n";
$arr = $sth->errorInfo();
print_r($arr);
?>

The above example will output:

PDOStatement::errorInfo():
Array
(
	[0] => 42S02
	[1] => -204
	[2] => [IBM] [CLI Driver] [DB2/LINUX] SQL0204N "DANIELS.BONES" is an undefined name. SQLSTATE=42704
)

If your query is successful, PDO::errorInfo() still returns an array. for MySQL5.x, i get the following...

Array
(
	[0] => 00000
	[1] =>
	[2] =>
)

PDOStatement::execute:

PDOStatement::execute - Executes a prepared statement.

Desc:

public bool PDOStatement::execute ([ array $input_parameters ])

Execute the prepared statement. If the prepared statement included parameter
markers, either:

PDOStatement::bindParam() and/or PDOStatement::bindValue() has to be called to bind
either variables or values (respectively) to the parameter markers. Bound variables
pass their value as input and receive the output value, if any, of their associated
parameter markers.

Or an array of input-only parameter values has to be passed.

Params:

input_parameters:
	An array of values with as many elements as there are bound params in the SQL statement being
	executed. All values are treated as PDO::PARAM_STR.

	Multiple values cannot be bound to a single param; for example, it is not allowed to bind
	two values to a single named parameter in an IN() clause.

	Binding more values than specified is not possible, if more keys exists in input_parameters
	than in the SQL specified in the PDO::prepare(), then the statement will fail and an error
	is emitted.

Returns:

Returns TRUE on success or FALSE on failure.

Changelog:

Version 			Desc

5.2.0 				The keys from input_parameters must match the ones declared in the SQL.
					Before PHP 5.2.0 this was silently ignored.

Examples:

Example #1 Execute a prepared statement with a bound variable and value

<?php
//Execute a prepared statement by binding a variable and value
$calories = 150;
$colour = 'gre';
$sth = $dbh->prepare('SELECT name, colour, calories
	FROM fruit
	WHERE calories < :calories AND colour LIKE :colour');

$sth->bindParam(':calories', $calories, PDO::PARAM_INT);
$sth->bindValue(':colour', "%{$colour}%");
$sth->execute();
?>

Example #2 Execute a prepared statement with an array of insert values (named params):

<?php
//Execute a prepared statement by passing an array of insert values
$calories = 150;
$colour = 'red';
$sth = $dbh->prepare('SELECT name, colour, calories
	FROM fruit
	WHERE calories < :calories AND colour = :colour');
$sth->execute(array(':calories' => $calories, ':colour' => $colour));
?>

Example #3 Execute a prepared statement with an array of insert values (placeholders)

<?php
//Execute a prepared statement by passing an array of insert values
$calories = 150;
$colour = 'red';
$sth = $dbh->prepare('SELECT name, colour, calories
	FROM fruit
	WHERE calories < ? AND colour = ?');

$sth->execute(array($calories, $colour));
?>

Example #4 Execute a prepared statement with question mark placeholders

<?php
//Execute a prepared statement by binding PHP variables
$calories = 150;
$colour = 'red';
$sth = $dbh->prepare('SELECT name, colour, calories
	FROM fruit
	WHERE calories < ? AND colour = ?');

$sth->bindParam(1, $calories, PDO::PARAM_INT);
$sth->bindParam(2, $colour, PDO::PARAM_STR, 12);
$sth->execute();
?>

Example #5 Execute a prepared statement using array for IN Clause

<?php
//Execute a prepared statement using an array of values for an IN clause
$params = array(1, 21, 63, 171);
//Create a string for the param ph's filled to the number of params
$place_holders = implode(',', array_fill(0, count($params), '?'));

//This prepares the statement with enough unnamed phs for every value
// in our $params array. The value of the $params array are then bound
// to the phs in teh prepared statement when the statement is executed.
//
//This is not the same thing as using PDOStatement::bindParam() since
// this requires a reference to the variable. PDOStatement::execute()
// only binds by value instead.

$sth = $dbh->prepare("SELECT id, name FROM contacts WHERE id IN ($place_holders)");
$sth->execute($params);
?>

Notes:

Note: Some drivers require to close cursor before executing next statement.

Simplified $placeholder form

<?php

$data = ['a'=>'foo', 'b' => 'bar'];

$keys = array_keys($data);
$fields = '`'.implode('`, `', $keys).'`';

//here is my way
$placeholder = substr(str_repeat('?',count($keys)),0,-1);

$pdo->prepare("INSERT INTO `baz`($fields) VALUES($placeholder)")->execute(array_values($data));

Hopefully this saves time for folks: one should use $count = $stmt->rowCount() after $stmt->execute()
in order to really determine if any an operation such as ' update ' or ' replace ' did succeed i.e
changed some data.

An array of insert values (named params) do not need the prefixed colon als key-value to work.

<?php
//Execute a prepared statement by passing an array of insert values
$calories = 150;
$colour = 'red';
$sth = $dbh->prepare('SELECT name, colour, calories
	FROM fruit
	WHERE calories < :calories AND colour = :colour');

//INstead of
// $sth->execute(array(':calories' => $calories, ':colour' => $colour));
// this works fine too
$sth->execute(array('calories' => $calories, 'colour' => $colour));
?>

this allows to use "regular" assembled hash-tables (arrays).
That really does make sense.

Note that you must
- EITHER pass all values to bind in an array to PDOStatement::execute()
- OR bind every value before with PDOStatement::bindValue(), then call PDOStatement::execute()
with *no* param (not even array())

Passing an array (empty or not) to execute() will "erase" and replace any previous bindings
(and can lead to, e.g. with MySQL, "SQLSTATE[HY000]: general error: 2031" (CR_PARAMS_NOT_BOUND) if you passed 
an empty array).

Thus the following function is incorrect in case the prepared statement has been "bound" before:

<?php
function customExecute(PDOStatement &$sth, $params = NULL) {
	return $sth->execute($params);
}
?>

And should therefore be replaced by something like:

<?php
function customExecute(PDOStatement &$sth, array $params = array()) {
	if (empty($params))
		return $sth->execute();
	return $sth->execute($params);
}
?>

Also note that PDOStatement::execute() does not require $input_parameters to be
an array.

When using a prepared statement to execute multiple inserts (such as in a loop etc.),
under sqlite the performance is dramatically improved by wrapping the loop in a transaction.

I have an application that routinely inserts 30-50.000 records at a time. Without the transaction
it was taking over 150 secs, with it, only 3.

This may affect other implementations as well, and i am sure it is something that affects
all databases to some extent, but i can only test with PDO sqlite.

e.g

<?php
$data = array(
	array('name' => 'John', 'age' => '25'),
	array('name' => 'Wendy', 'age' => '32')
);

try {
	$pdo = new PDO('sqlite:myfile.sqlite');
}
catch (PDOException $e) {
	die('Unable to open database connection');
}

$insertStatement = $pdo->prepare('insert into mytable (name, age) values (:name, :age)');

//Start transaction
$pdo->beginTransaction();

foreach($data as &$row) {
	$insertStatement->execute($row);
}

//end transaction
$pdo->commit();

?>

If you are having issues passing boolean values to be bound and are using a Postgres database,
but you do not want to use bindParam for every param, try passing the strings 't' or 'f'
instead of boolean TRUE or FALSE.

When passing an array of values to execute when your query contains question marks, note that
the array must be keyed numerically from zero. If it is not, run array_values() on it to 
force the array to be re-keyed.

<?php
$anarray = array(42 => "foo", 101 => "bar");
$statement = $dbo->prepare("SELECT * FROM table WHERE col1 = ? AND col2 = ?");

//This will not work
$statement->execute($anarray);

//Do this to make it work
$statement->execute(array_values($anarray));
?>

We know that you cannot see the final raw SQL before it is parsed by the DB, but if you want
to simulate the final result, this may help.

<?php
public function showQuery($query, $params)
{
	$keys = array();
	$values = array();

	//Build a regex for each param
	foreach($params as $key=>$value)
	{
		if(is_string($key))
		{
			$keys[] = '/:'.$key.'/';
		}
		else
		{
			$keys[] = '/[?]/';
		}

		if(is_numeric($value))
		{
			$values[] = intval($value);
		}
		else
		{
			$values[] = '"'.$value.'"';
		}

		$query = preg_replace($keys, $values, $query, 1, $count);
		return $query;
	}
}
?>

If your MySQL table has 500k+ rows and your scrip is failing due to PHP memory limit,
set the following attribute:

<?php $this->pdo->setAttribute(PDO::MYSQL_ATTR_USE_BUFFERED_QUERY, false); ?>

This should make the error go away again and return memory usage back to normal.

It seems, that the quoting behaviour has changed somehow between versions, as my current
project was running fine on one setup, but throwing errors on another (both setups are
very similar)

Setup 1: Ubuntu 6.10, PHP 5.1.6, MySQL 5.0.24a
Setup 2: Ubuntu 7.04, PHP 5.2.1, MySQL 5.0.38

The code fragment which caused problems (shortened):

<?php
$stmt = $pdo->prepare("SELECT col1, col2, col3 FROM tablename WHERE col4=? LIMIT ?");
$stmt->execute(array('Foo', 1));
?>

On the first setup this executed without issues, on the second setup it generates an error:

SQLSTATE[42000]: Syntax error or access violation: 1064 You have an error in your SQL syntax;
check the manual that corresponds to your MySQL server version for the right syntax to use
near ''1'' at line 1

The problem is, that $stmt->execute() quotes the number passed to the second placeholder (resulting
in: ... LIMIT '1'), which is not allowed in MySQL (tested on both setups).

To prevent this, you have to use bindParam() or bindValue() and specify a data type.

Hi, just a quick note to get started without problems when using quotation: PDO does NOT
replace given variables if they are wrapped in quotationmarks, e.g:

<?php

$st = $db->prepare('
	INSERT INTO fruits( name, colour )
	VALUES( :name, ":colour" )
');
$st->execute(array(':name' => 'Apple', ':colour' => 'red'));
?>

Results in a new fruit like:

-> Apple, :colour

Without the colour being replaced by "red", so leave variables WITHOUT the quotation -
PDO will do.

When you try to make a query with a date, then take the whole date and not just a number.

This Query will work fine, if you try it like this:
SELECT * FROM table WHERE date = 0

But if you try it with prepared you have to take the whole date format.
<?php
$sth = $dbh->prepare('SELECT * FROM table WHERE date = :date');
$sth->execute($arArray);

//Wrong
$arArray = array(":date",0);

//Right
$arArray = array(":date", "0000-00-00 00:00:00");
?>

There must be something with the mysql driver.

Note: Parameters do not work with a dash in the name like ":asd-asd", you can do a quick
str_replace("-", "_", $parameter) to fix the issue.

"You cannot bind more values than specified; if more keys exist in input_parameters than in the
SQL specified in the PDO::prepare(), then the statement will fail and an error is emitted."

However, fewer keys may not cause an error.

As long as the number of question marks in the query string varaible matches the number of elements
in the input_parameters, the query will be attempted.

This happens even if there is extraneous information after the end of the query string. The semicolon
indicates the end of the query string; the rest of the variable is treated as a comment by the SQL
engine, but counted as part of the input_parameters by PHP.

Have a look at these two query strings. The only difference is a typo in the second string, where
a semicolon accidentally replaces a comma. This UPDATE query will run, will be applied to all rows,
and will silently damage the table.

<?php
//Query is intended to update a subset of the rows based on the WHERE clause
$sql = "UPDATE my_table SET fname = ?, lname = ? WHERE id = ?";

//Query updates all rows, ignoring everything after the semi-colon, including the WHERE clause
//
//Expected but not received:
//
// Warning: 
// PDOStatement::execute():
// SQLSTATE[HY093]:
// Invalid parameter number: number of bound variables does not match number of tokens

$sql = "UPDATE my_table SET fname = ?; lname = ? WHERE id = ?"; //one token in effect, the reason this goes through, is given that it parses
//Everything even past the point of the given elgit command, thus, this is basically on the level of a injection, but in teh way of a fuckup.

$pdos = $pdo->prepare($sql);
$pdos->execute(['foo', 'bar', 3]);
?>

PHP 5.4.45, mysqlnd 5.0.10

I realized that i ran into serious trouble when debugging my PHP scripts from the cmd line,
and despite of going to fetchAll and so, i always got the error

SQLSTATE[HY000]: General error: 2014 Cannot execute queries while other unbuffered queries are active.

I realized that i had a double init command:

PDO::MYSQL_ATTR_INIT_COMMAND => "SET NAMES utf8; SET CHARACTER SET utf8;"

The first one is the better choice and removing the latter, the error is gone.

I have used it,and it returns booleans=>

$passed = $stmt->execute();
if($passed){
	echo "passed";
}  else {
	echo "failed";
}

If the statement failed, it would print failed. You would want to use errorInfo() to get more info,
but it does seem to work for me.

If you are going to derive PDOStatement to extend the execute() method, you must define the signature
with a default NULL argument, not an empty array.

In other words:

<?php
class MyPDOStatement extends PDOStatement {
	//...

	//Do not use this form
	// function execute($input_parameters = array()) {
	//}
	// use this instead:
	function execute($input_parameters = null) {
		//...
		return parent::execute($input_parameters);
	}
}

?>

As a sidenote, that is why i always set default params to null and take care of handling teh
actual correct default params in the body of the method or function. Thus, when you have to
call the function with all the params, you know to always pass NULL for defaults.

If one parameter is missing or misspelled, this function throws an error of level E_WARNING,
even when PDO::ATTR_ERRMODE is set to PDO::ERRMODE_SILENT.

This function does not throw any error when PDO::ERRMODE_EXCEPTION is set, instead, it throws
a PDOException.

All this applies even when you use PDOStatement::bindParam() function with misspelled param
name and then use PDOStatement::execute().

Tested on: Windows 10, PHP 5.5.35, mysqlnd 5.0.11, MySQL 5.6.30

<?php
$dbh->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_SILENT);

$colour = 'red';
$sth = $dbh->prepare('SELECT name, colour, calories
	FROM fruit
	WHERE colour = :colour');

//Notice the param name ':color' instead of ':colour'
//When PDO::ERRMODE_SILENT is set, this function throws the error:
// Warning: PDOStatement::execute(): SQLSTATE[HY093]: Invalid parameter number: parameter
// was not defined in ...
//
// When PDO::ERRMODE_WARNING is set, this function throws these two errors:
// Warning: PDOStatement::execute(): SQLSTATE[HY093]: Invalid parameter number: parameter was not defined in..
// Warning: PDOStatement::execute(): SQLSTATE[HY093]: Invalid parameter number in...

$sth->execute(array(':color' => $colour));
?>

Debugging prepared statements can be a pain sometimes when you need to copy a query and run it in the DB
directly. The function below is an example of how to compile your own query (of course it would need some
tweaking and may nto work in all scenarios).

<?php
$sql = "
	SELECT t1.*
	FROM table1 AS t1
	INNER JOIN table2 AS t2 ON (
		t2.code = t1.code
		AND t1.field1 = ?
		AND t1.field2 = ?
		AND t1.field3 = ?
	)
";

$stmt = $pdo->prepare($sql);
$params = [ 'A', 'B', 'C'];
$stmt->execute($params);

//Output the compiled query
debug($sql, $params);

function debug($statement, array $params = [])
{
	$statement = preg_replace_callback(
		'/[?]/',
		function ($k) use ($params) {
			static $i = 0;
			return sprintf("'%s'", $params[$i++]);
		},
		$statement
	);

	echo '<pre>Query Debug:<br>' . $statement . '</pre>';

}
?>

This would output something like:

SELECT t1.*
FROM table1 AS t1
INNER JOIN table2 AS t2 ON (
	t2.part_code = t1.code
	AND t1.field1 = 'A'
	AND t1.field2 = 'B'
	AND t1.field3 = 'C'
)

PDOStatement::fetch:

PDOStatement::fetch - Fetches the next row from a result set

Desc:

public mixed PDOStatement::fetch ([ int $fetch_style [, int $cursor_orientation = PDO::FETCH_ORI_NEXT [, int
	$cursor_offset = 0 ]]] )

Fetches a row from a result set associated with a PDOStatement object. The fetch_style parameter determines
how PDO returns the row.

Params:

fetch_style: Controls how the next row will be returned to the caller. This value must be one of the PDO::FETCH_*
constants, defaulting to value of PDO::ATTR_DEFAULT_FETCH_MODE (which defaults to PDO::FETCH_BOTH).

	PDO::FETCH_ASSOC: returns an array indexed by column name as returned in your result set

	PDO::FETCH_BOTH (default): returns an array indexed by both column name and 0-indexed column number as
	returned in your result set.

	PDO::FETCH_BOUND: returns True and assigns the values of the columns in your result set to the PHP vars
	to which they were bound with the PDOStatement::bindColumn() method

	PDO::FETCH_CLASS: returns a new instance of the requested class, mapping the columns of the result set
	to named properties in the class, and calling the constructor afterwards, unless PDO::FETCH_PROPS_LATE
	is also given. IF fetch_styles includes PDO::FETCH_CLASSTYPE (e.g PDO::FETCH_CLASS | PDO::FETCH_CLASSTYPE)
	then the name of the class is determined from a value of the first column.

	PDO::FETCH_INTO: updates an existing instance of the requested class, mapping the columns of the result
	set to named properties in the class

	PDO::FETCH_LAZY: combines PDO::FETCH_BOTH and PDO::FETCH_OBJ, creating the obj var names as they are accessed.

	PDO::FETCH_NAMED: returns an array with the same form as PDO::FETCH_ASSOC, except that if there are multiple
	columns with the same name, the value referred to by that key will be an array of all the values in the row that
	had that column name.

	PDO::FETCH_NUM: Returns an array indexed by column number as returned in your result set, starting at col 0

	PDO::FETCH_OBJ: returns an anonymous obj with property names that corresponds to the column names returned
	in your result set

	PDO::FETCH_PROPS_LATE: when used with PDO::FETCH_CLASS, the constructor of the class is called before the
	props are assigned from the respective column values

cursor_orientation
	For a PDOStatement object representing a scrollable cursor, this value determines which row will be returned
	to the caller. This value must be one of the PDO::FETCH_ORI_* constants, defaulting to PDO::FETCH_ORI_NEXT.
	To request a scrollable cursor for your PDOStatement object, you must set the PDO::ATTR_CURSOR attribute
	to PDO::CURSOR_SCROLL when you prepare the SQL statement with PDO::prepare().

offset
	For a PDOStatement object representing a scrollable cursor for which the cursor_orientation param is
	set to PDO::FETCH_ORI_ABS, this value specifies the absolute number of the row in the result
	set that shall be fetched.

	For a PDOStatement object representing a scrollable cursor for which the cursor_orientation is set to
	PDO::FETCH_ORI_REL, this value specifies the row to fetch relative to the cursor position before
	PDOStatement::fetch() was called.

Returns:

The return value of htis function on success depends on the fetch type. In all cases, FALSe is returned on failure.

Examples:

Example #1 Fetching rows using different fetch styles

<?php
$sth = $dbh->prepare("SELECT name, colour FROM fruit");
$sth->execute();

//Exercise PDOStatement::fetch styles
print("PDO::FETCH_ASSOC: ");
print("Return next row as an array indexed by column name\n");
$result = $sth->fetch(PDO::FETCH_ASSOC);
print_r($result);
print("\n");

print("PDO::FETCH_BOTH: ");
print("Return next row as an array indexed by both column name and number\n");
$result = $sth->fetch(PDO::FETCH_BOTH);
print_r($result);
print("\n");

print("PDO::FETCH_LAZY: ");
print("Return next row as an anonymous object with column names as properties\n");
$result = $sth->fetch(PDO::FETCH_LAZY);
print_r($result);
print("\n");

print("PDO::FETCH_OBJ: ");
print("Return next row as an anonymous object with column names as properties\n");
$result = $sth->fetch(PDO::FETCH_OBJ);
print $result->name;
print("\n");
?>

The above example will output:

PDO::FETCH_ASSOC: Return next row as an array indexed by column name
Array
(
	[name] => apple
	[colour] => red
)

PDO::FETCH_BOTH: Return next row as an array indexed by both column names and number
Array
(
	[name] => banana
	[0] => banana
	[colour] => yellow
	[1] => yellow
)

PDO::FETCH_LAZY: Return next row as an anonymous object with column names as properties
PDORow Object
(
	[name] => orange
	[colour] => orange
)

PDO::FETCH_OBJ: Return next row as an anonymous object with column names as properties
kiwi

Example #2 Fetching rows with a scrollable cursor

<?php
function readDataForwards($dbh) {
	$sql = 'SELECT hand, won, bet FROM mynumbers ORDER BY BET';
	try {
		$stmt = $dbh->prepare($sql, array(PDO::ATTR_CURSOR => PDO::CURSOR_SCROLL));
		$stmt->execute();
		while ($row = $stmt->fetch(PDO::FETCH_NUM, PDO::FETCH_ORI_NEXT)) {
			$data = $row[0] . "\t" . $row[1] . "\t" . $row[2] . "\n";
			print $data;
		}
		$stmt = null;
	}
	catch (PDOException $e) {
		print $e->getMessage();
	}
} 
function readDataBackwards($dbh) {
	$sql = 'SELECT hand, won, bet FROM mynumbers ORDER BY bet';
	try {
		$stmt = $dbh->prepare($sql, array(PDO::ATTR_CURSOR => PDO::CURSOR_SCROLL));
		$stmt->execute();
		$row = $stmt->fetch(PDO::FETCH_NUM, PDO::FETCH_ORI_LAST);
		do {
			$data = $row[0] . "\t" . $row[1] . "\t" . $row[2] . "\n";
			print $data;
		} while ($row = $stmt->fetch(PDO::FETCH_NUM, PDO::FETCH_ORI_PRIOR));
		$stmt = null;
	}
	catch (PDOException $e) {
		print $e->getMessage();
	}
}

print "Reading forwards:\n";
readDataForwards($conn);

print "Reading backwards:\n";
readDataBackwards($conn);
?>

The above will output:

Reading forwards:
21 	10 	5
16 	0 	5
19 	20 	10

Reading backwards:
19 	20 	10
16 	0 	5
21 	10 	5

Example #3 Construction Order

When objects are fetched via PDO::FETCH_CLASS the object properties are assigned first, and then the constructor
of the class is invoked. If PDO::FETCH_PROPS_LATE is also given, this order is reversed, i.e, first the constructor
is called, and afterwards the properties are assigned.

<?php
class Person
{
	private $name;

	public function __construct()
	{
		$this->tell();
	}

	public function tell()
	{
		if (isset($this->name)) {
			echo "I am {$this->name}.\n";
		} else {
			echo "I do not have a name yet.\n";
		}
	}
}

$sth = $dbh->query("SELECT * FROM people");
$sth->setFetchMode(PDO::FETCH_CLASS, 'Person');
$person = $sth->fetch();
$person->tell();

$sth->setFetchMode(PDO::FETCH_CLASS|PDO::FETCH_PROPS_LATE, 'Person');
$person = $sth->fetch();
$person->tell();
?>

The above will output:

I am Alice.
I am Alice.
I do not have a name yet..
I am Bob.

The reason for this is because both the constructor and the explicit tell genereates 2 calls,
and the late props assignment causes no propr to have been assign upon tell call for the first time.

WARNING:
fetch() does NOT adhere to SQL-92 SQLSTATE standard when dealing with empty datasets.

Instead of setting the errorcode class to 20 to indicate "no data found", it returns a class of 00
indicating success, and returns NULL to the caller.

This also prevents the exception mechanism from firing.

Programmers will explicitly need to code tests for empty resultsets after any fetch*() instead of
relying on the default behavior of the RDBMS.

I tried logging this as a bug, but it was dismissed as "working as intended".

If no record, this function will also return false.

When using PDO::FETCH_COLUMN in a while loop, it is not enough to just use the value in the
while statement as many examples show:

<?php
while ($row = $stmt->fetch(PDO::FETCH_COLUMN)){
	print $row;
}
?>

If there are 5 rows with values 1 2 0 4 5, then the while loop above will stop at the third row
printing only 1 2. The solution is to either explicitly test for false:

<?php
while (($row = $stmt->fetch(PDO::FETCH_COLUMN)) !== false) {
	print $row;
}
?>

Or use foreach with fetchAll():

<?php
foreach ($stmt->fetchAll(PDO::FETCH_COLUMN) AS $row) {
	print $row;
}
?>

Both will correctly print 1 2 0 4 5

Someone has already pointed out that PDO::CURSOR_SCROLL is not supported by the SQLite driver. It is also
worth noting that it is not supported by the MySQL driver either.

In fact, if you try to use scrollable cursors with a MySQL statement, the PDO::FETCH_ORI_ABS param
and the offset given to fetch() will be silently ignored. fetch() will behave as normal, returning
rows in the order in which they came out of the database.

It is actually pretty confusing behaviour at first. Definitly worth documenting even if only as a 
user-added note on this page.

A quick one liner to get the first entry returned. This is nice for very basic queries.

<?php
$count = current($db->query("select count(*) from table")->fetch());
?>

When fetching an object, the constructor of the class is called after the fields are populated
by default.

PDO::FETCH_PROPS_LATE is used to change the behaviour and make it work as expected - constructor
be called _before_ the object fields will be populated with the data.

sample:

<?php
$a = $PDO->query('select id from table');
$a->setFetchMode(PDO::FETCH_CLASS|PDO::FETCH_PROPS_LATE, 'ClassName');
$obj = $a->fetch();
?>

http://bugs.php.net/bug.php?id=53394

#53394 Insufficient docs regarding PDOStatement::fetch(Object) and constructors

Desc:

If the object is created and filled by PDOStatement::fetchObject, the ArrayObject::ARRAY_AS_PROPS
is ignored.

Seems like PDO sets the fields values directly around ArrayObject magic setters, and breaks the ArrayObject
native behaviour.

Test script:

class ArraySlice extends ArrayObject{
	function __construct(array $array=array()) {
		parent::__construct($array,ArrayObject::ARRAY_AS_PROPS);
	}
}

$PDO = new PDO($dsn, $user, $password);
$a = $PDO->query('select id from links')->fetchObject('ArraySlice');
echo $a->id; //Works
echo $a['id']; //notice occurred.. Undefined index: id

expected result:
value of the id field

Actual result:
Notice

If you want to use a new instance of a class for a record you can use:

<?php
include_once("user.class");
$sth = $db->prepare("SELECT * FROM user WHERE id = 1");

//Create instance automatically
$sth->setFetchMode(PDO::FETCH_CLASS, 'user');
$sth->execute();
$user = $sth->fetch(PDO::FETCH_CLASS);
$sth->closeCursor();
print ($user->id);

//Or create an instance yourself and use it
$user = new user();
$sth->setFetchMode( PDO::FETCH_INTO, $user);
$sth->execute();

$user= $sth->fetch(PDO::FETCH_INTO);
$sth->closeCursor();
print ($user->id);
?>

Here is quick note for developers that use the PDO SQLite Driver:

The PDO SQLite driver does not support cursors, so using the PDO::CURSOR_SCROLL attribute will not work
when using the PDO SQlite Driver. For example:

<?php

//ASsuming $Handle is a PDO Handle.
$Statement = $Handle->query($sqlStatement, array(PDO::ATTR_CURSOR => PDO::CURSOR_SCROLL));

?>

What is even worse,is that PDO::prepare will NOT throw an Exception when it fails to prepare the
query, even when the error mode is set to throw Exceptions, and will instead return a Boolean false.

Note that this way, the "fetch mode" will get "overwritten", and PDO::FETCH_PROPS_LATE won't
be applied:

<?php
$sth = $db->prepare("SELECT * FROM user WHERE id = 1");
$sth->setFetchMode(PDO::FETCH_CLASS|PDO::FETCH_PROPS_LATE, 'user');

$sth->execute();
$user = $sth->fetch(PDO::FETCH_CLASS);
$sth->closeCursor();
?>

Instead, you should leave the parameter area for the fetch() method empty, like this
(if you want to see the fetch mode with the setFetchMode() method):

<?php
$sth = $db->prepare("SELECT * FROM user WHERE id = 1");
$sth->setFetchMode(PDO::FETCH_CLASS|PDO::FETCH_PROPS_LATE, 'user');
$sth->execute();

$user = $sth->fetch();
$sth->closeCursor();
?>

Because MySQL does not currently support the user of cursors, the $cursor_offset feature
cannot work when using PDO to access a MySQL db.

If you are trying to arbitrarilly access a specific record or group of records in a MySQL
database recordset, you might want to consider using the LIMIT clause of the SELECT statement
to achieve this, e.g. LIMIT 5,3 to return just the 6th, 7th & 8th records - 3 records
starting at index 5 (which is the 6th record)

I could use PDO::FETCH_COLUMN to retrieve the first column from result.
$ps->fetch(PDO::FETCH_COLUMN);
Worked on Postgresql with PHP 5.3.10

Be careful when using PDO::FETCH_LAZY. It adds an additional field called queryString.
I am not sure if this is a bug or not.. I am using version 5.6.17 in Debian Jessie.

Query: 'select 1,2,3'

$row=$smt->fetch(PDO::FETCH_OBJ);
var_dump($row);

object(stdClass)#6 (3) {
	["1"]=>
	string(1) "1"
	["2"]=>
	string(1) "2"
	["3"]=>
	string(1) "3"
}

$row=$smt->fetch(PDO::FETCH_LAZY);
var_dump($row);

object(PDORow)#3 (4) {
	["queryString"]=>
	string(12) "select 1,2,3"
	["1"]=>
	string(1) "1"
	["2"]=>
	string(1) "2"
	["3"]=>
	string(1) "3"
}

If you want to use PDO::FETCH_CLASS you need to set it up with setFetchMode first
like so:

$stmt->setFetchMode( PDO::FETCH_CLASS, 'classType', array('parameters to constructor'));
$object = $stmt->fetch(PDO::FETCH_CLASS);

if you ommit this PHP will segfault.

Segfault, is short for segmentation fault, i.e violation of protection rights of restircted areas
containing memory references.

I can also add that the constructor is run _after_ the data is set on the object if you use
PDO::FETCH_CLASS.

Note that fetch constants are not included in the PDO class for PHP versions prior to 5.1

I spent some hours trying to find out how to manipulate with BLOB fields using PDO.

Remember that you cannot retrieve BLOB data using something like this:

<?php
$sql = 'SELECT * FROM sometable LIMIT 1';
$stmt = $dbh->prepare($sql);
$stmt->execute();
$stmt->setAttribute(PDO::FETCH_ASSOC);
$row = $stmt->fetch();

$myFile = $row['file'];
?>

Instead of this you should try the following approach:

<?php
$sql = "SELECT mime, file FROM sometable LIMIT 1";
$stmt = $dbh->prepare($sql);
$stmt->execute();

$stmt->bindColumn(1, $mime,);
$stmt->bindColumn(2, $file, PDO::PARAM_LOB);

$stmt->fetch();

header('Content-type: '.$mime);
print $file;

?>

Be careful with fetch() when you use prepared statements and MySQL (I do not know how it is 
with other databases). Fetch won't close cursor and won't let you send any other query, even
if your result set has only one row, .

If you use $statement->fetch(), you will also have to use $statement->closeCursor() afterwards,
to be able to execute another query.

Alternative, you can use $statement->fetchAll() without $statement->closeCursor()

Note that PDO::ATTR_STRINGIFY_FETCHES will NOT work for the MySQL driver. MySQL
will always return strings because that is the behaviour of the core mysql pHP
extension. 

Bug #44341 PDOStatement::fetch() always returning string values

Desc:

PDOStatement::fetch() always returning string values, whatever the PDO::ATTR_STRINGIFY_FETCHES
attribute value

HTTP Server : Apache/2.2.6 (Win32)
MySQL Server : 5.0.45-community-nt

Reproduce Code:

<?php
$mysql = new PDO('mysql:host=localhost;dbname=test', 'root', '');
$mysql->setAttribute(PDO::ATTR_STRINGIFY_FETCHES, false);

var_dump($mysql->query('SELECT 42')->fetch(PDO::FETCH_NUM));
?>

Expected result:

array(1) {
	[0]=>
	int(42)
}

Actual result:

array(1) {
	[0]=>
	string(2) "42"
}

It seems that if you do a $statement->query() with an INSERT statement, and after that, a $statement->fetch()
you will get an exception saying: SQLSTATE[HY000]: General Error.

PDOStatement::fetchAll:

PDOStatement::fetchAll - Returns an array containing all of the results set rows

Desc:

public array PDOStatement::fetchAll ([ int $fetch_style [, mixed $fetch_argument [, array $ctor_args = array() ]]] )

Params:

fetch_style:
	Controls the contents of the returned array as documented in PDOStatement::fetch(). Defaults to value of
	PDO::ATTR_DEFAULT_FETCH_MODE (which defaults to PDO::FETCH_BOTH).

	To return an array consisting of all values of a single column from the result set, specify PDO::FETCH_COLUMN.
	You can specify which column you want with the fetch_argument parameter.

	To fetch only the unique values of a single column from the result set, bitwise-OR PDO::FETCH_COLUMN with
	with PDO::FETCH_UNIQUE.

	To return an associative array grouped by the values of a specified column, bitwise-OR PDO::FETCH_COLUMN
	with PDO::FETCH_GROUP.

fetch_argument:
	This argument has a different meaning depending on the value of the fetch_style parameter:

	PDO::FETCH_COLUMN : Returns the indicated 0-indexed column

	PDO::FETCH_CLASS : Returns instances of the specified class, mapping the columns of each row
	to named properties in the class.

	PDO::FETCH_FUNC : Returns the results of calling the specified function, using each row's
	columns as parameters in the call.

ctor_args:
	Arguments of custom class constructor when the fetch_style parameter is PDO::FETCH_CLASS.

Return values:

PDOStatement::fetchAll() returns an array containing all of the remaining rows in the result set.
The array represents each row as either an array of column values or object with properties corresponding
to each column name. An empty array is returned if there are zero results to fetch, or FALSE on failure.

Using this method to fetch large result sets will result in a heavy demand on system and possibly 
network resources. Rather than retrieving all of the data and manipulating it in PHP, consider using
the database server to manipulate the result sets.

For example, use the WHERE and ORDER BY clauses in SQL to restrict results before retrieving and
processing them with PHP.

Examples:

Example #1 Fetch all remaining rows in a result set

<?php
$sth = $dbh->prepare("SELECT name, colour FROM fruit");
$sth->execute();

//Fetch all of the remaining rows in the result set
print("Fetch all of the remaining rows in the result set:\n");
$result = $sth->fetchAll();
print_r($result);
?>

The above will output something similar to:

Fetch all of the remaining rows in the result set:
Array
(
	[0] => Array
		(
			[name] => apple
			[0] => apple
			[colour] => red
			[1] => red
		)

	[1] => Array
		(
			[name] => pear
			[0] => pear
			[colour] => green
			[1] => green
		)

	[2] => Array
		(
			[name] => watermelon
			[0] => watermelon
			[colour] => pink
			[1] => pink
		)
)

Example #2 Fetching all values of a single column from a result set

The following example demonstrates how to return all of the values of a single column from a 
result set, even though the SQL statement itself may return multiple columns per row.

<?php
$sth = $dbh->prepare("SELECT name, colour FROM fruit");
$sth->execute();

//Fetch all of the values of the first column
$result = $sth->fetchAll(PDO::FETCH_COLUMN, 0);
var_dump($result);
?>

The above example will output something similar to:

Array(3)
(
	[0] =>
	string(5) => apple
	[1] =>
	string(4) => pear
	[2] =>
	string(10) => watermelon
)

Example #3 Grouping all values by a single column

The following example demonstrates how to return an associative array grouped by the
values of the specified column in the result set. The array contains three keys: values
apple and pear are returned as arrays that contain two different colours, while watermelon
is returned as an array that contains only one colour.

<?php
$insert = $dbh->prepare("INSERT INTO fruit(name, colour) VALUES (?, ?)");
$insert->execute(array('apple', 'green'));
$insert->execute(array('pear', 'yellow'));

$sth = $dbh->prepare("SELECT name, colour FROM fruit");
$sth->execute();

//Group values by the first column
var_dump($sth->fetchAll(PDO::FETCH_COLUMN|PDO::FETCH_GROUP));
?>

The above example will output something similar to:

array(3) {
	["apple"]=>
	array(2) {
		[0]=>
		string(5) "green"
		[1]=>
		string(3) "red"
	}
	["pear"]=>
	array(2) {
		[0]=>
		string(5) "green"
		[1]=>
		string(6) "yellow"
	}
	["watermelon"]=>
	array(1) {
		[0]=>
		string(5) "pink"
	}
}

Example #4 Instansiating a class for each result

The following example demonstrates the behaviour of the PDO::FETCH_CLASS fetch style.

<?php
class fruit {
	public $name;
	public $colour;
}

$sth = $dbh->prepare("SELECT name, colour FROM fruit");
$sth->execute();

$result = $sth->fetchAll(PDO::FETCH_CLASS, "fruit");
var_dump($result);
?>

The above example will output something similar to:

array(3) {
	[0]=>
	object(fruit)#1 (2) {
		["name"]=>
		string(5) "apple"
		["colour"]=>
		string(5) "green"
	}
	[1]=>
	object(fruit)#2 (2) {
		["name"]=>
		string(4) "pear"
		["colour"]=>
		string(6) "yellow"
	}
	[2]=>
	object(fruit)#3 (2) {
		["name"]=>
		string(10) "watermelon"
		["colour"]=>
		string(4) "pink"
	}
	[3]=>
	object(fruit)#4 (2) {
		["name"]=>
		string(5) "apple"
		["colour"]=>
		string(3) "red"
	}
	[4]=>
	object(fruit)#5 (2) {
		["name"]=>
		string(4) "pear"
		["colour"]=>
		string(5) "green"
	}
}

Example #5 Calling a function for each result

The following example demonstrates the behaviour of the PDO::FETCH_FUNC fetch style.

<?php
function fruit($name, $colour) {
	return "{$name}: {$colour}";
}

$sth = $dbh->prepare("SELECT name, colour FROM fruit");
$sth->execute();

$result = $sth->fetchAll(PDO::FETCH_FUNC, "fruit");
var_dump($result);
?>

The above will output something akin to:

array(3) {
	[0]=>
	string(12) "apple: green"
	[1]=>
	string(12) "pear: yellow"
	[2]=>
	string(16) "watermelon: pink"
	[3]=>
	string(10) "apple: red"
	[4]=>
	string(11) "pear: green"
}

You might find yourself wanting to use FETCH_GROUP and FETCH_ASSOC at the same time,
to get your table's primary key as the array key:

<?php
// $stmt is some query like "SELECT rowid, username, comment"
$results = $stmt->fetchAll(PDO::FETCH_GROUP|PDO::FETCH_ASSOC);

//it does work, but not as you might expect
$results = array(
	1234 => array(0 => array('username' => 'abc', 'comment' => '[...]')),
	1235 => array(0 => array('username' => 'def', 'comment' => '[...]')),
);

//But you can at least strip the useless numbered array out easily:
$results = array_map('reset', $results);
?>

Be careful when using PDO::FETCH_COLUMN with PDO::FETCH_GROUP. By default, results are groupped
by first column (index 0) and the second column (index 1) is returned. But, if you provide
fetch arguments, it would not affect the returend column, but grouping column.

If grouping column is set explicitly, first columns is returned instead of second.

<?php
$insert = $dbh->prepare("INSERT INTO people(id, gender) VALUES (?, ?)");
$insert->execute(array('2', 'female'));
$insert->execute(array('3', 'female'));
$insert->execute(array('4', 'female'));
$insert->execute(array('5', 'male'));
$insert->execute(array('6', 'male'));

$sth = $dbh->prepare("SELECT gender, id FROM people");
$sth->execute();

//Group values by the first column
var_dump($sth->fetchAll(PDO::FETCH_COLUMN|PDO::FETCH_GROUP));
?>

Returns:

<?php
array (size=2)
	'female' =>
		array (size=3)
			0 => string '2' (length=1)
			1 => string '3' (length=1)
			2 => string '4' (length=1)
	'male' =>
		array (size=2)
			0 => string '5' (length=1)
			1 => string '6' (length=1)
?>

But,
<?php
var_dump($sth->fetchAll(PDO::FETCH_COLUMN|PDO::FETCH_GROUP, 0));
?>

Returns:

<?php
array (size=2)
	'female' =>
		array (size=3)
			0 => string 'female' (length=1)
			1 => string 'female' (length=1)
			2 => string 'female' (length=1)
	'male' =>
		array (size=2)
			0 => string 'male' (length=1)
			1 => string 'male' (length=1)
?>

And

<?php
var_dump($sth->fetchAll(PDO::FETCH_COLUMN|PDO::FETCH_GROUP, 1));
?>

returns

<?php
array (size=5)
	2 => 
		array (size=1)
			0 => string 'female' (length=1)
	3 =>
		array (size=1)
			0 => string 'female' (length=1)
	4 =>
		array (size=1)
			0 => string 'female' (length=1)
	5 =>
		array (size=1)
			0 => string 'male' (length=1)
	6 =>
		array (size=1)
			0 => string 'male' (length=1)
?>

First column is returned and grouping is done by provided column index.

I still do not understand why FETCH_KEY_PAIR is not documented here, amongst constants, because it could
be very useful!

<?php
	var_dump($pdo->query('select id, name from table')->fetchAll(PDO::FETCH_KEY_PAIR));
?>

This will display:
array(2) {
	[2]=>
	string(10) "name2"
	[5]=>
	string(10) "name5"
}

Getting foreach to play nicely with some data from PDO FetchAll().
I was not understanding to use the $value part of the foreach properly:

<?php
$stmt = $this->db->prepare('SELECT title, FMarticle_id FROM articles WHERE domain_name =:domain_name');
			$stmt->bindValue(':domain_name', $domain);
			$stmt->execute();
			$article_list = $stmt->fetchAll(PDO::FETCH_ASSOC);
?>

WHich gives:

array (size=2)
	0 =>
		array (size=2)
			'title' => string 'About Cats Really Long Title for the article' (length=44)
			'FMarticle_id' => string '<stuff>' (length=36)
	1 =>
		array (size=2)
			'title' => string 'another cat story' (length=17)
			'FMarticle_id' => string '<stuff>' (length=36)

Then use:
<?php
foreach ($article_list as $row => $link) {
	echo '<a href="'. $link['FMarticle_id'].'">' . $link['title'] . '</a></br>';
	}
?>

Interestingly enough, when you use fetchAll, the constructor for your object is called
AFTER the properties are assigned. For example:

<?php
class person {
	public $name;

	function __construct() {
		$this->name = $this->name . " is my name.";
	}
}

# set up select from a database here with PDO
$obj = $STH->fetchAll(PDO::FETCH_CLASS, 'person');
?>

Will result in ' is my name' being appended to all the name columns. However, if you call
it slightly differently:

<?php
$obj = $obj = $STH->fetchAll(PDO::FETCH_CLASS | PDO::FETCH_PROPS_LATE, 'person');
?>

This is in accordance with the 'bug' of the FETCH_PROPS_LATE constant, which does exactly what it says.

If no rows have been returned, fetchAll returns an empty array.

Error:
SQLSTATE[HY000]: General error: 2014 Cannot execute queries while other unbuffered queries are active.
Consider using PDOStatement::fetchAll(). Alternatively, if your code is only ever going to run against
mysql, you may enable query buffering by setting the PDO::MYSQL_ATTR_USE_BUFFERED_QUERY attribute.

If you are using something like:

while ($row = $query->fetchObject()) {
	[...]
}

Try using this instead:

$rows = $query->fetchAll(PDO::FETCH_CLASS, 'ArrayObject');

foreach ($rows as $row) {
	[...]
}

Please be aware, if you do an OUTER LEFT JOIN and set PDO FetchALL to PDO::FETCH_ASSOC, any primary
key you used in the OUTER LEFT JOIN will be set to a blank if there are no records returned in the
JOIN.

For example:

<?php
//query the product table and join to the image table and return any images, if we have any, for each product
$sql = "SELECT * FROM product, image
LEFT OUTER JOIN image ON (product.product_id = image.product_id)";

$array = $stmt->fetchAll(PDO::FETCH_ASSOC);

print_r($array);
?>

The resulting array will look something like this:

Array
(
	[0] => Array
		(
			[product_id] =>
			[notes] => "this product..."
			[brand] => "Best Yet"
			...
		)
)

The fix is to simply specify your field names in the SELECT clause instead of using the
* as a wild card, or, you can also specify the field in addition to the *. The following
example returns the product_id field correctly:

<?php
$sql = "SELECT *, product.product_id FROM product, image
LEFT OUTER JOIN image ON (product.product_id = image.product_id)";

$array = $stmt->fetchAll(PDO::FETCH_ASSOC);

print_r($array);
?>

The resulting array will look something like this:

Array
(
	[0] => Array
		(
			[product_id] => 3
			[notes] => "this product..."
			[brand] => "Best Yet"
			...
		)
)

To fetch rows grouped by primary id or any other field, you may use FETCH_GROUP with FETCH_UNIQUE:

<?php

//preapre and execute a statement returning multiple rows, on a single one
$stmt = $db->prepare('SELECT id,name,role FROM table');
$stmt->execute();
var_dump($stmt->fetchAll(PDO::FETCH_GROUP | PDO::FETCH_UNIQUE));

//returns an array with the first selected field as key containing associative arrays with the row
//This mode takes care not to repeat the key in corresponding grouped array

$result = array
(1 => array
	('name'=>'foo',
	 'role'=>'sage',),
  2 => array
   ('name'=>'bar',
    'role'=>'rage',),);

// 'SELECT name,id,role FROM table' would result in that:

$result = array
('foo' => array
	('id'=>1,
	 'role'=>'sage',),
	'bar' => array
	('id'=>2,
	 'role'=>'rage',),);
?>

If you want to use PDO::FETCH_CLASS but do not like that all the values are of the type string,
you can always use the __construct function of the class specified to convert them to a different
type.

Another way is using mysqlnd, but it seems i had to recompile pHP for that.

<?php

class Cdr {
	public $a; //int
	public $b; //float
	public $c; //string

	public function __construct() {
		$this->a = intval($this->a);
		$this->b = floatval($this->b);
	}
}

//...
$arrCdrs = $objSqlStatement->fetchAll(PDO::FETCH_CLASS, 'Cdr');

?>

If you use the PDO::FETCH_CLASS | PDO::FETCH_PROPS_LATE flags to map columns to object properties,
fetchAll() will use any __set() method your object has when carrying out the mapping.

When passing PDO::FETCH_CLASS as the first argument, this method will accept the class name as
the second option:

<?php

$query = $pdo->prepare($sql);

$result = $query->execute($values);

if ($result && $query->rowCount() > 0) {
	$records = $query->fetchAll(PDO::FETCH_CLASS, 'Some_Class');
	// $record is now an array of Some_Class objects
}
?>

There may be some users who need to upgrade their MySQL class to PDO class. The way
of fetching results were changed from a while loop into a foreach loop. For the people
who wish to fetch the results in a while loop, here is a simple trick:

<?php

$db = new DB();
$query = $db->prepare("SELECT * FROM CPUCategory");
$query = $db->execute();
$result = $db->fetchAll();

var_dump($result);

?>

the output will be:

array(2) {
	[0]=> array(2) {
		["ccatid"]=> int(1)
		["ccatname"]=> string(5) "Intel"
	}
	[1]=> array(2) {
		["ccatid"]=> int(2)
		["ccatname"]=> string(3) "AMD"
	}
}

Never look like the output of old function:
[ORIGINAL STYLE] mysql_fetch_array($query)
[ MYSQL CLASS] $db->fetch_array($query)

But there is a simple way to use a while loop to fetch the results:

<?php

$db = new DB();
$query = $db->prepare("SELECT * FROM CPUCategory");
$query = $db->execute();

$result = $db->fetchAll();
$row = array_shift($result);
// If you need to fetch them now, put it in a while loop just like below:
// while($row = array_shift($result)) { ... }

var_dump($row);

?>

The Output will be in a single array with while loop returns True:
array(2) {
	["ccatid"]=> int(1)
	["ccatname"]=> string(5) "Intel"
}

So after fetching this row, while loop runs again and fetch the next row until all
row has fetched, then the while loop will return false. (Just like the old function did)

Note that fetchAll() can be extremely memory inefficient for large data sets. My memory limit
 was set to 160 MB, and this occured:

 <?php
 $arr = $stmt->fetchAll();
 // Fatal error: Allowed memory size of 16777216 bytes exhausted
?>

If you are going to loop through the output array of fetchAll(), instead use fetch()
to minimize memory usage as follows:

<?php
while ($arr = $stmt->fetch()) {
	echo round(memory_get_usage() / (1024*1024),3) . ' MB<br/>';
	//Do other stuff
}
//last line for the same query shows only 28.973 mB usage
?>

If you want to fetch rows as an object for which you ahve not defined a class, you can do:

<?php
$result = $q->fetchAll(PDO::FETCH_OBJ);
?>

In method body:

return $pstmt->fetchAll() or die("bad");

will not return correct value, but 1 instead.

There is also another fetch mode supported on Oracle and MSSQL:
PDO::FETCH_ASSOC.

> fetches only column names and omits the numeric index.

If you would like to return all columns from an sql statement with column keys as table
headers, it is as simple as this:

<?php
$dbh = new PDO("DS", "USERNAME", "PASSWORD");
$stmt = $dbh->prepare("SELECT * FROM tablename");

$stmt->execute();
$arrValues = $stmt->fetchAll(PDO::FETCH_ASSOC);

//OPen the table
print "<table width=\"100%\">\n";
print "<tr>\n";

//Add the table headers
foreach ($arrValues[0] as $key => $useless){
	print "<th>$key</th>";
}
print "</tr>";

//Display data
foreach($arrValues as $row){
	print "<tr>";
	foreach ($row as $key => $val){
		print "<td>$val</td>";
	}
	print "</tr>\n";
}

//Close the table
print "</table>\n";
?>

PHP fetchAll Data From SQL Server 2005

if field's data type is varchar(nvarchar), only fetch 255 chars. But the "text" data type is ok.

So notice, to change the 'varchar' or 'nvarchar' (length > 255) to 'text' data type.

<?php

$user = 'sa';
$pass = 'pass';

$conn = new PDO('mssql:host=127.0.0.1; dbname=tempdb;', $user, $pass);

$mainSQL = "SELECT field_varchar, field_text FROM table1";
$sth = $conn->prepare($mainSQL);
$sth->setFetchMode(PDO::FETCH_ASSOC);

$sth->execute();
$retRows = $sth->fetchAll();
// the field_varchar field only to fetch 255 chars(max)
// the field_text is ok.

var_dump($retRows);

unset($sth); unset($conn);

?>

If for instance you try to fetchAll(PDO::CLASS, "Class") it sometimes return an array of objects
with NULL values, but the count of objects fetched correspond to table rows.

In this way it works fine:

fetchAll(PDO::FETCH_CLASS | PDO::FETCH_PROPS_LATE, "Class");

For example

$stm = $pdo->prepare("SELECT * FROM Fruit");
$stm->execute();
$stm->fetchAll(PDO::FETCH_CLASS | PDO::FETCH_PROPS_LATE, "Fruit");

I was having trouble with returning PDO query results in arrays, due to the structure of the results
of those queries (query array with arrays for results inside). Now when executing a fetchAll() on a
query, you get the following:

Array ( [0] = Array ( [key1] => "value1", [key2] => "value2") [1] = Array( [key1] => "value1", [key2] => "value2" ))

This is a smaller array, but return results in a HUGE database this way and it quickly becomes impossible
to read out the array given.

This is where the glorious foreach comes in. To account for the depth of arrays being bound to keys,
we have to process them as follows:

<?php
	foreach ($query as $key => $value) {
		return $value["key2"];
	}
?>

THis already does the job, but to return them in arrays we have to change our return code:

<?php
	
	foreach ($query as $key => $value) {
		return array(
				"key1" => $value["key1"],
				"key2" => $value["key2"]
		);
	}
?>

This foreach loops through the query array, just like the first one, but the return code
just does not return the keys representing the result arrays ($key) and returs only
keys from inside the result arrays, stored in $value. This gives us an array looking like
this:

Array ( [key1] => "value1", [key2] => "value2")

This should return all the values in your array, if written properly. I am still having
problems with with the foreach not returning ALL results, but this note was mainly
to show how it can be returned in an array.

Note, that you can use PDO::FETCH_COLUMN|PDO::FETCH_GROUP pair only while selecting two
columns, not like DB_common::getAssoc(), when grouping is set to true.

PDOStatement::fetchColumn

PDOStatement::fetchColumn - Returns a single column from the next row of a result set

Desc:

public mixed PDOStatement::fetchColumn ([ int $column_number = 0 ])

Returns a single column from the next row of a result set or FALSE if there
are no more rows.

Note: PDOStatement::fetchColumn() should not be used to retrieve boolean columns,
as it is impossible to distinguish a value of FALSE from there being no more rows
to retrieve. Use PDOStatement::fetch() instead.

Params:

column_number: 0-indexed number of the column you wish to retrieve from the row. If no value
is supplied, PDOStatement::fetchColumn() fetches the first column.

Returns:

PDOStatement::fetchColumn() returns a single column from the next row of a result set or FALSE
if there are no more rows.

Warning: There is no way to return another column from the same row if you use PDOStatement::fetchColumn()
to retrieve data.

Examples:

Example #1 Return first column of the next row

<?php
$sth = $dbh->prepare("SELECT name, colour FROM fruit");
$sth->execute();

print("Fetch the first column from the first row in the result set:\n");
$result = $sth->fetchColumn();
print("name = $result\n");

print("Fetch the second column from the second row in teh result set:\n");
$result = $sth->fetchColumn(1);
print("colour = $result\n");
?>

The above will output:

Fetch the first column from the first row in the result set:
name = lemon
Fetch the second column from the second row in the result set:
colour = red

fetchColumn return boolean false when a row is not found or do not have more rows.

This is an excellent method for returning a column count. For example:

<?php
$db = new PDO('mysql:host=localhost;dbname=pictures', 'user', 'password');
$pics = $db->query('SELECT COUNT(id) FROM pics');
$this->totalpics = $pics->fetchColumn();
$db = null;
?>

In my case, $pics->fetchColumn() returns 641 because that is how many pics i have in the DB

PDOStatement::fetchObject:

PDOStatement::fetchObject - Fetches the next row and return it as an object.

Desc:

public mixed PDOStatement::fetchObject ([ string $class_name = "stdClass" [, array $ctor_args ]] )

Fetches the next row and returns it as an object. This function is an alternative to PDOStatement::fetch()
with PDO::FETCH_CLASS or PDO::FETCH_OBJ style.

When an object is fetched, its properties are assigned from respective column values, and afterwards
its constructor is invoked.

Params:

class_name: Name of the created class.

ctor_args: Elements of this array are passed to the constructor.

Return values:

Returns an instance of the required class with property names that corresponds to the column names or 
FALSE on failure.

Be warned of the rather unorthodox behavior of PDOStatement::fetchObject() which injects property-values
BEFORE invoking the constructor - in other words, if your class  initializes property-values to defaults
in the constructor, you will be overwriting the values injected by fetchObject().

A var_dump($this) in your __construct() method will reveal that property-values have been initalized
prior to calling your constructor, so be careful.

For this reason, i strongly recommend hydrating your objects manually, after retrieving the data
as an array, rather than trying to have PDO apply properties directly to your objects.

Clearly somebody thought they were being clever here - allowing you to access hydrated property-values
from the constructor. Unfortunately, this is just not how OOP works - The constructor, by definition,
is the first method called upon cosntruction.

If you need to initialize your objects after they have been constructed and hydrated, i suggest
your model types implement an interface with an init() method, and your data access layer
invoke this method (if implemented) after hydrating.

PDOStatement::fetchObject() injects values as string, I needed a conversion type.

I did it including settype() function in class constructor

Below is a method that finds a user by id and returns user object instance:

<?php
class UserMapper extends MapperAbstract
{
	//other code
	public function findById(int $userId)
	{
		$pdos = $this->dBase->prepare('SELECT user_id AS objectId, name, description, password, active,
			created, last_update AS lastUpdate FROM user WHERE user_id = :id');

		$pdos->bindParam(':id', $userId, \PDO::PARAM_INT);
		$pdos->execute();

		return $pdos->fetchObject('\DomainObjects\User', array($this->password));
	}
	//other code
}
?>

User class with type handling:

<?php
class User extends DomainObjectAbstract
{
	//other code
	public function __construct(Password $password)
	{
		$this->passwordUtility = $password;

		settype($this->objectId, 'integer');
		settype($this->active, 'integer');
	}
}
?>

var_dump() of returned User instance:

<?php
object(DomainObjects\User)[18]
	public 'name' => string 'root' (length=4)
	public 'description' => string 'System User' (length=11)
	public 'password' => string '<stuff>' (length=60)
	public 'active' => int 1
	public 'created' => string '2015-02-14 10:39:00' (length=19)
	public 'lastUpdate' => string '2016-08-30 18:46:56' (length=19)
	private 'passwordUtility' =>
		object(Auth\Password)[13]
			protected 'options' => 
				array (size=1)
					'cost' => int 11
	protected 'objectId' => int 1

?>

'objectId' and 'active' are now of the type required

It should be mentioned that this method can set even non-public properties. It may sound
strange but it can actually be very useful when creating an object based on mysql result.

Consider a User class:

<?php
class User {
	//private properties
	private $id, $name;

	private function __construct () {}

	public static function load_by_id ($id) {
		$stmt = $pdo->prepare('SELECT id, name FROM users WHERE id=?');
		$stmt->execute([$id]);
		return $stmt->fetchObject(__CLASS__);
	}
	//Same method can be written with the "name" column/property
}

$user = User::load_by_id(1);
var_dump($user);
?>

fetchObject() does not care about properties being public or not. It just passes the
result to the Object. Output is like:

object(User)#3 (2) {
	["id":"User":private]=>
	string(1) "1"
	["name":"User":private]=>
	string(10) "John Smith"
}

You can access MySQL tables in an objective way. Suppose you have a table named Users that
has fields: UserID, UserName, UserPassword, UserBirthday, you can create a PHP class extending
DataObject that is associated with this table:

<?php
class User extends DataObject {
	// name: Table Name, key: Primary Key (can be an array), auto: AUTO_INCREMENT field
	protected static $_table = array('name' => 'Users', 'key' => 'UserID', 'auto' => 'UserID');
	//relationships between PHP props and MySQL field names
	protected static $_propertyList = array('id' => 'UserID', 'name' => 'UserName', 'password' => 'UserPassword',
'birthday' => 'UserBirthday');
	
	//A method taht fetches all users as an array
	public static function GetAll() {
		global $dbh;
		$sql = 'SELECT * FROM Users';
		$stmt = $dbh->query($sql);

		$users = array();
		while ($user = $stmt->fetchObject(__CLASS__)) {
			$users[] = $user;
		}
		return $users;
	}

	//Methods that fetch a specific user
	public static function GetUserByName($name) {}
	public static function GetUserByID($name) {}

	//Methods for the current user object
	public function checkPassword($password) {return $this->password == $password;}
	public function showLink() {return "<a href=\"user.php?i={$this->id}\">{$this->name}</a>";}
}

//Then, you can create an instance of this class to insert a row in your table
$user = new User();
$user->name = 'oct1158';
$user->password = '789012';

$user->useFunction('birthday', 'NOW()');
echo 'Field birthday uses MySQL Function: ', $user->birthday, '<br>';
if ($user->insert()) {
	echo 'New User ID: ', $user->id, '<br>';

	//Update the row
	$user->password = '112233';
	$user->update();
} else {
	echo 'INSERT Failed<br>';
}

// get a specific user by a query
$sql = 'SELECT * FROM Users WHERE UserName = ?';
$stmt = $dbh->prepare($sql);
$stmt->execute(array('admin'));

$admin_user = $stmt->fetchObject('User');
echo 'Admin ID is ', $admin_user->id, '<br>';
echo 'Admin Birthday is ', $admin_user->birthday , ' .<br>';

//Get all users by a static method of that class
$users = User::GetAll();
echo '<br>';
echo $users[0]->name, ', ', $users[0]->birthday, '<br>';
echo $users[1]->name, ', ', $users[1]->birthday, '<br>';

echo $users[2]->name, ', ', $users[2]->birthday, '<br>';
echo '<br>';

//Create an empty user and then delete it immedeatly
$user = new User();
$user->insert();
$user->delete();
?>

The DataObject class example:

<?php
class DataObject {
	private $changeFields = array(); // list of updated fields
	private $data = array(); //original row from PDOStatement
	private $funcFields = array(); //fields that use MySQL functions

	// The properties above are private in this class, so even if in your subclass you define
	//Some properties named the same, or you associate a property of the same name with a field
	// in your table, they will never influence these properties.

	function __get($property) {
		if (isset($this::$_propertyList[$property])) {
			return $this->data[$this::$_propertyList[$property]]; //access fields by PHP props
		} else {
			return $this->property; // throw the default PHP error
		}
	}

	function __set($property, $value) {
		if (isset($this::$_propertyList[$property])) {
			$field = $this::$_propertyList[$property];
			$this->data[$field] = $value; //update $data

			//take down changed fields
			if (!in_array($field, $this->changedFields)) {
				array_push($this->changedFields, $field);
			}
			$index = array_search($field, $this->funcFields);
			if ($index !== false) {
				unset($this->funcFields[$index]);
				$this->funcFields = array_values($this->funcFields);
			}
		} else {
			// For fetchObject
			$this->data[$property] = $value; //redirect to Array $data
		}
	}

	private function checkPrimaryKey() {}
	private function clear() {}
	public function delete() {}
	public function insert() {}

	public function update() {}
	public function useFunction($property, $function) {}
}
?>

If using a namespaced class, you must provide the fully qualified class name; fetchObject does not
seem to know about any "use" statements.

This results in a PHP Fatal error: Class 'MyClass' not found...:
<?php
use MyNamespace\MyClass;
//...
$o = $statement->fetchObject('MyClass');
?>

While, this works:

<?php
use MyNamespace\MyClass; //still needed for my code
// ...
$o = $statement->fetchObject('MyNamespace\\MyClass');
?>

PDOStatement::getAttribute:

PDOStatement::getAttribute - Retrieve a statement attribute

Desc:

public mixed PDOstatement::getAttribute( int $attribute )

Gets an attribute of the statement. Currently, no generic attributes exists
but only driver specific:

PDO::ATTR_CURSOR_NAME (Firebird and ODBC specific): Get the name of cursor for UPDATE ... WHERE CURRENT OF.

Return values:

Returns the attribute value

MySQL driver does not support PDOStatement::getAttribute(). If you use it, it produces a warning, even if
you set error reporting (PDO::ERRMODE) to PDO::ERRMODE_SILENT; except when you set to PDO::ERRMODE_EXCEPTION.

Also, the SQLSTATE error code of the PDO statement (not the PDO object itself, i.e, using PDOStatement::errorCode())
will be 'IM001'.

PDOStatement::getColumnMeta:

PDOStatement::getColumnMeta - Returns metadata for a column in a result set

desc:

public array PDOStatement::getColumnMeta ( int $column )

Retrieves the metadata for 0-indexed column in a result set as an associative array.

Warning: Not all PDO drivers support PDOStatement::getColumnMeta()

The following drivers support this method:

PDO_DBLIB
PDO_MYSQL
PDO_PGSQL
PDO_SQLITE

Params:

column: The 0-indexed column in the result set.

Return Values:

Returns an associative array containing the following values representing the metadata for a single
column:

Column Metadata

Name 				Value

native_type 		The PHP native type used to represent the column value.

driver:decl_type 	The SQL type used to represent the column value in the database. If the column
					set is the result of a function, this value is not returned by PDOStatement::getColumnMeta().

flags 				Any flags set for this column.

name 				The name of this column as returned by the database.

table 				The name of this column's table as returned by the database.

len 				The length of this column. Normally -1 for types other than floating point decimals.

precision 			The numeric precision of this column. Normally 0 for types other than floating point decimals.

pdo_type 			The type of this column as represented by the PDO::PARAM_* constants.

Changelog:

Version 			Description

5.4.0 				PDO_DBLIB driver support added

5.2.3 				table field

Examples:

Example #1 Retrieving column metadata

The following example shows the results of retrieving the metadata for a single column generated
by a function (COUNT) in a PDO_SQLITE driver.

<?php
$select = $DB->query('SELECT COUNT(*) FROM fruit');
$meta = $select->getColumnMeta(0);
var_dump($meta);
?>

The above will output:

array(6) {
	["native_type"]=>
	string(7) "integer"
	["flags"]=>
	array(0) {
	}
	["name"]=>
	string(8) "COUNT(*)"
	["len"]=>
	int(-1)
	["precision"]=>
	int(0)
	["pdo_type"]=>
	int(2)
}

This method is supported in the MySQL 5.0+ Driver. It can be used for object hydration:

<?php

$pdo_stmt = $dbh->execute('SELECT discussion.id, discussion.text, comment.id, comment.text FROM discussions
	LEFT JOIN comments ON comment.discussion_id = discussion.id');

foreach(range(0, $pdo_stmt->columnCount() - 1) as $column_index)
{
	$meta[] = $pdo_stmt->getColumnMeta($column_index);
}

while($row = $pdo_stmt->fetch(PDO::FETCH_NUM))
{
	foreach($row as $column_index => $column_value)
	{
		//Do something with the data, using the ids to establish the discussion.has_many(comments) relationship.
	}
}

?>

If you are building an ORM, this method is very useful to support more natural SQL syntax. More ORMs require the
colum names to be aliases so that htey can be parsed and turned into objects that properly presents has_one,
has_many, many_to_many relationships.

I found a short discussion related to this function at:

This function is experiemntal. The behaviour of this function, the name of this function, and anything
else documented about this function may change without a notice in a future release of PHP. Use this
function at your own risk.

I wouldn't use this function if i were you, because of that statement. instead, use a "SHOW COLUMNS
FROM [table]" query to retrieve all the column data. That function will then retrieve column information
that you can then parse into the appropiate binding types.

I actually had to do this myself a while ago, and i made a quick and dirty function for it.

Function to get Column Types:

//Automatically get column metadata
protected function getColumnMeta()
{
	//Clear any previous column/field info
	$this->_fields = array();
	$this->_fieldMeta = array();
	$this->_primaryKey = NULL;

	//Automatically retrieve column information if column info not specified
	if(count($this->_fields) == 0 || count($this->_fieldMeta) == 0)
	{
		//Fetch all columns and store in $this->fields
		$columns = $this->db->query("SHOW COLUMNS FROM " . $this->getTableName(), PDO::FETCH_ASSOC);
		foreach($columns as $key => $col)
		{
			//INsert into field array
			$colname = $col['Field'];
			$this->_fields[$colname] = $col;
			if($col['Key'] == "PRI" && empty($this->_primaryKey)) {
				$this->_primaryKey = $colname;
			}

			// set field types
			$colType = $this->parseColumnType($col['Type']);
			$this->_fieldMeta[$colname] = $colType;
		}
	}
	return true;	
}

The function to parse the PDO returned column information

//Parse PDO-produced column type
//[internal function]

protected function parseColumnType($colType)
{
	$colInfo = array();
	$colParts = explode(" ", $colType);
	if($fparen = strpos($colParts[0], "("))
	{
		$colInfo['type'] = substr($colParts[0], 0, $fparen);
		$colInfo['pdoType'] = '';
		$colInfo['length'] = str_replace("(", "", substr($colParts[0], $fparen+1));
		$colInfo['attributes'] = isset($colParts[1]) ? $colParts[1] : NULL;
	}
	else
	{
		$colInfo['type'] = $colParts[0];
	}

	//PDO bind types
	$pdoType = '';
	foreach($this->_pdoBindTypes as $pKey => $pType)
	{
		if(strpos(' '.strtolower($colInfo['type']).' ', $pKey)) {
			$colInfo['pdoType'] = $pType;
			break;
		} else {
			$colInfo['pdoType'] = PDO::PARAM_STR;
		}
	}

	return $colInfo;
}

And the column mappings array

//WIll attempt to bind columns with datatypes based on parts of the column type name
//Any part of the name below will be picked up and converted unless otherwise specified
//Example: 'VARCHAR' columns have 'CHAR' in them, so 'char' => PDO::PARAM_STR will convert
//all columns of that type to be bound as PDO::PARAM_STR
//If there is no specification for a column type, column will be bound as PDO::PARAM_STR
protected $_pdoBindTypes = array(
		'char' => PDO::PARAM_STR,
		'int' => PDO::PARAM_INT,
		'bool' => PDO::PARAM_BOOL,
		'date' => PDO::PARAM_STR,
		'time' => PDO::PARAM_INT,
		'text' => PDO::PARAM_STR,
		'blob' => PDO::PARAM_LOB,
		'binary' => PDO::PARAM_LOB
		);

Do note, this was used in a class, make adjustments as needed be.

PDOStatement::nextRowset:

PDOStatement::nextRowset - Advances to the next rowset in a multi-rowset statement
handle

Desc:

public bool PDOStatement::nextRowset()

Some database servers support stored procedures that return more than one rowset (also known as a result set).
PDOStatement::nextRowset() enables you to access the second and subsequent rowsets associated with a PDOStatement
object. Each rowset can have a different set of columns from the preceding rowset.

Return Values:

Returns TRUE on success or FALSE on failure.

Examples:

Example #1 Fetching multiple rowsets returned from a stored procedure

The following example shows how to call a stored procedure, MULTIPLE_ROWSETS, that returns
three rowsets. We use a do / while loop to loop over the PDOStatement::nextRowset() method,
which returns false and terminates the loop when no more rowsets can be returned.

<?php
$sql = 'CALL multiple_rowsets()';
$stmt = $conn->query($sql);
$i = i;
do {
	$rowset = $stmt->fetchAll(PDO::FETCH_NUM);
	if ($rowset) {
		printResultSet($rowset, $i);
	}
	$i++;
} while ($stmt->nextRowset());

function printResultSet(&$rowset, $i) {
	print "Result set $i:\n";
	foreach ($rowset as $row) {
		foreach ($row as $col) {
			print $col . "\t";
		}
		print "\n";
	}
	print "\n";
}
?>

The above will output:

Result set 1:
apple 	red
banana 	yellow

Result set 2:
orange 	orange 	150
banana 	yellow 	175

Result set 3:
lime 	green
apple 	red
banana 	yellow

on MSSQL and 'dsn' => 'dblib:...',:
If you know how many count rowset then do not use consturction of do...while.

<?php
do {
	$pdoStatement->fetchAll(\PDO::FETCH_ASSOC);
} while (
	$pdoStatement->nextRowset()
);
?>

When i get large fetchAll(over 30) for second nextRowset. I get error - Segmentation fault.

Uses step-by-step instead do...while is fix for this bug:

<?php
$pdoStatement->fetchAll(\PDO::FETCH_ASSOC);
$pdoStatement->nextRowset();
$pdoStatement->fetchAll(\PDO::FETCH_ASSOC);
?>

PDO::nextRowset() does not appear to be currently supported by the Firebird PDO driver.

If you use PDO::fetch instead of PDO::fetchAll and do not reach the end the result set,
PDO::nextRowset() will fail with "SQLSTATE[HY000]: General error: PDO_DBLIB: dbresults() returned FAIL."

PDOStatement::rowCount:

PDOStatement::rowCount - returns the number of rows affected by the last SQL statement

Desc:

public int PDOStatement::rowCount()

PDOStatement::rowCount() returns the number of rows affected by the last DELETE, INSERT, or UPDATE statement
executed by the corresponding PDOStatement object.

If the last SQL statement executed by the associated PDOStatement was a SELECT statement, some databases
may return the number of rows returned by that statement. However, this behaviour is not guaranteed for
all databases and should not be relied on for portable applications.

Return Values:

Returns the number of rows.

Examples:

Example #1 Return the number of deleted rows:

PDOStatement::rowCount() returns the number of rows affected by a DELETE, INSERT, or UPDATE statement.

<?php
//Delete all rows from the FRUIT table
$del = $dbh->prepare('DELETE FROM fruit');
$del->execute();

//Return number of rows that were deleted
print("Return number of rows that were deleted:\n");
$count = $del->rowCount();
print("Deleted $count rows.\n");
?>

The above will output:

Return number of rows that were deleted:
Deleted 9 rows.

Example #2 Counting rows returned by a SELECT statement

For most databases, PDOStatement::rowCount() does not return the number of rows
affected by a SELECT statement. Instead, use PDO::query() to issue a SELECT COUNT(*)
statement with the same predicates as your intended SELECT statement, then use PDOStatement::fetchColumn()
to retrieve the number of rows that will be returned. Your application can then perform
the correct action.

<?php
$sql = "SELECT COUNT(*) FROM fruit WHERE calories > 100";
if ($res = $conn->query($sql)) {
	
	//Check the number of rows that match the SELECT statement
	if ($res->fetchColumn() > 0) {
		//Issue the real SELECT statement and work with the results
		$sql = "SELECT name FROM fruit WHERE calories > 100";
		foreach ($conn->query($sql) as $row) {
			print "Name: " . $row['NAME'] . "\n";
		}
	}

	//No rows matched - do something else
	else {
		print "No rows matched the query.";
	}
}

$res = null;
$conn = null;
?>

The above will output:

apple
banana
orange
pear

When updating a Mysql table with identical values, nothing is really affected, so rowCount
will return 0. As Mr. Perl below noted, this is not always the preferred behaviour and you can 
change it yourself since PHP 5.3

Just create your PDO object with:

<?php
$p = new PDO($dsn, $u, $p, array(PDO::MYSQL_ATTR_FOUND_ROWS => true));
?>

and rowCount() will tell you how many rows your update-query actually found/matched.

Great, while using MySQL5, the only way to get the number of rows after doing a PDO
SELECT query is to either execute a separate SELECT COUNT(*) query (or to do count($stmt->fetchAll()),
which seems like a waste, due to overhead).

Also, in PDO, you cannot get the value of output params from stored procedures in some DBMSs, such
as SQL Server.

Note that, an INSERT ... ON DUPLICATE KEY UPDATE statement is not an INSERT statement, rowCount
won't return the number or rows inserted or updated for such a statement.

For MySQL, it will return 1 if the row is inserted, and 2 if it is updated, but that may not
apply to other DBs.

To display info only when the query is not empty, i do something like this:

<?php
	$sql = 'SELECT model FROM cars';
	$stmt = $db->prepare($sql);
	$stmt->execute();

	if ($data = $stmt->fetch()) {
		do {
			echo $data['model'] . '<br>';
		} while ($data = $stmt->fetch());
	} else {
		echo 'Empty Query';
	}
?>

It would be better to use SQL_CALC_FOUND_ROWS, if you only use MySQL. It has many advantages 
as you could retrieve only part of result set (via LIMIT) but still get the total row count.

code:

<?php
$db = new PDO(DSN...);
$db->setAttribute(array(PDO::MYSQL_USE_BUFFERED_QUERY=>TRUE));
$rs = $db->query('SELECT SQL_CALC_FOUND_ROWS * FROM table LIMIT 5,15');
$rs1 = $db->query('SELECT FOUND_ROWS()');

$rowCount = (int) $rs1->fetchColumn();
?>

In some drivers, rowCount() only works when using the prepare() with PDO::CURSOR_SCROLL.
So, you can modify your PDO Class:

<?php
class myPDO extends PDO
{
	function query($query, $values=null)
	{
		if($query == "")
			return false;

		if($sth = $this->prepare($query, array(PDO::ATTR_CURSOR => PDO::CURSOR_SCROLL)))
		{
			$res = ($values) ? $sth->execute($values) : $sth->execute();
			if(!$res)
				return false;
		}
		return $sth;
	}
}
?>

Now let us test (i using PHP 5.2.9-2):

<?php
function TestRowCount($dsn, $db_user, $db_pass)
{
	$pdh = new PDO($dsn, $db_user, $db_pass);
	$sth = $pdh->query("SELECT * FROM sys.tables");
	print "rowCount() Standard: ".$sth->rowCount()."<br>";

	$pdh = new myPDO($dsn, $db_user, $db_pass);
	$sth = $pdh->query("SELECT * FROM sys.tables");
	print "rowCount() New: ".$sth->rowCount() . "<br><br>";

	$pdh=null;
}

$db_server = "xxx";
$db_name = "xxx";
$db_user = "xxx";
$db_pass = "xxx";

print "PDO_MSSQL"."<br>";
TestRowCount("mssql:host=$db_server;dbname=$db_name", $db_user, $db_pass);

print "MSSQL throw PDO_ODBC"."<br>";
TestRowCount("odbc:DRIVER={SQL Server};SERVER=$db_server;DATABASE=$db_name;", $db_user, $db_pass);

print "MS SQL driver 2.0"."<br>";
TestRowCount("sqlsrv:server=$db_server;Database=$db_name", $db_user, $db_pass);
?>

My results:

PDO_MSSQL
rowCount() Standard: 0
rowCount() New: 0

MSSQL throw PDO_ODBC
rowCount() Standard: -1
rowCount() New : 53

MS SQL driver 2.0
rowCount() Standard: -1
rowCount() New: 53

With myPDO class you can use prepared queries like:

<?php
	$pdh = new myPDO($dsn, $db_user, $db_pass);
	$sth = $pdh->query("select * from data where id>? or name like ?", array(100, "A%"));
?>

MySQL does not seem to return anything in rowCount for a select statement, but you can
easily and efficiently get the row count as follows:

class db extends PDO {
	public function last_row_count() {
		return $this->query("SELECT FOUND_ROWS()")->fetchColumn();
	}
}

$myDb = new db('mysql:host=myhost;dbname=mydb', 'login', 'password');

Then, after running your query:

if ($myDb->last_row_count() == 0) {
	echo "Do something";
}

If you use "INSERT INTO ... ON DUPLICATE KEY UPDATE" syntax, mysql_affected_rows() will return
you 2 if the UPDATE was made (just as it does with the "REPLACE INTO" syntax) and 1 if the
INSERT was.

So, if you chain some inserts and updates, the real accounting won't occur, as it simply reflects
the last occurrence of said instansiation of respective query. (be that Insert or Update)

PDOStatement::setAttribute:

PDOStatement::setAttribute - Set a statement attribute

Desc:

public bool PDOStatement::setAttribute ( int $attribute, mixed $value)

Sets an attribute on the statement. Currently, no generic attributes are set
but only driver specific:

PDO::ATTR_CURSOR_NAME (Firebird and ODBC specific): Set the name of cursor for UPDATE ... WHERE CURRENT OF.

Return Values:

Returns TRUE on success or FALSE on failure.

PDOStatement::setFetchMode:

PDOStatement::setFetchMode - Set the default fetch mode for this statement

Desc:

public bool PDOStatement::setFetchMode ( int $mode )

public bool PDOStatement::setFetchMode ( int $PDO::FETCH_COLUMN, int $colno )

public bool PDOStatement::setFetchMode ( int $PDO::FETCH_CLASS, string $classname, array $ctoargs )

public bool PDOStatement::setFetchMode ( int $PDO::FETCH_INTO, object $object )

Params:

mode: The fetch mode must be one of the PDO::FETCH_* constants.

colno: Column number.

classname: Class name.

ctoargs: Constructor arguments

object: Object

Return Values:

Returns TRUE on success or FALSE on failure.

Examples:

Example #1 Setting the fetch mode

The following  examples demonstrates how PDOStatement::setFetchMode() changes the default fetch mode for
a PDOStatement object.

<?php
$sql = 'SELECT name, colour, calories FROM fruit';
try {
	$stmt = $dbh->query($sql);
	$result = $stmt->setFetchMode(PDO::FETCH_NUM);
	while ($row = $stmt->fetch()) {
		print $row[0] . "\t" . $row[1] . "\t" . $row[2] . "\n";
	}
}
catch (PDOException $e) {
	print $e->getMessage();
}
?>

The above will output:

apple 	red 		150
banana 	yellow 		250
orange 	orange 		300
kiwi 	brown 		75
lemon 	yellow 		25
pear 	green 		150
watermelon 			pink 			90

If you want to fetch your results into a class (by using PDO::FETCH_CLASS) and want the constructor
to be executed *before* PDO assigns the object properties, you need to use the PDO::FETCH_PROPS_LATE
constant:

<?php
$stmt = $pdo->prepare("your query");

$stmt->setFetchMode(PDO::FETCH_CLASS|PDO::FETCH_PROPS_LATE, "className", $constructorArguments);

//pass parameters, if required by the query
$stmt->execute($parameters);

foreach ($stmt as $row)
{
	// do something with (each of) your object
}
?>

Something very helpful is knowing how to access namespaces from the function. It took me a minute
(and Google) to figure out. The ::class property is going to be your best friend in this case.

<?php
$stmt->setFetchMode(PDO::FETCH_CLASS, Name\Space\Class::class);
?>

The PDOException class:

Intro:

Represents an error raised by PDO. You should not throw a PDOException from your own
code. See Exceptions for more information about Exceptions in PHP.

Class synopsis:

PDOException extends RuntimeException {
	
	//properties
	public array $errorInfo;
	protected string $code;

	//inherited properties
	protected string $message;
	protected int $code;
	protected string $file;
	protected int $line;

	//Inherited methods
	final public string Exception::getMessage()
	final public Throwable Exception::getPrevious()
	final public mixed Exception::getCode()

	final public string Exception::getFile()
	final public int Exception::getLine()
	final public array Exception::getTrace()

	final public string Exception::getTraceAsString()
	public string Exception::__toString()
	final private void Exception::__clone()
}

Properties:

errorInfo: Corresponds to PDO::errorInfo() or PDOStatement::errorInfo()

code: SQLSTATE error code. Use Exception::getCode() to access it.

Here is something interesting regarding a PDOException and it involves some of the annoyances that can be
associated with PHP's dynamic nature.

PDOException extends from RuntimeException, which in return extends from Exception. As such, it has access
to the $code Protected Class variable, which represents the Exception's code as an Integer and can be
accessed externally using the Exception::getCode method.

Here is the interesting part. PDOException actually redefines $code as a String and not an Integer,
because for its case, $code actually contains the Exception's SQL State, which is composed of chars
and numbers.

It is actually documented in the manual that $code is a String and not an Integer but it might not
be immediately clear, because it is hidden by the fact that PDOException::getCode is documented
to return an Integer and not a String.

Some developers like to catch a PDOException and rethrow it as a different Exception if they wrap
their database calls in an external lib. For example, consider the following code:

<?php

try {
	$PDO = new PDO('...'); //PDO Driver DSN. Throws A PDOException.
}
catch(PDOException $Exception) {
	//PHP fatal error. Second argument has to be an integer, but PDOException::getCode returns a string
	throw new MyDatabaseException($Exception->getMessage(), $Exception->getCode());
}
?>

Be careful in that you have to typecast the value returned by PDOException::getCode to an Integer
BEFORE you pass it as an Argument to your Exception's Constructor. The following will work:

<?php

try {
	$PDO = new PDO('...'); //PDO Driver DSN. Throws A PDOException.
}
catch(PDOException $Exception) {
	//Note that typecast to an integer
	throw new MyDatabaseException($Exception->getMessage(), (int)$Exception->getCode());
}

?>

In response to the 15-May-2010 07:45 note from: samuelelliot+php dot net at gmail dot com

Since the most base class Exception takes three arguments, and the previous exception is not the first,
Since inherited classes to not implicitly call the parent constructor

I recommend changing his ocnstructor to this:

public function __construct(string $message="", int $code = 0, PDOException $e = null)
{
	//in case they call: new MyException($somePDOException);
	//instead of following the interface
	//
	if (is_subclass_of($message, PDOException))
	{
		$e = $message;
		$code = $e->getCode();
		$message = $e->getMessage();
	}

	//Let PDOException do its normal thing
	parent::__construct($message, $code, $e);

	//Now to correct the code number
	$state = $this->getMessage();
	if(!strstr($state, 'SQLSTATE['))
		$state = $this->getCode();
	if(strstr($state, 'SQLSTATE['))
	{
		preg_match('/SQLSTATE\[(\w+)\] \[(\w+)\] (.*)/', $state, $matches);
		$this->code = ($matches[1] == 'HT000' ? $matches[2] : $matches[1]);
		$this->message = $matches[3];
	}
}

The sqlstate is an hex integer (as string)
if you want to wrap pdoexception, use

throw new MyDBException($pdoe->getMessage(), hexdec($pdoe->getCode()), $pdoe);

Since PDOException returns the error code as a string, you need a constructor like the one below
if you wish to rethrow the PDOException as a custom exception.

This constructor does not call the parent::__construct which will enforce the int type on the error
code, but set the message and code as properties directly on the custom exception object.

<?php

class CustomException extends PDOException {
	//Override constructor and set message and code properties.
	//Workaround PHP BUGS #51742, #39615
	public function __construct($message=null, $code=null) {
		$this->message = $message;
		$this->code = $code;
	}
}

PDOException has two methods for retrieving information about an error. When interpreting the
PDOException i run into a problem, the error code that is provided by getCode() is meaningless.
i have come up with a method to make both the error code and message more usable.

A bad username or password would normally provide the following:

CODE: 0
Message: "SQLSTATE[28000] [1045] Access denied for user 'user'@'example.com' (using password: YES)"

Using my extended exception class provides:

Code: "28000"
Message: "Acess denied for use 'user'@'example.com' (using password: YES)"

<?php
class pdoDbException extends PDOException {
	
	public function __construct(PDOException $e) {
		if(strstr($e->getMessage(), 'SQLSTATE[')) {
			preg_match('/SQLSTATE\[(\w+)\] \[(\w+)\] (.*)/', $e->getMessage(), $matches);
			$this->code = ($matches[1] == 'HT000' ? $matches[2] : $matches[1]);
			$this->message = $matches[3];
		}
	}
}
?>

To walk through the method, first the beginning of the message is checked for the SQLSTATE text.
If the text is present, message is then parsed to pull the ANSI code, the SQL specific, and the
message. THe parsed values are stored in there respective variables. The error code variable 
stores the ANSI code, unless ANSI is 'HT000' (unmapped error code) then SQL specific codei s used.

Using this class is easy, when interacting with PDO use a try catch and a set of blocks, as follows:

<?php
try {
	$pdo = new PDO($dns, $username, $password, $options);
} catch (PDOException $e) {
	throw new pdoDbException($e);
}
?>

Now you can use the normal error methods to retrieve the real error code and message.

<?php
echo $err->getCode(); //Outputs: "28000"
echo $err->getMessage(); //Outputs: "Access denied for user 'user'@'example.com' (using password: YES)"
?>

If you decide to use this code, be aware that the error code is a string (as opposed to PHP standard
errors which are integers) as some error codes are alphanumeric.

Exceptions:

Table of Contents

BadFunctionCallException

BadMethodCallException

DomainException

InvalidArgumentException

LengthException

LogicException

OutOfBoundsException

OutOfRangeException

OverflowException

RangeException

RuntimeException

UnderflowException

UnexpectedValueException

SPL provides a set of standard Exceptions.

See also the Predefined Exceptions

SPL Exceptions Class Tree:

LogicException (extends Exception)
	BadFunctionCallException
		BadMethodCallException

	DomainException
	InvalidArgumentException
	LengthException
	OutOfRangeException

RuntimeException (extends Exception)
	OutOfBoundsException
	OverflowException
	RangeException
	UnderflowException
	UnexpectedValueException

Standard PHP Library (SPL)

Introduction:

The Standard PHP Library (SPL) is a collection of interfaces and classes that are meant to solve common problems.

No external libraries are needed to build this extension and it is available and compiled by default in PHP 5.0.0

SPL provides a set of standard datastructure, a set of iterators to traverse over objects, a set of interfaces,
a set of standard Exceptions, a number of classes to work with files and it provides a set of functions
like spl_autoload_register()

Installing/Configuring

Table of Contents:

Requirements

INstallation

Runtime Configuration

Resource Types

Installation:

This extension is available and compiled by default in PHP 5.0.0

Note: As of PHP 5.3.0 this extension can no longer be disabled and is therefore always
available.

Runtime Configuration:

This extension has no configuration directives defined in php.ini

Predefined Constants:

The constants below are defined by this extension, and will only be available when the extension
has either been compiled into PHP or dynamically loaded at runtime.

Warning: SPL uses class constants since PHP 5.1 Prior releases use global constants in the form RIT_LEAVES_ONLY.

Datastructures:

Table of Contents:

SplDoublyLinkedList

SplStack

SplQueue

SplHeap

SplMaxHeap

SplMinHeap

SplPriorityQueue

SplFixedArray

SplObjectStorage

SPL provides a set of standard datastructures. They are grouped here by their underlying implementation
which usually defines their general field of application.

Doubly Linked Lists:

A Double Linked List (DLL) is a list of nodes linked in both directions to each other. Iterator's operations,
access to both ends, addition or removal of nodes have a cost of O(1) when the underlying structure is a DLL.
It hence provides a decent implementation for stacks and queues.

SplDoublyLinkedList
	SplStack
	SplQueue

Heaps:

Heaps are tree-like structures that follow the heap-property: each node is greater or equal to its children,
when compared using the implemented compare method which is global to the heap.

SplHeap
	SplMaxHeap
	SplMinHeap

SplPriorityQueue

Arrays:

Arrays are structures that store the data in a continous way, accessible via indexes. Do not confuse
them with PHP arrays. PHP arrays are in fact implemented as ordered hashtables.

Map:

A map is a datastructure holding key-value pairs. PHP arrays can be seen as maps from integers/strings to
values. SPL provides a map from objects to data. This map can also be used as an object set.

SplObjectStorage

The SplDoublyLinkedList class:

Intro:

the SplDoublyLinkedList class provides the main functionalities of a doubly linked list.

Class synopsis:

SplDoublyLinkedList implements Iterator, ArrayAccess, Countable {
	//Methods
	public __construct()
	public void add ( mixed $index , mixed $newval )
	public mixed bottom ()

	public int count ()
	public mixed current ()
	public int getIteratorMode()

	public bool isEmpty()
	public mixed key()
	public void next()

	public bool offsetExists ( mixed $index )
	public mixed offsetGet ( mixed $index )
	public void offsetSet ( mixed $index, mixed $newval )

	public void offsetUnset ( mixed $index )
	public mixed pop ()
	public void prev ()
	public void push ( mixed $value )

	public void rewind()
	public string serialize()
	public void setIteratorMode ( int $mode )
	public mixed shift()
	public mixed top()

	public void unserialize ( string $serialized )
	public void unshift ( mixed $value )
	public bool valid()
}

Table of Contents:

SplDoublyLinkedList::add - Add/insert a new value at the specified index

SplDoublyLinkedList::bottom - Peeks at the node from the beginning of the double linked list.

SplDoublyLinkedList::__construct - Constructs a new doubly linked list

SplDoublyLinkedList::count - Counts the number of elements in the doubly linked list.

SplDoublyLinkedList::current - Return current array entry

SplDoublyLinkedList::getIteratorMode - Returns the mode of iteration

SplDoublyLinkedList::isEmpty - Checks whether the doubly linked list is empty.

SplDoublyLinkedList::key - Return current node index

SplDoublyLinkedList::next - Move to next entry

SplDoublyLinkedList::offsetExists - Returns whether the requested $index exists

SplDoublyLinkedList::offsetGet - Returns the value at the specified $index

SplDoublyLinkedList::offsetSet - Sets the value at the specified $index to $newval

SplDoublyLinkedList:::offsetUnset - Unsets the value at the specified $index

SplDoublyLinkedList::pop - Pops a node from teh end of the doubly linked list

SplDoublyLinkedList::prev - Moves to previous entry

SplDoublyLinkedList::push - Pushes an element at the end of the doubly linked list

SplDoublyLinkedList::rewind - Rewind iterator back to the start

SplDoublyLinkedList::serialize - Serializes the storage

SplDoublyLinkedList::setIteratorMode - Set the mode of iteration

SplDoublyLinkedList::shift - Shifts a node from the beginning of the doubly linked list

SplDoublyLinkedList::top - Peeks at the node from the end of the doubly linked list

SplDoublyLinkedList::unserialize - Unserializes the storage

SplDoublyLinkedList::unshift - Prepends the doubly linked list with an element

SplDoublyLinkedList::valid - Check whether the doubly linked list contains more nodes

PHP doubly linked list is an amazing data structure, doubly means you can traverse
forward as well as backward, it can act as a deque (double ended queue) if you want to,
here is how it works:

//Instansiating an object of doubly link list

$dlist = new SplDoublyLinkedList();

//A push inserts data at the end of the list
$dlist->push('hiramariam');
$dlist->push('maaz');
$dlist->push('zafar');

//The list contains hiramariam, maaz and zafar

//while an unshift inserts an object at the top of the list
$dlist->unshift(1);
$dlist->unshift(2);
$dlist->unshift(3);

//The list now contains
3
2
1
hiramariam
maaz
zafar

//You can delete an item from the bottom of the list by using pop
$dlist->pop();

//The list now contains
3
2
1
hiramariam
maaz

You can delete an item from the top of the list by using shift()
$dlist->shift();

//The list now contains
2
1
hiramariam
maaz

//If you want to replace an item at a particular index, you can usea method named add, note that if you
want to replace an item that does not exist, an exception will be thrown

$dlist->add(3, 2.24);

//To go through the list we use a simple for loop, the rewind() method shown below point to the initials
//of the list depending on the iterator, a valid() method checks whether a list is still valid or not,
//meaning it ensures the loop does not go on and on after we reach teh last data in the list, and the
//next() method simply points to the next data in the list

for($dlist->rewind();$dlist->valid();$dlist->next()){
	echo $dlist->current()."<br/>";
}
echo "<br/>";

//TO traverse backward
$dlist->setIteratorMode(SplDoublyLinkedList::IT_MODE_LIFO);
for($dlist->rewind();$dlist->valid();$dlist->next()){
	echo $dlist->current()."<br/>";
}

FIFO and LIFO in SplDoublyLinkedList:

$list = new SplDoublyLinkedList();
$list->push('a');
$list->push('b');
$list->push('c');
$list->push('d');

echo "FIFO (First In First Out) :\n";
$list->setIteratorMode(SplDoublyLinkedList::IT_MODE_FIFO);
for ($list->rewind(); $list->valid(); $list->next()) {
	echo $list->current()."\n";
}

Result:

// FIFO (First in first out)
// a
// b
// c
// d

echo "LIFO (Last In First Out) :\n";
$list->setIteratorMode(SplDoublyLinkedList::IT_MODE_LIFO);
for ($list->rewind(); $list->valid(); $list->next()) {
	echo $list->current()."\n";
}

Result:

// LIFO (Last In First Out):
// d
// c
// b
// a

$a = new SplDoublyLinkedList;
$arr=[1,2,3,4,5,6,7,8,9];
for($i=0;$i<count($arr);$i++){
	$a->add($i,$arr[$i]);
}

$a->push(11); //push method
$a->add(10,12); //add method must with index
$a->shift(); //remove array first value
$a->unshift(1); //add first value

$a->rewind(); //initial from first

echo "SplDoublyLinkedList array last/top value " . $a->top() . "\n";
echo "SplDoublyLinkedList array count value " . $a->count() . "\n";
echo "SplDoublyLinkedList array first/top value " . $a->bottom() . "\n\n";

while($a->valid()){ //check with valid method
	echo 'key ', $a->key(), ' value ' , $a->current() , "\n"; //key and current method use here
	$a->next(); //next method use here
}

$a->pop(); //remove array last value
print_r($a);
$s=$a->serialize();
echo $s;

//Output
SplDoublyLinkedList array last/top value 12
SplDoublyLinkedList array count value 11
SplDoublyLinkedList array first/top value 1

key 0 value 1
key 1 value 2
key 2 value 3
key 3 value 4
etc. until 9

key 9 value 11
key 10 value 12

SplDoublyLinkedList Object
(
	[flags:SplDoublyLinkedList:private] => 0]
	[dllist:SplDoublyLinkedList:private] => Array
		(
			[0] => 1
			[1] => 2
			[2] => 3
			[3] => 4
			[4] => 5
			[5] => 6
			[6] => 7
			[7] => 8
			[8] => 9
			[9] => 11
		)
)
i:0;:i:1;:i:2;:i:3;:i:4;: etc.

<?php
$splDoubleLinkedList = new SplDoublyLinkedList();
$splDoubleLinkedList->push('a');
$splDoubleLinkedList->push('3');
$splDoubleLinkedList->push('v');

$splDoubleLinkedList->push('1');
$splDoubleLinkedList->push('p');

//First of all, we need rewind list
$splDoubleLinkedList->rewind();

//Use while, check if the list has a valid node
while ($splDoubleLinkedList->valid()){
	//Print current node's value
	echo $splDoubleLinkedList->current()."\n";
	//Turn the cursor to next node
	$splDoubleLinkedList->next();
}
?>

SplDoublyLinkedList::add:

SplDoublyLinkedList::add - Add/insert a new value at the specified index

Desc:

public void SplDoublyLinkedList::add ( mixed $index , mixed $newval )

Insert the value newval at the specified index, shuffling the previous value at that index
(and all subsequent values) up through the list.

Params:

index: The index where the new value is to be inserted.

newval: The new value for the index.

Returns:

nOthing

Errors/Exceptions:

Throws OutOfRangeException when index is out of bounds or when index cannot be parsed
as an integer.

Maybe the basic usage is like this, i think:

$a = new \SplDoublyLinkedList;

if ($a instanceof \SplDoublyLinkedList) {
	$a->add(0, 'Paulus');
	$a->add(1, 'Gandung');
	$a->add(2, 'Prakosa');

	//Then, iterate over that because \SplDoublyLinkedList
	// is implementing \Iterator interface.
	foreach ($a as $value) {
		echo sprintf("%s\n", $value);
	}
}

$a = new SplDoublyLinkedList;
$arr=[1,2,3,4,5,6,7,8,9];

for($i=0;$i<count($arr);$i++){
	$a->add($i,$arr[$i]);
}

print_r($a);

//Output:

SplDoublyLinkedList Object
(
	[flags:SplDoublyLinkedList:private] => 0
	[dllist:SplDoublyLinkedList:private] => Array
		(
			[0] => 1
			[1] => 2
			etc.
		)
)

SplDoublyLinkedList::bottom:

SplDoublyLinkedList::bottom - Peeks at the node from the beginning of the doubly linked list

Desc:

public mixed SplDoublyLinkedList::bottom()

Params:

THis function has no params.

Return values:

The value of the first node

Errors/Exceptions:

Throws RuntimeException when the data-structure is empty.

<?php

$obj = new SplDoublyLinkedList();

//Check wther linked list is empty
if ($obj->isEmpty())
{
	echo "Adding nodes to Linked List<br>";
	$obj->push(2);
	$obj->push(3);

	echo "Adding the node at beginning of doubly linked list <br>";
	$obj->unshift(10);
}

echo "<br>Our Linked List:";
print_r($obj);

echo "<br>Pick the node from beginning of doubly linked list";
echo $obj->bottom();

?>

SplDoublyLinkedList::__construct

SplDoublyLinkedList::__construct - Constructs a new doubly linked list

Desc:

public SplDoublyLinkedList::__construct()

This constructs a new empty doubly linked list.

Params:

This function has no params.

Return values:

No value is returned.

Examples:

Example #1 SplDoublyLinkedList::__construct() example

<?php
$dll = new SplDoublyLinkedList();

$dll->push(2);
$dll->push(3);
$dll->unshift(5);

var_dump($dll);
?>

The above example will output:

object (SplDoublyLinkedList) #1 (2) {
	["flags":"SplDoublyLinkedList":private]=>
	int(0)
	["dllist":"SplDoublyLinkedList":private]=>
	array(3) {
		[0]=>
		int(5)
		[1]=>
		int(2)
		[2]=>
		int(3)
	}
}

SplDoublyLinkedList::count:

SplDoublyLinkedList::count - Counts the number of elements in the doubly linked list.

Desc:

public int SplDoublyLinkedList::count()

Params: none

Returns: Returns the number of elements in the doubly linked list.

SplDoublyLinkedList::current:

SplDoublyLinkedList::current - Return current array entry

desc:

public mixed SplDoublyLinkedList::curent()

Get the current doubly linked list node.

Params:

This function has no params

Return values:

The current node value

<?php

//Examples of DoublyLinkedList

$obj = new SplDoublyLinkedList();
//Check wether linked list is empty.
if ($obj->isEmpty())
{
	echo "Adding nodes to Linked List<br>";
	$obj->push(2);
	$obj->push(3);
	echo "Adding the node at beginning of doubly linked list <br>";
	$obj->unshift(10);
}

echo "<br>Our Linked List:";
print_r($obj);

$curr = $obj->current(); //THis will return null as we have not set initial node

echo "<br> Rewinding the position so that current node points to first node ";
$obj->rewind();

echo "<br>Current node of the linked list:";
echo $obj->current(); //this will print first node of the linked list

echo "<br>MOving to Next node:";
$obj->next();

echo "<br>Printing the next node:";
echo $obj->current();

?>

SplDoublyLinkedList::getIteratorMode:

SplDoublyLinkedList::getIteratorMode - Returns the mode of iteration

Desc:

public int SplDoublyLinkedList::getIteratorMode()

Params:

This function has no params

Returns:

Returns the different modes and flags that affect the iteration.

I think it should be noted that the IT_MODE_* constants are defined inside the class as:

IT_MODE_LIFO => int(2)
IT_MODE_FIFO => int(0)
IT_MODE_DELETE => int(1)
IT_MODE_KEEP => int(0)

With the FIFO and KEEP flags both defined as zero, you can run into an ambiguity when trying to
discern what modes have been activiated when trying to use bitwise deduction as one might be
lead to believe considering the bitwise way you set the iterator mode (at least in V5.3.5, have not
tested any others).

Consider this example:

<?php

$l = new SPLDoublyLinkedList();
$l->setIteratorMode(SplDoublyLinkedList::IT_MODE_FIFO | SplDoublyLinkedList::IT_MODE_DELETE);

$mode = $l->getIteratorMode(); //int(1)

var_dump(($mode & SplDoublyLinkedList::IT_MODE_FIFO) == SplDoublyLinkedList::IT_MODE_FIFO); //outputs true
var_dump(($mode & SplDoublyLinkedList::IT_MODE_LIFO) == SplDoublyLinkedList::IT_MODE_LIFO); //outputs false
var_dump(($mode & SplDoublyLinkedList::IT_MODE_DELETE) == SplDoublyLinkedList::IT_MODE_DELETE); //outputs true
var_dump(($mode & SplDoublyLinkedList::IT_MODE_KEEP) == SplDoublyLinkedList::IT_MODE_KEEP); //outputs true 

?>

Regardless of whatever the getIteratorMode tells you, the object DOES correctly honor the configuration that
was set as far as i can tell.

The way you SHOULD do it (at least until they add any more options):

Basically, you should just check the non-zero flags (LIFO(2) and DELETE(1)). Since it is an either/or situation
within the pairs, this should be able to help you figure out the seperate mode pieces an instace has been
set to.

example:

<?php
$l = new SplDoublyLinkedList();
$l->setIteratorMode(SplDoublyLinkedList::IT_MODE_FIFO | SplDoublyLinkedList::IT_MODE_DELETE);

$mode = $l->getIteratorMode();

$isLIFO = ($mode & SplDoublyLinkedList::IT_MODE_LIFO) == SplDoublyLinkedList::IT_MODE_LIFO;

$isDELETE = ($mode & SplDoublyLinkedList::IT_MODE_DELETE) == SplDoublyLinkedList::IT_MODE_DELETE;
?>

SplDoublyLinkedList::isEmpty:

SplDoublyLinkedList::isEmpty - Checks whether the doubly linked list is empty.

Desc:

public bool SplDoublyLinkedList::isEmpty()

Params:

None

Return values:

Returns whether the doubly linked list is empty.

//isEmpty is a method of SplDoublyLinkedList

$obj = new SplDoublyLinkedList();

//Check wether linked list is empty
if ($obj->isEmpty())
{
	$obj->push(2);
	$obj->unshift(10);
}
print_r($obj);

//OUtput like this
SplDoublyLinkedList Object
(
	[flags:SplDoublyLinkedList:private] => 0
	[dllist:SplDoublyLinkedList:private] => Array
		(
			[0] => 10
			[1] => 2
		)
)

SplDoublyLinkedList::key:

SplDoublyLinkedList::key - Return current node index

Desc:

public mixed SplDoublyLinkedList::key()

This function returns the current node index

Params:

THis function has no params

Return:

The current node index

SplDoublyLinkedList::next:

SplDoublyLinkedList::next - Move to next entry

Desc:

public void SplDoublyLinkedList::next()

Move the iterator to the next node

Params:

This function has no params

Retrn values:

No value

$dll = new SplDoublyLinkedList();

$dll->push(2);
$dll->push(3);
$dll->unshift(5);
$dll->rewind();

while($dll->valid()){
	echo $dll->current() . '<br />';
	$dll->next(); //Switch to next list item
}

SplDoublyLinkedList::offsetExists:

SplDoublyLinkedList::offsetExists - Returns whether the requested $index exists

Desc:

public bool SplDoublyLinkedList::offsetExists ( mixed $index )

Params:

index: The index being checked

Return values:

TRUE if the requested index exists, othewise FALSE.

SplDoublyLinkedList::offsetGet:

SplDoublyLinkedList::offsetGet - Returns the value at the specified $index

Desc:

public mixed SplDoublyLinkedList::offsetGet ( mixed $index )

params:

index - The index with the value

Return values:

The value at the specified index.

Error/Exceptions:

Throws OutOfRangeException when index is out of bounds or when index cannot be
parsed as an integer.

SplDoublyLinkedList::offsetSet:

SplDoublyLinkedList::offsetSet - Sets the value at the specified $index to $newval

Desc:

public void SplDoublyLinkedList::offsetSet ( mixed $index , mixed $newval )

Sets the value at the specified index to newval.

Params:

index: The index being set

newval: The new value for the index

Errors/Exceptions:

Throws OutOfRangeException when index is out of bounds or when index cannot be parsed as an integer.

SplDoublyLinkedList::offsetUnset:

SplDoublyLinkedList::offsetUnset - Unsets the value at the specified $index

Desc:

public void SplDoublyLinkedList::offsetUnset ( mixed $index )

Unsets the value at the specified index

Params:

index - The index being unset.

Returns:

None

Errors/Exceptions:

Throws OutOfRangeException when index is out of bounds or when index cannot be parsed as an integer.

When unsetting an offset, the element will be removed from the double linked list. So the following code:

<?php

$obj = new SplDoublyLinkedList();

$obj->push(4);
$obj->push(5);
$obj->push(6);

$obj->offsetUnset(1);
echo "Our Linked List:";
print_r($obj);

?>

Will output:

Our Linked List:SplDoublyLinkedList Object
(
	[flags:SplDoublyLinkedList:private] => 0
	[dllist:SplDoublyLinkedList:private] => Array
		(
			[0] => 4
			[1] => 5
			[2] => 6
		)
)
Our New Linked List:SplDoublyLinkedList Object
(
	[flags:SplDoublyLinkedList:private] => 0
	[dllist:SplDoublyLinkedList:private] => Array
		(
			[0] => 4
			[1] => 6
		)
)

Notice that the element with the index 2 has now the index 1. The original element with index 1
did not only have its value unset, but awas also removed.

SplDoublyLinkedList::pop:

SplDoublyLinkedList::pop - Pops a node from the end of the doubly linked list

Desc:

public mixed SplDoublyLinkedList::pop()

Params: None

Returns: The value of the popped node.

Errors/Exceptions:

Throws RuntimeException when the data-structure is empty.

SplDoublyLinkedList::prev:

SplDoublyLinkedList::prev - Move to previous entry

Desc:

public void SplDoublyLinkedList::prev()

Move the iterator to the previous node.

Params: None

Returns: None

SplDoublyLinkedList::push:

SplDoublyLinkedList::push - Pushes an element at the end of the doubly linked list

Desc:

public void SplyDoublyLinkedList::push( mixed $value )

Pushes value at the end of the doubly linked list.

Params:

value: The value to push.

Returns: None

Be careful SplStack mode is LIFO (Last In First Out) not FIFO (First in First Out):

<?php
//Array (FIFO)
$stack = array();
array_push($stack, "orange");
array_push($stack, "banana");
array_push($stack, "apple");
array_push($stack, "raspberry");

var_dump($stack);
?>

// result

array (size=4)
	0 => string 'orange' (length=6)
	1 => string 'banana' (length=6)
	2 => string 'apple' (length=5)
	3 => string 'raspberry' (length=9)

<?php
// SplStack (LIFO)
$stack = new SplStack();
$stack->push('orange');
$stack->push('banana');
$stack->push('apple');
$stack->push('raspberry');

$stack->rewind();
while($stack->valid()){
	var_dump($stack->current());
	$stack->next();
}
?>

//Result
string 'raspberry' (length=9)
string 'apple' (length=5)
string 'banana' (length=6)
string 'orange' (length=6)

$spl = new SplDoublyLinkedList;

$spl->push(1);
$spl->push(2);
$spl->push(3);
$spl->push(8);
$spl->push(5);

print_r($spl);

SplDoublyLinkedList::rewind:

SplDoublyLinkedList::rewind - Rewind iterator back to the start

Desc:

public void SplDoublyLinkedList::rewind()

THis rewinds the iterator to the beginning.

Parms:

This function has no params.

Returns:

Nothing.

$dll = new SplDoublyLinkedList();
$dll->push(2);
$dll->push(3);
$dll->unshift(5);
$dll->rewind(); // starting from beginning without this it will not work

while($dll->valid()){
	echo $dll->current()."\n";
	$dll->next();
}

//Output
5
2
3

SplDoublyLinkedList::serialize:

SplDoublyLinkedList::serialize - Serializes the storage

Desc:

public string SplDoublyLinkedList::serialize()

Serializes the storage.

Warning: This function is currently not documented, only argument list is available.

Params:

None

Return Values:

The serialized string.

$a = new SplDoublyLinkedList;
$arr=[1,2,3,4,5,6,7,8,9];

for($i=0;$i<count($arr);$i++){
	$a->add($i,$arr[$i]);
}

$serialize=serialize($a);

echo $serialize;

echo PHP_EOL, PHP_EOL;

$unserialize=unserialize($serialize);

print_r($unserialize);

SplDoublyLinkedList::setIteratorMode:

SplDoublyLinkedList::setIteratorMode - Sets the mode of iteration

Desc:

public void SplDoublyLinkedList::setIteratorMode ( int $mode )

Params:

Mode: There are two orthogonal sets of modes that can be set:
	
	The direction of the iteration (either one or the other):
		SplDoublyLinkedList::IT_MODE_LIFO (stack style)

		SplDoublyLinkedList::IT_MODE_FIFO (Queue style)

	The behavior of the iterator (either one or the other):
		SplDoublyLinkedList::IT_MODE_DELETE (Elements are deleted by the iterator)

		SplDoublyLinkedList::IT_MODE_KEEP (Elements are traversed by the iterator)

The default mode is: SplDoublyLinkedList::IT_MODE_FIFO | SplDoublyLinkedList::IT_MODE_KEEP

Returns:

Nothing

Despite the seeming unrelated-ness between the FIFO/LIFO and the KEEP/DELETE option pairs,
in respect to the behavior of setIteratorMode they are in some way linked. Meaning, a second
call to setIteratorMode will erase any previous settings even if they are from the other
pair.

This, coupled with the default settings for the object (SplDoublyLinkedList::IT_MODE_FIFO | SplDoublyLinkedList::IT_MODE_KEEP),
means you have to be careful or you can run into trouble.

Consider the following example:

<?php
$l = new SPLDoublyLinkedList();
$l->setIteratorMode(SplDoublyLinkedList::IT_MODE_DELETE);
$l->setIteratorMode(SplDoublyLinkedList::IT_MODE_LIFO);

$mode = $l->getIteratorMode();
var_dump("MODE: $mode");
var_dump("MODE CHECKS");

var_dump(($mode & SplDoublyLinkedList::IT_MODE_LIFO) == SplDoublyLinkedList::IT_MODE_LIFO);
var_dump(($mode & SplDoublyLinkedList::IT_MODE_FIFO) == SplDoublyLinkedList::IT_MODE_FIFO);

var_dump(($mode & SplDoublyLinkedList::IT_MODE_DELETE) == SplDoublyLinkedList::IT_MODE_DELETE);
var_dump(($mode & SplDoublyLinkedList::IT_MODE_KEEP) == SplDoublyLinkedList::IT_MODE_KEEP);

$l->push('A');
$l->push('B');
$l->push('C');
$l->push('D');
$l->rewind();

var_dump("Traversing");
var_dump($l->isEmpty());

var_dump($l->count());
var_dump($l->current());
$l->next();

var_dump($l->count());
var_dump($l->current());
$l->next();

var_dump($l->count());
var_dump($l->current());
$l->next();

var_dump($l->count());
var_dump($l->current());
$l->next();

var_dump($l->count());
var_dump($l->isEmpty());

?>

Which outputs the following:
#################################
string(7) "MODE: 2"

string(11) "MODE CHECKS"
bool(true) #LIFO (ok)
bool(true) #FIFO (umm.. wait a minute)
bool(false) #DELETE (houstun, wtf)
bool(true) #KEEP (ok, where is the camera hidden)

string(10) "Traversing"
bool(false)

int(4)
string(1) "D"

int(4)
string(1) "C"

int(4)
string(1) "B"

int(4)
string(1) "A"

int(4)
bool(false)
################################

Basically, you should just check the non-zero flags (LIFO(2) and DELETE(1)). Since it is an either/or
situation within the pairs, this should be able to help you figure out the separate mode pieces an
instace has been set to.

Example:

<?php
$l = new SPLDoublyLinkedList();
$l->setIteratorMode(SplDoublyLinkedList::IT_MODE_FIFO | SplDoublyLinkedList::IT_MODE_DELETE);

$mode = $l->getIteratorMode();

$isLIFO = ($mode & SplDoublyLinkedList::IT_MODE_LIFO) == SplDoublyLinkedList::IT_MODE_LIFO;

$isDELETE = ($mode & SplDoublyLinkedList::IT_MODE_DELETE) == SplDoublyLinkedList::IT_MODE_DELETE;
?>

Usage of different iterator mode:

<?php
$doubly=new SplDoublyLinkedList();
$doubly->push(array('name'=>'Naruto'));
$doubly->push(array('name'=>'Sakura'));
$doubly->push(array('name'=>'Neji'));
$doubly->push(array('name'=>'Sasuke'));

var_dump($doubly);
echo '<br/> FIFO Traversing<br/>';
$doubly->setIteratorMode(SplDoublyLinkedList::IT_MODE_FIFO | SplDoublyLinkedList::IT_MODE_KEEP);
$doubly->rewind();
foreach($doubly as $key=>$value)
{
	echo '<br/>Traversed:'.$key.' '.$value['name'];
}
echo '<br/>LIFO Traversing - Keep mode <br/>';

$doubly->setIteratorMode(SplDoublyLinkedList::IT_MODE_LIFO | SplDoublyLinkedList::IT_MODE_KEEP);
$doubly->rewind();
foreach($doubly as $key=>$value)
{
	echo '<br/>Traversed:'.$key.' '.$value['name'];
}

echo '<br/>LIFO Traversing - Delete mode <br/>';
$doubly->setIteratorMode(SplDoublyLinkedList::IT_MODE_LIFO | SplDoublyLinkedList::IT_MODE_DELETE);
$doubly->rewind();

foreach($doubly as $key=>$value)
{
	if($key == 2) break;
	echo '<br/>Traversed:'.$key.' '.$value['name'];
}
var_dump($doubly);
?>

Output:

FIFO Traversing

Traversed:0 Naruto
Traversed:1 Sakura
Traversed:2 Neji
Traversed:3 Sasuke
LIFO Traversing - Keep mode

Traversed:3 Sasuke
Traversed:2 Neji
Traversed:1 Sakura
Traversed:0 Naruto
LIFO Trasvering - Delete mode

Traversed:3 Sasuke
object(SplDoublyLinkedList)#1 (2) {
	["flags":"SplDoublyLinkedList":private]=>
	int(3)
	["dllist":"SplDoublyLinkedList":private]=>
	array(3) {
		[0]=>
		array(1) {
			["name"]=>
			string(6) "Naruto"
		}
		[1]=>
		array(1) {
			["name"]=>
			string(6) "Sakura"
		}
		[2]=>
		array(1) {
			["name"]=>
			string(4) "Neji"
		}
	}
}

SplDoublyLinkedList::shift:

SplDoublyLinkedList::shift - Shifts a node from the beginning of the doubly linked
list.

Desc:

public mixed SplDoublyLinkedList::shift()

Params:

None

Returns:

The value of the shifted node.

Errors/Exceptions:

Throws RuntimeException when the data-structure is empty.

One may expect SplDoublyLinkedList::shift to properly maintain internal pointers, but this is
not the case, this will yield no results, even if you rewind first:

<?php
while ($splDoublyLinkedList->valid()) {
	yield $splDoublyLinkedList->shift();
}
?>

It could be by design, but the following raises some more questions:

<?php

$test = new \SplDoublyLinkedList;
$dataSet = [
	['id' => 1],
	['id' => 2],
	['id' => 3],
	['id' => 4],
];

foreach ($dataSet as $row) {
	$test->push($row);
}

echo "count: " . $test->count() . PHP_EOL;
echo "valid: " . ($test->valid() ? 'true' : 'false') . PHP_EOL;
echo "current: " . var_export($test->current(), true) . PHP_EOL;
echo "key: " . $test->key() . PHP_EOL;

echo "1st shift: " . var_export($test->shift(), true) . PHP_EOL;
echo "count: " . $test->count() . PHP_EOL;
echo "valid: " . ($test->valid() ? 'true' : 'false') . PHP_EOL;

echo "current: " . var_export($test->current(), true) . PHP_EOL;
echo "key: " . $test->key() . PHP_EOL;
echo "2nd shift: " . var_export($test->shift(), true) . PHP_EOL;

echo "count: " . $test->count() . PHP_EOL;
echo "valid: " . ($test->valid() ? 'true' : 'false') . PHP_EOL;
echo "current: " . var_export($test->current(), true) . PHP_EOL;

echo "key: " . $test->key() . PHP_EOL;
echo "rewinding... " . PHP_EOL;

$test->rewind();
echo "current: " . var_export($test->current(), true) . PHP_EOL;
echo "2nd shift: " . var_export($test->shift(), true) . PHP_EOL;
echo "count: " . $test->count() . PHP_EOL;
echo "valid: " . ($test->valid() ? 'true' : 'false') . PHP_EOL;

echo "current: " . var_export($test->current(), true) . PHP_EOL;
echo "key: " . $test->key() . PHP_EOL;
?>

Will result in:

<?php

/*
count: 4 
valid: false 			<== First thing to note, you have no valid pointer unless you rewind first
current: NULL 			<== hence no current
key: 0 					<== but we have a valid key
offsetGet(key): array ( <== indeed
	'id' => 1,
)
1st shift: array ( <== and shift does return first row
	'id' => 1,
)
count: 3 		<== and count is maintained as expected
valid: false 	<== but internal pointer was left outside valid range
current: NULL 	<== hence no current again
key: 0 			<== but we still have a valid key
offsetGet(key): array ( <== indeed
	'id' => 2,
)
2nd shift: array( <== and shift does return first row
	'id' => 2,
)
count: 2 		<== and count is maintained as expected
valid: false 		//still no valid etc.
current: NULL
key: 0
offsetGet(key): array(
	'id' => 3,
)
rewinding... 			<== now rewind
current: array( 	<== yay a current
	'id' => 3,
)
3rd shift: array ( 	<== shift ok
	'id' => 3,
)
count: 	1 		<== count ok
valid: true 	<== ouch valid
current: NULL 		<== with no current
key: 0 				<== still our key is valid
offsetGet(key): array (
	'id' => 4,
)
*/
?>

Conclusion: I may be missing something about why SplDoublyLinkedList::shift is not maintaining proper
internal index in the first place, but i find it even more confusing to be able to end up with a valid
valid() and a valid key() and no current() while there is obviously one.

Tested on php 5.6.30 & 7.1.2 with the exact same result.

SplDoublyLinkedList::top:

SplDoublyLinkedList::top - Peeks at the node from the end of the doubly linked list

Desc:

public mixed SplDoublyLinkedList::top()

Params:

This function has no params.

Returns:

The value of the last node.

Errors/Exceptions:

Throws RuntimeException when the data-structure is empty.

SplDoublyLinkedList::unserialize:

SplDoublyLinkedList::unserialize - Unserializes the storage

Desc:

public void SplDoublyLinkedList::unserialize ( string $serialized )

Unserializes the storage, from SplDoublyLinkedList::serialize().

Warning: this function is currently not documented, only its argument list is available.

Params:

serialized: The serialized string.

Return values:

No value is returned

$a = new SplDoublyLinkedList;
$arr=[1,2,3,4,5,6,7,8,9];

for($i=0;$i<count($arr);$i++){
	$a->add($i,$arr[$i]);
}

$serialize=serialize($a);

echo $serialize;

echo PHP_EOL,PHP_EOL;

$unserialize=unserialize($serialize);

print_r($unserialize);

SplDoublyLinkedList::unshift:

SplDoublyLinkedList::unshift - Prepends the doubly linked list with an element

Desc:

public void SplDoublyLinkedList::unshift ( mixed $value )

Prepends value at the beginning of the doubly linked list.

Params:

value: The value to unshift.

Returns:

No value.

SplDoublyLinkedList::valid:

SplDoublyLinkedList::valid - Check whether the doubly linked list contains more nodes

desc:

public bool SplDoublyLinkedList::valid()

Checks if the current positon index is valid.

Params:

This function has no params.

Returns:

Returns TRUE if the doubly linked list index point is valid, FALSE otherwise.

The docs say "Check whether the doubly linked list contains more nodes." I do not believe
this is correct.

Example:

$dlist = new SplDoublyLinkedList;
$data=[1,2,3,4,5];

foreach($data as $d)
	$dlist->push($d);
$dlist->rewind();

for($i=0;$i<6;$i++)
{
	$currentValue = $dlist->current();
	$currentValid = $dlist->valid();

	$status = $currentValid ? 'True' : 'False';
	echo 'Current value is: ' . $currentValue . ' Valid status is: ' . $status . "\n";

	$dlist->next();
}

Output:

Current value is: 1 Valid status is: True
Current value is: 2 Valid status is: True
Current value is: 3 Valid status is: True
Current Value is: 4 Valid status is: True
Current value is: 5 Valid status is: True
Current value is: Valid status is: False

Note that when we are on the last node of the list, value = 5, the valid() function returns
true. Yet we are on the last node of the list, and there are no more nodes.

If the valid() function were checking to see if there were any more nodes on the list, it
would return false, not true.

If you look at the docs for Iterator::valid, they say "Checks if current position isvalid".
I believe that is in fact what valid() does, it checks to see if the current position is
valid, NOT if there are any more nodes.

$a = new SplDoublyLinkedList;
$arr=[1,2,3,4,5,6,7,8,9];

for($i=0;$i<count($arr);$i++){
	$a->add($i,$arr[$i]);
}

$a->rewind();

while($a->valid()){
	echo 'key ', $a->key(), ' value ', $a->current(),"\n";
	$a->next();
}

The SplStack class:

intro:

the SplStack provides the main functionalities of a stack implemented using a doubly linked list.

the SplStack is simply a SplDoublyLinkedList with an iteration mode IT_MODE_LIFO and IT_MODE_KEEP.

<?php
//SplStack Mode is LIFO (Last in first out)

$q = new SplStack();

$q[] = 1;
$q[] = 2;
$q[] = 3;
$q->push(4);
$q->add(4,5);

$q->rewind();
while($q->valid()){
	echo $q->current(),"\n";
	$q->next();
}
?>

The SplQueue class:

intro:

The SplQueue class provides the main functionalities of a queue implemented using a doubly
linked list.

Class synopsis:

SplQueue extends SplDoublyLinkedList implements Iterator, ArrayAccess, Countable {
	
	//methods
	__construct()
	mixed dequeue()
	void enqueue ( mixed $value )
	void setIteratorMode ( int $mode )

	//inherited methods
	public void SplDoublyLinkedList::add ( mixed $index, mixed $newval )
	public mixed SplDoublyLinkedList::bottom()
	public int SplDoublyLinkedList::count()

	public mixed SplDoublyLinkedList::current()
	public int SplDoublyLinkedList::getIteratorMode()
	public bool SplDoublyLinkedList::isEmpty()

	public mixed SplDoublyLinkedList::key()
	public void SplDoublyLinkedList::next()

	public bool SplDoublyLinkedList::offsetExists ( mixed $index )
	public mixed SplDoublyLinkedList::offsetGet ( mixed $index )
	public void SplDoublyLinkedList::offsetSet ( mixed $index, mixed $newval )

	public void SplDoublyLinkedList::offsetUnset ( mixed $index )
	public mixed SplDoublyLinkedList::pop()
	public void SplDoublyLinkedList::prev()

	public void SplDoublyLinkedList::push ( mixed $value )
	public void SplDoublyLinkedList::rewind()
	public string SplDoublyLinkedList::serialize()

	public void SplDoublyLinkedList::setIteratorMode ( int $mode )
	public mixed SplDoublyLinkedList::shift()
	public mixed SplDoublyLinkedList::top()

	public void SplDoublyLinkedList::unserialize ( string $serialized )
	public void SplDoublyLinkedList::unshift ( mixed $value )
	public bool SplDoublyLinkedList::valid()
}

SplQueue inherits from SplDoublyLinkedList. So, objects of SplQueue support methods push()
and pop(). But please, be advised that if you use push() and pop() methods on a SplQueue
object, it behaves like a stack rather than a queue.

For example:

$q = new SplQueue();
$q->push(1);
$q->push(2);
$q->push(3);
$q->pop();
print_r($q);

Above code returns:

SplQueue Object
(
	[flags:SplDoublyLinkedList:private] => 4
	[dllist:SplDoublyLinkedList:private] => Array
		(
			[0] => 1
			[1] => 2
		)
)

Note that 3 got popped, not 1.

Thus, make sure you only use enqueue() and dequeue() methods on a SplQueue object and NOT push() and pop().

You can use shift/unshift and push/pop to dequeue/undequeue and queue/unqueue respectively. Really handy
for those applications that use sockets where you might not know you cannot send data until you attempt to.

For example, this is a function for an application that will un-dequeue the remainder of the data if
socket_write indicated it did not write the entire contents of the provided data.

<?php
function processSendQueue($socket, $sendQueue) {
	while (!$sendQueue->isEmpty()) {
		//shift() is the same as dequeue()
		$senditem = $sendQueue->shift();

		//returns the number of bytes written
		$rtn = socket_write($socket, $senditem);
		if ($rtn === false) {
			$sendQueue->unshift($senditem);
			throw new exception("send error: " . socket_last_error($socket));
			return;
		}
		if ($rtn < strlen($senditem)) {
			$sendQueue->unshift(substr($senditem, $rtn));
			break;
		}
	}
}
?>

Take care that SplQueue::valid() is not returning true if the queue has nodes. Use isEmpty() instead:

$queue = new SplQueue();
$queue->enqueue('A');
$queue->enqueue('B');
$queue->enqueue('C');
var_dump($queue->valid()); //false
var_dump(!$queue->isEmpty()); //true

<?php

$queue = new SplQueue();
$queue->enqueue('A');
$queue->enqueue('B');
$queue->enqueue('C');

$queue->rewind();
while($queue->valid()){
	echo $queue->current(),"\n";
	$queue->next();
}

print_r($queue);
$queue->dequeue(); //remove first one
print_r($queue);

?>

Output

A
B
C
SplQueue Object
(
	[flags:SplDoublyLinkedList:private] => 4
	[dllist:SplDoublyLinkedList:private] => Array
		(
			[0] => A
			[1] => B
			[2] => C
		)
)
SplQueue Object
(
	[flags:SplDoublyLinkedList:private] => 4
	[dllist:SplDoublyLinkedList:private] => Array
		(
			[0] => B
			[1] => C
		)
)


Method that belongs to SplStack:

SplStack::setIteratorMode:

SplStack::setIteratorMode - Sets the mode of iteration

Desc:

void SplStack::setIteratorMode ( int $mode )

Params:

mode:
	There is only one iteration param you can modify:

	The behavior of the iterator (either one or the other):
		SplDoublyLinkedList::IT_MODE_DELETE(Elements are deleted by the iterator)

		SplDoublyLinkedList::IT_MODE_KEEP(Elements are traversed by the iterator)

The default mode is 0x2: SplDoublyLinkedList::IT_MODE_LIFO | SplDoublyLinkedList::IT_MODE_KEEP

Warning: The direction of iteration can no longer be changed for SplStacks. Trying to do so will
result in a RuntimeException being thrown.

SplStack::__construct:

SplStack::__construct - Constructs a new stack implemented using a doubly linked list

Desc:

SplStack::__construct()

this constructs a new empty stack.

Note: This method automatically sets the iterator mode to SplDoublyLinkedList::IT_MODE_LIFO.

Params: None

Returns: Nothing

Example:

Example #1 SplStack::__construct() example

<?php
$q = new SplStack();

$q[] = 1;
$q[] = 2;
$q[] = 3;

foreach ($q as $elem) {
	echo $elem."\n";
}
?>

The above will output:

3
2
1

Before i go on to SplQueue, i will cover the interfaces.


The Iterator Interface:

Introduction:

Interface for external iterators or objects that can be iterated themselves internally.

Interface synopsis:

Iterator extends Traversable {
	//methods
	abstract public mixed current()
	abstract public scalar key()
	abstract public void next()
	abstract public void rewind()
	abstract public boolean valid()
}

Predefined iterators:

PHP already provides a number of iterators for many day to day tasks. See SPL iterators for
a list.

Examples:

Example #1 basic usage

This example demonstrates in which order methods are called when using foreach with an iterator.

<?php
class myIterator implements Iterator {
	private $position = 0;
	private $array = array(
		"firstelement",
		"secondelement",
		"lastelement"
	);

	public function __construct() {
		$this->position = 0;
	}

	public function rewind() {
		var_dump(__METHOD__);
		$this->position = 0;
	}

	public function current() {
		var_dump(__METHOD__);
		return $this->array[$this->position];
	}

	public function key() {
		var_dump(__METHOD__);
		return $this->position;
	}

	public function next() {
		var_dump(__METHOD__);
		++$this->position;
	}

	public function valid() {
		var_dump(__METHOD__);
		return isset($this->array[$this->position]);
	}
}

$it = new myIterator;

foreach($it as $key => $value) {
	var_dump($key, $value);
	echo "\n";
}
?>

The above will output something similar to:

string(18) "myIterator::rewind"
string(17) "myIterator::valid"
string(19) "myIterator::current"
string(15) "myIterator::key"
int(0)
string(12) "firstelement"

string(16) "myIterator::next"
string(17) "myIterator::valid"
string(19) "myIterator::current"
string(15) "myIterator::key"
int(1)
string(13) "secondelement"

string(16) "myIterator::next"
string(17) "myIterator::valid"
string(19) "myIterator::current"
string(15) "myIterator::key"
int(2)
string(11) "lastelement"

string(16) "myIterator::next"
string(17) "myIterator::valid"

Order of operations when using a foreach loop:

1. Before the first iteration of the loop, Iterator::rewind() is called.
2. Before each iteration of the loop, Iterator::valid() is called.
3a. If Iterator::valid() returns false, the loop is terminated
3b. If Iterator::valid() returns true, Iterator::current() and
Iterator::key() are called.
4. The loop body is evaluated.
5. After each iteration of the loop, Iterator::next() is called and we repeat from step 2 above.

This is roughly equivalent to:

<?php
$it->rewind();

while ($it->valid())
{
	$key = $it->key();
	$value = $it->current();

	//...

	$it->next();
}
?>

The loop is not terminated until Iterator::valid() returns false or the body of the loop executes a break
statement.

The only two methods that are always executed are Iterator::rewind() and Iterator::valid() (unless rewind
throws an exception)

The Iterator::next() method need not return anything. It is defined as returning void. On the other hand,
sometimes it is convenient for this method to return something, in which case you can do so if you want.

If your iterator is doing something expensive, like making a database query and iterating over the result
set, the best place to make the query is probably in the Iterator::rewind() implementation.

In this case, the construction of the iterator itself can be cheap, and after construction you can continue
to set the properties of the query all the way up to the beginning of the foreach loop since the Iterator::rewind()
method is not called until then.

Things to keep in mind when making a database result set iterator:

* Make sure you close your cursor or otherwise clean up any previous query at the top of the
rewind method. Otherwise your code will break if the same iterator is used in two consecutive
foreach loops when the first loop terminates with a break statement before all the results are
iterated over.

* Make sure your rewind() implementation tries to grab the first result so that the subsequent call to
valid() will know whether or not the result set is empty. I do this by explicitly calling next() from
the end of my rewind() implementation.

* For things like result set iterators, there really is not always a "key" that you can return, unless
you know you have a scalar primary key column in the query. Unfortunately, there will be cases where either
the iterator does not know the primary key column because it is not providing the query, the nature of
the query is such that a primary key is not applicable, the iterator is iterating over a table that does not
have one, or the iterator is iterating over a table that has a compound primary key.

In these cases, key() can return either: 

The row index (based on a simple counter that you provide), or can simply return null.

Iterators can also be used to:

* iterate over the lines of a file or rows of a CSV file
* iterate over the characters of a string
* iterate over the tokens in a input stream
* iterate over the matches returned by an xpath expression
* iterate over the matches returned by a regexp
* iterate over the files in a folder
* etc...

<?php
//Here is an implementation of the Iterator interface for arrays
which works with maps (key/value pairs) as well as traditional arrays (contiguous monotonically increasing indexes).

Though it pretty much does what an array would normally do within foreach() loops, this class may be useful for
using arrays with code that generically/only supports the Iterator interface. Another use of this class is to simply
provide object methods with tightly controlling iteration of arrays.

class tIterator_array implements Iterator {
	private $myArray;

	public function __construct($givenArray) {
		$this->myArray = $givenArray;
	}

	function rewind() {
		return reset($this->myArray);
	}

	function current() {
		return current($this->myArray);
	}

	function key() {
		return key($this->myArray);
	}

	function next() {
		return next($this->myArray);
	}

	function valid() {
		return key($this->myArray) !== null;
	}
}
?>

If you have a custom iterator that may throw an exception in it's current() method, there is no
way to catch the exception without breaking a foreach loop.

The following for loop allows you to skip elements for which $iterator->current() throws an
exception, rather than breaking the loop.

<?php
for ($iterator->rewind(); $iterator->valid(); $iterator->next()) {
	try {
		$value = $iterator->current();
	} catch (Exception $exception) {
		continue;
	}

	#...
}
?>

It is important to note that following won't work if you have null values.

<?php
	function valid() {
		var_dump(__METHOD__);
		return isset($this->array[$this->position]);
	}
?>

Other examples have shown the following which won't work if you have false values:

<?php
	function valid() {
		return $this->current() !== false;
	}
?>

Instead use:

<?php
	function valid() {
		return array_key_exists($this->array, $this->position);
	}
?>

Or the following, if you do not store the position:

<?php
	public function valid() {
		return !is_null(key($this->array));
	}
?>

So, playing around with iterators in PHP (coming from languages where i am spoiled with generators to do
things like this), I wrote a quick piece of code to give the Fibonacci sequence (to infinity, though only
the first terms up to F_{10} are output).

<?php

class Fibonacci implements Iterator {
	private $previous = 1;
	private $current = 0;
	private $key = 0;

	public function current() {
		return $this->current;
	}

	public function key() {
		return $this->key;
	}

	public function next(){
		$newprevious = $this->current;
		$this->current += $this->previous;
		$this->previous = $newprevious;
		$this->key++;
	}

	public function rewind() {
		$this->previous = 1;
		$this->current = 0;
		$this->key = 0;
	}

	public function valid() {
		return true;
	}
}


$seq = new Fibonacci;
$i = 0;
foreach ($seq as $f) {
	echo "$f\n";
	if ($i++ === 10) break;
}
?>

Be careful with Iterator when using nested loops or deleting items instead the collection while
looping over it. It can be tricky to detect.

This unexpected behavior is pertinent if you think about it long enough.

<?php

foreach($it as $key => $value)
	echo $value;
#output: value1, value2, value3

foreach($it as $key => $value)
	foreach($it as $key => $value)
		echo $value;
#output: value1, value2, value3

foreach($it as $key => $value)
	foreach(clone $it as $key => $value)
		echo $value;
#output: value1, value2, value3, value1, value2, value3, value1, value2, value3

foreach($it as $key => $value)
{
	echo $value;
	array_shift($it->values);
}
#output: value1, value3

?>

Here is a fibonacci example using the formula, rather than addition:

<?php
class FibonacciSequence implements Iterator
{
	protected $limit = 0;

	protected $key = 0;

	public function __construct($limit = 0)
	{
		$this->limit = (integer)$limit;
	}

	public function current()
	{
		return round(
			(pow(((1 + sqrt(5)) /2), $this->key) - pow((-1 / (1 + sqrt(5)) / 2), $this->key)) / sqrt(5),
			null
		);
	}

	public function key()
	{
		return $this->key;
	}

	public function rewind()
	{
		$this->key = 0;
	}

	public function valid()
	{
		return $this->key < $this->limit;
	}
}

foreach(new FibonacciSequence() as $number)
{
	printf(
		'%d<br />',
		$number
	);
}

//outputs fibo sequence
?>

<?php
//An implementation of the ITerator
with simpleXML to remove a node and generate a new XML file.

project.xml file:
<?xml version="1.0" encoding="UTF-8"?>
...
<data>
	<item>
		<value>one</value>
	</item>
	<item>
		<value>two</value>
	</item>
	...
</data>

class parseXML implements Iterator {
	private $position;
	private $xml;
	public $item;

	public function __construct() {
		$this->position = 0;
		$this->xml = simplexml_load_file('project.xml');
	}

	public function unsetItem() {
		foreach ($this as $key => $value) {
			if ($value->value == $this->item) {
				unset($this->xml->data->item[$key]);
			}
		}

		$this->mkXML();
	}

	public function mkXML() {
		file_put_contents('project.xml', $this->xml->asXML());
	}

	function rewind() {
		$this->position = 0;
	}

	function current() {
		return $this->xml->data->item[$this->position];
	}

	function key() {
		return $this->position;
	}

	function next() {
		++$this->position;
	}

	function valid() {
		return isset($this->xml->data->item[$this->position]);
	}
}

$itemRemove = new parseXML();

$itemRemove->item = "one";

$itemRemove->unsetItem();

?>

For Iterators implement database queries, what i have found is that if you want to chain multiple
iterators together using a "MultipleIterator" then you *do not* want ::rewind() to actually execute
your query, especially if it is expensive.

Instead, what i have done is implement that portion in "valid".

e.g.

<?php
class Database_Result_Iterator {
	...
	private $_db_resource = null;
	private $_loaded = false;
	private $_valid = false;

	function rewind() {
		if ($this->_db_resource) {
			mysql_free($this->_db_resource);
			$this->_db_resource = null;
		}
		$this->_loaded = false;
		$this->_valid = false;
	}

	function valid() {
		if ($this->_loaded) {
			$this->load();
		}
		return $this->_valid;
	}

	private function load() {
		$this->_db_resource = mysql_query(...);
		$this->_loaded = true;
		$this->next(); // Sets _valid
	}
}
?>

that way, if you chain multiple queries in a "MultipleIterator" together, the "rewind" call
(which rewinds all iterators at once) does not execute every query at once.

In addition, I found that the MultipleIterator may now work best for other reasons, but still,
the above is a good idea to postpone queries until the last possible moment they are needed.

An interesting fact that i did not read in teh doc:

the key() method is called only if your foreach loop needs it.

For instance, the following loop calls the key() method:

<?php
foreach($it as $key => $value) {
	var_dump($key, $value);
	echo "\n";
}
?>

But the following does not:

<?php
foreach($it as $value) {
	var_dump($value);
	echo "\n";
}
?>

The IteratorAggregate interface:

INtro:

Interface to create an external Iterator.

Interface synopsis:

IteratorAggregate extends Traversable {
	//methods
	abstract public Traversable getIterator()
}

Example #1 Basic usage
<?php
class myData implements IteratorAggregate {
	public $property1 = "Public property one";
	public $property2 = "Public property two";
	public $property3 = "Public property three";

	public function __construct() {
		$this->property4 = "last property";
	}

	public function getIterator() {
		return new ArrayIterator($this);
	}
}

$obj = new myData;

foreach($obj as $key => $value) {
	var_dump($key, $value);
	echo "\n";
}
?>

The above example will output something similar to:

string(9) "property1"
string(19) "Public property one"

string(9) "property2"
string(19) "Public property two"

string(9) "property3"
string(21) "Public property three"

string(9) "property4"
string(13) "last property"

It might seem obvious, but you can return a compiled generator from your IteratorAggregate::getIterator() implementation.

<?ph
class Collection implements IteratorAggregate
{
	private $items = [];

	public function __construct($items = [])
	{
		$this->items = $items;
	}

	public function getIterator()
	{
		return (function() {
			while(list($key, $val) = each($this->items)) {
				yield $key => $val;
			}
		})();
	}
}

$data = ['A', 'B', 'C','D'];
$collection = new Collection($data);

foreach ($collection as $key => $val) {
	echo sprintf("[%s] => %s\n", $key, $val);
}
?>

Note that, at least as of 5.3, you still are not allowed to return a normal Array from getIterator().

In some places, the docs wrap the array into an ArrayObject and return that. DO not od it. ArrayObject
drops any empty-string keys on the floor when you iterate over it (again, at least as of 5.3)

use ArrayIterator instead. I would not be surprised if it did not have it's own set of wonderful bugs,
but at the very least it works correctly when used with this method.

<?php
//IteratorAggregate
// Create Indexed and associative arrays.

class myData implements IteratorAggregate {
	private $array = [];
	const TYPE_INDEXED = 1;
	const TYPE_ASSOCIATIVE = 2;

	public function __construct( array $data, $type = self::TYPE_INDEXED ) {
		reset($data);
		while(list($k, $v) = each($data)) {
			$type == self::TYPE_INDEXED ?
			$this->array[] = $v :
			$this->array[$k] = $v;
		}
	}

	public function getIterator() {
		return new ArrayIterator($this->array);
	}
}

$obj = new myData(['one'=>'php', 'javascript','three'=>'c#','java',], //Type 1 or 2);

foreach($obj as $key => $value) {
	var_dump($key, $value);
	echo PHP_EOL;
}

// if TYPE == 1
#int(0)
#string(3) "php"
#int(1)
#string(10) "javascript"
#int(2)
#string(2) "c#"
#int(3)
#string(4) "java"

// if TYPE == 2
#string(3) "one"
#string(3) "php"
#int(0)
#string(10) "javascript"
#string(5) "three"
#string(2) "c#"
#int(1)
#string(4) "java"
?>

Throwable:

Intro:

Throwable is the base interface for any object that can be thrown via a throw statement in PHP 7,
including Error and Exception.

Note: PHP classes cannot implement the Throwable interface directly, and must instead extends Exception.

Interface synopsis:

Throwable {
	
	//methods
	abstract public string getMessage()
	abstract public int getCode()
	abstract public string getFile()
	abstract public int getLine()
	abstract public array getTrace()

	abstract public string getTraceAsString()
	abstract public Throwable getPrevious()
	abstract public string __toString()
}

I wrote a simple script that prints out the Throwable and Exception tree for every PHP version.

<?php

if (!function_exists('interface_exists')) {
	die('PHP version too old');
}
$throwables = listThrowableClasses();
$throwablesPerParent = splitInParents($throwables);

printTree($throwablesPerParent);
if (count($throwablePerParent) !== 0) {
	die('Error!');
}

function listThrowableClasses()
{
	$result = [];
	if (interface_exists('Throwable')) {
		foreach (get_declared_classes() as $cn) {
			$implements = class_implements($cn);
			if (isset($implements['Throwable'])) {
				$result[] = $cn;
			}
		}
	} else {
		foreach (get_declared_classes() as $cn) {
			if ($cn == 'Exception' || is_subclass_of($cn, 'Exception')) {
				$result[] = $cn;
			}
		}
	}

	return $result;
}

function splitInParents($classes)
{
	$result = [];
	foreach ($classes as $cn) {
		$parent = (string) get_parent_class($cn);
		if (isset($result[$parent])) {
			$result[$parent][] = $cn;
		} else {
			$result[$parent] = [$cn];
		}
	}

	return $result;
}

function printTree(&$tree)
{
	if (!isset($tree[''])) {
		die('No root classes!');
	}
	printLeaves($tree, '', 0);
}

function printLeaves(&$tree, $parent, $level)
{
	if (isset($tree[$parent])) {
		$leaves = $tree[$parent];
		unset($tree[$parent]);
		natcasesort($leaves);
		$leaves = array_values($leaves);
		$count = count($leaves);
		for ($i = 0; $i < $count; ++$i) {
			$leaf = $leaves[$i];
			echo str_repeat(' ', $level), $leaf, "\n";
			printLeaves($tree, $leaf, $level + 1);
		}
	}
}

Throwable::getMessage:

Throwable::getMessage - Gets the message

Desc:

abstract public string Throwable::getMessage()

Returns the message associated with the thrown object.

Params:

Has no params.

Returns:

Returns the message associated with the thrown object.

Throwable::getCode:

Throwable::getCode - gets the exception code

Desc:

abstract public int Throwable::getCode()

Returns the error code associated with the thrown object.

Params:

This function has no params.

Returns:

Returns the exception code as integer in Exception but possibly as other type in Exception
descendants (for example as string in PDOException).

Throwable::getFile:

Throwable::getFile - gets the file in which the exception was created

Desc:

abstract public string Throwable::getFile()

Get the name of the file in which the exception was created.

Params:

This function has no params.

Returns:

Returns the filename in which the exception was created.

Throwable::getLine:

Throwable::getLine - Gets the line on which the object was instansiated

Desc:

abstract public int Throwable::getLine()

Returns the line number where the thrown object was instansiated.

Params:

This function has none.

Returns:

Returns the line number where the thrown object was instansiated.

Throwable::getTrace:

Throwable::getTrace - gets the stack trace

Desc:

abstract public array Throwable::getTrace()

Returns the stack trace as an array

params:

This function has no params

Returns:

 Returns the stack strace as an array in the same format as debug_backtrace()

Throwable::getTraceAsString:

Throwable::getTraceAsString - gets the stack trace as a string.

Desc:

abstract public string Throwable::getTraceAsString()

Params: None

Returns: Returns the stack trace as a string

Throwable::getPrevious:

Throwable::getPrevious - Returns the previous Throwable

Desc:

abstract public Throwable Throwable::getPrevious()

Returns any previous Throwable (for example, one provided as the third param to Exception::__construct())

Params: Has none

Returns: Returns the previous Throwable if available, or NULL otherwise.

Throwable::__toString:

Throwable::__toString - gets a string representation of the thrown object

Desc:

abstract public string Throwable::__toString()

Params: Has none

Returns: Returns the string representation of the thrown object.

The ArrayAccess interface:

introduction:

Interface to provide accessing objects as arrays.

interface synopsis:

ArrayAcces {
	//Methods
	abstract public boolean offsetExists ( mixed $offset )
	abstract public mixed offsetGet ( mixed $offset )
	abstract public void offsetSet ( mixed $offset, mixed $value )
	abstract public void offsetUnset ( mixed $offset )

}

Example #1 Basic usage

<?php
class obj implements ArrayAccess {
	private $container = array();

	private function __construct() {
		$this->container = array(
			"one" => 1,
			"two" => 2,
			"three" => 3,
		);
	}

	public function offsetSet($offset, $value) {
		if (is_null($offset)) {
			$this->container[] = $value;
		} else {
			$this->container[$offset] = $value;
		}
	}

	public function offsetExists($offset) {
		return isset($this->container[$offset]);
	}

	public function offsetUnset($offset) {
		unset($this->container[$offset]);
	}

	public function offsetGet($offset) {
		return isset($this->container[$offset]) ? $this->container[$offset] : null;
	}
}

$obj = new obj;

var_dump(isset($obj["two"]));
var_dump($obj["two"]);
unset($obj["two"]);

var_dump(isset($obj["two"]));
$obj["two"] = "A value";
var_dump($obj["two"]);

$obj[] = 'Append 1';
$obj[] = 'Append 2';
$obj[] = 'Append 3';
print_r($obj);
?>

The above example will output something similar to:

bool (true)
int(2)
bool(false)
string(7) "A value"
obj Object
(
	[container:obj:private] => Array
		(
			[one] => 1
			[three] => 3
			[two] => A value
			[0] => Append 1
			[1] => Append 2
			[2] => Append 3
		)
)

It be me today, so putting it here in the hope it will help others:
If you call array_key_exists() on an object of a class that implements ArrayAccess, ArrayAccess::offsetExists()
will NOT be called.

The indexes used in an ArrayAccess object are not limited to strings and integers as they are for arrays:
you can use any type for the index as long as you write your implementations to handle them. This fact
is exploited by the SplObjectStorage class.

<?php

//ArrayAndObjectAccess
//yes you can access class as array and the same time as object

class ArrayAndObjectAccess implements ArrayAccess {
	//Data
	//@var array
	//@access private
	private $data = [];

	//Get a data by key
	//@param string The key data to retrieve
	//@access public
	public function &__get ($key) {
		return $this->data[$key];
	}

	//Assigns a value to the specified data
	//
	//@param string The data key to assign the value to
	//@param mixed The value to set
	//@access public
	public function __set($key,$value) {
		$this->data[$key] = $value;
	}

	//Whether or not an data exists by key
	//
	// @param string An data key to check for
	// @access public
	// @return boolean
	// @abstracting ArrayAccess
	public function __isset($key) {
		return isset($this->data[$key]);
	}

	//Unsets an data by key
	//
	//@param string The key to unset
	//@access public
	public function __unset($key)
	{
		unset($this->data[$key]);
	}

	//ASsigns a value to the specified offset
	//
	//@param string The offset to assign the value to
	//@param mixed The value to set
	//@access public
	//@abstracting ArrayAccess
	public function offsetSet($offset,$value) {
		if(is_null($offset)) {
			$this->data[] = $value;
		} else {
			$this->data[$offset] = $value;
		}
	}

	//Whether or not an offset exists
	//
	//@param string An offset to check for
	//@access public
	//@return boolean
	//@abstracting ArrayAccess
	public function offsetExists($offset) {
		return isset($this->data[$offset]);
	}

	//Unsets an offset
	//
	//@param string The offset to unset
	//@access public
	//@abstracting ArrayAccess
	public function offsetUnset($offset) {
		if ($this->offsetExists($offset)) {
			unset($this->data[$offset]);
		}
	}

	//returns the value at the specified offset
	//
	//@param string The offset to retrieve
	//@access public
	//@return mixed
	//@abstracting ArrayAccess
	public function offsetGet($offset) {
		return $this->offsetExists($offset) ? $this->data[$offset] : null;
	}
}

?>

Usage

<?php
$foo = new ArrayAndObjectAccess();
//Set data as array and object
$foo->fname = 'Yousef';
$foo->lname = 'Ismaeli';

//call as object
echo 'fname as object '.$foo->fname."\n";

//Call as array
echo 'lname as array '.$foo['lname']."\n";

//Reset as array
$foo['fname'] = 'Cliprz';
echo $foo['fname']."\n";

//outputs
fname as object Yousef
lname as array Ismaeli
Cliprz
?>

Conclusion: Type hints \ArrayAccess and array are not compatible.

<?php
	class MyArrayAccess implements \ArrayAccess
	{
		public function offsetExists($offset)
		{
		}

		public function offsetSet($offset, $value)
		{}

		public function offsetGet($offset)
		{}

		public function offsetUnset($offset)
		{}
	}

	function test(array $arr)
	{}

	function test2(\ArrayAccess $arr)
	{}

	$arrObj = new MyArrayAccess();
	test([]); //result: Works
	test($arrObj); //result: does not work
	test2([]); //result: does NOT work
	test2($arrObj); //result: works!
?>

reset() method may not work as you expect with ArrayAccess objects.

Using reset($myArrayAccessObject) returns the first property from $myArrayAccessObject,
not the first item in the items array.

If you want to use the reset() method to return the first array item, then you can use
the following simple workaround:

<?php
class MyArrayAccessObject implements Iterator, ArrayAccess, Countable {
	protected $first = null; //WARNING, keep this always first
	protected $items = null;
	private function supportReset() {
		$this->first = reset($this->items); //Support reset()
	}

	//...
	public function offsetSet($offset, $value) {
		if ($offset == null) {
			$this->items[] = $value;
		}
		else {
			$this->items[$offset] = $value;
		}
		$this->supportReset();
	}
}
?>

Finally, call $this->supportReset() in the end of all methods that change the internal
$items array, such as in offsetSet(), offsetUnset(), etc.

This way, you can use the reset() method as normally:

<?php
$firstArrayitem = reset($myArrayAccessObject);
?>

Objects implementing ArrayAccess may return objects by references in PHP 5.3.0

You can implement your ArrayAccess object like this:

class Reflectable implements ArrayAcces {
	public function set($name, $value) {
		$this->{$name} = $value;
	}

	public function &get($name) {
		return $this->{$name};
	}

	public function offsetGet($offset) {
		return $this->get($offset);
	}

	public function offsetSet($offset, $value) {
		$this->set($offset, $value);
	}

	...
}

This base class allows you to get/set your object properties using the [] operator just like
in Javascript:

class Boo extends Reflectable {
	public $name;
}

$obj = new Boo();
$obj['name'] = "boo";
echo $obj['name']; //prints boo

A class that implements ArrayAccess will not work with array_push

For example:

<?php
class TestArrayAccess implements ArrayAccess {
	private $container = array();

	//ArrayAccess methods
}

$obj = new TestArrayAccess();

array_push($obj, 'Hello World'); //Nothing will be added
?>

One way of being able to use array_push would be adding a toArray() method (note the return
value is a reference)

<?php
class TestArrayAccess implements ArrayAccess {
	private $container = array();

	//ArrayAccess methods

	public function &toArray() {
		return $this->container;
	}
}

$obj = new TestArrayAccess();

array_push($obj->toArray(), 'Hello World'); //Will now be added to array
?>

Sadly you cannot assign by reference with the ArrayAccess (at least in PHP 5.3.23)
It is too bad that there is no syntax for optionally passing variables by reference to functions
(a feature in retro PHP).

That option would have let ArrayAccess fully mimic the the functionality of normal array assignment:

<?php
$var = 'hello';
$arr = array();
$arr[0] = $var;
$arr[1] = &$var;
$var = 'world';
var_dump($arr[0], $arr[1]);

//string(5) "hello"
//string(5) "world"
?>

Declaring "function offsetSet($offset, &$value)" will cause a fatal error.
So to assign by ref you can use an ugly function call, for example:

<?php
class obj implements ArrayAccess {
	
	// ... ArrayAccess example code ...

	public function &offsetSetRef($offset, &$value) {
		if (is_null($offset)) {
			$this->container[] = &$value;
		} else {
			$this->container[$offset] = &$value;
		}
		return $value; //should return in case called within an assignment chain
	}
}

$var = 'hello';
$obj = new obj();
$obj[0] = $var;

//$obj[1] = &$var; //Fatal error: Cannot assign by reference to overlaoded object
$obj->offsetSetRef(1, $var); //the work around
$var = 'world';
var_dump($obj[0], $obj[1]);

//string(5) "hello"
//string(5) "world"

?>

You can use the array function on a object of a class that implements ArrayAccess using the __invoke magic
method in this way:

<?php
class ArrayVar implements ArrayAccess
{
	private $data = [];

	public function __invoke()
	{
		return $this->data;
	}
}
?>

You can now use it in this way:

<?php
	$arrayar = new ArrayVar();
	$arrayar['one'] = 'primer';
	$arrayar['two'] = 'segon';
	$arrayar['three'] = 'tercer';

	$keys = array_keys($arrayvar());
	var_dump($keys);
	// array (size=3)
	// 		0 => string 'one'
	// 		1 => string 'two'
	// 		2 => string 'three'

	$diff = array_diff($arrayar(), ['two' => 'segon']);
	var_dump($diff);

	// array (size=2)
	// 		'one' => string 'primer'
	// 		'three' => string 'tercer'
?>


Objects implementing ArrayAccess do not support the increment/decrement operators ++ and --,
unlike array() and ArrayObject()

<?php

class MyArray implements ArrayAccess
{
	// offsetSet, offsetGet etc implemented
}

$x = new MyArray();
$x[0] = 0;
$x[0]++; //error 'Indirect modification of overloaded element has no effect'
$x[0] 	+= 1, //This works ok

?>

When working in namespaces, ALWAYS remeber to prefix the ArrayAccess name with \. It will
think you mean an undefined interface.

This is a bit wierd, because this interface *could* be global - You cannot define a class
or interface with this name, even in a namespace.

Building on comments about incompability between plain arrays and ArrayAccess objects, many
(most?) of the array_* methods won't work with ArrayAccess objects.

Simple calls such as sizeof() work, but array_values() will throw an error, for instance.

Although $offset can be anything, a string that looks like an integer is cast to integer
before the call to any of the methods.

$x[1] 	offset is integer 1
$x['1'] offset is integer 1
$x['1.'] offset is string '1.'

Note that the ArrayAccess class is not limited to scalar keys:

<?php
class A implements ArrayAccess
{
	function offsetSet($a, $b)
	{
		var_dump(func_get_args());
	}

	function offsetGet($a)
	{
		var_dump(func_get_args());
	}

	function offsetExists($a)
	{
		var_dump(func_get_args());
	}

	function offsetUnset($a)
	{
		var_dump(func_get_args());
	}
}

class B{}
class C{}

$A = new A;
$A[[1,2,3]] = [4,5,6];
$A[new B] = new C;

/*
array(2) {
	[0]=>
	array(3) {
		[0]=>
		int(1)
		[1]=>
		int(2)
		[2]=>
		int(3)
	}
	[1]=>
	array(3) {
		[0]=>
		int(4)
		[1]=>
		int(5)
		[2]=>
		int(6)
	}
}
array(2) {
	[0]=>
	object(web\B)#3 (0) {
	}
	[1]=>
	object(web\C)#4 (0) {
	}
}
?>

ArrayAccess::offsetExists:

ArrayAccess::offsetExists - Whether an offset exists

Desc:

abstract public boolean ArrayAccess::offsetExists ( mixed $offset )

Whether or not an offset exists.

This method is executed when using isset() or empty() on objects implementing
ArrayAccess.

Note: When using empty() ArrayAccess::offsetGet() will be called and checked if empty
only if ArrayAccess::offsetExists() returns TRUE.

Params:

offset: An offset to check for.

Returns:

Returns TRUE on success or FALSE on failure.

Note: The return value will be casted to boolean if non-boolean was returned.

Examples:

Example #1 ArrayAccess::offsetExists() example

<?php
class obj implements arrayaccess {
	public function offsetSet($offset, $value) {
		var_dump(__METHOD__);
	}

	public function offsetExists($var) {
		var_dump(__METHOD__);
		if ($var == "foobar") {
			return true;
		}
		return false;
	}

	public function offsetUnset($var) {
		var_dump(__METHOD__);
	}

	public function offsetGet($var) {
		var_dump(__METHOD__);
		return "value";
	}
}

$obj = new obj;

echo "Runs obj::offsetExists()\n";
var_dump(isset($obj["foobar"]));

echo "\nRuns obj::offsetExists() and obj::offsetGet()\n";
var_dump(empty($obj["foobar"]));

echo "\nRuns obj::offsetExists(), *not* obj:offsetGet() as there is nothing to get\n";
var_dump(empty($obj["foobaz"]));
?>

The above example will output something similar to:

Runs obj::offsetExists()
string(17) "obj::offsetExists"
bool (true)

Runs obj::offsetExists() and obj::offsetGet()
string(17) "obj::offsetExists"
string(14) "obj::offsetGet"
bool(false)

Runs obj::offsetExists(), *not* obj::offsetGet() as there is nothing to get
string(17) "obj::offsetExists"
bool(true)

Note that even though isset/empty works on classes implementing ArrayAccess, array_key_exists
does not. At least not in PHP 5.3.

ArrayAccess::offsetGet:

ArrayAccess - offset to retrieve

Desc:

abstract public mixed ArrayAccess::offsetGet ( mixed $offset )

Returns the value at the specified offset.

THis method is executed when checking if offset is empty().

Params:

offset: The offset to retrieve.

Notes:

Note: Starting with PHP 5.3.4, the prototype checks were relaxed and it is possible for implementations 
of this method to return by reference. This makes indirect modifications to the overloaded array dimensions
of ArrayAccess objects possible.

A direct modification is one that replaces completely the value of the array dimension, as in $obj[6] = 7.
An indirect modification, on the other hand, only changes part of the dimension, or attempts to assign
the dimension by reference to another variable, as in $obj[6][7] = 7 or $var =& $obj[6]. Increments
with ++ and deceremnts with -- are also implemented in a way that requires indirect modification.

While direct modification triggers a call to ArrayAccess::offsetSet(), indirect modification triggers
a call to ArrayAccess::offsetGet(). in that case, the implementation of ArrayAccess::offsetGet()
must be able to return by reference, otherwise an E_NOTICE message is raised.

Returns:

Can return all value types.

ArrayAccess::offsetSet:

ArrayAccess::offsetSet - assign a value to the specified offset

Desc:

abstract public void ArrayAccess::offsetSet ( mixed $offset, mixed $value )

Assigns a value to the specified offset

Params:

offset: The offset to assign the value to

value: The value to set.

Returns: Nothing

Notes:

Note: The offset parameter will be set to NULL if another value is not available, like in the following
example:

<?php
$arrayaccess[] = "first value";
$arrayaccess[] = "second value";
print_r($arrayaccess);
?>

The above example will output:

Array
(
	[0] => first value
	[1] => second value
)

Note: This function is not called in assignments by reference and otherwise indirect changes to array
dimensions overloaded with ArrayAccess (indirect in teh sense they are made not by changing the 
dimensions directly, but by changing a sub-dimensions or sub-property or assigning the array dimension
by reference to another variable.)

Instead, ArrayAccess::offsetGet() is called. The operation will only be successful if that method returns
by reference, which is only possible since PHP 5.3.4

ArrayAccess::offsetUnset:

ArrayAccess::offsetUnset - Unset an offset

desc:

abstract public void ArrayAccess::offsetUnset ( mixed $offset )

Unsets an offset.

Note: This method will not be called when type-casting to (unset)

Params:

offset: The offset to unset.

Returns: Nothing

The Serializable interface:

Intro:

Interface for customized serializing.

Classes that implement this interface no longer support __sleep() and __wakeup(). The method serialize
is called whenever an instance needs to be serialized. This does not invoke __destruct() or have any other
side effect unless programmed inside the method.

When the data is unserialized the class is known and the appropiate unserialize() method is called as
a constructor instead of calling __construct(). If you need to execute the standard constructor you may
do so in the method.

Note, that when an old instance of a class that implements this interface now, which had been serialized
before the class implemented the interface, is unserialized, __wakeup() is called instead of the serialize
method, which might be useful for migration purposes.

Interface synopsis:

Serializable {
	
	//Methods
	abstract public string serialize ()
	abstract public void unserialize ( string $serialized )
}

Example #1 Basic usage

<?php
class obj implements Serializable {
	private $data;
	public function __construct() {
		$this->data = "My private data";
	}

	public function serialize() {
		return serialize($this->data);
	}

	public function unserialize($data) {
		$this->data = unserialize($data);
	}

	public function getData() {
		return $this->data;
	}
}

$obj = new obj;
$ser = serialize($obj);

var_dump($ser);

$newobj = unserialize($ser);

var_dump($newobj->getData());
?>

The above example will output something similar to:

string(38) "C:3:"obj":23:{s:15:"My private data";}"
string(15) "My private data"

Here is an example of how to un-, serialize more than one property:

class Example implements \Serializable
{
	protected $property1;
	protected $property2;
	protected $property3;

	public function __construct($property1, $property2, $property3)
	{
		$this->property1 = $property1;
		$this->property2 = $property2;
		$this->property3 = $property3;
	}

	public function serialize()
	{
		return serialize([
			$this->property1,
			$this->property2,
			$this->property3,
		]);
	}

	public function unserialize($data)
	{
		list(
			$this->property1,
			$this->property2,
			$this->property3
		) = unserialize($data);
	}
}

Serializable::serialize:

Serializable::serialize - String representation of object

Desc:

abstract public string Serializable::serialize()

SHould return the string representation of the object.

Note: This method acts as the destructor of the object. THe __destruct() method will not be
called after this method..

Params: None

Returns: Returns the string representation of the object or NULL

Errors/Exceptions:

Throws Exception when returning other types than strings and NULL.

The documentation here is somewhat misleading. Where it says "This method acts as the destructor of
the object. The __destruct() method will not be called after this method," i believe the intent is
not that the destructor is not run on the object itself, but that the destructor is called /as
part of the serialization process.

that is, the object will still be destructed as it goes out of scope as normal, but the destructor
is not called as a part of the object's serialization.

Serializable::unserialize:

Serializable::unserialize - Constructs the object

Desc:

abstract public void Serializable::unserialize ( string $serialized )

Called during unserialization of the object.

Note: This method acts as the constructor of the object. The __construct() method will not be
called after this method.

Params:

serialized - The string representation of the object

Returns:

The return value from this method is ignored.

The Closure class:

Introduction:

Class used to represent anonymous functions.

Anonymous functions, implemented in PHP 5.3, yield objects of this type. This fact used to be considered
an implementation detail, but it can now be relied upon. Starting with PHP 5.4, this class has methods
that allow further control of the anonymous function after it has been created.

Besides the methods listed here, this class also has an __invoke method. This is for consistency with
other classes that implement calling magic, as this method is not used for calling the function.

Class synopsis:

Closure {
	//Methods
	private __construct()
	public static Closure bind ( Closure $closure , object $newthis [, mixed $newscope = "static" ])
	public Closure bindTo ( object $newthis [, mixed $newscope = "static" ])
	public mixed call ( object $newthis [, mixed $... ])
	public static Closure fromCallable ( callable $callable )
}

This caused me some confusion a while back when i was still learning what closure were and how to use them.
But what is referred to as a closure in PHP is not the same thing as what they call closures in other languages
(E.G JavaScript)

In JS, a closure can be thought of as a scope, when you define a function, it silently inherits the scope it
is defined in, which is called its closure, and it retains that no matter where it is used. It is possible
for multiple functions to share the same closure, and they can have access to multiple closures as long as
they are within their accessible scope.

In PHP, a closure is a callable class, to which you have bound your params manually.

Scope
A closure encapsulating its scope, meaning that it has no access to the scope in which it is
defiend or executed. It is, however, possible to inherit variables from the parent scope 
(where the closure is defined) into the closure with the use keyword:

function createGreeter($who) {
	return function() user ($who) {
		echo "Hello $who";
	}
}

$greeter = createGreeter("World");
$greeter(); //Hello world

THis inherits the variables by-value, that is, a copy is made available inside the closure
using its original name.

Small little trick. You can use a closures in itself via reference.

Example to delete a directory with all subdirectories and files:

<?php
$deleteDirectory = null;
$deleteDirectory = function($path) use (&$deleteDirectory) {
	$resource = opendir($path);
	while (($item = readdir($resource)) !== false) {
		if ($item !== "." && $item !== "..") {
			if (is_dir($path . "/" . $item)) {
				$deleteDirectory($path . "/" . $item);
			} else {
				unlink($path . "/" . $item);
			}
		}
	}
	closedir($resource);
	rmdir($path);
};
$deleteDirectory("path/to/directory");
?>

Encapsulating a closure as a delegate allows really universal and comfortable event handling in your
projects. (ref. to Observer Pattern)

<?php
	//Encapsulating a closure
	final class Delegate
	{
		private $_Closure;

		//Standard ctor with a callable as argument
		//@param callable $closure

		public function __construct($closure)
		{
			$this->_Closure = \Closure::fromCallable($closure);
		}

		//Allows to call the delegate object directly
		//@param list ... $args variable number of args
		//@return mixed
		public function __invoke(...$args)
		{
			return call_user_func_array($this->_Closure, $args);
		}
	}

	//Defines a type for event arguments
	class EventArgs
	{
		protected $_Sender;

		//Standard ctor.
		//@param mixed $sender [optional]
		public function __construct($sender = NULL)
		{
			$this->_Sender = $sender;
		}

		//@property-read
		//@return object -should contain the event emitting object.
		final public function Sender() { return $this->_Sender; }
	}

	//A basic event type for the delegate
	class Event
	{
		private $_Receivers = array();

		//Add a delegate to the event list.
		//@param Delegate $delegate
		//@return Event
		final public function Add(Delegate $delegate):Event
		{
			$this->_Receivers[] = $delegate;
			return $this;
		}

		//Fires the event
		//@param EventArgs $e
		final public function Trigger(EventArgs $e)
		{
			foreach($this->_Receivers as $delegate)
				$delegate($e);
		}
	}

	//declare anonymous function as delegate
	$myDelegate =
		new Delegate
		(
			function (EventArgs $e)
			{
				echo 'anonymous function<br>';
			}
		);

	//declare event, assign the delegate, trigger event
	$myEvent = new Event();
	$myEvent->Add($myDelegate);

	//Defines a simple type that can handle events
	class demoEventHandler
	{
		//Handles incoming events
		//Note: needs declared as public
		//@param EventArgs $e
		public function onEvent(EventArgs $e)
		{
			echo 'class event handler<br>';
		}
	}

	$controller = new demoEventHandler();
	$myEvent->Add(new Delegate([$controller, 'onEvent']));
	$myEvent->Trigger(new EventArgs($myEvent));
?>

The problem: a function that calls another function which is passed in the arguments of the intial function.
The callable might re-use the arguments  of the initial function. Whatever the callable is we want a simple
function for use in our code (here is where closure comes).

Example: a generic Header class that sends files (cached, not cached, for download, inline etc.). Probably
readfile() is all you need, right?

But what when a captcha library has a function output() that you want to be used in the place of readfile()?

No big deal you might say, pass a callable in the function's arguments, but let us unwind the possibilities
of the callable argument:
1. It is another function in this scope,
2. it is a class method,
3. it is a static method of a class.

PHP uses different helpers to call this argument-function:
1. call_user_func_array(),
2, 3. call_user_func_array() or Reflection.

A generic solution that exploits most of php's advanced features: closures, callables, Reflection.
/**
* @param string $file The path of a file
* @param ... more specific arguments here ...
* @param string[] $call A hashed array that contains the function we want to
* operate on our arguments and follows some rules as follows
* -key 'class': the class name the function belongs to or null,
* -key 'construct': the class's arguments on construction or null,
* -key 'args': an array of arguments explicit for the callable or null,
* -key 'callable': the name of the function (null not allowed)
*/
function generic($file = null, $call = array('callable' => '\readfile')) {
	if (isset($call['class'])) {
		//a closure
		$action = function() use ($call) {
			$method = new \ReflectionMethod($call['class'], $call['callable']);
			if ($method->isStatic()) {
				//YOU decide what to do with the arguments in generic()
				if (isset($call['args'])) {
					$method->invokeArgs(null, $call['args']);
				} else {
					$method->invoke(null);
				}
			} else {
				$obj = new \ReflectionClass($call['class']);
				if (isset($call['construct'])) {
					$obj->newInstanceArgs($call['construct']);
				} else {
					$obj->newInstance();
				}
				// You decide what to do with the arguments in generic()
				if (isset($call['args'])) {
					$method->invokeArgs($obj, $call['args']);
				} else {
					$method->invoke($obj);
				}
			}
		};
	} else {
		//Another closure
		$action = function() use ($call, $file) {
			// You decide what to do with the arguments in generic()
			if (isset($call['args'])) {
				\call_user_func_array($call['callable'], $args);
			} else {
				\call_user_func_array($call['callable'], array($file));
			}
		};
	}
	//Some commands here
	\header("Expires: Sat, 26 Jul 1997 05:00:00 GMT");
	\header("Cache-Control: no-cache, must-revalidate, max-age=0, post-check=0, pre-check=0");
	\header("Content-Description: File Transfer");
	\header("Content-Disposition: inline; filename=\"" . $file . "\"");
	\header("Content-Type: image/jpeg");
	//Adjust the following
	\header('Content-Length: ' . \filesize($file));
	//See how we use a closure
	$action();

}

//Let us call the generic()
generic('client/assets/404.jpg');

Just an example use of closures

Closure::__construct:

Closure::__construct - Constructor that disallows instantiation

Desc:

private Closure::__construct()

This method exists only to disallow instansiation of the Closure class. Objects of this class are
created in the fashion described on the anonymous functions page.

Params:

This function has no params.

Returns:

This method has no return value; it simply emits an error (of type E_RECOVERABLE_ERROR)

Closure::bind:

Closure::bind -- Duplicates a closure with a specific bound object and class scope

Desc:

public static Closure Closure::bind ( Closure $closure, object $newthis [, mixed $newscope = "static" ])

This method is a static version of Closure::bindTo(). See the documentation of that method for more information.

Params:

closure: The anonymous functions to bind.

newthis: The object to which the given anonymous function should be bound, or NULL for the closure to be
unbound.

newscope: The class scope to which associate the closure is to be associated, or 'static' to keep the 
current one. If an object is given, the type of the object will be used instead. This determines the 
visibility of protected and private methods of the bound object.

It is not allowed to pass (an object of) an internal class as this param.

Returns:

Returns a new Closure object or FALSE On failure.

Changelog:

Version 	Desc
7.0.0 		newscope can not be (an object of) an internal class anymore, what was possible prior to this version.

Examples:

Example #1 Closure::bind() example

<?php
class A {
	private static $sfoo = 1;
	private $ifoo = 2;
}
$cl1 = static function() {
	return A::$sfoo;
};
$cl2 = function() {
	return $this->ifoo;
};

$bcl1 = Closure::bind($cl1, null, 'A');
$bcl2 = Closure::bind($cl2, new A(), 'A');
echo $bcl1(), "\n";
echo $bcl2(), "\n";
?>

The above outputs something akin to:

1
2

With this class and method, it is possible to do nice things, like add methods on the fly to an
object.

MetaTrait.php
<?php
trait MetaTrait
{
	private $methods = array();

	public function addMethod($methodName, $methodCallable)
	{
		if(!is_callable($methodCallable)) {
			throw new InvalidArgumentException('Second param must be callable');
		}
		$this->methods[$methodName] = Closure::bind($methodCallable, $this, get_class());
	}

	public function __call($methodName, array $args)
	{
		if(isset($this->methods[$methodName])) {
			return call_user_func_array($this->methods[$methodName], $args);
		}

		throw RunTimeException('There is no method with the given name to call');
	}
}
?>

test.php
<?php
require 'MetaTrait.php';

class HackThursday {
	use MetaTrait;

	private $dayOfWeek = 'Thursday';
}

$test = new HackThursday();
$test->addMethod('when', function() {
	return $this->dayOfWeek;
});

echo $test->when();

?>

If you need to validate whether or not a closure can be bound to a PHP object, you will have to resort to using
reflection.

<?php

/**
* @param \Closure $callable
*
* @return bool
*/
function isBindable(\Closure $callable)
{
	$bindable = false;

	$reflectionFunction = new \ReflectionFunction($callable);
	if(
		$reflectionFunction->getClosureScopeClass() === null
		|| $reflectionFunction->getClosureThis() !== null
	) {
		$bindable = true;
	}

	return $bindable;
}
?>

Closure::bindTo:

Closure::bindTo - Duplicates the closure with a new bound object and class scope

Desc:

public Closure Closure::bindTo ( object $newthis [, mixed $newscope = "static" ])

Create and return a new anonymous function with the same body and bound variables as this
one, but possibly with a different bound object and a new class scope.

The "bound object" determines the value $this will have in the function body and the
"class scope" represents a class which determines which private and protected members
the anonymous function will be able to access.

Namely, the members that will be visible are the same as if the anonymous function
were a method of the class given as value of the newscope param.

Static closures cannot have any bound object (the value of the parameter newthis should be
NULL), but this function can nevertheless be used to change their class scope.

This function will ensure that for a non-static closure, having a bound instance will
imply being scoped and vice-versa. To this end, non-static closures that are given a 
scope but a NULL instance are made static and non-static non-scoped closures that are
given a non-null instance are scoped to an unspecified class.

Note: If you only want to duplicate the anonymous functions, you can use cloning instead.

Params:

newthis: The object to which the given anonymous function should be bound, or NULL for the
closure to be unbound.

newscope: The class scope to which associate the closure is to be associated, or 'static'
to keep the current one. If an object is given, the type of the object will be used instead.
This determines the visibility of protected and private methods of the bound object.
It is not allowed to pass (an object of) an internal class as this param.

Returns:

Returns the newly created Closure object or FALSE on failure.

Changelog:

Version 	Desc
7.0.0 		newscope can not be (an object of) an internal class anymore, what was possible prior to this version.

Examples:

Example #1 Closure::bindTo() example

<?php

class A {
	function __construct($val) {
		$this->val = $val;
	}
	function getClosure() {
		//Returns closure bound to this object and scope
		return function() { return $this->val; };
	}
}

$ob1 = new A(1);
$ob2 = new A(2);

$cl = $ob1->getClosure();
echo $cl(), "\n";

$cl = $cl->bindTo($ob2);
echo $cl, "\n";
?>

The above outputs something similar to:

1
2

We can use the concept of bindTo to write a very small Template Engine:

################
index.php
################

<?php

class Article{
	private $title = "This is an article";
}

class Post{
	private $title = "This is a post";
}

class Template{
	
	function render($context, $tpl){

		$closure = function($tpl){
			ob_start();
			include $tpl;
			return ob_end_flush();
		};

		$closure = $closure->bindTo($context, $context);
		$closure($tpl);
	}
}

$art = new Article();
$post = new Post();
$template = new Template();

$template->render($art, 'tpl.php');
$template->render($post, 'tpl.php');
?>

#############
tpl.php
#############
<h1><?php echo $this->title;?></h1>

You can do Javascript-like things with objects using closure binding:

<?php
trait DynamicDefinition {
	
	public function __call($name, $args) {
		if (is_callable($this->$name)) {
			return call_user_func($this->$name, $args);
		}
		else {
			throw new \RuntimeException("Method {$name} does not exist");
		}
	}

	public function __set($name, $value) {
		$this->$name = is_callable($value)?
			$value->bindTo($this, $this):
			$value;
	}
}

class Foo {
	use DynamicDefinition;
	private $privateValue = 'I am private';
}

$foo = new Foo;
$foo->bar = function() {
	return $this->privateValue;
};

//Prints i am private
print $foo->bar();

?>

Private/protected members are accessible if you set the "newscope" argument (as the manual says).

<?php
$fn = function(){
	return ++$this->foo; //increases the value
};

class Bar{
	private $foo = 1; //initial value
}

$bar = new Bar();

$fn1 = $fn->bindTo($bar, 'Bar'); //specify class name
$fn2 = $fn->bindTo($bar, $bar); //or object

echo $fn1(); //2
echo $fn2(); //3

With rebindable $this at hand it is possible to do evil stuff:

<?php
	class A {
		private $a = 12;
		private function getA () {
			return $this->a;
		}
	}
	class B {
		private $b = 34;
		private function getB () {
			return $this->b;
		}
	}
	$a = new A();
	$b = new B();
	$c = function() {
		if (property_exists($this, "a") && method_exists($this, "getA")) {
			$this->a++;
			return $this->getA();
		}
		if (property_exists($this, "b") && method_exists($this, "getB")) {
			$this->b++;
			return $this->getB();
		}
	};
	$ca = $c->bindTo($a, $a);
	$cb = $c->bindTo($b, $b);
	echo $ca(), "\n"; // => 13
	echo $cb(), "\n"; // => 35
?>

Access private members of parent classes; playing with the scopes:

<?PHP
class Grandparents{ private $__status1 = 'married'; }
class Parents extends Grandparents{ private $__status2 = 'divorced'; }
class Me extends Parents{ private $__status3 = 'single'; }

$status1_3 = function()
{
	$this->__status1 = 'happy';
	$this->__status2 = 'happy';
	$this->__status3 = 'happy';
};

$status1_2 = function()
{
	$this->__status1 = 'happy';
	$this->__status2 = 'happy';
};

// test 1:
$c = $status1_3->bindTo($R = new Me, Parents::class);
#$c(); //Fatal: Cannot access private property Me::$__status3

// test 2:
$d = $status1_2->bindTo($R = new Me, Parents::class);
$d();
var_dump($R);

/*
object(Me)#5 (4) {
	["__status3":"Me":private]=>
	string(6) "single"
	["__status2":"Parents":private]=>
	string(5) "happy"
	["__status1":"Grandparents":private]=>
	string(7) "married"
	["__status1"]=>
	string(5) "happy"
}
*/

//test 3:
$e = $status1_3->bindTo($R = new Me, Grandparents::class);
#$e(); // Fatal: Cannot access private property Me::$__status3

//test 4:
$f = $status1_2->bindTo($R = new Me, Grandparents::class);
$f();
var_dump($R);
/*
object(Me)#9 (4) {
	["__status3":"Me":private]=>
	string(6) "single"
	["__status2":"Parents":private]=>
	string(8) "divorced"
	["__status1":"Grandparents":private]=>
	string(5) "happy"
	["__status2"]=>
	string(5) "happy"
}
*/
?>

Clear the stack trace:
<?PHP
use Exception;
use ReflectionException;

$c = function()
{
	$this->trace = [];
};

$c = $c->bindTo($R = new ReflectionException, Exception::class);
$c();

try
{
	throw $R;
}
catch(ReflectionException $R)
{
	var_dump($R->getTrace());
}
/*
array(0) {
}
*/
?>

Closure::call:

Closure::call - Binds and calls the closure

Desc:

public mixed Closure::call ( object $newthis [, mixed $... ])

Temporarily binds the closure to newthis, and calls it with any given
parameters.

Params:

newthis: The object to bind the closure to for the duration of the call.

... : Zero or more parameters, which will be given as parameters to the closure.

Returns:

Returns the return value of the closure.

Examples:

Example #1 Closure::call() example

<?php
class Value {
	protected $value;

	public function __construct($value) {
		$this->value = $value;
	}

	public function getValue() {
		return $this->value;
	}
}

$three = new Value(3);
$four = new Value(4);

$closure = function ($delta) { var_dump($this->getValue() + delta); };
$closure->call($three, 4);
$closure->call($four, 4);
?>

The above will output:

int(7)
int(8)

Prior to PHP 7.0, you can use this code:

<?php
$cl = function($add) { return $this->a + $add; };

$cl->bindTo($newthis);
return call_user_func_array($cl, [10]);
?>

BUt this bind the closure permantly. Also read the article for Closure::bindTo() about
binding closures from static context.

Closure::fromCallable:

Closure::fromCallable - Converts a callable into a closure.

Desc:

public static Closure Closure::fromCallable ( callable $callable )

Create and return a new anonymous function from given callable using the current scope.
This method checks if the callable is callable in the current scope and throws a TypeError
if it is not.

Params:

callable: The callable to convert.

Returns:

Returns the newly created Closure or throws a TypeError if the callable is not callable
in the current scope.

It seems that hte result of the "fromCallable" behaves a little bit different than an original
Lambda function.

class A {
	private $name;
	public function __construct($name)
	{
		$this->name = $name;
	}
}

// test callable
function getName()
{
	return $this->name;
}
$bob = new A("Bob");

$cl1 = Closure::fromCallable("getName");
$cl1 = $cl1->bindTo($bob, 'A');

//This will retrieve: Uncaught Error: Cannot access private property A::$name
$result = $cl1();
echo $result;

//But for a Lambda function
$cl2 = function() {
	return $this->name;
};

$cl2 = $cl2->bindTo($bob, 'A');
$result = $cl2();

//This will print Bob
echo $result;

The Generator Class:

Intro:

Generator objects are returned from generators.

Caution: Generator objects cannot be instansiated via new.

Class synopsis:

Generator implements Iterator {
	
	//methods
	public mixed current()
	public mixed getReturn()
	public mixed key()
	public void next()
	public void rewind()
	public mixed send ( mixed $value )
	public mixed throw ( Throwable $exception )
	public bool valid()
	public void __wakeup()
}

Table of Contents:

Generator::current - Get the yielded value
Generator::getReturn - get the return value of a generator
Generator::key - Get the yielded key

Generator::next - Resume execution of the generator
Generator::rewind - Rewind the iterator
Generator::send - Send a value to the generator

Generator::throw - Throw an exception into the generator
Generator::valid - Check if the iterator has been closed
Generator::__wakeup - Serialize callback

Unlike return, yield can be used anywhere within a function so logic can flow more naturally.
Take for example, the following Fibonacci generator:

<?php
function fib($n)
{
	$cur = 1;
	$prev = 0;
	for ($i = 0; $i < $n; $i++) {
		yield $cur;

		$temp = $cur;
		$cur = $prev + $cur;
		$prev = $temp;
	}
}

$fibs = fib(9);
foreach ($fibs as $fib) {
	echo " " . $fib;
}

//prints: 1 1 2 3 5 8 13 21 34

Generator::current:

Generator::current - get the yielded value

Desc:

public mixed Generator::current()

params:

Nothing

Generator::getReturn:

Generator::getReturn - Get the return value of a generator

Desc:

public mixed Generator::getReturn()

Params:

This function has no params

Returns:

Returns the generator's return value once it has finished executing

Examples:

Example #1 Generator::getReturn() example

<?php

$gen = (function() {
	yield 1;
	yield 2;

	return 3;
})();

foreach ($gen as $val) {
	echo $val , PHP_EOL;
}

echo $gen->getReturn() , PHP_EOL;

The above will output:

1
2
3

Generator::getReturn() checks whether the function has returned (finished executing).

<?php
function f(){
	yield;
}

f()->getReturn(); //Exception: Cannot get return value of a generation taht has not returned

$f = f();
$f->next(); // NULL
$f->getReturn(); //NULL, because having no return statement implies an empty return, and the void
return value is resolved to null

Generator::key:

Generator::key - Get the yielded key

Desc:

public mixed Generator::key()

Gets the key of the yielded value.

Params:

This function has no params.

Returns:

Returns the yielded key.

Examples:

Example #1 Generator::key() example

<?php

function Gen()
{
	yield 'key' => 'value';
}

$gen = Gen();

echo "{$gen->key()} => {$gen->current()}";

The above will output:

key => value

Generator::next:

Generator::next - Resume execution of the generator

Desc:

public void Generator::next()

Params:

This function has no parameters

Returns:

NO value is returned

it should be noted that next() sends an implicit null into the generator to ensure that code execution is
not blocked if the generator is expecting a value to be sent into it and the code does not execute any
send()

Generator::rewind:

Generator::rewind - Rewind the iterator

Desc:

public void Generator::rewind()

If iteration has already begun, this will throw an exception.

Params:

None

Returns: Nothing

Actually, this method can be useful to test a generator before iterating, as it executes your function
up to the first yield statement. I.e, if you try to read a non-existent file in a generator, an error
will normally occur only in client code foreach()'s first iteration. Sometimes this can be critical
to check beforehand.

Take a look at a modified example from here:
For the proection from the leaking of resources

sampel code

function getLines($file) {
	$f = fopen($file, 'r');
	try {
		while ($line = fgets($f)) {
			yield $line;
		}
	} finally {
		fclose($f);
	}
}

foreach (getLines("file.txt") as $n => $line) {
	if ($n > 5) break;
	echo $line;
}

Bear in mind that execution of a generator function is postponed until iteration over
its result (the Generator object) begins. This might confuse one if the result of a generator
is assigned to a variable instead of immediate iteration.

<?php

$some_state = 'initial';

function gen() {
	global $some_state;

	echo "gen() execution start\n";
	$some_state	 = "changed";

	yield 1;
	yield 2;
}

function peek_state() {
	global $some_state;
	echo "\$some_state = $some_state\n";
}

echo "calling gen()...\n";
$result = gen();
echo "gen() was called\n";

peek_state();

echo "Iterating...\n";
foreach ($result as $val) {
	echo "iteration: $val\n";
	peek_state();
}

?>

If you need to perform some action when the function is called and before the result is used, you will have
to wrap your generator in another function.

<?php
/**
 * @return Generator
 */
function some_generator() {
	global $some_state;

	$some_state = "changed";
	return gen();
}
?>

Same example, different results:

			time 	memory, mb
not gen 	0.7589 	146.75

with gen 	0.7469 	8.75

Time in results varying from 6.5 to 7.8 on both examples.
So no real drawbacks concerning processing speed.

Here's how to detect loop breaks, and how to handle or cleanup after an interupption.

<?php
	function generator()
	{
		$complete = false;
		try {
			while (($result = some_function())) {
				yield $result;
			}
			$complete = true;
		} finally {
			if (!$complete) {
				//cleanup when loop breaks
			} else {
				//cleanup when loop completes
			}
		}

		//Do something only after loop completes
	}		
?>

Abstract test.
<?php

$start_time=microtime(true);
$array = array();
$result = '';
for($count=1000000; $count--;)
{
	$array[]=$count/2;
}
foreach($array as $val)
{
	$val += 145.56;
	$result .= $val;
}
$end_time=microtime(true);

echo "time: ", bcsub($end_time, $start_time, 4), "\n";
echo "memory (byte): ", memory_get_peak_usage(true), "\n";

?>

<?php

$start_time=microtime(true);
$result = '';
function it()
{
	for($count=1000000; $count--;)
	{
		yield $count/2;
	}
}
foreach(it() as $val)
{
	$val += 145.56;
	$result .= $val;
}
$end_time=microtime(true);

echo "time: ", bcsub($end_time, $start_time, 4), "\n";
echo "memory (byte): ", memory_get_peak_usage(true), "\n";

?>

Result:

			time 		memory,mb
not gen 	2.1216 		89.25

with gen 	6.1963 		8.75

diff 		< 192% 		> 90%

A simple function to parse an ini configuration file
<?php
	function parse_ini($file_path){
		if(!file_exists($file_path)){
			throw new Exception("File not exists ${file_path}");
		}
		$text = fopen($file_path, 'r');
		while($line=fgets($text)){
			list($key, $param) = explode('=', $line);
			yield $key => $param;
		}
	}
?>

//Usage: parse_ini('param.ini') //returns Generator Object
//Usage: Iterator_to_array(parse_ini('param.ini')); // returns an array

<?php

function getLines($file) {
	$f = fopen($file, 'r');
	try {
		while ($line = fgets($f)) {
			yield $line;
		}
	} finally {
		fclose($f);
	}
}

$getLines = getLines('no_such_file.txt');
$getLines->rewind(); //with->rewind(), a file read error will be thrown here and a log file will not be cleared

openAndClearLogFile();

foreach ($getLines as $n => $line) { //without ->rewind(), the script will die here and your log file will be cleared
	writeToLogFile('reading: ' . $line . "\n");
}

closeLogFile();

?>

P.S: When you iterate over a generator after ->rewind(), you will get the first yielded value immediately, as the
preceding code was already executed.

Generator::send:

Generator::send - Send a value to the generator

Desc:

public mixed Generator::send ( mixed $value )

Sends the given value to the generator as the result of the current yield expression and resume
execution of the generator.

If the generator is not a yield expression when this method is called, it will first be let to
advance to the first yield expression before sending the value. As such it is not necessary
to "prime" PHP generators with a Generator::next() call (like it is done in Python).

Params:

value: Value to send into the generator. This value will be the return value of the yield expression
the generator is currently at.

Returns: Returns the yielded value.

Examples:

Example #1 Using Generator::send() to inject values

<?php
function printer() {
	echo "I'm printer!".PHP_EOL;
	while (true) {
		$string = yield;
		echo $string.PHP_EOL;
	}
}

$printer = printer();
$printer->send('Hello World');
$printer->send('Bye World');
?>

The above will output:

I am printer!
Hello world!
Bye world!

Reading the example, it is a bit different to understand what exactly to do with this. The example below
is a simple example of what you can do this:

<?php
function nums() {
	for ($i = 0; $i < 5; ++$i) {
		//Get a value from the caller
		$cmd = (yield $i);

		if($cmd == 'stop')
			return; //exit teh function
	}
}

$gen = nums();
foreach($gen as $v)
{
	if($v == 3)//we are satisfied
		$gen->send('stop');

	echo "{$v}\n";
}

//Output
0
1
2
3
?>

<?php
function foo() {
	$string = yield;
	echo $string;
	for ($i = 1; $i <= 3; $i++) {
		yield $i;
	}
}

$generator = foo();
$generator->send('Hello World');
foreach ($generator as $value) echo "$value\n";
?>

This code fails with the error:
PHP Fatal Error: uncaught exception 'Exception' with message 'Cannot rewind a generator that was already run'.
foreach internally calls rewind, you should remember this.

Generator::throw:

Generator::throw - Throw an exception into the generator

Desc:

public mixed Generator::throw ( Throwable $exception )

Throws an exception into the generator and resumes execution of the generator. The behavior will be
the same as if the current yield expression was replaced with a throw $exception statement.

If the generator is already closed when this method is invoked, the exception will be thrown
in teh caller's context instead.

PArams:

exception: Exception to throw into the generator.

Returns:

Returns the yielded value

Changelog:

Version 			Desc

7.0.0 				The exception parameter also accepts Throwable now.

Examples:

Example #1 Throwing an exception into a generator

<?php
function gen() {
	echo "Foo\n";
	try {
		yield;
	} catch (Exception $e) {
		echo "Exception: {$e->getMessage()}\n";
	}
	echo "Bar\n";
}

$gen = gen();
$gen->rewind();
$gen->throw(new Exception('Test'));
?>

The above will output:

Foo
Exception: 	Test
Bar

Generator::valid:

Generator::valid - Check if the iterator has been closed

Desc:

public bool Generator::valid()

Params:

This function has no params.

Returns:

Returns FALSE if the iterator has been closed. Otherwise returns TRUE.

Generator::__wakeup:

Generator::__wakeup - Serialize callback

Desc:

public void Generator::__wakeup()

Throws an exception as generators can't be serialized.

Params:

This function has no params

Returns:

No value is returned.


The above things related to Datastructures, this, belongs to Iterators:

Iterators:

Table of Contents:

AppendIterator
ArrayIterator
CachingIterator
CallbackFilterIterator
DirectoryIterator
EmptyIterator

FilesystemIterator
FilterIterator
GlobIterator
InfiniteIterator
IteratorIterator

LimitIterator
MultipleIterator
NoRewindIterator
ParentIterator
RecursiveArrayIterator

RecursiveCachingIterator
RecursiveCallbackFilterIterator
RecursiveDirectoryIterator
RecursiveFilterIterator
RecursiveIteratorIterator

RecursiveRegexIterator
RecursiveTreeIterator
RegexIterator

SPL provides a set of iterators to traverse over objects.

SPL Iterators Class Tree

ArrayIterator
	RecursiveArrayIterator

EmptyIterator
IteratorIterator
	AppendIterator
	CachingIterator
		RecursiveCachingIterator

	FilterIterator
		CallbackFilterIterator
			RecursiveCallbackFilterIterator

		RecursiveFilterIterator
			ParentIterator

		RegexIterator
			RecursiveRegexIterator

	InfiniteIterator
	LimitIterator
	NoRewindIterator

MultipleIterator
RecursiveIteratorIterator
	RecursiveTreeIterator

DirectoryIterator (extends SplFileInfo)
	FilesystemIterator
		GlobIterator
		RecursiveDirectoryIterator

The AppendIterator class:

Intro:

An Iterator that iterates over several iterators one after the other.

Class synopsis:

AppendIterator extends IteratorIterator implements OuterIterator {
	//Methods
	public __construct()
	public void append ( Iterator $iterator )
	public mixed current ()
	public ArrayIterator getArrayIterator()
	public Iterator getInnerIterator()

	public int getIteratorIndex()
	public scalar key()
	public void next()
	public void rewind()
	public bool valid()

	//Inherited methods
	public IteratorIterator::__construct ( Traversable $iterator )
	public mixed IteratorIterator::current()
	public Traversable IteratorIterator::getInnerIterator()
	public scalar IteratorIterator::key()

	public void IteratorIterator::next()
	public void IteratorIterator::rewind()
	public bool IteratorIterator::valid()

}

Table of Contents:

AppendIterator::append - Appends an iterator
AppendIterator::__construct - Constructs an AppendIterator
AppendIterator::current - Gets the current value

AppendIterator::getArrayIterator - Gets the ArrayIterator
AppendIterator::getInnerIterator - Gets the inner iterator
AppendIterator::getIteratorIndex - gets an index of iterators

AppendIterator::key - Gets the current key
AppendIterator::next - Moves to the next element
AppendIterator::rewind - Rewinds the Iterator
AppendIterator::valid - Checks validity of the current element

Note that AppendIterator will segfault when iterating over an empty generator.
Do not use AppendIterator in conjunction with generators.

Updated code.
I could not find how to edit a note :/

Preventing segfault if empty generator.
<?php

$append_iterator = new \AppendIterator();

$generator = some_generator();

//Only works if first value in generator is not empty
// useful when yielding arrays
foreach ($generator as $value)
{
	//If first $value not empty, generator is not empty
	if(!empty($value))
	{
		$append_iterator->append($generator);
		//break out of loop after appending
		break;
	}
}

AppendIterator::append:

AppendIterator::append - Appends an iterator

Desc:

public void AppendIterator::append ( Iterator $iterator )

Appends an iterator

Params:

iterator: The iterator to append

Returns: Nothing.

Examples:

Example #1 AppendIterator::append() example

<?php
$array_a = new ArrayIterator(array('a', 'b', 'c'));
$array_b = new ArrayIterator(array('d', 'e', 'f'));

$iterator = new AppendIterator;
$iterator->append($array_a);
$iterator->append($array_b);

foreach ($iterator as $current) {
	echo $current;
}
?>

The above will output:

abcdef

AppendIterator::__construct:

AppendIterator::__construct - Constructs an AppendIterator

Desc:

public AppendIterator::__construct()

Constructs an AppendIterator.

Params: This function has no params

Returns: No value is returned.

Examples:

Example #1 Iterating AppendIterator with foreach

<?php
$pizzas = new ArrayIterator(array('Margarita', 'Siciliana', 'Hawaii'));
$toppings = new ArrayIterator(array('Cheese', 'Anchovies', 'Olives', 'Pineapple', 'Ham'));

$appendIterator = new AppendIterator;
$appendIterator->append($pizzas);
$appendIterator->append($toppings);

foreach ($appendIterator as $key => $item) {
	echo $key . ' => ' . $item . PHP_EOL;
}
?>

the above will output:

0 => Margarita
1 => Sicilliana
2 => Hawaii
0 => Cheese
1 => Anchovies
2 => Olives
3 => Pineapple
4 => Ham

Example #2 Iterating AppendIterator with the AppendIterator API

<?php
$pizzas = new ArrayIterator(array('Margarita', 'Sicilliana', 'Hawaii'));
$toppings = new ArrayIterator(array('Cheese', 'Anchovies', 'Olives', 'Pineapple' 'Ham'));

$appendIterator = new AppendIterator;
$appendIterator->append($pizzas);
$appendIterator->append($toppings);

while ($appendIterator->valid()) {
	printf(
		'%s => %s => %s%s',
		$appendIterator->getIteratorIndex(),
		$appendIterator->key(),
		$appendIterator->current(),
		PHP_EOL
	);
	$appendIterator->next();
}
?>

The above example will output:

0 => 0 => Margarita
0 => 1 => Sicilliana
0 => 2 => Hawaii
1 => 0 => Cheese
1 => 1 => Anchovies
1 => 2 => Olives
1 => 3 => Pineapple
1 => 4 => Ham

notes:

Caution: When using iterator_to_array() to copy the values of the AppendIterator into an array, you have
to set the optional use_key argument to FALSE. When use_key is not FALSE any keys reoccuring in inner
iterations will get overwritten in the returned array. There is no way to preserve the original keys.

AppendIterator::current:

AppendIterator::current - Gets the current value

Desc:

public mixed AppendIterator::current()

Gets the current value.

Params:

This function has no params.

Returns: The current value if it is valid or NULL otherwise.

AppendIterator::getArrayIterator:

AppendIterator::getArrayIterator - Gets the ArrayIterator

Desc:

public ArrayIterator AppendIterator AppendIterator::getArrayIterator()

This method gets the ArrayIterator that is used to store the iterators added with AppendIterator::append().

Params: Has none

Returns: Returns an ArrayIterator containing the appended iterators.

AppendIterator::getInnerIterator:

AppendIterator::getInnerIterator - Gets the inner iterator

Desc:

public Iterator AppendIterator::getInnerIterator()

This method returns the current inner iterator

params: This function has no params

Returns: The current inner iterator, or NULL if there is not one.

Examples:

Example #1 AppendIterator::getInnerIterator() example

<?php
$array_a = new ArrayIterator(array('a' => 'aardwolf', 'b' => 'bear', 'c' => 'capybara'));
$array_b = new RegexIterator($array_a, '/^[ac]/');

$iterator = new AppendIterator;
$iterator->append($array_a);
$iterator->append($array_b);

foreach ($iterator as $current) {
	$inner = $iterator->getInnerIterator();
	if ($inner instanceOf RegexIterator) {
		echo 'Filtered: ';
	} else {
		echo 'Original: ';
	}
	echo $current . PHP_EOL;
}
?>

The above example will output:

Original: aardwolf
Original: bear
Original: capybara
Filtered: aardwolf
Filtered: capybara

AppendIterator::getIteratorIndex:

AppendIterator::getIteratorIndex - gets an index of iterators

Desc:

public int AppendIterator::getIteratorIndex()

Gets the index of the current inner iterator.

Params: This function has no params.

Return Values: Returns an integer, which is the zero-based index of the current inner iterator.

Examples:

Example #1 AppendIterator.getIteratorIndex() basic example

<?php
$array_a = new ArrayIterator(array('a' => 'aardwolf', 'b' => 'bear', 'c' => 'capybara'));
$array_b = new ArrayIterator(array('apple', 'orange', 'lemon'));

$iterator = new AppendIterator;
$iterator->append($array_a);
$iterator->append($array_b);

foreach ($iterator as $key => $current) {
	echo $iterator->getIteratorIndex() . '  ' . $key . ' ' . $current . PHP_EOL;
}
?>

The above example will output:

0 	a 	aardwolf
0 	b 	bear
0 	c 	capybara
1 	0 	apple
1 	1 	orange
1 	2 	lemon

AppendIterator::key:

AppendIterator::key - gets the current key

Desc:

public scalar AppendIterator::key()

Gets the current key.

Params: This function has no params

Returns: The current key if it is valid or NULL otherwise.

Examples:

Example #1 AppendIterator::key() basic example

<?php
$array_a = new ArrayIterator(array('a' => 'aardwolf', 'b' => 'bear', 'c' => 'capybara'));
$array_b = new ArrayIterator(array('apple', 'orange', 'lemon'));

$iterator = new AppendIterator;
$iterator->append($array_a);
$iterator->append($array_b);

//Manual iteration
$iterator->rewind();
while ($iterator->valid()) {
	echo $iterator->key() . ' ' . $iterator->current() . PHP_EOL;
	$iterator->next();
}

echo PHP_EOL;

//With foreach
foreach ($iterator as $key => $current) {
	echo $key . ' ' . $current . PHP_EOL;
}
?>

The above example will output:

a 	aardwolf
b 	bear 
c 	capybara
0 	apple
1 	orange
2 	lemon

a 	aardwolf
b 	bear
c 	capybara
0 	apple
1 	orange
2 	lemon

AppendIterator::next:

AppendIterator::next - moves to the next element

Desc:

public void AppendIterator::next()

moves to the next element. If this means to another Iterator then it rewinds that Iterator.

Params: This function has no params.

Returns: No value is returned.

AppendIterator::rewind:

AppendIterator::rewind - Rewinds the Iterator

Desc:

public void AppendIterator::rewind()

Rewind to the first element of the first inner Iterator.

Params: This function has no parameters.

Returns: No value is returned.

AppendIterator::valid:

AppendIterator::valid - checks validity of the current element

Desc:

public bool AppendIterator::valid()

Checks validity of the current element

Params: This function has none.

Returns: Returns TRUE if the current iteration is valid, FALSE otherwise.

IteratorIterator::__construct:

IteratorIterator::__construct - Create an iterator form anything that is traversable

Desc:

public IteratorIterator::__construct ( Traversable $iterator )

Creates an iterator from anything that is traversable.

Params: iterator - The traversable iterator.

Returns: Nothing

IteratorIterator::current:

IteratorIterator::current - Get the current value

Desc:

public mixed IteratorIterator::current()

get the value of the current element.

Params: This function has no params.

Returns: The value of the current element.

IteratorIterator::getInnerIterator:

IteratorIterator::getInnerIterator - Get the inner iterator

Desc:

public Traversable IteratorIterator::getInnerIterator()

Get the inner iterator.

Params: This function has no params.

Returns: The inner iterator as passed to IteratorIterator::__construct()

The returned value from getInnerIterator() really is the inner iterator, not a clone.
It should be used with respect: calling next() or rewind() on it, for example, will advance
or reset the inner iterator - although the effect won't be noticed until you call next()
on the IteratorIterator object.

It seems as if it caches its current() and key() values (as of PHP v5.5.9). Even if the
inner iterator itself is valid (i.e. valid() returns TRUE) the IteratorIterator won't
report itself as valid until you either rewind it or call its next() method - these two
methods cause the IteratorIterator to re-sync its current, key and valid states with
the inner iterator.

IteratorIterator::key:

IteratorIterator::key - get the key of the current element

Desc:

public scalar IteratorIterator::key()

Get the key of the current element.

Params: this function has no params.

Returns: The key of the current element.

IteratorIterator::next:

IteratorIterator::next - Forward to the next element

Desc:

public void IteratorIterator::next()

Forward to the next element

Params: This function has no params

Returns: No value is returned

IteratorIterator::rewind:

IteratorIterator::rewind - Rewind to the first element

Desc:

public void IteratorIterator::rewind()

Rewinds to the first element.

Params: This function has no params

Returns: No value is returned.

IteratorIterator::valid:

IteratorIterator::valid - Checks if the iterator is valid

Desc:

public bool IteratorIterator::valid()

Checks if the iterator is valid.

Params: This function has no params

Returns: Returns TRUE if the iterator is valid, otherwise FALSE.

Jumping over a bit to Interfaces:

The Countable INterface:

Introduction:

Classes implementing Countable can be used with the count() function

Interface synopsis:

Countable {
	//Methods
	abstract public int count ()
}

Table of Contents:

Countable:count - Count elements of an object

I just want to point out that your class has to actually implement the Countable interface,
not just define a count method, to be able to use count($object) and get the expected results.

I.e., the first example below won't work as expected, the second will. (The normal arrow function
accessor ($object->count())) will work fine.

<?php
//Example one

class CountMe
{
	protected $_myCount = 3;

	public function count()
	{
		return $this->_myCount;
	}
}

$countable = new CountMe();
echo count($countable); //result is "1", not as expected

//Example two

class CountMe implements Countable
{
	protected $_myCount = 3;

	public function count()
	{
		return $this->_myCount;
	}
}

$countable = new CountMe();
echo count($countable); //result is "3" as expected
?>

Note that arrays do not implement countable. Therefore, you cannot force a countable parameter
for a function if you want it also to work with native arrays.

When using GMP/BC/Floating-Point Numbers to work with integers larger than PHP_INT_MAX, be aware
that using the count() function will typecast the returned value to an integer.

<?php
class counter implements Countable {
	public function count() {
		//Number of ipv6 addresses in a single /32 IPV6 allocation (2^96)
		return "18446744073709551616"; //Assume generated/exported by big-int library(GMP/BC/etc.)
	}
}

$obj = new counter();

echo $obj->count(); //prints string "18446744073709551616"
echo count($obj); //prints int PHP_INT_MAX

//This is because of the typecasting
echo (int) "18446744073709551616"; // prints int PHP_INT_MAX
?>

This will also cause problems for floating-point values.

<?php
class counter implements Countable {
	public function count() {
		//Number of Ipv6 addresses in a single /32 IPv6 allocation (2^96)
		return 18446744073709551616;
	}
}

$obj = new counter();

echo $obj->count(); //prints float 18446744073709551616
echo count($obj); //prints int 0

//This is because of the typecasting
echo (int) 18446744073709551616; // prints int 0
?>

This is only problematic when counting higher than PHP_INT_MAX.

The OuterIterator interface:

Introduction:

Classes implementing OuterIterator can be used to iterate over iterators.

Interface synopsis:

OuterIterator extends Iterator {
	//methods
	public Iterator getInnerIterator()

	//inherited methods
	abstract public mixed Iterator::current()
	abstract public scalar Iterator::key()
	abstract public void Iterator::next()
	abstract public void Iterator::rewind()
	abstract public boolean Iterator::valid()
}

OuterIterator::getInnerIterator:

OuterIterator::getInnerIterator - Returns the inner iterator for the current entry.

Desc:

public Iterator OuterIterator::getInnerIterator()

Returns the inner iterator for the current iterator entry.

Params: This function has no params

Returns: The inner iterator for the current entry.

The ArrayIterator class:

Intro:

This iterator allows to unset and modify values and keys while iterating over Arrays and Objects.

When you want to iterate over the same array multiple times you need to instansiate ArrayObject
and let it create ArrayIterator instances that refer to it either by using foreach or by calling
its getIterator() method manually.

Class synopsis:

ArrayIterator implements ArrayAccess , SeekableIterator , Countable , Serializable {
	//methods
	public void append ( mixed $value )
	public void asort ()
	public __construct ([ mixed $array = array() [, int $flags = 0 ]] )
	public int count()

	public mixed current()
	public array getArrayCopy()
	public void getFlags()
	public mixed key()

	public void ksort()
	public void natcasesort()
	public void natsort()
	public void next()

	public void offsetExists ( string $index )
	public mixed offsetGet ( string $index )
	public void offsetSet ( string $index , string $newval )
	public void offsetUnset ( string $index )
	public void rewind()

	public void seek ( int $position )
	public string serialize()
	public void setFlags ( string $flags )
	public void uasort ( string $cmp_function )

	public void uksort ( string $cmp_function )
	public string unserialize ( string $serialized )
	public bool valid()

}

Another fine Iterator from php. You can use it especially when you have to iterate over objects

<?php
$fruits = array(
	"apple" => "yummy",
	"orange" => "ah ya, nice",
	"grape" => "wow, i love it!",
	"plum" => "nah, not me"
);
$obj = new ArrayObject($fruits);
$it = $obj->getIterator();

//How many items are we iterating over

echo "Iterating over: " . $obj->count() . " values\n";

//iterate over the values in the ArrayObject:
while( $it->valid() )
{
	echo $it->key() . "=" . $it->current() . "\n";
	$it->next();
}

//The good thing here is it can be iterated with foreach loop

foreach ($it as $key=>$val)
echo $key.":".$val."\n";

//outputs something like

Iterating over: 4 values
apply=yummy
orange=ah ya, nice
grape=wow, i love it
plum=nah, not me

?>

Need a callback on an iterated value, but do not have PHP 5.4+? This works:

<?php
class ArrayCallbackIterator extends ArrayIterator {
	private $callback;
	public function __construct($value, $callback) {
		parent::__construct($value);
		$this->callback = $callback;
	}

	public function current(){
		$value = parent::current();
		return call_user_func($this->callback, $value);
	}
}
?>

You can use it pretty much exactly as the Array iterator:

<?php
$iterator1 = new ArrayCallbackIterator($valueList, "callback_function");
$iterator2 = new ArrayCallbackIterator($valueList, array($object, "callback_class_method"));
?>

And to iterate recursively use the RecursiveArrayIterator:

<?php
$fruits = array(
				"apple" => "yummy",
				"orange" => "ah ya, nice",
				"grape" => "wow, i love it!",
				"plum" => "nah not me"
				);

$veg = array("potato" => "chips", "carrot" => "soup");
$grocery = array($fruits, $veg);
$obj = new ArrayObject($grocery);

$it = new RecursiveIteratorIterator(new RecursiveArrayIterator($grocery));

foreach ($it as $key=>$val)
echo $key.":".$val."\n";

?>

Output:

apple: yummy
orange: ah yes, nice.
grape: wow, i love it
plum:nah, not me
potato:chips
carrot:soup

ArrayIterator::append:

ArrayIterator::append - Append an element

Desc:

public void ArrayIterator::append ( mixed $value )

Appends value as the last element.

Warning: This function is currently not documented, only its argument list is available.

Params: 

value: The value to append

Returns: Nothing

Notes: This method cannot be called when the ArrayIterator refers to an object.

As ArrayIterator is not a real list the implementation of "append" is a little bit 
confusing me. When using "append" i expected the new value at hte position "last element
index + 1". This will not happen when you unset elements before.

It seems like indexes once they are used are blacklisted and never used again, even
if they are unset. Like suggested for Array Iterator, ArrayIterator::append uses ArrayIterator::offsetSet
with empty index params. So, i have these two workarounds, to get "append" to work.

<?php
class myArrayIterator extends ArrayIterator {
	public function offsetSet($offset, $value) {
		if(is_null($offset)) { //offset == null when it is called by ArrayIterator::append
			$offset = $this->generateOffset(); // do it in a separate method
		}
		parent::offsetSet($offset, $value); //call the native implementation with an index
		$this->ksort(); //sort it to avoid confusion when it gets dumped or iterated
	}

	protected function generateOffset() {

		$offset = count($this); // take count as offset as it should be lastKey+1
		while ($this->offsetExists($offset)) { //is it really empty?
			$offset++; //try the next one until there is an empty one
		}
		return $offset;
	}
}

class mySaveArrayIterator extends myArrayIterator {
	protected function generateOffset() {
		$offset = 0; //except zero is the first possible key
		while ($this->offsetExists($offset)) { //try every key until there is an empty one
			$offset++;
		}
		return $offset;
	}
}

$data = array('foo', 'bar', 'baz');

$array = new ArrayIterator($data);
$myArray = new myArrayIterator($data);
$mySaveArray = new mySaveArrayIterator($data);

//remove the last element
$array->offsetUnset(2);
$myArray->offsetUnset(2);
$mySaveArray->offsetUnset(2);

//append an element
$array->append('foobar');
$myArray->append('foobar');
$mySaveArray->append('foobar');

//Check the pos of the new element
print_r($array);
print_r($myArray);
print_r($mySaveArray);

//remove some element
$array->offsetUnset(1);
$myArray->offsetUnset(1);
$mySaveArray->offsetUnset(1);

//again append an element
$array->append('foobarbaz');
$myArray->append('foobarbaz');
$mySaveArray->append('foobarbaz');

//check the position of hte new element
print_r($array);
print_r($myArray);
print_r($mySaveArray);
?>

Output:

ArrayIterator Object
(
	[storage:ArrayIterator:private] => Array
		(
			[0] => foo
			[1] => bar
			[3] => foobar
		)
)
myArrayIterator Object
(
	[storage:ArrayIterator:private] => Array
		(
			[0] => foo
			[1] => bar
			[2] => foobar
		)
)
mySaveArrayIterator Object
(
	[storage:ArrayIterator:private] => Array
		(
			[0] => foo
			[1] => bar
			[2] => foobar
		)
)
ArrayIterator Object
(
	[storage:ArrayIterator:private] => Array
		(
			[0] => foo
			[3] => foobar
			[4] => foobarbaz
		)
)
myArrayIterator Object
(
	[storage:ArrayIterator:private] => Array
		(
			[0] => foo
			[2] => foobar
			[3] => foobarbaz
		)
)
mySaveArrayIterator Object
(
	[storage:ArrayIterator:private] => Array
		(
			[0] => foo
			[1] => foobarbaz
			[2] => foobar
		)
)

This helped me to treat the ArrayIterator as a list with valid indexes in a serial manner.

ArrayIterator::asort:

ArrayIterator::asort - Sort array by values

Desc:

public void ArrayIterator::asort()

Sort an array by values

Warning: This function is currently not documented, only its argument list is available.

Params: This function has no params.

Returns: Nothing

ArrayIterator::__construct:

ArrayIterator::__construct - Constructs an ArrayIterator

Desc:

public ArrayIterator::__construct ([ mixed $array = array() [, int $flags = 0 ]] )

Constructs an ArrayIterator object.

Warning: this function is currently not documented, only its argument list is available.

Params:

Array: the array or object to be iterated on.

flags: Flags to control the behaviour of the ArrayIterator object. See ArrayIterator::setFlags().

Returns: An ArrayIterator object.

Errors/Exceptions: ArrayIterator::__construct() throws an InvalidArgumentException if anything
besides an array or an object is given.

ArrayIterator::count:

ArrayIterator::count - Counts elements

Desc: 

public int ArrayIterator::count()

Gets the number of elements in the array, or the number of public properties in the object.

Warning: this function is currently not documented, only its argument list is available.

Params: This function has no params.

Returns: The number of elements or public properties in the associated array or object, respectively.

ArrayIterator::curent:

ArrayIterator::current - Return current array entry

Desc:

public mixed ArrayIterator::current()

Get the current array entry.

Params: This function has no params.

Returns: The current array entry.

Examples:

Example #1 ArrayIterator::current() example

<?php
$array = array('1' => 'one',
			   '2' => 'two',
			   '3' => 'three');

$arrayobject = new ArrayObject($array);

for($iterator = $arrayobject->getIterator();
	$iterator->valid();
	$iterator->next()) {

	echo $iterator->key() . ' => ' . $iterator->current() . "\n";
}
?>

The above will output:

1 => one
2 => two
3 => three

ArrayIterator::getArrayCopy:

ArrayIterator::getArrayCopy - get array copy

Desc:

public array ArrayIterator::getArrayCopy()

Get a copy of an array

Warning: This function is currently not documented, only its argument list is available.

Params: This function has no params

Returns: A copy of the array, or array or public properties if ArrayIterator refers to an object.

The difference of this method and the direct assign the object to a value is as follows:

<?php
$b = array('name'=>'mengzhi', 'age'=>'12','city'=>'shanghai');
$a = new ArrayIterator($b);

$a->append(array('home'=>'china','work'=>'developer'));
$c = $a->getArrayCopy();
var_dump($a);
var_dump($c);
?>

Result:
object(ArrayIterator)#1 (1) { ["storage":"ArrayIterator":private]=> array(4) { ["name"] => string(7) "mengzhi" ["age"]=>string(2)
"12" ["city"]=> string(8) "shanghai" [0]=> array(2) { ["home"]=> string(5) "china" ["work"]=> string(9)
"developer" } } }

array(4) { ["name"]=> string(7) "mengzhi" ["age"]=> string(2) "12" ["city"]=> string(8) "shanghai" [0]=> array(2) {
["home"]=> string(5) "china" ["work"]=> string(9) "developer"
}}

ArrayIterator.:getFlags:

ArrayIterator::getFlags - Get flags

Desc:

public void ArrayIterator::getFlags()

Get the current flags.

Warning: this function is currently not documented, only its argument list is available.

Params: This function has no params.

Returns: The current flags.

ArrayIterator::key:

ArrayIterator::key - Return current array key

Desc:

public mixed ArrayIterator::key()

This function returns the current array key

Params: This function has no params

Returns: The curent array key.

Examples:

Example #1 ArrayIterator::key() example

<?php
$array = array('key' => 'value');

$arrayobject = new ArrayObject($array);
$iterator = $arrayobject->getIterator();

echo $iterator->key(); //key
?>

ArrayIterator::ksort:

ArrayIterator::ksort - Sort array by keys

Desc:

public void ArrayIterator::ksort()

Sorts an array by the keys.

Warning: This function is currently not documented, only its argument lis is available.

Params: This function has no params.

Returns: Nothing

ArrayIterator::natcasesort:

ArrayIterator::natcasesort - Sort an array naturally, case insensitive

Desc:

public void ArrayIterator::natcasesort()

Sort the entries by values using a case insensitive "natural order" algorithm.

Warning: This function is currently not documented, only its argument list is available.

Params: This function has no params

Returns: No value

ArrayIterator::natsort:

ArrayIterator::natsort - Sort an array naturally

Desc:

public void ArrayIterator::natsort()

Sort the entries by values using "natural order" algo.

Warning: this function is currently not documented, only its argument list
is available.

Params: None

Returns: Nothing

ArrayIterator::next:

ArrayIterator::next - Move to next entry

Desc:

public void ArrayIterator::next()

The iterator to the next entry

Params: None

Returns: Nothing

Examples:

Example #1 ArrayIterator::next() example

<?php
$arrayobject = new ArrayObject();

$arrayobject[] = 'zero';
$arrayobject[] = 'one';

$iterator = $arrayobject->getIterator();

while($iterator->valid()) {
	echo $iterator->key() . ' => ' . $iterator->current() . "\n";

	$iterator->next();
}
?>

The above example will output:

0 => zero
1 => one

If you use exchangeArray method of ArrayObject and then next method of ArrayIterator like this:

<?php
	$fruits = array("apple", "grape", "lemon");

	$colors = array("blue", "yellow", "green");

	$arrayObject = new ArrayObject($fruit);

	$arrayIterator = $arrayObject->getIterator();

	while($arrayIterator->valid()) {
		if($arrayIterator->current() == "grape") {
			$arrayObject->exchangeArray($colors);
		}

		$arrayIterator->next();
	}
?>

You will receive:

PHP Notice: ArrayIterator::next(): Array was modified outside object and internal position is no longer valid

So be careful with next and prev operations

ArrayIterator::offsetExists:

ArrayIterator::offsetExists - Check if offset exists

Desc:

public void ArrayIterator::offsetExists ( string $index )

Checks if the offset exists

Warning: this function is currently not documented, only its args list is available

Params:

index: the offset being checked

Returns: TRUE if the offset exists, otherwise FALSE

ArrayIterator::offsetGet:

ArrayIterator::offsetGet - Get value for an offset

Desc:

public mixed ArrayIterator::offsetGet ( string $index )

Gets the value from the provided offset.

Warning: This function is currently not documented; only its arguments are available.

Params:

index: The offset to get the value from.

Returns: The value at offset index.

ArrayIterator::offsetSet:

ArrayIterator::offsetSet - Set value for an offset

Desc:

public void ArrayIterator::offsetSet ( string $index, string $newval )

Sets a value for a given offset

Warning: This function is currently not documented, only its arg list is available

Params:

index - The index to set for

newval - The new value to store at hte index

Returns: Nothing

ArrayIterator::offsetUnset:

ArrayIterator::offsetUnset - Unset value for an offset

Desc:

public void ArrayIterator::offsetUnset ( string $index )

Unsets a value for an offset.

Warning: This function is currently not documented, only its arg list is available

Params:

index: The offset to unset.

returns: Nothing

This is my solutin for problems with offsetUnset:

<?php

$a = new ArrayObject( range( 0,9 ) );
$b = new ArrayIterator( $a );

for( $b->rewind(); $b->valid(); )
{
	echo "#{$b->key()} - {$b->current()} - <br>\r\n";
	if($b->key()==0 || $b->key()==1){
		$b->offsetUnset($b->key());
	} else {
		$b->next();
	}
}

var_dump($b);
?>

When unsetting elements as you go, it will not remove the second index of the Array being worked
on. I am not sure exactly why, but there is some speculations that when calling unsetOffset();
it resets the pointer as well.

<?php

$a = new ArrayObject(range(0,9));
$b = new ArrayIterator($a);

for($b->rewind(); $b->valid(); $b->next())
{
	echo "#{$b->key()} - {$b->current()} - \r\n";
	$b->offsetUnset($b->key());
}
?>

to avoid this bug, you can call offsetUnset in the for loop:

<?php
for ( $b->rewind(); $b->valid(); $b->offsetUnset( $b->key()))
{
}
?>

Or unset it directly in the ArrayObject:

<?php
	$a->offsetUnset($b->key());
?>

Which will produce the correct results

Make sure you use this function to unset a value. You cannot access this iterator's value
as an array. Ex:

<?php
$iterator = new \RecursiveIteratorIterator(new \RecursiveArrayIterator($arr));

foreach($iterator as $key => $value)
{
	unset($iterator[$key]);
}
?>

Will return:

PHP Fatal error: Cannot use object of tpye RecursiveIteratorIterator as array

offsetUnset works properly even when removing items from nested arrays.

ArrayIterator::rewind:

ArrayIterator::rewind - Rewind array back to the start

Desc:

public void ArrayIterator::rewind()

This rewinds the iterator to the beginning

Params: None

returns: Nothing

Examples:

Example #1 ArrayIterator::rewind() example

<?php
$arrayobject = new ArrayObject();

$arrayobject[] = 'zero';
$arrayobject[] = 'one';
$arrayobject[] = 'two';

$iterator = $arrayobject->getIterator();

$iterator->next();
echo $iterator->key(); //1

$iterator->rewind(); //Rewinding to the begining
echo $iterator->key(); //0
?>

ArrayIterator::seek:

ArrayIterator::seek - Seek to position

Desc:

public void ArrayIterator::seek ( int $position )

Warning: this function is currently not documented, only its argument list is available.

Params:

position: The position to seek to

Returns: Nothing

<?php
//Did not see any code demos.. here is one from an app

$array = array('1' => 'one',
			   '2' => 'two',
			   '3' => 'three');

$arrayobject = new ArrayObject($array);
$iterator = $arrayobject->getIterator();

if($iterator->valid()){
	$iterator->seek(1); //Expected: two, output: two
	echo $iterator->current(); //two
}

?>

<?php
//seek alter the iterators internal indice instead of the value that key() returns.
//This is a big trap if combining with uasort/natsort function

$a = new ArrayObject([4,3,2,1]);
$it = $a->getIterator();
$it->natsort(); //The iterator preserve the key while sorting the array

$it->rewind();
$first = $it->key(); //The first element is 1 and it is key is 3
echo $first . PHP_EOL; //3

$it->next();
$second = $it->key();
echo $second . PHP_EOL; //2

$it->next(); 
$it->seek($first); //Was intended to seek to selemetn 1, key 3, indice 0
echo $it->key() . PHP_EOL; //End up 0 because seek took param as indice instead of key. It seeks to element indice
3, element 4, key 0

var_dump($it);

/* Output
3
2
0
object(ArrayIterator)#2 (1) {
	["storage"]:"ArrayIterator":private]=>
	object(ArrayObject)#1 (1) {
		["storage":"ArrayObject":private]=>
		array(4) {
			[3]=>
			int(1)
			[2]=>
			int(2)
			[1]=>
			int(3)
			[0]=>
			int(4)
		}
	}
}
*/

ArrayIterator.:serialize:

ArrayIterator::serialize - Serialize

Desc:

public string ArrayIterator::serialize()

Serialize

Warning: This function is currently not documented, only arg list is available

Params: This function has no params

Returns: The serialized ArrayIterator

ArrayIterator::setFlags:

ArrayIterator::setFlags - Set behaviour flags

Desc:

public void ArrayIterator::setFlags ( string $flags )

Sets behaviour flags

Warning: This function is currently not documented; only its argument list is available.

Params:

flags: A bitmask as follows:

0 = Properties of the object have their normal functionality when accessed as list(var_dump,foreach,etc.).

1 = Array indices can be accessed as properties in read/write.

Returns: Nothing

ArrayIterator::uasort:

ArrayIterator::uasort - User defiend sort

Desc:

public void ArrayIterator::uasort ( string $cmp_function )

Sort the entries by values using user defined function.

Warning: This function is currently not documented, only its arg list is available.

Params:

cmp_function: The compare function used for the sort

Returns: Nothing

Even if documentation says that $cmp_function must be a string, this method works with
a Callable also.

Example:

<?php

$iterator->uasort([$this, 'usort']); // 'usort' here is a method in the same class

ArrayIterator::uksort:

ArrayIterator::uksort - User defined sort

Desc:

public void ArrayIterator::uksort ( string $cmp_function )

Sort the entires by key using user defined function.

Warning: This function is currently not documented, only its arg list is

Params:

cmp_function: The compare function used for the sort.

Returns: Nothing

ArrayIterator::unserialize:

ArrayIterator::unserialize - Unserialize

Desc:

public string ArrayIterator::unserialize ( string $serialized )

Unserialize.

Warning: this function is currently not documented, only its arg
list is available.

Params:

serialized: The serialized ArrayIterator object to be unserialized.

Returns: the ArrayIterator

ArrayIterator::valid:

ArrayIterator::valid - Check whether array contains more entries

Desc:

public bool ArrayIterator::valid()

Checks if the array contains any more entries

Params: This function has no params

Return: Returns TRUE if the iterator is valid, otherwise FALSE.

Examples:

Example #1 ArrayIterator::valid() example

<?php
$array = array('1' => 'one');

$arrayobject = new ArrayObject($array);
$iterator = $arrayobject->getIterator();

var_dump($iterator->valid()); //Bool(true)

$iterator->next(); //advance to the next item

//bool(false) because there is only one array element
var_dump($iterator->valid());
?>

The CachingIterator class:

Intro:

THis object supports cached iteration over another iterator

Class synopsis:

CachingIterator extends IteratorIterator implements OuterIterator , ArrayAccess, Countable {
	//Constants
	const integer CALL_TOSTRING = 1;
	const integer CATCH_GET_CHILD = 16;
	const integer TOSTRING_USE_KEY = 2;
	const integer TOSTRING_USE_CURRENT = 4;
	const integer TOSTRING_USE_INNER = 8;
	const integer FULL_CACHE = 256;

	//methods
	public __construct ( Iterator $iterator [, int $flags = self::CALL_TOSTRING ])
	public int count()
	public void current()
	public array getCache()
	public int getFlags()

	public Iterator getInnerIterator()
	public void hasNext()
	public scalar key()
	public void next()

	public void offsetExists(string $index )
	public void offsetGet( string $index )
	public void offsetSet( string $index , string $newval )
	public void offsetUnset( string $index )
	public void rewind()

	public void setFlags( int $flags )
	public void __toString()
	public void valid()
}

Predefined Constants:

CachingIterator::CALL_TOSTRING
	Convert every element to string

CachingIterator::CATCH_GET_CHILD
	Do not throw exception in accessing children

CachingIterator::TOSTRING_USE_KEY
	Use key for conversion to string

CachingIterator::TOSTRING_USE_CURRENT
	Use current for conversion to string

CachingIterator::TOSTRING_USE_INNER
	Use inner for conversion to string

CachingIterator::FULL_CACHE
	Cache all read data

Table of Contents:

CachingIterator::__construct - Construct a new CachingIterator object for the iterator
CachingIterator::count - The number of elements in the iterator
CachingIterator::current - Return the current element

CachingIterator::getCache - Retrieve the contents of the cache
CachingIterator::getFlags - Get flags used
CachingIterator::getInnerIterator - Returns the inner iterator

CachingIterator::hasNext - Check whether the inner iterator has a valid next element
CachingIterator::key - Return the key for the current element
CachingIterator::next - Move the iterator forward
CachingIterator::offsetExists - The offsetExists purpose

CachingIterator::offsetGet - The offsetGet purpose
CachingIterator::offsetSet - The offsetSet purpose
CachingIterator::offsetUnset - The offsetUnset purpose

CachingIterator::rewind - Rewind the iterator
CachingIterator::setFlags - The setFlags purpose
CachingIterator::__toString - return the string representon of the current element
CachingIterator::valid - Check whether the current element is valid

<?php
//This snippet will print out all the cached elements (foreach)

$cache = new CachingIterator(new ArrayIterator(range(1,100)), CachingIterator::FULL_CACHE);

foreach ($cache as $c) {
}

print_r($cache->getCache());
?>

CachingIterator::__construct:

CachingIterator::__construct - Construct a new CachingIterator object for hte iterator

Desc:

public CachingIterator::__construct ( Iterator $iterator [, int $flags = self::CALL_TOSTRING ])

Warning: This function is currently not documented; only its argument list is available.

Params:

iterator: iterator to cache

flags: Bitmask of flags

CachingIterator::count:

CachingIterator::count - The number of elements in the iterator

Desc:

public int CachingIterator::count()

Warning: This function is currently not documented, only its argument list is available.

May return the number of elements in the iterator.

Params: Has none

Return: The count of the elements iterated over

CachingIterator::current:

CachingIterator::current - Return the current element

Desc:

public void CachingIterator::current()

Warning: this function is currently not documented, only its arg list is available.

May return the current element in the iteration

Params: None

Returns: Mixed

CachingIterator.:getCache:

CachingIterator::getCache - Retrieve the contents of the cache

Desc:

public array CachingIterator::getCache()

retrieve the contents of the cache

Note: The CachingIterator::FULL_CACHE flag must be being used.

Params: has none

Returns: An array containing the cache items

Errors/Exceptions:

Throws a BadMethodCallException when the CachingIterator::FULL_CACHE flag is not being used.

Examples:

Example #1 CachingIterator::getCache() example

<?php
$iterator = new ArrayIterator(array(1, 2, 3));
$cache = new CachingIterator($iterator, CachingIterator::FULL_CACHE);

$cache->next();
$cache->next();
var_dump($cache->getCache());

$cache->next();
var_dump($cache->getCache());
?>

The above will output:

array(2) {
	[0]=>
	int(1)
	[1]=>
	int(2)
}
array(3) {
	[0]=>
	int(1)
	[1]=>
	int(2)
	[2]=>
	int(3)
}

CachingIterator::getFlags:

CachingIterator::getFlags - Get flags used

Desc:

public int CachingIterator::getFlags()

Warning: This function is currently not documented, only its argument list is available

Get the bitmask of the flags used for this CachingIterator instance.

Params: This function has no params

Returns: ?

use 'CachingIterator::TOSTRING_USE_INNER' flag

<?php
class A extends ArrayIterator {
	public function __toString(){
		return 'toString this class';
	}
}

$iterator = new A(array('apple'=>10, 'banana'=>20, 'cat'=>30));
$cache = new CachingIterator($iterator, CachingIterator::TOSTRING_USE_INNER);

$cache->next();
$cache->next();

echo $cache;

//output
toString this class

Use the 'CachingIterator::TOSTRING_USE_KEY', when echo this Object,
output current 'key';

<?php
$iterator = new ArrayIterator(array('apple'=>10, 'banana'=>20, 'cat'=>30));
$cache = new CachingIterator($iterator, CachingIterator::TOSTRING_USE_KEY);

$cache->next();
$cache->next();

echo $cache;
?>

Outputs: banana

CachingIterator::getInnerIterator:

CachingIterator::getInnerIterator - Returns the inner iterator

Desc:

public Iterator CachingIterator::getInnerIterator()

Warning: This function is currently not documented, only arg list exists

Returns the iterator sent to the constructor

Params: None

Returns: Returns an object implementing the iterator interface.

CachingIterator::hasNext:

CachingIterator::hasNext - Check whether the inner iterator has a valid next element

Desc:

public void CachingIterator::hasNext()

Warning: This function is currently not documented, only its arg list is available.

Params: None

Returns: Returns TRUE on success or FALSE on failure.

CachingIterator::hasNext example:

<?php
$ait = new ArrayIterator(array('Value 1', 'Value 2', 'Value 3', 'Value 4'));
$cit = new CachingIterator($ait);

foreach ($cit as $value) {
	echo $value;
	//if has a next value, print a comma
	if ($cit->hasNext()) {
		echo ', ';
	}
}
?>

Result: Value 1, Value 2, Value 3, Value 4

CachingIterator::key:

CachingIterator::key - Returns the key for the current element.

Desc:

public scalar CachingIterator::key()

Warning: this function is not documented, only params list

This method may returna key for the current element

Params: None

CachingIterator::next:

CachingIterator::next - move the Iterator forward

Desc:

public void CachingIterator::next()

Warning: this function is currently not documented, only arg list exists.

Move the iterator forward

Params: This function has no params

Returns: Nothing

CachingIterator::offsetExists:

CachingIterator::offsetExists - The offsetExists purpose

Desc:

public void CachingIterator::offsetExists ( string $index )

Warning: This function is currently not documented, only its argument list is available.

Params:

index: The index being checked.

Returns: 

TRUE if an entry referenced by the offset exists, FALSE otherwise.

CachingIterator::offsetGet:

CachingIterator::offsetGet - The offsetGet purpose

Desc:

public void CachingIterator::offsetGet ( string $index )

Warning: this function is currently not documented, only its arglist is available.

Params:

index: ?

Returns: ?

CachingIterator::offsetSet:

CachingIterator::offsetSet - The offsetSet purpose

Desc:

public void CachingIterator::offsetSet ( string $index, string $newval )

Warning: This function is currently not documented; only its arglist is available.

Params:

index: The index of the element to be set

newval: The new value for the index

Returns: Nothing

CachingIterator::offsetUnset:

CachingIterator::offsetUnset - The offsetUnset purpose

Desc:

public void CachingIterator::offsetUnset ( string $index )

Warning: This function is currently not documented, only its arglist is.

Params:

index: The index of the element to be unset.

Returns: Nothing

CachingIterator::rewind:

CachingIterator::rewind - Rewind the iterator

Desc:

public void CachingIterator::rewind()

Warning: This function is currently not documented; only its argument list is available.

Rewind the iterator.

Params: None

Returns: Nothing

CachingIterator::setFlags:

CachingIterator::setFlags - The setFlags purpose

Desc:

public void CachingIterator::setFlags ( int $flags )

Warning: This function is currently not documented; only its argument list is available.

Set the flags for the CachingIterator object.

Params:

flags: Bitmask of the flags to set.

Returns: Nothing

CachingIterator::__toString:

CachingIterator::__toString - Returns the string representation of the current element

Desc:

public void CachingIterator::__toString()

Warning: This function is currently not documented, only its arg list is available.

Get the string representation of the current element.

Params: Nothing

Returns: The string representation of the current element.

CachingIterator::valid:

CachingIterator::valid - Check whether the current element is valid

Desc:

public void CachingIterator::valid()

Warning: This function is not documented, only arg list is available

Check whether the current element is valid

Params: Nothing

Returns: Returns TRUE on success or FALSE on failure.

The CallbackFilterIterator class:

Intro:

Class synopsis:

CallbackFilterIterator extends FilterIterator implements OuterIterator {
	//Methods
	public __construct ( Iterator $iterator , callable $callback )
	public string accept()

	//INherited methods
	public abstract bool FilterIterator::accept()
	public FilterIterator::__construct ( Iterator $iterator )
	public mixed FilterIterator::current()
	public Iterator FilterIterator::getInnerIterator()

	public mixed FilterIterator::key()
	public void FilterIterator::next()
	public void FilterIterator::rewind()
	public bool FilterIterator::valid()
}

Examples:

The callback should accept up to three arguments: the current item, the current key and the iterator, respectively.

Example #1 Available callback arguments

<?php

/**
 * Callback for CallbackFilterIterator
 *
 * @param $current Current Item's value
 * @param $key 	Current item's key
 * @param $iterator Iterator being filtered
 * @return boolean TRUE to accept the current item, FALSE otherwise
 */
function my_callback($current, $key, $iterator) {
	//Your filtering code here
}

?>

Any callable may be used; such as string containing a function name, an array for a method,
or an anonymous function.

Example #2 Callback basic examples

<?php

$dir = new FilesystemIterator(__DIR__);

//Filter large files ( > 100MB)
function is_large_file($current) {
	return $current->isFile() && $current->getSize() > 104857600;
}
$large_files = new CallbackFilterIterator($dir, 'is_large_file');

//Filter directories
$files = new CallbackFilterIterator($dir, function ($current, $key, $iterator) {
	return $current->isDir() && !$iterator->isDot();
});

?>

implementation for PHP < 5.4:

<?php
if (!class_exists('CallbackFilterIterator')) {
	class CallbackFilterIterator extends FilterIterator {
		protected $callback;

		// "Closure" type hint should be "callable" in PHP 5.4
		public function __construct(Iterator $iterator, Closure $callback = null) {
			$this->callback = $callback;
			parent::__construct($iterator);
		}

		public function accept() {
			return call_user_func(
				$this->callback,
				$this->current(),
				$this->key(),
				$this->getInnerIterator()
			);
		}
	}
}

In PHP 7 you can use Anonymous classes to get the same results.

<?php

class MyIterator implements Iterator
{
	/**
	 * @var \Iterator
	 */
	protected $next;

	/**
	 * Collection constructor
	 *
	 * @param \Iterator $next
	 */
	public function __construct(Iterator $next)
	{
		$this->next = $next;
	}

	/**
	 * @param callable $callback
	 *
	 * @return static
	 */
	public function filter(callable $callback = null)
	{
		return new static(new class($this, $callback) extends FilterIterator
		{
			protected $callback;

			public function __construct(\Iterator $iterator, callable $callback = null)
			{
				parent::__construct($iterator);

				$this->callback = $callback ?: function($current) {
					return ! empty($current);
				};;
			}

			public function accept()
			{
				return call_user_func($this->callback, parent::accept());
			}
		});
	}
	//Iterator methods
}
//...
?>

CallbackFilterIterator::accept:

CallbackFilterIterator::accept - Calls the callback with the current value, the current key and the inner
iterator as arguments

Desc:

public string CallbackFilterIterator::accept()

This method calls the callback with the current value, current key and the inner iterator.

The callback is expected to return TRUE if the current item is to be accepted, or FALSE otherwise.

Params: None

Returns: TRUE to accept the current item, or FALSE otherwise.

CallbackFilterIterator::__construct:

CallbackFilterIterator::__construct - Create a filtered iterator from another iterator

Desc:

public CallbackFilterIterator::__construct ( Iterator $iterator , callable $callback )

Creates a filtered iterator using the callback to determine which items are accepted 
or rejected.

Params:

iterator: The iterator to be filtered

callback: The callback, which should return TRUE to accept the current item or FALSE otherwise. See examples.

May be any valid callable value.

Returns: Nothing

Examples:

The callback should accept up to three args: the current item, the current key and the iterator, respectively.

Example #1 Available callback arguments

<?php

/**
 * Callback for CallbackFilterIterator
 *
 * @param $current Current item's value
 * @param $key 	   Current item's key
 * @param $iterator Iterator being filtered
 * @return boolean  TRUE to accept the current item, FALSE otherwise
 */
function my_callback($current, $key, $iterator) {
	//Your filtering code here
}

?>

Any callable may be used, such as a string containing a function name, an array for a method,
or an anonymous function.

Example #2 Callback basic examples

<?php

$dir = new FilesystemIterator(__DIR__);

// Filter large files ( > 100MB)
function is_large_file($current) {
	return $current->isFile() && $current->getSize() > 104857600;
}
$large_files = new CallbackFilterIterator($dir, 'is_large_file');

//Filter directories
$files = new CallbackFilterIterator($dir, function ($current, $key, $iterator) {
	return $current->isDir() && ! $iterator->isDot();
});

?>

The DirectoryIterator class

Intro:

the DirectoryIterator class provides a simple interface for viewing the contents of 
filesystem directories.

Class synopsis:

DirectoryIterator extends SplFileInfo implements SeekableIterator {
	
	//Methods
	public __construct ( string $path )
	public DirectoryIterator current()
	public int getATime()
	public string getBasename ([ string $suffix ])

	public int getCTime()
	public string getExtension()
	public string getFilename()
	public int getGroup()
	public int getInode()

	public int getMTime()
	public int getOwner()
	public string getPath()
	public string getPathname()

	public int getPerms()
	public int getSize()
	public string getType()
	public bool isDir()

	public bool isDot()
	public bool isExecutable()
	public bool isFile()
	public bool isLink()

	public bool isReadable()
	public bool isWritable()
	public string key()
	public void next()
	public void rewind()

	public void seek ( int $position )
	public string __toString()
	public bool valid()
}

Changelog:

Version 		Desc

5.1.2 			DirectoryIterator extends SplFileInfo

Table of Contents:

DirectoryIterator::__construct - Constructs a new directory iterator from a path
DirectoryIterator::current - Return the current DirectoryIterator item.
DirectoryIterator::getATime- Get last access time of the current DirectoryIterator item.

DirectoryIterator::getBasename - Get base name of current DirectoryIterator item.
DirectoryIterator::getCTime - Get inode change time of the current DirectoryIterator item.

DirectoryIterator::getExtension - Gets the file extension
DirectoryIterator::getFilename - Return file name of current DirectoryIterator item
DirectoryIterator::getGroup - Get group for the current DirectoryIterator item
DirectoryIterator::getInode - Get inode for the current DirectoryIterator item

DirectoryIterator::getMTime - Get last modification time of current DirectoryIterator item.
DirectoryIterator::getOwner - Get owner of current DirectoryIterator item.
DirectoryIterator::getPath - Get path of current iterator item without filename

DirectoryIterator::getPathname - Return path and file name of current DirectoryIterator item.
DirectoryIterator::getPerms - Get the permissions of current DirectoryIterator item.
DirectoryIterator::getSize - Get size of current DirectoryIterator item.
DirectoryIterator::getType - Determine the type of the current DirectoryIterator item

DirectoryIterator::isDir - Determine if current DirectoryIterator item is a directory
DirectoryIterator::isDot - Determine if current DirectoryIterator item is '.' or '..'
DirectoryIterator::isExecutable - Determine if current DirectoryIterator item is executable
DirectoryIterator::isFile - Determine if current DirectoryIterator item is a regular file
DirectoryIterator::isLink - Determine if current DirectoryIterator item is a symbolic link

DirectoryIterator::isReadable - Determine if current DirectoryIterator item can be read
DirectoryIterator::isWritable - Determine if current DirectoryIterator item can be written up
DirectoryIterator::key - Return the key for the current DirectoryIterator item
DirectoryIterator::next - Move forward to next DirectoryIterator item
DirectoryIterator::rewind - Rewind the DirectoryIterator back to the start

DirectoryIterator::seek - Seek to a DirectoryIterator item
DirectoryIterator::__toString - Get file name as a string
DirectoryIterator::valid - Check whether current DirectoryIterator position is a valid file

Shows us all files and catalogues in directory except "." and "..".

<?php

foreach (new DirectoryIterator('../moodle') as $fileInfo) {
	if($fileInfo->isDot()) continue;
	echo $fileInfo->getFilename() . "<br>\n";
}

?>

Beware of the behavior when using FilesystemIterator::UNIX_PATHS, it is not applied as 
you might expect.

I guess this flag is added especially for use on windows.
However, the path you construct the RecursiveDirectoryIterator or FilesystemIterator which
will not be available as a unix path.

I cannot say that htis is a bug, since most methods are just purely inherited from DirectoryIterator.

In my test, i would expect a complete unix path. Unfortunately, not quite as expected:

<?php
	// say $folder = C:\projects\lang

	$flags = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO |
FilesystemIterator::SKIP_DOTS | FilesystemIterator::UNIX_PATHS;
	$d_iterator = new RecursiveDirectoryIterator($folder, $flags);

	echo $d_iterator->getPath();
?>

Expected result: /projects/lang (or C:/projects/lang)
actual result: C:\projects\lang

DirectoryIterator::getBasename() has been also been available since 5.2.2, according to the 
changelog (not documented yet). It takes a parameter $suffix, and is useful if, for instance,
you use a naming convention for your files (e.g. ClassName.php).

The following code uses this to add recursively All*Tests.php in any subdirectory off of tests/,
basically, suites of suites.

<?php
//PHPUnit boilerplate code goes here

class AllTests {
	public static function main() {
		$parameters = array('verbose' => true);
		PHPUnit_TextUI_TestRunner::run(self::suite(), $parameters);
	}

	public static function suite() {
		$suite = new PHPUnit_Framework_TestSuite('AllMyTests'); //This must be something different than the class
name, per PHPUnit
		$it = new AllTestsFilterIterator(
					new RecursiveIteratorIterator(
						new RecursiveDirectoryIterator(dirname(__FILE__) . '/tests')));

		for ($it->rewind(); $it->valid(); $it->next()) {
			require_once($it->current());
			$className = $it->current()->getBasename('.php');
			$suite->addTest($className::suite());
		}

		return $suite;
	}
}
?>

Also, the AllTestsFilterIterator above extends FilterIterator, and contains one method, accept():

<?php
class AllTestsFilterIterator extends FilterIterator {
	public function accept() {
		if (preg_match('/All.*Tests\.php/', $this->current())) {
			return true;
		} else {
			return false;
		}
	}
}
?>

DirectoryIterator::__construct:

DirectoryIterator::__construct - Constructs a new directory iterator from a path

Desc:

public DirectoryIterator::__construct ( string $path )

Constructs a new directory iterator from a path.

Params:

path: The path of the directory to traverse.

Errors/Exceptions:

Throws an UnexpectedValueException if the path cannot be opened.

Throws a RuntimeException if the path is an empty string.

Changelog:

Version 		Desc

5.3.0 			Throws UnexpectedValueException if the path cannot be opened.

5.1.3 			Throws RuntimeException if the path is empty string.

5.1.0 			Throws RuntimeException on error. Previously, threw Exception.

Examples:

Example #1 A DirectoryIterator::__construct() example

This example will list the contents of the directory containing the script

<?php
$dir = new DirectoryIterator(dirname(__FILE__));
foreach ($dir as $fileinfo) {
	if (!$fileinfo->isDot()) {
		var_dump($fileinfo->getFilename());
	}
}
?>

Here is an all-in-one DirectoryIterator:

<?php

/**
* Real Recursive Directory Iterator
*/
class RRDI extends RecursiveIteratorIterator {
	/**
	 * Creates Real Recursive Directory Iterator
	 * @param string $path
	 * @param int $flags
	 * @return DirectoryIterator
	 */
	public function __construct($path, $flags = 0) {
		parent::__construct(new RecursiveDirectoryIterator($path, $flags));
	}
}

/**
 * Real RecursiveDirectoryIterator Filtered Class
 * Returns only those items which filenames match given regex
 */
class AdvancedDirectoryIterator extends FilterIterator {
	/**
	 * Regex Storage
	 * @var string
	 */
	private $regex;

	/**
	 * Creates new AdvancedDirectoryIterator
	 * @param string $path, prefix with '-R ' for recursive, postfix with /[wildcards] for matching
	 * @param int $flags
	 * @return DirectoryIterator
	 */
	public function __construct($path, $flags = 0) {
		if (strpos($path, '-R') === 0) { $recursive = true; $path = substr($path, 3); }
		if (preg_match('~/?([^/]*\*[^/]*)$~', $path, $matches)) { //matched wildcards in filename
			$path = substr($path, 0, -strlen($matches[1]) -1); // strip wildcards part from path
			$this->regex = '~^' . str_replace('*', '.*', str_replace('.', '\.', $matches[1])) . '$~'; //convert wildcards
to regex
			if (!$path) $path = '.'; // if not path is given, we assume CWD
		}
		parent::__construct($recursive ? new RRDI($path, $flags) : new DirectoryIterator($path));
	}

	/**
	 * Checks for regex in current filename, or matches all if no regex specified
	 * @return bool
	 */
	public function accept() { // FilterIterator method
		return $this->regex === null ? true : preg_match($this->regex, $this->getInnerIterator()->getFilename());
	}
}

?>

Some examples:

<?php

/* @var $i DirectoryIterator */

foreach (new AdvancedDirectoryIterator('.') as $i) echo $->getPathname() . '<br/>';
// will output all files and directories in CWD

foreach (new AdvancedDirectoryIterator('-R *.php') as $i) echo $i->getPathname() . '<br/>';
// will output all php files in CWD and all subdirs

foreach (new AdvancedDirectoryIterator('-R js/jquery-*.js') as $i) echo $i->getPathname() . '<br/>';
// will output all jQuery versions in dir js, or throw an exception if dir js does not exist

?>

Do not store DirectoryIterator objects for later; you will get an error saying "too many open files"
when you store more than the OS limit (usually 256 or 1024)

For example, this will yield an error if the dir has too many files:

<?php
$files = array();
foreach (new DirectoryIterator('myDir') as $file) {
	$files[] = $file;
}
?>

Presumably, it is memory intense as well.

I needed to match in directory tree file name(s) by regex. Code is based on DirectoryTreeIterator
and on examples given in one of his lectures.

<?php
class KeyFilter extends FilterIterator
{
	private $_rx;

	function __construct(Iterator $it, $regex)
	{
		parent::__construct($it);
		$this->_rx = $regex;
	}

	function accept()
	{
		return ereg($this->_rx,$this->getInnerIterator()->key());
	}

	protected function __clone() {
		return false;
	}
}

class DirMach extends KeyFilter
{
	function __construct($path , $regex)
	{
		parent::__construct(
		new DirectoryTreeIterator($path), $regex));
	}

	function current()
	{
		return parent::key();
	}

	function key()
	{
		return parent::key();
	}
}

class DirectoryTreeIterator extends RecursiveIteratorIterator
{
	/** Construct from a path
	 * @param $path directory to iterate
	 */
	function __construct($path)
	{
		try {
			parent::__construct(
				new RecursiveCachingIterator(
					new RecursiveDirectoryIterator($path, RecursiveDirectoryIterator::KEY_AS_FILENAME
					),
					CachingIterator::CALL_TOSTRING|CachingIterator::CATCH_GET_CHILD
				),
				parent::SELF_FIRST
			);
		} catch(Exception $e) {
			echo $e->getMessage();
			exit;
		}
	}

	/** @return the current element prefixed with ASCII graphics
	*/
	function current()
	{
		if($this->hasChildren())
			$this->next();
		return $this->key();
	}

	/** Aggregates the inner iterator */
	function __call($func, $params)
	{
		return call_user_func_array(array($this->getSubIterator(), $func), $params);
	}
}
$PathToSearch = 'path_to_search';
$regex = 'regular_expression';
$FileList = new DirMach($PathToSearch, $regex);
foreach ($FileList as $file) {
	$match[] = $file;
}
echo '<pre>';
var_dump($match);
echo '</pre>';
?>

The use of this class is rather simple

<?php
$dataDir = dirname(__FILE__).'/world_vest_base/';

try
{
	$dir = new DirectoryIterator($dataDir);

	foreach ($dir as $file)
	{
		$fileName = $file->getFilename();
	}
}
catch (Exception $ex)
{
}

?>

If $dataDir is null, a Runtime Exception will throw a message like this: Directory name must not be empty.

If $dataDir does not exist, that message will look like this: failed to open dir: No such file or dir.

Please be careful in case you are looking for filenames in that dir because DirectoryIterator will
return a very special symbolic filenames: . and .. You must do acheck to ignore them before dealing
with real file names.

$dir is a DirectoryIterator object.

In response to the comment below from udvig, the example is wrong, here is the right one:

<?php
$dir = new DirectoryIterator("/tmp");
foreach ($dir as $file) {
	if ($file->isDot()) {
		continue;
	}
	echo $file->getFilename() . "\n";
}
?>

DirectoryIterator::current:

DirectoryIterator - return the current DirectoryIterator item

Desc:

public DirectoryIterator DirectoryIterator::current()

Get the current DirectoryIterator item.

Parms: none

Returns: The current DirectoryIterator item.

Examples:

Example #1 A DirectoryIterator::current() example

This example will list the contents of the directory containing the script.

<?php
$iterator = new DirectoryIterator(__DIR__);
while($iterator->valid()) {
	$file = $iterator->current();
	echo $iterator->key() . " => " . $file->getFilename() . "\n";
	$iterator->next();
}
?>

The above example will output something akin to:

0 => .
1 => ..
2 => apple.jpg
3 => banana.jpg
4 => index.php
5 => pear.jpg

DirectoryIterator::getATime:

DirectoryIterator::getATime - Get last access time of the current DirectoryIterator item

Desc:

public int DirectoryIterator::getATime()

Get the last access time of the current DirectoryIterator item

Params: Nothing

Returns: Returns the time the file was last accessed, as a Unix timestamp.

Examples:

Example #1 A DirectoryIterator::getATime() example

Displays a list of the files in the directory of the script and their last access times.

<?php
$iterator = new DirectoryIterator(dirname(__FILE__));
foreach ($iterator as $fileinfo) {
	if ($fileinfo->isFile()) {
		echo $fileinfo->getFilename() . " " . $fileinfo->getATime() . "\n";
	}
}
?>

The above will output something similar to:

apple.jpg 1240047118
banana.jpg 1240065176
index.php 1240047208
pear.jpg 12240047979

Note that, as with filetime, the returned value is a Unix timestamp. So it can be used with the
date() function;

date ("F d Y H:i:s.", filemtime($file->getATime()));

DirectoryIterator::getBasename:

DirectoryIterator::getBasename - Get base name of current DirectoryIterator item.

Desc:

public string DirectoryIterator::getBasename ([ string $suffix ])

Get the base name of the current DirectoryIterator item.

Params:

suffix: If the base name ends in suffix, this will be cut.

Returns: The base name of the current DirectoryIterator item.

Examples:

Example #1 A DirectoryIterator::getBasename() example

This example will list the full base name and the base name with suffix .jpg remove for the
files in the directory containing the script.

<?php
$dir = new DirectoryIterator(dirname(__FILE__));
foreach ($dir as $fileinfo) {
	if ($fileinfo->isFile()) {
		echo $fileinfo->getBasename() . "\n";
		echo $fileinfo->getBasename('.jpg') . "\n";
	}
}
?>

The above will output something akin to:

apple.jpg
apple
banana
index.php
index.php
pear.jpg
pear

DirectoryIterator::getCTime:

DirectoryIterator::getCTime - Get incode change time of the current DirectoryIterator item

Desc:

public int DirectoryIterator::getCTime()

Get the inode change time for the current DirectoryIterator item

Params: Nothing

Returns: Returns the last changed time of the file, as a Unix timestamp.

Examples:

Example #1 DirectoryIterator::getCTime() example

This example displays the file name and last change time of the files in teh directory
containing the script

<?php
$iterator = new DirectoryIterator(dirname(__FILE__));
foreach ($iterator as $fileinfo) {
	if ($fileinfo->isFile()) {
		echo $fileinfo->getFilename(). " changed at " . $fileinfo->getCTime() . "\n";
	}
}
?>

The above will output something akin to:

apple.jpg changed at 1240398312
banana.jpg changed at 1238605440
index.php changed at 1240398935
pear.jpg changed at 1237423740

DirectoryIterator::getExtension:

DirectoryIterator::getExtension - gets the file extension

Desc:

public string DirectoryIterator::getExtension()

Retrieves the file extension

Params: Nothing

Returns:

Returns a string containing the file extension, or an empty string if the file has no 
extension.

Examples:

Example #1 DirectoryIterator::getExtension() example

<?php

$directory = new DirectoryIterator(__DIR__);
foreach ($directory as $fileinfo) {
	if ($fileinfo->isFile()) {
		echo $fileinfo->getExtension() . "\n";
	}
}

?>

The above example will output something similar to:

php
txt
jpg
gz

Notes:

Note: This method is only available as of PHP 5.3.6. Another way of getting the extension
is to use the pathinfo() function.

<?php
$extension = pathinfo($fileinfo->getFilename(), PATHINFO_EXTENSION);
?>

DirectoryIterator::getFilename:

DirectoryIterator::getFilename - Return file name of current DirectoryIterator item.

Desc:

public string DirectoryIterator::getFilename()

Get the file name of the current DirectoryIterator item

Params: None

Returns: Returns the file name of the current DirectoryIterator item

Examples:

Example #1 A DirectoryIterator::getFilename() example

This example will list the contents of the directory containing the script

<?php
$dir = new DirectoryIterator(dirname(__FILE__));
foreach ($dir as $fileinfo) {
	echo $fileinfo->getFilename() . "\n";
}
?>

The above outputs something akin to:

.
..
apple.jpg
banana.jpg
index.php
pear.jpg

DirectoryIterator::getGroup:

DirectoryIterator::getGroup - Get group for the current DirectoryIterator item

Desc:

public int DirectoryIterator::getGroup()

Get the group id of the file

Params: none

Returns: Group id of the current DirectoryIterator item in numerical format.

Examples:

Example #1 DirectoryIterator::getGroup() example

<?php
$iterator = new DirectoryIterator(dirname(__FILE__));
$groupid = $iterator->getGroup();
echo 'Directory belongs to group id ' . $groupid . "\n";
print_r(posix_getgrgid($groupid));
?>

The above example will output something similar to:

Directory belongs to group id 42
Array
(
	[name] 		=> toons
	[passwd] 	=> x
	[members] 	=> Array
		(
			[0] => tom
			[1] => jerry
		)
	[gid] 		=> 42
)

DirectoryIterator::getInode:

DirectoryIterator::getInode - Get inode for the current DirectoryIterator item

Desc:

public int DirectoryIterator::getInode()

Get the inode number for the current DirectoryIterator item

Params: Nothing

Returns: Returns the inode number for the file.

Examples:

Example #1 DirectoryIterator::getInode() example

This example displays the inode number for the directory containing the script.

<?php
$iterator = new DirectoryIterator(dirname(__FILE__));
echo $iterator->getInode();
?>

DirectoryIterator::getMTime:

DirectoryIterator::getMTime - Get last modification time of current DirectoryIterator item

Desc:

public int DirectoryIterator::getMTime()

Get the last modification time of the current DirectoryIterator item, as a UNIX timestamp.

Params: Nothing

Returns: The last modification time of the file, as a Unix timestamp.

Examples:

Example #1 A DirectoryIterator::getMTime() example

Displays a list of the files in the directory of the script and their last modified times

<?php
$iterator = new DirectoryIterator(dirname(__FILE__));
foreach ($iterator as $fileinfo) {
	if ($fileinfo->isFile()) {
		echo $fileinfo->getFilename(). " " . $fileinfo->getMTime() . "\n";
	}
}
?>

The above example will output something similar to:

apple.jpg 1240047118
banana.jpg 1240065176
index.php 1240047208
pear.jpg 12240047979

DirectoryIterator::getOwner:

DirectoryIterator::getOwner - get owner of current DirectoryIterator item

Desc:

public int DirectoryIterator::getOwner()

Get the owner of the current DirectoryIterator() item, in numerical format.

Params: None

Returns: The file owner of the file, in numerical format.

Examples:

Example #1 DirectoryIterator::getOwner() example

This example displays the owner of the directory which contains the script.

<?php
$iterator = new DirectoryIterator(dirname(__FILE__));
print_r(posix_getpwuid($iterator->getOwner()));
?>

the above will output something akin to:

Array
(
	[name] => tom
	[passwd] => x
	[uid] => 501
	[gid] => 42
	[gecos] => Tom Cat
	[dir] => /home/tom
	[shell] => /bin/bash
)

DirectoryIterator::getPath:

DirectoryIterator::getPath - get path of current Iterator item without filename

Desc:

public string DirectoryIterator::getPath()

Get the path to the current DirectoryIterator item.

Params: None

Returns: Returns the path to the file, omitting the file name and any trailing slash.

Examples:

Example #1 DirectoryIterator::getPath() example

<?php
$iterator = new DirectoryIterator(dirname(__FILE__));
echo $iterator->getPath();
?>

The above example will output something similar to:

/home/examples/public_html

If you wish to get a part of path you can use function like this:

<?php
/**
* Return a part of path by depth
*
* @param $path string
* @param $depth int
* @return mixed string on success, false on failure
*/
function getPartPath($path = '', $depth = 0) {
	$pathArray = array();
	$pathArray = explode(DIRECTORY_SEPARATOR, trim($path, DIRECTORY_SEPARATOR));
	if($depth < 0)
		$depth = count($pathArray)+$depth;

	if(!isset($pathArray[$depth]))
		return false;
	return $pathArray[$depth];
}
?>

Usage:

<?php
$a = "/var/www/foo/trunk/bar/tools/php/simplelocal";

var_dump(getPartPath($a, -2)); //returns php
var_dump(getPartPath($a, 0)); //returns var
var_dump(getPartPath($a, -1)); //returns simplelocal
?>

etc.

DirectoryIterator::getPathname:

DirectoryIterator::getPathname - Return path and file name of current DirectoryIterator item

Desc:

public string DirectoryIterator::getPathname()

Get the path and file name of the current file

Params: None

Returns: Returns the path and file name of current file. Directories do not have a trailing slash.

Examples:

Example #1 DirectoryIterator::getPathname() example

<?php
$iterator = new DirectoryIterator(dirname(__FILE__));
foreach ($iterator as $fileinfo) {
	echo $fileinfo->getPathname() . "\n";
}
?>

The above will output something akin to:

/home/examples/.
/home/examples/..
/home/examples/apple.jpg
/home/examples/banana.jpg
/home/examples/getpathname.php
/home/examples/pear.jpg

DirectoryIterator::getPerms:

DirectoryIterator::getPerms - get the permissions of current DirectoryIterator item

Desc:

public int DirectoryIterator::getPerms()

Get the permissions of the current DirectoryIterator item.

Params: None

Returns: Returns the permissions of the file, as a decimal integer.

Examples:

Example #1 DirectoryIterator::getPerms() example

<?php
$iterator = new DirectoryIterator(dirname(__FILE__));
foreach ($iterator as $fileinfo) {
	if (!$fileinfo->isDot()) {
		$octal_perms = substr(sprintf('%o', $fileinfo->getPerms()), -4);
		echo $fileinfo->getFilename() . " " . $octal_perms . "\n";
	}
}
?>

The above example will output something similar to:

apple.jpg 0644
banana.jpg 0644
index.php 0744
pear.jpg 0644

DirectoryIterator::getSize:

DirectoryIterator::getSize - Get size of current DirectoryIterator item

Desc:

public int DirectoryIterator::getSize()

Get the file size for the current DirectoryIterator item.

Params: Nothing

Returns: Returns the size of the file, in bytes.

Examples:

Example #1 DirectoryIterator::getSize() example

<?php
$iterator = new DirectoryIterator(dirname(__FILE__));
foreach ($iterator as $fileinfo) {
	if ($fileinfo->isFile()) {
		echo $fileinfo->getFilename() . " " . $fileinfo->getSize() . "\n";
	}
}
?>

The above will output something similar to:

apple.jpg 15385
banana.jpg 15190
example.php 170
pear.jpg 34406

DirectoryIterator::getType:

DirectoryIterator::getType - determine the type of the current DirectoryIterator item

Desc:

public string DirectoryIterator::getType()

Determines which file type the current DirectoryIterator item belongs to. One of file,
link, or dir.

Params: Nothing

Returns: Returns a string representing the type of the file. May be one of file, link, or dir.

Examples:

Example #1 DirectoryIterator::getType() example

<?php
$iterator = new DirectoryIterator(dirname(__FILE__));
foreach ($iterator as $fileinfo) {
	echo $fileinfo->getFilename() . " " . $fileinfo->getType() . "\n";
}
?>

The above example will output something similar to:

. dir
.. dir
apple.jpg file
banana.jpg file
example.php file
pear.jpg file

Note that this function returns the file type (e.g. "file", "dir", etc.) and not the MIME type.
To do that, you might want to use this:

<?php
for
(
	$dir = new DirectoryIterator('/some/directory');
	$dir->valid();
	$dir->next();
)
{
	$mime = mime_content_type($dir->getPathname());
}
?>

DirectoryIterator::isDir:

DirectoryIterator::isDir - Determine if current DirectoryIterator item as a dir

Desc:

public bool DirectoryIterator::isDir()

Determines if the current DirectoryIterator item is a directory

Params: None

Returns: True if it is a dir, otherwise FALSE

Examples:

Example #1 DirectoryIterator::isDir() example

This example lists the directories within the directory of the current script

<?php
$iterator = new DirectoryIterator(dirname(__FILE__));
foreach ($iterator as $fileinfo) {
	if ($fileinfo->isDir()) {
		echo $fileinfo->getFilename() . "\n";
	}
}
?>

The above outputs:

.
..
apples
bannas
pears

DirectoryIterator::isDot:

DirectoryIterator::isDot - Determine if current DirectoryIterator item is '.' or '..'

Desc:

public bool DirectoryIterator::isDot()

Determines if the current DirectoryIterator item is a dir and either . or ..

Params: Nothing

Returns: TRUE if the entry is . or .., otherwise false

Examples:

Example #1 A DirectoryIterator::isDot() example

This example will list all files, omitting the . and .. entries

<?php
$iterator = new DirectoryIterator(dirname(__FILE__));
foreach ($iterator as $fileinfo) {
	if (!$fileinfo->isDot()) {
		echo $fileinfo->getFilename() . "\n";
	}
}
?>

The above will output something akin to:

apple.jpg
banana.jpg
example.php
pears.jpg

DirectoryIterator::isExecutable:

DirectoryIterator::isExecutable - Determine if current DirectoryIterator item is executable

Desc:

public bool DirectoryIterator::isExecutable()

Determines if the current DirectoryIterator item is executable

Params: Nothing

Returns: Returns TRUE if the entry is executable, otherwise FALSE

Examples:

Example #1 DirectoryIterator::isExecutable() example

This example lists files in the directory containing the script which are executable

<?php
$iterator = new DirectoryIterator(dirname(__FILE__));
foreach ($iterator as $fileinfo) {
	if ($fileinfo->isExecutable()) {
		echo $fileinfo->getFilename() . "\n";
	}
}
?>

The above outputs something akin to:

example.php
myscript.sh

DirectoryIterator::isFile:

DirectoryIterator::isFile - Determine if current DirectoryIterator item is a regular file

Desc:

public bool DirectoryIterator::isFile()

Determines if the current DirectoryIterator item is a regular file

Params: Nothing

Returns: Returns TRUE if the file exists and is a regular file (not a link or dir), otherwise FALSE

Examples:

Example #1 DirectoryIterator::isFile() example

This example will list all regular files in the directory containing the script.

<?php
$iterator = new DirectoryIterator(dirname(__FILE__));
foreach ($iterator as $fileinfo) {
	if ($fileinfo->isFile()) {
		echo $fileinfo->getFilename() . "\n";
	}
}
?>

The above example will output something similar to:

apple.jpg
banana.jpg
example.php
pears.jpg

To actually sort a directoryiterator you need to subclass the iterator and use a comparator function
similar to this one

<?php
function cmpSPLFileInfo( $splFileInfo1, $splFileInfo2 )
{
	return strcmp( $splFileInfo1->getFileName(), $splFileInfo2->getFileName() );
}

class DirList extends RecursiveDirectoryIterator
{
	private $dirArray;

	public function __construct ( $p )
	{
		parent::__construct( $p );
		$this->dirArray = new ArrayObject();
		foreach( $this as $item )
		{
			$this->dirArray->append( $item );
		}
		$this->dirArray->uasort( "cmpSPLFileInfo" );
	}

	public function getIterator()
	{
		return $this->dirArray->getIterator();
	}
}
?>

Shows all .jpg files in the current dir but how does the DirectoryIterator sort the output?

$dir=new DirectoryIterator("./");
foreach ($dir as $file) {
	if ($dir->isDot()) {continue;} //removes . and ..
		if (strripos($file, ".jpg")==true) {
			echo $file . "<br>\n";
		}
}

I put in an example in __autoload, but it is useful here, too.

Yet another class/interface __autoload function. Includes an example usage of the SPL DirectoryIterator
class, a settable case-ignore flag, and support for multiple file name patterns to allow easy integration
from multiple sources.

<?php
/**
* __autoload
*
* @author Ken Comer
* @copyright released into public domain 2005 Ken Comer
*/

define('IGNORE_CASE', true);
// comment out the define() of IGNORE_CASE to be
// case-sensitive. I like to ignore case so that i
// can use UPPERCASE for the test versions of the file.

/**
* autoloads classes and interfaces for PHP5
*
* @author Ken Comer
*/

function __autoload($class_name) {
	
	//This will be set the first time through.
	// Put your default values in the place indicated
	// Below so as to eliminate possible duplicates
	// in the .ini include_path
	static $possible_path = NULL;
	// Leave this as NULL

	//List here whatever formats you use for your file names.
	// Note that, if you autoload a class, that implements a 
	// non-loaded interface, you will also need to autoload that interface
	static $permitted_formats = array(
		"&CLASS.class.inc"
		,"&CLASS.class.inc.php5"
		,"class.&CLASS.inc"
		,"class.&CLASS.inc.php"
		,"class.&CLASS.inc.php5"
		,"&CLASS.interface.inc"
		,"&CLASS.interface.inc.php"
		,"&CLASS.interface.inc.php5"
		,"i&CLASS.interface.inc"
		,"i&CLASS.interface.inc.php"
		,"i&CLASS.interface.inc.php5"
	);

	// Put the &CLASS wherever the $class_name
	// might appear

	// Only executed the first time __autoload is called
	if (NULL === $possible_path):
		//These are the default paths for this application
		$possible_path = array_flip(array(
			"."
			,".."
			,"../include"
			,"/public_html/php/include"
		));

		// Customize this yourself, but leave the 
		// 		array_flip alone. We will use this
		// 		to get rid of duplicate entires from
		// 		the include_path .ini list.

		// Merge the flipped arrays to get rid of duplicate
		// "keys" (which are really the valid include paths)
		// then strip out the keys leaving only uniques. 
		// This is marginally faster than using array_combine
		// and array_unique and much more elegant. 
		$possible_path = array_keys(array_merge($possible_path,
				array_flip(explode(ini_get("include_path"), ";"))));
endif; // static $possible_path init

$possibility = str_replace("&CLASS",$class_name,$permitted_formats);

foreach ( $possible_path as $directory) {
	if (!file_exists($directory) or !is_dir($directory))
	{
		continue;
	}
	$file_to_check = new DirectoryIterator($directory);

	foreach ($file_to_check as $file) {
		//ignore directories and files that do not contain 
		// $class_name
		if (!$file->isDir()
			and ( defined(IGNORE_CASE) && TRUE === IGNORE_CASE)
				? stripos($file->getFileName(), $class_name)
				: strpos($file->getFileName(),$class_name)) :

		// class_name was included, now compare against all permitted file name patterns
		foreach ($possibility as $compare):
			if ((defined(IGNORE_CASE) && TRUE == IGNORE_CASE )
				? !strcasecmp($compare,$file->getFileName())
				: $compare === $file->getFileName()
			) {
				// by using $compare , you will get a qualified file name
				include_once($compare);
				return TRUE;
			}
		endforeach; //Possibility

	endif;
		
	} //foreach $file_to_check
}
?>

Usage:

<?php
//open current directory
$dir = new DirectoryIterator(".");
// use do .. while since we need to iterate at least once
// and the first two items are always "." and ".."
do {
	// if it is not "." or ".."
	if (!$dir->isDot()) {
		//echo out pathname and "/" if it is a dir
		echo $dir->getPathname() . ($dir->isDir() ? "/" : "");
	}
} while($dir->next())
?>

Outputs something akin to:
/path/file1
/path/dir1/
/path/file2
/path/file3
/path/dir2/

---
note from the extension author

Try this:

<?php
foreach(new DirectoryIterator(".") as $file)
{
	if(!$file->isDot()) {
		echo $file->getPathname() . ($file->isDir() ? "/" : "");
	}
}
?>

DirectoryIterator::isLink:

DirectoryIterator::isLink - Determine if current DirectoryIterator item is a symbolic link

Desc:

public bool DirectoryIterator::isLink()

Determines if the current DirectoryIterator item is a symbolic link.

Params: None

Returns: TRUE if symbolic link, FALSE otherwise

Examples:

Example #1 A DirectoryIterator::isLink() example

This example contains a recursive function for removing a directory tree

<?php
/**
 * This function will recursively delete all files in the given path without following symlinks
 *
 * @param string $path Path to the directory to remove
 */
function removeDir($path) {
	$dir = new DirectoryIterator($path);
	foreach ($dir as $fileinfo) {
		if ($fileinfo->isFile() || $fileinfo->isLink()) {
			unlink($fileinfo->getPathName());
		} elseif (!$fileinfo->isDot() && $fileinfo->isDir()) {
			removeDir($fileinfo->getPathName());
		}
	}
	rmdir($path);
}

removeDir('foo');
?>

DirectoryIterator::isReadable:

DirectoryIterator::isReadable - determine if current DirectoryIterator item can be read

Desc:

public bool DirectoryIterator::isReadable()

Determines if the current DirectoryIterator item is readable.

Params: None

Returns: Returns TRUE if the file is readable, otherwise FALSE.

Examples:

Example #1 DirectoryIterator::isReadable() example

<?php
$iterator = new DirectoryIterator(dirname(__FILE__));
foreach ($iterator as $fileinfo) {
	if ($fileinfo->isReadable()) {
		echo $fileinfo->getFilename(). "\n";
	}
}
?>

The above outputs something akin to:

apple.jpg
banana.jpg
example.php
pears.jpg

DirectoryIterator::isWritable:

DirectoryIterator::isWritable - Determine if current DirectoryIterator item can be written to

Desc:

public bool DirectoryIterator::isWritable()

Determines if current DirectoryIterator item is writable

Params: None

Returns: TRUE if the file/dir is writable, otherwise FALSE

Examples:

Example #1 DirectoryIterator::isWritable() example

This example lists the files and directories which can be opened for writing in the dir containing
the script.

<?php
$iterator = new DirectoryIterator(dirname(__FILE__));
foreach ($iterator as $fileinfo) {
	if ($fileinfo->isWritable()) {
		echo $fileinfo->getFilename() . "\n";
	}
}
?>

The above outputs something akin to:

apples.txt
bananas.html
pears

DirectoryIterator::key:

DirectoryIterator::key - Return the key for the current DirectoryIterator item

Desc:

public string DirectoryIterator::key()

Get the key for the current DirectoryIterator item

Params: None

Returns: The key for the current DirectoryIterator item

Examples:

Example #1 A DirectoryIterator::key() example

<?php
$dir = new DirectoryIterator(dirname(__FILE__));
foreach ($dir as $fileinfo) {
	if (!$fileinfo->isDot()) {
		echo $fileinfo->key() . " => " . $fileinfo->getFilename() . "\n";
	}
}
?>

The above outputs something akin to:

0 => apple.jpg
1 => banana.jpg
2 => index.php
3 => pear.jpg

DirectoryIterator::next:

DirectoryIterator::next - Move forward to next DirectoryIterator item

Desc:

public void DirectoryIterator::next()

Move forwards to the next DirectoryIterator item

Params: None

Returns: Nothing

Examples:

Example #1 DirectoryIterator::next() example

List the contents of a dir using a while loop

<?php
$iterator = new DirectoryIterator(dirname(__FILE__));
while($iterator->valid()) {
	echo $iterator->getFilename() . "\n";
	$iterator->next();
}
?>

The above will output something akin to:

.
..
apple.jpg
banana.jpg
index.php
pear.jpg

DirectoryIterator::rewind:

DirectoryIterator::rewind - Rewind the DirectoryIterator back to the start

Desc:

public void DirectoryIterator::rewind()

Rewind the DirectoryIterator back to the start.

Params: None

Returns: Nothing

Examples:

Example #1 DirectoryIterator::rewind() example

<?php
$iterator = new DirectoryIterator(dirname(__FILE__));

$iterator->next();
echo $iterator->key(); //1

$iterator->rewind(); //rewind to the beginning
echo $iterator->key(); //0
?>

DirectoryIterator::seek:

DirectoryIterator::seek - Seek to a DirectoryIterator item

Desc:

public void DirectoryIterator::seek ( int $position )

Seek to a given position in the DirectoryIterator

Params:

position: The zero-based numeric pos to seek to

Returns: Nothing

Examples:

Example #1 DirectoryIterator::seek() example

Seek to the fourth item in the directory containing the script. The first two are usually . and ..

<?php
$iterator = new DirectoryIterator(dirname(__FILE__));
$iterator->seek(3);
if ($iterator->valid()) {
	echo $iterator->getFilename();
} else {
	echo 'No file at position 3';
}
?>

DirectoryIterator::__toString:

DirectoryIterator::__toString - Get file name as a string

Desc:

public string DirectoryIterator::__toString()

Get the file name of the current DirectoryIterator item

Params: none

Returns: Returns the file name of the current DirectoryIterator item

Examples:

Example #1 A DirectoryIterator::__toString() example

This example will list the contents of the directory containing the script

<?php
$dir = new DirectoryIterator(dirname(__FILE__));
foreach ($dir as $fileinfo) {
	echo $fileinfo;
}
?>

The above example will output something similar to:

.
..
apple.jpg
banana.jpg
index.php
pear.jpg

DirectoryIterator::valid:

DirectoryIterator::valid - Check whether current DirectoryIterator position is a valid file

Desc:

public bool DirectoryIterator::valid()

Check whether current DirectoryIterator position is a valid file.

Params: None

Returns: TRUE if pos is valid, otherwise FALSE.

Examples:

Example #1 A DirectoryIterator::valid() example

<?php
$iterator = new DirectoryIterator(dirname(__FILE__));

// Loop to end of iterator
while($iterator->valid()) {
	$iterator->next();
}

$iterator->valid(); //FALSE
$iterator->rewind();
$iterator->valid(); // TRUE

?>

The EmptyIterator class

Introduction:

The EmptyIterator class for an empty iterator.

Class synopsis:

EmptyIterator implements Iterator {
	//Methods
	public mixed current()
	public scalar key()
	public void next()
	public void rewind()
	public bool valid()
}

Table of Contents:

EmptyIterator::current - The current() method
EmptyIterator::key - The key() method
EmptyIterator::next - The next() method
EmptyIterator::rewind - The rewind() method
EmptyIterator::valid - The valid() method

Example use case:

<?php
class MyIterator implements IteratorAggregate
{
	/**
	 * @var string
	 */
	private $url;

	/**
	 * MyIterator constructor.
	 * @param $url
	 */
	public function __construct($url)
	{
		$this->url = $url;
	}

	/**
	 * @inheritDoc
	 */
	public function getIterator()
	{
		$content = file_get_contents($this->url);
		try {
			return @new SimpleXMLIterator($content);
		} catch (Exception $e) { //Case $content is not a valid XML, but you do not case
			return new EmptyIterator();
		}
	}
}
?>

EmptyIterator::current:

EmptyIterator::current - The current() method

Desc:

public mixed EmptyIterator::current()

This function must not be called. it throws an exception upon access.

Warning: This function is currently not documented; only its argument list is available.

Params: None

Errors/Exceptions: Throws an Exception if called.

Returns: Nothing

EmptyIterator::key:

EmptyIterator::key - The key() method

Desc:

public scalar EmptyIterator::key()

This functon must not be called. It throws an exception upon access.

Warning: This function is not documented, only arg list is available.

Params: None

Errors/Exceptions: Throws an exception if called

Returns: Nothing

EmptyIterator::next:

EmptyIterator::next - The next() method

Desc:

public void EmptyIterator::next()

No operation, nothing to do

Warning: This function is currently not documented, only its arglist is available

Params: None

Returns: Nothing

EmptyIterator::rewind:

EmptyIterator::rewind - The rewind() method

Desc:

public void EmptyIterator::rewind()

No operation, nothing to do.

Warning: this function is currently not documented, only arg list exists

Params: None

Returns: nothing

EmptyIterator::valid:

EmptyIterator::valid - The valid() method

desc:

public bool EmptyIterator::valid()

The EmptyIterator valid() method

Warning: This function is currently not documented, only arg list exists

Params: Has none

Returns: FALSE

The FilesystemIterator class:

Introduction:

The Filesystem iterator

Class synopsis:

FilesystemIterator extends DirectoryIterator implements SeekableIterator {
	//Constants
	const integer CURRENT_AS_PATHNAME = 32;
	const integer CURRENT_AS_FILEINFO = 0;
	const integer CURRENT_AS_SELF = 16;
	const integer CURRENT_MODE_MASK = 240;
	const integer KEY_AS_PATHNAME = 0;

	const integer KEY_AS_FILENAME = 256;
	const integer FOLLOW_SYMLINKS = 512;
	const integer KEY_MODE_MASK = 3840;
	const integer NEW_CURRENT_AND_KEY = 256;

	const integer SKIP_DOTS = 4096;
	const integer UNIX_PATHS = 8192;

	//Methods
	public __construct( string $path [, int $flags = FilesystemIterator::KEY_AS_PATHNAME |
	FilesystemIterator::CURRENT_AS_FILEINFO | FilesystemIterator::SKIP_DOTS ])
	public mixed current()
	public int getFlags()
	public string key()

	public void next()
	public void rewind()
	public void setFlags ([ int $flags ])

	//INherited methods
	public DirectoryIterator DirectoryIterator::current()
	public int DirectoryIterator::getATime()
	public string DirectoryIterator::getBasename ([ string $suffix ])

	public int DirectoryIterator::getCTime()
	public string DirectoryIterator::getExtension()
	public string DirectoryIterator::getFilename()
	public int DirectoryIterator::getGroup()

	public int DirectoryIterator::getInode()
	public int DirectoryIterator::getMTime()
	public int DirectoryIterator::getOwner()
	public string DirectoryIterator::getPath()

	public string DirectoryIterator::getPathname()
	public int DirectoryIterator::getPerms()
	public int DirectoryIterator::getSize()
	public string DirectoryIterator::getType()

	public bool DirectoryIterator::isDir()
	public bool DirectoryIterator::isDot()
	public bool DirectoryIterator::isExecutable()
	public bool DirectoryIterator::isFile()

	public bool DirectoryIterator::isLink()
	public bool DirectoryIterator::isReadable()
	public bool DirectoryIterator::isWritable()
	public string DirectoryIterator::key()
	public void DirectoryIterator::next()

	public void DirectoryIterator::rewind()
	public void DirectoryIterator::seek( int $position )
	public string DirectoryIterator::__toString()
	public bool DirectoryIterator::valid()
}

Predefined Constants:

FilesystemIterator::CURRENT_AS_PATHNAME:
	Makes FilesystemIterator::current() return the pathname

FilesystemIterator::CURRENT_AS_FILEINFO:
	Makes FilesystemIterator::current() return an SplFileInfo instance..

FilesystemIterator::CURRENT_AS_SELF:
	Makes FilesystemIterator::current() return $this (the FilesystemIterator)

FilesystemIterator::CURRENT_NODE_MASK:
	Masks FilesystemIterator::current()

FilesystemIterator::KEY_AS_PATHNAME:
	Makes FilesystemIterator::key() return the pathname

FilesystemIterator::KEY_AS_FILENAME:
	Makes FilesystemIterator::key() return the filename

FilesystemIterator::FOLLOW_SYMLINKS:
	Makes RecursiveDirectoryIterator::hasChildren() follow symlinks

FilesystemIterator::KEY_MODE_MASK:
	Masks FilesystemIterator::key()

FilesystemIterator::NEW_CURRENT_AND_KEY:
	Same as FilesystemIterator::KEY_AS_FILENAME | FilesystemIterator::CURRENT_AS_FILEINFO.

FilesystemIterator::SKIP_DOTS:
	Skip dot files (. and ..)

FilesystemIterator::UNIX_PATHS:
	Makes paths use Unix-style forward slash irrespective of system default. Note that the path that is
	passed to the constructor is not modified

Changelog

Version 		Desc

5.3.1 			Added FilesystemIterator::FOLLOW_SYMLINKS

Table of Contents:

FilesystemIterator::__construct - Constructs a new filesystem iterator
FilesystemIterator::current - The current file
FilesystemIterator::getFlags - Get the handling flags
FilesystemIterator::key - Retrieve the key for the current file

FilesystemIterator::next - Move to the next file
FilesystemIterator::rewind - Rewinds back to the beginning
FilesystemIterator::setFlags - Sets handling flags

You may be wondering, like i did, what is the difference between this class and DirectoryIterator?

When you iterate using DirectoryIterator each "value" returned is the same DirectoryIterator object.
The internal state is changed so when you call isDir(), getPathname(), etc the correct information
is returned. If you were to ask for a key when iterating you will get an integer index value.

FilesystemIterator (and RecursiveDirectoryIterator) on the other hand returns a new, different SplFileInfo
object for each iteration step. The key is the full pathname of the file. This is by default. You can change
what is returned for the key or value using the "flags" arg to the constructor

DirectoryIterator returns virtual directories "." and ".." in a loop.
But FilesystemIterator ignores them.

FilesystemIterator::__construct:

FilesystemIterator::__construct - Constructs a new filesystem iterator

Desc:

public FilesystemIterator::__construct ( string $path [, int $flags = FilesystemIterator::KEY_AS_PATHNAME |
FilesystemIterator::CURRENT_AS_FILEINFO | FilesystemIterator::SKIP_DOTS])

Constructs a new filesystem iterator from the path

Params:

path: The path of the filesystem item to be iterated over

flags: Flags may be provided which will affect the behavior of some methods. A list of the flags
can be found under FilesystemIterator predefined constants. They can also be set later with
FilesystemIterator::setFlags()

Returns: Nothing

Errors/Exceptions: Throws an UnexpectedValueException if the path cannot be found.

Examples:

Example #1 FilesystemIterator::__construct() example

<?php
$it = new FilesystemIterator(dirname(__FILE__));
foreach ($it as $fileinfo) {
	echo $fileinfo->getFilename() . "\n";
}
?>

The above will output:

apples.jpg
banana.jpg
example.php

FilesystemIterator::current:

FilesystemIterator::current - The current file

Desc:

public mixed FilesystemIterator::current()

Get file information of the current element

Parms: None

Returns: The filename, file info, or $this depending on the set flags. See the FilesystemIterator constants.

Examples:

Example #1 FilesystemIterator::current() example

This example will list the contents of the directory containing the script

<?php
$iterator = new FilesystemIterator(__DIR__, FilesystemIterator::CURRENT_AS_PATHNAME);
foreach ($iterator as $fileinfo) {
	echo $iterator->current() . "\n";
}
?>

The above example will output something akin to:

/www/examples/apple.jpg
/www/examples/banana.jpg
/www/examples/example.php

FilesystemIterator::getFlags:

FilesystemIterator::getFlags - Get the handling flags

Desc:

public int FilesystemIterator::getFlags()

Get the handling flags, as set in FilesystemIterator::__construct() or FilesystemIterator::setFlags()

Params: Nothing

Returns: The integer value of the set flags.

FilesystemIterator::key:

FilesystemIterator::key - Retrieve the key for the current file

Desc:

public string FilesystemIterator::key()

Params: None

Return: Returns the pathname or filename depending on the set flags. See the FilesystemIterator constants.

Examples:

Example #1 FilesystemIterator::key() example

This example will list the contents of the dir containing the script

<?php
$iterator = new FilesystemIterator(dirname(__FILE__), FilesystemIterator::KEY_AS_FILENAME);
foreach ($iterator as $fileinfo) {
	echo $iterator->key() . "\n";
}
?>

The above example will output something similar to:

apple.jpg
banana.jpg
example.php

FilesystemIterator::next:

FilesystemIterator::next - Move to the next file

Desc:

public void FilesystemIterator::next()

Move to the next file

Params: Nothing

Returns: Nothing

Examples:

Example #1 FilesystemIterator::next() example

List the contents of a directory using a while loop

<?php
$iterator = new FilesystemIterator(dirname(__FILE__));
while($iterator->valid()) {
	echo $iterator->getFilename() . "\n";
	$iterator->next();
}
?>

The above example will output something akin to:

apple.jpg
banana.jpg
example.php

FilesystemIterator::rewind:

FilesystemIterator::rewind - Rewinds back to the beginning

Desc:

public void FilesystemIterator::rewind()

Rewinds the directory back to the start

Params: None

Returns: Nothing

Examples:

Example #1 FilesystemIterator::rewind() example

<?php
$iterator = new FilesystemIterator(dirname(__FILE__), FilesystemIterator::KEY_AS_FILENAME);

echo $iterator->key() . "\n";

$iterator->next();
echo $iterator->key() . "\n";

$iterator->rewind();
echo $iterator->key() . "\n";
?>

The above will output something akin to:

apple.jpg
banana.jpg
apple.jpg

FilesystemIterator::setFlags:

FilesystemIterator::setFlags - Sets handling flags

Desc:

public void FilesystemIterator::setFlags([ int $flags ])

Sets handling flags

Params:

flags: The handling flags to set. See the FilesystemIterator constants.

Returns: Nothing

Examples:

Example #1 FilesystemIterator::key() example

Thisexample demonstrates the difference between the FilesystemIterator::KEY_AS_PATHNAME and FilesystemIterator::KEY_AS_FILENAME
flags.

<?php
$iterator = new FilesystemIterator(dirname(__FILE__), FilesystemIterator::KEY_AS_PATHNAME);
echo "Key as Pathname:\n";
foreach ($iterator as $key => $fileinfo) {
	echo $key . "\n";
}

$iterator->setFlags(FilesystemIterator::KEY_AS_FILENAME);
echo "\nKey as Filename:\n";
foreach ($iterator as $key => $fileinfo) {
	echo $key . "\n";
}
?>

The above example will output something akin to:

Key as Pathname:
/www/examples/apple.jpg
/www/examples/banana.jpg
/www/examples/example.php

Key as Filename:
apple.jpg
banana.jpg
example.php

The FilterIterator class:

Intro:

This abstract iterator filters out unwanted values. This class should be extended to implement custom iterator
filters. The FilterIterator::accept() must be implemented in the subclass.

Class synopsis:

abstract FilterIterator extends IteratorIterator implements OuterIterator {
	//Methods
	public abstract bool accept()
	public __construct ( Iterator $iterator )
	public mixed current()
	public Iterator getInnerIterator()
	public mixed key()
	public void next()
	public void rewind()
	public bool valid()
}

Table of Contents:

FilterIterator::accept - Check whether the current element of hte iterator is acceptable
FilterIterator::__construct - Constructs a filterIterator
FilterIterator::current - Get the current element value

FilterIterator::getInnerIterator - get the inner iterator
FilterIterator::key - Get the current key
FilterIterator::next - Move the iterator forward
FilterIterator::rewind - Rewind the iterator
FilterIterator::valid - Check whether the current element is valid

The code below is a simple example of usage. Note that the method which does the actual
job is accept.

<?php
class UserFilter extends FilterIterator
{
	private $userFilter;

	public function __construct(Iterator $iterator, $filter)
	{
		parent::__construct($iterator);
		$this->userFilter = $filter;
	}

	public function accept()
	{
		$user = $this->getInnerIterator()->current();
		if( strcasecmp($user['name'],$this->userFilter) == 0) {
			return false;
		}
		return true;
	}
}

$array = array(
array('name' => 'Jonathan', 'id' => '5'),
array('name' => 'Abdul', 'id' => '22')
);

$object = new ArrayObject($array);

//Note it is case insensitive check in our example due to the usage of strcasecmp function
$iterator = new UserFilter($object->getIterator(),'abdul');

foreach ($iterator as $result) {
	echo $result['name'];
}

//Outputs Jonathan

?>

A little test about the function call order:

<?php

class TestIterator extends IteratorIterator
{
	public function key()
	{
		echo __FUNCTION__, PHP_EOL;
		return parent::key();
	}

	public function next()
	{
		echo __FUNCTION__, PHP_EOL;
		return parent::next();
	}

	public function rewind()
	{
		echo __FUNCTION__, PHP_EOL;
		return parent::rewind();
	}

	public function valid()
	{
		echo __FUNCTION__, PHP_EOL;
		return parent::valid();
	}
}

class TestFilterIterator extends FilterIterator
{
	public function accept()
	{
		echo __FUNCTION__, PHP_EOL;
		return true;
	}
}

$iterator = new ArrayIterator(array('a', 'b', 'c'));

foreach (new TestFilterIterator(new TestIterator($iterator)) as $k => $v) {
	echo PHP_EOL;
}

?>

This will output the following:

rewind
valid
key
accept

next
valid
key
accept

next
valid
key
accept

next
valid

FilterIterator::accept:

FilterIterator::accept - Check whether the current element of hte iterator is acceptable

Desc:

public abstract bool FilterIterator::accept()

Returns whether the current element of the iterator is acceptable through this filter.

params: None

Returns: TRUE if the current element is acceptable, otherwise FALSE.

Examples:

Example #1 FilterIterator::accept() example

<?php
//This iterator filters all values with less than 10 chars
class LengthFilterIterator extends FilterIterator {
	public function accept() {
		//Only accept strings with a length of 10 and greater
		return strlen(parent::current()) >= 10;
	}
}

$arrayIterator = new arrayIterator(array('test1', 'more than 10 chars'));
$lengthFilter = new LengthFilterIterator($arrayIterator);

foreach ($lengthFilter as $value) {
	echo $value . "\n";
}
?>

The above will output:

more than 10 chars

FilterIterator::__construct:

FilterIterator::__construct - Constructs a filterIterator

Desc:

public FilterIterator::__construct ( Iterator $iterator )

Constructs a new FilterIterator, which consists of a passed in iterator with filters applied to it.

Warning: This function is currently not documented, only arg list is available

Params:

iterator: The iterator that is being filtered.

Returns:

The FilterIterator

FilterIterator::current:

FilterIterator::current - Get the current element value

Desc:

public mixed FilterIterator::current()

Warning: This function has no params, only arg list exists

Get the current element value.

Params: none

Returns: The current element value

FilterIterator::getInnerIterator:

FilterIterator::getInnerIterator - get the inner iterator

Desc:

public Iterator FilterIterator::getInnerIterator()

Warning: This function is currently not documented, only arg list exists.

Get the inner iterator.

Params: None

Returns: The inner iterator

FilterIterator::key:

FilterIterator::key - Get the current key

Desc:

public mixed FilterIterator::key()

Warning: This function is currently not documented, only arg list exists

get the current key

Params: None

Returns: The current key.

FilterIterator::next:

FilterIterator::next - Move the iterator forward

Desc:

public void FilterIterator::next()

Warning: this function is currently not documented, only arglist exists

Move the iterator forward

Params: None

Returns: Nothing

FilterIterator::rewind:

FilterIterator::rewind - Rewind the iterator

Desc:

public void FilterIterator::rewind()

Warning: this function is currently not documented, only arg list exists

Rewind the iterator

Params: None

Returns: Nothing

FilterIterator::valid:

FilterIterator::valid - Check whether the current element is valid

Desc:

public bool FilterIterator::valid()

Warning: this function is currently not documented, only its arg list exists

Checks wether the current element is valid.

Params: None

Returns: TRUE if the current element is valid, FALSE otherwise.

The GlobIterator class:

Intro:

Iterates through a file system ina similar fashion to glob()

Class synopsis:

GlobIterator extends FilesystemIterator implements SeekableIterator , Countable {
	//Methods
	public __construct ( string $path [, int $flags = FilesystemIterator::KEY_AS_PATHNAME |
	FilesystemIterator::CURRENT_AS_FILEINFO ])
	public int count()

	//Inherited methods
	public FilesystemIterator::__construct ( string $path [, int $flags = FilesystemIterator::KEY_AS_PATHNAME |
	FilesystemIterator::CURRENT_AS_FILEINFO | FilesystemIterator::SKIP_DOTS ])
	public mixed FilesystemIterator::current()
	public int FilesystemIterator::getFlags()
	public string FilesystemIterator::key()

	public void FilesystemIterator::next()
	public void FilesystemIterator::rewind()
	public void FilesystemIterator::setFlags ([ int $flags ])
}

Table of Contents:

GlobIterator::__construct - Construct a dir using glob
GlobIterator::count - Get the number of dirs and files

GlobIterator::__construct:

GlobIterator::__construct - Constructs a dir using glob

Desc:

public GlobIterator::__construct ( string $path [, int $flags = FilesystemIterator::KEY_AS_PATHNAME |
FilesystemIterator::CURRENT_AS_FILEINFO])

Constructs a new directory iterator from a glob expression

Params:

path: The path of the directory

flags: Option flags, the flags may be a bitmask of the FilesystemIterator constants.

Examples:

Example #1 GlobIterator example

<?php
$iterator = new GlobIterator('*.dll', FilesystemIterator::KEY_AS_FILENAME);

if(!$iterator->count()) {
	echo 'No matches';
} else {
	$n = 0;

	printf("Matched %d item(s)\r\n", $iterator->count());

	foreach ($iterator as $item) {
		printf("[%d] %s\r\n", ++$n, $iterator->key());
	}
}
?>

The above outputs something akin to:

Matched 2 item(s)
[1] php5ts.dll
[2] php_gd2.dll

GlobIterator does not have a way to support GLOB_BRACE.

<?php
$iterator = new GlobIterator(getcwd . '/*.{php,txt}'); //generate an empty array
?>

As seen in the example above, first param in teh GlobIterator constructor is not a path
but a pattern which listed filenames should match.

GlobIterator::count:

GlobIterator::count - Get the number of dirs and files

Desc:

public int GlobIterator::count()

Gets the number of dirs and files found by the glob expression

Params: None

Returns: The number of returned dirs and files, as an integer.

Examples:

Example #1 GlobIterator::count() example

<?php
$iterator = new GlobIterator('*.xml');

printf("Matched %d item(s)\r\n", $iterator->count());
?>

The above example will output something akin to:

matched 8 item(s)

As stated here, the count() method can lead to errors.

Bug #55701 GlobIterator throws LogicException

Desc:

Basic functionality does not work because it seems as the GlobIterator
might need some changes to work with this commit:
<link>

Test script:
<?php
$g = new \GlobIterator(__DIR__ . '/*');

do {
	$g->next();
} while($g->valid());

Expected result:
Emppty output

Actual result:
PHP Fatal error: Uncaught exception 'LogicException' with message 'The parent
constructor was not called: the object is in a invalid state ' in /private/tmp/x.php:6
Stack trace:
#0 /private/tmp/x.php(6): SplFileInfo->_bad_state_ex()
#1 {main}
	thrown in /private/tmp/x.php on line 6

Fatal error: Uncaught exception 'LogicException' with message 'The parent
constructor was not called: the object is in an invalid state ' in /private/tmp/x.php:6
Stack trace:
#0 /private/tmp/x.php(6): SplFileInfo->_bad_state_ex()
#1 {main}
	thrown in /private/tmp/x.php on line 6

For example, this will not work, if no files are found in the target dir:

<?php
$iterator = new \GlobIterator($ftpDirectory . '/*.*', FilesystemIterator::KEY_AS_FILENAME);

if($iterator->count()) {
	foreach($iterator as $filePath) {
		// do some stuff
	}
}
?>

A workaround for this bug could be:

<?php
foreach(new \GlobIterator($ftpDirectory . '/*.*', FilesystemIterator::KEY_AS_FILENAME) as $filePath) {
	//Do some stuff
}
?>

The InfiniteIterator class:

Introduction:

The InfiniteIterator allows one to infinitely iterate over an iterator without having to manually
rewind the iterator upon reaching its end.

Class synopsis:

InfiniteIterator extends IteratorIterator implements OuterIterator {
	//Methods
	public __construct ( Iterator $iterator )
	public void next()

	//Inherited methods
	public IteratorIterator::__construct ( Traversable $iterator )
	public mixed IteratorIterator::current()
	public Traversable IteratorIterator::getInnerIterator()
	public scalar IteratorIterator::key()

	public void IteratorIterator::next()
	public void IteratorIterator::rewind()
	public bool IteratorIterator::valid()
}

Table of Contents:

InfiniteIterator::__construct - Constructs an InfiniteIterator
InfiniteIterator::next - Moves the inner iterator forward or rewinds it

To loop through object keys and reset to the start, try this:

<?php

$obj = new stdClass();
$obj->Mon = "Monday";
$obj->Tue = "Tuesday";
$obj->Wed = "Wednesday";

$obj->Thu = "Thursday";
$obj->Fri = "Friday";
$obj->Sat = "Saturday";
$obj->Sun = "Sunday";

$infinite = new InfiniteIterator(new ArrayIterator($obj));
foreach (new LimitIterator($infinite, 0, 14) as $value) {
	print($value . PHP_EOL);
}

?>

Monday
Tuesday
Wednesday
Thursday
Friday
Saturday
Sunday
Monday
Tuesday
Wednesday
Thursday
Friday
Saturday
Sunday

Can be useful when doing date operations or recurring events

It is important to realize that rewind() must be called on any iterator before using it or you may
experience undefined behaviour, see example code and output:

<?php
$test_array = array('Element 1', 'Element 2', 'Element 3', 'Element 4', 'Element 5', 'Element 6');
$infArray = array(1, 2, 3);
$arrayIterator = new ArrayIterator($infArray);
var_dump($arrayIterator->current());

$infiniteIterator = new InfiniteIterator(new ArrayIterator($infArray));
var_dump($infiniteIterator->current());

foreach($test_array as $test){
	echo $test . ' ' . $infiniteIterator->current() . '<br/>' . PHP_EOL;
	$infiniteIterator->next();
}

echo phpversion();

The general output is:

int(1)
NULL
Element 1 <br/>
Element 2 2<br/>
Element 3 3<br/>
Element 4 1<br/>
Element 5 2<br/>
Element 6 3<br/>
7.2.0beta1

A fuller explonation:

Bug #63823 SPL InfiniteIterator needs explicit rewind to be usable in a closure

Desc:

SPL's InfiniteIterator returns NULL for the first access, unless used in a 'foreach'
loop, or a rewind is done.

This means that an explicit rewind is needed before an InifniteIterator can be safely
be used in an app.

Test script:

<?php

$b = array('one', 'two', 'three');
$b_it = new InfiniteIterator(new ArrayIterator($b));
for ($i = 0; $i < 7; $i++) {
	var_dump($b_it->current());
	$b_it->next();
}

?>

Expected result:
string(3) "one"
string(3) "two"
string(5) "three"
string(3) "one"
string(3) "two"

string(5) "three"
string(3) "one"

Actual result:
NULL
string(3) "two"
string(5) "three"
string(3) "one"
string(3) "two"
string(5) "three"
string(3) "one"

InfiniteIterator::__construct:

InfiniteIterator::__construct - Constructs an InfiniteIterator

Desc:

public InfiniteIterator::__construct ( Iterator $iterator )

Constructs an InfiniteIterator from an Iterator

Params:

iterator: The iterator to infinitely iterate over

Returns: Nothing

Errors/Exceptions:

Throws an E_RECOVERABLE_ERROR if the iterator parameter is not an Iterator.

Examples:

Example #1 InfiniteIterator::__construct() example

<?php
$arrayit = new ArrayIterator(array('cat', 'dog'));
$infinite = new InfiniteIterator($arrayit);
$limit = new LimitIterator($infinite, 0, 7);

foreach($limit as $value)
{
	echo "$value\n";
}
?>

The above example will output:

cat
dog
cat
dog
cat
dog
cat

InfiniteIterator::next:

InfiniteIterator::next - Moves the inner Iterator forward or rewinds it

Desc:

public void InfiniteIterator::next()

Moves the inner Iterator forward to its next element if there is one, otherwise rewinds the 
inner Iterator back to the beginning

Note: Even an InfiniteIterator stops if its inner Iterator is empty

Params: None

Returns: Nothing

The IteratorIterator class:

Intro:

This iterator wrapper allows the conversion of anything that is Traversable into an Iterator.
It is important to understand that most classes that do not implement Iterators have reasons
as most likely they do not allow the full Iterator feature set. If so, techniques should be
provided to prevent misuse, otherwise expect exceptions or fatal errors.

Class synopsis:

IteratorIterator implements OuterIterator {
	//Methods
	public __construct ( Traversable $iterator )
	public mixed current()
	public Traversable getInnerIterator()
	public scalar key()
	public void next()
	public void rewind()
	public bool valid()
}

Notes:

Note: This class permits access to methods of the inner iterator via the __call magic method.

Table of Contents:

IteratorIterator::__construct - Creates an iterator from anything that is traversable
IteratorIterator::current - get the current value
IteratorIterator::getInnerIterator - get the inner iterator

IteratorIterator::key - get the key for the current element
IteratorIterator::next - Forward to the next element
IteratorIterator::rewind - Rewind to the first element 
IteratorIterator::valid - Checks if the iterator is valid

This iterator basically is only a wrapper around another iterator. It does nothing fancy,
it simply forwards any calls of rewind(), next(), valid(), current() and key() to the inner
iterator. This inner iterator can be fetched with getInnerIterator()

One special case: When passing an IteratorAggregate object, the getIterator() method of that
object will be called and THAT iterator will be iterated over, and this will also be returned
when calling getInnerIterator().

This class can be extended, so it is an ideal building block for your own classes that only
want to modify one or two of the iterator methods, but not all.

Want to trim the strings returned by the current() method?

<?php

class TrimIterator extends IteratorIterator
{
	public function current() {
		return trim(parent::current());
	}
}

$innerIterator = new ArrayIterator(array('normal', 'trimmable'));

$trim = new TrimIterator($innerIterator);

foreach ($trim as $key => $value) {
	echo "Key:\n";
	var_dump($key);
	echo "Value:\n";
	var_dump($value);
	echo "---next---";
}
?>

Output:

Key:
int(0)
Value:
string(6) "normal"
---next---Key:
int(1)
Value:
string(9) "trimmable"
---next---

Another example of the efficiency for IteratorIterator is a small class for enumerate for iterations
of an iterator implementation.

Example:

<?php

class Enumerator extends IteratorIterator
{
	/**
	 * Initial value for enumerator
	 * @param int
	 */
	protected $start = 0;

	/**
	 * @param int
	 */
	protected $key = 0;

	/**
	 * @param Traversable $iterator
	 * @param scalar $start
	 */
	public function __construct(Traversable $iterator, $start = 0)
	{
		parent::__construct($iterator);

		$this->start = $start;

		$this->key = $this->start;
	}

	public function key()
	{
		return $this->key;
	}

	public function next()
	{
		++$this->key;

		parent::next();
	}

	public function rewind()
	{
		$this->key = $this->start;

		parent::rewind();
	}
}
?>

This produces:

<?php

$enumerator = new Enumerator(
		new ArrayIterator(['php', 'java', 'python']); 7000
);

print_r(iterator_to_array($enumerator));

/*
* 		array(3) {
			   7000 => 'php',
			   7001 => 'java',
			   7002 => 'python'
		}
*/

?>

IteratorIterator::current() does not invoke the inner iterator's current() method.

The inner iterator's current() method is invoked (and cached) on rewind() and next().
The same goes for key() and valid()

Example:
<?php

$i = new ArrayIterator(range(1,10));
$i = new IteratorIterator($i);
iterator_to_array($i); //Seek to end
print "Valid: " . $i->valid(). "\n";
$i->append('test');
print "Valid: " . $i->valid() . "\n";
print "Current: " . $i->current() . "\n";

?>

Output:

Valid:
Valid:
Current:

Whereas:
<?php

$i = new ArrayIterator(range(1,10));
iterator_to_array($i); //SEek to the end
print "Valid: " . $i->valid() . "\n";

$i->append('test');
print "Valid: ". $i->valid() . "\n";
print "Current: " . $i->current() . "\n";
?>

Output:

Valid:
Valid: 1
Current: test

The reason being the way current(), key() and valid() are invoked by the IteratorIterator as mentioned above.

Little note for anyone that wants to emulate the behavior of foreach as close as possible in order to
work with somewhat picky Traversable objects, without using foreach:

- before starting the iteration, rewind() is called.
- For every iteration, the following methods are called on the iterator:
	-valid()
	-current()
	-key()
	-next()

Sounds like a silly thing to do, put it this way, but in my case i needed to convert a Traversable
DB result cursor into a procedural-style cursor (hasNext + fetchArray) for backward compability,
and the driver required every function to be called in the appropiate order.

IteratorIterator::__construct:

IteratorIterator::__construct - Create an iterator from anything that is traversable

Desc:

public IteratorIterator::__construct ( Traversable $iterator )

Creates an iterator from anything that is traversable.

Params:

iterator: The traversable iterator.

Returns: Nothing

IteratorIterator::current:

IteratorIterator::current - Get the current value

Desc:

public mixed IteratorIterator::current()

Get the value of the current element

Params: Nothing

Returns: The value of the current element

IteratorIterator::getInnerIterator:

IteratorIterator::getInnerIterator - get the inner iterator

Desc:

public Traversable IteratorIterator::getInnerIterator()

Get the inner iterator

Params: None

Returns: The inner iterator as passed to IteratorIterator::__construct()

The returned value from getInnerIterator() really is the inner iterator, not a clone.
It should be used with respect: calling next() or rewind() on it, for example, will
advance or reset the inner iterator - Althought the effect will not be noticed until
you call next() on the IteratorIterator object - it seems as if it caches its
current() and key() values (as of PHP v5.5.9).

Even if the inner iterator itself is valid (i.e. valid() returns TRUE) the IteratorIterator
won't report itself as valid until you either rewind it or call its next() method - these
two method causes the IteratorIterator to re-sync its current, key and valid states
with the inner iterator.

<?php
$ii = new IteratorIterator(new ArrayIterator(range(1,6)));
$i1 = $ii->getInnerIterator(); // gets the real thing
$i2 = $ii->getInnerIterator(); // ditto: $i2 === $i1 and the two are therefore in sync
echo $i1->current(); // 1
echo $i1->key(); // 0

var_dump($ii->valid());; // False
$i1->next(); // affects $i2, which is identical
echo $i1->key(); // 1
var_dump($ii->valid()); //STill FALSE

$ii->rewind(); // rewinds $i1 and synchs
echo $ii->key(); // 0, as is $i1->key()
$i1->next(); //advances the inner iterator, which is now out of sync

echo $ii->key(); // still 0
echo $i1->key(); // 1
$ii->next(); // advances the inner iterator and syncs with it

echo $ii->key(); // 2
echo $i1->key(); // 2
?>

IteratorIterator::key:

IteratorIterator::key - Get the key of the current element

Desc:

public scalar IteratorIterator::key()

Get the key of the current element

Params: None

Returns: The key of the current element

IteratorIterator::next:

IteratorIterator::next - Forward to the next element

Desc:

public void IteratorIterator::next()

Forward to the next element

Params: None

Returns: Nothing

IteratorIterator::rewind:

IteratorIterator::rewind - Rewind to the first element

Desc:

public void IteratorIterator::rewind()

Rewinds to the first element.

Params: Nothing

Returns: Nothing

IteratorIterator::valid:

IteratorIterator::valid - Checks if the iterator is valid

Desc:

public bool IteratorIterator::valid()

Checks if the iterator is valid.

Params: None

Returns: Returns TRUE if the iterator is valid, otherwise FALSE.

The LimitIterator class:

Intro:

The LimitIterator class allows iteration over a limited subset of items in an 
Iterator.

Class synopsis:

LimitIterator extends IteratorIterator implements OuterIterator {
	//Methods
	public __construct ( Iterator $iterator [, int $offset = 0 [, int $count = -1 ]])
	public mixed current()
	public Iterator getInnerIterator()
	public int getPosition()
	public mixed key()
	public void next()
	public void rewind()
	public int seek ( int $position )
	public bool valid()
}

Examples:

Example #1 LimitIterator usage example

<?php

//Create an iterator to be limited
$fruits = new ArrayIterator(array(
	'apple',
	'banana',
	'cherry',
	'damson',
	'elderberry'
));

//Loop over first three fruits only
foreach (new LimitIterator($fruits, 0, 3) as $fruit) {
	var_dump($fruit);
}

echo "\n";

// Loop from third fruit until the end
// Note: offset starts from zero for apple
foreach (new LimitIterator($fruits, 2) as $fruit) {
	var_dump($fruit);
}

?>

The above example will output:

string(5) "apple"
string(6) "banana"
string(6) "cherry"

string(6) "cherry"
string(6) "damson"
string(10) "elderberry"

Table of Contents:

LimitIterator::__construct - Construct a LimitIterator
LimitIterator::current - Get current element
LimitIterator::getInnerIterator - get inner iterator
LimitIterator::getPosition - return the current position

LimitIterator::key - get current key
LimitIterator::next - Move the iterator forward
LimitIterator::rewind - rewind the iterator to the specified starting offset
LimitIterator::seek - Seek to the given position
LimitIterator::valid - Check whether the current element is valid

LimitIterator::__construct:

LimitIterator::__construct - Construct a LimitIterator

Desc:

public LimitIterator::__construct ( Iterator $iterator [, int $offset = 0 [, int $count = -1 ]])

Constructs a new LimitIterator from an iterator with a given starting offset and maxium count.

Params:

iterator: The Iterator to limit

offset: Optional offset of the limit

count: Optional count of the limit

Returns: The new LimitIterator

Errors/Exceptions:

Throws an OutOfRangeException if the offset is less than 0 or the count is less than -1.

Examples:

Example #1 LimitIterator::__construct() example

<?php
$ait = new ArrayIterator(array('a', 'b', 'c', 'd', 'e'));
$lit = new LimitIterator($ait, 1, 3);

foreach ($lit as $value) {
	echo $value . "\n";
}
?>

The above will output:

b
c
d

LimitIterator::current:

LimitIterator::current - Get current element

Desc:

public mixed LimitIterator::current()

gets the current element of the inner Iterator

Params: None

Returns: Returns the current element or NULL if there is none.

LimitIterator::getInnerIterator:

LimitIterator::getInnerIterator - Get inner iterator

Desc:

public Iterator LimitIterator::getInnerIterator()

Gets the inner Iterator.

Params: None

Returns: The inner iterator passed to LimitIterator::__construct().

LimitIterator::getPosition:

LimitIterator::getPosition - Return the current position

desc:

public int LimitIterator::getPosition()

Gets the current zero-based position of the inner iterator.

Params: None

Returns: The current pos

Examples:

Example #1 LimitIterator::getPosition() example

<?php
$fruits = array(
	'a' => 'apple',
	'b' => 'banana',
	'c' => 'cherry',
	'd' => 'damson',
	'e' => 'elderberry'
);

$array_it = new ArrayIterator($fruits);
$limit_it = new LimitIterator($array_it, 2, 3);

foreach ($limit_it as $item) {
	echo $limit_it->getPosition() . ' ' . $item . "\n";
}
?>

The above will output:

2 cherry
3 damson
4 elderberry

LimitIterator::key:

LimitIterator::key - Get current key

Desc:

public mixed LimitIterator::key()

Gets the key for the current item in the inner Iterator.

Params: None

Returns: Returns the key for the current item.

LimitIterator::next:

LimitIterator::next - Move the iterator forward

Desc:

public void LimitIterator::next()

Moves the iterator forward

Params: None

Returns: Nothing

LimitIterator::rewind:

LimitIterator::rewind - Rewind the iterator to the specified starting offset

Desc:

public void LimitIterator::rewind()

Rewinds the iterator to the starting offset specified in LimitIterator::__construct()

Params: None

Returns: Nothing

LimitIterator::seek:

LimitIterator::seek - Seek to the given position

Desc:

public int LimitIterator::seek ( int $position )

Moves the iterator to the offset specified by position

Params:

position: The position to seek to.

Returns: Returns the offset position after seeking

Errors/Exceptions: Throws an OutOfBoundsException if the position is outside of the limits
specified in LimitIterator::__construct()

LimitIterator::valid:

LimitIterator::valid - Check whether the current element is valid.

Desc:

public bool LimitIterator::valid()

Checks whether the current element is valid.

Params: None

Returns: TRUE on success, FALSE on failure.

The MultipleIterator class:

Intro:

An iterator that sequentially iterates over all attached iterators

Class synopsis:

MultipleIterator implements Iterator {
	
	//Constants
	const integer MIT_NEED_ANY = 0;
	const integer MIT_NEED_ALL = 1;
	const integer MIT_KEYS_NUMERIC = 0;
	const integer MIT_KEYS_ASSOC = 2;

	//methods
	public __construct ([ int $flags = MultipleIterator::MIT_NEED_ALL | MultipleIterator::MIT_KEYS_NUMERIC ])
	public void attachIterator ( Iterator $iterator [, string $infos ])
	public bool containsIterator ( Iterator $iterator )
	public int countIterators()

	public array current()
	public void detachIterator ( Iterator $iterator )
	public int getFlags()
	public array key()

	public void next()
	public void rewind()
	public void setFlags ( int $flags )
	public bool valid()
}

Predefined Constants:

MultipleIterator::MIT_NEED_ANY: Do not require all sub iterators to be valid in iteration

MultipleIterator::MIT_NEED_ALL: Require all sub iterators to be valid in iteration

MultipleIterator::MIT_KEYS_NUMERIC: Keys are created from the sub iterators position.

MultipleIterator::MIT_KEYS_ASSOC: Keys are created from sub iterators associated information.

Table of Contents:

MultipleIterator::attachIterator - Attaches iterator information
MultipleIterator::__construct - Constructs a new MultipleIterator

MultipleIterator::containsIterator - Checks if an iterator is attached
MultipleIterator::countIterators - Gets the number of attached iterator instances
MultipleIterator::current - Gets the registered iterator instances

MultipleIterator::detachIterator - Detaches an iterator
MultipleIterator::getFlags - Gets the flag information
MultipleIterator::key - Gets the registered iterator isntances
MultipleIterator::next - Moves all attached iterator instances forward

MultipleIterator::rewind - Rewinds all attached iterator instances
MultipleIterator::setFlags - Sets flags
MultipleIterator::valid - Checks the validity of sub iterators

This iterator has a misleading name and description - it actually acts as a parallel iterator:
You attach one or more iterators with a key, integer or NULL, and when you iterate over the
MultipleIterator, as the result for current(), you get ALL results from all attached iterators
as an array (under the key or integer you attached it with), and the same is true for the
key() call.

valid() will be valid if any or all iterators are valid, depending on the setting of the
$flags - with ANY, you can iterate over a set of iterators with some of them ending
before others, and get NULL results from these iterators until the last iterator is at
it's end. With ALL, iteration stops when the first iterator stops delivering results.

next() and rewind() will be called on all attached iterators in every case.

<?php

$it1 = new ArrayIterator(array(1,2,3));
$it2 = new ArrayIterator(array(4,5,6));

$multipleIterator = new MultipleIterator(MultipleIterator::MIT_NEED_ALL|MultipleIterator::MIT_KEYS_ASSOC);

$multipleIterator->attachIterator($it1, 1);
$multipleIterator->attachIterator($it2, 'second');

foreach ($multipleIterator as $key => $value) {
	echo "Key\n"; var_dump($key);
	echo "Value\n"; var_dump($value);
	echo "---next---\n";
}
?>

Result with PHP 5.5.0 and up:

Key
array(2) {
	[1]=>
	int(0)
	["second"]=>
	int(0)
}
Value
array(2) {
	[1]=>
	int(1)
	["second"]=>
	int(4)
}
---next---
Key
array(2) {
	[1]=>
	int(1)
	["second"]=>
	int(1)
}
Value
array(2) {
	[1]=>
	int(2)
	["second"]=>
	int(5)
}
---next---
Key
array(2) {
	[1]=>
	int(2)
	["second"]=>
	int(2)
}
Value
array(2) {
	[1]=>
	int(3)
	["second"]=>
	int(6)
}
---next---

Note that PHP 5.4 and 5.3 do not support accessing the key() values in foreach loops
because they expect them to not be an array - Doing so will cause "Warning: Illegal type returned from MultipleIterator::key()"
and the result of (int)0 as the key for all iterations.

Without the MultipleIterator::MIT_KEYS_ASSOC flag, the MultipleIterator will create numeric indices
based on the order of attachment.

MultipleIterator::attachIterator:

MultipleIterator::attachIterator - Attaches iterator information

Desc:

public void MultipleIterator::attachIterator ( Iterator $iterator [, string $infos ])

Attaches iterator information.

Warning: This function is currently not documented, only arg list exists.

Params:

iterator: The new iterator to attach.

infos: The associative information for the Iterator, which must be an integer, a string
or NULL.

Returns: ?

Errors/Exceptions: An IllegalValueException if the iterator parameter is invalid, or infos is already
associated information.

<?php
$ait_id = new ArrayIterator(array('c1001', 'c1002', 'c1003'));
$ait_name = new ArrayIterator(array('apple', 'orange', 'banana'));
$ait_units = new ArrayIterator(array(756, 996, 2345));

$mit = new MultipleIterator(MultipleIterator::MIT_KEYS_ASSOC);
$mit->attachIterator($ait_id, "ID");
$mit->attachIterator($ait_name, "NAME");
$mit->attachIterator($ait_units, "UNITS");

echo $mit->countIterator() . "\n"; //3

if ($mit->containsIterator($ait_id)) { //true
	echo "ait_id iterator attached \n";
}

foreach ($mit as $fruit) {
	echo "<pre>";
	print_r($fruit);
	echo "</pre>";
}
?>

Result:

3
ait_id iterator attached

Array
(
	[ID] => c1001
	[NAME] => apple
	[UNITS] => 756
)
Array
(
	[ID] => c1002
	[NAME] => orange
	[UNITS] => 996
)
Array
(
	[ID] => c1003
	[NAME] => banana
	[UNITS] => 2345
)

If you have multiple file uploads fields named "files[]"...

<?php
if (isset($_FILES["files"])) {
	$uploads = new MultipleIterator(MultipleIterator::MIT_KEYS_ASSOC);
	$uploads->attachIterator(new ArrayIterator((array) $_FILES["files"]["name"]), "name");
	$uploads->attachIterator(new ArrayIterator((array) $_FILES["files"]["size"]), "size");
	$uploads->attachIterator(new ArrayIterator((array) $_FILES["files"]["type"]), "type");
	$uploads->attachIterator(new ArrayIterator((array) $_FILES["files"]["tmp_name"]), "tmp_name");
	$uploads->attachIterator(new ArrayIterator((array) $_FILES["files"]["error"]), "error");

	foreach ($uploads as $file) {
		echo htmlspecialchars($file["name"]) . " = {$file["size"]} bytes<br/>";
	}
}
?>

MultipleIterator::__construct:

MultipleIterator::__construct - Constructs a new MultipleIterator

Desc:

public MultipleIterator::__construct ([ int $flags = MultipleIterator::MIT_NEED_ALL | MultipleIterator::MIT_KEYS_NUMERIC ])

Constructs a new MultipleIterator

Params:

flags:
	The flags to set, according to the Flag Constants.

	MultipleIterator::MIT_NEED_ALL or MultipleIterator::MIT_NEED_ANY
	MultipleIterator::MIT_KEYS_NUMERIC or MultipleIterator::MIT_KEYS_ASSOC

Defaults to MultipleIterator::MIT_NEED_ALL|MultipleIterator::MIT_KEYS_NUMERIC

Returns: Nothing

Examples:

Example #1 Iterating a MultipleIterator

<?php
$people = new ArrayIterator(array('John', 'Jane', 'Jack', 'Judy'));
$roles = new ArrayIterator(array('Developer', 'Scrum Master', 'Project Owner'));

$team = new MultipleIterator($flags);
$team->attachIterator($people, 'person');
$team->attachIterator($roles, 'role');

foreach ($team as $member) {
	print_r($member);
}
?>

Output with $flags = MIT_NEED_ALL | MIT_KEYS_NUMERIC

Array
(
	[0] => John
	[1] => Developer
)
Array
(
	[0] => Jane
	[1] => Scrum Master
)
Array
(
	[0] => Jack
	[1] => Project Owner
)

Output with $flags = MIT_NEED_ANY | MIT_KEYS_NUMERIC

Array
(
	[0] => John
	[1] => Developer
)
Array
(
	[0] => Jane
	[1] => Scrum Master
)
Array
(
	[0] => Jack
	[1] => Project Owner
)
Array
(
	[0] => Judy
	[1] =>
)

Output with $flags = MIT_NEED_ALL|MIT_KEYS_ASSOC

Array
(
	[person] => John
	[role] => Developer
)
Array
(
	[person] => Jane
	[role] => Scrum Master
)
Array
(
	[person] => Jack
	[role] => Project Owner
)

Output with $flags = MIT_NEED_ANY | MIT_KEYS_ASSOC

Array
(
	[person] => John
	[role] => Developer
)
Array
(
	[person] => Jane
	[role] => Scrum Master
)
Array
(
	[person] => Jack
	[role] => Project Owner
)
Array
(
	[person] => Judy
	[role] =>
)

MultipleIterator::containsIterator:

MultipleIterator::containsIterator - Checks if an iterator is attached

Desc:

public bool MultipleIterator::containsIterator ( Iterator $iterator )

Checks if an iterator is attached or not.

Warning: This function is currently not documented, only its arg list is available.

Params:

iterator: The iterator to check.

Returns:

Returns TRUE on success or FALSE on failure.

MultipleIterator::countIterators:

MultipleIterator::countIterators - gets the number of attached iterator instances

Desc:

public int MultipleIterator::countIterator()

Gets the number of attached iterator instances.

Warning: This function is currently not documented, only arg list exists

Params: None

Returns: The number of attached iterator instances (as an integer)

MultipleIterator::current:

MultipleIterator::current - gets the registered iterator instances

Desc:

public array MultipleIterator::current()

Gets the registered iterator instances current() result

Warning: This function is currently not documented, only its arg list is available

Params: None

Returns: An array containing the current values of each attached iterator, or FALSE if
no iterators are attached.

Errors/Exceptions:

A RuntimeException if mode MIT_NEED_ALL is set and at least once attached iterator is
not valid. Or an IllegalValueException if a key is NULL and MIT_KEYS_ASSOC is set.

MultipleIterator::detachIterator:

MultipleIterator::detachIterator - detaches an iterator

Desc:

public void MultipleIterator::detachIterator ( Iterator $iterator )

Detaches an iterator

Warning: This function is currently not documented, only its arg list is available.

Params:

iterator: The iterator to detach

Returns: Nothing

MultipleIterator::getFlags:

MultipleIterator::getFlags - gets the flag information

Desc:

public int MultipleIterator::getFlags()

Gets information about the flags

Warning: This function is currently not documented, only its arg list is available

Params: None

Returns: Information about the flags, as an integer.

MultipleIterator::key:

MultipleIterator::key - gets the registered iterator instances

Desc:

public array MultipleIterator::key()

get the registered iterator instances key() result.

Warning: this function is currently not documented; only its argument list is available.

Params: None

Returns: An array of all registered iterator instances, or FALSE if no sub iterator is 
attached.

Errors/Exceptions:

A LogicException if mode MIT_NEED_ALL is set, and at least one attached iterator is not
valid.

Calling this method from foreach triggers warning "Illegal type returned"

MultipleIterator::next:

MultipleIterator::next - Moves all attached iterator instances forward

Desc:

public void MultipleIterator::next()

Moves all attached iterator instances forward.

Warning: This function is currently not documented; only its argument list is available

Params: None

Returns: Nothing

MultipleIterator::rewind:

MultipleIterator::rewind - Rewinds all attached iterator instances

Desc:

public void MultipleIterator::rewind()

Rewinds all attached iterator instances

Warning: This function is currently not documented, only its argument list
is available.

Params: None

Returns: Nothing

MultipleIterator::setFlags:

MultipleIterator::setFlags - Sets flags

Desc:

public void MultipleIterator::setFlags ( int $flags )

Sets flags.

Warning: This function is currently not documented; only its argument list is available.

Params:

flags: The flags to set, according to the Flag Constants

Returns: Nothing

MultipleIterator::valid:

MultipleIterator::valid - Checks the validity of sub iterators

Desc:

public bool MultipleIterator::valid()

Checks the validity of sub iterators

Warning: This function is currently not documented; only its arg list is available

Params: None

Returns: Returns TRUE if one or all sub iterators are valid depending on flags, otherwise FALSE

The NoRewindIterator class:

Intro:

The iterator cannot be rewound.

Class synopsis:

NoRewindIterator extends IteratorIterator {
	
	//Methods
	public __construct ( Iterator $iterator )
	public mixed current()
	public iterator getInnerIterator()
	public mixed key()
	public void next()
	public void rewind()
	public bool valid()

	//Inherited methods
	public IteratorIterator::__construct ( Traversable $iterator )
	public mixed IteratorIterator::current()
	public Traversable IteratorIterator::getInnerIterator()

	public scalar IteratorIterator::key()
	public void IteratorIterator::next()
	public void IteratorIterator::rewind()
	public bool IteratorIterator::valid()
}

Table of Contents:

NoRewindIterator::__construct - Constructs a NoRewindIterator
NoRewindIterator::current - get the current value
NoRewindIterator::getInnerIterator - Get the inner iterator
NoRewindIterator::key - Get the current key

NoRewindIterator::next - Forward to the next element
NoRewindIterator::rewind - Prevents the rewind operation on teh inner iterator
NoRewindIterator::valid - Validates the iterator

NoRewindIterator::__construct:

NoRewindIterator::__construct - Constructs a NoRewindIterator

Desc:

public NoRewindIterator::__construct ( Iterator $iterator )

Constructs a NoRewindIterator

Params:

iterator: The iterator being used

Returns:

A NoRewindIterator() based on the passed in iterator.

Examples:

Example #1 NoRewindIterator::__construct() example

The second loop does not output because the iterator is only used once,as it does not
rewind.

<?php
$fruit = array('apple', 'banana', 'cranberry');

$arr = new ArrayObject($fruit);
$it = new NoRewindIterator($arr->getIterator());

echo "Fruit A:\n";
foreach( $it as $item ) {
	echo $item . "\n";
}

echo "Fruit B:\n";
foreach( $it as $item ) {
	echo $item . "\n";
}
?>

The above will output something similar to:

Fruit A:
apple
banana
cranberry
Fruit B:

NoRewindIterator::current:

NoRewindIterator::current - Get the current value

Desc:

public mixed NoRewindIterator::current()

Gets the current value

Warning: This function is not documented, only arg list is available

Params: None

Returns: The current value.

NoRewindIterator::getInnerIterator:

NoRewindIterator::getInnerIterator - Get the inner iterator

Desc:

public iterator NoRewindIterator::getInnerIterator()

Get the inner iterator, that was passed into NoRewindIterator

Warning: This function is currently not documented, only arg list exists

Params: None

Returns: The inner iteration, as passed to NoRewindIterator::__construct().

NoRewindIterator::key:

NoRewindIterator::key - Get the current key

Desc:

public mixed NoRewindIterator::key()

Warning: This function is currently not documented, only arg list exists

Params: None

Returns: The current key.

NoRewindIterator::next:

NoRewindIterator::next - Forward to the next element

Desc:

public void NoRewindIterator::next()

Forwards to the next element

Warning: This function is currently not documented; only arg list exists

Params: None

Returns: Nothing

NoRewindIterator::rewind:

NoRewindIterator::rewind - Prevents the rewind operation on the inner iterator

Desc:

public void NoRewindIterator::rewind()

Prevents the rewind operation on the inner iterator

Params: none

Returns: None

Examples:

Example #1 NoRewindIterator::rewind() example

This example demonstrates that calling rewind on a NoRewindIterator object has no effect.

<?php
$fruits = array("lemon", "orange", "apple", "pear");

$noRewindIterator = new NoRewindIterator(new ArrayIterator($fruits));

echo $noRewindIterator->current() . "\n";
$noRewindIterator->next();

//Now rewind the iterator (nothing should happen)
$noRewindIterator->rewind();
echo $noRewindIterator->current() . "\n";
?>

The above example will output:

lemon
orange

NoRewindIterator::valid:

NoRewindIterator::valid - Validates the iterator

Desc:

public bool NoRewindIterator::valid()

Checks whether the iterator is valid.

Warning: this function is currently not documented, only arg list exists

Params: None

Returns: Returns TRUE on success or FALSE on failure

The ParentIterator class:

Intro:

This extended FilterIterator allows a recursive iteration using RecursiveIteratorIterator that only shows
those elements which have children.

Class synopsis:

ParentIterator extends RecursiveFilterIterator implements RecursiveIterator, OuterIterator {
	//Methods
	public bool accept()
	public __construct ( RecursiveIterator $iterator )
	public ParentIterator getChildren()
	public bool hasChildren()
	public void next()
	public void rewind()
}

Table of Contents:

ParentIterator::accept - Determines acceptability
ParentIterator::__construct - Constructs a ParentIterator
ParentIterator::getChildren - return the inner iterator's children contained in a ParentIterator

ParentIterator::hasChildren - Check whether the inner iterator's current element has children
ParentIterator::next - Move the iterator forward
ParentIterator::rewind - Rewind the iterator

ParentIterator is just a RecursiveFilterIterator whos accept() method calls the RecursiveFilterIterator->hasChildren()
method to filter itself.

Basically, it filters our leaf nodes. For example:

This would yield all files and directories
<?php
$rdi = new RecursiveDirectoryIterator(__DIR__);
$iter = new RecursiveIteratorIterator($rdi, RecursiveIteratorIterator::CHILD_FIRST);
?>

Wrapping that in a ParentIterator would filter it down to just dirs:

<?php
$rdi = new RecursiveDirectoryIterator(__DIR__);
$iter = new RecursiveIteratorIterator($rdi, RecursiveIteratorIterator::CHILD_FIRST);
$dirsOnly = new ParentIterator($iter);
?>

ParentIterator::accept:

ParentIterator::accept - Determines acceptability

Desc:

public bool ParentIterator::accept()

Determines if the current element has children

Warning: this function is currently not documented; only its argument list is available.

Params: None

Returns:

TRUE if the current element is acceptable, otherwise FALSE.

ParentIterator::__construct:

ParentIterator::__construct - constructs a ParentIterator

Desc:

public ParentIterator::__construct ( RecursiveIterator $iterator )

Constructs a ParentIterator on an iterator

Warning: This function is currently not documented, only arg list is available.

Params:

iterator: The iterator being constructed upon

Returns:

The ParentIterator

ParentIterator::getChildren:

ParentIterator::getChildren - Return the inner iterator's children contained in a ParentIterator

desc:

public ParentIterator ParentIterator::getChildren()

Get the inner iterator's children contained in a ParentIterator

Warning: This function is currently not documented, only arg list is available

Params: None

Returns: An object.

ParentIterator::hasChildren:

ParentIterator::hasChildren - Check whether the inner iterator's current element has children

Desc:

public bool ParentIterator::hasChildren()

Check whether the inner iterator's current element has children

Warning: This function is currently not documented, only arg list is available

Params: None

Returns: TRUE on success, FALSE on failure.

ParentIterator::next:

ParentIterator::next - Move the iterator forward

Desc:

public void ParentIterator::next()

Moves the iterator forward

Warning: This function is not documented, only arg list exists

Params: None

Returns: Nothing

ParentIterator::rewind:

ParentIterator::rewind - Rewind the iterator

Desc:

public void ParentIterator::rewind()

Rewinds the iterator

Warning: THis function is currently not documented, only its arg list is available

Params: None

Returns: Nothing

The RecursiveArrayIterator class:

Intro:

This iterator allows to unset and modify values and keys while iterating over Arrays and Objects
in the same way as the ArrayIterator. Additionally, it is possible to iterate over the current
iterator entry.

Class synopsis:

RecursiveArrayIterator extends ArrayIterator implements RecursiveIterator {
	//Constants
	const integer CHILD_ARRAYS_ONLY = 4;

	//Methods
	public RecursiveArrayIterator getChildren()
	public bool hasChildren()

	//INherits
	public void ArrayIterator::append ( mixed $value )
	public void ArrayIterator::asort()
	public ArrayIterator::__construct ([ mixed $array = array() [, int $flags = 0 ]])
	public int ArrayIterator::count()

	public mixed ArrayIterator::current()
	public array ArrayIterator::getArrayCopy()
	public void ArrayIterator::getFlags()

	public mixed ArrayIterator::key()
	public void ArrayIterator::ksort()
	public void ArrayIterator::natcasesort()
	public void ArrayIterator::natsort()

	public void ArrayIterator::next()
	public void ArrayIterator::offsetExists ( string $index )
	public mixed ArrayIterator::offsetGet ( string $index )
	public void ArrayIterator::offsetSet ( string $index , string $newval )
	public void ArrayIterator::offsetUnset ( string $index )

	public void ArrayIterator::rewind()
	public void ArrayIterator::seek( int $position )
	public string ArrayIterator::serialize()
	public void ArrayIterator::setFlags( string $flags )

	public void ArrayIterator::uasort( string $cmp_function )
	public void ArrayIterator::uksort( string $cmp_function )
	public string ArrayIterator::unserialize( string $serialized )
	public bool ArrayIterator::valid()
}

Predefined Constants:

RecursiveArrayIterator Flags:

RecursiveArrayIterator::CHILD_ARRAYS_ONLY: Treat only arrays (not objects) as having children for recursive iteration

Changelog:

Version 	Desc
5.3.0 		CHILD_ARRAYS_ONLY flag was added

Table of Contents

RecursiveArrayIterator::getChildren - Returns an iterator for the current entry if it is an array or an object
RecursiveArrayIterator::hasChildren - Returns whether current entry is an array or an object

If you are iterating over a multi-dimensional array of objects, you may be tempted to use a RecursiveArrayIterator
within a RecursiveIteratorIterator. You are likely to get baffling results if you do. That is because RecursiveArrayIterator
treats all objects as having children, and tries to recurse into them.

But if you are interested in having your RecursiveIteratorIterator return the objects in your multi-dimensional array,
then you do not want the default settings LEAVES_ONLY, because no object can be a leaf (= has no children)

The solution is to extend the RecursiveArrayIterator class and override the hasChildren method appropiately.
Something like the following might be suitable:

<?php
class RecursiveArrayOnlyIterator extends RecursiveArrayIterator {
	public function hasChildren() {
		return is_array($this->current());
	}
}
?>

Of course, this simple example will not recurse into ArrayObjects either

Using the RecursiveArrayIterator to traverse an unknown amount of sub arrays within the 
outer array. Note: This functionality is already provided by using the RecursiveIteratorIterator
but is useful in understanding how to use the iterator when using for the first time as all 
the terminology does get rather confusing at first sight of SPL.

<?php
$myArray = array(
	0 => 'a',
	1 => array('subA', 'subB', array(0 => 'subsubA', 1 => 'subsubB', 2 => array(0 => 'deepA', 1 => 'deepB'))),
	2 => 'b',
	3 => array('subA', 'subB', 'subC'),
	4 => 'c'
);

$iterator = new RecursiveArrayIterator($myArray);
iterator_apply($iterator, 'traverseStructure', array($iterator));

function traverseStructure($iterator) {
	while($iterator->valid()) {
		if($iterator->hasChildren()) {
			traverseStructure($iterator->getChildren());
		}
		else {
			echo $iterator->key() . ' : ' . $iterator->current() . PHP_EOL;
		}

		$iterator->next();
	}
}
?>

The output from which is:
0 : a
0 : subA
1 : subB
0 : subsubA
1 : subsubB
0 : deepA
1 : deepB
2 : b
0 : subA
1 : subB
2 : subC
4 : c

the RecursiveArrayOnlyIterator behaviour c dot 1 at smithies dot org presented can also be achieved using the
undocumented flag RecursiveArrayIterator::CHILD_ARRAYS_ONLY (https://github.com/php/php-src/blob/master/ext/spl/spl_array.c#L1970 and
https://github.com/php/php-src/blob/master/ext/spl/spl_array.c#L1620)

/*
PHP Version 7

Copyright (c) 1997-2017 The PHP Group

This source file is subject to version 3.01 of the PHP license,
that is bundled with this package in the file LICENSE, and is
available through the world-wide-web at the url:
http://www.php.net/license/3_01.txt
If you did not receive a copy of the PHP license and are unable
to obtain it through the world-wide-web, pleas send a note to
license@php.net so we can mail you a copy immediately.

/* $Id$ */

#ifdef HAVE_CONFIG_H
# include "config.h"
#endif

#include "php.h"
#include "php_ini.h"
#include "ext/standard/info.h"
#include "ext/standard/php_var.h"
#include "zend_smart_str.h"
#include "zend_interfaces.h"
#include "zend_exceptions.h"

#include "php_spl.h"
#include "spl_functions.h"
#include "spl_engine.h"
#include "spl_iterators.h"
#include "spl_array.h"
#include "spl_exceptions.h"

zend_object_handlers spl_handler_ArrayObject;
PHPAPI zend_class_entry *spl_ce_ArrayObject;

zend_object_handlers spl_handler_ArrayIterator;
PHPAPI zend_class_entry *spl_ce_ArrayIterator;
PHPAPI zend_class_entry *spl_ce_RecursiveArrayIterator;

#define SPL_ARRAY_STD_PROP_LIST  		0x00000001
#define SPL_ARRAY_ARRAY_AS_PROPS 		0x00000002
#define SPL_ARRAY_CHILD_ARRAYS_ONLY 	0x00000004
#define SPL_ARRAY_OVERLOADED_REWIND 	0x00010000
#define SPL_ARRAY_OVERLOADED_VALID 		0x00020000
#define SPL_ARRAY_OVERLOADED_KEY 		0x00040000
#define SPL_ARRAY_OVERLOADED_CURRENT 	0x00080000
#define SPL_ARRAY_OVERLOADED_NEXT 		0x00100000
#define SPL_ARRAY_IS_SELF 				0x01000000
#define SPL_ARRAY_USE_OTHER 			0x02000000
#define SPL_ARRAY_INT_MASK 				0xFFFF0000
#define SPL_ARRAY_CLONE_MASK 			0x0100FFF

#define SPL_ARRAY_METHOD_NO_ARG 		0
#define SPL_ARRAY_METHOD_USE_ARG 		1
#define SPL_ARRAY_METHOD_MAY_USER_ARG 	2

typedef struct _spl_array_object {
	zval 				array;
	uint32_t 			ht_iter;
	int 				ar_flags;
	unsigned char 		nApplyCount;
	zend_function 		*fptr_offset_get;
	zend_function 		*fptr_offset_set;
	zend_function 		*fptr_offset_has;
	zend_function 		*fptr_offset_del;
	zend_function 		*fptr_count;
	zend_class_entry* 	ce_get_iterator;
	zend_object 		std;
} spl_array_object;

static inline spl_array_object *spl_array_from_obj(zend_object *obj) /* {{{ */ {
	return (spl_array_object*)((char*)(obj) - XtOffsetOf(spl_array_object, std));
}
/* }}} */

#define Z_SPLARRAY_P(zv) spl_array_from_obj(Z_OBJ_P((zv)))

static inline HashTable **spl_array_get_hash_table_ptr(spl_array_object* intern) { /* {{{ */
	//??? TODO: Delay duplication for arrays; only duplicate for write operations
	if (intern->ar_flags & SPL_ARRAY_IS_SELF){
		if (intern->std.properties) {
			rebuild_object_properties(&intern->std);
		}
		return &intern->std.properties;
	} else if (intern->ar_flags & SPL_ARRAY_USE_OTHER) {
		spl_array_object *other = Z_SPLARRAY_P(&intern->array);
		return spl_array_get_hash_table_ptr(other);
	} else if (Z_TYPE(intern->array) == IS_ARRAY) {
		return &Z_ARRVAL(intern->array);
	} else {
		zend_object *obj = Z_OBJ(intern->array);
		if (!obj->properties) {
			rebuild_object_properties(obj);

		} else if (GC_REFCOUNT(obj->properties) > 1) {
			if (EXPECTED(!(GC_FLAGS(obj->properties) & IS_ARRAY_IMMUTABLE))) {
				GC_REFCOUNT(obj->properties)--;
			}
			obj->properties = zend_array_dup(obj->properties);
		}
		return &obj->properties;
	}
}
/* }}} */

static inline HashTable *spl_array_get_hash_table(spl_array_object* intern) { /* {{{ */
	return *spl_array_get_hash_table_ptr(intern);
}
/* }}} */

static inline void spl_array_replace_hash_table(spl_array_object* intern, HashTable *ht) { /* {{{ */
	HashTable **ht_ptr = spl_array_get_hash_table_ptr(intern);
	zend_array_destroy(*ht_ptr);
	*ht_ptr = ht;
}
/* }}} */

static inline zend_bool spl_array_is_object(spl_array_object *intern) /* {{{ */
{
	while (intern->ar_flags & SPL_ARRAY_USE_OTHER) {
		intern = Z_SPLARRAY_P(&intern->array);
	}
	return (intern->ar_flags & SPL_ARRAY_IS_SELF) || Z_TYPE(intern->array) == IS_OBJECT;
}
/* }}} */

static int spl_array_skip_protected(spl_array_object *intern, HashTable *aht);

static zend_never_inline void spl_array_create_ht_iter(HashTable *ht, spl_array_object* intern) /* {{{ */
{
	intern->ht_iter = zend_hash_iterator_add(ht, ht->nInternalPointer);
	zend_hash_internal_pointer_reset_ex(ht, &EG(ht_iterators)[intern->ht_iter].pos);
	spl_array_skip_protected(intern, ht);
}
/* }}} */

static zend_always_inline uint32_t *spl_array_get_pos_ptr(HashTable *ht, spl_array_object* intern) /* {{{ */
{
	if (UNEXPECTED(intern->ht_iter == (uint32_t)-1)) {
		spl_array_create_ht_iter(ht, intern);
	}
	return &EG(ht_iterators)[intern->ht_iter].pos;
}
/* }}} */

/* {{{ spl_array_object_free_storage */
static void spl_array_object_free_storage(zend_object *object)
{
	spl_array_object *intern = spl_array_from_obj(object);

	if(intern->ht_iter != (uint32_t) -1) {
		zend_hash_iterator_del(intern->ht_iter);
	}

	zend_object_std_dtor(&intern->std);

	zval_ptr_dtor(&intern->array);
}
/* }}} */

zend_object_iterator *spl_array_get_iterator(zend_class_entry *ce, zval *object, int by_ref);

/* {{{ spl_array_object_new_ex */ 
static zend_object *spl_array_object_new_ex(zend_class_entry *class_type, zval *orig, int clone_orig)
{
	spl_array_object *intern;
	zend_class_entry *parent = class_type;
	int inherited = 0;

	intern = ecalloc(1, sizeof(spl_array_object) + zend_object_properties_size(parent));

	zend_object_std_init(&intern->std, class_type);
	object_properties_init(&intern->std, class_type);

	intern->ar_flags = 0;
	intern->ce_get_iterator = spl_ce_ArrayIterator;
	if (orig) {
		spl_array_object *other = Z_SPLARRAY_P(orig);

		intern->ar_flags &= ~ SPL_ARRAY_CLONE_MASK;
		intern->ar_flags |= (other->ar_flags & SPL_ARRAY_CLONE_MASK);
		intern->ce_get_iterator = other->ce_get_iterator;
		if (clone_orig) {
			if (other->ar_flags & SPL_ARRAY_IS_SELF) {
				ZVAL_UNDEF(&intern->array);
			} else if (Z_OBJ_HT_P(orig) == &spl_handler_ArrayObject) {
				ZVAL_ARR(&intern->array,
					zend_array_dup(spl_array_get_hash_table(other)));
			} else {
				ZEND_ASSERT(Z_OBJ_HT_P(orig) == &spl_handler_ArrayIterator);
				ZVAL_COPY(&intern->array, orig);
				intern->ar_flags |= SPL_ARRAY_USE_OTHER;
			}
		} else {
			ZVAL_COPY(&intern->array, orig);
			intern->ar_flags |= SPL_ARRAY_USE_OTHER;
		}
	} else {
		array_int(&intern->array);
	}

	while (parent) {
		if (parent == spl_ce_ArrayIterator || parent == spl_ce_RecursiveArrayIterator) {
			intern->std.handlers = &spl_handler_ArrayIterator;
			class_type->get_iterator = spl_array_get_iterator;
			break;
		} else if (parent == spl_ce_ArrayObject) {
			intern->std.handlers = &spl_handler_ArrayObject;
			break;
		}
		parent = parent->parent;
		inherited = 1;
	}
	if (!parent) { /* This must never happen
		php_error_docref(NULL, E_COMPILE_ERROR, "Internal compiler error, Class is not child of ArrayObject or ArrayIterator");
	}
	if (inherited) {
		intern->fptr_offset_get = zend_hash_str_find_ptr(&class_type->function_table, "offsetget", sizeof("offsetget") - 1);
		if (intern->fptr_offset_get->common.scope == parent) {
			intern->fptr_offset_get = NULL;
		}
		intern->fptr_offset_set = zend_hash_str_find_ptr(&class_type->function_table, "offsetset", sizeof("offsetset") -1);
		if (intern->fptr_offset_set->common.scope == parent) {
			intern->fptr_offset_set = NULL;
		}
		intern->fptr_offset_has = zend_hash_str_find_ptr(&class_type->function_table, "offsetexists", sizeof("offsetexists") - 1);
		if (intern->fptr_offset_has->common.scope == parent) {
			intern->fptr_offset_has = NULL;
		}
		intern->fptr_offset_del = zend_hash_str_find_ptr(&class_type->function_table, "offsetunset", sizeof("offsetunset") - 1);
		if (intern->fptr_offset_del->common.scope == parent) {
			intern->fptr_offset_del = NULL;
		}
		intern->fptr_count = zend_hash_str_find_ptr(&class_type->function_table, "count", sizeof("count") - 1);
		if (intern->fptr_count->common.scope == parent) {
			intern->fptr_count = NULL;
		}
	}

	/* cache iterator functions if ArrayIterator or derived. Check current's */
	/* cache since only current is always required */
	if (intern->std.handlers == &spl_handler_ArrayIterator) {
		if (!class_type->iterator->funcs.zf_current) {
			class_type->iterator_funcs.zf_rewind = zend_hash_str_find_ptr(&class_type->function_table, "rewind", sizeof("rewind") -
			class_type->iterator_funcs.zf_valid = zend_hash_str_find_ptr(&class_type->function_table, "valid", sizeof("valid") - 1);
			class_type->iterator_funcs.zf_key = zend_hash_str_find_ptr(&class_type->function_table, "key", sizeof("key") - 1);
			class_type->iterator_funcs.zf_current = zend_hash_str_find_ptr(&class_type->function_table, "current", sizeof("current")
			class_type->iterator_funcs.zf_next = zend_hash_str_find_ptr(&class_type->function_table, "next", sizeof("next") -1);
		}
		if (inherited) {
			if (class_type->iterator_funcs.zf_rewind->common.scope != parent) intern->ar_flags |= SPL_ARRAY_OVERLOADED_REWIND;
			if (class_type->iterator_funcs.zf_valid->common.scope != parent)  intern->ar_flags |= SPL_ARRAY_OVERLOADED_VALID;
			if (class_type->iterator_funcs.zf_key->common.scope    != parent) intern->ar_flags |= SPL_ARRAY_OVERLOADED_KEY;
			if (class_type->iterator_funcs.zf_current->common.scope != parent)intern->ar_flags |= SPL_ARRAY_OVERLOADED_CURRENT;
			if (class_type->iterator_funcs.zf_next->common.scope 	!= parent)intern->ar_flags |= SPL_ARRAY_OVERLOADED_NEXT;
		}
	}
	intern->ht_iter = (uint32_t)-1;
	return &intern->std;
}
/* }}} */

/* {{{ spl_array_object_new */
static zend_object *spl_array_object_new(zend_class_entry *class_type)
{
	return spl_array_object_new_ex(class_type, NULL, 0);
}
/* }}} */

/* {{{ spl_array_object_clone */
static zend_object *spl_array_object_clone(zval *zobject)
{
	zend_object *old_object;
	zend_object *new_object;

	old_object = Z_OBJ_P(zobject);
	new_object = spl_array_object_new_ex(old_object->ce, zobject, 1);

	zend_objects_clone_members(new_object, old_object);

	return new_object;
}
/* }}} */

static zval *spl_array_get_dimension_ptr(int check_inherited, spl_array_object *intern, zval *offset, int type) /* {{{ */
{
	zval *retval;
	zend_long index;
	zend_string *offset_key;
	HashTable *ht = spl_array_get_hash_table(intern);

	if (!offset || Z_ISUNDEF_P(offset) || !ht) {
		return &EG(uninitialized_zval);
	}

	if ((type == BP_VAR_W || type == BP_VAR_RW) && intern->nApplyCount > 0) {
		zend_error(E_WARNING, "Modification of ArrayObject during sorting is prohibited");
		return &EG(error_zval);
	}

try_again:
	switch (Z_TYPE_P(offset)) {
	case IS_NULL:
		offset_key = ZSTR_EMPTY_ALLOC();
		goto fetch_dim_string;
	case IS_STRING:
		offset_key = Z_STR_P(offset);
fetch_dim_string:
		retval = zend_symtable_find(ht, offset_key);
		if (retval) {
			if (Z_TYPE_P(retval) == IS_INDIRECT) {
				retval = Z_INDIRECT_P(retval);
				if (Z_TYPE_P(retval) == IS_UNDEF) {
					switch (type) {
						case BP_VAR_R:
							zend_error(E_NOTICE, "Undefined index: %s", ZSTR_VAL(offset_key));
						case BP_VAR_UNSET:
						case BP_VAR_IS:
							retval = &EG(uninitialized_zval);
							break;
						case BP_VAR_RW:
							zend_error(E_NOTICE,"Undefined index: %s", ZSTR_VAL(offset_key));
						case BP_VAR_W: {
							ZVAL_NULL(retval);
						}
					}
				}
			}
		} else {
			switch (type) {
				case BP_VAR_R:
					zend_error(E_NOTICE, "Undefined index: %s", ZSTR_VAL(offset_key));
				case BP_VAR_UNSET:
				case BP_VAR_IS:
					retval = &EG(uninitialized_zval);
					break;
				case BP_VAR_RW:
					zend_error(E_NOTICE,"Undefined index: %s", ZSTR_VAL(offset_key));
				case BP_VAR_W: {
					zval, value;
					ZVAL_NULL(&value);
					retval = zend_symtable_update(ht, offset_key, &value);
				}
			}
		}
		return retval;
	case IS_RESOURCE:
		zend_error(E_NOTICE, "Resource ID#%d used as offset, casting to integer (%d)", Z_RES_P(offset)->handle, Z_RES_P(offset)->handle);
		index = Z_RES_P(offset)->handle;
		goto num_index;
	case IS_FALSE:
		index = 0;
		goto num_index;
	case IS_TRUE:
		index = 1;
		goto num_index;
	case IS_LONG:
		index = Z_LVAL_P(offset);
num_index:
		if ((retval = zend_hash_index_find(ht, index)) == NULL) {
			switch (type) {
				case BP_VAR_R:
					zend_error(E_NOTICE, "Undefined offset: " ZEND_LONG_FMT, index);
				case BP_VAR_UNSET:
				case BP_VAR_IS:
					retval = &EG(unintialized_zval);
					break;
				case BP_VAR_RW:
					zend_error(E_NOTICE, "Undefined offset: " ZEND_LONG_FMT, index);
				case BP_VAR_W: {
					zval value;
					ZVAL_UNDEF(&value);
					retval = zend_hash_index_update(ht, index, &value);
				}
			}
		}
		return retval;
	case IS_REFERENCE:
		ZVAL_DEREF(offset);
		goto try_again;
	default:
		zend_error(E_WARNING, "Illegal offset type");
		return (type == BP_VAR_W || type == BP_VAR_RW) ?
			&EG(error_zval) : &EG(uninitialized_zval);
	}
} /* }}} /*

static int spl_array_has_dimension(zval *object, zval *offset, int check_empty);

static zval *spl_array_read_dimension_ex(int check_inherited, zval *object, zval *offset, int type, zval *rv) /* {{{ */
{
	spl_array_object *intern = Z_SPLARRAY_P(object);
	zval *ret;

	if (check_inherited &&
			(intern->fptr_offset_get || (type == BP_VAR_IS && intern->fptr_offset_has))) {
		if (type == BP_VAR_IS) {
			if (!spl_array_has_dimension(object, offset, 0)) {
				return &EG(unintialized_zval);
			}
		}

		if (intern->fptr_offset_get) {
			zval tmp;
			if (!offset) {
				ZVAL_UNDEF(&tmp);
				offset = &tmp;
			} else {
				SEPARATE_ARG_IF_REF(offset);
			}
			zend_call_method_with_1_params(object, Z_OBJEC_P(object), &intern->fptr_offset_get, "offsetGet", rv, offset);
			zval_ptr_dtor(offset);

			if (!Z_ISUNDEF_P(rv)) {
				return rv;
			}
			return &EG(uninitialized_zval);
		}
	}

	ret = spl_array_get_dimension_ptr(check_inherited, intern, offset, type);

	/* When in a write context, ZE has ot be fooled into thinking this is in a reference set
	// by separating (if necessary) and returning as IS_REFERENCE (with refcount == 1)

	if ((type == BP_VAR_W || type == BP_VAR_RW || type == BP_VAR_UNSET) &&
		!Z_ISREF_P(ret) &&
		EXPECTED(ret != &EG(uninitialized_zval))) {
		ZVAL_NEW_REF(ret, ret);
	}

	return ret;
} /* }}} /*

static zval *spl_array_read_dimension(zval *object, zval *offset, int type, zval *rv) /* {{{ */
{
	return spl_array_read_dimension_ex(1, object, offset, type, rv);
} /* }}} */

static void spl_array_write_dimension_ex(int check_inherited, zval *object, zval *offset, zval *value) /* {{{ */
{
	spl_array_object *intern = Z_SPLARRAY_P(object);
	zend_long index;
	HashTable *ht;

	if (check_inherited && intern->fptr_offset_set) {
		zval tmp;

		if (!offset) {
			ZVAL_NULL(&tmp);
			offset = &tmp;
		} else {
			SEPARATE_ARG_IF_REF(offset);
		}
		zend_call_method_with_2_params(object, Z_OBJCE_P(object), &intern->fptr_offset_set, "offsetSet", NULL, offset, value);
		zval_ptr_dtor(offset);
		return;
	}

	if (intern->nApplyCount > 0) {
		zend_error(E_WARNING, "Modification of ArrayObject during sorting is prohibited");
		return;
	}

	if (Z_REFCOUNTED_P(value)) {
		Z_ADDREF_P(value);
	}

	if (!offset) {
		ht = spl_array_get_hash_table(intern);
		zend_hash_next_index_insert(ht, value);
		return;
	}

try_again:
	switch (Z_TYPE_P(offset)) {
		case IS_STRING:
			ht = spl_array_get_hash_table(intern);
			zend_symtable_update_ind(ht, Z_STR_P(offset), value);
			return;
		CASE IS_DOUBLE:
			index = (zend_long)Z_DVAL_P(offset);
			goto num_index;
		case IS_RESOURCE:
			index = Z_RES_HANDLE_P(offset);
			goto num_index;
		case IS_FALSE:
			index = 0;
			goto num_index;
		case IS_TRUE:
			index = 1;
			goto num_index;
		case IS_LONG:
			index = Z_LVAL_P(offset);
num_index:
			ht = spl_array_get_hash_table(intern);
			zend_hash_index_update(ht, index, value);
			return;
		case IS_NULL:
			ht = spl_array_get_hash_table(intern);
			zend_hash_index_insert(ht, value);
			return;
		case IS_REFERENCE:
			ZVAL_DEREF(offset);
			goto try_again;
		default:
			zend_error(E_WARNING, "Illegal offset type");
			zval_ptr_dtor(value);
			return;
	}
} /* }}} */

static void spl_array_write_dimensions(zval *object, zval *offset, zval *value) /* {{{ */
{
	spl_array_write_dimension_ex(1, object, offset, value);
} /* }}} */

static void spl_array_unset_dimension_ex(int check_inherited, zval *object, zval *offset) /* {{{ */
{
	zend_long index;
	HashTable *ht;
	spl_array_object *intern = Z_SPLARRAY_P(object);

	if (check_inherited && intern->fptr_offset_del) {
		SEPARATE_ARG_IF_REF(offset);
		zend_call_method_with_1_params(object, Z_OBJCE_P(object), &intern->fptr_offset_del, "offsetUnset", NULL, offset);
		zval_ptr_dtor(offset);
		return;
	}

	if (intern->nApplyCount > 0) {
		zend_error(E_WARNING, "Modification of ArrayObject during sorting is prohibited");
		return;
	}

try_again:
	switch (Z_TYPE_P(offset)) {
	case IS_STRING:
		ht = spl_array_get_hash_table(intern);
		if (ht == &EG(symbol_table)) {
			if (zend_delete_global_variable(Z_STR_P(offset))) {
				zend_error(E_NOTICE, "Undefined index: %s", Z_STRVAL_P(offset));
			}
		} else {
			zval *data = zend_symtable_find(ht, Z_STR_P(offset));

			if (data) {
				if (Z_TYPE_P(data) == IS_INDIRECT) {
					data = Z_INDIRECT_P(data);
					if (Z_TYPE_P(data) == IS_UNDEF) {
						zend_error(E_NOTICE,"Undefined index: %s", Z_STRVAL_P(offset));
					} else {
						zval_ptr_dtor(data);
						ZVAL_UNDEF(data);
						ht->u.v.flags |= HASH_FLAG_HAS_EMPTY_IND;
						zend_hash_move_forward_ex(ht, spl_array_get_pos_ptr(ht, intern));
						if (spl_array_is_object(intern)) {
							spl_array_skip_protected(intern, ht);
						}
					}
				} else if (zend_symtable_del(ht, Z_STR_P(offset)) == FAILURE) {
					zend_error(E_NOTICE, "Undefined index: %s", Z_STRVAL_P(offset));
				}
			} else {
				zend_error(E_NOTICE, "Undefined index: %s", Z_STRVAL_P(offset));
			}
		}
		break;
	case IS_DOUBLE:
		index = (zend_long)Z_DVAL_P(offset);
		goto num_index;
	case IS_RESOURCE:
		index = Z_RES_HANDLE_P(offset);
		goto num_index;
	case IS_FALSE:
		index = 0;
		goto num_index;
	case IS_TRUE:
		index = 1;
		goto num_index;
	case IS_LONG:
		index = Z_LVAL_P(offset);
num_index:
		ht = spl_array_get_hash_table(intern);
		if (zend_hash_index_del(ht, index) == FAILURE) {
			zend_error(E_NOTICE, "Undefiend offset: " ZEND_LONG_FMT, index);
		}
		break;
	case IS_REFERENCE:
		ZVAL_DEREF(offset);
		goto try_again;
	default:
		zend_error(E_WARNING, "Illegal offset type");
		return;
	}
} /* }}} */

static void spl_array_unset_dimension(zval *object, zval *offset) /* {{{ */
{
	spl_array_unset_dimension_ex(1, object, offset);
} /* }}} */

static int spl_array_has_dimension_ex(int check_inherited, zval *object, zval *offset, int check_empty) /* {{{ */
{
	spl_array_object *intern = Z_SPLARRAY_P(object);
	zend_long index;
	zval rv, *value = NULL, *tmp;

	if (check_inherited && intern->fptr_offset_has) {
		SEPARATE_ARG_IF_REF(offset);
		zend_call_method_with_1_params(object, Z_OBJE_P(object), &intern->fptr_offset_has, "offsetExists", &rv, offset);
		zval_ptr_dtor(offset);

		if(!Z_ISUNDEF(rv) && zend_is_true(&rv)) {
			zval_ptr_dtor(&rv);
			if (check_empty != 1) {
				return 1; 
			} else if (intern->fptr_offset_get) {
				value = spl_array_read_dimension_ex(1, object, offset, BP_VAR_R, &rv);
			}
		} else {
			zval_ptr_dtor($rv);
			return 0;
		}
	}

	if(!value) {
		HashTable *ht = spl_array_get_hash_table(intern);

try_again:
		switch (Z_TYPE_P(offset)) {
			case IS_STRING:
				if ((tmp = zend_symtable_find(ht, Z_STR_P(offset))) != NULL) {
					if (check_empty == 2) {
						return 1;
					}
				} else {
					return 0;
				}
				break;
			case IS_DOUBLE:
				index = (zend_long)Z_DVAL_P(offset);
				goto num_index;
			case IS_RESOURCE:
				index = Z_RES_HANDLE_P(offset);
				goto num_index;
			case IS_FALSE:
				index = 0;
				goto num_index;
			case IS_TRUE:
				index = 1;
				goto num_index;
			case IS_LONG:
				index = Z_LVAL_P(offset);
num_index:
				if ((tmp = zend_hash_index_find(ht, index)) != NULL) {
					if (check_empty == 2) {
						return 1;
					}
				} else {
					return 0;
				}
				break;
			case IS_REFERENCE:
				ZVAL_DEREF(offset);
				goto try_again;
			default:
				zend_error(E_WARNING, "Illegal offset type");
				return 0;
		}

		if (check_empty && check_inherited && intern->fptr_offset_get) {
			value = spl_array_read_dimension_ex(1, object, offset, BP_VAR_R, &rv);
		} else {
			value = tmp;
		}
	}

	{
		zend_bool result = check_empty ? zend_is_true(value) : Z_TYPE_P(value) != IS_NULL;
		if (value == &rv) {
			zval_ptr_dtor(&rv);
		}
		return result;
	}
} /* }}} */

static int spl_array_has_dimension(zval *object, zval *offset, int check_empty) /* {{{ */
{
	return spl_array_has_dimension_ex(1, object, offset, check_empty);
} /* }}} */

/* {{{ spl_array_object_verify_pos_ex */
static inline int spl_array_object_verify_pos_ex(spl_array_object *object, HashTable *nt, const char *msg_prefix)
{
	if (!ht) {
		php_error_docref(NULL, E_NOTICE, "%sArray was modified outside object and is no longer an array", msg_prefix);
		return FAILURE;
	}

	return SUCCESS;
} /* }}} */

/* {{{ spl_array_object_verify_pos */
static inline int spl_array_object_verify_pos(spl_array_object *object, HashTable *ht)
{
	return spl_array_object_verify_pos_ex(object, ht, "");
} /* }}} */

/* {{{ proto bool ArrayObject::offsetExists(mixed $index)
	   proto bool ArrayIterator::offsetExists(mixed $index)
	Returns whether the requested $index exists. */
SPL_METHOD(Array, offsetExists)
{
	zval *index;
	if (zend_parse_parameters(ZEND_NUM_ARGS(), "z", &index) == FAILURE) {
		return;
	}
	RETURN BOOL(spl_array_has_dimension_ex(0, getThis(), index, 2));
} /* }}} */

/* {{{ proto mixed ArrayObject::offsetGet(mixed $index)
	   proto mixed ArrayIterator::offsetGet(mixed $index)
	Returns the value at the specified $index. */
SPL_METHOD(Array, offsetExists)
{
	zval *index;
	if (zend_parse_parameters(ZEND_NUM_ARGS(), "z", &index) == FAILURE) {
		return;
	}
	RETURN_BOOL(spl_array_has_dimension_ex(0, getThis(), index, 2));
} /* }}} */

/* {{{ proto mixed ArrayObject::offsetGet(mixed $index)
	   proto mixed ArrayIterator::offsetGet(mixed $index)
	Returns the value at the specified $index. */ 
SPL_METHOD(Array, offsetGet)
{
	zval *value, *index;
	if (zend_parse_parameters(ZEND_NUM_ARGS(), "z", &index) == FAILURE) {
		return;
	}
	value = spl_array_read_dimension_ex(0, getThis(), index, BP_VAR_R, return_value);
	if (value != return_value) {
		ZVAL_DEREF(value);
		ZVAL_COPY(return_value, value);
	}
} /* }}} */

/* {{{ proto void ArrayObject::offsetSet(mixed $index, mixed $newval)
	   proto void ArrayIterator::offsetSet(mixed $index, mixed $newval)
	Sets the value at the specified $index to $newval. */
SPL_METHOD(Array, offsetSet)
{
	zval *index, *value;
	if (zend_parse_parameters(ZEND_NUM_ARGS(), "zz", &index, &value) == FAILURE) {
		return;
	}
	spl_array_write_dimension_ex(0, getThis(), index, value);
} /* }}} */

void spl_array_iterator_append(zval *object, zval *append_value) /* {{{ */
{
	spl_array_object *intern = Z_SPLARRAY_P(object);
	HashTable *aht = spl_array_get_hash_table(intern);

	if(!aht) {
		php_error_docref(NULL, E_NOTICE, "Array was modified outside object and is no logner na aray");
		return;
	}

}}}}
}}}}

I could keep going with these, but i cba, they repeat.

RecursiveArrayIterator::getChildren:

RecursiveArrayIterator::getChildren - Returns an iterator for the current entry if it is
an array or an object.

Desc:

public RecursiveArrayIterator RecursiveArrayIterator::getChildren()

Returns an iterator for the current iterator entry

Params: None

Returns: An iterator for the current entry, if it is an array or object.

Errors/Exceptions:

An InvalidArgumentException will be thrown if the current entry does not contain
an array or an object.

Examples:

Example #1 RecursiveArrayIterator::getChildren() example

<?php
$fruits = array("a" => "lemon", "b" => "orange", array("a" => "apple", "p" => "pear"));

$iterator = new RecursiveArrayIterator($fruits);

while ($iterator->valid()) {
	if ($iterator->hasChildren()) {
		//Print all children
		foreach ($iterator->getChildren() as $key => $value) {
			echo $key . ' : ' . $value . "\n";
		}
	} else {
		echo "No children.\n";
	}

	$iterator->next();
}
?>

The above will output:

No children.
No children.
a : apple
p : pear

RecursiveArrayIterator::getChildrens returns a copy of the children, not a reference:

<?php
$stack = array ("some" => "value",
				array ("subsome" => "subvalue", array ("subsubsome" => "subsubvalue")),
				"some1" => "value1");

$object = new RecursiveArrayIterator($stack);
$object->next();
$second_object = &$object->getChildren();

$second_object->next();

$third_object = &$second_object->getChildren();

$third_object->offsetSet("subsubsome", "subsubdifferent");

var_dump($object);
var_dump($second_object);
var_dump($third_object);
?>

Returns:

object(RecursiveArrayIterator)#1 (1) {
	["storage":"ArrayIterator":private]=>
	array(3) {
		["some"]=>
		string(5) "value"
		[0]=>
		array(2) {
			["subsome"]=>
			string(8) "subvalue"
			[0]=>
			array(1) {
				["subsubsome"]=>
				string(11) "subsubvalue" <--- expected to be changed

			}
		}
		["some1"]=>
		string(6) "value1"
	}
}
object(RecursiveArrayIterator)#2 (1) {
	["storage":"ArrayIterator":private]=>
	array(2) {
		["subsome"]=>
		string(8) "subvalue"
		[0]=>
		array(1) {
			["subsubsome"]=>
			string(11) "subsubvalue" <-- expected to be changed
		}
	}
}
object(RecursiveArrayIterator)#3 (1) {
	["storage":"ArrayIterator":private]=>
	array(1) {
		["subsubsome"]=>
		string(14) "subsubdiferent"
	}
}

RecursiveArrayIterator::hasChildren:

RecursiveArrayIterator::hasChildren - Retrurns whether current entry is an array or an object.

Desc:

public bool RecursiveArrayIterator::hasChildren()

Returns whether the current entry is an array or an object for which an iterator can be
obtained via RecursiveArrayIterator::getChildren()

Params: None

Returns: True if the current entry is an array or object, otherwise FALSE is returned

Examples:

Example #1 RecursiveArrayIterator::hasChildren() example

<?php
$fruits = array("a" => "lemon", "b" => "orange", array("a" => "apple", "p" => "pear"));

$iterator = new RecursiveArrayIterator($fruits);

while ($iterator->valid()) {
	
	//Check if there are children
	if ($iterator->hasChildren()) {
		//Print all children
		foreach ($iterator->getChildren() as $key => $value) {
			echo $key . ' : ' . $value . "\n";
		}
	} else {
		echo "No children.\n";
	}

	$iterator->next();
}
?>

The above outputs:

No children.
No children.
a : apple
p : pear

hasChildren() works as documented here, but not as its name suggests.

The method does not return whether the current entry actually *has* children. It only returns
whether the element's type is one that is able to have children.

This is a bit counterintuitive if you are processing empty arrays.

Example:

<?php
$data = array(
	"element one" => array(true),
	"element two" => array(),
	"element three" => array(true),
);

$i = new RecursiveIteratorIterator(new RecursiveArrayIterator($data), RecursiveIteratorIterator::SELF_FIRST);

foreach($i as $key => $value)
{
	$type = gettype($value);
	$depth = $i->getDepth();

	if($i->hasChildren()) {
		echo "$depth: $key ($type) has children\n";
	} else {
		echo "$depth: $key ($type) has no children\n";
	}
}
?>

Result:

0: element one (array) has children
1: 0 (boolean) has no children
0: element two (array) has children
0: element three (array) has children
1: 0 (boolean) has no children

The RecursiveCachingIterator class

Intro: ?

Class synopsis:

RecursiveCachingIterator extends CachingIterator implements Countable, ArrayAccess, OuterIterator, RecursiveIterator
{
	//Methods
	public __construct ( Iterator $iterator [, string $flags = self::CALL_TOSTRING ])
	public RecursiveCachingIterator getChildren()
	public bool hasChildren()

	//Inherits
	public CachingIterator::__construct ( Iterator $iterator [, int $flags = self::CALL_TOSTRING ])
	public int CachingIterator::count()
	public void CachingIterator::current()
	public array CachingIterator::getCache()

	public int CachingIterator::getFlags()
	public Iterator CachingIterator::getInnerIterator()
	public void CachingIterator::hasNext()
	public scalar CachingItertator::key()
	public void CachingIterator::next()

	public void CachingIterator::offsetExists(string $index)
	public void CachingIterator::offsetGet(string $index)
	public void CachingIterator::offsetSet(string $index, string $newval)
	public void CachingIterator::offsetUnset( string $index )
	public void CachingIterator::rewind()

	public void CachingIterator::setFlags( int $flags )
	public void CachingIterator::__toString()
	public void CachingIterator::valid()
}

Table of Contents:

RecursiveCachingIterator::__construct - Construct
RecursiveCachingIterator::getChildren - Return the inner iterator's children as a RecursiveCachingIterator
RecursiveCachingIterator::hasChildren - Check whether the current element of the inner iterator has children

RecursiveCachingIterator::__construct:

RecursiveCachingIterator::__construct - Construct

Desc:

public RecursiveCachingIterator::__construct ( Iterator $iterator [, string $flags = self::CALL_TOSTRING ])

Constructs a new RecursiveCachingIterator, which consists of a passed in iterator.

Warning: This function is currently not documented, only arg list is available.

Params:

iterator: The iterator being used.

flags: The flags. Use CALL_TOSTRING to call RecursiveCachingIterator::__toString() for every element
(the default), and/or CATCH_GET_CHILD to catch exceptions when trying to get children.

Returns:

The RecursiveCachingIterator

See Also:

CachingIterator::__construct() - Constructs a new CachingIterator object for the iterator

RecursiveCachingIterator::getChildren:

RecursiveCachingIterator::getChildren - Return the inner iterator's children as a RecursiveCachingIterator

Desc:

public RecursiveCachingIterator RecursiveCachingIterator::getChildren()

Warning: This function is currently not documented, only arg list exists

Params: None

Returns: The inner iterator's children, as a RecursiveCachingIterator

RecursiveCachingIterator::hasChildren:

RecursiveCachingIterator::hasChildren - Check whether the current element of the inner iterator
has children

Desc:

public bool RecursiveCachingIterator::hasChildren()

Warning: This function is currently not documented, only arg list exists

Params: None

Returns: TRUE if the inner iterator has children, otherwise False

The RecursiveCallbackFilterIterator class:

Intro:

Class Synopsis:

RecursiveCallbackFilterIterator extends CallbackFilterIterator implements OuterIterator, RecursiveIterator {
	//Methods
	public __construct ( RecursiveIterator $iterator, string $callback )
	public RecursiveCallbackFilterIterator getChildren()
	public bool hasChildren()

	//Inherited methods
	public string CallbackFilterIterator::accept()
}

Examples:

The callback should accept up to three arguments: the current item, the current key, and the iterator, respectively.

Example #1 Available callback arguments

<?php

/**
 * Callback for RecursiveCallbackFilterIterator
 *
 * @param $current 	Current item's value
 * @param $key 		Current item's key
 * @param $iterator Iterator being filtered
 * @return boolean 	TRUE to accept the current item, FALSE otherwise
 */
function my_callback($current, $key, $iterator) {
	//Your filtering code here
}

?>

Filtering a recursive iterator generally involves two conditions. The first is that, to allow recursion,
the callback function should return TRUE if the current iterator item has children. The second is the
normal filter condition, such as a file size or extension check as in the example below.

Example #2 Recursive callback basic example

<?php

$dir = new RecursiveDirectoryIterator(__DIR__);

//Filter large files ( > 100MB)
$files = new RecursiveCallbackFilterIterator($dir, function ($current, $key, $iterator) {
	//Allow recursion
	if ($iterator->hasChildren()) {
		return TRUE;
	}
	//Check for large file
	if ($current->isFile() && $current->getSize() > 104857600) {
		return TRUE;
	}
	return FALSE;
});

foreach (new RecursiveIteratorIterator($files) as $file) {
	echo $file->getPathname() . PHP_EOL;
}

?>

Table of Contents:

RecursiveCallbackFilterIterator::__construct - Create a RecursiveCallbackFilterIterator from a RecursiveIterator
RecursiveCallbackFilterIterator::getChildren - Return the inner iterator's children contained in a RecursiveCallbackFilterIterator
RecursiveCallbackFilterIterator::hasChildren - Check whether the inner iterator's currente lement has children

Here is a code that may implement similar functionality in PHP 5.2 or 5.3:

<?php

class RecursiveCallbackFilterIterator extends RecursiveFilterIterator {
	
	public function __construct ( RecursiveIterator $iterator, $callback ) {
		$this->callback = $callback;

		parent::__construct($iterator);
	}

	public function accept () {
		$callback = $this->callback;

		return $callback(parent::current(), parent::key(), parent::getInnerIterator());
	}

	public function getChildren() {
		return new self($this->getInnerIterator()->getChildren(), $this->callback);
	}
}

?>

RecursiveCallbackFilterIterator::__construct:

RecursiveCallbackFilterIterator::__construct - Create a RecursiveCallbackFilterIterator from a RecursiveIterator

Desc:

public RecursiveCallbackFilterIterator::__construct( RecursiveIterator $iterator, string $callback )

Creates a filtered iterator from a RecursiveIterator using the callback to determine which 
items are accepted or rejected.

Params:

iterator: The recursive iterator to be filtered.

callback: The callback, which should return TRUE to accept the current item or FALSE otherwise.
See examples.

May be any valid callable value.

Returns: Nothing

RecursiveCallbackFilterIterator::getChildren:

RecursiveCallbackFilterIterator::getChildren - Return the inner iterator's children contained in a
RecursiveCallbackFilterIterator

Desc:

public RecursiveCallbackFilterIterator RecursiveCallbackFilterIterator::getChildren()

Fetches the filtered children of hte inner iterator

RecursiveCallbackFilterIterator::hasChildren() should be used to determine if there are children
to be fetched

Params: None

Returns: Returns a RecursiveCallbackFilterIterator containing the children.

RecursiveCallbackFilterIterator::hasChildren:

RecursiveCallbackFilterIterator::hasChildren - Check whether the inner iterator's current
element has children

Desc:

public bool RecursiveCallbackFilterIterator::hasChildren()

Returns TRUE if the current element has children, FALSE otherwise.

Params: None

Returns: TRUE if the current element has children, FALSE otherwise.

Examples:

Example #1 RecursiveCallbackFilterIterator::hasChildren() basic usage

<?php

$dir = new RecursiveDirectoryIterator(__DIR__);

//Recursively iterate over XML files
$files = new RecursiveCallbackFilterIterator($dir, function ($current, $key, $iterator) {
	//Allow recursion into dirs
	if ($iterator->hasChildren()) {
		return TRUE;
	}
	//Check for XML file
	if (!strcasecmp($current->getExtension(), 'xml')) {
		return TRUE;
	}
	return FALSE;
});

?>

The RecursiveDirectoryIterator class:

Intro:

The RecursiveDirectoryIterator provides an interface for iterating recursively over filesystem
dirs.

Class synopsis:

RecursiveDirectoryIterator extends FilesystemIterator implements SeekableIterator, RecursiveIterator {
	//Methods
	public __construct ( string $path [, int $flags = FilesystemIterator::KEY_AS_PATHNAME |
	FilesystemIterator::CURRENT_AS_FILEINFO ] )
	public mixed getChildren()
	public string getSubPath()
	public string getSubPathname()
	public bool hasChildren ([ bool $allow_links = false ])
	public string key()
	public void next()
	public void rewind()

	//Inherits
	public FilesystemIterator::__construct ( string $path [, int $flags = FilesystemIterator::KEY_AS_PATHNAME |
	FilesystemIterator::CURRENT_AS_FILEINFO | FilesystemIterator::SKIP_DOTS ])
	public mixed FilesystemIterator::current()
	public int FilesystemIterator::getFlags()
	public string FilesystemIterator::key()

	public void FilesystemIterator::next()
	public void FilesystemIterator::rewind()
	public void FilesystemIterator::setFlags ([ int $flags ])

}

Changelog:

Version 		desc

5.3.0 			The FilesystemIterator was introduced as the parent class. Previously, the parent was the DirectoryIterator

5.3.0 			Implements SeekableIterator

5.2.11, 5.3.1 	Added RecursiveDirectoryIterator::FOLLOW_SYMLINKS

Table of Contents:

RecursiveDirectoryIterator::__construct - Constructs a RecursiveDirectoryIterator
RecursiveDirectoryIterator::getChildren - Returns an iterator for the current entry if it
is a dir
RecursiveDirectoryIterator::getSubPath - Get sub pathh
RecursiveDirectoryIterator::getSubPathname - Get sub path and name
RecursiveDirectoryIterator::hasChildren - Returns whether current entry is a dir and not '.' or '..'
RecursiveDirectoryIterator::key - Return path and filename of current dir entry
RecursiveDirectoryIterator::next - Move to next entry
RecursiveDirectoryIterator::rewind - Rewind dir back to the start

If you would like to get, say, all the *.php files in your project folder, recursively, you could 
use the following:

<?php

$Directory = new RecursiveDirectoryIterator('path/to/project/');
$Iterator = new RecursiveIteratorIterator($Directory);
$Regex = new RegexIterator($Iterator, '/^.+\.php$/i', RecursiveRegexIterator::GET_MATCH);

?>

$Regex will contain a single index array for each PHP file

Usage example:

<?php

$path = realpath('/etc');

$objects = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($path), RecursiveIteratorIterator::SELF_FIRST);
foreach($objects as $name => $object){
	echo "$name\n";
}

?>

This prints a list of all files and dirs under $path (including $path itself). If you want to omit dirs,
remove the RecursiveIteratorIterator::SELF_FIRST part.

Since i continue to run into implementations across the net that are unintentionally running into this trap, beware:

RecursiveDirectoryIterator recurses without limitations into the full filesystem tree.

Do NOT do the following, unless oyu intentionally want to inifnitely recurse without limitations:

<?php
$directory = new \RecursiveDirectoryIterator($path);
$iterator = new \RecursiveIteratorIterator($directory);
$files = array();
foreach ($iterator as $info) {
	if (...custom conditions...) {
		$files[] = $info->getPathname();
	}
}
?>

1. RecursiveDirectoryIterator is just a RecursiveIterator that recurses into its children, unitl no more
children are found.

2. The instantiation of RecursiveIteratorIterator causes RecursiveDirectoryIterator to *immediately* recuses
infinitely into the entire filesystem tree (starting from the given base path).

3. Unnecessary filesystem recursion is slow. in 90% of all cases, this is not what oyu want.

Remember htis simple rule of thumb:

> A RecursiveDirectoryIterator must be FILTERED or you have a solid reason for why it should not

On PHP <5.4, implement the following - your custom conditions move into a proper filter:

<?php
$directory = new \RecursiveDirectoryIterator($path, \FilesystemIterator::FOLLOW_SYMLINKS);
$filter = new MyRecursiveFilterIterator($directory);
$iterator = new \RecursiveIteratorIterator($filter);
$files = array();
foreach ($iterators as $info) {
	$files[] = $info->getPathname();
}

class MyRecursiveFilterIterator extends \RecursiveFilterIterator {
	
	public function accept() {
		$filename = $this->current()->getFilename();
		//Skip hidden files and dirs
		if ($name[0] === '.') {
			return FALSE;
		}
		if ($this->isDir()) {
			//only recurse into intended subdirs
			return $name === 'wanted_dirname';
		}
		else {
			//Only consume files of interest
			return strpos($name, 'wanted_filename') === 0;
		}
	}
}
?>

On PHP 5.4+, PHP core addressed the slightly cumbersome issue of having to create an entirely
new class and you can leverage teh new RecursiveCallbackFilterIterator instead:

<?php
$directory = new \RecursiveDirectoryIterator($path, \FilesystemIterator::FOLLOW_SYMLINKS);
$filter = new \RecursiveCallbackFilterIterator($directory, function($current, $key, $iterator) {
	//SKip hidden files and dirs
	if ($current->getFilename()[0] === '.') {
		return FALSE;
	}
	if ($current->isDir()) {
		//Only recurse into intended subdirs
		return $current->getFilename() === 'wanted_dirname';
	}
	else {
		// only consume files of interest
		return strpos($current->getFilename(), 'wanted_filename') === 0;
	}
});
$iterator = new \RecursiveIteratorIterator($filter);
$files = array();
foreach ($iterator as $info) {
	$files[] = $info->getPathname();
}
?>

In this doc page i see things for to hide hidden files (also for opendir() or readdir() ... this should be mentioned
all there)::

<?php
// not hidden but on most OS systems Win, *nix, OSX..
if ($file == '.' || $file == '..') {
	// "." current dir info
	// ".." dir above info
		continue;
}
?>

or

<?php
if $name[0] === '.' //NOT OK folks
?>

Think:
"... and then came Polly.avi" is the title of the Movi. What do you do then?

Windows does it different with hidden files than unix based OSs.

For unix based systems something like this should work:
<?php
if (preg_match('/^(\.\w+|\.$|\.\.$)/i', $location)) {
	//Is hiden:
	// .
	// ..
	// .dir
	// .file
}
//Must be ok: "..some thing", "... some thing"
?>

I know you do it (if $name[0] === '.') because it is much faster. But it is NOT correct and
some day you miss things.

If you need to convert a nested dir tree into a multidimensional array, use this code:

<?php
$ritit = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($startpath),
RecursiveIteratorIterator::CHILD_FIRST);
$r = array();
foreach ($ritit as $splFileInfo) {
	$path = $splFileInfo->isDir()
		  ? array($splFileInfo->getFilename() => array())
		  : array($splFileInfo->getFilename());

	for ($depth = $ritit->getDepth() - 1; $depth >= 0; $depth--) {
		$path = array($ritit->getSubIterator($depth)->current()->getFilename() => $path);
	}
	$r = array_merge_recursive($r, $path);
}

print_r($r);
?>

Usage example:
To see all the files, and count the space usage:

<?php
$ite=new RecursiveDirectoryIterator("/path/");

$bytestotal=0;
$nbfiles=0;
foreach (new RecursiveIteratorIterator($ite) as $filename=>$cur) {
	$filesize=$cur->getSize();
	$bytestotal += $filesize;
	$nbfiles++;
	echo "$filename => $filesize\n";
}

$bytestotal = number_format($bytestotal);
echo "Total: $nbfiles files, $bytestotal bytes\n";
?>

If you use RecursiveDirectoryIterator with RecursiveIteratorIterator and run into UnexpectedValueException
you may use this little hack to ignore those dirs, such as lost+found on Linux.

<?php
class IgnorantRecursiveDirectoryIterator extends RecursiveDirectoryIterator {
	function getChildren() {
		try {
			return new IgnorantRecursiveDirectoryIterator($this->getPathname());
		} catch (UnexpectedValueException $e) {
			return new RecursiveArrayIterator(array());
		}
	}
}
?>

Use just like the normal RecursiveDirectoryIterator.

The returned object is an iterator of SplFileInfo objects.

I tried to use RecursiveDirectoryIterator to dump all files (and their props, such as size/is_link/is_dir/mtime/perms/owner/group)
form a large dir (~400.000 files), filtering some specific wanted files/folders.

Using RecursiveDirectoryIterator and SplFileInfo, dump was taking about 50 secs to perform, but it was working.

However, to improve performance, i decided to make another version of the same script, using only direct file
functions, such as "readdir", "filesize", "filemtime", etc.., and adding recursivity myself (if(is_dir($path)))
doRecursivity($path);

After running it, script went from 50s to only 20s to complete (on Linux CentOS 7, SSD 300IPs)

Strangely, on Windows 7, Sata3 (with exactly same files [mirrored]) the time went from ~63 to 57s

I believe that this payload is due to the OO approach of SPL, which runs lots of unecessary extra code
to perform the same tasks with more reliability, while direct file functions are more like alias to
C corresponding functions, and thereover, must faster.

So, if you are dealing with a large amount of files, using RecursiveDirectoryIterator is probably
not the way to go.

If you want to copy all files recursively from a source dir to some destination:

$directory = new RecursiveDirectoryIterator("./source_path/");

foreach (new RecursiveIteratorIterator($directory) as $filename=>$current) {
	$src = $current->getPathName();
	$dest = "./destination_path/" . $current->getFileName();

	echo "copy " . $src . " => " . $dest . "\n";

	copy($src, $dest);
}

I hope it can help someone.

There is a difference between Windows and Linux about the order of the files.

<?php
$it = new RecursiveIteratorIterator(
	new RecursiveDirectoryIterator( 'path/to/dir' )
	//, does not matter the flag
	);
...
?>

On Windows, you will get the files ordered by name. On Linux, they are unordered.

Realted to a post about exceptions in getChildren().

Instead of subclassing you can simply use the CATCH_GET_CHILD flag for RecursiveIteratorIterator

new RecursiveIteratorIterator($diriter, RecursiveIteratorIterator::CATCH_GET_CHILD);

RecursiveDirectoryIterator::__construct:

RecursiveDirectoryIterator::__construct - Constructs a RecursiveDirectoryIterator

Desc:

public RecursiveDirectoryIterator::__construct ( string $path [, int $flags = FilesystemIterator::KEY_AS_PATHNAME |
FilesystemIterator::CURRENT_AS_FILEINFO ])

Constructs a RecursiveDirectoryIterator() for the provided path

Params:

path: The path of the dir to be iterated over

flags: Flags may be provided which will affect the behavior of some methods. A list of the
flags can be found under FilesystemIterator predefiend constants. They can also be set later
with FilesystemIterator::setFlags()

Returns: The newly created RecursiveDirectoryIterator

Errors/Exceptions:

Throws an UnexpectedValueException if the path cannot be found or is not a dir.

Examples:

Example #1 RecursiveDirectoryIterator example

<?php
$directory = '/tmp';

$it = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($directory));

$it->rewind();
while($it->valid()) {
	if(!$it->isDot()) {
		echo 'SubPathName: ' . $it->getSubPathName() . "\n";
		echo 'SubPath: 	   ' . $it->getSubPath() . "\n";
		echo 'Key: 		   ' . $it->key() . "\n\n";
	}

	$it->next();
}

?>

The above outputs something akin to:

SubPathName: fruit/apple.xml
SubPath: 	 fruit
Key: 		 /tmp/fruit/apple.xml

SubPathName: stuff.xml
SubPath:
Key: 		 /tmp/stuff.xml

SubPathName: veggies/carrot.xml
SubPath: 	 veggies
Key: 		 /tmp/veggies/carrot.xml

You can use RecursiveDirectoryIterator::FOLLOW_SYMLINKS as a flag to the constructor to
have RecursiveDirectoryIterator follow symlinks, which it does not do by default.

The two default flags are zero (virtual) as with my PHP versions (5.3 and 5.4). Which means
you can not check if those are set or not with & bitwise operator:

<?php
//CURRENT_AS_FILEINFO (0)
//KEY_AS_PATHNAME (0)

### always FALSE ###
$directoryIterator->getFlags() & RecursiveDirectoryIterator::CURRENT_AS_FILEINFO;

?>

But this also allows that you can use other flags right ahead without repeating the
default ones:

<?php
new RecursiveDirectoryIterator(
	'.',
	FilesystemIterator::UNIX_PATHS
);
?>

There is no need to repeat the default flags. please note that this is different to FilesystemIterator which
has as well the SKIP_DOTS flag as default which is non-zero:

<?php
new RecursiveDirectoryIterator(
	'.',
	FilesystemIterator::SKIP_DOTS
		| FilesystemIterator::UNIX_PATHS
);
?>

RecursiveDirectoryIterator::getChildren:

RecursiveDirectoryIterator::getChildren - Returns an iterator for the current entry if it is a dir

Desc:

public mixed RecursiveDirectoryIterator::getChildren()

Warning: This function is currently not documented, only arg list exists

Params: None

Returns: The file name, file info, or $this depending on the set flags. See the
FilesystemIterator constants.

RecursiveDirectoryIterator::getSubPath:

RecursiveDirectoryIterator::getSubPath - get sub path

Desc:

public string RecursiveDirectoryIterator::getSubPath()

Gets the sub path

Warning: This function is currently not documented, only arg list exists

Params: None

Returns: The sub path (sub dir)

RecursiveDirectoryIterator::getSubPathname:

RecursiveDirectoryIterator::getSubPathname - Get sub path and name

Desc:

public string RecursiveDirectoryIterator::getSubPathname()

Gets the sub path and filename.

Warning: This function is not documented, only arg list exists.

Params: none

Returns: The sub path (sub dir) and filename.

RecursiveDirectoryIterator::hasChildren:

RecursiveDirectoryIterator::hasChildren - Returns whether current entry is a dir and not '.' or '..'

Desc:

public bool RecursiveDirectoryIterator::hasChildren ([ bool $allow_links = false ])

Warning: This function is currently not documented; only arg list exists

Params: allow_links

Returns: Returns whether the current entry is a dir, but not '.' or '..'

RecursiveDirectoryIterator::key:

RecursiveDirectoryIterator::key - Return the path and filename of current dir entry

Desc:

public string RecursiveDirectoryIterator::key()

Warning: This function is currently not documented, only arg list exists

Params: None

Returns: The path and filename of the current dir entry

RecursiveDirectoryIterator::next:

RecursiveDirectoryIterator::next - move to the enxt entry

desc:

public void RecursiveDirectoryIterator::next()

Warning: this function is not documented, only arg list exists

Params: None

Returns: Nothing

RecursiveDirectoryIterator::rewind:

RecursiveDirectoryIterator::rewind - Rewind dir back to the start

Desc:

public void RecursiveDirectoryIterator::rewind()

Warning: This function is not documented, only arg list exists

Params: None

Returns: Nothing

The RecursiveFilterIterator class:

Intro:

This abstract iterator filters out unwanted values for a RecursiveIterator. This class should be extended
to implement custom filters. The RecursiveFilterIterator::accept() must be implemented in the subclass.

Class synopsis:

abstract RecursiveFilterIterator extends FilterIterator implements OuterIterator, RecursiveIterator {
	
	//Methods
	public __construct ( RecursiveIterator $iterator )
	public RecursiveFilterIterator getChildren()
	public bool hasChildren()

	//Inherited methods
	public abstract bool FilterIterator::accept()
	public FilterIterator::__construct ( Iterator $iterator )
	public mixed FilterIterator::current()
	public Iterator FilterIterator::getInnerIterator()

	public mixed FilterIterator::key()
	public void FilterIterator::next()
	public void FilterIterator::rewind()
	public bool FilterIterator::valid()
}

Table of Contents:

RecursiveFilterIterator::__construct - Create a RecursiveFilterIterator from a RecursiveIterator
RecursiveFilterIterator::getChildren - Return the inner iterator's children contained in a RecursiveFilterIterator
RecursiveFilterIterator::hasChildren - Check whether the inner iterator's current element has children

Recursive directory/file listing, filters ".svn":

<?php

class MyRecursiveFilterIterator extends RecursiveIteratorFilter {
	
	public static $FILTERS = array(
		'.svn'
	);

	public function accept() {
		return !in_array(
			$this->current()->getFilename(),
			self::$FILTERS,
			true
		);

	}
}

$dirItr = new RecursiveDirectoryIterator('/sample/path');
$filterItr = new MyRecursiveFilterIterator($dirItr);
$itr 	= new RecursiveIteratorIterator($filterItr, RecursiveIteratorIterator::SELF_FIRST);
foreach ($itr as $filePath => $fileInfo) {
	echo $fileInfo->getFilename() . PHP_EOL;
}

?>

I had to create a filter to get values greater than a certain number in a multidimensional array.

Hope someone else finds it helpful:

<?php
class GreaterThanFilter extends RecursiveFilterIterator {
	protected $limit;

	public function __construct(RecursiveIterator $recursiveIter, $limit) {
		$this->limit = $limit;
		parent::__construct($recursiveIter);
	}

	public function accept() {
		return $this->hasChildren() || strlen($this->current()) >= $this->limit;
	}

	public function getChildren() {
		return new self($this->getInnerIterator()->getChildren(), $this->limit);
	}
}
$iter = new RecursiveArrayIterator($array);
$filter = new GreaterThanFilter($iter, 5);

foreach(new RecursiveIteratorIterator($filter) as $key => $value)
{
	echo $value . "\n";
}
?>

RecursiveFilterIterator::__construct:

RecursiveFilterIterator::__construct - Create a RecursiveFilterIterator from a RecursiveIterator

Desc:

public RecursiveFilterIterator::__construct ( RecursiveIterator $iterator )

Create a RecursiveFilterIterator from a RecursiveIterator

Params:

iterator: The RecursiveIterator to be filtered.

Returns: None

Examples:

Example #1 Basic RecursiveFilterIterator() example

<?php
class TestsOnlyFilter extends RecursiveFilterIterator {
	public function accept() {
		//Accept the current item if we can recurse into it
		// or it is a value starting with "test"
		return $this->hasChildren() || (strpos($this->current(), "test") !== FALSE);
	}
}

$array = array("test1", array("taste2", "test3", "test4"), "test5");
$iterator = new RecursiveArrayIterator($array);
$filter = new TestsOnlyFilter($iterator);

foreach(new RecursiveIteratorIterator($filter) as $key => $value)
{
	echo $value . "\n";
}
?>

The above example will output something akin to:

test1
test2
test3
test4
test5

Example #2 RecursiveFilterIterator() example

<?php
class StartsWithFilter extends RecursiveFilterIterator {
	
	protected $word;

	public function __construct(RecursiveIterator $rit, $word) {
		$this->word = $word;
		parent::__construct($rit);
	}

	public function accept() {
		return $this->hasChildren() OR strpos($this->current(), $this->word) === 0;
	}

	public function getChildren() {
		return new self($this->getInnerIterator()->getChildren(), $this->word);
	}
}

$array = array("test1", array("taste2", "test3", "test4"), "test5");
$iterator = new RecursiveArrayIterator($array);
$filters = new StartsWithFilter($iterator, "test");

foreach(new RecursiveIteratorIterator($filter) as $key => $value)
{
	echo $value . "\n";
}
?>

the above outputs something akin to:

test1
test3
test4
test5

RecursiveFilterIterator::getChildren:

RecursiveFilterIterator::getChildren - Return the inner iterator's children contained in a 
RecursiveFilterIterator

Desc:

public RecursiveFilterIterator RecursiveFilterIterator::getChildren()

Return the inner iterator's children contained in a RecursiveFilterIterator

Params: None

Returns: Returns a RecursiveFilterIterator containing the inner iterator's children

RecursiveFilterIterator::hasChildren:

RecursiveFilterIterator::hasChildren - Check whether the inner iterator's current element has children.

Desc:

public bool RecursiveFilterIterator::hasChildren()

Check whether the inner iterator's current element has children.

Params: None

Returns: TRUE if the inner iterator has children, otherwise, FALSE

The RecursiveIteratorIterator class:

Intro:

Can be used to iterate through recursive iterators.

Class synopsis:

RecursiveIteratorIterator implements OuterIterator {
	
	//Constants
	const integer LEAVES_ONLY = 0;
	const integer SELF_FIRST = 1;
	const integer CHILD_FIRST = 2;
	const integer CATCH_GET_CHILD = 16;

	//Methods
	public void beginChildren()
	public void beginIteration()
	public RecursiveIterator callGetChildren()
	public bool callHasChildren()
	public __construct ( Traversable $iterator [, int $mode = RecursiveIteratorIterator::LEAVES_ONLY [, int $flags = 0
	]])

	public mixed current()
	public void endChildren()
	public void endIteration()
	public int getDepth()
	public iterator getInnerIterator()
	public mixed getMaxDepth()

	public RecursiveIterator getSubIterator ([ int $level ])
	public mixed key()
	public void next()
	public void nextElement()
	public void rewind()

	public void setMaxDepth ([ string $max_depth = -1 ])
	public bool valid()

	//Inherited methods
	public Iterator OuterIterator::getInnerIterator()
}

Predefined Constants:

RecursiveIteratorIterator::LEAVES_ONLY

RecursiveIteratorIterator::SELF_FIRST

RecursiveIteratorIterator::CHILD_FIRST

RecursiveIteratorIterator::CATCH_GET_CHILD

Table of Contents:

RecursiveIteratorIterator::beginChildren - Begin children
RecursiveIteratorIterator::beginIteration - Begin iteration

RecursiveIteratorIterator::callGetChildren - Get children
RecursiveIteratorIterator::callHasChildren - Has children
RecursiveIteratorIterator::__construct - Construct a RecursiveIteratorIterator

RecursiveIteratorIterator::current - Access the current element value
RecursiveIteratorIterator::endChildren - End children
RecursiveIteratorIterator::endIteration - End iteration

RecursiveIteratorIterator::getDepth - get the current depth of the recursive iteration
RecursiveIteratorIterator::getInnerIterator - get inner iterator
RecursiveIteratorIterator::getMaxDepth - get max depth
RecursiveIteratorIterator::getSubIterator - The current active sub iterator

RecursiveIteratorIterator::key - Access the current key
RecursiveIteratorIterator::next - Move forward to the next element
RecursiveIteratorIterator::nextElement - Next element
RecursiveIteratorIterator::rewind - Rewind the iterator to the first element of the top level inner iterator

RecursiveIteratorIterator::setMaxDepth - Set max depth
RecursiveIteratorIterator::valid - Check whether the current pos is valid

Some speed tests:

<?php
$timer = function ($name = 'default', $unset_timer = TRUE)
{
	static $timers = array();

	if (isset($timers[$name]))
	{
		list($s_sec, $s_mic) = explode(' ', $timers[$name]);
		list($e_sec, $e_mic) = explode(' ', microtime());

		if($unset_timer)
			unset($timers[$name]);

		return $e_sec - $s_sec + ( $e_mic - $s_mic );
	}

	$timers[$name] = microtime();
};

function f1 ($array) {
	$iterator = new RecursiveIteratorIterator(new RecursiveArrayIterator($array),
RecursiveIteratorIterator::SELF_FIRST);
	
	foreach ($iterator as $key => $value) {
		if (is_array($value)) 
			continue;
	}
}

function f2($array) {
	foreach ($array as $key => $value) {
		if(is_array($value))
			f2($value);
	}
}

foreach([100, 1000, 10000, 100000, 1000000] as $num)
{
	$array = [];

	for ($i = 0; ++$i < $num; )
		$array[] = [1,2,3=>[4,5,6=>[7,8,9=>10,11,12=>[13,14,15=>[16,17,18]]]]];

	$timer();
	f1($array);
	printf("RecursiveIteratorIterator: %7d elements -> %.3f sec\n", $num, $timer());

	$timer();
	f2($array);
	printf("Recursive function 		: %7d elements -> %.3f sec\n", $num, $timer());
}

?>

Output (PHP 5.4.9-4ubuntu2.1 (cli) (built: Jun 11 2013 13:10:01))
====================================
RecursiveIteratorIterator: 			100 elements -> 0.007 sec
Recursive function 		 : 			100 elements -> 0.002 sec

RecursiveIteratorIterator: 		   1000 elements -> 0.036 sec
Recursive function 		 : 		   1000 elements -> 0.024 sec

RecursiveIteratorIterator: 		  10000 elements -> 0.425 sec
Recursive function 		 : 		  10000 elements -> 0.263 sec

RecursiveIteratorIterator: 		 100000 elements -> 8.153 sec
Recursive function 		 : 		 100000 elements -> 2.654 sec

RecursiveIteratorIterator: 		1000000 elements -> 474.483 sec
Recursive function 		 : 		1000000 elements -> 26.872 sec

For one million elements, recursive function is faster. Actually, just, overall, recursive function
is faster than doing it with a iTerator 

A very important thing to note about \RecursiveIteratorIterator is that it returns a flattened
array when used with the iterator_to_array function. Ex:

<?php
$arr = array('Zero', 'name'=>'Adil', 'address' => array( 'city' => 'Dubai', 'tel' => array('int' => 971,
'tel' => 12345487)), '' => 'nothing');

$iterator = new \RecursiveIteratorIterator(new \RecursiveArrayIterator($arr));
var_dump(iterator_to_array($iterator,true));
?>

This code will return:

array(6) {
	[0]=>
	string(4) "Zero"
	["name"]=>
	string(4) "Adil"
	["city"]=>
	string(5) "Dubai"
	["int"]=>
	int(91)
	["tel"]=>
	int(12345487)
	[""]=>
	string(7) "nothing"
}

To get the non-flattened proper array, use the getArrayCopy() method, as follows:

$iterator->getArrayCopy()

This will return

array(4) {
	[0]=>
	string(4) "Zero"
	["name"]=>
	string(4) "Adil"
	["address"]=>
	array(2) {
		["city"]=>
		string(5) "Dubai"
		["tel"]=>
		array(2) {
			["int"]=>
			int(91)
			["tel"]=>
			int(12345487)
		}
	}
	[""]=>
	string(7) "nothing"
}

This example demonstrates using the getDepth() method with a RecursiveArrayIterator.

<?php
$tree = array();
$tree[1][2][3] = 'lemon';
$tree[1][4] = 'melon';
$tree[2][3] = 'orange';
$tree[2][5] = 'grape';
$tree[3] = 'pineapple';

print_r($tree);

$arrayiter = new RecursiveArrayIterator($tree);
$iteriter = new RecursiveIteratorIterator($arrayiter);

foreach ($iteriter as $key => $value) {
	$d = $iteriter->getDepth();
	echo "depth=$d k=$key v=$value\n";
}
?>

The output of htis, would be:

Array
(
	[1] => Array
		(
			[2] => Array
				(
					[3] => lemon
				)
			[4] => melon
		)
	[2] => Array
		(
			[3] => orange
			[5] => grape
		)

	[3] => pineapple
)

depth=2 k=3 v=lemon
depth=1 k=4 v=melon
depth=1 k=3 v=orange
depth=1 k=5 v=grape
depth=0 k=3 v=pineapple

You can use this to quickly find all the files (recursively) in a certain dir. This beats maintaining
a stack yourself.

<?php
$directory = "/tmp/";
$fileSPLObjects = new RecursiveIteratorIterator(
				new RecursiveDirectoryIterator($directory),
				RecursiveIteratorIterator::CHILD_FIRST
			);

try {
	foreach($fileSPLObjects as $fullFileName => $fileSPLObject) {
		print $fullFileName . " " . $fileSPLObject->getFilename() . "\n";
	}
}
catch(UnexpectedValueException $e) {
	printf("Directory [%s] contained a dir we can not recurse into", $directory);
}
?>

Note: If there is a dir contained within the dir you are searching in that you have 
no access to read UnexpectedValueException will be thrown (leaving you with an empty
list).

Note: objects returned are SPLFileObjects

if you want traversal dir:

<?php
foreach (new RecursiveIteratorIterator(new RecursiveDirectoryIterator("./")) as $key=>$val)
{
	echo $key . "=>". $val . "\n";
}
?>

Careful when using iterator_to_array(). Because it flattens down your subiterators, elements with
the same keys will overwrite each other.

For example:

<?php

$iterator = new RecursiveIteratorIterator(
	new RecursiveArrayIterator([
		['foo', 'bar'],
		['baz', 'qux']
	])
);

foreach ($iterator as $element) {
	echo $element;
}

?>

This will output all 4 elements as expected:

string(3) "foo"
string(3) "bar"
string(3) "baz"
string(3) "qux"

While doing:

<?php

var_dump(iterator_to_array($iterator));

?>

Will output an array with only the last 2 elements:

array(2) {
	[0]=>
	string(3) "baz"
	[1]=>
	string(3) "qux"
}

This class operates on a tree of elements, which is built by nesting recursive iterators into one
another.

Thus you might say it is an iterator over iterators. While traversing those, the class pushes the
iterators on a stack while traversing down to a leaf and removes them from the stack while 
going back up.

A very useful use case for RecursiveIteratorIterator in combination with RecursiveArrayIterator is to
replace array values on a multidimensional array at any level deep.

Usually, array_walk_recursive would be used to replace values deep within arrays, but sadly, this only
works when there is a standard key value pair - in other words, array_walk_recursive only vists
leaf nodes, not arrays.

Thus, to get around this:

<?php
$array = [
	'test' => 'value',
	'level_one' => [
		'level_two' => [
			'level_three' => [
				'replace_this_array' => [
					'special_key' => 'replacement_value',
					'key_one' => 'testing',
					'key_two' => 'value',
					'four' => 'another value'
				]
			],
			'ordinary_key' => 'value'
		]
	]
];

$arrayIterator = new \RecursiveArrayIterator($array);
$recursiveIterator = new \RecursiveIteratorIterator($arrayIterator, \RecursiveIteratorIterator::SELF_FIRST);

foreach ($recursiveIterator as $key => $value) {
	if (is_array($value) && array_key_exists('special_key', $value)) {
		//here we replace ALL keys with the same value from 'special_key'
		$replaced = array_fill(0, count($value), $value['special_key']);
		$value = array_combine(array_keys($value), $replaced);
		// Set a new key
		$value['new_key'] = 'new value';

		//Get the current depth and traverse back up the tree, saving the modifications
		$currentDepth = $recursiveIterator->getDepth();
		for ($subDepth = $currentDepth; $subDepth >= 0; $subDepth--) {
			// get the current level iterator
			$subIterator = $recursiveIterator->getSubIterator($subDepth);

			//If we are on the level we want to change, use the replacements ($value) otehr wise, set the
			//key to the parent iterators value
			$subIterator->offsetSet($subIterator->key(), ($subDepth === $currentDepth ? $value :
$recursiveIterator->getSubIterator(($subDepth+1))->getArrayCopy()));
		}
	}
}
return $recursiveIterator->getArrayCopy();
//Return:
$array = [
	'test' => 'value',
	'level_one' => [
		'level_two' => [
			'level_three' => [
				'replace_this_array' => [
					'special_key' => 'replacement_value',
					'key_one' => 'replacement_value',
					'key_two' => 'replacement_value',
					'four' => 'replacement_value',
					'new key' => 'new value'
				]
			],
			'ordinary_key' => 'value'
		]
	]
];
?>

The key is in traversing back up the tree to save the changes at that level - simply calling
$recursiveIterator->offsetSet(); will only set a key on the root array.

RecursiveIteratorIterator::beginChildren:

RecursiveIteratorIterator::beginChildren - Begin children.

Desc:

public void RecursiveIteratorIterator::beginChildren()

Is called after calling RecursiveIteratorIterator::getChildren(), and its associated
RecursiveIteratorIterator::rewind()

Warning: This function is currently not documented, only arg list exists

Params: None

Returns: Nothing

RecursiveIteratorIterator::beginIteration:

RecursiveIteratorIterator::beginIteration - Begin iteration

Desc:

public void RecursiveIteratorIterator::beginIteration()

Called when iteration begins (after the first RecursiveIteratorIterator::rewind() call)

Warning: This function is not documented, arg list only exists

Params: None

Returns: Nothing

RecursiveIteratorIterator::callGetChildren:

RecursiveIteratorIterator::callGetChildren - Get children

Desc:

public RecursiveIterator RecursiveIteratorIterator::callGetChildren()

Get the children of the current element

Warning: This function is currently not documented, only arg list exists

Params: None

Returns: A RecursiveIterator()

RecursiveIteratorIterator::callHasChildren:

RecursiveIteratorIterator::callHasChildren - Has children

Desc:

public bool RecursiveIteratorIterator::callHasChildren()

Called for each element to test whether it has children.

Warning: This function is currently not documented, only arg list exists

Params: None

Returns: TRUE if the element has children, otherwise FALSE

RecursiveIteratorIterator::__construct:

RecursiveIteratorIterator::__construct - Construct a RecursiveIteratorIterator

Desc:

public RecursiveIteratorIterator::__construct ( Traversable $iterator [, int $mode = RecursiveIteratorIterator::LEAVES_ONLY [,
	int $flags = 0 ]])

Creates a RecursiveIteratorIterator from a RecursiveITerator

Params:

Iterator: The iterator being constructed from. Either a RecursiveIterator or IteratorAggregate.

Mode: Optional mode. Possible values are:

RecursiveIteratorIterator::LEAVES_ONLY - The default. Lists only leaves in iteration
RecursiveIteratorIterator::SELF_FIRST - Lists leaves and parents in iteration with parents coming first
RecursiveIteratorIterator::CHILD_FIRST - Lists leaves and parents in iteration with leaves coming first

Flags: Optional flag. Possible values are RecursiveIteratorIterator::CATCH_GET_CHILD which will then
ignore exceptions thrown in calls to RecursiveIteratorIterator::getChildren().

Returns: Nothing

Examples:

Example #1 Iterating a RecursiveIteratorIterator

<?php
$array = array(
	array(
		array(
			array(
				'leaf-0-0-0-0',
				'leaf-0-0-0-1'
			),
			'leaf-0-0-0'
		),
		array(
			array(
				'leaf-0-1-0-0',
				'leaf-0-1-0-1'
			),
			'leaf-0-1-0'
		),
		'leaf-0-0'
	)
);

$iterator = new RecursiveIteratorIterator(
	new RecursiveArrayIterator($array),
	$mode
);
foreach ($iterator as $key => $leaf) {
	echo "$key => $leaf", PHP_EOL;
}
?>

Output with $mode = RecursiveIteratorIterator::LEAVES_ONLY

0 => leaf-0-0-0-0
1 => leaf-0-0-0-1
0 => leaf-0-0-0
0 => leaf-0-1-0-0
1 => leaf-0-1-0-1
0 => leaf-0-1-0
0 => leaf-0-0

Output with $mode = RecursiveIteratorIterator::SELF_FIRST

0 => Array
0 => Array
0 => Array
0 => leaf-0-0-0-0
1 => leaf-0-0-0-1
1 => leaf-0-0-0
1 => Array
0 => Array
0 => leaf-0-1-0-0
1 => leaf-0-1-0-1
1 => leaf-0-1-0
2 => leaf-0-0

Output with $mode = RecursiveIteratorIterator::CHILD_FIRST

0 => leaf-0-0-0-0
1 => leaf-0-0-0-1
0 => Array
1 => leaf-0-0-0
0 => Array
0 => leaf-0-1-0-0
1 => leaf-0-1-0-1
0 => Array
1 => leaf-0-1-0
1 => Array
2 => leaf-0-0
0 => Array

Note: The missing documentation of the argument list for this constructor is currently as follows
(according to source code).

Param iter: see RecursiveiTerator

param mode:
- LEAVES_ONLY = (default) only iterate leaves
- SELF_FIRST = iterate parents prior to children
- CHILD_FIRST = iterate children prior to parents

Param flags:
- CATCH_GET_CHILD = ignore exceptions in getChildren() call

Note that LEAVES_ONLY, SELF_FIRST and CHILD_FIRST do not work by themselves.

They are class constants so you need to use RecursiveIteratorIterator::LEAVES_ONLY, etc.

RecursiveIteratorIterator::current:

RecursiveIteratorIterator::current - Access the current element value

Desc:

public mixed RecursiveIteratorIterator::current()

Warning: This function is not documented, only arg list exists

Parms: None

Returns: The current elements value

RecursiveIteratorIterator::endChildren:

RecursiveIteratorIterator::endChildren - End children

Desc:

public void RecursiveIteratorIterator::endChildren()

Called when end recusing one level

Warning: This function is currently not documented, only arg list exists.

Params: None

Returns: Nothing

According to the source code documentation, this function is not implemented.

It is used as a hook. You need to overwrite it in your derived class. Do not call
it yourself, it is called automatically.

Documentation: Template method provided for overriding classes, called after an iterator
has been used up. (Default implementation does nothing)

RecursiveIteratorIterator::endIteration:

RecursiveIteratorIterator::endIteration - End iteration

Desc:

public void RecursiveIteratorIterator::endIteration()

Called when the iteration ends (when RecursiveIteratorIterator::valid() first returns FALSE).

Warning: This function is currently not documented, only arg lists exists

Params: None

Returns: Nothing

This, again, is a template method for overriding classes, default does nothing.

RecursiveIteratorIterator::getDepth:

RecursiveIteratorIterator::getDepth - Get the current depth of the recursive iteration

Desc:

public int RecursiveIteratorIterator::getDepth()

Warning: This function is currently not documented, only arg list exists

Params: None

Returns: The current depth of the recursive iteration.

RecursiveIteratorIterator::getInnerIterator:

RecursiveIteratorIterator::getInnerIterator - Get inner iterator

Desc:

public iterator RecursiveIteratorIterator::getInnerIterator()

Gets the current active sub iterator

Warning: This function is currently not documented, only arg list exists

Params: None

Returns: The current active sub iterator.

RecursiveIteratorIterator::getMaxDepth:

RecursiveIteratorIterator::getMaxDepth - Get max depth

Desc:

public mixed RecursiveIteratorIterator::getMaxDepth()

Gets the maximum allowable depth

Warning: This function is currently not documented, only arg list exists

Params: None

Returns: The maximum accepted depth, or FALSE if any depth is allowed

RecursiveIteratorIterator::getSubIterator:

RecursiveIteratorIterator::getSubIterator - The current active sub iterator

Desc:

public RecursiveIterator RecursiveIteratorIterator::getSubIterator ([ int $level ])

Warning: This function is currently not documented, only arg list exists
 
Params: level

Returns: The current active sub iterator.

RecursiveIteratorIterator::key:

RecursiveIteratorIterator::key - Access the current key

Desc:

public mixed RecursiveIteratorIterator::key()

Warning: this function is currently not documented, only arg list exists

params: None

Returns: The current key

RecursiveIteratorIterator::next:

RecursiveIteratorIterator::next - Move forward to the next element

Desc:

public void RecursiveIteratorIterator::next()

Warning: this function is currently not documented, only arg list exists

Params: None

Returns: Nothing

RecursiveIteratorIterator::nextElement:

RecursiveIteratorIterator::nextElement - Next element

Desc:

public void RecursiveIteratorIterator::nextElement()

Called when the next element is available.

Warning: this function is currently not documented, only arg list exists

Params: None

Returns: Nothing

RecursiveIteratorIterator::rewind:

RecursiveIteratorIterator::rewind - Rewind the iterator to the first element of the top level
inner iterator

Desc:

public void RecursiveIteratorIterator::rewind()

Warning: This function is currently not documented, only arg list exists

params: None

Returns: Nothing

RecursiveIteratorIterator::setMaxDepth:

RecursiveIteratorIterator::setMaxDepth - Set max depth

Desc:

public void RecursiveIteratorIterator::setMaxDepth ([ string $max_depth = -1 ])

Set the maximum allowed depth.

Warning: this function is currently not documented, only arg list exists

Params:

max_depth: The maximum allowed depth. -1 is used for any depth.

Returns: Nothing

Errors/Exceptions: Emits an Exception if max_depth is less than -1

RecursiveIteratorIterator::valid:

RecursiveIteratorIterator::valid - Check whether the current pos is valid

Desc:

public bool RecursiveIteratorIterator::valid()

Warning: This function is not documented, only arg list exists

Params: None

Returns: TRUE if the current pos is valid, FALSE otherwise

Note that this class will first iterate over your entire tree and build the graph before
going into your foreach. that is probably how it can iterate your leaves first or only
your leaves, and that must be the reason that it is slower than common recursive functions.

Beware of that when you have a tree that can go into a infinite loop, in some cases you
know your tree has a infintie loop, but you are looking for something insidei t and breaking
the loop when found, this class was used on these cases will get stuck into an internal
infinite loop.

The RecursiveRegexIterator class:

Intro:

This recursive iterator can filter another recursive iterator via a regex.

Class synopsis:

RecursiveRegexIterator extends RegexIterator implements RecursiveIterator {
	//Methods
	public __construct ( RecursiveIterator $iterator, string $regex [, int $mode = self::MATCH [, int
		$flags = 0 [, int $preg_flags = 0 ]]])
	public RecursiveRegexIterator getChildren()
	public bool hasChildren()

	//INherited methods
	public RecursiveIterator RecursiveIterator::getChildren()
	public bool RecursiveIterator::hasChildren()
	public bool RegexIterator::accept()
	public int RegexIterator::getFlags()

	public int RegexIterator::getMode()
	public int RegexIterator::getPregFlags()
	public string RegexIterator::getRegex()

	public void RegexIterator::setFlags ( int $flags )
	public void RegexIterator::setMode ( int $mode )
	public void RegexIterator::setPregFlags ( int $preg_flags )
}

Table of Contents:

RecursiveRegexIterator::__construct - Creates a new RecursiveRegexIterator
RecursiveRegexIterator::getChildren - Returns an iterator for the current entry
RecursiveRegexIterator::hasChildren - Returns whether an iterator can be obtained for the current entry

RecursiveRegexIterator::__construct:

RecursiveRegexIterator::__construct - Creates a new RecursiveRegexIterator

Desc:

public RecursiveRegexIterator::__construct ( RecursiveIterator $iterator , string $regex [, int $mode = self::MATCH [,
	int $flags = 0 [, int $preg_flags = 0 ]]])

Creates a new regex iterator.

Params:

iterator: The recursive iterator to apply this regex filter to

regex: The regex to match

mode: Operation mode, see RegexIterator::setMode() for a list of modes.

flags: Special flags, see RegexIterator::setFlags() for a list of available flags

preg_flags: The regex flags. These flags depend on the operation mode param

RegexIterator preg_flags:

Operation mode 								Available flags

RecursiveRegexIterator::ALL_MATCHES 		See preg_match_all(). 

RecursiveRegexIterator::GET_MATCH 			See preg_match()

RecursiveRegexIterator::MATCH 				See preg_match().

RecursiveRegexIterator::REPLACE 			None.

RecursiveRegexIterator::SPLIT 				See preg_split().

Examples:

Example #1 RecursiveRegexIterator::__construct() example

Creates a new RegexIterator that filters all strings that start with 'test'

<?php
$rArrayIterator = new RecursiveArrayIterator(array('test1', array('tet3', 'test4', 'test5')));
$rRegexIterator = new RecursiveRegexIterator($rArrayIterator, '/^test/',
	RecursiveRegexIterator::ALL_MATCHES);

foreach ($rRegexIterator as $key1 => $value1) {
	if ($rRegexIterator->hasChildren()) {
		//Print all children
		echo "Children: ";
		foreach ($rRegexIterator->getChildren() as $key => $value) {
			echo $value . " ";
		}
		echo "\n";
	} else {
		echo "No children\n";
	}
}
?>

The above outputs something akin to:

No children
Children: test4 test5

RecursiveRegexIterator::ALL_MATCHES List all subdirs and files.

<?php

$a = new RecursiveRegexIterator(new RecursiveDirectoryIterator(
'/home/songoq'), '/mydir/i', RecursiveRegexIterator::ALL_MATCHES );

foreach( new RecursiveIteratorIterator($a) as $s)
{
	echo $s."\n";
}

RecursiveRegexIterator::getChildren:

RecursiveRegexIterator::getChildren - Returns an iterator for the current entry

Desc:

public RecursiveRegexIterator RecursiveRegexIterator::getChildren()

Returns an iterator for the current iterator entry

Params: None

Returns: An iterator for the current entry, if it can be iterated over by the inner iterator

Errors/Exceptions:

An InvalidArgumentException will be thrown if the current entry does not contain a value that 
can be iterated over by the inner iterator.

Examples:

Example #1 RecursiveRegexIterator::getChildren() example

<?php
$rArrayIterator = new RecursiveArrayIterator(array('test1', array('tet3', 'test4', 'test5')));
$rRegexIterator = new RecursiveRegexIterator($rArrayIterator, '/^test',
	RecursiveRegexIterator::ALL_MATCHES);

foreach ($rRegexIterator as $key1 => $value1) {
	if($rRegexIterator->hasChildren()) {
		//Print all children
		echo "Children: ";
		foreach ($rRegexIterator->getChildren() as $key => $value) {
			echo $value . " ";

		}
		echo "\n";
	} else {
		echo "No children";
	}
}
?>

The above outputs:

No Children
Children: test4 test5

RecursiveRegexIterator::hasChildren:

RecursiveRegexIterator::hasChildren - Returns whether an iterator can be obtained
for the current entry.

Desc:

public bool RecursiveRegexIterator::hasChildren()

Returns whether an iterator can be obtained for the current entry. This iterator
can be obtained via RecursiveRegexIterator::getChildren().

Params: None

Returns: TRUE if an iterator can be obtained for the current entry, otherwise FALSE.

Examples:

Example #1 RecursiveRegexIterator::hasChildren() example

<?php
$rArrayIterator = new RecursiveArrayIterator(array('test1', array('tet3', 'test4', 'test5')));
$rRegexIterator = new RecursiveRegexIterator($rArrayIterator, '/^test/',
	RecursiveRegexIterator::ALL_MATCHES);

foreach ($rRegexIterator as $value) {
	var_dump($rRegexIterator->hasChildren());
}
?>

The above outputs:

bool (false)
bool (true)

The RecursiveTreeIterator class:

intro:

Allows iterating over a RecursiveIterator to generate an ASCII graphic tree

Class synopsis:

RecursiveTreeIterator extends RecursiveIteratorIterator implements OuterIterator {
	//Constants
	const integer BYPASS_CURRENT = 4;
	const integer BYPASS_KEY = 8;
	const integer PREFIX_LEFT = 0;
	const integer PREFIX_MID_HAS_NEXT = 1;

	const integer PREFIX_MID_LAST = 2;
	const integer PREFIX_END_HAS_NEXT = 3;
	const integer PREFIX_END_LAST = 4;
	const integer PREFIX_RIGHT = 5;

	//Methods
	public void beginChildren()
	public RecursiveIterator beginIteration()
	public RecursiveIterator callGetChildren()
	public bool callHasChildren()

	public __construct ( RecursiveIterator|IteratorAggregate $it [, int $flags = RecursiveTreeIterator::BYPASS_KEY [,
	int $cit_flags = CachingIterator::CATCH_GET_CHILD [, int $mode = RecursiveIteratorIterator::SELF_FIRST ]]])
	public string current()
	public void endChildren()
	public void endIteration()
	public string getEntry()

	public void getPostfix()
	public string getPrefix()
	public string key()
	public void next()
	public void nextElement()

	public void rewind()
	public void setPrefixPart ( int $part , string $value )
	public bool valid()

	//Inherited methods
	public void RecursiveIteratorIterator::beginChildren()
	public void RecursiveIteratorIterator::beginIteration()
	public RecursiveIterator RecursiveIteratorIterator::callGetChildren()

	public bool RecursiveIteratoriterator::callHasChildren()
	public RecursiveIteratorIterator::__construct ( Traversable $iterator [, int $mode = 
	RecursiveIteratorIterator::LEAVES_ONLY [, int $flags = 0 ]])
	public mixed RecursiveIteratorIterator::current()
	public void RecursiveIteratorIterator::endChildren()

	public void RecursiveIteratorIterator::endIteration()
	public int RecursiveIteratorIterator::getDepth()
	public iterator RecursiveIteratorIterator::getInnerIterator()
	public mixed RecursiveIteratorIterator::getMaxDepth()

	public RecursiveIterator RecursiveIteratorIterator::getSubIterator ([ int $level ])
	public mixed RecursiveIteratorIterator::key()
	public void RecursiveIteratorIterator::next()
	public void RecursiveIteratorIterator::nextElement()
	public void RecursiveIteratorIterator::rewind()

	public void RecursiveIteratorIterator::setMaxDepth ([ string $max_depth = -1 ])
	public bool RecursiveIteratorIterator::valid()
}

Predefined Constants:

RecursiveTreeIterator::BYPASS_CURRENT

RecursiveTreeIterator::BYPASS_KEY

RecursiveTreeIterator::PREFIX_LEFT

RecursiveTreeIterator::PREFIX_MID_HAS_NEXT

RecursiveTreeIterator::PREFIX_MID_LAST

RecursiveTreeIterator::PREFIX_END_HAS_NEXT

RecursiveTreeIterator::PREFIX_END_LAST

RecursiveTreeIterator::PREFIX_RIGHT

Table of Contents:

RecursiveTreeIterator::beginChildren - Begin children
RecursiveTreeIterator::beginIteration - Begin iteration
RecursiveTreeIterator::callGetChildren - Get children

RecursiveTreeIterator::callHasChildren - Has children
RecursiveTreeIterator::__construct - Constructs a RecursiveTreeIterator
RecursiveTreeIterator::current - Get current element
RecursiveTreeIterator::endChildren - End children

RecursiveTreeIterator::endIteration - End iteration
RecursiveTreeIterator::getEntry - Get current entry
RecursiveTreeIterator::getPostfix - Get the postfix
RecursiveTreeIterator::getPrefix - Get the prefix

RecursiveTreeIterator::key - Get the key of the current element
RecursiveTreeIterator::next - Move to the next element
RecursiveTreeIterator::nextElement - Next element
RecursiveTreeIterator::rewind - Rewind iterator

RecursiveTreeIterator::setPrefixPart - Set a part of the prefix
RecursiveTreeIterator::valid - Check validity

$it = new RecursiveArrayIterator(array(1,2, array(3, 4, array(5, 6, 7), 8), 9, 10));
$tit = new RecursiveTreeIterator($it);

foreach($tit as $key => $value){
	echo $value . PHP_EOL;
}

//Will output

|-1
|-2
|-Array
| |-3
| |-4
| |-Array
| | |-5
| | |-6
| | \-7
| \-8
|-9
\-10

RecursiveTreeIterator::beginChildren:

RecursiveTreeIterator::beginChildren - begin children

Desc:

public void RecursiveTreeIterator::beginChildren()

Called when recursing one level down

Warning: This function is currently not documented; only arg list exists

params: None

Returns: Nothing

RecursiveTreeIterator::beginIteration:

RecursiveTreeIterator::beginIteration - Begin iteration

Desc:

public RecursiveIterator RecursiveTreeIterator::beginIteration()

Called when iteration begins (after the first RecursiveTreeIterator::rewind() call)

Warning: this function is currently not documented, only arg list exists

Params: None

Returns: A RecursiveIterator

RecursiveTreeIterator::callGetChildren:

RecursiveTreeIterator::callGetChildren - Get children

Desc:

public RecursiveIterator RecursiveTreeIterator::callGetChildren()

Gets children of the current element

Warning: this function is currently not documented, only arg list exists

Params: none

Returns: A RecursiveIterator.

RecursiveTreeIterator::callHasChildren:

RecursiveTreeIterator::callHasChildren - has children

Desc:

public bool RecursiveTreeIterator::callHasChildren()

Called for each element to test whether it has children

Warning: This function is currently not documented, only arg list exists

Params: None

Returns: TRUE if there are children, otherwise FALSE

RecursiveTreeIterator::__construct:

RecursiveTreeIterator::__construct - Construct a RecursiveTreeIterator

Desc:

public RecursiveTreeIterator::__construct ( RecursiveIterator|IteratorAggregate $it [, int $flags =
RecursiveTreeIterator::BYPASS_KEY [, int $cit_flags = CachingIterator::CATCH_GET_CHILD [, int $mode =
RecursiveIteratorIterator::SELF_FIRST ]]])

Constructs a new RecursiveTreeIterator from the supplied recursive iterator.

Warning: This function currently is not documented; only arg list is available

Params:

it: The RecursiveIterator or IteratorAggregate to iterate over

flags: Flags may be provided which will affect the behavior of some methods. A list of the flags
can be found under RecursiveTreeIterator predefined constants.

caching_it_flags: Flags to affect the behavior of the RecursiveCachingIterator used internally.

mode: Flags to affect the behavior of the RecursiveIteratorIterator used internally.

Returns: Nothing

RecursiveTreeIterator::current:

RecursiveTreeIterator::current - Get current element

Desc:

public string RecursiveTreeIterator::current()

Gets the current element prefixed and postfixed.

Warning: This function is currently not documented, only arglist exists

Params: None

Returns: The current element prefixed and postfixed.

RecursiveTreeIterator::endChildren:

RecursiveTreeIterator::endChildren - End children

Desc:

public void RecursiveTreeIterator::endChildren()

Called when end recursing one level

Warning: This function is currently not documented, only arg list exists

Params: None

Returns: Nothing

RecursiveTreeIterator::endIteration:

RecursiveTreeIterator::endIteration - End iteration

Desc:

public void RecursiveTreeIterator::endIteration()

Called when the iteration ends (when RecursiveTreeIterator::valid() first returns false)

Warning: this function is not documented, only arg list exists

Params: None

Returns: Nothing

RecursiveTreeIterator::getEntry:

RecursiveTreeIterator::getEntry - get current entry

Desc:

public string RecursiveTreeIterator::getEntry()

Gets the part of the tree built for the current element

Warning: This function is currently not documented, only arg list exists

Params: None

Returns: The part of the tree built for the current element

RecursiveTreeIterator::getPostfix:

RecursiveTreeIterator::getPostfix - Get teh postfix

desc:

public void RecursiveTreeIterator::getPostfix()

Gets the string to place after the current element

Warning: This function is currently not documented, only arg list exists

Params: None

Returns: Returns the string to place after the current element

RecursiveTreeIterator::getPrefix:

RecursiveTreeIterator::getPrefix - get the prefix

Desc:

public string RecursiveTreeIterator::getPrefix()

Gets the string to place in front of the current eement

warning: this function is currently not documented, only arg list exists

Params: None

Returns: The string to place in front of the current element

RecursiveTreeIterator::key:

RecursiveTreeIterator::key - Get the key of the current element

Desc:

public string RecursiveTreeIterator::key()

Gets the current key prefixed and postfixed

Warning: This function is currently not documented, only arg list exists

Params: None

Returns: Returns the current key prefixed and postfixed

RecursiveTreeIterator::next:

RecursiveTreeIterator::next - Move to the next element

Desc:

public void RecursiveTreeIterator::next()

Moves forward to the next element

Warning: this function is currently not documented, arg list exists

Params: None

Returns: Nothing

RecursiveTreeIterator::nextElement:

RecursiveTreeIterator::nextElement - Next element

Desc:

public void RecursiveTreeIterator::nextElement()

Called when the next element is available.

Warning: This function is currently not documented, only arg list is.

Params: None

Returns: Nothing

RecursiveTreeIterator::rewind:

RecursiveTreeIterator::rewind - Rewind iterator

Desc:

public void RecursiveTreeIterator::rewind()

Rewinds the iterator to the first element of the top level inner iterator.

Warning: This function is currently not documented, only arg list exists

Params: None

Returns: Nothing

RecursiveTreeIterator::setPrefixPart:

RecursiveTreeIterator::setPrefixPart - Set a part of the prefix

Desc:

public void RecursiveTreeIterator::setPrefixPart ( int $part, string $value )

Sets a part of the prefix used in teh graphic tree.

Warning: This function is currently not documented, only arg list exists

Params:

part: One of the RecursiveTreeIterator::PREFIX_* constants.

value: The value to assign to the part of the prefix specified in part

Returns: Nothing

RecursiveTreeIterator::valid:

RecursiveTreeIterator::valid - Check validity

Desc:

public bool RecursiveTreeIterator::valid()

Check whether the current position is valid.

Warning: this function is currently not documented, only arg list is.

Params: None

Returns: TRUE if the current position is valid, otherwise FALSE.

The RegexIterator class:

intro:

This iterator can be used to filter another iterator based on a regex.

Class synopsis:

RegexIterator extends FilterIterator {
	//Constants
	const integer MATCH = 0;
	const integer GET_MATCH = 1;
	const integer ALL_MATCHES = 2;
	const integer SPLIT = 3;
	const integer REPLACE = 4;
	const integer USE_KEY ) 1;

	//Methods
	public __construct ( Iterator $iterator, string $regex [, int $mode = self::MATCH [, int $flags = 0 [, int $preg_flags = 0 ]]])
	public bool accept()
	public int getFlags()
	public int getMode()
	public int getPregFlags()
	public string getRegex()
	public void setFlags( int $flags )
	public void setMode( int $mode )
	public void setPregFlags( int $preg_flags )

	//Inherited methods
	public abstract bool FilterIterator::accept()
	public FilterIterator::__construct ( Iterator $iterator )
	public mixed FilterIterator::current()
	public Iterator FilterIterator::getInnerIterator()
	public mixed FilterIterator::key()
	public void FilterIterator::next()
	public void FilterIterator::rewind()
	public bool FilterIterator::valid()
}

Predefined Constants:

RegexIterator operation modes:

RegexIterator::ALL_MATCHES:
	Return all matches for the current entry (see preg_match_all())

RegexIterator::GET_MATCH:
	Return the first match for the current entry (see preg_match()).

RegexIterator::MATCH:
	Only execute match (filter) for the current entry (see preg_match())

RegexIterator::REPLACE:
	Replace the current entry (see preg_replace(); not fully implemented yet)

RegexIterator::SPLIT:
	Returns the split values for the current entry (see preg_split()).

RegexIterator Flags:

RegexIterator::USE_KEY:
	Special flag: Match the entry key instead of the entry value.

Table of Contents:

RegexIterator::accept - Get accept status
RegexIterator::__construct - Creates a new RegexIterator
RegexIterator::getFlags - Get flags
RegexIterator::getMode - returns operation mode

RegexIterator::getPregFlags - Returns the regex flags
RegexIterator::getRegex - Returns the current regex
RegexIterator::setFlags - sets the flags
RegexIterator::setMode - Sets the operation mode
RegexIterator::setPregFlags - Sets the regex flags

An example:

<?php
$a = new ArrayIterator(array('test1', 'test2', 'test3'));
$i = new RegexIterator($a, '/^(test)(\d+)/', RegexIterator::REPLACE);
$i->replacement = '$2:$1';

print_r(iterator_to_array($i));
/*
Array
(
	[0] => 1:test
	[1] => 2:test
	[2] => 3:test
)
*/
?>

RegexIterator::accept:

RegexIterator::accept - Get accept status

desc:

public bool RegexIterator::accept()

Matches (string) RegexIterator::current() or RegexIterator::key() if the RegexIterator::USE_KEY flag is
set) against the regex.

Params: None

Returns: TRUE if a match, FALSE otherwise.

Examples:

Example #1 RegexIterator::accept() example

This example shows that only items matching the regex are accepted.

<?php
$names = new ArrayIterator(array('Ann', 'Bob', 'Charlie', 'David'));
$filter = new RegexIterator($name, '/^[B-D]/');
foreach ($filter as $name) {
	echo $name . PHP_EOL;
}
?>

The above will output:

Bob
Charlie
David

RegexIterator::__construct:

RegexIterator::__construct - Create a new RegexIterator

Desc:

public RegexIterator::__construct ( Iterator $iterator, string $regex [, int $mode = self::MATCH [, int $flags = 0 [,
int $preg_flags = 0 ]]])

Create a new RegexIterator which filters an Iterator using a regex

Params:

iterator: The iterator to apply this regex filter to

Regex: The regex expression to match

mode: OPeration mode, see RegexIterator::setMode() for a list of modes.

flags: Special flags, see RegexIterator::setFlags() for a list of available flags

preg_flags: The regex flags. These flags depend on the operation mode param

RegexIterator preg_flags:

Operation mode 						available flags

RegexIterator::ALL_MATCHES 			see preg_match_all().

RegexIterator::GET_MATCH 			see preg_match()

RegexIterator::MATCH 				see preg_match()

RegexIterator::REPLACE 				none

RegexIterator::SPLIT 				see preg_split()

Errors/Exceptions: Throws an InvalidArgumentException if the regex arg 
is invalid.

Examples:

Example #1 RegexIterator::__construct() example

Creates a new RegexIterator that filters all strings that start with 'test'

<?php
$arrayIterator = new ArrayIterator(array('test 1', 'another test', 'test 123'));
$regexIterator = new RegexIterator($arrayIterator, '/^test/');

foreach ($regexIterator as $value)
{
	echo $value . "\n";
}
?>

The above outputs something akin to:

test 1
test 123

RegexIterator::getFlags:

RegexIterator::getFlags - Get flags

Desc:

public int RegexIterator::getFlags()

Returns the flags, see RegexIterator::setFlags() for a list of available flags

Returns: Returns the set flags.

Examples:

Example #1 RegexIterator::getFlags() example

<?php

$test = array('str1' => 'test 1', 'teststr2' => 'another test', 'str3' => 'test 123');

$arrayIterator = new ArrayIterator($test);
$regexIterator = new RegexIterator($arrayIterator, '/^test/');
$regexIterator->setFlags(RegexIterator::USE_KEY);

if ($regexIterator->getFlags() & RegexIterator::USE_KEY) {
	echo 'Filtering based on the array keys';
} else {
	echo 'Filtering based on the array values';
}
?>

The above example will output:

Filtering based on the array keys.

RegexIterator::getMode:

RegexIterator::getMode - Returns operation mode

Desc:

public int RegexIterator::getMode():

Returns the operation mode, see RegexIterator::setMode() for the list of operation modes.

Return: Returns the operation mode.

Examples:

Example #1 RegexIterator::getMode() example

<?php

$test = array('str1' => 'test 1', 'teststr2' => 'another test', 'str3' => 'test 123');

$arrayIterator = new ArrayIterator($test);
$regexIterator = new RegexIterator($arrayIterator, '/^[a-z]+/', RegexIterator::GET_MATCH);

$mode = $regexIterator->getMode();
if ($mode & RegexIterator::GET_MATCH) {
	echo 'Getting the match for each item.';
} elseif ($mode & RegexIterator::ALL_MATCHES) {
	echo 'Getting all matches for each item.';
} elseif ($mode & RegexIterator::MATCH) {
	echo 'Getting each item if it matches';
} elseif ($mode & RegexIterator::SPLIT) {
	echo 'Getting split pieces of each';
}
?>

The above example will output:

Getting the match for each item

RegexIterator::getPregFlags:

RegexIterator::getPregFlags - Returns the regex flags

Desc:

public int RegexIterator::getPregFlags()

Returns the regex flags, see RegexIterator::__construct() for the list of flags.

Returns: Returns a bitmask of the regex flags

Examples:

Example #1 RegexIterator::getPregFlags() example

<?php

$test = array('str1' => 'test 1', 'teststr2' => 'another test', 'str3' => 'test 123');

$arrayIterator = new ArrayIterator($test);
$regexIterator = new RegexIterator($arrayIterator, '/\s/', RegexIterator::SPLIT);
$regexIterator->setPregFlags(PREG_SPLIT_NO_EMPTY | PREG_SPLIT_OFFSET_CAPTURE);

if ($regexIterator->getPregFlags() & PREG_SPLIT_NO_EMPTY) {
	echo 'Ignoring empty pieces';
} else {
	echo 'Not ignoring empty pieces';
}

?>

the above will output:

Ignoring empty pieces

RegexIterator::getRegex:

RegexIterator::getRegex - Returns current regex

Desc:

public string RegexIterator::getRegex()

Warning: this function is currently not documented, only arg list exists

Params: None

Returns: None

RegexIterator::setFlags:

RegexIterator::setFlags - Sets the flags

Desc:

public void RegexIterator::setFlags ( int $flags )

Sets the flags

Params:

flags: The flags to set, a bitmask of class constants.

The available flags are listed below. The actual meaning of these flags are described in the predefined
constants.

RegexIterator flags

value 		constant

1 			RegexIterator::USE_KEY

Returns: Nothing

Examples:

Example #1 RegexIterator::setFlags() example

Creates a new RegexIterator that filters all entries whose key starts with 'test'.

<?php
$test = array ('str1' => 'test 1', 'teststr2' => 'another test', 'str3' => 'test 123');

$arrayIterator = new ArrayIterator($test);
$regexIterator = new RegexIterator($arrayIterator, '/^test/');
$regexIterator->setFlags(RegexIterator::USE_KEY);

foreach ($regexIterator as $key => $value) {
	echo $key . ' => ' . $value . "\n";
}
?>

The above example will output:

teststr2 => another test

RegexIterator::setMode:

RegexIterator::setMode - Sets the operation mode

Desc:

public void RegexIterator::setMode ( int $mode )

Sets the operation mode

Params:

mode: The operation mode.

The available modes are list below. The actual meanings of these modes are described in the predefined constants.

RegexIterator modes

value 		constant

0 			RegexIterator::MATCH
1 			RegexIterator::GET_MATCH
2 			RegexIterator::ALL_MATCHES
3 			RegexIterator::SPLIT
4 			RegexIterator::REPLACE

Returns: Nothing

Examples:

Example #1 RegexIterator::setMode() example

<?php
$test = array('str1' => 'test 1', 'test str2' => 'another test', 'str3' => 'test 123');

$arrayIterator = new ArrayIterator($test);
// Filter everything that starts with 'test' followed by one or more numbers.

$regexIterator = new RegexIterator($arrayIterator, '/^test (\d+)/');
// Operation mode: Replace actual value with the matches
$regexIterator->setMode(RegexIterator::GET_MATCH);

foreach ($regexIterator as $key => $value) {
	//Print out the matched number(s)
	echo $key . ' => ' . $value[1] . PHP_EOL;
}
?>

The above outputs something akin to:

str1 => 1
str3 => 123

RegexIterator::setPregFlags:

RegexIterator::setPregFlags - Sets the regex flags

Desc:

public void RegexIterator::setPregFlags ( int $preg_flags )

Sets the regex flags

Params:

preg_flags: The regex flags. See RegexIterator::__construct() for an overview of available flags.

Returns: Nothing

Examples:

Example #1 RegexIterator::setPregFlags() example

Creates a new RegexIterator that filters all entries with where the array key starts with 'test'.

<?php
$test = array('test 1', 'another test', 'test 123');

$arrayIterator = new ArrayIterator($test);
$regexIterator = new RegexIterator($arrayIterator, '/^test/', RegexIterator::GET_MATCH);

$regexIterator->setPregFlags(PREG_OFFSET_CAPTURE);

foreach ($regexIterator as $key => $value) {
	var_dump($value);
}
?>

the above outputs akin to:

array(1) {
	[0]=>
	array(2) {
		[0]=>
		string(4) "test"
		[1]=>
		int(0)
	}
}
array(1) {
	[0]=>
	array(2) {
		[0]=>
		string(4) "test"
		[1]=>
		int(0)
	}
}

Interfaces:

Table of Contents

Countable
OuterIterator
RecursiveIterator
SeekableIterator

SPL provides a set of interfaces

See also the Predefined Interfaces and Classes

Interface list:

Countable
OuterIterator
RecursiveIterator
SeekableIterator
SplObserver
SplSubject

The ArrayObject class:

Intro:

This class allows objects to work as arrays

Class synopsis:

ArrayObject implements IteratorAggregate , ArrayAccess , Serializable , Countable {
	
	//Constants
	const integer STD_PROP_LIST = 1;
	const integer ARRAY_AS_PROPS = 2;

	//Methods
	public __construct ([ mixed $input = [] [, int $flags = 0 [, string $iterator_class = "ArrayIterator" ]]])
	public void append ( mixed $value )
	public void asort()
	public int count()

	public array exchangeArray ( mixed $input )
	public array getArrayCopy()
	public int getFlags()
	public ArrayIterator getIterator()

	public string getIteratorClass()
	public void ksort()
	public void natcasesort()
	public void natsort()

	public bool offsetExists ( mixed $index )
	public mixed offsetGet ( mixed $index )
	public void offsetSet ( mixed $index, mixed $newval )
	public void offsetUnset ( mixed $index )
	public string serialize()

	public void setFlags( int $flags )
	public void setIteratorClass ( string $iterator_class )
	public void uasort(callable $cmp_function)
	public void uksort(callable $cmp_function)
	public void unserialize( string $serialized )
}

Predefined Constants:

ArrayObject Flags:

ArrayObject::STD_PROP_LIST:
	Properties of the object have their normal functionality when accessed as list (var_dump, foreach, etc.)

ArrayObject::ARRAY_AS_PROPS:
	Entires can be accessed as properties (read and write)

Changelog:

Version 		Desc
5.3.0 			Implements Serializable

Table of Contents:

ArrayObject::append - Appends the value
ArrayObject::asort - Sort the entries by value
ArrayObject::__construct - Construct a new array object

ArrayObject::count - Get the number of public properties in the ArrayObject
ArrayObject::exchangeArray - Exchange the array for another one
ArrayObject::getArrayCopy - Creates a copy of the ArrayObject
ArrayObject::getFlags - Get the behavior flags.

ArrayObject::getIterator - Create a new iterator from an ArrayObject instance
ArrayObject::getIteratorClass - Get the iterator classname for the ArrayObject
ArrayObject::ksort - Sort the entires by key
ArrayObject::natcasesort - Sort an array using a case insensitive "natural order" algo
ArrayObject::natsort - Sort entries using a "natural order" algo

ArrayObject::offsetExists - Returns whether the requested index exists
ArrayObject::offsetGet - Returns the value at the specified index
ArrayObject::offsetSet - Sets the value at the specified index to newval
ArrayObject::offsetUnset - Unsets the value at the specified index

ArrayObject::serialize - Serialize an ArrayObject
ArrayObject::setFlags - Sets the behavior flags
ArrayObject::setIteratorClass - Set the iterator classname for the ArrayObject
ArrayObject::uasort - Sort the entries with a user-defined comparison function and maintain key assoc
ArrayObject::uksort - Sort the entries by keys using a user-defined comparison function

ArrayObject::unserialize - Unserialize an ArrayObject

As you know ArrayObject is not an array so you cannot use the built in array functions. here is a trick
around that:

Extend the ArrayObject class with your own and implement this magic method:

<?php
	public function __call($func, $argv)
	{
		if(!is_callable($func) || substr($func, 0, 6) !== 'array_')
		{
			throw new BadMethodCallException(__CLASS__.'->'.$func);
		}
		return call_user_func_array($func, array_merge(array($this->getArrayCopy()), $argv));
	}
?>

Now you can do this with any array_* function:

<?php
$yourObject->array_keys();
?>

Do not forget to omit the first param - its automatic

Note: you might want to write your own functions if you are working with large sets of data

To implement array-style appending (e.g "$object[] = 'foo';") in your own class implementing
the ArrayAccess _interface_, all you need to do is check if the key passed to your implementation
of offsetSet() is NULL. Something like the following:

<?php

class MyArrayObject implements ArrayAccess {
	/**
	 * @var array
	 */
	private $aValue;

	//...

	/**
	 * @see ArrayAccess::offsetSet()
	 */
	public function offsetSet ($p_key, $p_value) {
		if (is_null($p_key)) {
			$this->aValue[] = $p_value;
		}
		else {
			$this->aValue[$p_key] = $p_value;
		}
	}

	//....
}
?>

I found the desc of STD_PROP_LIST a bit vague, so i put together a simple demonstration to show
its behavior:

<?php

$a = new ArrayObject(array(), ArrayObject::STD_PROP_LIST);
	$a['arr'] = 'array data';
	$a->prop = 'prop data';
$b = new ArrayObject();
	$b['arr'] = 'array data';
	$b->prop = 'prop data';

// ArrayObject Object
// (
// 		[prop] => prop data
// )
print_r($a);

// ArrayObject Object
// (
// 		[arr] => array data
// )
print_r($b);

?>

// Example STD_PROP_LIST and ARRAY_AS_PROP combined
<?php
$ao = new ArrayObject();
$ao->setFlags(ArrayObject::STD_PROP_LIST|ArrayObject::ARRAY_AS_PROPS);

$ao->prop = 'prop data';
$ao['arr'] = 'array data';

print_r($ao);

?>

// Result

ArrayObject Object
(
	[storage:ArrayObject:private] =&gt; Array
		(
			[prop] => prop data
			[arr] => array data
		)
)

I do not believe the same performance is true since PHP 5.3. Using the same fill, read_key and foreach approach
on both native arrays and ArrayObjects with 10000 keys I get the following

PHP 5.2

array() fill 		0.013101
array() read 		0.008685
array() foreach 	0.004319
ArrayObject fill 	0.014136
ArrayObject read 	0.010003
ArrayObject foreach 3.454612

PHP 5.3

array() fill 		0.010395
array() read 		0.005933
array() foreach 	0.001903
ArrayObject fill 	0.010598
ArrayObject read 	0.006387
ArrayObject foreach 0.003451

This was the code i used for both, an array or ArrayObject is passed into each of the functions. Again
PEAR::Benchmark was used to get the results.

<?php
require_once 'Benchmark/Timer.php';

define('KEYS', 10000);

function fill(&$arr) {
	for ($i = 1; $i <= KEYS; $i++) {
		$arr['key-' . $i] = $i;
	}
}

function read_key(&$arr) {
	for ($i = 1; $i <= KEYS; $i++) {
		$v = $arr['key-' . $i];
	}
}

function fe(&$arr) {
	foreach ($arr as $key => $value) {
		$v = $value;
	}
}
?>

If you plan to derive your own class from ArrayObject and wish to maintain complete ArrayObject
functionality (such as being able to cast to an array), it is necessary to use ArrayObject's own
private property "storage".

Since that is impossible to do directly, you must use ArrayObject's offset{Set,Get,Exists,Unset}
methods to manipulate it indirectly.

As a side benefit, this means you inherit all the iteration and other functions in complete working
order.

This may sound obvious to someone who has never implemented their own ArrayObject class... but it is
far from so.

<?php

class MyArrayObject extends ArrayObject {
	static $debugLevel = 2;

	static public function sdprintf() {
		if (static::$debugLevel > 1) {
			call_user_func_array("printf", func_get_args());
		}
	}

	public function offsetGet($name) {
		self::sdprintf("%s(%s)\n", __FUNCTION__, implode(",", func_get_args()));
		return call_user_func_array(array(parent, __FUNCTION__), func_get_args());
	}

	public fuction offsetSet($name, $value) {
		self::sdprintf("%s(%s)\n", __FUNCTION__, implode(",", func_get_args()));
		return call_user_func_array(array(parent, __FUNCTION__), func_get_args());
	}

	public function offsetExists($name) {
		self::sdprintf("%s(%s)\n", __FUNCTION__, implode(",", func_get_args()));
		return call_user_func_array(array(parent, __FUNCTION__), func_get_args());
	}
}

$mao = new MyArrayObject();
$mao["name"] = "bob";
$mao["friend"] = "jane";
print_r((array)$mao);

/* Output:

offsetSet(name,bob)
offsetSet(friend,jane)
Array
(
	[name] => bob
	[friend] => jane
) 		*/
?>

If you wish to use the "Array as Properties" flag, you simply need to include this in your
constructor:

<?php parent::setFlags(parent::ARRAY_AS_PROPS); ?>

This will allow you to do things such as the below example, without overriding __get or __set.

<?php
$mao->name = "Phil";
echo $mao["name"]; // Outputs phil
?>

Long story short B/c arrays by default are passed by value, if you pass an array to a function,
the function works on a copy of the array while the original array remains unaltered by the function.

You may cause a change to the array to be reflected in the original array by having the function return
the altered array and assign it to the variable for the org. array:

<?php
function my_array_modify($data) {
	$data['b'] = 2;
	return $data;
}

$regularArray = array();

$regularArray['a'] = 1;

$regularArray = my_array_modify($regularArray);

var_dump($regularArray['b']); //2
?>

Or you may explicitly pass the array by reference in which case there is no need for the function
to return the array since the change will have effected the original array, as follows:

<?php
function my_arrayref_modify(&$data) {
	$data['bb'] = 22;
}
my_arrayref_modify($regularArray);
var_dump($regularArray['bb']); //22
?>

Simple example of usage:

<?php
$array = array('Buck', 'Jerry', 'Tomas');

$arrayObject = new ArrayObject($array);
//Add new element
$arrayObject->append('Tweety');

//We are getting the iterator of the object
$iterator = $arrayObject->getIterator();

//Simple while loop
while ($iterator->valid()) {
	echo $iterator->current() . "\n";
	$iterator->next();
}

//Outputs
Buck
Jerry
Tomas
Tweety

?>

ArrayObject::append:

ArrayObject::append - Appends the value

Desc:

public void ArrayObject::append ( mixed $value )

Appends a new value as the last element 

Note: This method cannot be called when the ArrayObject was constructed from an object. Use
ArrayObject::offsetSet() instead.

Params:

value: The value being appended

Returns: Nothing

Examples:

Example #1 ArrayObject::append() example

<?php
$arrayobj = new ArrayObject(array('first', 'second', 'third'));
$arrayobj->append('fourth');
$arrayobj->append(array('five', 'six'));
var_dump($arrayobj);
?>

The above will output:

object(ArrayObject)#1 (5) {
	[0]=>
	string(5) "first"
	[1]=>
	string(6) "second"
	[2]=>
	string(5) "third"
	[3]=>
	string(6) "fourth"
	[4]
	array(2) {
		[0]=>
		string(4) "five"
		[1]=>
		string(3) "six"
	}
}

This member function is implemented as follows:

<?php
class ArrayObject /* ..... */ {
//....
	public function append($v) {
		return $this->offsetSet(NULL, $v);
	}
}
?>

ArrayObject::asort:

ArrayObject::asort - Sort the entries by value

Desc:

public void ArrayObject::asort()

Sorts the entries such that the keys maintain their correlation with the entries they are associated with.
This is used mainly when sorting associative arrays where the actual element order is significant.

Params: None

Returns: Nothing

Examples:

Example #1 ArrayObject::asort() example

<?php
$fruits = array("d" => "lemon", "a" => "orange", "b" => "banana", "c" => "apple");
$fruitArrayObject = new ArrayObject($fruits);
$fruitArrayObject->asort();

foreach ($fruitArrayObject as $key => $val) {
	echo "$key = $val\n";
}
?>

The above outputs:

c = apple
b = banana
d = lemon
a = orange

The fruits have been sorted in aplhabetical order, and the key associated with each entry
has been maintained.

ArrayObject::__construct:

ArrayObject::__construct - Constructs a new array object

Desc:

public ArrayObject::__construct ([ mixed $input = [] [, int $flags = 0 [, string $iterator_class = "ArrayIterator" ]]])

This constructs a new array object

Params:

input: The input param accepts an array or an Object.

flags: Flags to control the behaviour of the ArrayObject object. See ArrayObject::setFlags().

iterator_class: Specify the class that will be used for iteration of the ArrayObject object.

Returns: an ArrayObject on success.

Errors/Exceptions:

Throws InvalidArgumentException when:

input is not an array or object
flags is not an integer
iterator_class is not an object that implements iterator

Examples:

Example #1 ArrayObject::__construct() example

<?php
$array = array('1' => 'one',
			   '2' => 'two',
			   '3' => 'three');
$arrayobject = new ArrayObject($array);

var_dump($arrayobject);
?>

The above outputs:

object (ArrayObject) #1 (3) {
	[1]=>
	string(3) "one"
	[2]=>
	string(3) "two"
	[3]=>
	string(5) "three"
}

Btw, if you need to change the array later, use the exchangeArray() method. Good to know
when you are writing a class that extends ArrayObject()

AFAIK, exchangeArray() does not return anything

<?php
	$a = array('one', 'two', 'three');
	$ao = new ArrayObject($a);

	foreach ($ao as $element) {
		echo $element . ' '; //one two three
	}

	$b = array('four', 'five', 'six');
	$ao->exchangeArray($b); //returns null

	foreach ($ao as $element) {
		echo $element . ' '; //four five six
	}
?>

As Marcus Explained, the flag ArrayObject::SPL_ARRAY_AS_PROPS means the array element may be used
as property if there is no conflict with visible props

If there are visible props in the class, the array element will not overwrite its value

<?php
class Rules extends ArrayObject {
	public $len = 1;
	function __construct($array) {
		parent::__construct($array, ArrayObject::ARRAY_AS_PROPS);
		$this['len'] = 2;
	}
}
$x = new Rules(array(1,2));
echo $x->len;
?>

Result: 1

<?php
class Rules extends ArrayObject {
	private $len = 1;
	function __construct($array) {
		parent::__construct($array, ArrayObject::ARRAY_AS_PROPS);
		$this['len'] = 2;
	}
}
$x = new Rules(array(1,2));
echo $x->len;
?>

result: 2

ArrayObject::count:

ArrayObject::count - Get the number of public props in the ArrayObject

Desc:

public int ArrayObject::count()

get the number of public props in teh ArrayObject

Params: None

Returns: The number of public props in the ArrayObject

Note: When the ArrayObject is constructed from an array all props are public

Examples:

Example #1 ArrayObject::count() example

<?php
class Example {
	public $public = 'prop:public';
	private $prv = 'prop:private';
	protected $prt = 'prop:protected';
}

$arrayobj = new ArrayObject(new Example());
var_dump($arrayobj->count());

$arrayobj = new ArrayObject(array('first', 'second', 'third'));
var_dump($arrayobj->count());
?>

The above will output:

int(1)
int(3)

ArrayObject::exchangeArray:

ArrayObject::exchangeArray - Exchange the array for another one

Desc:

public array ArrayObject::exchangeArray ( mixed $input )

Exchange the current array with another array or object

Params:

input: The new array or object to exchange with the current array

Returns: The old array

Examples:

Example #1 ArrayObject::exchangeArray() example

<?php
//Array of available fruits
$fruits = array("lemons" => 1, "oranges" => 4, "bananas" => 5, "apples" => 10);

//Array of locations in Europe
$locations = array('Amsterdam', 'Paris', 'London');

$fruitsArrayObject = new ArrayObject($fruits);

//Now exchange fruits for locations
$old = $fruitsArrayObject->exchangeArray($locations);
print_r($old);
print_r($fruitsArrayObject);

?>

The above outputs:

Array
(
	[lemons] => 1
	[oranges] => 4
	[bananas] => 5
	[apples] => 10
)
ArrayObject Object
(
	[0] => Amsterdam
	[1] => Paris
	[2] => London
)

It seems that the input array is always passed by reference.
For example, if you have an existing array, $array with some values then you have an arrayobject $o
and then you do this:

$o->exchangeArray($array);
$o->offsetSet('somekey', 'some value');

Now if you check your $array array, it will have a key 'somekey' with a value of 'some value'

It is worth noting that ArrayObject::exchangeArray() does not call ArrayObject::offsetSet() internally
for each offset/property of the array/object provided in argument.

It is also worth noting the let's say "unexpected" behavior of get/set:

<?php
class MyArrayObject extends ArrayObject
{
	public function offsetSet($name, $value)
	{
		parent::offsetSet($name . '_control', $value);
		parent::offsetSet($name, $value);
	}
}

$test = new MyArrayObject();
$test->setFlags(\ArrayObject::ARRAY_AS_PROPS);
$test['my_value_1'] = 1;
$test['my_value_1'] = $test['my_value_1'] + 1;
$test['my_value_1'] += 1;
$test['my_value_1'] ++;

++ $test['my_value_1'];

$test->my_value_2 = 1;
$test->my_value_2 = $test->my_value_2 + 1;
$test->my_value_2 += 1;
$test->my_value_2++;
++ $test->my_value_2;

print_r($test);

//Prints out:
MyArrayObject Object
(
	[storage:ArrayObject:private] => Array
		(
			[my_value_1_control] => 3
			[my_value_1] => 5
			[my_value_2_control] => 2
			[my_value_2] => 5
		)
)
?>

ArrayObject::getArrayCopy:

ArrayObject::getArrayCopy - Creates a copy of the ArrayObject

Desc:

public array ArrayObject::getArrayCopy()

Exports the ArrayObject to an array

Params: None

Returns: A copy of the array. When the ArrayObject refers to an object an array of the public props of the
object will be returned.

Examples:

Example #1 ArrayObject::getArrayCopy() example

<?php
//Array of available fruits
$fruits = array("lemons" => 1, "orange" >= 4, "bananas" => 5, "apples" => 10);

$fruitsArrayObject = new ArrayObject($fruits);
$fruitsArrayObject['pears'] = 4;

//Create a copy of the array
$copy = $fruitsArrayObject->getArrayCopy();
print_r($copy);

?>

The above outputs:

Array
(
	[lemons] => 1
	[oranges] => 4
	[bananas] => 5
	[apples] => 10
	[pears] => 4
)

If you did something like this to make your constructor multidimensional capable you will have some trouble
using getArrayCopy to get a plain array straight out of the method:

<?php
public function __construct( $array = array(), $flags = 2 )
{
	//Let us give the objects the right and not the inherited name
	$class = get_class($this);

	foreach($array as $offset => $value)
		$this->offsetSet($offset, is_array($value) ? new $class($value) : $value);

	$this->setFlags($flags);
}
?>

TThe way i solved it is:

<?php
public function getArray($recursion = false)
{
	//Just in case the object might be multidimensional
	if ($this === true)
		return $this->getArrayCopy();

	return array_map( function($item){
		return is_object($item) ? $item->getArray(true) : $item;
	}, $this->getArrayCopy());
}
?>

"When the ArrayObject refers to an object an array of the public properties of that object will
be returned."

This description does not seem to be right:

<?php
class A
{
	public $var = 'var';
	protected $foo = 'foo';
	private $bar = 'bar';
}

$o = new ArrayObject(new A());
var_dump($o->getArrayCopy());

/*
Dumps:

array(3) {
	["var"]=>
	string(3) "var"
	["*foo"]=>
	string(3) "foo"
	["Abar"]=>
	string(3) "bar"
}
*/
?>

So it does not only include the public props.

When i used print_r ($fruitsArrayObject) instead of print_r ($copy), i.e. ignoring the getArrayCopy()
step, i will got teh same output.

Will not be magically called, if you cast to array.

<?php
$data = $likeArray->getArrayCopy();
?>

<?php
$nothing = (array)$likeArray;
?>

here, $data != $nothing

ArrayObject::getFlags:

ArrayObject::getFlags - Gets the behavior flags.

Desc:

public int ArrayObject::getFlags()

gets the behavior flags of the ArrayObject. See the ArrayObject::setFlags method for a list of
the available flags.

Params: None

Returns: The behavior flags of the ArrayObject

Examples:

Example #1 ArrayObject::getFlags() example

<?php
//Array of available fruits
$fruits = array("lemons" => 1, "oranges" => 4, "bananas" => 5, "apples" => 10);

$fruitsArrayObject = new ArrayObject($fruits);

//Get the current flags
$flags = $fruitsArrayObject->getFlags();
var_dump($flags);

//Set new flags
$fruitsArrayObject->setFlags(ArrayObject::ARRAY_AS_PROPS);

//Get the new flags
$flags = $fruitsArrayObject->getFlags();
var_dump($flags);
?>

The above will output:

int(0)
int(2)

ArrayObject::getIterator:

ArrayObject::getIterator - Create a new iterator from an ArrayObject instance

Desc:

public ArrayIterator ArrayObject::getIterator()

Create a new iterator from an ArrayObject instance

Params: none

Returns: An iterator from an ArrayObject

Examples:

Example #1 ArrayObject::getIterator() example

<?php
$array = array('1' => 'one',
			   '2' => 'two',
			   '3' => 'three');

$arrayobject = new ArrayObject($array);

$iterator = $arrayobject->getIterator();

while($iterator->valid()) {
	echo $iterator->key() . ' => ' . $iterator->current() . "\n";

	$iterator->next();
}
?>

The above will output:

1 => one
2 => two
3 => three

ArrayObject iterator class requires a child of ArrayObject or ArrayIterator

<?php

class MyIterator implements Iterator {
	
	public function __construct(ArrayObject $array, $flags = 0) {
		//...
	}

	public
	function current() {
		//...
	}

	public
	function next() {
		//...
	}

	public function
	key() {
		//...
	}

	public
	function valid() {
		//...
	}

	public function rewind() {
		//...
	}
}

$obj = new ArrayObject(array(), 0, 'MyIterator');
$obj->getIterator();

?>

PHP Fatal error: ArrayObject::getIterator(): Internal compiler error, Class is not child
of ArrayObject or ArrayIterator in Php shell code on line 1

ArrayObject::getIteratorClass:

ArrayObject::getIteratorClass - Gets the iterator classname for the
ArrayObject.

Desc:

public string ArrayObject::getIteratorClass()

Gets the class name of the array iterator that is used by
ArrayObject::getIterator()

Params: None

Returns: The iterator class name that is used to iterate over this object

Examples:

Example #1 ArrayObject::getIteratorClass() example

<?php
//Custom ArrayIterator (inherits from ArrayIterator)
class MyArrayIterator extends ArrayIterator {
	//Custom implementation
}

//Array of available fruits
$fruits = array("lemons" => 1, "oranges" => 4, "bananas" => 5, "apples" => 10);

$fruitsArrayObject = new ArrayObject($fruits);

//Get the current class name
$className = $fruitsArrayObject->getIteratorClass();
var_dump($className);

//Set new classname
$fruitsArrayObject->setIteratorClass('MyArrayIterator');

//Get the new iterator classname
$className = $fruitsArrayObject->getIteratorClass();
var_dump($className);
?>

The above will output:

string(13) "ArrayIterator"
string(15) "MyArrayIterator"

ArrayObject::ksort:

ArrayObject::ksort - Sort the entires by key

Desc:

public void ArrayObject::ksort()

Sorts the entries by key, maintining key to entry correlations. This is useful
mainly for associative arrays.

Params: None

Returns: Nothing

Examples:

Example #1 ArrayObject::ksort() example

<?php
$fruits = array("d" => "lemon", "a" => "orange", "b" => "banana", "c" => "apple");
$fruitArrayObject = new ArrayObject($fruits);
$fruitArrayObject->ksort();

foreach ($fruitArrayObject as $key => $val) {
	echo "$key = $val\n";
}
?>

The above will output:

a = orange
b = banana
c = apple
d = lemon

ArrayObject::natcasesort:

ArrayObject::natcasesort - Sort an array using a case insensitive "natural order" algo

Desc:

public void ArrayObject::natcasesort()

This method is a case insensitive version of ArrayObject::natsort.

This method implements a sort algo that orders alphanumerical strings in teh way a human being
would while mainting key/value assocs. This is described as "natural ordering".

Params: none

Returns: Nothing

Examples:

Example #1 ArrayObject::natcasesort() example

<?php
$array = array('IMG0.png', 'img12.png', 'img10.png', 'img2.png', 'img1.png', 'IMG3.png');

$arr1 = new ArrayObject($array);
$arr2 = clone $arr1;

$arr1->asort();
echo "Standard sorting\n";
print_r($arr1);

$arr2->natcasesort();
echo "\nNatural order sorting (case-insensitive)\n";
print_r($arr2);
?>

The above will output:

Standard sorting
ArrayObject Object
(
	[0] => IMG0.png
	[5] => IMG3.png
	[4] => img1.png
	[2] => img10.png
	[1] => img12.png
	[3] => img2.png
)

Natural order sorting (case-insensitive)
ArrayObject Object
(
	[0] => IMG0.png
	[4] => img1.png
	[3] => img2.png
	[5] => IMG3.png
	[2] => img10.png
	[1] => img12.png
)

ArrayObject::natsort:

ArrayObject::natsort - Sort entries using a "natural order" algo

Desc:

public void ArrayObject::natsort()

This method implements a sort algo that orders alphanumeric strings in the way a human
being would while maintaining key/value associations. This is described as a "natural ordering".
An example of the difference between this algo and the regular computer string sorting
algo (used in ArrayObject::asort) method can be seen in the example below.

Params: None

Returns: Nothing

Examples:

Example #1 ArrayObject::natsort() example

<?php
$array = array("img12.png", "img10.png", "img2.png", "img1.png");

$arr1 = new ArrayObject($array);
$arr2 = clone $arr1;

$arr1->asort();
echo "Standard sorting\n";
print_r($arr1);

$arr2->natsort();
echo "\nNatural order sorting\n";
print_r($arr2);
?>

The above will output:

Standard sorting
ArrayObject Object
(
	[3] => img1.png
	[1] => img10.png
	[0] => img12.png
	[2] => img2.png
)

Natural order sorting
ArrayObject Object
(
	[3] => img1.png
	[2] => img2.png
	[1] => img10.png
	[0] => img12.png
)

ArrayObject::offsetExists:

ArrayObject::offsetExists - Returns whether the requested index exists

Desc:

public bool ArrayObject::offsetExists(mixed $index)

Params: index: The index being checked

Returns: TRUE if requested index exists, otherwise FALSE

Examples:

Example #1 ArrayObject::offsetExists() example

<?php
$arrayobj = new ArrayObject(array('zero', 'one', 'example' => 'e.g.'));
var_dump($arrayobj->offsetExists(1));
var_dump($arrayobj->offsetExists('example'));
var_dump($arrayobj->offsetExists('not found'));
?>

The above outputs:

bool(true)
bool(true)
bool(false)

In versions prior to PHP 5.2.2 offsetExists() would return false if index value is null

<?php
// Running PHP 5.2.1
$params = new ArrayObject(array('INT'=>null, 'STR'=>null, 'BOOL'=>null, 'LOB'=>null));
$test = $params->offsetExists('INT');
var_dump($test);

//result would be bool(false)
//running PHP 5.2.2
$params = new ArrayObject(array('INT'=>null, 'STR' => null, 'BOOL'=>null, 'LOB'=>null));
$test = $params->offsetExists('INT');
var_dump($test);
// result would be bool(true)
?>

Both tests were made on Windows platform

ArrayObject::offsetGet:

ArrayObject::offsetGet - Returns the value at the specified index

Desc:

public mixed ArrayObject::offsetGet ( mixed $index )

params:

index: The index with the value

Returns: The value at the specified index or NULL.

Errors/Exceptions:

Produces an E_NOTICE error message when the specified index does not exist..

Examples:

Example #1 ArrayObject::offsetGet() example

<?php
$arrayobj = new ArrayObject(array('zero', 7, 'example'=>'e.g.'));
var_dump($arrayobj->offsetGet(1));
var_dump($arrayobj->offsetGet('example'));
var_dump($arrayobj->offsetExists('notfound'));
?>

The above outputs:

int(7)
string(4) "e.g."
bool(false)

If you are overloading ArrayObject, it is worth noting that while this method (when implemented by the
parent) will return a reference, so code like $fakeArray['foobar']['hello'] = 1; will work like you
expect.

However, when you overload the offsetGet method, you CANNOT define it as &offsetGet, so the above code
falls out (because it returns the 'foobar' variable before you actually work with it).

This is something that the devs broke between 5.0 and 5.1

It is worth noting that the PHP devs *did* fix the issue brought up in Sam's comment in 2013 (per the 
comment thread in his link here: https://bugs.php/bug.php?id=34783#1366088374), since at least
PHP 5.3.8.

So, you *can* (and in most cases should) overload offsetGet with reference syntax to get expected
functionality:

<?php
class myArrayType extends ArrayAccess {
	public function &offsetGet($index) {

	}
}
?>

Speaking of offsetGet() method overloading, be advised, that if you are iterating through Object
via foreach, this method would not be called. Iterator's current() method will be called instead.

ArrayObject::offsetSet:

ArrayObject::offsetSet - Sets the value at the specified index to newval

Desc:

public void ArrayObject::offsetSet ( mixed $index, mixed $newval )

Sets the value at the specified index to newval.

Params:

index: The index being set.

newval: The new value for the index.

Returns: Nothing

Examples:

Example #1 ArrayObject::offsetSet() example

<?php
class Example {
	public $property = 'prop:public';
}
$arrayobj = new ArrayObject(new Example());
$arrayobj->offsetSet(4, 'four');
$arrayobj->offsetSet('group', array('g1', 'g2'));
var_dump($arrayobj);

$arrayobj = new ArrayObject(array('zero', 'one'));
$arrayobj->offsetSet(null, 'last');
var_dump($arrayobj);
?>

The above will output:

object(ArrayObject)#1 (3) {
	["property"]=>
	string(11) "prop:public"
	[4]=>
	string(4) "four"
	["group"]=>
	array(2) {
		[0]=>
		string(2) "g1"
		[1]=>
		string(2) "g2"
	}
}
object (ArrayObject) #3 (3) {
	[0]=>
	string(4) "zero"
	[1]=>
	string(3) "one"
	[2]=>
	string(4) "last"
}

If $index is null, $newval is naturally pushed onto the end of the array as ArrayObject::append

On my php 5.3.5 installation, i discovered that value can be set by reference and not by copy ...
depending on the context.

So this is different from what a regular array() does

<?php

function set(&$x, &$a)
{
	$x[] = $a;
}

$x = new ArrayObject();
$y = array();
$z = new ArrayObject();

$a = array( 'foo' );
set($y, $a);
set($x, $a);
$z[] = $a;

$a = array('bar');

set($x,$a);
set($y,$a);
$z[] = $a;

print_r($x);
print_r($y);
print_r($z);
?>

//Output
ArrayObject Object
(
	[storage:ArrayObject:private] => Array
		(
			[0] => Array
				(
					[0] => bar
				)

			[1] => Array
				(
					[0] => bar
				)
		)
)
Array
(
	[0] => Array
		(
			[0] => foo
		)

	[1] => Array
		(
			[0] => bar
		)
)
ArrayObject Object
(
	[storage:ArrayObject:private] => Array
		(
			[0] => Array
				(
					[0] => bar
				)

			[1] => Array
				(
					[0] => bar
				)
		)
)

ArrayObject::offsetUnset:

ArrayObject::offsetUnset - Unsets the value at the specified index

Desc:

public void ArrayObject::offsetUnset ( mixed $index )

Unsets the value at the specified index

Params:

index: The index being unset

Returns: Nothing

Examples:

Example #1 ArrayObject::offsetUnset() example

<?php
$arrayobj = new ArrayObject(array(0 => 'zero', 2 => 'two'));
$arrayobj->offsetUnset(2);
var_dump($arrayobj);
?>

The above outputs:

object(ArrayObject)#1 (1) {
	[0]=>
	string(4) "zero"
}

When traversing recursively nested arrays using an RecursiveIteratorIterator, you cannot offsetUnset() or
offsetSet() sub-array values, unless, they are all declared as ArrayObject.

Be careful when you are working with collections. This method works with the reference of an array
instead of its retreived value.

So, you can do a mistake.

In order to understand, have a look at the following code:

<?php
class Employee
{
	public function __construct()
	{
	}
}

class Company
{
	private $arrEmployee;

	public function __construct()
	{
	}

	public function AddEmployee(Employee $oEmployee)
	{
		$this->arrEmployee[] = $oEmployee;
	}

	public function getEmployeeList()
	{
		return $this->arrEmployee;
	}
}
?>

<?php

//first, creates the Company Object
$oCompany = new Company();

//second, add 10 elements in
foreach ( range(0, 9) as $index )
{
	$oCompany->AddEmployee(new Employee());
}

//get them
$arrEmployee = $oCompany->getEmployeeList();

//Creates an ArrayObject from "$arrEmployee"
$arrayobject = new ArrayObject($arrEmployee);

//Unset its first five elements
foreach( range(0, 4) as $index)
{
	$arrayobject->offsetUnset($index);
}

//Get them again
$arrEmployee = $oCompany->getEmployeeList();

//it shows just 5 elements, they were removed reference via "offsetUnset" method
print_r($arrEmployee);

?>

ArrayObject::serialize:

ArrayObject::serialize - Serialize an ArrayObject

Desc:

public string ArrayObject::serialize()

Serializes an ArrayObject

Warning: This function is currently not documented, only arg list exists

Params: None

Returns: The serialized representation of the ArrayObject

Examples:


Example #1 ArrayObject::serialize() example

<?php
$o = new ArrayObject();

$s1 = serialize($o);
$s2 = $o->serialize();

var_dump($s1);
var_dump($s2);
?>

The above will output:

string(45) "C:11:"ArrayObject":21:{x:i:0;a:0:{};m:a:0:{}}"
string(21) "x:i:0;a:0:{};m:a:0:{}"

ArrayObject::setFlags:

ArrayObject::setFlags - Sets the behavior flags

Desc:

public void ArrayObject::setFlags( int $flags )

Sets the flags that change the behavior of the ArrayObject

Params:

flags: The new ArrayObject behavior. It takes on either a bitmask, or named constants. Using named constants
is strongly encouraged to ensure compability for future versions.

The available behavior flags are listed below. The actual meanings of these flags are described in the
predefined constants.

ArrayObject behavior flags

value 		constant
1 			ArrayObject::STD_PROP_LIST
2 			ArrayObject::ARRAY_AS_PROPS

Returns: Nothing

Examples:

Example #1 ArrayObject::setFlags() example

<?php
//Array of available fruits
$fruits = array("lemons" => 1, "oranges" => 4, "bananas" => 5, "apples" => 10);

$fruitsArrayObject = new ArrayObject($fruits);

//Try to use array key as property
var_dump($fruitsArrayObject->lemons);

//Set the flag so that the array keys can be used as properties of the ArrayObject
$fruitsArrayObject->setFlags(ArrayObject::ARRAY_AS_PROPS);

//Try it again
var_dump($fruitsArrayObject->lemons);
?>

The above will output:

NULL
int(1)

ArrayObject::setIteratorClass:

ArrayObject::setIteratorClass - Sets the iterator classname for the ArrayObject

Desc:

public void ArrayObject::setIteratorClass ( string $iterator_class )

Sets the classname of the array iterator that is used by ArrayObject::getIterator()

Params:

iterator_class: The classname of the array iterator to use when iterating over htis object

Returns: Nothing

Examples:

Example #1 ArrayObject::setIteratorClass() example

<?php
// Custom ArrayIterator (inherits from ArrayIterator)
class MyArrayIterator extends ArrayIterator {
	// custom implemenetation
}

// Array of available fruits
$fruits = array("lemons" => 1, "oranges" => 4, "bananas" => 5, "apples" => 10);

$fruitsArrayObject = new ArrayObject($fruits);

//Set the iterator classname to the newly
$fruitsArrayObject->setIteratorClass('MyArrayIterator');
print_r($fruitsArrayObject->getIterator());

?>

The above outputs:

MyArrayIterator Object
(
	[lemons] => 1
	[oranges] => 4
	[bananas] => 5
	[apples] => 10
)

ArrayObject::uasort:

ArrayObject::uasort - Sort the entries with a user-defined comparison function and maintain key association

Desc:

public void ArrayObject::uasort ( callable $cmp_function )

This function sorts the entries such that keys maintain their correlation with the entry that they are associated
with, using a user-defined comparison function.

This is used mainly when sorting associative arrays where the actual element order is significant

Params:

cmp_function: Function cmp_function should accept two params which will be filled by pairs of entries.
The comparison function must return an integer less than, equal to, or greater than zero if the first
argument is considered to be respectively less than, equal to, or greater than the second.

Returns: Nothing

Examples:

Example #1 ArrayObject::uasort() example

<?php
//Comparison function
function cmp($a, $b) {
	if ($a == $b) {
		return 0;
	}
	return ($a < $b) ? -1 : 1;
}

//Array to be sorted
$array = array('a' => 4, 'b' => 8, 'c' => -1, 'd' => -9, 'e' => 2, 'f' => 5, 'g' => 3, 'h' => -4);
$arrayObject = new ArrayObject($array);
print_r($arrayObject);

//Sort and print the resulting array
$arrayObject->uasort('cmp');
print_r($arrayObject);
?>

The above example will output:

Array
(
	[a] => 4
	[b] => 8
	[c] => -1
	[d] => -9
	[e] => 2
	[f] => 5
	[g] => 3
	[h] => -4
)
Array
(
	[d] => -9
	[h] => -4
	[c] => -1
	[e] => 2
	[g] => 3
	[a] => 4
	[f] => 5
	[b] => 8
)

Note that return values between -1 and 1 is considered 0.

ArrayObject::uksort:

ArrayObject::uksort - Sort the entries by keys using a user-defined comparison function

Desc:

public void ArrayObject::uksort ( callable $cmp_function )

This function sorts the keys of the entries using a user-supplied comparison function. The key
to entry correlations will be maintained.

Params:

cmp_function: The callback comparison function.

Function cmp_function should accept two params which will be filled by pairs of entry keys. The 
comparison function must return an integer less than, equal to, or greater than zero if the first
argument is considered to be respectively less than, equal to, or greater than the second.

Returns: Nothing

Examples:

Example #1 ArrayObject::uksort() example

<?php
function cmp($a, $b) {
	$a = preg_replace('@^(a|an|the) @', '', $a);
	$b = preg_replace('@^(a|an|the) @', '', $b);
	return strcasecmp($a, $b);
}

$array = array("John" => 1, "the Earth" => 2, "an apple" => 3, "a banana" => 4);
$arrayObject = new ArrayObject($array);
$arrayObject->uksort('cmp');

foreach ($arrayObject as $key => $value) {
	echo "$key: $value\n";
}
?>

The above example will output:

an apple: 3
a banana: 4
the Earth: 2
John: 1

ArrayObject::unserialize:

ArrayObject::unserialize - Unserialize an ArrayObject

Desc:

public void ArrayObject::unserialize ( string $serialized )

Unseralizes a serialized ArrayObject

Warning: This function is currently not documented, only arg list exists

Params:

serialized - The serialized ArrayObject

Returns: The unserialized ArrayObject

The SplObserver interface:

INtro:

The SplObserver interface is used alongside SplSubject to implement the Observer Design Pattern

Interface synopsis:

SplObserver {
	//Methods
	abstract public void update ( SplSubject $subject )
}

Table of Contents:

SplObserver::update - Receive update from subject

<?php

/**
 * Subject, that who makes news
 */
class Newspaper implements \SplSubject{
	private $name;
	private $observers = array();
	private $content;

	public function __construct($name) {
		$this->name = $name;
	}

	//add observer
	public function attach(\SplObserver $observer) {
		$this->observers[] = $observer;
	}

	//remove observer
	public function detach(\SplObserver $observer) {
		$key = array_search($observer, $this->observers, true);
		if($key) {
			unset($this->observers[$key]);
		}
	}

	//Set breakouts news
	public function breakOutNews($content) {
		$this->content = $content;
		$this->notify();
	}

	public function getContent() {
		return $this->content." ({$this->name})";
	}

	//notify observers(or some of them)
	public function notify() {
		foreach ($this->observers as $value) {
			$value->update($this);
		}
	}
}

/**
 * Observer, that who receives news
 */
class Reader implements SplObserver{
	private $name;

	public function __construct($name) {
		$this->name = $name;
	}

	public function update(\SplSubject $subject) {
		echo $this->name.' is reading breakout news <b>'.$subject->getContent().'</b><br>';
	}
}

$newspaper = new Newspaper('Newyork Times');

$allen = new Reader('Allen');
$jim = new Reader('Jim');
$linda = new Reader('Linda');

//add reader
$newspaper->attach($allen);
$newspaper->attach($jim);
$newspaper->attach($linda);

//remove reader
$newspaper->detach($linda);

//set break outs
$newspaper->breakOutNews('USA break down!');

//=========output============
//Allen is reading breakout news USA break down! (Newyork Times)
//Jim is reading breakout news US Break down! (newyork times)

Beware, you have written:

if($key){
	unset($this->observers[$key]);
}

When this should be:

if(false !== $key){
	unset($this->observers[$key]);
}

If the observer you want to delete is the first in your array, you will never delete it because the
key would equal 0 and 0 == false as you know.

SplObserver::update:

SplObserver::update - receive update from subject

Desc:

abstract public void SplObserver::update ( SplSubject $subject)

This method is called when any SplSubject to which the observer is attached calls SplSubject::notify()

Warning: This function is currently not documented, only arg list exists

Params:

subject: The SplSubject notifying the observer of an update

Returns: Nothing

The SplSubject interface:

Intro:

The SplSubject interface is used alongside SplObserver to implement the Observer Design Pattern.

Interface synopsis:

SplSubject {
	
	//Methods
	abstract public void attach ( SplObserver $observer )
	abstract public void detach ( SplObserver $observer )
	abstract public void notify()
}

Table of Contents:

SplSubject::attach - Attach an SplObserver
SplSubject::detach - Deatch an observer
SplSubject::notify - Notify an observer

<?php

// Example implementation of Observer design pattern:

class MyObserver1 implements SplObserver {
	public function update(SplSubject $subject) {
		echo __CLASS__ . ' - ' . $subject->getName();
	}
}

class MyObserver2 implements SplObserver {
	public function update(SplSubject $subject) {
		echo __CLASS__ . ' - ' . $subject->getName();
	}
}

class MySubject implements SplSubject {
	private $_observers;
	private $_name;

	public function __construct($name) {
		$this->_observers = new SplObjectStorage();
		$this->_name = $name;
	}

	public function attach(SplObserver $observer) {
		$this->_observers->attach($observer);
	}

	public function detach(SplObserver $observer) {
		$this->_observers->detach($observer);
	}

	public function notify() {
		foreach ($this->_observers as $observer) {
			$observer->update($this);
		}
	}

	public function getName() {
		return $this->_name;
	}
}

$observer1 = new MyObserver1();
$observer2 = new MyObserver2();

$subject = new MySubject("test");

$subject->attach($observer1);
$subject->attach($observer2);
$subject->notify();

/*
will output:

MyObserver1 - test
MyObserver2 - test
*/

$subject->detach($observer2);
$subject->notify();

/*
will output:

MyObserver1 - test
*/

?>

<?php
class Observable implements SplSubject
{
	private $storage;

	function __construct()
	{
		$this->storage = new SplObjectStorage();
	}

	function attach(SplObserver $observer)
	{
		$this->storage->attach($observer);
	}

	function detach(SplObserver $observer)
	{
		$this->storage->detach($observer);
	}

	function notify()
	{
		foreach ($this->storage as $obj) {
			$obj->update($this);
		}
	}
	//....
}

abstract class Observer implements SplObserver
{
	private $observable;

	function __construct(Observable $observable)
	{
		$this->observable = $observable;
		$observable->attach($this);
	}

	function update(SplSubject $subject)
	{
		if ($subject === $this->observable) {
			$this->doUpdate($subject);
		}
	}

	abstract function doUpdate(Observable $observable);
}

class ConcreteObserver extends Observer
{
	function doUpdate(Observable $observable)
	{
	}
}

$observable = new Observable();
new ConcreteObserver($observable);

Exceptions:

Table of Contents:

BadFunctionCallException

BadMethodCallException

DomainException

InvalidArgumentException

LengthException

LogicException

OutOfBoundsException

OutOfRangeException

OverflowException

RangeException

RuntimeException

UnderflowException

UnexpectedValueException

SPL provides a set of standard Exceptions.

See also the Predefined Exceptions

SPL Exception Class Tree:

LogicException (extends Exception)
	BadFunctionCallException
		BadMethodCallException

	DomainException
	InvalidArgumentException
	LengthException
	OutOfRangeException

RuntimeException (extends Exception)
	OutOfBoundsException
	OverflowException
	RangeException
	UnderflowException
	UnexpectedValueException

The BadFunctionCallException class

Intro:

Exception thrown if a callback refers to an undefined function or if some arguments are missing.

Class synopsis:

BadFunctionCallException extends LogicException {
	
	//INherited props
	protected string $message;
	protected int $code;
	protected string $file;
	protected int $line;

	//Inherited methods
	final public string Exception::getMessage()
	final public Throwable Exception::getPrevious()
	final public mixed Exception::getCode()
	final public string Exception::getFile()
	final public int Exception::getLine()
	final public array Exception::getTrace()

	final public string Exception::getTraceAsString()
	public string Exception::__toString()
	final private void Exception::__clone()
}

A typical use for this exception, is in conjunction with the is_callable() function.

For example:

function foo($arg) {
	$func = 'do' . $arg;
	if (!is_callable($func)) {
		throw new BadFunctionCallException('Function ' . $func . ' is not callable');
	}
}

The BadMethodCallException class:

intro:

Exception thrown if a callback refers to an undefined method or if some args are missing.

Class synopsis:

BadMethodCallException extends BadFunctionCallException {
	//Inherited properties
	protected string $message;
	protected int $code;
	protected string $file;
	protected int $line;

	//Inherited methods
	final public string Exception::getMessage()
	final public Throwable Exception::getPrevious()
	final public mixed Exception::getCode()
	final public string Exception::getFile()

	final public int Exception::getLine()
	final public array Exception::getTrace()
	final public string Exception::getTraceAsString()
	public string Exception::__toString()
	final private void Exception::__clone()
}

BadMethodCallException is typically used in conjunction with __call magic method.

The DomainException class:

intro:

Exception thrown if a value does not adhere to a defined valid data domain

Class synopsis:

DomainException extends LogicException {
	//inherited props
	protected string $message;
	protected int $code;
	protected string $file;
	protected int $line;

	//Inherited methods
	final public string Exception::getMessage()
	final public Throwable Exception::getPrevious()
	final public mixed Exception::getCode()

	final public string Exception::getFile()
	final public int Exception::getLine()
	final public array Exception::getTrace()
	final public string Exception::getTraceAsString()

	public string Exception::__toString()
	final private void Exception::__clone()
}

<?php
function renderImage($imageResource, $imageType)
{
	switch($imageType) {
	case 'jpg':
	case 'jpeg':
		header('Content-type: image/jpeg');
		imagejpeg($imageResource);
		break;
	case 'png':
		header('Content-type: image/png');
		imagepng($imageResource);
		break;
	default:
		throw new DomainException('Unkonwn image type: ' . $imageType);
		break;
	}
	imagedestroy($imageResource);
}
?>

I think this kind of Exception is perfect to throw when expected the type of param, value etc. is good,
but its value is out of domain. Look at RangeException:

>>Exception thrown to indicate range errors during program execution. Normally this means there was
an arithmetic error other than under/overflow. This is the runtime version of DomainException.<<

So, this kind of Exception is designed for a logic error.

When datatype is wrong, the better way is throwing InvalidArgumentException.

<?php
//here, use InvalidArgumentException
function media($x) {
	switch ($x) {
		case image:
			return 'PNG';
		break;
		case video:
			return 'MP4';
		break;
		default:
			throw new InvalidArgumentException("Invalid media type!");
	}
}?>

This is completely different situation compared to:

<?php
//here, use DomainException
$object = new Library();
try {
	$object->allocate($x);
} catch (toFewMin $e) {
	throw new DomainException("Minimal value to allocate is too high");
}
?>

The similar situation, but problem occurs during runtime:

<?php
class library {
	function allocate($x) {
		if ($x<1000)
			throw new RangeException ("Value is too low!");
	}
}
?>

Summary: DomainException corresponds to RangeException and we should use them in similar situations.
But first exception is designed to use when we are sure the problem is with our project, third-part 
elements etc. (simply: logical error), the second way is designed to use when we are sure the problem
is with input data or environment (simply: runtime error).

<?php

function divide($divident, $divisor) {
	if(!is_numeric($divident) || !is_numeric($divisor)) {
		throw new InvalidArgumentException("Function accepts only numeric values");
	}
	if($divisor == 0) {
		throw new DomainException("Divisor must not be zero");
	}
	return $divident / $divisor;
}

The InvalidArgumentException class:

Intro:

Exception thrown if an argument is not of the expected type

Class synopsis:

InvalidArgumentException extends LogicException {
	//Inherited props
	protected string $message;
	protected int $code;
	protected string $file;
	protected int $line;

	//Inherited methods
	final public string Exception::getMessage()
	final public Throwable Exception::getPrevious()
	final public mixed Exception::getCode()
	final public string Exception::getFile()

	final public int Exception::getLine()
	final public array Exception::getTrace()
	final public string Exception::getTraceAsString()
	public string Exception::__toString()
	final private void Exception::__clone()
}

In my opinion this exception is invaluable for validating arguments- for example providing strict typing 
a la C:

<?php
function tripleInteger($int)
{
	if(!is_int($int))
		throw new InvalidArgumentException('tripleInteger function only accepts integers. Input was: ' . $int);
	return $int * 3;
}

$x = tripleInteger(4); //$x == 12
$x = tripleInteger(2.5); //Exception will be thrown as 2.5 is a float
$x = tripleInteger('foo'); //exception will be thrown as 'foo' is a string
$x = tripleInteger('4'); //exception will thrown as '4' is also a string

?>

The LengthException class:

Intro:

Exception thrown if a length is invalid.

Class synopsis:

LengthException extends LogicException {
	
	//inherited props
	protected string $message;
	protected int $code;
	protected string $file;
	protected int $line;

	//Inherited methods
	final public string Exception::getMessage()
	final public Throwable Exception::getPrevious()
	final public mixed Exception::getCode()

	final public string Exception::getFile()
	final public int Exception::getLine()
	final public array Exception::getTrace()
	final public string Exception::getTraceAsString()
	public string Exception::__toString()
	final private void Exception::__clone()
}

The LogicException class:

Intro:

Exception that represents error in the program logic. This kind of exception should lead directly
to a fix in your code.

Class synopsis:

LogicException extends Exception {
	//inherited props
	protected string $message;
	protected int $code;
	protected string $file;
	protected int $line;

	//Inherited methods
	final public string Exception::getMessage()
	final public Throwable Exception::getPrevious()
	final public mixed Exception::getCode()

	final public string Exception::getFile()
	final public int Exception::getLine()
	final public array Exception::getTrace()
	final public string Exception::getTraceAsString()

	public string Exception::__toString()
	final private void Exception::__clone()
}

Direct known subclasses:

BadFunctionCallException, DomainException, InvalidArgumentException, LengthException, OutOfRangeException

The OutOfBoundsException class:

Intro:

Exception thrown if a value is not a valid key. This represents errors that cannot be detected
at compile time.

Class synopsis:

OutOfBoundsException extends RuntimeException {
	//Inherited props
	protected string $message;
	protected int $code;
	protected string $file;
	protected int $line;

	//Inherited methods
	final public string Exception::getMessage()
	final public Throwable Exception::getPrevious()
	final public mixed Exception::getCode()
	final public string Exception::getFile()

	final public int Exception::getLine()
	final public array Exception::getTrace()
	final public string Exception::getTraceAsString()

	public string Exception::__toString()
	final private void Exception::__clone()
}

OutOfRangeException is values being out of range.
OutOfBoundsException is for key values, not found in the target array or said structure.

I see this in this way:

By definition, OutOfRangeException should be use to when potentional problem is logical. This
(OutOfBoundsException) is for runtime, so it is perfect for catching errors which occurs because
of bad result from db and similar.

Example of using OutOfBoundsException (see also note in "OutOfRangeException class" article):

<?php
class HandleApplication {
	public function __construct($_POST) {
		if(!isset($_POST['secretCode']))
			throw new OutOfBoundsException('Application has not sent secret code for authentication');
	}
}

The OutOfRangeException class:

Intro:

Exception thrown when an illegal index was requested. This represents errors taht should be detected
at compile time.

Class synopsis:

OutOfRangeException extends LogicException {
	//inherited props
	protected string $message;
	protected int $code;
	protected string $file;
	protected int $line;

	//Inherited methods
	final public string Exception::getMessage()
	final public Throwable Exception::getPrevious()
	final public mixed Exception::getCode()
	final public string Exception::getFile()

	final public int Exception::getLine()
	final public array Exception::getTrace()
	final public string Exception::getTraceAsString()
	public string Exception::__toString()
	final private void Exception::__clone()
} 

The OverflowException class:

Intro:

Exception thrown when adding an element to a full container

Class synopsis:

OverflowException extends RuntimeException {
	//inherited props
	protected string $message;
	protected int $code;
	protected string $file;
	protected int $line;

	//inherited methods
	final public string Exception::getMessage()
	final public Throwable Exception::getPrevious()
	final public mixed Exception::getCode()

	final public string Exception::getFile()
	final public int Exception::getLine()
	final public array Exception::getTrace()
	final public string Exception::getTraceAsString()

	public string Exception::__toString()
	final private void Exception::__clone()
}

postgres-# create temporary table test (demo numeric(3,2));

function sumThenInsertDemo($a, $b){
	$sum = $a + $b;

	if ($sum >= 10){
		throw new OverflowException('$a + $b will overflow storage');
	}

	$link = pg_connect(...);
	pg_query($link, 'insert into test values('.$sum.')');
}

The RangeException class:

Intro:

Exception thrown to indicate range errors during program execution. Normally this means there was
an arithmetic error other than under/overflow. This is the runtime version of DomainException.

Class synopsis:

RangeException extends RuntimeException {
	//inherited props
	protected string $message;
	protected int $code;
	protected string $file;
	protected int $line;

	//inherited methods
	final public string Exception::getMessage()
	final public Throwable Exception::getPrevious()
	final public mixed Exception::getCode()
	final public string Exception::getFile()

	final public int Exception::getLine()
	final public array Exception::getTrace()
	final public string Exception::getTraceAsString()

	public string Exception::__toString()
	final private void Exception::__clone()
}

The RuntimeException class:

Intro:

Exception thrown if an error which can only be found on runtime occurs.

Class synopsis:

RuntimeException extends Exception {
	
	//inherited props
	protected string $message;
	protected int $code;
	protected string $file;
	protected int $line;

	//inherited methods
	final public string Exception::getMessage()
	final public Throwable Exception::getPrevious()

	final public mixed Exception::getCode()
	final public string Exception::getFile()
	final public int Exception::getLine()

	final public array Exception::getTrace()
	final public string Exception::getTraceAsString()
	public string Exception::__toString()
	final private void Exception::__clone()
}

A simple example of using RuntimeException class:

let us say we would be dividing two numbers and throw an exception as soon as the denominator is equal to zero.

<?php
$iNum1 = 10;
$iNum2 = 0;

try{
	if ($iNum2 == 0){
		throw new RuntimeException("Division by Zero");
	}
	$iResult = $iNum1 / $iNum2;
	echo("Division Result of \$iNum1 and $iNum2 = ".($iResult)."<br/>");
}
catch (RuntimeException $e) {
	echo("Division by Zero is not possible");
}
?>

The UnderflowException class:

Intro:

Exception thrown when performing an invalid operation on an empty container, such as removing
an element.

Class synopsis:

UnderflowException extends RuntimeException {
	//Inherited props
	protected string $message;
	protected int $code;
	protected string $file;
	protected int $line;

	//inherited methods
	final public string Exception::getMessage()
	final public Throwable Exception::getPrevious()
	final public mixed Exception::getCode()

	final public string Exception::getFile()
	final public int Exception::getLine()
	final public array Exception::getTrace()
	final public string Exception::getTraceAsString()

	public string Exception::__toString()
	final private void Exception::__clone()
}

UnderflowException handles exceptions due to a value being too small to maintain precision, resulting
in loss of accuracy. In PHP, this can occur when using floats:

echo (1-0.9) // 0.1
echo (1-0.99) //0.01
etc.

The UnexpectedValueException class:

Intro:

Exception thrown if a value does not match a set of values. Typically this happens when a function
calls another function and expects the return value to be of a certain type or value not including
arithmetic or buffer related errors.

Class synopsis:

UnexpectedValueException extends RuntimeException {
	//inherited props
	protected string $message;
	protected int $code;
	protected string $file;
	protected int $line;

	//inherited methods
	final public string Exception::getMessage()
	final public Throwable Exception::getPrevious()
	final public mixed Exception::getCode()

	final public string Exception::getFile()
	final public int Exception::getLine()
	final public array Exception::getTrace()
	final public string Exception::getTraceAsString()
	public string Exception::__toString()
	final private void Exception::__clone()
}

SPL Functions:

Table of Contents:

class_implements - Return the interfaces which are implemented by the given class or interface
class_parents - Return the parent classes of the given class
class_uses - Returns the traits used by the given class.
iterator_apply - Call a function for every element in an iterator

iterator_count - Count the elements in an iterator
iterator_to_array - Copy the iterator into an array
spl_autoload_call - Try all registered __autoload() function to load the requested class
spl_autoload_extensions - register and return default file extensions for spl_autoload
spl_autoload_functions - Return all registered __autoload() functions

spl_autoload_register - Register given function as __autoload() implementation
spl_autoload_unregister - Unregister given function as __autoload() implementation
spl_autoload - Default implementation for __autoload()
spl_classes - Return available SPL classes
spl_object_hash - Return hash id for given object

This code is an example. By using classes like this, you gives a chance to create classes which
extends another class but have most of the abilit what a class extends ArrayObject (like multiple
inheritance):

<?php

class foo
{
	public $foo = 'foo';
} //class

class foobar extends foo implements ArrayAccess, IteratorAggregate,Countable
{
	public function offsetExists($offset)
	{
		$array = array(1, 2, 3, 4);
		return array_key_exists($offset, $array);
	}

	public function offsetGet($offset)
	{
		$array = array(1, 2, 3, 4);
		return $array[$offset];
	}

	public function offsetSet($offset, $value)
	{
		//Makes "array" to readonly
	}

	public function offsetUnset($offset)
	{
		//makes "array" to readonly
	}

	function count()
	{
		$array = array(1, 2, 3, 4);
		return count($array);
	} //function

	function getArray()
	{
		return array(1, 2, 3, 4);
	} //function

	function getIterator()
	{
		return new ArrayIterator(array(1, 2, 3, 4));
	} //function

	function __toString()
	{
		return 'String test';
	} //function
} //class

$foobar = new foobar();
print $foobar[0].'<br/>';
print $foobar->foo.'<br/>';
print count($foobar).'<br/>';

foreach ($foobar as $k=>$v)
{
	print $k.'=>'.$v.'<br/>';
} //foreach

var_dump($foobar->getArray());

print $foobar;

//Generated output
1
foo
4
0=>1
1=>2
2=>3
3=>4
array
	0 => int 1
	1 => int 2
	2 => int 3
	3 => int 4
String test
?>

<?php
/*
How to store SPL Iterator results (rather than just echo-and-forget):

The library of Iterators are object based, so you need to trick the little rascals
into an array. Here is how, two ways:

1. Explicit typecasts: $a[] = (array)$Obj->objMethod();

2. Array definition: $a[] = array( key => $Obj->objMethod());

Examples: DirectoryIterator()
*/

// 1. explicitly typecast objects as array
foreach ( new DirectoryIterator('./') as $Item)
{
	$fname = (array)$Item->getFilename();
	$dir_listing[] = $fname[0];
}

//
echo "<pre>";
print_r($dir_listing); unset($dir_listing);
echo"</pre><hr />";
//

//or

//2. define array as key => object->method
foreach ( new DirectoryIterator('./') as $Item)
{
	$dir_listing[] = array(
		"fname" => $Item->getFilename(),
		"path" => $Item->getPathname(),
		"size" => $Item->getSize(),
		"mtime" => $Item->getMTime()
	);
}

//
echo "<pre>";
print_r($dir_listing); unset($dir_listing);
echo"</pre>";
//
?>

These two functions have exactly the same output, the only diff is in which dir iterator they use.
I hope someone out there can use it:

<?php
function listfilesin1 ($dir = ".", $depth=0) {
	echo "Dir: ".$dir."<br/>";
	foreach(new DirectoryIterator($dir) as $file) {
		if (!$file->isDot()) {
			if ($file->isDir()) {
				$newdir = $file->getPathname();
				listfilesin1($newdir, $depth+1);
			} else {
				echo "($depth)".$file->getPathname() . "<br/>";
			}
		}
	}
}
function listfilesin2 ($dir = ".", $depth=0) {
	echo "Dir: ".$dir."<br/>";
	foreach(new RecursiveDirectoryIterator($dir) as $file) {
		if ($file->hasChildren(false)) {
			$newdir = $file->key();
			listfilesin2($newdir, $depth+1);
		} else {
			echo "($depth)".$file->key() ."<br/>";
		}
	}
}
listfilesin();
?>

For some applications, i needed to reserve some standard iterators.

So i mocked up this flexible function.

<?php
function reverse_iterator(Iterator $iterator){
	$type = get_class($iterator);
	$array = array_reverse(iterator_to_array($iterator), true);
	return new $type($array);
}
?>

I have to correct my implementation from before. The example before only supported correct
read-access but failed on setting new values after creation of the ArrayMultiObject. Also
i had to correct a bug that occured from my CopyPasteChange into the comment textarea.

This snippet now hopefully implements a fully functional multidimensional array, represented
by an ArrayObject:

<?php
class ArrayMultiObject extends ArrayObject
{
	function __construct($array, $flags = 0, $iterator_class = "ArrayIterator")
	{
		$objects = array();
		foreach($array 	AS $key => $value) {
			if(is_array($value)) {
				$objects[$key] = new ArrayMultiObject($value, $flags, $iterator_class);

			} else {
				$objects[$key] = $value;
			}
		}

		parent::__construct($objects, $flags, $iterator_class);
	}

	public function offsetSet($name, $value)
	{
		if(is_array($value)) {
			$value = new ArrayMultiObject($value);
		}

		return parent::offsetSet($name, $value);
	}
}
?>

There is a RecursiveFilterIterator that makes the above code much easier. And then there is ParentIterator
that is already a filtering recursive iterator that only accepts elements that have children, with a RecursiveDirectoryIterator
as inner iterator you would obviously get only the dirs. Further more, it ensures that it creates the correct
children.

All in all, you simply need to do this:

$it = new RecursiveDirectoryIterator($path);
$it = new ParentIterator($it);
$it = new RecursiveIteratorIterator($it);

foreach($it as $dir => $o) {...}

Something to note that, at least to me, seems pretty important and is not entirely clear in the documentation
is the fact that the ArrayObject class supports get/set on uni-dimensional keys and get ONLY on *passed*
multi-dimensional keys/paths (see source below).

If you, like me, need to support array access overloading for multi-dimensional data, you will need
to derive from ArrayObject and override the ArrayAccess interface methods to "walk" passed data and
convert embedded arrays to objects of some kind.

Reference Bug 34816 @ http://bugs.php.net/bug.php?=34816

Illustration of the issue:

$a = array(
	"test" => array(
		"one" => "dunno",
		"two" => array(
			"peekabo" => "do you see me?",
			"anyone" => array("there")
			)
		)
	);
$oArray = new ArrayObject($a);
var_dump($oArray);

$oArray["three"] = "No problems here.";

echo "\n\\test\\one == " . $oArray["test"]["one"] . "\n\n";

//NEITHER of the two below will work
$oArray["test"]["one"] = "yes i do";
$oArray["test"]["yes"] = array(
	"Hello" => "Goodbye!"
	);

var_dump($oArray);

There is RecursiveArrayObject and RecursiveArrayIterator to deal with recursive structures.
However, this does not always solve all multidimensional issues as expected.

Here is a sample implementation of the RecursiveDirectoryIterator class. It prints a simple treeview
of a given dir:

<?php
function recurse($it) {
	echo '<ul>';
	for( ; $it->valid(); $it->next()) {
		if($it->isDir() && !$it->isDot()) {
			printf('<li class="dir">%s</li>', $it->current());
			if($it->hasChildren()) {
				$bleh = $it->getChildren();
				echo '<ul>' . recurse($bleh) . '</ul>';
			}
		} elseif($it->isFile()) {
			echo '<li class="file">'. $it->current() . ' (' . $it->getSize() . ' Bytes)</li>';
		}
	}
	echo '</ul>';
}

recurse(new RecursiveDirectoryIterator('D:/'));
?>

Bug #34816 Inconsistent behavior in ArrayObject for multi-dimensional data

Desc:

If you create an ArrayObject with multi-dimensional array data, you can access unique element
paths fine but you cannot change/add any multi-dimensional paths due to the dreaded "Fatal error:
Objects used as arrays in post/pre increment/decrement must return values by reference" error.
This happens in both 5.0.5 and 5.1.0RC1.

Either the documentation for ArrayObject should clearly indicate that it supports uni-dimensional
data get/set and ONLY get for multi-dimensional. OR, the object walk the passed data and turn all
arrays into ArrayObject instances?

reproduce code:

Reproduce code:

$a = array(
	"test" => array(
		"one" => "dunno",
		"two" => array(
			"peekabo" => "do you see me?",
			"anyone" => array("there")
			)
		)
	);
$oArray = new ArrayObject($a);
var_dump($oArray);
echo "\n\\test\\one == ". $oArray["test"]["one"] . "\n\n";

//NEITHER of the two below will work
$oArray["test"]["one"] = "Yes i do!";
$oArray["test"]["yes"] = array(
	"hello" => "goodbye!"
	);
var_dump($oArray);

Expected result:

object(ArrayObject)#1 (1) {
	["test"]=>
	array(2) {
		["one"]=>
		string(5) "dunno"
		["two"]=>
		array(2) {
			["peekabo"]=>
			string(14) "do you see me?"
			["anyone"]=>
			array(1) {
				[0]=>
				string(5) "there"
			}
		}
	}
}

\test\one == dunno

object(ArrayObject)#1 (1) {
	["test"]=>
	array(2) {
		["one"]=>
		string(5) "Yes i do!"
		["two"]=>
		array(2) {
			["peekabo"]=>
			string(14) "do you see me?"
			["anyone"]=>
			array(1) {
				[0]=>
				string(5) "there"
			}
		}
		["yes"]=>
		array(1) {
			["hello"]=>
			string(8) "Goodbye!"
		}
	}
}

Actual Result:

object(ArrayObject)#1 (1) {
	["test"]=>
	array(2) {
		["one"]=>
		string(5) "dunno"
		["two"]=>
		array(2) {
			["peekaboo"]=>
			string(14) "Do you see me?"
			["anyone"]=>
			array(1) {
				[0]=>
				string(5) "there"
			}
		}
	}
}

\test\one == dunno

Fatal error: Objects used as arrays in post/pre increment/decrement must return values
by reference in array_object_test.php on line 16

class_implements:

class_implements - Return the interfaces which are implemented by the given class or interface

desc:

array class_implements ( mixed $class [, bool $autoload = true ])

This function returns an array with the names of the interfaces that hte given class and its
parent implement

Params:

class: An object (class instance) or a string (class or interface name)

autoload: Whether to allow this function to load the class automatically through the __autoload() magic
method.

Returns: An array on success, FALSE on error.

Changelog:

Version 		desc
5.1.0 			Added the option to pass the class param as a string. Added the autoload param

Examples:

Example #1 class_implements() example

<?php

interface foo { }
class bar implements foo {}

print_r(class_implements(new bar));

//Since PHP 5.1.0 you may also specify the param as a string
print_r(class_implements('bar'));

function __autoload($class_name) {
	require_once $class_name . '.php';
}

// use __autoload to load the 'not_loaded' class
print_r(class_implements('not_loaded', true));

?>

The above outputs:

Array
(
	[foo] => foo
)

Array
(
	[interface_of_not_loaded] => interface_of_not_loaded
)

You can also check if a class implements an interface using instanceof.

e.g.:

<?php
if($myObj instanceof MyInterface) {
	echo "it is! IT ISSSSSSS";
}
?>

Hint:
<?php
in_array("your-interface", class_implements($object_or_class_name));
?>

WOuld check if 'your-interface' is ONE of the implemented interfaces.
Note that you can use something similar to be sure the class only implements that:

<?php
array("your-interface" == class_implements($object_or_class_name));
?>

I use the first technique to hceck if a module has the correct interface implemented, or else it throws
an exception.

Calling class_implements with a non-loadable class name or a non-object results in a warning:

<?php
//Warning: class_implements(): Class abc does not exist and could not be loaded in /home/a.panek/Projects/sauce
/lib/Sauce/functions.php on line 196

$interfaces = class_implements('abc');
?>

This is not documented and should just return FALSE as docs say, but it does not.

Luckily, it prints out superinterfaces, as well in reverse order so iterative seaching works
fine:

<?php

interface InterfaceA { }

interface InterfaceB extends InterfaceA { }

class MyClass implements InterfaceB { }

print_r(class_implements(new MyClass()));

?>

Prints out:

Array
(
	[InterfaceB] => InterfaceB
	[InterfaceA] => InterfaceA
)

class_parents:

class_parents: return the parent classes of the given class

desc:

array class_parents ( mixed $class [, bool $autoload = true ])

This function returns an array with the name of hte parent classes of the given class.

Params:

class: An object (class instance) or a string (class name).

autoload: Whether to allow this function to load the class automatically through the __autoload() magic method.

Returns: An array on success, FALSE on error.

Changelog:

Version 		Desc
5.1.0 			Added the option to pass the class parameter as a string. Added the autoload param.

Examples:

Example #1 class_parents() example

<?php

class foo { }
class bar extends foo {}

print_r(class_parents(new bar));

//Since PHP 5.1.0 you may also specify the param as a string
print_r(class_parents('bar'));

function __autoload($class_name) {
	require_once $class_name . '.php';
}

// use __autoload to load the 'not_loaded' class
print_r(class_parents('not_loaded', true));
?>

The above outputs aki nto:

Array
(
	[foo] => foo
)

Array
(
	[parent_of_not_loaded] => parent_of_not_loaded
)

<?php
class foo {}
class bar extends foo {}
class baz extends bar {}

print_r(class_parents(new baz));
?>

Will output:
Array
(
	[bar] => bar
	[foo] => foo
)

class_uses:

class_uses - Return the traits used by the given class

Desc:

array class_uses (mixed $class [, bool $autoload = true ])

This function returns an array with the names of the traits that the given class uses. This does however
not include any traits used by a parent class.

Params:

class: An object (class instance) or a string (class name)

autoload: Whether to allow this function to load the class automatically through the __autoload() magic method

Returns: An array on success, or FALSE on error.

Examples:

Example #1 class_uses() example

<?php

trait foo { }
class bar {
	use foo;
}

print_r(class_uses(new bar));

print_r(class_uses('bar'));

function __autoload($class_name) {
	require_once $class_name . '.php';
}

// use __autoload to load the 'not_loaded' class
print_r(class_uses('not_loaded', true));

?>

The above outputs something akin to:

Array
(
	[foo] => foo
)

Array
(
	[foo] => foo
)

Array
(
	[trait_of_not_loaded] => trait_of_not_loaded
)

To get ALL traits including those used by parent classes and other traits, use this function:

<?php
function class_uses_deep($class, $autoload = true) {
	$traits = [];
	do {
		$traits = array_merge(class_uses($class, $autoload), $traits);

	} while($class = get_parent_class($class));
	foreach ($traits as $trait => $same) {
		$traits = array_merge(class_uses($trait, $autoload), $traits);
	}
	return array_unique($traits);
}
?>

A slightly modified version from StealZ that also checks all the "parent" traits used by the traits:

<?php
public static function class_uses_deep($class, $autoload = true)
{
	$traits = [];

	//Get traits of all parent classes
	do {
		$traits = array_merge(class_uses($class, $autoload), $traits);

	} while ($class = get_parent_class($class));

	//get traits of all parent traits
	$traitsToSearch = $traits;
	while (!empty($traitsToSearch)) {
		$newTraits = class_uses(array_pop($traitsToSearch), $autoload);
		$traits = array_merge($newTraits, $traits);
		$traitsToSearch = array_merge($newTraits, $traitsToSearch);
	};

	foreach ($traits as $trait => $same) {
		$traits = array_merge(class_uses($trait, $autoload), $traits);
	}

	return array_unique($traits);
}
?>

iterator_apply:

Iterator_apply - call a function for every element in an iterator

desc:

int iterator_apply ( Traversable $iterator, callable $function [, array $args ])

calls a function for every element in an iterator.

Params:

iterator: The class to iterate over.

function: The callback function to call on every element.

Note: This function must return TRUE in order to continue iterating over the iterator.

Args: Arguments to pass to the callback function.

Returns:

The iteration count.

Examples:

Example #1 iterator_apply() example

<?php
function print_caps(Iterator $iterator) {
	echo strtoupper($iterator->current()) . "\n";
	return TRUE;
}

$it = new ArrayIterator(array("Apples", "Bananas", "Cherries"));
iterator_apply($it, "print_caps", array($it));
?>

The above example will output:

APPLES
BANANAS
CHERRIES

iterator_count:

Iterator_count - Count the elements in an iterator

Desc:

int iterator_count ( Traversable $iterator )

Count the elements in an iterator. iterator_count() is not guaranteed to retain the current pos
of the iterator.

Params:

iterator: The iterator being counted.

Returns: The number of elements in iterator.

Examples:

Example #1 Iterator_count() example

<?php
$iterator = new ArrayIterator(array('recipe' => 'pancakes', 'egg', 'milk', 'flour'));
var_dump(iterator_count($iterator));
?>

The above outputs:

int(4)

Example #2 iterator_count() modifies position

<?php
$iterator = new ArrayIterator(['one', 'two', 'three']);
var_dump($iterator->curent());
var_dump($iterator_count($iterator));
var_dump($iterator->current());
?>


The above will output:

string(3) "one"
int(3)
NULL

Example #3 iterator_count() in foreach loops

<?php
$iterator = new ArrayIterator(['one', 'two', 'three']);
foreach ($iterator as $key => $value) {
	echo "$key: $value (" . iterator_count($iterator) . ")\n";
}
?>

The above outputs:

0: one (3)

iterator_to_array:

iterator_to_array : Copy the iterator into an array

Desc:

array iterator_to_array ( Traversable $iterator [, bool $use_keys = true ])

Copy the elements of an iterator into an array.

Params:

iterator: the iterator being copied.

use_keys: Whether to use the iterator element keys as index.

In PHP 5.5 and later, if a key is an array or object, a warning will be generated. NULL keys will be converted into
an empty string, double keys will be truncated to their int counterpart, resource keys will generate a warning and
be converted to their resource ID and boolean keys will be converted to integers.

Note: If this param is not set to TRUE, duplicate keys will be overwritten. The last value with a given key will be
in the returned array. Set this param to FALSE to get all the values in any case.

Returns:

An array containing the elements of the iterator.

Changelog:

Version 	Desc
5.5.0 		iterator_to_array() gained support for key types other than integer and string when the use_keys param is enabled
5.2.1 		The use_keys param was added

Examples:

Example #1 iterator_to_array() example

<?php
$iterator = new ArrayIterator(array('recipe'=>'pancakes', 'egg', 'milk', 'flour'));
var_dump(iterator_to_array($iterator, true));
var_dump(iterator_to_array($iterator, false));
?>

The above will output:

array(4) {
	["recipe"]=>
	string(8) "pancakes"
	[0]=>
	string(3) "egg"
	[1]=>
	string(4) "milk"
	[2]=>
	string(5) "flour"
}
array(4) {
	[0]=>
	string(8) "pancakes"
	[1]=>
	string(3) "egg"
	[2]=>
	string(4) "milk"
	[3]=>
	string(5) "flour"
}

To generate an deep array from nested iterators:

<?php
function iterator_to_array_deep(\Traversable $iterator, $use_keys = true) {
	$array = array();
	foreach ($iterator as $key => $value) {
		if ($value instanceof \Iterator) {
			$value = iterator_to_array_deep($value, $use_keys);
		}
		if ($use_keys) {
			$array[$key] = $value;
		} else {
			$array[] = $value:
		}
	}
	return $array;
}
?>

When using iterator_to_array() on an SplObjectStorage object, it is adisable to set $use_keys
to false.

The resulting array is identical, since hte iterator keys produced by SplObject::key() are always integers
from 0 to (COUNT-1). Passing $use_keys=false cuts out hte unessecary calls to SplObject::key(), giving a
slight performance advantage.

Using the boolean param:

<?php

$first = new ArrayIterator(array('k1' => 'a', 'k2' => 'b', 'k3' => 'c', 'k4' => 'd'));
$second = new ArrayIterator(array('k1' => 'X', 'k2' => 'Y', 'Z'));

$combinedIterator = new AppendIterator();
$combinedIterator->append($first);
$combinedIterator->append($second);

var_dump(iterator_to_array($combinedIterator, false));

?>

Will output:

array(7) (
	[0]=>
	string(1) "a"
	[1]=>
	string(1) "b"
	[2]=>
	string(1) "c"
	[3]=>
	string(1) "d"
	[4]=>
	string(1) "X"
	[5]=>
	string(1) "Y"
	[6]=>
	string(1) "Z"
)

<?php

var_dump(iterator_to_array($combinedIterator, true));

?>

Will output (since keys overwrite to adhere to being the last one occurring):

array(5) (
	["k1"]=>
	string(1) "X"
	["k2"]=>
	string(1) "Y"
	["k3"]=>
	string(1) "c"
	["k4"]=>
	string(1) "d"
	[0]=>
	string(1) "Z"
)

generator approach:

function scandir_deep($dir)
{
	foreach (scandir($dir) as $key => $value)
		if (in_array($value, [".",".."]))
			continue;
		else if (is_dir($dir . DIRECTORY_SEPERATOR . $value))
			yield $value => scandir_deep($dir . DIRECTORY_SEPARATOR . $value);
		else
			yield $value;
}


The use_keys params was added in one of the 5.2.x releases, it defaulst to TRUE. This matches
the behavior in PHP 5.1.6, which lacks this param.

spl_autoload_call:

spl_autoload_call - Try all registered __autoload() function to load the requested class

Desc:

void spl_autoload_call ( string $class_name )

This function can be used to manually search for a class or interface using the registered __autoload functions.

params:

class_name: The class name being searched

Returns: Nothing

It should be noted, that calling spl_autoload_call on a child class, and then on its parent class, throws
a fatal error.

This happens because autoloading teh child class also loads the class it extends. And since spl_autoload_call
forcibly calls teh registered autoload function(s), not taking into account whether the class exists, a 
fatal error is thrown:

File: child.class.php

<?php
class Child extends Parent () {
	public function __construct () {
		parent::__construct();
	}
}
?>

File: parent.class.php

<?php
class Parent () {
	public function __construct() {
	}
}
?>

File: autoload.php

<?php

//Works fine
spl_autoload_call('Child');

//Throws: Fatal Error: Cannot redeclare class Parent in /parent.class.php on line 2
spl_autoload_call('Parent');

?>

spl_autoload_extensions:

spl_autoload_extensions - Register and return default file extensions for spl_autoload

Desc:

string spl_autoload_extensions ([ string $file_extensions ])

This function can modify and check the file extensions that the built in __autoload() fallback function
spl_autoload() will be using.

Params:

file_extensions: When calling without an argument, it simply returns the current list of extensions each
seperated by comma. To modify the list of the extensions, simply invoke the functions with the new list
of file extensions to use in a single string with each extension seperated by comma.

Returns: A comma delimited list of default file extensions for spl_autoload().

A quick note for anyone using this function to add their own autoload extensions. I found that if i included
a space in between the different extensions (i.e. '.php, .class.php') the function would not work. To get it
to work i had to remove the spaces between the extensions (ie '.php,.class.php'). This was tested in PHP
5.3.3 on Windows and i am using spl_autoload_register() without any custom autoload functions.

Extensions include the period. For example:

spl_autoload_extensions(".inc,.php,.lib,.lib.php");

Extension does not have to start with a dot, spl_autoload() will simply append whatever you supply to the
basename. The following example will try to load "test.php" first, and "test/index.php" as well:

spl_autoload_register('.php,/index.php');
spl_autoload('Test');

The order of the extensions influence the velocity of the reply. For example:

spl_autoload_extensions(".php, .inc");

is more fast than:

spl_autoload_extensions(".inc, .php");

Check out this example:

Some class files:

ClassA.php
<?php class ClassA { var $val = 'Hello from class "ClassA"'; } ?>

ClassB.php
<?php class ClassB { var $val = 'Hello from class "ClassB"'; } ?>

ClassC.php
<?php class ClassC { var $val = 'Hello from class "ClassC"'; } ?>

ClassD.php
<?php class ClassD { var $val = 'Hello from class "ClassD"'; } ?>

ClassE.php
<?php class ClassE { var $val = 'Hello from class "ClassE"'; } ?>

1. Simple:
<?php
//default priority: .inc, .php
for($n=65; $n<70; $n++) {
	$className = 'Class'.chr($n);
	spl_autoload($className);
	$ins = new $className;
	echo $ins->val.'<br>';
}
// 4.2 miliseconds
?>

2. Change prio:

<?php
spl_autoload_extensions('.php,.inc');
//new prio: .php .inc
for($n=65; $n<70; $n++) {
	$className = 'Class'.chr($n);
	spl_autoload($className);
	$ins = new $className;
	echo $ins->val.'<br>';
}
// 1.4 miliseconds
?>

spl_autoload_functions:

spl_autoload_functions - Return all registered __autoload() functions

Desc:

array spl_autoload_functions()

Get all registered __autoload() functions

Params:

This function has no params

Returns:

An array of all registered __autoload functions. If the autoload queue is not activated when the return value 
is FALSE. If no function is registered the return value will be an empty array.

If you use an anonymous function, it will return the object that are expected.

spl_autoload_register(function ($myclass){
	$keyclass = substr($myclass, 0, 1);

	switch ($keyclass) {
		case 'c':
			if (file_exists("class".DIRECTORY_SEPARATOR.$myclass.".php") === true)
				require_once("class".DIRECTORY_SEPARATOR.$myclass.".php");
			break;
		case 'i':
			if (file_exists("interface".DIRECTORY_SEPARATOR.$myclass.".php") === true)
				require_once("interface".DIRECTORY_SEPARATOR.$myclass.".php");
			break;
		case 'a':
			if (file_exists("abstract".DIRECTORY_SEPARATOR.$myclass.".php") === true)
				require_once("abstract".DIRECTORY_SEPARATOR.$myclass.".php");
			break;
		default:
			if (file_exists($myclass.".php") === true)
				require_once($myclass.".php");
	}
});

var_dump(spl_autoload_functions()) return;

array(1) {
	[0]=>
	object(Closure)#1 (1) {
		["parameter"]=>
		array(1) {
			["$myclass"]=>
			string(10) "<required>"
		}
	}
}

spl_autoload_register:

spl_autoload_register - Register given function as __autoload() implementation

Desc:

bool spl_autoload_register ([ callable $autoload_function [, bool $throw = true [, bool $prepend = false ]]])

Register a function with the spl provided __autoload queue. If the queue is not yet activated it will be activated.

if your code has an existing __autoload() function then this function must be explicitly registered on the 
__autoload queue. This is because spl_autoload_register() will effectively replace the engine cache for the
__autoload() function by either spl_autoload() or spl_autoload_call().

If there must be multiple autoload functions, spl_autoload_register() allows for this. It effectively
creates a queue of autoload functions, and runs through each of them in the order they are defined.
By contrast, __autoload() may only be defined once.

Params:

autoload_function: The autoload function being registered. If no param is provided, then the default implementation
of spl_autoload() will be registered.

throw: This param specifies whether the spl_autoload_register() should throw exceptions when the autoload_function
cannot be registered.

prepend: if ture, spl_autoload_register() will prepend the autoloader on the autoload queue instead of appending it.

Returns:

Returns TRUE on success or FALSE on failure.

Changelog:

Version 		Desc
5.3.0 			Namespaces support was introduced.
5.3.0 			The prepend param was added

Examples

Example #1 spl_autoload_register() as a replacement for an __autoload() function

<?php

//function __autoload($class) {
// 	  include 'classes/' . $class . '.class.php';
//}

function my_autoloader($class) {
	include 'classes/' . $class . '.class.php';
}

spl_autoload_register('my_autoloader');

//Or, using an anonymous function as of PHP 5.3.0
spl_autoload_register(function ($class) {
	include 'classes/' . $class . '.class.php';
});

?>

Example #2 spl_autoload_register() example where the class is not loaded

<?php

namespace Foobar;

class Foo {
	static public function test($name) {
		print '[[' . $name . ']]';
	}
}

spl_autoload_register(__NAMESPACE__ . '\Foo::test'); //AS of PHP 5.3.0

new InexistentClass;

?>

The above example will output something akin to:

[[Foobar\InexistentClass]]
Fatal error: Class 'Foobar\InexistentClass' not found in ...

Good news for PHP 5.3 users with namespaced classes:

When you create a subfolder structure matching the namespaces of the containing classes, you will
never even have to define an autoloader.

<?php
	spl_autoload_extensions(".php"); //comma-separated list
	spl_autoload_register();
?>

It is recommended to use only one extension for all classes. PHP (more exactly spl_autoload)
does the rest for you and is even quicker than a semantically equal self-defined autoload
function like this one:

<?php
	function my_autoload ($pClassName) {
		include(__DIR__ . "/" . $pClassName . ".php");
	}
	spl_autoload_register("my_autoload");
?>

I compared them with the following setting: There are 10 folders, each having 10 sub folders,
each ahving 10 sub folders, each containing 10 classes.

To load and instansiate these 1000 classes (parameterless no-action constructor), the user-defined
autoload function approach took 50ms longer in average than the spl_autoload function in a series
of 10 command-line calls fore ach approach.

I made this benchmark to ensure taht i do not recommend something that could be called, "nice, btu slow" later.

When switching from using __autoload() to using spl_autoload_register keep in mind that deserialization
of the session can trigger class lookups.

This works as expected:

<?php
session_start();
function __autoload($class) {
	...
}
?>

This will result in "__PHP_Incomplete_Class_Name" errors when using classes deserialized from the
session.

<?php
session_start();
function customAutoloader($class) {
	...
}
spl_autoload_register("customAutoloader");
?>

So you need to make sure the spl_autoload_register is done BEFORE session_start() is called.

CORRECT:
<?php
function customAutoloader($class) {
	...
}
spl_autoload_register("customAutoloader");
session_start();
?>

Think twice about throwing an exception from a registered autoloader.

If you have multiple autoloaders registered, and one (or more) throws an exception before a later
autoloader loads the class, stacked exceptions are thrown (and must be caught) even though the
class was loaded successfully.

When using spl_autoload_register() with class methods, it might seem that it can use only public
methods, though it can use private/protected methods as well, if registered from inside the class:

<?php

	class ClassAutoloader {
		public function __construct() {
			spl_autoload_register(array($this, 'loader'));
		}

		private function loader($className) {
			echo 'Trying to load ', $className, ' via ', __METHOD__ , "()\n";
			include $className . '.php';
		}
	}

	$autoloader = new ClassAutoloader();

	$obj = new Class1();
	$obj = new Class2();

?>

Output:

Trying to load Class1 via ClassAutoloader::loader()
Class1::__construct()

Trying to load Class2 via ClassAutoloader::loader()
Class2::__construct()

What i said here previously is only true on windows. The built-in default autoloader that is registered
when you call spl_autoload_register() without any arguments simply adds the qualified class name plus
the registered file extension (.php) to each of the include paths and tries to include said files.

Example (on Windows):

include paths:
- "."
- "d:/projects/phplib"

qualified class name to load:
network\http\rest\Resource

Here's what happens:

PHP tries to load
'.\\network\\http\\rest\\Resource.php'
-> file not found

PHP tries to load
'd:/projects/phplib\\network\\http\\rest\\Resource.php'
-> File found and included

Note the slashes and backslashes in the file path. On Windows this works perfectly,
but on a Linux machine, the backslashes won't work and additionally the file names
are case-sensitive.

That's why on Linux the quick-and-easy way would be to convert these qualified class
names to slashes and to lowercase and pass them to the built-in autoloader like so:

<?php
spl_autoload_register(
	function ($pClassName) {
		spl_autoload(strtolower(str_replace("\\", "/", $pClassName)));
	}
);
?>

But this means you have to save all of your classes with lowercase file names. Otherwise,
if you omit the strtolower call, you have to use the class names exactly as specified by the
file name, which can be annoying for class names that are defined with non-straightforward
case like e.g. XMLHttpRequest

I prefer the lowercase approach, because it is easier to use and the file name conversion
can be done automatically on deploying.

If your autoload function is a class method, you can call spl_autoloads_register with an array
specifying the class and the method to run.

//YOu can use a static method
<?php

class MyClass {
	public static function autoload($className) {
		//...
	}
}

spl_autoload_register(array('MyClass', 'autoload'));
?>

//Or you can use an instance:
<?php
class MyClass {
	public function autoload($className) {
		//...
	}
}

$instance = new MyClass();
spl_autoload_register(array($instance, 'autoload'));
?>

It seems, that spl_autoload tests if the class exists, after calling every registered loader. SO it breaks
the chain if the class exists and will not call the other loaders

<?php
function a ($c) {
	echo "a\n";
	class Bla {} // Usually "include 'path/to/file.php';"
}
function b ($c) {
	echo "b\n";
}
spl_autoload_register('a');
spl_autoload_register('b');

$c = new Bla();
?>

A note on registering autoloading functions with additional params.

./alf.home.php
<?php
/*
* class containing an autoloading function alias ALF
*/
class ALF {
	public function stuff($class = "ALF", $param = "Melmac") {
		echo "I am ".$class." from ".$param.".\n";
	}
}
?>

./kate.melmac.php
<?php
require_once("alf.home.php");
/*
* the normal way is to get ALF
* and register an autoloading function
*/
$alf = new ALF();
spl_autoload_register(array($alf, 'stuff'));
$alf->stuff(); 
/*
* Now let's try to autoload a class
*/
@$kate = new Kate(); // this throws a fatal error //Note, this example si fucking shitty informationwise

?>

I am ALF from Melmac.
I am Kate from Melmac.

./kate.earth.php
<?php
require_once("alf.home.php");

/*
* BUT what if we want to correct Kates origin?
* How can one pass params to an autoloading function upon registering
* 
* spl_autoload_register is not suitable for that
* but we can try to define a callable during registration
*/
spl_autoload_register(function($class){
	call_user_func(array(new ALF(), 'stuff'), $class, "Earth"); });
//Now let us try to autoload again
@$kate = new Kate(); //kate is from earth

/*
* Note: that you cannot pass $this or another object created
* 		outside of the callable context using the registering way above.
* 		Therefore you should swap your autoloading function to a seperate
* 		class as done at the beginning with ALF.
*
* NOTE: you may not be able to unregister your autoloading function
* 		directly as an instance was created in another context
*/
?>

Be careful using this function on case sensitive file systems.

<?php
spl_autoload_extensions('.php');
spl_autoload_register();
?>

I develop on OS X and everything was working fine. but when releasing to my linux server,
none of my class files were loading. I had to lowercase all my filenames, because calling a
class "DatabaseObject" would try including "databaseobject.php", instead of "DatabaseObject.php"

I think i will go back to the slightly slower __autoload() function, just so i can keep 
my class files readable

<?php
	//Example to auto-load class files from multiple dirs using the SPL_AUTOLOAD_REGISTER method.
	// It auto-loads any file it finds starting with class.<classname>.php (LOWERCASE), eg: class.from.php,
	class.db.php
	spl_autoload_register(function($class_name) {
		//Define an array of dirs in the order of their prio to iterate through
		$dirs = array(
			'project/', // Project specific classes (+Core Overrides)
			'classes/', // Core classes example
			'tests/', // Unit test classes, if using PHP-Unit
		);

		//Looping through each dir to load all the class files. It will only require a file once.
		// if it finds the same class in a dir later on, it will ignore it. Because of require_once
		foreach( $dirs as $dir ) {
			if (file_exists($dir, 'class.'.strtolower($class_name).'.php')) {
				require_once($dir.'class.'.strtolower($class_name).'.php');
				return;
			}
		}
	});

Editorial note: The appropiate PHP bug that requests behavior this function emulates is http://bugs.php.net/bug.php?id=42823.

This function does NOT work if there has been an array($obj, 'nonStaticMethod') registered in teh autoload stack--while
the autoload will be removed, it will be re-registered incorrectly

Bug #42823 spl_autoload_register() stack order

Desc:

spl_autoload_register() builds the autoload stack based upon the
sequence in which methods are added to the stack. This gives precedence
to the first methods loaded into the stack, not the subsequent ones.

This can be na issue when someone creates an initial autoloader to cover
the most generic of situations and is designed to order out when noting
can be found, either by using require() or by throwing an exception.

If i wanted to add a secondary autoloader to account for an additional
set of classes i would need to either unregister the intiial autoloader
and account for htose scenarios or change the order of the autoload stack.

I realize this suggests an API change, which is obviously less than
desirable. Perhaps, though, a method like spl_autoload_preregister()
could be added to prepend autoloaders to the stack, rather than append,
thus giving them predecence in the call order.

Reproduce code:

function genericAutoload($class) {
	if (!include($class . '.php')) {
		throw new Exception("Can't include!");
	} else {
		return true;
	}
}

function secondaryAutoload($class) {
	include('library/' . $class . '.php');
}

spl_autoload_register('genericAutoload');
spl_autoload_register('secondaryAutoload');

Expected result:

Autoloaders added later on in the code would be called first,
so the stack would be called in the reverse order it is now, or new
autoloaders would be prepended to the autoloader stack. This would
allow the first initial autoloader to error out as the last catch-all,
but subsequent autoloaders to accomodate particular scenarios, where
they would most likely not produce a total failure.

The reproduce code will show an instance where the secondary autoloader
will never be called because the first autoloaders called and designed
to fail if a file cannot be found for the given class.

-------------------------------------------------------------------------

The spl_autoload_register() method registers functions in its stack in the order that
spl_autoload_register() was called, and subsequently if you want an autoload
function to override previous autoload functions you will either need to unregister the
previous ones or change the order of the autoload stack.

For example, say in your default implementation of an autoload function you throw an
exception if the class cannot be found, or perhaps a fatal error. later on in your
code you add a second implementation of an autoload function which will load
a library that the previous method would fail on.

This will not call the second autoloader method first, but rather will continue
to error out on the first method.

As previously mentioned, you can unregister the existing autoloader that errors
out, or you can create a mechanism for unregistering and re-registering the
autoloaders in the order you want.

Here is a sample/example of how you might consider re-registering autoloader so
that the newest autoloader is called first, and the oldest last:

<?php

// Editorial notes: SMall bug and compability fixes
// added to the function

function spl_autoload_preregister( $autoload ) {
	//No functions currently in the stack
	if (($funcs = spl_autoload_functions()) === false) {
		spl_autoload_register($autoload);
	} else {
		// Unregister existing autoloaders.
		$compat = 
			version_compare(PHP_VERSION , '5.1.2', '<=') &&
			version_compare(PHP_VERSION, '5.1.0' , '>=');
		foreach ($funcs as $func) {
			if (is_array($func)) {
				//Tricky: There are some compability issuesa nd some
				//places hwere we need to error out
				$reflector = new ReflectionMethod($func[0], $func[1]);
				if (!$reflector->isStatic()) {
					throw new Exception('
						This function is not compatible
						with non-static object methods due to PHP bug #44144.
					');

				}
				//Surprisingly, spl_autoload_register supports the
				// Class::staticMethod callback format, although call_user_func does not
				if ($compat) $func = implode('::', $func);
			}
			spl_autoload_unregister($func);
		}

		//Register the new one, thus putting it at the front of the stack
		spl_autoload_register($autoload);

		//Now, go back and re-register all of our old ones
		foreach ($funcs as $func) {
			spl_autoload_register($func);
		}
	}
}

?>

Note: The above code is untested as far as performance goes, so, overhead is unaccounted for

It is never a good idea and a unconcsible concept to create the classes in the autoload function
via eval. It should be a nice feature with these Exception, but i think anyone is able to handle
it without this method although.

Atm i do not realize for what this is good for.

As i might notice, class_exists() will ever define the classes you only want to check for existence,
and will therefore ever return true:

<?php
function EvalIsEvil($class) {
	eval('class '.$className.'{}');
}
spl_autoload_register('EvalIsEvil');
if (class_exists($s="IsMyModuleHere")) {
	//This is no module, but get there with eval()
	return new $s();
}
?>

It is important to note that the autoloader will NOT be called if an E_STRICT error triggers
the error handler, which, in turn, tries to use classes which are not yet loaded.

In this instance, you should manually load classes required by the error handler.

This function is smart engou not to add the same loader twice. This seems to work for all of the
different loader formats. Example:

<?php
class ALoader
{
	static function load($class) { return true; }
}

function anotherLoader($class) {
	return true;
}

$F = new ALoader;

spl_autoload_register(array('ALoader', 'load'));
spl_autoload_register(array('ALoader', 'load'));
spl_autoload_register(array($F, 'load'));

spl_autoload_register('anotherLoader');
spl_autoload_register('anotherLoader');
var_dump(spl_autoload_functions());

/*
* Results on PHP 5.2 CLI, linux
* array(2) {
* 	[0]=>
* 	array(2) {
		[0]=>
		string(7) "ALoader"
		[1]=>
		string(4) "load"
	}
	[1]=>
	string(13) "anotherLoader"
}
*/
?>

I now utilize spl_autoload_register and there is no turning back. SO let me gather here for you
what i havel earned:

1.) The issue mentioned in these docs about case-sensitivity of filenames (WIndows vs Linux/Mac): It 
only comes into play if you do not provide your own custom function as an argument when calling spl_autoload_register.
your function is to accept a single argument which will be the class name that your code is currently 
trying to access.

I observe that the class name comes in with the same letter-casing as that you are actually using in
your code base (mixed-case or not). I am not doing/using namespaces, but as a best practice, and to make your
implementation straight-forward and predictable, go with fileName===className (1:1)

2.) I often refactor my code-base's directory structure as my code base morphs. I am not using namespaces, but even
if i were, i would want a decoupling between my namespace hierarchy and my dir structure hierarchy.

I like my dirs hierarchs to be intuitive for getting to code i want to work with. To save myself from having to
manually tell autoloader the path to each file/class, i cache a couple of arrays in static vars that store just the
set on the first call to my function. It is just a matter of looking up in the filename array. For safety,
and to be problem-free, no two php filenames should be identical across all of your dir hierarchy (your namespace)
-- I favor this practice anyway, and accordingly, i favor unqiue class names across my single namespace
(despite it not yet explicitly defined). I did build in a check in my function to ensure all PHP file
names/classes are unique.

3.) I converted many, many files that once had sets of functions in the global space to abstract classes that have
private static vars, and methods and of course also public static methods. So those sets of functions are now
encapsulated in objects, and those objects are now auto-loaded. SImply for this benefit i will never again
have a function in the global space other than my auto-loader function and other such exceptions as that.

4.) My auto-loader function uses only built-in php language constructs and operations and has no outside
depdencies.

5.) If you utilize the function class_exists() in your codebase somewhere, realize that unless you are passing
the second arg as false, you will trigger the autoloader to load the class. I stumbled on this of course.
My use-case is that i do not want the class loaded: I only wanted to take some action if the class was being
used (in an error-handler method)

6.) If you use the function method_exists(), you will definitly trigger the class to be loaded (which makes sense
since you have already decided to drill down to look for a specific method)

7.) I credit someone elses idea here: I also elected to call an init() method for the class being loaded should it
exist. This saves me from having to manually call from the outside, let alone managing how and from where the call
should be made. It is so useful to get your object set up and ready to do work in an automated fashion such as this.

8.) As another said, i also use require() and not require_once() as the first is enough to generate an error and if
already loaded the function will not have been called.

9.) If for some reason i fail to find a class name in my cached arrays, i knowingly still call require(), passing the
class name i had not accounted for in order to generate and reveal the problem (which of course is not anticipated).

10.) Again, i ensure uniqueness across all class names. If i observe non-uniqueness, i again do a faulty call
to require() like this: require('FoundMultiplesOfClassFile.php'); to reveal the problem.

Even when autoloading (SPL) is used, class inheritance does not seem to work. Simply the PHP engine is unable
to find parent (inherited) class. PHP 5.6 and 7.0 behave exactly same on this, which beats the purpose of autoloading.

And imo, it is easy to fix as the autoloader is able to find all first level classes w/o problems, it just needs
to follow same path recursively on parents too.

<?php
//using default SPL autoloader, with namespaces mapping 1:1 to dir structure, with file names being all lowercase
//THis works with first level classes only, for inheritance it does NOT work, it cannot find parent classes.
spl_autoload_register();

//This is ugly but working code if you want to be able to autoload parent classes too
spl_autoload_register(function ($class){
	require_once __DIR__ . '/' . strtolower(str_replace('\\', '/', $class) . '.php');
});

Cleverly - and usefully - I have noticed that (on PHP 5.3 at least) these autoloaders "kick in" even when
 you call a public static method of an as-yet-unloaded all static class.

spl_autoload_unregister:

spl_autoload_unregister - unregister given function as __autoload() implementation

Desc:

bool spl_autoload_unregister ( mixed $autoload_function )

Removes a function from the autoload queue. If the queue is activated and empty after removing the
given function then it will be deactivated.

When this function results in the queue being deactivated, any __autoload function that previously
existed will not be reactivated.

Params:

autoload_function: The autoload function being unregistered.

Returns: TRUE on success, FALSE on failure.

$functions = spl_autoload_functions();
	foreach($functions as $function) {
		spl_autoload_unregister($function);
	}

A nice way to unregister all functions.

Restore the binding to __autoload after using a spl_autoload_register() call:

<?php
spl_autoload_register(array('Doctrine', 'autoload'));

//Some process

spl_autoload_unregister(array('Doctrine', 'autoload'));

//But now the old __autoload is not triggered anymore
// you need to use:
spl_autoload_register('__autoload');

//But this will throw a LogicException if the __autoload
// function is not defined yet, so use:
function autoload__ ( $className ) {
	if (function_exists('__autoload'))
		__autoload($className);
}

spl_autoload_register('autoload__');

?>

So you can define your old __autoload in another file for example

spl_autoload:

spl_autoload - Default implementation for __autoload()

Desc:

void spl_autoload ( string $class_name [, string $file_extensions = spl_autoload_extensions() ])

This function is intended to be used as a default implementation for __autoload(). If nothing else
is specified and spl_autoload_register() is called without any params then this function will be
used for any later call to __autoload().

Params:

class_name: The lowercased name of the class ( and namespace) being instansiated

file_extensions: By default it checks all include paths to contain filenames built up by the lowercase class name
appended by the filename extensions .inc and .php

Returns: Nothing

Errors/Exceptions: Throws LogicException when the class is not found and there are no other autoloaders registered.

Note, that the default autoload implementation is written in C and is always slightly faster than your native PHP
one.

Here is a trick to use the default implementation with any configuration:

<?php

	//Your custom class dir
	define('CLASS_DIR', 'class/')

	//Add your class dir to include path
	set_include_path(get_include_path() . PATH_SEPARATOR_CLASS_DIR);

	//You can use this trick to make autoloader look for commonly used "My.class.php" type filenames
	spl_autoload_extensions('.class.php');

	//Use default autoload implementation
	spl_autoload_register();
?>

This also works with namespaces out of the box. So you can write code like "use My\Name\Object" and it will
map to "class/My/Name/Object.class.php" file path.

Note that this function will LOWERCASE the class names it is looking for, do not be confused when it cannot find
Foo_Bar.php

Also, unlike most other autoloader code snippets, this function DOES NOT translate underscores to slashes.

class Foo_Bar {}
will load foo_bar.php and will not try to load foo/bar.php

We can get around this with a simple regex assignment:

spl_autoload_register(function($class) { return spl_autoload(str_replace('_', '/', $class)); });

One small example that shows how you can use spl_autoload function in your MVC, Framework's applications.
For example, will use the Loader Class:

<?php

class Loader
{
	/**
	 * Controller Directory Path
	 *
	 * @var Array
	 * @access protected
	 */
	protected $_controllerDirectoryPath = array();

	/**
	 * Model Directory Path
	 *
	 * @var Array
	 * @access protected
	 */
	protected $_modelDirectoryPath = array();

	/**
	 * Library Directory Path
	 * 
	 * @var Array
	 * @access protected
	 */
	protected $_libraryDirectoryPath = array();


	/**
	 * Constructor
	 * Constants contain my full path to Model, View, Controllers and Library-Dirs
	 *
	 * @Constant MPATH, VPATH, CPATH, LPATH
	 */
	public function __construct()
	{
		$this->modelDirectoryPath = MPATH;
		$this->viewDirectoryPath = VPATH;
		$this->controllerDirectoryPath = CPATH;
		$this->libraryDirectoryPath = LPATH;

		spl_autoload_register(array($this, 'load_controller'));
		spl_autoload_register(array($this, 'load_model'));
		spl_autoload_register(array($this, 'load_library'));

		log_message('debug', "Loader Class Initialized");
	}

	/**
	 * 
	 * Load Library
	 *
	 * Method for load library
	 * This method return class object
	 *
	 * @library String
	 * @param String
	 * @access public
	 */
	public function load_library($library, $param = null)
	{
		if (is_string($library)) {
			return $this->initialize_class($library);
		}
		if (is_array($library)) {
			foreach ($library as $key) {
				return $this->initialize_class($library);
			}
		}
	}

	/**
	 * 
	 * Initialize Class
	 * 
	 * Method for initialize class
	 * This method returns a new object
	 * This method can initialize more classes using (array)
	 *
	 * @library String|Array
	 * @param String
	 * @access public
	 */
	public function initialize_class($library)
	{
		try {
			if (is_array($library)) {
				foreach($library as $class) {
					$arrayObject = new $class;
				}
				return $this;
			}
			if (is_string($library)) {
				$stringObject = new $library;
			} else {
				throw new ISException('Class name must be string.');
			}
			if (null == $library) {
				throw new ISException('You must enter the name of the class.');
			}
		} catch(Exception $exception) {
			echo $exception;
		}
	}

	/**
	 * Autoload Controller Class
	 * 
	 * @param string $class
	 * @return object
	 */
	public function load_controller($controller)
	{
		if ($controller) {
			set_include_path($this->controllerDirectoryPath);
			spl_autoload_extensions('.php');
			spl_autoload($class);
		}
	}

	/**
	* Autoload Model Class
	*
	* @param string $class
	* @return object
	*/
	public function load_models($model)
	{
		if($model) {
			set_include_path($this->modelDirectoryPath);
			spl_autoload_extensions('.php');
			spl_autoload($class);
		}
	}

	/**
	* Autoload Library class
	* 
	* @param string $class
	* @return object
	*/
	public function load_library($library)
	{
		if($library) {
			set_include_path($this->libraryDirectoryPath);
			spl_autoload_extensions('.php');
			spl_autoload($class);
		}
	}
}

?>

The documentation is a little unclear when it says: "The lowercased name of the class (and namespace) being instansiated".

What it actually means is that the argument can be in whatever case you want, but it will be converted to lowercase
before PHP starts looking for files. This is probably because in PHP, class names are case-insensitive (as well as
function names and namespaces) so it needs to convert to some canonical format.

Note that, the orders of file extensions is important for performance. You should make the priority of your favorite
file extension highest or use only one extension for your class files. Check out this example:

Some class files:

ClassA.php
<?php class ClassA { var $val = 'Hello from class "ClassA"'; } ?>

ClassB.php
<?php class ClassB { var $val = 'Hello from class "ClassB"'; } ?>

ClassC.php
<?php class ClassC { var $val = 'Hello from class "ClassC"'; } ?>

ClassD.php
<?php class ClassD { var $val = 'Hello from class "ClassD"'; } ?>

ClassE.php
<?php class ClassE { var $val = 'Hello from class "ClassE"'; } ?>

1. Simple:
<?php
//Default priority: .inc .php
for($n=65; $n<70; $n++) {
	$className = 'Class'.chr($n);
	spl_autoload($className);
	$ins = new $className;
	echo $ins->val.'<br>';
}
// 4.2 miliseconds
?>

2. Change prio:
<?php
spl_autoload_extensions('.php,.inc');
//new prio: .php .inc
for($n=65; $n<70; $n++) {
	$className = 'Class'.chr($n);
	spl_autoload($className);
	$ins = new $className;
	echo $ins->val.'<br>';
}
//1.4 miliseconds
?>

Or you can use this simple function that runs a bit faster for the extensions with lower prio
<?php
function my_autoload($className, $extList='.inc,.php') {
	$ext = explode(',', $extList);
	foreach($ext as $x) {
		$fname = $className.$x;
		if(@file_exists($fname)) {
			require_once($fname);
			return true;
		}
	}
	return false;
}

for($n=65; $n<70; $n++) {
	$className = 'Class'.chr($n);
	my_autoload($className);
	$ins = new $className;
	echo $ins->val.'<br>';
}
//2.6 miliseconds
?>

If you want to make the best use out of autoload with an APC cache, do not use spl_autoload. It uses relative
paths and thus will perform a stat even with apc.stat = 0 (either that, or it does not work at all).

Instead, make a custom function and use require/include with an absolute path (register it with spl_autoload_register).

Do NOT use *_once functions or a relative path. This will fail harder than spl_autoload.

Also avoid using file_exists and is_file. This will also perform a stat.

Why are stats bad? Because they access the file system. PHP does have a stat cache that helps, but it defeats the
purpose of apc.stat = 0.

It is also good to keep in mind that it is good to keep your custom autoload function simple. This is my Loader class:

<?php

class Loader
{
	public static function registerAutoload()
	{
		return spl_autoload_register(array(__CLASS__, 'includeClass'));
	}

	public static function unregisterAutoload()
	{
		return spl_autoload_unregister(array(__CLASS__, 'includeClass'));
	}

	public static function includeClass($class)
	{
		require(PATH . '/' . strtr($class, '_\\', '//') . '.php');
	}
}

?>

Also want to point out that APC does an optimization with require/include (not *_once) with relative paths
if require/include is done in the global scope (and it is not conditional). So it would be a good idea
to explicitly include files you know you are going to use on every request (but do not use *_once). You could,
for example, add a "registerProfiledAutoload" to the above class and keep track of what you are including
to help you determine what you could explicitly include (during development, not production).

The key is to try not ot make heavy use of autoload.

if you must use relative paths and do not care about having to lower-case your file-names then spl_autoload
works great.

<?php
/*
* define function responsible for loading class,
* replacing the old __ autoload.
* ROOT is constant of the path root of the system
*/
spl_autoload_extensions('.class.php');
spl_autoload_register('loadClasses');

function loadClasses($className)
{
	if(file_exists(ROOT_DIR.DS.'controller/'.$className'.class.php')){
		set_include_path(ROOT_DIR.DS.'controller'.DS);
		spl_autoload($className);
	}
	elseif(file_exists('model/'.$className.'.class.php')) {
		set_include_path(ROOT_DIR.DS.'model'.DS);
		spl_autoload($className);
	} elseif( file_exists('view/'.$className.'.class.php')){
		set_include_path(ROOT_DIR.DS.'view'.DS);
		spl_autoload($className);
	}else
	{
		set_include_path(ROOT_DIR.DS.'lib'.DS);
		spl_autoload($className);
	}
}
?>

Just thought i'd react to tthe notes about micro-optimization:

<?php
	//Your custom class dir
	define('CLASS_DIR', 'class/');

	//Add your class dir to include path
	set_include_path(get_include_path().PATH_SEPARATOR.CLASS_DIR);

//This adds the include path to the END of the paths PHP will scan for the class files, resulting in a bunch
// of misses (file-not-found's) before actually looking into CLASS_DIR. A more sensible approach would be to write
	
	set_include_path(
		CLASS_DIR.
		PATH_SEPARATOR,
		get_include_path()
	);

spl_classes:

spl_classes - Return available SPL classes

Desc:

array spl_classes()

This function returns an array with the current available SPL Classes.

Params: None

Returns: An array containing the currently available SPL classes.

Examples:

Example #1 spl_classes() example

<?php

print_r(spl_classes());

?>

The above will output something akin to:

Array
(
	[ArrayObject] => ArrayObject
	[ArrayIterator] => ArrayIterator
	[CachingIterator] => CachingIterator
	etc.
)

spl_object_hash:

spl_object_hash - Return hash id for given object

Desc:

string spl_object_hash ( object $obj )

This function returns a unique identifier for the object. This id can be used as a hash key for storing objects,
or for identifying an object, as long as the object is not destroyed. Once the object is destroyed, its hash
may be reused for other objects.

Params:

object: Any object

Returns: A string that is unqiue for each currently existing object and is always teh same for each object.

Examples:

Example #1 A spl_object_hash() example

<?php
$id = spl_object_hash($object);
$storage[$id] = $object;
?>

Notes:

When an object is destroyed, its hash may be reused for other objects.

Note that the contents (properties) of the object are NOT hashed by the function, merely
its internal handle and handler table pointer. This is sufficient to guarantee that any two
objects simultaneously co-residing in memory will have different hashes. Uniqueness is not 
guaranteed between objects that did not reside in memory simultaneously, for example:

var_dump(spl_object_hash(new stdClass()), spl_object_hash(new stdClass()));

Running this alone will usually generate the same hashes, since PHP reuses the internal
handle for the first stdClass after it has been dereferenced and destroyed when it creates
the second stdClass.

Note that given two different objects spl_object_hash() can return values that look very
similar, and in fact both the most significant and least siginificant digits are likely
to be identical. (This goes on to compare two almost identical hashes, but they are long)

Therefore, especially if using this function for debugging), you may wish to pass the
hash into a cryptographic hash function like md5() to get to facilitate visual comparisons,
and make it more likely that the first few or last few digits are unique.

Calling this a hash is very misleading:

1. This function givens an object identifier (ID), which uniquely identifies the object for its
whole lifetime. This is similar to the address of an object in C or the id() function in Python. I am
sure that other languages have similar constructs.

2. This is not a hash and has nothing to do with it. A hash takes data and algorithmically
reduces that data to some kind of scalar value. The only guarantee is that two equal inputs
provide the same output, but not that two different inputs provides different outputs
(hint: hash collisions). spl_object_hash() guarantees different outputs for non-identical
objects though.

3. As someone mentioned already, this does not look at the content of the object. If you consider
the difference between equality and identity, it only allows determining identity. If you serialize
and unserialize an object, it will not be identical to its former self, but it will be equal, just 
to give an example.

If you want a key to use in a response cache, using this function on the request is not only useless,
because equal requests have different IDs, but possibly even harmful, because when a request object
is garbage collected, its ID can be reused.

The "hash" mentioned in the name of this function refers to the storage structure known as a 
"hash table", not to any sort of "message digest". The string returned by this function is little
more than the object's address in the (hash) table PHP maintains of all existing objects.

Going back to what was important with Magento, tracking back to xml:

XML Parser

Intro:

XML (Extensible Markup language) is a data format for structured document interchange on the Web.
It is a standard defined by The World Wide Web Consortium (W3C). Information about XML and related
techs can be found at >> http://www.w3.org/XML/.

This PHP extension implements support for James Clark's expat in PHP. This toolkit lets you parse,
but not validate, XML documents. It supports three source character encodings also provided by
PHP: US-ASCII, ISO-8859-1 and UTF-8. UTF-16 is not supported.

This extension lets you create XML parsers and then define handlers for different XML events.
Each XML parser also has a few params you can adjust.

Installing/Configuring:

Table of Contents:

Requirements
Installation
Runtime Configuration
Resource Types

Requirements:

This extension requires the libxml PHP extension. This means that passing in --enable-libxml is also required,
although this is implicitly accomplished because libxml is enabled by default.

This extension uses an expat compat layer by default. It can use also expat, which can be found at >> http://www.jclark.com/xml/expat.html
The Makefile that comes with expat does not build a library by default, you can use this make rule for that:

libexpat.a: $(OBJS)
	ar -rc $@ (OBJS)
	ranlib $@

A source RPM package of expat can be found at http://sourceforge.net/projects/expat/

Installation:

This extension is enabled by default. It may be disabled by using the following option at compile time:
--disable-xml

These functions are enabled by default, using the bundled expat library. You can disable XML support with
--disable-xml. if you compile PHP as a module for Apache 1.3.9, or later, PHP will automatically use the
bundled expat library from Apache. if you do not want to use the bundled expat library, configure PHP
with --with-expat-dir=DIR, where DIR should point to the base installation directory of expat.

The Windows version of PHP has built-in support for this extension. You do not need to load any additional
extensions in order to use these functions.

Runtime config:

This extension has no config dirs efined in php.ini

Resource Types:

The xml resource as returned by xml_parse_create() and xml_parser_create_ns() references an xml parser
instance to be used with the functions provided by this extension.

Predefined Constants:

The constants below are defined by this extension, and will only be available when the extension either
has been compiled into PHP or dynamically loaded at runtime.

XML_ERROR_NONE(integer)

XML_ERROR_NO_MEMORY(integer)

XML_ERROR_SYNTAX(integer)

XML_ERROR_NO_ELEMENTS(integer)

XML_ERROR_INVALID_TOKEN(integer)

XML_ERROR_UNCLOSED_TOKEN(integer)

XML_ERROR_PARTIAL_CHAR(integer)

XML_ERROR_TAG_MISMATCH(integer)

XML_ERROR_DUPLICATE_ATTRIBUTE(integer)

XML_ERROR_JUNK_AFTER_DOC_ELEMENT(integer)

XML_ERROR_PARAM_ENTITY_REF(integer)

XML_ERROR_UNDEFINED_ENTITY(integer)

XML_ERROR_RECURSIVE_ENTITY_REF(integer)

XML_ERROR_ASYNC_ENTITY(integer)

XML_ERROR_BAD_CHAR_REF(integer)

XML_ERROR_BINARY_ENTITY_REF(integer)

XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF(integer)

XML_ERROR_MISPLACED_XML_PI(integer)

XML_ERROR_UNKNOWN_ENCODING(integer)

XML_ERROR_INCORRECT_ENCODING(integer)

XML_ERROR_UNCLOSED_CDATA_SECTION(integer)

XML_ERROR_EXTERNAL_ENTITY_HANDLING(integer)

XML_OPTION_CASE_FOLDING(integer)

XML_OPTION_TARGET_ENCODING(integer)

XML_OPTION_SKIP_TAGSTART(integer)

XML_OPTION_SKIP_WHITE(integer)

XML_SAX_IMPL(integer)
	Holds the SAX implementation method. Can be libxml or expat.

Event Handlers:

The XML event handlers defined are:

Supported XML handlers

PHP function to set handler 				Event desc

xml_set_element_handler() 					Element events are issued whenever the XML parser encounters start or end tags.
											There are separate handlers for start tags and end tags.

xml_set_character_data_handler() 			Character data is roughly all the non-markup contents of XML documents, including
											whitespace between tags. Note that the XML parser does not add or remove any whitespace,
											it is up to the application (you) to decide whether whitespace is significant.

xml_set_processing_instruction_handler() 	PHP programmers should be familiar with processing instructions (PIs) already. <?php ?> is
											a processing instruction, where php is called the "PI target". The handling of these are
											application-specific, except that all PI targets starting with "XML" are reserved.

xml_set_default_handler() 					What goes not to another handler goes to the default handler. You will get things like the XML
											and document type declarations in the default handler.

xml_set_unparsed_entity_decl_handler() 		This handelr will be called for declaration of an unparsed (NDATA) Entity

xml_set_notation_decl_handler() 			This handler is called for declaration of a notation

xml_set_external_entity_ref_handler() 		This handler is called when the XML parser finds a reference to an external parsed general
											entity. This can be a reference to a file or a URL, for example. See the external entity example
											for a demonstration.

xml_set_start_namespace_decl_handler() 		This handler is called for the start of a namespace declaration.

xml_set_end_namespace_decl_handler() 		This handler is called for the end of a namespace declaration. Note that htis event is not
											triggered by libXML.

Case Folding:

The element handler functions may get their element names case-folded. Case-folding is defined as "a process applied to a sequence of
chars, in which those identified as non-uppercase are replaced by their uppercase equivalents". In other words, when it comes to XML,
case-folding simply means uppercasing.

By default, all the element names that are passed to the handler functions are case-folded. This behavior can be queried and controlled
per XML parser with the xml_parser_get_option() and xml_parser_set_option() functions, respectively.

Error Codes:

The following constants are defined for XML error codes (as returned by xml_parse()):

XML_ERROR_NONE
XML_ERROR_NO_MEMORY
XML_ERROR_SYNTAX
XML_ERROR_NO_ELEMENTS

XML_ERROR_INVALID_TOKEN
XML_ERROR_UNCLOSED_TOKEN
XML_ERROR_PARTIAL_CHAR
XML_ERROR_TAG_MISMATCH

XML_ERROR_DUPLICATE_ATTRIBUTE
XML_ERROR_JUNK_AFTER_DOC_ELEMENT
XML_ERROR_PARAM_ENTITY_REF

XML_ERROR_UNDEFINED_ENTITY
XML_ERROR_RECURSIVE_ENTITY_REF
XML_ERROR_ASYNC_ENTITY
XML_ERROR_BAD_CHAR_REF

XML_ERROR_BINARY_ENTITY_REF
XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF
XML_ERROR_MISPLACED_XML_PI
XML_ERROR_UNKNOWN_ENCODING
XML_ERROR_INCORRECT_ENCODING

XML_ERROR_UNCLOSED_CDATA_SECTION
XML_ERROR_EXTERNAL_ENTITY_HANDLING

There is a list of 733 error codes:

Enum xmlParserErrors:

Enum xmlParserErrors {
	XML_ERR_OK = 0
	XML_ERR_INTERNAL_ERROR = 1 : 1
	XML_ERR_NO_MEMORY = 2 : 2
	XML_ERR_DOCUMENT_START = 3 : 3
	XML_ERR_DOCUMENT_EMPTY = 4 : 4

	XML_ERR_DOCUMENT_END = 5 : 5
	XML_ERR_INVALID_HEX_CHARREF = 6 : 6
	XML_ERR_INVALID_DEC_CHARREF = 7 : 7
	XML_ERR_INVALID_CHARREF = 8 : 8

	XML_ERR_INVALID_CHAR = 9 : 9
	XML_ERR_CHARREF_AT_EOF = 10 : 10
	XML_ERR_CHARREF_IN_PROLOG = 11 : 11
	XML_ERR_CHARREF_IN_EPILOG = 12 : 12

	XML_ERR_CHARREF_IN_DTD = 13 : 13
	XML_ERR_ENTITYREF_AT_EOF = 14 : 14
	etc.
	//There are tons of these, but this is the general gist of their construction
}

Character Encoding:

PHP's XML extension supports the Unicode character set through different char encodings. There are two types 
of character encodings, source encoding and target encoding. PHP's internal representation of the document is always
encoded with UTF-8.

Source encoding is done when an XML document is parsed. Upon creating an XML parser, a source encoding can be specified
(this encoding can not be changed later in the XML parser's lifetime). The supported source encodings are ISO-8859-1,
US-ASCII and UTF-8. The former two are single-byte encodings, which means that each char is represented by a single byte.

UTF-8 can encode chars composed by a variable number of bits (up to 21) in one to four bytes. The default source 
encoding used by PHP is ISO-8859-1.

Target encoding is done when PHP passes data to XML handler functions. When an XML parser is created, the target
encoding is set to the same as the source encoding, but this may be changed at any point. The target encoding
will affect character data as well as tag names and processing instruction targets.

If the XML parser encounters characters outside the range that it is source encoding is capable of representing,
it will return an error.

If PHP encounters chars in the parsed XML document that can not be represented in the chosen target encoding,
the problem chars will be "demoted". Currently, this means that such chars are replaced by question marks.

Examples:

Table of Contents:

XML Element Structure Example

XML Tag Mapping Example

XML External Entity Example

XML Element Structure Example:

This first example displays the structure of the start elements in a document with indentation.

Example #1 Show XML Element Structure

<?php
$file = "data.xml";
$depth = array();

function startElement($parser, $name, $attrs)
{
	global $depth;

	if (!isset($depth[$parser])) {
		$depth[$parser] = 0;
	}

	for ($i = 0; $i < $depth[$parser]; $i++) {
		echo "  ";
	}
	echo "$name\n";
	$depth[$parser]++;
}

function endElement($parser, $name)
{
	global $depth;
	$depth[$parser]--;
}

$xml_parser = xml_parser_create();
xml_set_element_handler($xml_parser, "startElement", "endElement");
if (!($fp = fopen($file, "r"))) {
	die("could not open XML input");
}

while ($data = fread($fp, 4096)) {
	if (!xml_parse($xml_parser, $data, feof($fp))) {
		die(sprintf("XML error: %s at line %d",
					xml_error_string(xml_get_error_code($xml_parser)),
					xml_get_current_line_number($xml_parser)));
	}
}
xml_parser_free($xml_parser);
?>

XML Tag Mapping Example:

Example #1 Map XML to HTML

This example maps tags in an XML document directly to HTML tags. Elements not found in the "map array"
are ignored. Of course, this example will only work with a specific XML document type.

<?php
$file = "data.xml";
$map_array = array(
	"BOLD" => "B",
	"EMPHASIS" => "I",
	"LITERAL" => "TT"
);

function startElement($parser, $name, $attrs)
{
	global $map_array;
	if (isset($map_array[$name])) {
		echo "<$map_array[$name]>";
	}
}

function endElement($parser, $name)
{
	global $map_array;
	if (isset($map_array[$name])) {
		echo "</$map_array[$name]>";
	}
}

function characterData($parser, $data)
{
	echo $data;
}

$xml_parser = xml_parser_create();
//Use case-folding so we are sure to find the tag in $map_array
xml_parser_set_option($xml_parser, XML_OPTION_CASE_FOLDING, true);
xml_set_element_handler($xml_parser, "startElement", "endElement");

xml_set_character_data_handler($xml_parser, "characterData");
if(!($fp = fopen($file, "r"))) {
	die("could not open XML input");
}

while ($data = fread($fp, 4096)) {
	if (!xml_parse($xml_parser, $data, feof($fp))) {
		die(sprintf("XML error: %s at line %d",
					xml_error_string(xml_get_error_code($xml_parser)),
					xml_get_current_line_number($xml_parser)));
	}
}
xml_parser_free($xml_parser);
?>

XML Tag Mapping Example:

Example #1 Map XML to HTML

This example maps tags in an XML document directly to HTML tags. Elements not found in the "map array"
are ignored. Of course, this example will only work with a specific XML document type.

<?php
$file = "data.xml";
$map_array = aray(
	"BOLD" => "B",
	"EMPHASIS" => "I",
	"LITERAL" => "TT"
);

function startElement($parser, $name, $attrs)
{
	global $map_array;
	if (isset($map_array[$name])) {
		echo "<$map_array[$name]>";
	}
}

function endElement($parser, $name)
{
	global $map_array;
	if (isset($map_array[$name])) {
		echo "</$map_array[$name]>";
	}
}

function characterData($parser, $data)
{
	echo $data;
}

$xml_parser = xml_parser_create();
//use case-folding so we are sure to find hte tag in $map_array
xml_parser_set_option($xml_parser, XML_OPTION_CASE_FOLDING, true);
xml_set_element_handler($xml_parser, "startElement", "endElement");
xml_set_character_data_handler($xml_parser, "characterData");

if(!($fp = fopen($file, "r"))) {
	die("could not open XML input");
}

while ($data = fread($fp, 4096)) {
	if (!xml_parse($xml_parser, $data, feof($fp))) {
		die(sprintf("XML error: %s at line %d",
					xml_error_string(xml_get_error_code($xml_parser)),
					xml_get_current_line_number($xml_parser)));
	}
}
xml_parser_free($xml_parser);
?>

XML External Entity Example

This example highlights XML code. It illustrates how to use an external entity reference handler to
include and parse other documents, as well as how PIs can be processed, and a way of determining 
"trust" for PIs containing code.

XML documents that can be used for this example are found below the example (xmltest.xml and xmltest2.xml)

Example #1 External Entity Example

<?php
$file = "xmltest.xml";

function trustedFile($file)
{
	//only trust local files owned by ourselves
	if (!preg_match("@^([a-z][a-z0-9+.-]*)\:\/\/@i", $file)
		&& fileowner($file) == getmyuid()) {
			return true;
	}
	return false;
}

function startElement($parser, $name, $attribs)
{
	echo "&lt;<font color=\"#0000cc\">$name</font>";
	if (count($attribs)) {
		foreach ($attribs as $k => $v) {
			echo " <font color=\"#009900\">$k</font>=\"<font
					color=\"#990000\">$v</font>\"";
		}
	}
	echo "&gt;";

}

function endElement($parser, $name)
{
	echo "&lt;/<font color=\"#0000cc\">$name</font>&gt;";
}

function characterData($parser, $data)
{
	echo "<b>$data</b>";
}

function PIHandler($parser, $target, $data)
{
	switch (strtolower($target)) {
		case "php":
			global $parser_file;
			// If the parsed document is "trusted", we say it is safe
			// to execute PHP code inside it. If not, display the code
			// instead.
			if (trustedFile($parser_file[$parser])) {
				eval($data);
			} else {
				printf("Untrusted PHP code: <i>%s</i>",
						htmlspecialchars($data));
			}
			break;
	}
}

function defaultHandler($parser, $data)
{
	if(substr($data, 0, 1) == "&" && substr($data, -1, 1) == ";") {
		printf('<font color="#aa00aa">%s</font>',
				htmlspecialchars($data));
	} else {
		printf('<font size="-1">%s</font>',
				htmlspecialchars($data));
	}
}

function externalEntityRefHandler($parser, $openEntityNames, $base, $systemId, $publicId) {
	if($systemId) {
		if (!list($parser, $fp) = new_xml_parser($systemId)) {
			printf("Could not open entity %s at %s\n", $openEntityNames,
					$systemId);
			return false;
		}
		while ($data = fread($fp, 4096)) {
			if (!xml_parse($parser, $data, feof($fp))) {
				printf("XML error: %s at line %d while parsing entity %s\n",
						xml_error_string(xml_get_error_code($parser)),
						xml_get_current_line_number($parser), $openEntityNames);
				xml_parser_free($parser);
				return false;
			}
		}
		xml_parser_free($parser);
		return true;
	}
	return false;
}

function new_xml_parser($file)
{
	global $parser_file;

	$xml_parser = xml_parser_create();
	xml_parser_set_option($xml_parser, XML_OPTION_CASE_FOLDING, 1);
	xml_set_element_handler($xml_parser, "startElement", "endElement");
	xml_set_character_data_handler($xml_parser, "characterData");

	xml_set_processing_instruction_handler($xml_parser, "PIHandler");
	xml_set_default_handler($xml_parser, "defaultHandler");
	xml_set_external_entity_ref_handler($xml_parser, "externalEntityRefHandler");

	if (!($fp = @fopen($file, "r"))) {
		return false;
	}
	if (!is_array($parser_file)) {
		settype($parser_file, "array");
	}
	$parser_file[$xml_parser] = $file;
	return array($xml_parser, $fp);
}

if (!(list($xml_parser, $fp) = new_xml_parser($file))) {
	die("could not open XML input");
}

echo "<pre>";
while ($data = fread($fp, 4096)) {
	if (!xml_parse($xml_parser, $data, feof($fp))) {
		die(sprintf("XML error: %s at line %d\n",
					xml_error_string(xml_get_error_code($xml_parser)),
					xml_get_current_line_number($xml_parser)));
	}
}
echo "</pre>";
echo "parse complete\n";
xml_parser_free($xml_parser);

?>

Example #2 xmltest.xml

<?xml version='1.0'?>
<!DOCTYPE chapter SYSTEM "/just/a/test.dtd" [
<!ENTITY plainEntity "FOO entity">
<!ENTITY systemEntity SYSTEM "xmltest2.xml">
]>
<chapter>
	<TITLE>Title &plainEntity;</TITLE>
	<para>
		<informaltable>
			<tgroup cols="3">
				<tbody>
					<row><entry>a1</entry><entry morerows="1">b1</entry><entry>c1</entry></row>
					<row><entry>a2</entry><entry>c2</entry></row>
					<row><entry>a3</entry><entry>b3</entry><entry>c3</entry></row>
				</tbody>
			</tgroup>
		</informaltable>
	</para>
	&systemEntity;
	<section id="about">
		<title>About this Document</title>
		<para>
			<!-- this is a comment -->
			<?php echo 'Hi! this is php version ' . phpversion(); ?>
		</para>
	</section>
</chapter>

This file is included form xmltest.xml

Example #3 xmltest2.xml

<?xml version="1.0"?>
<!DOCTYPE foo [
<!ENTITY testEnt "test entity">
]>
<foo>
	<element attrib="value"/>
	&testEnt;
	<?php echo "This is some more PHP code being executed."; ?>
</foo>

XML Parser Functions:

Table of Contents:

utf8_decode - Converts a string with ISO-8859-1 chars encoded with UTF-8 to single-byte ISO-8859-1

utf8_encode - Encodes an ISO-8859-1 string to UTF-8

xml_error_string - get XML parser error string

xml_get_current_byte_index - Get current byte index for an XML parser

xml_get_current_column_number - Get current column number for an XML parser

xml_get_current_line_number - Get current line number for an XML parser

xml_get_error_code - Get XML parser error code

xml_parse_into_struct - Parse XML data into an array structure

xml_parse - Start parsing an XML document

xml_parser_create_ns - Create an XML parser with namespace support

xml_parser_create - Create an XML parser

xml_parser_free - Free an XML parser

xml_parser_get_option - Get options from an XML parser

xml_parser_set_option - Set options in an XML parser

xml_set_character_data_handler - Set up character data handler

xml_set_default_handler - Set up default handler

xml_set_element_handler - Set up start and end element handlers

xml_set_end_namespace_decl_handler - Set up end namespace declaration handler

xml_set_external_entity_ref_handler - Sets up an external entity reference handler

xml_set_notation_decl_handler - Set up notation declaration handler

xml_set_object - Use XML Parser within an object

xml_set_processing_instruction_handler - Set up processing instruction (PI) handler

xml_set_start_namespace_decl_handler - Set up start namespace declaration handler

xml_set_unparsed_entity_decl_handler - Set up unparsed entity declaration handler

<?php
/**
* XML to Associative Array Class
*
* Usage:
* 	$domObj = new xmlToArrayParser($xml);
* 	$domArr = $domObj->array;
*
* 	if($domObj->parse_error) echo $domObj->get_xml_error();
* 	else print_r($domArr);
*
* 	On Success:
* 	eg. $domArr['top']['element2']['attrib']['var2'] => val2
*
* 	On Error:
* 	eg. Error Code [76] "Mismatched tag", at char 58 on line 3
*/

/**
* Convert an xml file or string to an associative array (including the tag attributes):
* $domObj = new xmlToArrayParser($xml);
* $elemVal = $domObj->array['element']
* Or: 	$domArr=$domObj->array; $elemVal = $domArr['element']
*
* @version 2.0
* @param Str $xml file/string
*/
class xmlToArrayParser {
	/** The array created by the parser can be assigned to any variable: $anyVarArr = $domObj->array */
	public $array = array();
	public $parse_error = false;
	private $parser;
	private $pointer;

	/** Constructor: $domObj = new xmlToArrayParser($xml); */
	public function __construct($xml) {
		$this->pointer =& $this->array;
		$this->parser = xml_parser_create("UTF-8");
		xml_set_object($this->parser, $this);
		xml_parser_set_option($this->parser, XML_OPTION_CASE_FOLDING, false);
		xml_set_element_handler($this->parser, "tag_open", "tag_close");
		xml_set_character_data_handler($this->parser, "cdata");
		$this->parse_error = xml_parse($this->parser, ltrim($xml)) ? false : true;
	}

	/*** Free the parser */
	public function __destruct() { xml_parser_free($this->parser);}

	/** Get the XML error if an error in the xml file occurred during parsing. */
	public function get_xml_error() {
		if($this->parse_error) {
			$errCode = xml_get_error_code ($this->parser);
			$thisError = "Error Code [". $errCode . "] \"<strong style='color:red;'>" . xml_error_string($errCode)."
</strong>\",
								at char ".xml_get_current_column_number($this->parser) . "
								on line ".xml_get_current_line_number($this->parser)."";
		} else $thisError = $this->parse_error;
		return $thisError;
	}

	private function tag_open($parser, $tag, $attributes) {
		$this->convert_to_array($tag, 'attrib');
		$idx=$this->convert_to_array($tag, 'cdata');
		if(isset($idx)) {
			$this->pointer[$tag][$idx] = Array('@idx' => $idx, '@parent' => &$this->pointer);
			$this->pointer =& $this->pointer[$tag][$idx];
		} else {
			$this->pointer[$tag] = Array('@parent' => &$this->pointer);
			$this->pointer =& $this->pointer[$tag];
		}
		if (!empty($attributes)) { $this->pointer['attrib'] = $attributes; }
	}

	/** Adds the current elements content to the current pointer[cdata] array */
	private function cdata($parser, $cdata) { $this->pointer['cdata'] = trim($cdata); }

	private function tag_close($parser, $tag) {
		$current = & $this->pointer;
		if(isset($this->pointer['@idx'])) {unset($current['@idx']); }

		$this->pointer = & $this->pointer['@parent'];
		unset($current['@parent']);

		if(isset($current['cdata']) && count($current) == 1) { $current = $current['cdata']; }
		else if(empty($current['cdata'])) {unset($current['cdata']); }
	}

	/** Converts a single element item into array(element[0]) if a second element of the same name is encountered */
	private function convert_to_array($tag, $item) {
		if(isset($this->pointer[$tag][$item])) {
			$content = $this->pointer[$tag];
			$this->pointer[$tag] = array((0) => $content);
			$idx = 1;
		} else if (isset($this->pointer[$tag])) {
			$idx = count($this->pointer[$tag]);
			if(!isset($this->pointer[$tag][0])) {
				foreach ($this->pointer[$tag] as $key => $value) {
					unset($this->pointer[$tag][$key]);
					$this->pointer[$tag][0][$key] = $value;
				}
			}
		} else $idx = null;
		return $idx;
	}
}
?>

This is supplemental info for the "class xmlToArrayParser".
This is a fully functional error free, extensively tested php class unlike the posts that follow it.

<?php
/**
* class xmlToArrayParser
*
	Notes:
	1. 'attrib' and 'cdata' are keys added to the array when the element contains both attribs and content.
	2. Ignores content that is not in between its own set of tags.
	3. Don't know if it recognizes processing instructions nor do i know about processing instructions.
		<\?some_pi some_attr="some_value"?> This is the same as a document declaration
	4. Empty elements are not included unless they have attribs
	5. Version 2.0, Dec. 2, 2011, added xml error reporting.

	Usage:
		$domObj = new xmlToArrayParser($xml);
		$elemVal = $domObj->array['element'];
		Or assign the entire array to its own variable:
		$domArr = $domObj->array;
		$elemVal = $domArr['element']

	Example:
		$xml = '<?xml version="1.0" encoding="UTF-8" standalone="no"?>
		<top>
			<element1>element content 1</element1>
			<element2 var2="val2" />
			<element3 var3="val3" var4="val4">element content 3</element>
			<element3 var5="val5">element content 4</element3>
			<element3 var6="val6" />
			<element3>element content 7</element3>
		</top>';

		$domObj = new xmlToArrayParser($xml);
		$domArr = $domObj->array;

		if($domObj->parse_error) echo $domObj->get_xml_error();
		else print_r($domArr);

		On Success:
		$domArr['top']['element1'] => element content 1
		$domArr['top']['element2']['attrib']['var2'] => val2
		$domArr['top']['element3']['0']['attrib']['var3'] => val3
		$domArr['top']['element3']['0']['attrib']['var4'] => val4
		$domArr['top']['element3']['0']['cdata'] => element content 3
		$domArr['top']['element3']['1']['attrib']['var5'] => val5
		$domArr['top']['element3']['1']['cdata'] => element content 4
		$domArr['top']['element3']['2']['attrib']['var6'] => val6
		$domArr['top']['element3']['3'] => element content 7

		On Error:
		Error Code [76] "Mismatched tag", at char 58 on line 3
*
*/
?>

utf8_decode:

utf8_decode - Convert a string with ISO-8859-1 characters encoded with UTF-8 to single-byte ISO-8859-1

Desc:

string utf8_decode ( string $data )

This function converts the string data from the UTF-8 encoding to ISO-8859-1. Bytes in the string which are not
valid UTF-8, and UTF-8 characters which do not exist in ISO-8859-1 (that is, characters above U+00FF) are 
replaced with ?.

Note:
Many web pages marked as using the ISO-8859-1 character encoding actually use the similar Windows-1252 encoding,
and web browsers will interpret ISO-8859-1 web pages as Windows-1252. Windows-1252 features additional printable
chars, such as the Euro sign (€) and curly quotes ("" but 'curly'), instead of certain ISO-8859-1 control chars.
This function will not convert such Windows-1252 chars correctly.

use a different function if Windows-1252 conversion is required.

Params:

data: a UTF-8 encoded string

Returns:

the ISO-8859-1 translation of data

Please note that utf8_decode simply converts a string encoded in UTF-8 to ISO-8859-1. A more appropiate name
for it would be utf8_to_iso88591. If your text is already encoded in ISO-8859-1, you do not need this function.
If you do not want to use ISO-8859-1, you do not need this function.

Note that UTF-8 can represent many more chars than ISO-8859-1. Trying to convert a UTF-8 string that contains
characters that cannot be represented in ISO-8859-1 to ISO-8859-1 will garble your text and/or cause chars to 
go missing. Trying to convert text that is encoded in UTF-8 using this function will most likely garble the text.

If you need to convert any text from any encoding to any other encoding, look at iconv() instead.

IMPORTANT: when converting UTF8 data that contains the EURO sign, do not use utf_decode function.

utf_decode converts the data into ISO-8859-1 charset, BUT ISO-8859-1 charset does not contain the EURO sign,
therefore the EURO sign will be converted into a question mark char '?'.

In order to convert properly UTF8 data with EURO sign you must use:

iconv("UTF-8", "CP1252", $data)

//This function helped me to do the job, thanks to Blackbit, i had to modify the deprecated ereg:
// original comment: "Squirrelmail contains a nice function in the sources to convert unicode to entities:"

function charset_decode_utf_8 ($string) {
	/* only do the slow convert if there are 8-bit chars */
	/* avoid using 0xA0 (\240) in ereg ranges. RH73 does not like that */
	if (!preg_match("/[\200-\237]/", $string)
		&& !preg_match("/[241-\377]/", $string)
	) {
		return $string;
	}

	//decode three byte unicode chars
	$string = preg_replace("/([\340-\357])([\200-\277])([\200-\277])/e",
		"'&#'.((ord('\\1')-224)*4096 + (ord('\\2')-128)*64 + (ord('\\3')-128)).';'",
		$string
	);

	//decode two byte unicode chars
	$string = preg_replace("/([\300-\337])([\200-\277])/e",
		"'&#'.((ord('\\1')-192)*64+(ord('\\2')-128)).';'",
		$string
	);

	return $string;
}

if you want to retrieve some UTF-8 data from your db, you do not need utf8_decode().

Simply do the following query before any SELECT:

$result = mysql_query("SET NAMES utf8");

utf8_encode:

utf8_encode - Encodes an ISO-8859-1 string to UTF-8

Desc:

string utf8_encode ( string $data )

This function converts the data from the ISO-8859-1 encoding to UTF-8.

Note:
Many web pages marked as using the ISO-8859-1 character encoding actually use the similar Windows-1252 encoding,
and web browsers will interpret ISO-8859-1 web pages as Windows-1252. Windows-1252 features additional printable chars,
such as the Euro sign (€) and curly quotes("" but curly), instead of certain ISO-8859-1 control chars.

This function will not convert such Windows-1252 chars correctly. Use a different function if Windows-1252 conversion
is required.

Params:

data: An ISO-8859-1 string

Returns: Returns the UTF-8 translation of data.

Please note that utf8_encode only converts a string encoded in ISO-8859-1 to UTF-8. A more appropiate
name for it would be "iso88591_to_utf8". If your text is not encoded in ISO-8859-1, you do not need this
function. If your text is already in UTF-8, you do not need this function.

In fact, applying this function to text that is not encoded in ISO-8859-1 will most likely simply garble
that text.

If you need to convert text from any encoding to any other encoding, look at iconv() instead.

Walk through nested arrays/objects and utf8 encode all strings.

<?php
//Usage
class Foo {
	public $somevar = 'whoop whoop';
}

$structure = array(
	'object' => (object) array(
		'entry' => 'hello world',
		'another_array' => array(
			'string',
			1234,
			'another string'
		)
	),
	'string' => 'foo',
	'foo_object' => new Foo
);

utf8_encode_deep($structure);

// $structure is now utf8 encoded
print_r($structure);

//The function
function utf8_encode_deep(&$input) {
	if (is_string($input)) {
		$input = utf8_encode($input);
	} else if (is_array($input)) {
		foreach ($input as &$value) {
			utf8_encode_deep($value);
		}

		unset($value);
	} else if (is_object($input)) {
		$vars = array_keys(get_object_vars($input));

		foreach ($vars as $var) {
			utf8_encode_deep($input->$var);
		}
	}
}
?>

I tried a lot of things, but this seems to be the final fail save method to convert any string to proper UTF-8.

<?php
function _convert($content) {
	if(!mb_check_encoding($content, 'UTF-8')
		OR !($content === mb_convert_encoding(mb_convert_encoding($content, 'UTF-32', 'UTF-8'), 'UTF-8', 'UTF-32'))) {

		$content = mb_convert_encoding($content, 'UTF-8');

		if (mb_check_encoding($content, 'UTF-8')) {
			//log('Converted to UTF-8');
		} else {
			//log('Could not be converted to UTF-8');
		}
	}
	return $content;
}
?>

If you need a function which converts a string array into a utf8 encoded string array then this function
might be useful to you:

<?php
function utf8_string_array_encode(&$array){
	$func = function(&$value, &$key){
		if(is_string($value)){
			$value = utf8_encode($value);
		}
		if(is_string($key)){
			$key = utf8_encode($key);
		}
		if(is_array($value)){
			utf8_string_array_encode($value);
		}
	};
	array_walk($array, $func);
	return $array;
}
?>

<?php
	/**
	* Encodes an ISO-8859-1 mixed variable to UTF-8 (PHP 4, PHP 5 compat)
	* @param mixed $input An array, associative or simple
	* @param boolean $encode_keys optional
	* @return mixed ( utf-8 encoded $input )
	*/

	function utf8_encode_mix($input, $encode_keys=false)
	{
		if(is_array($input))
		{
			$result = array();
			foreach($input as $k => $v)
			{
				$key = ($encode_keys) ? utf8_encode($k) : $k;
				$result[$key] = utf8_encode_mix($v, $encode_keys);
			}
		}
		else
		{
			$result = utf8_encode($input);
		}

		return $result;
	}
?>

For reference, it may be insightful to point out that:
	utf8_encode($s)

is actually identical to:
	recode_string('latin1..utf8', $s)
and:
	iconv('iso-8859-1', 'utf-8', $s)

That is, utf8_encode is a specialized case of char set conversions.

If your string to be converted to utf-8 is something other than iso-8859-1 (such as iso-8859-2 (Polish/Croatian)),
you should use recode_string() or iconv() instead rather than trying to devise complex str_replace statements.

xml_error_string:

xml_error_string - Get XML parser error string

Desc:

string xml_error_string ( int $code )

Gets the XML parser error string associated with the given code.

Params:

code - An error code from xml_get_error_code()

Returns:

Returns a string with a textual description of the error code, or FALSE if no description was found.

Tow notes in one:

Here is the combination of xml_get_error_code() and xml_error_string() to get the error printout as an echo response

Also, i tested before and after xml_parser_free() - as expected, the error is indeed cleared with the free()
so check your error before calling xml_parser_free()

<?php
$p = xml_parser_create();
xml_parse_into_struct($p, $data, $vals, $index);

//This call prints error
echo 'ERROR if any ' .xml_error_string(xml_get_error_code($p));
xml_parser_free($p);
echo "Index array\\n";

print_r($index);
echo "\\nVals array\\n";
print_r($vals);
//No Error left here to be printed
echo 'ERROR if any '.xml_error_string(xml_get_error_code($p));
exit;
?>

xml_get_current_byte_index:

xml_get_current_byte_index - Get current byte index for an XML parser

Desc:

int xml_get_current_byte_index ( resource $parser )

Gets the current byte index of the given XML parser

Params:

parser: A reference to the XML parser to get byte index from.

Returns:

This function returns FALSE if parser does not refer to a valid parser, or else it returns which byte index
the parser is currently at in its data buffer (starting at 0)

Notes:

Warning: this function returns byte index according to UTF-8 encoded text disregarding if input is
in another encoding.

The outcome of this function is heavily dependent on the parser implementation used. For example, at the
point where the start_element_ callback is called, libxml2 parser consumes the entire element name and
attributes, however expat does not.

xml_get_current_column_number:

xml_get_current_column_number - Get current column number for an XML parser

Desc:

int xml_get_current_column_number ( resource $parser )

Gets the current column number of the given XML parser.

Params:

parser: A reference to the XML parser to get column number from

Returns:

This function returns FALSE if parser does not refer to a valid parser, or else it returns which column on the 
current line (as given by xml_get_current_line_number()) the parser is currently at.

xml_get_current_line_number:

xml_get_current_line_number - Get current line number for an XML parser

Desc:

int xml_get_current_line_number ( resource $parser )

Gets the current line number for the given XML parser.

Params:

parser: A reference to the XML parser to get line number from

Returns:
This function returns FALSE if parser does not refer to a valid parser, or else it returns which line
the parser is currently at in its data buffer.

xml_get_error_code:

xml_get_error_code - Get XML parser error code

Desc:

int xml_get_error_code ( resource $parser )

gets the XML parser error code

Params:

parser: A reference to the XML parser to get error code from.

Returns:

This function returns FALSE if parser does not refer to a valid parser, or else it returns one
of the error codes listed in the error codes section.

xml_parse_into_struct:

xml_parse_into_struct - Parse XML data into an array structure

Desc:

int xml_parse_into_struct ( resource $parser, string $data, array &$values [, array &$index ])

This function parses an XML string into 2 parallel array structures, one (index) containing pointers
to the location of the appropiate values in the values array. These last two params must be passed
by reference.

Params:

parser: A reference to the XML parser.

data: A string containing the XML data.

values: An array containing the values of the XML data

index: An array containing pointers to the location of the appropiate values in the $values.

Returns:

xml_parse_into_struct() returns 0 for failure and 1 for success. This is not the same as FALSE and TRUE, be careful
with operators such as ===

Examples:

Below is an example that illustrates the internal structure of the arrays being generated by the function.
We use a simple note tag embedded inside a para tag, and then we parse this and print out the structures
generated:

Example #1 xml_parse_into_struct() example

<?php
$simple = "<para><note>simple note</note></para>";
$p = xml_parser_create();

xml_parse_into_struct($p, $simple, $vals, $index);
xml_parser_free($p);

echo "Index array\n";
print_r($index);
echo "\nVals array\n";
print_r($vals);
?>

When we run that code, the output will be:

Index array
Array
(
	[PARA] => Array
		(
			[0] => 0
			[1] => 2
		)
	[NOTE] => Array
		(
			[0] => 1
		)
)

Vals array
Array
(
	[0] => Array
		(
			[tag] => PARA
			[type] => open
			[level] => 1
		)

	[1] => Array
		(
			[tag] => NOTE
			[type] => complete
			[level] => 2
			[value] => simple note
		)

	[2] => Array
		(
			[tag] => PARA
			[type] => close
			[level] => 1
		)
)

Event-driven parsing (based on the expat library) can get complicated when you have an XML document
that is complex. This function does not produce a DOM style object, but it generates structures amenable
of being traversed in a tree fashion. Thus, we can create objects representing the data in the XML file
easily. Let us consider the following XML file representing a small database of aminoacids info:

Example #2 moldb.xml - small DB of molecular info

<?xml version="1.0"?>
<moldb>
	
	<molecule>
		<name>Alanine</name>
		<symbol>ala</symbol>
		<code>A</code>
		<type>Hydrophobic</type>
	</molecule>

	<molecule>
		<name>Lysine</name>
		<symbol>lys</symbol>
		<code>K</code>
		<type>charged</type>
	</molecule>
</moldb>

And some code to parse the document and generate the appropiate objects:

Example #3 parsemoldb.php - parses moldb.xml into an array of molecular objects

<?php

class AminoAcid {
	var $name; // aa name
	var $symbol; //three letter symbol
	var $code; // one letter code
	var $type; //hydrophobic, charged or neutral

	function AminoAcid ($aa)
	{
		foreach ($aa as $k => $v)
			$this->$k = $aa[$k];
	}
}

function readDatabase($filename)
{
	// read the XML database of aminoacids
	$data = implode("", file($filename));
	$parser = xml_parser_create();

	xml_parser_set_option($parser, XML_OPTION_CASE_FOLDING, 0);
	xml_parser_set_option($parser, XML_OPTION_SKIP_WHITE, 1);
	xml_parse_into_struct($parser, $data, $values, $tags);
	xml_parser_free($parser);

	//Loop through the structures
	foreach ($tags as $key=>$val) {
		if ($key == "molecule") {
			$molranges = $val;
			//each contigious pair of array entires are the 
			// lower and upper range for each molecule definition
			for ($i = 0; $i < count($molranges); $i += 2) {
				$offset = $molranges[$i] + 1;
				$len = $molranges[$i + 1] - $offset;
				$tdb[] = parseMol(array_slice($values, $offset, $len));
			}
		} else {
			continue;
		}
	}
	return $tdb;
}

function parseMol($mvalues)
{
	for ($i=0; $i < count($mvalues); $i++) {
		$mol[$mvalues[$i]["tag"]] = $mvalues[$i]["value"];
	}
	return new AminoAcid($mol);
}

$db = readDatabase("moldb.xml");
echo "** Database of AminoAcid objects:\n";
print_r($db);

?>

After executing parsemoldb.php, the variable $db contains an array of AminoAcid object, and the output of hte
script confirms that:

** Database of AminoACid objects:
Array
(
	[0] => aminoacid Object
		(
			[name] => Alanine
			[symbol] => ala
			[code] => A
			[type] => hydrophobic
		)

	[1] => aminoacid Object
		(
			[name] => Lysine
			[symbol] => lys
			[code] => K
			[type] => charged
		)
)


This is extending what Alf Marius Foss olsen has posted above.

It takes into account array keys with the same name and uses an increment for them instead
of overwriting the keys.

I am using it for SOAP requests (20K - 150K) and it parses very fast compared to PEAR.

<?php

class XMLParser {
	 //raw xml
	 private $rawXML;

	 //xml parser
	 private $parser = null;

	 //array returned by the xml parser
	 private $valueArray = array();
	 private $keyArray = array();

	 //arrays for dealing with duplicate keys
	 private $duplicateKeys = array();

	 //Return data
	 private $output = array();
	 private $status;

	 public function XMLParser($xml){
	 	$this->rawXML = $xml;
	 	$this->parser = xml_parser_create();
	 	return $this->parse();
	 }

	 private function parse(){
	 	$parser = $this->parser;

	 	xml_parser_set_option($parser, XML_OPTION_CASE_FOLDING, 0); //Dont mess with my case settings
	 	xml_parser_set_option($parser, XML_OPTION_SKIP_WHITE, 1); //Do not bother with empty info
	 	if(!xml_parse_into_struct($parser, $this->rawXML, $this->valueArray, $this->keyArray)){
	 		$this->status = 'error: '.xml_error_string(xml_get_error_code($parser)).' at line '.xml_get_current_line_number($parser);
	 		return false;
	 	}
	 	xml_parser_free($parser);

	 	$this->findDuplicateKeys();

	 	//tmp array used for stacking
	 	$stack = array();
	 	$increment = 0;

	 	foreach($this->valueArray as $val) {
	 		if($val['type'] == "open") {
	 			//if array key is duplicate then send in increment
	 			if(array_key_exists($val['tag'], $this->duplicateKeys)){
	 				array_push($stack, $this->duplicateKeys[$val['tag']]);
	 				$this->duplicateKeys[$val['tag']]++;
	 			}
	 			else{
	 				//Else send in tag
	 				array_push($stack, $val['tag']);
	 			}
	 		} elseif($val['type'] == "close") {
	 			array_pop($stack);
	 			// reset the increment if they tag does not exist in the stack
	 			if(array_key_exists($val['tag'], $stack)){
	 				$this->duplicateKeys[$val['tag']] = 0;
	 			}
	 		} elseif($val['type'] == "complete") {
	 			//if array key is duplicate then send in increment
	 			if(array_key_exists($val['tag'], $this->duplicateKeys)){
	 				array_push($stack, $this->duplicateKeys[$val['tag']]);
	 				$this->duplicateKeys[$val['tag']]++;
	 			}
	 			else{
	 				//else send in tag
	 				array_push($stack, $val['tag']);
	 			}
	 			$this->setArrayValue($this->output, $stack, $val['value']);
	 			array_pop($stack);
	 		}
	 		$increment++;
	 	}
	 	$this->status = 'success: xml was parsed';
	 	return true;
	 }

	 private function findDuplicateKeys(){

	 	for($i=0;$i < count($this->valueArray); $i++) {
	 		//Duplicate keys are when two complete tags are side by side
	 		if($this->valueArray[$i]['type'] == "complete"){
	 			if($i+1 < count($this->valueArray)){
	 				if($this->valueArray[$i+1]['tag'] == $this->valueArray[$i]['tag'] && $this->valueArray[$i+1]
['type'] == "complete"){
						$this->duplicateKeys[$this->valueArray[$i]['tag']] = 0;
					}
	 			}
	 		}
	 		//also when a close tag is before an open tag and the tags are the same
	 		if($this->valueArray[$i]['type'] == "close"){
	 			if($i+1 < count($this->valueArray)){
	 				if($this->valueArray[$i+1]['type'] == "open" && $this->valueArray[$i+1]['tag'] ==
$this->valueArray[$i]['tag'])
						$this->duplicateKeys[$this->valueArray[$i]['tag']] = 0;
	 			}
	 		}
	 	}
	 }

	 private function setArrayValue(&$array, $stack, $value){
	 	if ($stack) {
	 		$key = array_shift($stack);
	 		$this->setArrayValue($array[$key], $stack, $value);
	 		return $array;
	 	} else {
	 		$array = $value;
	 	}
	 }

	 public function getOutput(){
	 	return $this->output;
	 }

	 public function getStatus(){
	 	return $this->status;
	 }
}

?>

Usage:

$p = new XMLParser($xml);
$p->getOutput();

Perhaps the one true parser:? I modified xademax's fine code to tidy it up.

<?php
class XmlElement {
	var $name;
	var $attributes;
	var $content;
	var $children;
};

function xml_to_object($xml) {
	$parser = xml_parser_create();
	xml_parser_set_option($parser, XML_OPTION_CASE_FOLDING, 0);
	xml_parser_set_option($parser, XML_OPTION_SKIP_WHITE, 1);
	xml_parse_into_struct($parser, $xml, $tags);
	xml_parser_free($parser);

	$elements = array(); //the currently filling [child] XmlElement array
	$stack = array();
	foreach ($tags as $tag) {
		$index = count($elements);
		if ($tag['type'] == "complete" || $tag['type'] == "open") {
			$elements[$index] = new XmlElement;
			$elements[$index]->name = $tag['tag'];
			$elements[$index]->attributes = $tag['attributes'];

			$elements[$index]->content = $tag['value'];
			if ($tag['type'] == "open") { // push
				$elements[$index]->children = array();
				$stack[count($stack)] = &$elements;
				$elements = &$elements[$index]->children;
			}
		}
		if ($tag['type'] == "close") { // pop
			$elements = &$stack[count($stack) - 1];
			unset($stack[count($stack) - 1]);
		}
	}
	return $elements[0]; //the single top-level element
}

// For example
$xml = '
<parser>
	<name language="en-us">Fred Parser</name>
	<category>
		<name>Nomenclature</name>
		<note>Noteworthy</note>
	</category>
</parser>
';
print_r(xml_to_object($xml));
?>

will give:

xmlelement Object
(
	[name] => parser
	[attributes] =>
	[content] =>
	[children] => Array
		(
			[0] => xmlelement Object
				(
					[name] => name
					[attributes] => Array
						(
							[language] => en-us
						)

					[content] => Fred Parser
					[children] =>
				)

			[1] => xmlelement Object
				(
					[name] => category
					[attributes] =>
					[content] => 
					[children] => Array
						(
							[0] => xmlelement Object
								(
									[name] => name
									[attributes] => 
									[content] => Nomenclature
									[children] =>
								)

							[1] => xmlelement Object
								(
									[name] => note
									[attributes] => 
									[content] => Noteworthy
									[children] => 
								)
						)
				)
		)
)

<?php
/*
 An easy lightweight (Array ->) XML -> Array algo

 Typical case: You have an array you want to export to an external server,
 			   so you make XML out of it, exports it, and "on the other side"
 			   make it into an array again. These two functions will take care
 			   of hte last part, ie XML -> Array
 NOTE! The function XMLToArray assumes that the XML _dont_ have nodes on the
 	   same level with the same name, then it just wont work. This is not a 
 	   problem, as this case deals with Array -> XML -> Array, and an array
 	   cant have to identical indexes/keys.
*/

function XMLToArray($xml) {
	$parser = xml_parser_create('ISO-8859-1'); // For Latin-1 charset
	xml_parser_set_option($parser, XML_OPTION_CASE_FOLDING, 0); //Do not mess with my case settings
	xml_parser_set_option($parser, XML_OPTION_SKIP_WHITE, 1); // do not bother with empty info
	xml_parse_info_struct($parser, $xml, $values);
	xml_parser_free($parser);

	$return = array(); // the returned array
	$stack = array(); // tmp array used for stacking
	foreach($values as $val) {
		if($val['type'] == "open") {
			array_push($stack, $val['tag']);
		} elseif($val['type'] == "close") {
			array_pop($stack);
		} elseif($val['type'] == "complete") {
			array_push($stack, $val['tag']);
			setArrayValue($return, $stack, $val['value']);
			array_pop($stack);
		} //if-elseif

	}//foreach
	return $return;
}//function XMLToArray

function setArrayValue(&$array, $stack, $value) {
	if ($stack) {
		$key = array_shift($stack);
		setArrayValue($array[$key], $stack, $value);
		return $array;
	} else {
		$array = $value;
	} //if-else
}//function setArrayValue

// USAGE:
$xml = <<<QQQ
<?xml version="1.0"?>
<root>
	<node1>Some text</node1>
	<node2a>
		<node2b>
			<node2c>Some text</node2c>
		</node2b>
	</node2a>
</root>\n
QQQ;
$array = XMLToArray($xml);
print "<pre>";
print_r($array);

print "</pre>";
// Output:
//
// Array
// (
// 		[root] => Array
// 			(
				[node1] => Some text
				[node2a] => Array
					(
						[node2b] => Array
							(
								[node2c] => Some text
							)
					)
			)
//)
?>

Here you can [re]assemble xml from a xml_parse_into_struct generated array: ie array2xml

<?php
$xml_parser = xml_parser_create( 'UTF-8' ); //UTF-8 or ISO-8859-1
xml_parser_set_option($xml_parser, XML_OPTION_CASE_FOLDING, 0);
xml_parser_set_option($xml_parser, XML_OPTION_SKIP_WHITE, 1);
xml_parse_into_struct($xml_parser, $my_text_xml, $aryXML);
xml_paser_free($xml_parser);

//now use aryXML array to xml string:
		$o='';
		foreach($aryXML as $tag){
			//tab space:
			for($i=1;$i<$tag['level'];$i++)
				$o.="\t";
			if($tag['type']!='close'){
				if($tag['type']!='cdata')
					$o.='<'.$tag['tag'];
				if(isset($tag['attributes'])){
					foreach($tag['attributes'] as $attr=>$aval){
						$o.=' '.$attr.'="'.$val.'"';
					}
				}
				if($tag['type']!='cdata'){
					$o.=($tag['type']=='complete')?'/>'."\n":'>'."\n";
				}
				$o.=(isset($tag['value']))?$tag['value']:'';
			} else{
				$o.='</'.$tag['tag'].'>';
			}
		}
?>

xml_parse:

xml_parse: Start parsing an XML document

Desc:

int xml_parse ( resource $parser, string $data [, bool $is_final = false ])

xml_parse() parses an XML document. The handlers for the configured events are called as many times
as nessecary.

Params:

parser: A reference to the XML parser to use.

data: Chunk of data to parse. A document may be parsed piece-wise by calling xml_parse() several times
with new data, as long as the is_final parameter is set and TRUE when the last data is parsed.

is_final: If set and TRUE, data is the last piece of data sent in this parse.

Returns: 1 on success or 0 on failure.

For unsuccessful parses, error information can be retrieved with xml_get_error_code(), xml_error_string(),
xml_get_current_line_number(), xml_get_current_column_number() and xml_get_current_byte_index()

Note: Entity errors are reported at the end of the data thus only if is_final is set and TRUE.

Instead of passing a URL, we can pass the XML content to this class (either you want to
use CURL, Socks or fopen to retrieve it first) and instead of using array, i am using separator
'|' to identify which data to get (in order to make it short to retrieve a complex XML data).

Here is my class with built-in fopen which you can pass URL or you can pass the content instead:

p/s: Thanks to this great help page

<?php

class xx_xml {
	
	//XML parser variables
	var $parser;
	var $name;
	var $attr;
	var $data = array();
	var $stack = array();
	var $keys;
	var $path;

	//Either you pass url autao contents
	//use 'url' or 'contents' for the param
	var $type;

	//Function with the default param value
	function xx_xml($url='http://www.example.com', $type='url') {
		$this->type = $type;
		$this->url = $url;
		$this->parse();
	}

	//parse XML data
	function parse()
	{
		$data = '';
		$this->parser = xml_parser_create();
		xml_set_object($this->parser, $this);
		xml_set_element_handler($this->parser, 'startXML', 'endXML');
		xml_set_character_data_handler($this->parser, 'charXML');

		xml_parser_set_option($this->parser, XML_OPTION_CASE_FOLDING, false);

		if ($this->type == 'url') {
			// if use type = 'url' now we open the XML with fopen

			if (!($fp = @fopen($this->url, 'rb'))) {
				$this->error("Cannot open {$this->url}");
			}

			while (($data = fread($fp, 8192))) {
				if (!xml_parse($this->parser, $data, feof($fp))) {
					$this->error(sprintf('XML error at line %d column %d',
					xml_get_current_line_number($this->parser),
					xml_get_current_column_number($this->parser)));
				}
			}
		} else if ($this->type == 'contents') {
			//Now we can pass the contnets, maybe if you want
			// to use CURL, SOCK or other method
			$lines = explode("\n", $this->url);
			foreach ($lines as $val) {
				if (trim($val) == '')
					continue;
				$data = $val . "\n";
				if (!xml_parse($this->parser, $data)) {
					$this->error(sprintf('XML error at line %d column %d',
					xml_get_current_line_number($this->parser),
					xml_get_current_column_number($this->parser)));
				}
			}
		}
	}

	function startXML($parser, $name, $attr) {
		$this->stack[$name] = array();
		$keys = '';
		$total = count($this->stack)-1;
		$i=0;
		foreach ($this->stack as $key => $val) {
			if (count($this->stack) > 1) {
				if ($total == $i)
					$keys .= $key;
				else
					$keys .= $key . '|'; //The seperator
			}
			else
				$keys .= $key;
			$i++;
		}
		if (array_key_exists($keys, $this->data))
			$this->data[$keys][] = $attr;
		} else 
			$this->data[$keys] = $attr;
		$this->keys = $keys;
	}

	function endXML($parser, $name) {
		end($this->stack);
		if (key($this->stack) == $name)
			array_pop($this->stack);

	}

	function charXML($parser, $data) {
		if (trim($data) != '')
			$this->data[$this->keys]['data'][] = trim(str_replace("\n", '', $data));
	}

	function error($msg) {
		echo "<div align=\"center\">
			<font color=\"red\"><b>Error: $msg</b></font>
			</div>";
		exit();
	}
}

?>

And example of retrieving XML data
p/s: example use to retrieve weather

<?php
include_once "xx_xml.class.php";

// I am using simple curl (the original is in class) to get the contents

$pageurl = "http://xml.weather.yahoo.com/forecastrss?p=MYXX008&u=c";
curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
curl_setopt($ch, CURLOPT_URL, $pageurl);
$thecontents = curl_exec($ch);
curl_close($ch);

//we want to pass only a ready XML content instead of URL
//But if you want to use URL , skip the curl functions above and use this
// $xx4 = new xx_xml("url here", 'url');

$xx4 = new xx_xml($thecontents, 'contents');
//As you can see, we use seperator '|' instead of long array
$Code = $xx4->data['rss|channel|item|yweather:condition']['code'];
$Celcius = $xx4->data['rss|channel|item|yweather:condition']['temp'];
$Text = $xx4->data['rss|channel|item|yweather:condition']['text'];
$Cityname = $xx4->data['rss|channel|yweather:location']['city'];

?>

Due to restrictions in libxml2 the maximum length of $data is 9.5MB. If you need to
process more than 9.5MB you can do so by calling the function multiple times and setting
$is_final on the last call.

Best seen xml2array function ever:

<?php
function xml2array($url, $get_attributes = 1, $priority = 'tag')
{
	$contents = "";
	if (!function_exists('xml_parser_create'))
	{
		return array();
	}

	$parser = xml_parser_create('');
	if(!($fp = @fopen($url, 'rb')))
	{
		return array();
	}
	while(!feof($fp))
	{
		$contents .= fread($fp, 8192);
	}
	fclose($fp);
	xml_parser_set_option($parser, XML_OPTION_TARGET_ENCODING, "UTF-8");
	xml_parser_set_option($parser, XML_OPTION_CASE_FOLDING, 0);
	xml_parser_set_option($parser, XML_OPTION_SKIP_WHITE, 1);
	xml_parse_into_struct($parser, trim($contents), $xml_values);
	xml_parser_free($parser);

	if (!$xml_values)
		return; //HMM
	$xml_array = array();
	$parents = array();
	$opened_tags = array();
	$arr = array();
	$current = &$xml_array;
	$repeated_tag_index = array();
	foreach($xml_values as $data)
	{
		unset($attributes, $value);
		extract($data);
		$result = array();
		$attributes_data = array();
		if(isset($value))
		{
			if($priority == 'tag')
				$result = $value;
			else
				$result['value'] = $value;
		}
		if (isset($attributes) and $get_attributes)
		{
			foreach ($attributes as $attr => $val)
			{
				if($priority == 'tag')
					$attributes_data[$attr] = $val;
				else
					$result['attr'][$attr] = $val; //set all the attributes in a array called 'attr'
			}

		}
		if ($type == "open")
		{
			$parent[$level -1] = & $current;
			if (!is_array($current) or (!in_array($tag, array_keys($current))))
			{
				$current[$tag] = $result;
				if ($attributes_data)
					$current[$tag . '_attr'] = $attributes_data;
				$repeated_tag_index[$tag . '_' . $level] = 1;
				$current = & $current[$tag];
			}
			else
			{
				if(isset($current[$tag][0]))
				{
					$current[$tag][$repeated_tag_index[$tag . '_' . $level]] = $result;
					$repeated_tag_index[$tag . '_' . $level]++;
				}
				else
				{
					$current[$tag] = array(
						$current[$tag],
						$result
					);
					$repeated_tag_index[$tag . '_' . $level] = 2;
					if(isset($current[$tag . '_attr']))
					{
						$current[$tag]['0_attr'] = $current[$tag . '_attr'];
						unset($current[$tag . '_attr']);
					}
				}
				$last_item_index = $repeated_tag_index[$tag . '_' . $level] - 1;
				$current = & $current[$tag][$last_item_index];
			}
		}
		elseif ($type == "complete")
		{
			if(!isset($current[$tag]))
			{
				$current[$tag] = $result;
				$repeated_tag_index[$tag . '_' . $level] = 1;
				if ($priority == 'tag' and $attributes_data)
					$current[$tag . '_attr'] = $attributes_data;
			}
			else
			{
				if(isset($current[$tag][0]) and is_array($current[$tag]))
				{
					$current[$tag][$repeated_tag_index[$tag . '_' . $level]] = $result;
					if ($priority == 'tag' and $get_attributes and $attributes_data)
					{
						$current[$tag][$repeated_tag_index[$tag . '_' . $level] . '_attr'] = $attributes_data;

					}
					$repeated_tag_index[$tag . '_' . $level]++;
				}
				else
				{
					$current[$tag] = array (
						$current[$tag],
						$result
					);
					$repeated_tag_index[$tag . '_' . $level] = 1;
					if ($priority == 'tag' and $get_attributes)
					{
						if(isset($current[$tag . '_attr']))
						{
							$current[$tag]['0_attr'] = $current[$tag . '_attr'];
							unset($current[$tag . '_attr']);
						}
						if ($attributes_data)
						{
							$current[$tag][$repeated_tag_index[$tag . '_' . $level] . '_attr'] = $attributes_data;
						}
					}
					$repeated_tag_index[$tag. '_' . $level]++; //0 and 1 index is already taken
				}
			}
		}

		elseif ($type == 'close')
		{
			$current = & $parent[$level - 1];
		}
	}
	return ($xml_array);
}
?>

Returns a well formed array like the structure of the xml-document:

<root>
<child1>
	<child1child1/>
</child1>
</root>

Create anm arary like:

array[root][child1][child1child1]

Here is the inverse function which takes parsed xml array in entry and outputs xml string:

function getXmlFromArray($root){
	if(count($root) > 0){
		$curr_name = $root['name'];
		$attribs = $root['attrs'];
		$curr_childs = $root['children'];
		$curr_data = $root['cdata'];

		$xml .= '<'.$curr_name;

		if(count($attribs) > 0){
			$i = 1;
			foreach($attribs as $key => $value){
				$curr_attribs .= $key . '="' . $value.'"';
				$i++;
				if($i <= count($attribs)){
					$curr_attribs .= ' ';
				}
			}
			$xml .= ' '.$curr_attribs;
		}

		if($curr_data != ''){
			$xml .= '><![CDATA[' .$curr_data.']]></'.$curr_name.'>';
		} else {
			if(count($curr_childs) > 0){
				$xml .= '>';
				foreach($curr_childs as $child){
					$xml .= getXmlFromArray($child);
				}
				$xml .= '</'.$curr_name.'>';
			} else {
				$xml .= '/>';
			}
		}
	}
	return $xml;
}

xml_parser_create_ns:

xml_parser_create_ns - Create an XML parser with namespace support

Desc:

resource xml_parser_create_ns ([ string $encoding [, string $separator = ":" ]])

xml_parser_create_ns() creates a new XML parser with XML namespace support and returns
a resource handle referencing it to be used by the other XML functions.

params:

encoding: The input encoding is automatically detected, so that the encoding parameter specifies
only the output encoding. In PHP 5.0.0 and 5.0.1, the default output charset is ISO-8859-1, while
in PHP 5.0.2 and upper is UTF-8. The supported encodings are ISO-8859-1, UTF-8 and US-ASCII.

separator: 

With a namespace aware parser tag parameters passed to the various handler functions will consist
of namespace and tag name separated by the string specified in separator.

Returns:

Returns a resource handle for the new XML parser.

This is from the Expat Function Reference by Clark Cooper, which is a reference to the C api.

"XML_Parser XML_ParserCreateNS(const XML_CHAR*encoding, XML_CHAR sep)
Constructs a new parser that has namespace processing in effect. Namespace expanded element 
names and attributes names are returned as a concatenation of the namespace URI, sep, and the
local part of the name. This means that you should pick a character for sep that cannot be 
part of a legal URI"

xml_parser_create:

xml_parser_create - Create an XML parser

Desc:

resource xml_parser_create ([ string $encoding ])

xml_parser_create() creates a new XML parser and returns a resource handle referencing it to be
used by the other XML functions.

Params:

encoding: 

the optional encoding specifies the character encoding for the input/output in PHP 4. Starting from PHP 5,
the input encoding is automatically detected, so that the encoding parameter specifies only the output encoding.

In PHP 4, the default output encoding is the same as the input charset. If empty string is passed, the parser attempts
to identify which encoding the document is encoded in by looking at the heading 3 or 4 bytes. In PHP 5.0.0 and 5.0.1,
the default output charset is ISO-8859-1, while in PHP 5.0.2, and upper is UTF-8. The supported encodings are 
ISO-8859-1, UTF-8 and US-ASCII.

Returns:

Returns a resource handle for hte new XML parser.

I created a function, which combines xml_parser_create and all functions around.

<?php
function html_parse($file)
	{
		$array = str_split($file, 1);
		$count = false;
		$text = "";
		$end = false;

		foreach($array as $temp)
		{
			switch($temp)
			{
				case "<":
					between($text);
					$text = "";
					$count = true;
					$end = false;
					break;
				case ">":
					if($end == true) {end_tag($text);}
					else {start_tag($text);}
					$text = "";
					break;
				case "/":
					if($count == true) {$end = true;}
					else {$text = $text . "/";}
					break;
				default:
					$count = false;
					$text = $text . $temp;
			}
		}
	}
?>

The input value is a string.
It calls functions start_tag(), between() and end_tag() just like hte original and xml parser.

But it has a few differences:
	It does NOT Check the code. Just resends values to that three functions, no matter if they are right
	It works with params. For example: from tag <sth b="42"> sends sth b="42"
	It works with diacritics. The original parser sometimes wrapped the text before the first diacritics appearance.
	Works with all encoding. If the input is UTF-8, the output will be UTF-8 too
	It works with strings. Not with file pointers
	No "Reserved XML name" error
	No doctype needed
	It does not work with commentaries, notes, programming instructions etc. Just the tags

Definition of the handling functions is:

<?php
function between($stuff) {}
?>

To maintain compability between PHp4 and PHP5, you should always pass a string arg to this function.
PHP4 autodetects the format of the input if you leave it out whereas PHP5 will assume the format
to be ISO-8859-1 (and choke on the byte order marker of UTF-8 files).

Calling the function as <?php $res = xml_parser_create('') ?> will cause both versions of PHP to
autodetect the format.

xml_parser_free:

xml_parser_free - Free an XML parser

Desc:

bool xml_parser_free ( resource $parser )

Frees the given XML parser

Params:

parser: A reference to the XML parser to free.

Returns:

This function returns FALSE if parser does not refer to a valid parser, or else it frees the parser
and returns TRUE.

Unset the parser after calling xml_parser_free() to prevent memory leaks:

<?php
xml_parser_free($parser);
unset($parser);
?>

xml_parser_get_option:

xml_parser_get_option - Get options from an XML parser

Desc:

mixed xml_parser_get_option ( resource $parser, int $option )

Gets an option value from an XML parser

Params:

parser: A reference to the XML parser to get an option from

option: Which option to fetch. XML_OPTION_CASE_FOLDING and XML_OPTION_TARGET_ENCODING are available.
See xml_parser_set_option() for their description.

Returns:

This function returns FALSE if parser does not refer to a valid parser or if option is not valid (generates
also a E_WARNING). Else the option's value is returned.

<?php
$xmlparser = xml_parser_create();

echo "XML_OPTION_CASE_FOLDING:" . xml_parser_get_option($xmlparser, XML_OPTION_CASE_FOLDING) . "<br />"; //Specifies if
//case-folding is enabled. Enabled by default. Can be 1 (TRUE) or 0 (FALSE).

echo "XML_OPTION_TARGET_ENCODING:" . xml_parser_get_option($xmlparser, XML_OPTION_TARGET_ENCODING) . "<br />";
//Specifies which target encoding to use in thsi XML parser. By default, it is set to the same as the
//xml_parser_create() function. Supported target encodings are ISO-8859-1, US-ASCII and UTF-8

xml_parser_free($xmlparser);
?>

xml_parser_set_option:

xml_parser_set_option - Set options in an XML parser

Desc:

bool xml_parser_set_option ( resource $parser, int $option, mixed $value)

Sets an option in an XML parser

Params:

parser: A reference to the XML parser to set an option in.

option: Which option to set. See below.

The following options are available:

XML parser options

Option constant 			Data Type 			Desc

XML_OPTION_CASE_FOLDING 	integer 			Controls whether case-folding is enabled for this XML parser. Enabled by default.

XML_OPTION_SKIP_TAGSTART 	integer 			Specify how many chars should be skipped in the beginning of a tag name.

XML_OPTION_SKIP_WHITE 		integer 			Whether to skip values consisting of whitespace chars

XML_OPTION_TARGET_ENCODING 	string 				Sets which target encoding to use in this XML parser. By default, it is set to the same as
 												the source encoding used by xml_parser_create(). Supported target encodings are
 												ISO-8859-1, US-ASCII and UTF-8.

value:

The option's new value

Returns:

This function returns FALSE if parser does not refer to a valid parser, or if the option could not be set. Else the option is
set and TRUE is returned.

The option XML_OPTION_SKIP_WHITE has no effect in my PHP 5.2.6 (with expat-1.95.8-5). To skip cdata composed of
white space only, simply check for that at the beginning of your cdata callback function:

<?php
function callback_cdata($parser, $cdata)
{
	if(!trim($cdata))
		return;
	//Continued processing
}
?>

xml_set_character_data_handler:

xml_set_character_data_handler - Set up character data handler

Desc:

bool xml_set_character_data_handler ( resource $parser, callable $handler )

Sets the character data handler function for the XML parser parser

Params:

parser: A reference to the XML parser to set up the character data handler function

handler: handler is a string containing the name of a function that must exist when xml_parse() is called
	for parser.

The function named by handler must accept two params:

handler ( resource $parser , string $data )

parser:

The first parameter, parser, is a reference to the XML parser calling the handler.

data:

The second parameter, data, contains the character data as a string.

Character data handler is called for every piece of a text in the XML document. It can be called
multiple times inside each fragment (e.g.for non-ASCII strings)

If a handler funciton is set to an empty string, or FALSE, the handler in question is disabled.

Note: Instead of a function name, an array containing an object reference and a method name can also
be supplied.

Returns:

TRUE on success, FALSE on failure.

I found out that the xml_set_character_data_handler call back function can be called more often
for the same element in particular the content is just a few chars long (happens on Windows).

So a check up can give you the answer an may be for long strings too:

<?php
xml_set_character_data_handler($this->parser, "cdata");
//...
function cdata($parser, $cdata) {
	//...
	if(isset($this->data[$this->currentItem][$this->currentField])) {
		$this->data[$this->currentItem][$this->currentField] .= $cdata;
	} else {
		$this->data[$this->currentItem][$this->currentField] .= $cdata;
	}
?>

To detect that concatenation of data is taking place, you can keep track of whether the last function
call was to the data processing function.
e.g. using $this->inside_data variable below:

<?php
xml_set_element_handler($this->parser, "start_tag", "end_tag");
xml_set_character_data_handler($this->parser, "contents");

protected function contents($parser, $data)
{
	switch ($this->current_tag) {
		case "name":
			if ($this->inside_data)
				$this->name .= $data, // need to concatenate data
			else
				$this->name = $data;
			break;
		...
	}
	$this->inside_data = true;
}

protected function start_tag($parser, $name)
{
	$this->current_tag = $name;
	$this->inside_data = false;
}

protected function end_tag() {
	$this->current_tag = '';
	$this->inside_data = false;
}
?>

I too love the undocumented "splitting" functionality :-P

Rather than concatenating the data based on whether or not the current tag name has changed from
the previous tag name, i suggest always concatenating like the following with the $catData variable
being unset in the endElement function:

<?php

function endElement ($parser, $data) {
	global $catData;

	//BEcause we are at an element end we know any splitting is finished
	unset($GLOBALS['catData']);
}

function characterData ($parser, $data) {
	global $catData;

	//Concatenate data in case splitting is taking place
	$catData .= $data;
}

?>

THis got me around a problem with data like the following where, because characterData is not called
for empty tags, the previous and current tag names were the same even though splitting was not 
taking place.

<companydept>
<companydeptID></companydeptID>
<companyID>1</companyID>
<companydeptName></companydeptName>
</companydept>
<companydept>
<companydeptID></companydeptID>
<companyID>2</companyID>
<companydeptName></companydeptName>
</companydept>
<companydeptID></companydeptID>
<companyID>3</companyID>
<companydeptName></companydeptName>
</companydept>

How to override the 1024 chars limit of xml_set_character_data_handler.

When calling a basic XML parser:
$parserXML = xml_parser_create();
xml_set_element_handler($parserXML, "opentagfunction", "closetagfunction");
xml_set_character_data_handler($parserXML, "textfunction");

The text function only receive 1024 chars at once, even if the text is 4000 chars long. in fact,
the parser seems to split the data in pieces of 1024 chars. The way to handle that is to concatenate
them.

Example:

If you ahve an XML tag called UNIPROT_ABSTRACT containing a 4000 chars protein description:
function textfunction($parser, $text)
	{
		if ($last_tag_read=='UNIPROT_ABSTRACT') $uniprot.=$text;
	}

This simply concatenates unto the same text time upon time, when chaincalled.

xml_set_default_handler:

xml_set_default_handler - Set up default handler

Desc:

bool xml_set_default_handler ( resource $parser, callable $handler )

Sets the default handler function for the XML parser parser.

Params:

parser: A reference to the XML parser to set up default handler function.

handler: handler is a string containing the name of a function that must exist when xml_parse() is called for parser.

The function named by handler must accept two params:

handler ( resource $parser, string $data )

parser:

The first param, parser, is a reference to the XML parser calling the handler.

data:

The second parameter data, contains the character data. This may be the XML declaration, document type declaration,
entities or other data for which no other handler exists.

If a handler function is set to an empty string, or FALSE, the handler in question is disabled.

Note: instead of a function name, an array containing an object reference and a method name can also be supplied.

Returns:

TRUE on success, FALSE on failure.

It seems to me that in PHP5 the function defined as default-handler (using xml_set_default_handler()) does not
get passed the cdata anymore:

i.e:
xml_set_element_handler($this->parser, 'parseSTART', 'parseEND');
xml_set_default_handler($this->parser, 'parseDEFAULT');
function parseSTART() { ... }
function parseEND() { ... }
function parseDEFAULT() { ... }

under PHP5, parseDEFAULT will NOT get passed any cdata, but under PHP4 it will. At least that is my take on
the strange stuff happening after migrating to PHp5.

My solution was to add a xml_set_character_data_handler($parser, 'parseDEFAULT'). 

xml_set_element_handler:

xml_set_element_handler - Set up start and end element handlers

Desc:

bool xml_set_element_handler ( resource $parser , callable $start_element_handler, callable $end_element_handler )

Sets the element handler functions for the XML parser. start_element_handler and end_element_handler are strings containing
the names of functions that must exist when xml_parse() is called for parser.

Params:

parser: A reference to the XML parser to set up start and end element handler functions

start_element_handler:
	The function named by start_element_handler must accept three params:

	start_element_handler ( resource $parser , string $name , array $attribs )

parser:
	The first param, parser, is ar eference to the XML parser calling the handler.

name:
	The second param, name, contains the name of the element for which this handler is called.
	If case-folding is in effect for this parser, the element name will be in uppercase letters.

attribs:
	The third parameter, attribs, contains an associative array with the element's attributes (if any).
	The keys of this array are the attribute name, the values are the attribute values. Attribute names
	are case-folded on the same criteria as element names. Attribute values are not case-folded.

	The original order of the attributes can be retrieved by walking through attribs the normal way,
	using each(). The first key in teh array was the first attrib, and so on.

Note: Instead of a function name, an array containing an object reference and a method name can also be supplied.

end_element_handler:
	The function named by end_element_handler must accept two params.

	end_element_handler ( resource $parser, string $name )

parser:
	The first param, parser, is a reference to the XML parser calling the handler.

name:
	The second param, name, contains the name of the element for which this handler is called. If case-folding
	is in effect for this parser, the element name will be in uppercase letters.

If a handler function is set to an empty string, or FALSE, the handler in question is disabled.

Returns: TRUE on success, FALSE on failure.

This documentation is a bit awry, as per usual.

If using PHP4, you may be required to use xml_set_object() instead of calling any of the xml_set_*_handler()
functions with a two-item array. It will work fine on PHP 5, but move the same code to the PHP4 and it will
create one copy of $this (even if you use &$this) for each handler you set.

<?php
//This code will fail in PHP4
$this->parser = xml_parser_create();
xml_set_element_handler(
			$this->parser,
			array(&$this,"start_tag"),
			array(&$this,"end_tag")
		);
		xml_set_character_data_handler(
			$this->parser,
			array(&$this,"tag_data")
		);
?>

<?php
//This code will work on PHP4
$this->parser = xml_parser_create();
xml_set_object($this->parser, &$this);
xml_set_element_handler(
			$this->parser,
			"start_tag",
			"end_tag"
		);
		xml_set_character_data_handler(
			$this->parser,
			"tag_data"
		);
?>

As the notes mention, you can pass an array that contains the reference to an object and a method
name when you need. So you can call methods in your own class as handlers like this:

xml_set_element_handler($parser, array($this, "_startElement"), array($this, "_endElement"));

<html>
	<head>
		<title>SAX Demonstration</title>
		<META HTTP-EQUIV='Content-Type' CONTENT='text/html; charset=euc-kr'>
	</head>
	<body>
		<h1>RSS ?????</h1>

		<?php

			$file = "data.xml";

			$currentTag = "";
			$currentAttribs = "";

			function startElement($parser, $name, $attribs)
			{
				global $currentTag, $currentAttribs;
				$currentTag = $name;

				$currentAttribs = $attribs;
				switch ($name) {
					default:
						echo("<b>&lt$name&gt</b><br>");
						break;
				}
			}

			function endElement($parser, $name)
			{
				global $currentTag;
				switch ($name) {
					default:
						echo("<br><b>&lt/$name&gt</b><br><br>");
						break;
				}
				$currentTag = "";
				$currentAttribs = "";
			}

			function characterData($parser, $data)
			{
				global $currentTag;
				switch ($currentTag) {
					case "link":
						echo("<a href=\"$data\">$data</a>\n");
						break;
					case "title":
						echo("title : $data");
						break;
					default:
						echo($data);
						break;
				}
			}

			$xmlParser = xml_parser_create();

			$caseFold = xml_parser_get_option($xmlParser, XML_OPTION_CASE_FOLDING);

			$targetEncoding = xml_parser_get_option($xmlParser, XML_OPTION_TARGET_ENCODING);

			if ($caseFold == 1) {
				xml_parser_set_option($xmlParser, XML_OPTION_CASE_FOLDING, false);
			}

			xml_set_element_handler($xmlParser, "startElement", "endElement");
			xml_set_character_data_handler($xmlParser, "characterData");

			if (!($fp = fopen($file, "r"))) {
				die("Cannot open XML data file: $file");
			}

			while ($data = fread($fp, 4096)) {
				if(!xml_parse($xmlParser, $data, feof($fp))) {
					die(sprintf("XML error: %s at line %d",
								xml_error_string(xml_get_error_code($xmlParser)),
								xml_get_current_line_number($xmlParser)));
					xml_parser_free($xmlParser);
				}
			}
			xml_parser_free($xmlParser);
			?>
		</table>
	</body>
</html>

I modified hte previous script, so that it is associative. I find it more useful that way. BTW i 
prefer strtolower() things, but that is not mandatory at all.

<?php

$file = "data.xml";
$depth = 0;
$tree = array();
$tree['name'] = "root";
$stack[] = &$tree;

function startElement($parser, $name, $attrs) {
	global $depth;
	global $stack;
	global $tree;

	$element = array();
	foreach ($attrs as $key => $value) {
		$element[strtolower($key)]=$value;
	}

	end($stack);
	$stack[key($stack)][strtolower($name)] = &$element;
	$stack[strtolower($name)] = &$element;

	$depth++;
}

function endElement($parser, $name) {
	global $depth;
	global $stack;

	array_pop($stack);
	$depth--;
}

$xml_parser = xml_parser_create();
xml_set_element_handler($xml_parser, "startElement", "endElement");
if(!($fp = fopen($file, "r"))) {
	die("could not open XML input");
}

while ($data = fread($fp, 4096)) {
	if (!xml_parse($xml_parser, $data, feof($fp))) {
		die(sprintf("XML error: %s at line %d",
					xml_error_string(xml_get_error_code($xml_parser)),
					xml_get_current_line_number($xml_parser)));
	}
}
xml_parser_free($xml_parser);
$tree = end(end($stack));
echo "<pre>";
print_r($tree);
echo "</pre>";

?>

I ran into some issues with another users script regarding self closing tags,
and founded this instead:

The data needs tobe read from a data file, so the fp can be utilized. It still uses the
xml_get_current_byte_index(resource parser) trick, but this time, i check for the last 2 chars
before thei ndex nad test if its "/>".

<?php
/* myxmltest.xml:
<normal_tag>
	<self_close_tag />
		data
	<normal_tag>data
		<self_close_tag attr="value" />
	</normal_tag>
		data
	<normal_tag></normal_tag>
</normal_tag>
*/

//# Global Vars #//
$file = "myxmltest.xml";
$character_data_on = false;
$tag_complete = true;

function startElement($parser, $name, $attrs)
{
	global $character_data_on;
	global $tag_complete;

	echo "&lt;<font color=\"#0000cc\">$name</font>";
	//## print the attribs ##
	if(sizeof($attrs)) {
		while (list($k, $v) = each($attrs)) {
			echo " <font color=\"#009900\">$k</font>=\"<font
					color=\"#990000\">$v</font>\"";
		}
	}

	//Tag is still incomplete
	//will be completed at either endElement or characterData
	$tag_complete = false;
	$character_data_on = false;
}

function endElement($parser, $name)
{
	global $fp;
	global $character_data_on;
	global $tag_complete;

	//### Test for self-closing tag
	//## xml_get_current_byte_index(resource parser) when run in this
	//## function, gives the index at (indicated by *):
	//## 	for self closing tag: <br />*
	//## 	for individual closing tag: <div>character data*</div>
	//## So to test for self-closing tag, we can just test for the last 2
	//## characters from the index
	//###############

	if(!$character_data_on) {
		//Record current fp position
		$temp_fp = ftell($fp);

		//## Point fp to 2 bytes before the end element byte index
		$end_element_byte_index = xml_get_current_byte_index($parser);
		fseek($fp, $end_element_byte_index-2);

		//Gets the last 2 chars before the end element byte index
		$validator = fgets($fp, 3);

		//Restore fp position
		fseek($fp, $temp_fp);

		//if the last 2 chars is "/>" ##
		if ($validator == "/>") {
			//Complete the self-closing tag
			echo " /&gt";
			//otherwise it is an individual closing tag

		} else echo "&gt&lt/<font color=\"#0000cc\">$name</font>$gt";
		$tag_complete = true;
	} else echo "&lt/<font color=\"#0000cc\">$name</font>&gt";

	$character_data_on = false;
}

function characterData($parser, $data)
{
	global $character_data_on;
	global $tag_complete;

	if ((!$character_data_on)&&(!$tag_complete)) {
		echo "&gt";
		$tag_complete = true;
	}
	echo "<b>$data</b>";
	$character_data_on = true;
}

$xml_parser = xml_parser_create();
xml_parser_set_option($xml_parser, XML_OPTION_CASE_FOLDING, false);
xml_set_element_handler($xml_parser, "startElement", "endElement");
xml_set_character_data_handler($xml_parser, "characterData");
if (!($fp = fopen($file, "r"))) {
	die("could not open XML input");
}

echo "<pre>";
while ($file_content = fread($fp, 4096)) {
	if (!xml_parse($xml_parser, $file_content, feof($fp))) {
		die(sprintf("XML error: %s at line %d",
					xml_error_string(xml_get_error_code($xml_parser)),
					xml_get_current_line_number($xml_parser)));
	}
}
echo "</pre>";
xml_parser_free($xml_parser);
?>

If you are using a class for xml parsing, and want to check the return value of xml_set_element_handler
in case it fails, you must do this outside of the class's constructor. Inside the constructor, PHP-4.0.5 will die.

Thus, put all your xml initialization code in another function of the class, and keep it out of the constructor.

Here is another example of detecting empty elements. It works with libxml2. It handles buffer boundaries.

<?php

$depth = 0; //current depth, used for pretty printing
$empty = false; //whether the tag is empty
$offset = 0; //the index of the start of the current buffer within the stream

function tagStart($parser, $name, array $attribs) {
	global $depth, $empty, $data, $offset, $lastchar;
	$idx = xml_get_current_byte_index($parser);
	/* xml_get_current_byte_index returns index within the streams and not 
		within the buffer */

	// Check if the index is whithin the buffer
	if (isset($data[$idx - $offset])) {
		$c = $data[$idx - $offset];
	} else {
		//If it is not simple use the last char of the buffer
		$c = $lastchar;
	}
	$empty = $c == '/';
	echo str_repeat("\t", $depth), "<$name", ($empty ? '/>' : '>'), "\n";
	if (!$empty) ++$depth;
}

function tagEnd($parser, $name) {
	global $depth, $empty;
	if (!$empty) {
		--$depth;
		echo str_repeat("\t", $depth), "</$name>\n";
	} else {
		$empty = false;
	}
}

$parser = xml_parser_create();
xml_parser_set_option($parser, XML_OPTION_CASE_FOLDING, false);
xml_set_element_handler($parser, 'tagStart', 'tagEnd');

$data1 = '
<test>
	<empty att="3" />
	<nocontent></nocontent>
	<content>
		<empty/>
		<empty/>
	</content>
	<empty/>';

$data2 = '>
	<empty att="5" />
</test>
';

$data = &$data1;
$length = strlen($data1);
$lastchar = $data[$length-1];
xml_parse($parser, $data1);
$offset .= $length;
$data = &$data2;
xml_parse($parser, $data2);

My 25 cents., This example shows how to parse a XML in a associative array tree.

<?php

$file = "flow/flow.xml";
$depth = 0;
$tree = array();
$tree['name'] = "root";
$stack[count($stack)] = &$tree;

function startElement($parser, $name, $attrs) {
	global $depth;
	global $stack;
	global $tree;

	$element = array();
	$element['name'] = $name;
	foreach ($attrs as $key => $value) {
		//echo $key."=".$value;
		$element[$key] = $value;
	}

	$last = &$stack[count($stack)-1];
	$last[count($last)-1] = &$element;
	$stack[count($stack)] = &$element;

	$depth++;
}

function endElement($parser, $name) {
	global $depth;
	global $stack;

	array_pop($stack);
	$depth--;
}

$xml_parser = xml_parser_create();
xml_set_element_handler($xml_parser, "startElement", "endElement");
if (!($fp = fopen($file, "r"))) {
	die("could not open XML input");
}

while ($data = fread($fp, 4096)) {
	if (!xml_parse($xml_parser, $data, feof($fp))) {
		die(sprintf("XML error: %s at line %d",
					xml_error_string(xml_get_error_code($xml_parser)),
					xml_get_current_line_number($xml_parser)));
	}
}
xml_parser_free($xml_parser);
$tree = $stack[0][0];
echo "<pre>";
print_r($tree);
echo "</pre>";

xml_set_end_namespace_decl_handler:

xml_set_end_namespace_decl_handler - Set up end namespace declaration handler

Desc:

bool xml_set_end_namespace_decl_handler ( resource $parser, callable $handler )

Set a handler to be called when leaving the scope of a namespace declaration. This will be called, for each namespace
declaration, after the handler for the end tag of the element in which the namespace was declared.

Caution: This event is not supported under libXML, so a registered handler would not be called.

Params:

parser: A reference to the XML parser

handler: handler is a string containing the name of a function that must exist when xml_parse() is called for parser.

The function named by handler must accept two params, and should return an integer value. If the value returned from
the handler is FALSE (which it will be if no value is returned), the XML parser will stop parsing and xml_get_error_code()
will return XML_ERROR_EXTERNAL_ENTITY_HANDLING.

handler ( resource $parser, string $prefix )

parser: The first param, parser, is a reference to the XML parser calling the handler.

prefix: THe prefix is a string used to reference the namespace wihtin an XML object.

If a handler function is set to an empty string, or FALSE, the handler in question is disabled.

Note: instead of a function name, an array containing an object reference  and a method name
can also be supplied.

Returns:

TRUE on success, FALSE on failure.

xml_set_external_entity_ref_handler:

xml_set_external_entity_ref_handler - Set up extternal entity reference handler

desc:

bool xml_set_external_entity_ref_handler( resource $parser, callable $handler )

Sets the external entity reference handler function for the XML parser parser.

Params:

parser: A refernec eot the XML parser to set up external entity reference handler funciton

handler:

handler is a string containing the name of a function that must exist when xml_parse() is called for parser.

The function named by handler must accept five params, and should return an integer value. If the vlaue returned
from the handler is FALSE (which it will be if no value is returned), the XML parser will stop parsing and
xml_get_error_code() will return XML_ERROR_EXTERNAL_ENTITY_HANDLING.

handler ( resource $parser, string $open_entity_names, string $base, string $system_id, string $public_id )

Parser:

The first param, parser, is a reference to the XML parser calling the handler.

open_entity_names:

The second param, open_entity_names, is a space-separated list of the names of the entities that are open
for the parse of htis entity (including the name of hte referenced entity).

base:

This is the base for resolving the system identifier (system_id) of the external entity. Currently
this param will always be set to an empty string.

system_id:

The fourth param, system_id, is the system identifier as specified in the entity declaration.

public_id:

The fifth param, public_id, is the public identifier, as specified in the entity declaration, or an
empty string if none was specified; the whitespace in the public identifier will have been normalized
as required by the XML spec.


If a handler function is set to an empty string, or FALSE, the handler in question is disabled.

Note: instead of a function name, an array containing an object reference and a method name can also
be supplied.

Returns:

Returns TRUE on success or FALSE on failure.

xml_set_notation_decl_handler:

xml_set_notation_decl_handler - Set up notation declaration handler

Desc:

bool xml_set_notation_decl_handler ( resource $parser, callable $handler )

Sets the notation declaration function for the XML parser parser.

A notation declaration is part of the document's DTD and has the following format:

<!NOTATION <parameter>name</parameter>
{ <parameter>systemId</parameter> | <parameter>publicId</parameter>?>

See section 4.7 of the XML 1.0 spec, for the definition of notation declarations.

4.7 Notation Declarations:

Notations identify by name the format of unparsed entities, the format of elements which bear a notation attribute,
or the application to which a processing instruction is addressed.

Notation declarations provide a name for the notation, for use in an entity and attribute-list declarations and
in attribute specifications, and an external identifier for the notation which may allow an XML processor
or its client application to locate a helper application capable of processing data in the given notation.

Notation Declarations

[82] NotationDecl ::= '<!NOTATION' S Name S (ExternalID | PublicID) S? '>'
[83] 	PublicID  ::= 'PUBLIC' S PubidLiteral

XML processors must provide applications with the name and external identifier(s) of any notation declared and
referred to it in an attribute value, attribute definition, or entity declaration. They may additionally resolve
the external identifier into the system identifier, file name, or other information needed to allow the application
to call a processor for data in the notation described.

(It is not an error, however, for XML documents to declare and refer to notations which notation-specific apps
are not available on the system where the XML processor or app is running).

Params:

parser: A reference to the XML parser to set up notation declaration handler function

handler: handler is a string containing the name of a function that must exist when xml_parse() is called for parser.

The function named by handler must accept five params:

handler ( resource $parser, string $notation_name , string $base, string $system_id, string $public_id )

parser: THe first param, parser, is a reference to the XML parser calling the handler.

notation_name: THis is the notation's name as per notation format described above.

base: This is base for resolving the system identifier (system_id) of the notation declaration. Currently
this param will always be set to an empty string.

system_id: System identifier of the external notation declaration

public_id: Public identifier of the external notation declaration

If a handler function is set to an empty string, or FALSE, the handler in question is disabled.

Note: Instead of a function name, an array containing an object reference and a method name can
also be supplied.

Returns:

TRUE on success, FALSE on failure.

xml_set_object:

xml_set_object - Use XML Parser within an object

Desc:

bool xml_set_object ( resource $parser, object &$object )

This function allows to use parser inside object. ALl callback functions could be set with xml_set_element_handler()
etc and assumed to be methods of the object.

Caution: IN addition to calling xml_parser_false() when the parsing is finished, as of PHP 7.0.0 it is necessary
to also explicitly unset hte reference to parser to avoid memory leaks.

Params:

parser: A reference to the XML parser to use inside the object.

object: The object where to use the XML parser.

Returns:

TRUE on success, FALSE on failure.

Examples:

Example #1 xml_set_object() example

<?php
class XMLParser
{
	private $parser;

	function __construct()
	{
		$this->parser = xml_parser_create();

		xml_set_object($this->parser, $this);
		xml_set_element_handler($this->parser, "tag_open", "tag_close");
		xml_set_character_data_handler($this->parser, "cdata");
	}

	function __destruct()
	{
		xml_parser_free($this->parser);
		unset($this->parser);
	}

	function parse($data)
	{
		xml_parse($this->parser, $data);
	}

	function tag_open($parser, $tag, $attributes)
	{
		var_dump($tag, $attributes);
	}

	function cdata($parser, $cdata)
	{	
		var_dump($cdata),
	}

	function tag_close($parser, $tag)
	{
		var_dump($tag);
	}

}

$xml_parser = new XMLParser();
$xml_parser->parse("<A ID='hallo'>PHP</A>");
?>

The above will output:

string(1) "A"
array(1) {
	["ID"]=>
	string(5) "hallo"
}
string(3) "PHP"
string(1) "A"

I finally managed to get xml_set_object() to work, after much documentation searching. As the solution
i found has been hinted at, the focus has been wrong.

There have been many problems getting classes contained XML parses to make changes to the members of an instnace.
This is because, from what i am guessing, the functions are using either a new anonymous instance of the class
or an uninstanced version of the class.

What we want to make sure is that it does, is that hte parser is accessing its handlers as member methods of a 
particular instance of a class. This can be done using the array method for passing a callback, setting the
object as a reference to this instance. This way, you know that hte parser is going to call the function
properly.

ex:
<?php
class Parser {
	
	private $parser;
	private $data;

	public function __construct() {
		$this->parser = NULL;
		$this->data = '';
	}

	private function ParseElementStart($parser, $name, $attrs) {
		//Code
	}

	private function ParseElementEnd($parser, $name) {
		// COde
	}

	public function Parse($XMLdata) {
		$this->parser = xml_parser_create();
		xml_set_object($this->parser, $this);
		xml_set_element_handler($this->parser,
								array(&$this, 'ParseElementStart'),
								array(&$this, 'ParseElementEnd'));
		xml_parse($this->parser, $XMLdata);
		xml_parser_free($this->parser);
	}
}
?>

With this, when you call the Parse method, the data in that instnace, can be modified. Im not sure if the
xml_set_object becomes uneccessary when using the arrya callbacks, but i leavei t in just ot make sure that
the xml_parse function knows its in the object.

AS above,  iwould recommend for memory sake, that hte XML parser be created, used, and freed all in teh same
function, to ensure that everything is cleaned up correctly.

Just a note about creating abstract "call back handlers" as mentioned in some of the other notes.
In this case, i recommend extending the base XML class and overwriting the handler methods. The reason
i wanted to do this, is that if you have a separate callback method class it causes problems, for example
if you want to collect info out of the XML files and store it in an array. You can get around it
with global vars, for example:

<?php
class xml_output extends xml{
	var $output = array();

	function xml_output(){
		$this->xml();
	}

	//overwrite base methods
	function tag_open($parser, $tag, $attributes)
	{
		array_push($this->output, "<$tag, attributes>");
	}

	function cdata($parser, $cdata)
	{
		array_push($this->output, "$cdata");
	}

	function tag_close($parser, $tag)
	{
		array_push($this->output, "</$tag>");
	}


}

$xml_parser = & new xml_output();
$xml_parser->parse("<A ID='hallo'>PHP</A>");
echo("$xml_parser->output");
?>

xml_set_processing_instruction_handler:

xml_set_processing_instruction_handler - Set up processing instruction (PI) handler

Desc:

bool xml_set_processing_instruction_handler ( resource $parser, callable $handler )

Sets the processing instruction (PI) handler function for the XML parser parser.

A processing instruction has the following format:

<?
target data
?>

You can put PHP code into such a tag, but be aware of one limitation: in an XML PI; the PI end tag
(?>) can not be quoted, so this character sequence should not appear in teh PHP code you embed with
PIs in XML documents. If it does, the rest of the PHP code, as well as the "real" PI end tag,
will be treated as character data.

Params:

parser: A reference to the XML parser to set up processing instruction (PI) handler function.

handler:
	
	handler is a string containing the name of a function that must exist when xml_parse() is called for parser.
	The function named by handler must accept three params:

	handler ( resource $parser, string $target, string $data)

	parser: The first param, parser, is a reference to the XML parser calling the handler

	target: The second parameter, target contains the PI target

	data: The third param, data, contains the PI Data.

If a handler function is set to an empty string, or FALSE, the handler in question is disabled.

Note: instead of a function name, an array containing an object referenced and a method name
can also be supplied.

Returns: TRUE on success, or FALSE on failure.

xml_set_start_namespace_decl_handler:

xml_set_start_namespace_decl_handler - Set up start namespace declaration handler

Desc:

bool xml_set_start_namespace_decl_handler ( resource $parser, callable $handler )

Set a handler to be called when a namespace is declared. Namespace declarations occur
inside start tags. But the namespace declaration start handler is called before the
start tag handler for each namespace declared in that start tag.

Params:

parser: A reference to the XML parser.

handler: handler is a string containing the name of a function that must exist when xml_parse() is called for parser.

The function named by handler must accept three params, and should return an integer value. If the value returned
from the handler is FALSE (which it will be if no value is returned), the XML parser will stop parsing and
xml_get_error_code() will return XML_ERROR_EXTERNAL_ENTITY_HANDLING.

handler ( resource $parser, string $prefix, string $uri)

parser: the first param, parser, is a reference to the XML parser calling the handler.

prefix: The prefix is a string used to reference the namespace within an XML object.

uri: Uniform Resource Identifier (URI) of namespace.

If a handler function is set to an empty string, or FALSE, the handler in question is disabled.

Note: instead of a function name, an array containing an object reference and a method name can also
be supplied.

Returns: TRUE on success, FALSE on failure

xml_set_unparsed_entity_decl_handler:

xml_set_unparsed_entity_decl_handler - Set up unparsed entity declaration handler

Desc:

bool xml_set_unparsed_entity_decl_handler ( resource $parser , callable $handler )

Sets the unparsed entity declaration handler function for the XML parser parser.

The handler will be called if the XML parser encounters an external entity declaration with an
NDATA declaration, like hte following:

<!ENTITY <parameter>name</parameter> {<parameter>publicId</parameter> | <parameter>systemId</parameter>}
		NDATA <parameter>notationName</parameter>

See >> section 4.2.2 of the XML 1.0 spec for the definition of notation declared external entities.

Params:

parser: a reference to the XML parser to set up unparsed entity declaration handler functions

handler: handler is a string containing the name of a function that must exist when xml_parse()
is called for parser.

The function named by handler, must accept six parameters:

handler ( resource $parser, string $entity_name, string $base, string $system_id, string $public_id, string
	$notation_name )

parse: The first param, parser, is a reference to the XML parser calling the handler.

entity_name: The name of the entity that is about ot be defined

base: This is the base for resolving the system identifier (systemId) of the external entity. Currently,
this param will always be set to an empty string.

system_id: System identifier for the external entity

public_id: Public identifier for the external entity

notation_name: Name of the notation of this entity (see xml_set_notation_decl_handler()).

If a handler function is set to an empty string, or FALSE, the handler in question is disabled.

Note: Instead of a function name, an array containing an object reference and a method name can also be supplied.

Returns: TRUE on success, or FALSE On failure.

The above things belong to XMLWriter and the following things, belong to XSL:

XSL:

Intro:

The XSL extension implements the XSL standard, performing XSLT transformations using the libxslt library.

libxslt:

The XSLT C library for GNOME 

libxslt

Libxslt is the XSLT C library developed for the GNOME project. XSLT itself is an XML language to define transformation
for XML. Libxslt is based on libxml2 the XML C library developed for the GNOME project. It also implements most of the
EXSLT set of processor-portable extensions functions and some of Saxon's evaluate and expression extensions.

People can either embed the library in their application or use xsltproc the command line processing tool.
This library is free software and can be reused in commercial apps.

XSL Transformations (XSLT) Version 1.0

W3C Recommendation 16 November 1999

This version: http://www.w3.org/TR/1999/REC-xslt-19991116

Latest version: http://www.w3.org/TR/xslt

Previous versions: http://www.w3.org/TR/1999/PR-xslt-19991008
http://www.w3.org/1999/08/WD-xslt-19990813
http://www.w3.org/1999/07/WD-xslt-19990709
http://www.w3.org/TR/1999/WD-xslt-19990421
http://www.w3.org/TR/1998/WD-xsl-19981216
http://www.w3.org/TR/1998/WD-xsl-19980818

Abstract:

This specification defines the syntax and semantics of XSLT, which is a language for transforming XML documents into
other XML documents.

XSLT is designed for use as part of XSL, which is a stylesheet language for XML. In addition to XSLT, XSL includes
an XML vocabulary for specifying formatting. XSL specifies the styling of an XML document by using XSLT to describe
how the document is transformed into another XML document that uses the formatting vocabulary.

XSLT is also designed to be used indepedently of XSL. However, XSLT is not intended as a completely general-purpose XML
transformation language. Rather it is designed primarily for the kinds of transformations that are needed when XSLT
is used as a part of XSL.

Status of this document:

This document has been reviewed by W3C Members and other interested partiers and has been endorsed by the Director as a W3C
recommendation. It is a stable document and may be used as reference material or cited as a normative reference from other
documents. W3C's role in making the Recommendation is to draw attention to the specification and to promote its widespread
deployment. This enhances the functionality and interoperability of the Web.

etc.

Table of Contents:

1 Introduction
2 Stylesheet Structure
	2.1 XSLT Namespace
	2.2 Stylesheet Element
	2.3 Literal Result Element as Stylesheet
	2.4 Qualified Names
	2.5 Fowards-Compatible Processing
	2.6 Combining Stylesheets
		2.6.1 Stylesheet Inclusion
		2.6.2 Stylesheet Import
	2.7 Embedding stylesheets
3 Data Model
	3.1 Root Node Children
	3.2 Base URI
	3.3 Unparsed Entities
	3.4 Whitespace Stripping
4 Expressions
5 Template Rules
	5.1 Processing Model
	5.2 Patterns
	5.3 Defining Template Rules
	5.4 Applying Template Rules
	5.5 Conflict Resolution for Template Rules
	5.6 Overriding Template Rules
	5.7 Modes
	5.8 Built-in Template Rules
6 Named Templates
7 Creating the Result Tree
	7.1 Creating Elements and Attributes
		7.1.1 Literal Result Elements
		7.1.2 Creating Elements with xsl:element
		7.1.3 Creating Attributes with xsl:attribute
		7.1.4 Named Attribute Sets
	7.2 Creating Text
	7.3 Creating Processing Instructions
	7.4 Creating Comments
	7.5 Copying
	7.6 Computing Generated Text
		7.6.1 Generating Text with xsl:value-of
		7.6.2 Attribute Value Templates
	7.7 Numbering
		7.7.1 Number to String Conversion Attributes
8 Repetition
9 Conditional Processing
	9.1 Conditional Processing with xsl:if
	9.2 Conditional Processing with xsl:choose
10 Sorting
11 Variables and Parameters
	11.1 Result Tree Fragments
	11.2 Values of Variables and Parameters
	11.3 Using Values of Variables and Parameters with xsl:copy-of
	11.4 Top-level Variables and Parameters
	11.5 Variables and Parameters within Templates
	11.6 Passing Parameters to Templates
12 Additional Functions
	12.1 Multiple Source Documents
	12.2 Keys
	12.3 Number Formatting
	12.4 Miscellaneous Additional Functions
13 Messages
14 Extensions
	14.1 Extension Elements
	14.2 Extension Functions
15 Fallback
16 Output
	16.1 XML Output Method
	16.2 HTML Output Method
	16.3 Text Output Method
	16.4 Disabling Output Escaping
17 Conformance
18 Notation

Appendices:

A. References
	A.1 Normative References
	A.2 Other References
B. Element Syntax Summary
C. DTD Fragment for XSLT Stylesheets (Non-Normative)
D. Examples (Non-Normative)
	D.1 Document Example
	D.2 Data Example
E. Acknowledgements (Non-Normative)
F. Changes from Proposed Recommendation (Non-Normative)
G. Features under Consideration for Future Versions of XSLT (Non-Normative)

1. Introduction

This specification defines the syntax and semantics of the XSLT language. A transformation in the XSLT language is expressed as a well-formed
XML document [XML] conforming to the Namespaces in XML Recommendation [XML Names], which may include both elements that are defined by XSLT
and elements that are not defined by XSLT. XSLT-defined elements are distinguished by belonging to a specific XML namespace (see [2.1 XSLT Namespace]),
which is referred to in this specification as the XSLT namespace. Thus this specification is a definition of the syntax and semantics of the
XSLT namespace.

A transformation expressed in XSLT describes rules for transforming a source tree into a result tree. The transformation is acheived by associating
patterns with templates. A pattern is matched against elements in the source tree. A template is instansiated to create part of the result tree.
The result tree is separate from the source tree. The structure of the result tree can be completely different from the structure of the source
tree. In constructing the result tree, elements from the source tree can be filtered and reordered, and arbitrary structure can be added.

A transformation expressed in XSLT is called a stylesheet. This is because, in the case when XSLT is transforming into the XSL formatting
vocabulary, the transformation functions as a stylesheet.

This document does not specify how an XSLT stylesheet is associated with an XML document. It is recommended that XSL processors support
the mechanism described in [XML Stylesheet]. When this or any other mechanism yields a sequence of more than one XSLT stylesheet to be
applied simultaneously to a XML document, then the effect should be the same as applying a single stylesheet that imports each member
of the sequence in order (see [2.6.2 Stylesheet Import]).

A stylesheet contains a set of template rules. A template rule has two parts: a pattern which is matched against nodes in the source
tree and a template which can be instansiated to form part of the result tree. This allows a stylesheet to be applicable to a wide
class of documents that have similar source tree structures.

A template is instansiated for a particular source element to create part of the result tree. A template can contain elements that
specify literal result element structure. A template can also contain elements from the XSLT namespace that are instructions for
creating result tree fragments. When a template is instansiated, each instruction is executed and replaced by the result tree
fragment that it creates. Instructions can select and process descendant source elements.

Processing a descendant element creates a result tree fragment by finding the applicable template rule and instansiating its template.
Note that elements are only processed when they have been selected by the execution of an instruction. The result tree is constructed
by finding the template rule for the root node and instansiating its tempalte.

In the process of finding the applicable template rule, more than one template rule may have a pattern that matches a given element.
However, only one template rule will be applied. The method for deciding which template rule to apply is described in
[5.5 Conflict Resolution for Template Rules].

A single template by itself has considerable power. It can create structures of arbitrary complexity, it can pull string values out
of arbitrary locations in the source tree; it can generate structures that are repeated according to the occurrence of elements in
the source tree. For simple transactions where the structure of the result tree is independent of the structure of the source tree,
a stylesheet can often consist of only a single template, which functions as a template for the complete result tree.

Transformations on XML documents that represent data are often of this kind (see [D.2 Data Example]). XSLT allows a simplified syntax
for such stylesheets (see [2.3 Literal Result Element as Stylesheet]).

When a template is instansiated, it is always instansiated with respect to a current node and a current node list. The current node
is always a member of the current node list. Many operations in XSLT are relative to the current node. Only a few instructions
change the current node list or the current node (see [5 Template Rules] and [8 Repetition]); during the instansiation of one of these
instructions, the current node list changes to a new list of nodes and each member of this new list becomes the current node in turn,
after the instansiation of the instruction is complete, the current node and current node list revert to what they were before the
instruction was instansiated.

XSLT makes use of expression language defined by [XPath] for selecting elements for processing, for conditional processing and
for generating text.

XSLT provides two "hooks" for extening the language, one hook for extending the set of instruction elements used in templates
and one hook for extending the set of functions used in XPath expressions. These hooks are both based on XML namespaces.
THis version of XSLT does not define a mechanism for implementing the hooks. See [14 Extensions]..

NOte: the XSL WG intends to define such a mechanism in a future version of this specification or in a seperate specification.

The element syntax summary notation used to describe the syntax of XSLT-defined elements is described in [18 Notation].

The MIME media types text/xml and application/xml [RFC 2376] should be used for XSLT stylesheets. It is possible that a 
media type will be registered specifically for XSLT stylesheets; if and when it is, that media type may also be used.

2 Stylesheet Structure

2.1 XSLT Namespace

The XSLT namespace has the URI http://www.w3.org/1999/XSL/Transform

NOTE: The 1999 in the URI indicates the year in which the URI was allocated by the W3C. It does not indicate the version
of XSLT being used, which is specified by attributes (see [2.2 Stylesheet Element] and [2.3 Literal Result Element as
Stylesheet]).

XSLT processors must use the XML namespaces mechanism [XML Names] to recognize elements and attributes from this namespace.
Elements from the XSLT namespace are recognized only in the stylesheet not in the source document. The complete list of
XSLT-defined elements is specified in [B Element Syntax Summar]. Vendors must not extend the XSLT namespace with additional
elements or attributes. Instead, any extension must be in a separate namespace. Any namespace that is used for additional
instruction elements must be identified by means of the extension element mechanism specified in [14.1 Extension Elements].

This specification uses a prefix of xsl: for refering to elements in the XSLT namespace. However, XSLT stylesheets
are free to use any prefix, provided that there is a namespace declaration that binds the prefix to the URI of the XSLT
namespace.

An element from the XSLT namespace may have any attribute not from the XSLT namespace, provided that the expanded-name
of the attribute has a non-null namespace URI. The presence of such attributes must not change the behavior of XSLT
elements and functions defined in this document. Thus, an XSLT processor is always free to ignore such attributes,
and must ignore such attributes without giving an error if it does not recognize the namespace URI.

Such attributes can provide, for example, unique identifiers, optimization hints, or documentation.

It is an error for an element from the XSLT namespace to have attributes with expanded-names that have null namespace URIs
(i.e attributes with unprefixed names) other than attributes defined for the element in this document.

Note: The conventions used for the names of XSLT elements, attributes and functions are that names are all lower-case,
use hyphens to separate words, and use abbrevations only if they already appear in the syntax of a related language 
such as XML or HTML.

2.2 Stylesheet Element

<xsl:stylesheet
	id = id
	extension-element-prefixes = tokens
	exclude-result-prefixes = tokens
	version = number>
	<!-- Content: (xsl:import*, top-level-elements) -->
</xsl:stylesheet>

<xsl:transform
	id = id
	extension-element-prefixes = tokens
	exclude-result-prefixes = tokens
	version = number>
	<!-- Content: (xsl:import*, top-level-elements) -->
</xsl:transform>

A stylesheet is represented by an xsl:stylesheet element in an XML document. xsl:transform is allowed as a 
synonym for xsl:stylesheet.

An xsl:stylesheet element must have a version attribute, indicating the version of XSLT that the stylesheet
requires. For this version of XSLT, the value should be 1.0. When the value is not equal to 1.0, forwards-compatible
processing mode is enabled (see [2.5 Forwards-Compatible Processing]).

The xsl:stylesheet element may contain the following types of elements:

xsl:import

xsl:include

xsl:strip-space

xsl:preserve-space

xsl:output

xsl:key

xsl:decimal-format

xsl:namespace-alias

xsl:attribute-set

xsl:variable

xsl:param

xsl:template

An element occurring as a child of an xsl:stylesheet element is called a top-level element.

This example shows the structure of a stylesheet. Ellipses (...) indicate where attribute values or content have been
omitted. Although this example shows one of each type of allowed element, stylesheets may contain zero or more
of each of these elements.

<xsl:stylesheet version="1.0"
				xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
	<xsl:import href="..."/>

	<xsl:include href="..."/>

	<xsl:strip-space elements="..."/>

	<xsl:preserve-space elements="..."/>

	<xsl:output method="..."/>

	<xsl:key name="..." match="..." use="..."/>

	<xsl:decimal-format name="..."/>

	<xsl:namespace-alias stylesheet-prefix="..." result-prefix="..."/>

	<xsl:attribute-set name="...">

		...
	</xsl:attribute-set>

	<xsl:variable name="...">...</xsl:variable>

	<xsl:param name="...">...</xsl:param>

	<xsl:template match="...">
		...
	</xsl:template>

	<xsl:template name="...">
		...
	</xsl:template>
</xsl:stylesheet>

The order in which the children of the xsl:stylesheet element occur is not significant except for xsl:import
elements and for error recovery. Users are free to order the elements as they prefer, and stylesheet creation
tools need not provide control over the order in which the elements occur.

In addition, the xsl:stylesheet element may contain any element not from the XSLT namespace, provided that the
expanded-name of the element has a non-null namespace URI. The presence of such top-level elements must not change
the behavior of XSLT elements and functions defined in this document, for example, it would not be permitted
for such a top-level element to specify that xsl:apply-templates was to use different rules to resolve conflicts.

Thus, an XSLT processor is always free to ignore such top-level elements, and must ignore a top-level element
without giving an error if it does not recognize the namespace URI. Such elements can provide, for example

information used by extension elements or extension functions (see [14. Extensions])

information about what to do with the result tree

information about how to obtain the source tree

metadata about the stylesheet

structured documentation for the stylesheet

2.3 Literal Result Element as Stylesheet

A simplified syntax is allowed for stylesheets that consists of only a single template for the root node. The
stylesheet may consist of just a literal result element (see [7.1.1 Literal Result Elements]).
Such a stylesheet is equivalent to a stylesheet with an xsl:stylesheet element containing a template rule
containing the literal result element;

the template rule has a match pattern of /. For example:

<html xsl:version="1.0"
	  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
	  xmlns="http://www.w3.org/TR/xhtml1/strict">
	<head>
		<title>Expense Report Summary</title>
	</head>
	<body>
		<p>Total Amount: <xsl:value-of select="expense-report/total"/></p>
	</body>
</html>

Has the same meaning as:

<xsl:stylesheet version="1.0"
				xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
				xmlns="http://www.w3.org/TR/xhtml1/strict">
<xsl:template match="/">
<html>
	<head>
		<title>Expense Report Summary</title>
	</head>
	<body>
		<p>Total Amount: <xsl:value-of select="expense-report/total"/></p>
	</body>
</html>
</xsl:template>
</xsl:stylesheet>

A literal result element that is the document element of a stylesheet must have an xsl:version attribute,
which indicates the version of XSLT that the stylesheet requires. For this version of XSLT, the value 
should be 1.0, the value must be a Number. 

Other literal result elements may also have an xsl:version attribute. When the xsl:version attribute is not
equal to 1.0, forwards-compatible processing model is enabled (see [2.5 Forwards-Compatible Processing]).

The allowed content of a literal result element when used as a stylesheet is no different from when it occurs
within a stylesheet. Thus, a literal result element used as a stylesheet cannot contain top-level elements.

In some situations, the only way that a system can recognize that an XML document needs to be processed by an
XSLT stylesheet by examining the XML document itself. Using the simplified syntax makes this harder.

NOTE: For example, another XML language (AXL) might also use an axl:version on the document element to indicate
that an XML document was an AXL document that required processing by an AXL processor, if a document had both
an axl:version attribute and an xsl:version attribute, it would be unclear whether the document should be
processed by an XSLT processor or an AXL processor.

Therefore, the simplified syntax should not be used for XSLT stylesheets that may be used in such a situation.
This situation can, for example, arise when an XSLT stylesheet is transmitted as a message with a MIME media
type of text/xml or application/xml to a recipient that will use the MIME media type to determine how the
message is processed.

2.4 Qualified Names

The name of an internal XSLT object, specifically a named template (see [6 Named Templates]), a mode (see [5.7 Modes]),
an attribute set (see [7.1.4 Named Attribute Sets]), a key (see [12.2 Keys]), a decimal-format (see [12.3 Number Formatting]),
a variable or parameter (see [11 Variables and Parameters]) is specified as a QName. If it has a prefix, then the prefix
is expanded into a URI reference using the namespace declarations in effect on the attribute in which the name
occurs.

The expanded-name consisting of the local part of the name and possibly null URI reference is used as the name of the
object. The default namespace is not used for unprefixed names.

2.5 Forwards-Compatible Processing

An element enables forwards-compatible mode for itself, its attributes, its descendants and their attributes if either
it is an xsl:stylesheet element whose version attribute is not equal to 1.0, or it is a literal result element that
has an xsl:version attribute whose value is not equal to 1.0, or it is a literal result element that does not have
an xsl:version attribute and that is the document element of a stylesheet using the simplified syntax
(see [2.3 Literal Result Element as Stylesheet]).

A literal result element that has an xsl:version attribute whose value is equal to 1.0 disables forwards-compatible
mode for itself, its attributes, its descendants and their attributes.

If an element is processed in forwards-compatible mode, then:

If it is a top-level element and XSLT 1.0 does not allow such elements as top-level elements, then the element
must be ignored along with its content.

If it is an element in a template and XSLT 1.0 does not allow such elements to occur in templates, then if the
element is not instansiated, an error must not be signaled, and if the element is instansiated, the XSLT must
perform fallback for the element as specified in [15 Fallback].

If the element has an attribute that XSLT 1.0 does not allow the element to have or if the element has an
optional attribute with a value that the XSLT 1.0 does not allow the attribute to have, then the attribute
must be ignored.

Thus, any XSLT 1.0 processor must be able to process the following stylesheet without error, although the
stylesheet includes elements from the XSLT namespace that are not defined in this specification:

<xsl:stylesheet version="1.1"
				xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
	<xsl:template match="/">
		<xsl:choose>
			<xsl:when test="system-property('xsl:version') >= 1.1">
				<xsl:exciting-new-1.1-feature/>
			</xsl:when>
			<xsl:otherwise>
				<html>
				<head>
					<title>XSLT 1.1 required</title>
				</head>
				<body>
					<p>Sorry, this stylesheet requires XSLT 1.1.</p>
				</body>
				</html>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
</xsl:stylesheet>

Note: If a stylesheet depends crucially on a top-level element introduced by a version of XSL after 1.0,
then the stylesheet can use an xsl:message element with terminate="yes" (see [13 Messages]) to ensure that
XSL processors implementing earlier versions of XSL will not silently ignore the top-level element.
For example:

<xsl:stylesheet version="1.5"
				xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
	<xsl:important-new-1.1-declaration/>
	<xsl:template match="/">
		<xsl:choose>
			<xsl:when test="system-property('xsl:version') &lt; 1.1">
				<xsl:message terminate="yes">
					<xsl:text>Sorry, This stylesheet requires XSLT 1.1.</xsl:text>
				</xsl:message>
			</xsl:when>
			<xsl:otherwise>
				...
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	...
</xsl:stylesheet>

If an expression occurs in an attribute that is processed in forwards-compatible mode, then an XSLT
processor must recover from errors in the expressions as follows:

If the expression does not match teh syntax allowed by the XPath grammar, then the error must not be
signaled unless the expression is actually evaluated.

If the expression calls a function with an unprefixed name that is not part of the XSLT library, then
an error must not be signaled unless the function is actually called.

If the expression calls a function with a number of arguments that XSLT does not allow or with arguments
of types that XSLT does not allow, then an error must not be signaled unless the function is actually
called.


2.6 Combining Stylesheets

XSLT provides two mechanisms to combine stylesheets:

an inclusion mechanism that allows stylesheets to be combined without changing the semantics of the stylesheets
being combined 

and

an import mechanism that allows stylesheets to override each other.

2.6.1 Stylesheet Inclusion

<!-- Category: top-level-element -->
<xsl:include
	href = uri-reference />

An XSLT stylesheet may include another XSLT stylesheet using an xsl:include element. The xsl:include element has
an href attribute whose value is a URI reference identifying the stylesheet to be included. A relative URI
is resolved relative to the base URI of the xsl:include element (see [3.2 Base URI]).

The xsl:include element is only allowed as a top-level element.

The inclusion works at the XML tree level. The resource located by the href attribute value is parsed as an XML
document, and the children of the xsl:stylesheet element in this document replace the xsl:include element
in the including document. The fact that template rules or definitions are included does not affect the way
they are processed.

The included stylesheet may use the simplified syntax described in [2.3 Literal Result Element as Stylesheet].
The included stylesheet is treated the same as the equivalent xsl:stylesheet element.

It is an error if a stylesheet directly or indirectly includes itself.

NOTE: Inlcuding a stylesheet multiple times can cause errors because of duplicate definitions. Such multiple inclusions
are less obvious when they are indirect. For example, if stylesheet B includes stylesheet A, stylesheet C includes
stylesheet A, and stylesheet D includes both B and C, then A will be included indirectly by D twice.

If all of B, C and D are used as independent stylesheets, then the error can be avoided by separating everything in
B other than the inclusion of A into a separate stylesheet B and changing B to contain just inclusions of B'
and A, simialrly for C, and then changing D to include A, B', C'.

NOTE: Forgot some ' derivation notations, but alas, cba to fix that.

2.6.2 Stylesheet Import

<xsl:import
	href = uri-reference />

An XSLT stylesheet may import another XSLT stylesheet using an xsl:import element. Importing a stylesheet is the same as
including it (see [2.6.1 Stylesheet Inclusion]) except that definitions and template rules in the importing stylesheet
takes precedence over template rules and definitions in the imported stylesheet, tthis is described more in detail below.

The xsl:import element has an href attriubte whose value is a URI reference identifying the stylesheet to be imported.
A relative URI is resolved relative to the base URI of the xsl:import element (see [3.2 Base URI]).

The xsl:import element is only allowed as a top-level element. The xsl:import element children must precede all other 
element children of an xsl:stylesheet element, including any xsl:include element children. When xsl:include is used
to include a stylesheet, any xsl:import elements in the included document are moved up in the including document to
after any existing xsl:import elements in the including document.

For example,

<xsl:stylesheet version="1.0"
				xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
	<xsl:import href="article.xsl"/>
	<xsl:import href="bigfont.xsl"/>
	<xsl:attribute-set name="note-style">
		<xsl:attribute name="font-style">italic</xsl:attribute>
	</xsl:attribute-set>
</xsl:stylesheet>

The xsl:stylesheet elements encountered during processing of a stylesheet that contains xsl:import elements are
treated as forming an import tree. In the import tree, each xsl:stylesheet element has one import child for
each xsl:import element that it contains.

Any xsl:include elements are resolved before constructing the import tree. An xsl:stylesheet element in the import
tree is defined to have lower import precedence than another xsl:stylesheet element in the import tree if it would
be visited before that xsl:stylesheet element in a post-order traversal of the import tree (i.e a traversal of
the import tree in which an xsl:stylesheet element is visited after its import children).

Each definition and template rule has import precedence determined by the xsl:stylesheet element that contains it.

For example, suppose:

stylesheet A imports stylesheets B and C, in that order.

stylesheet B imports stylesheet D

stylesheet C imports stylesheet E

Then the order of import precedence (lowest first) is D, B, E, C, A

NOTE: Since xsl:import elements are required to occur before any definitions or template rules, an implementation
that processes imported stylesheets at the point at which it encounters the xsl:import element will encounter
definitions and template rules in increasing order of import precedence.

In general, a definition or template rule with higher import precedence takes precedence over a definition or template
rule with lower import precedence. This is defined in detail for each kind of definition and for template rules.

It is an error if a stylesheet directly or indirectly imports itself. Apart from this, the case where a stylesheet
with a particular URI is imported in multiple places is not treated specially.

The import tree will have a separate xsl:stylesheet for each place that it is imported.

NOTE: if xsl:apply-imports is used (see [5.6 Overriding Template Rules]), the behavior may be different from the
behavior if the stylesheet had been imported only at the place with the highest import precedence.

2.7 Embedding Stylesheets:

Normally an XSLT stylesheet is a complete XML document with the xsl:stylesheet element as the document element.
However, an XSLT stylesheet may also be embedded in another resource. Two forms of embedding are possible:

the XSLT stylesheet may be textually embedded in a non-XML resource, or
the xsl:stylesheet element may occur in an XML document other than as the document element.

To facilitate the second form of embedding, the xsl:stylesheet element is allowed to have an ID attribute
that specifies a unique identifier.

NOTE: In order for such an attribute to be used with the XPath id function, it must actually be declared in the
DTD as being an ID.

The following example shows how the xml-stylesheet processing instruction XML StyleSheet can  be used to allow
a  document to contain its own stylesheet. The URI reference uses a relative URI with a fragment identifier
to locate the xsl:stylesheet element:

<?xml-stylesheet type="text/xml" href="#style1"?>
<!DOCTYPE doc SYSTEM "doc.dtd">
<doc>
<head>
<xsl:stylesheet id="style1"
				version="1.0"
				xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
				xmlns:fo="http://www.w3.org/1999/XSL/Format">
<xsl:import href="doc.xsl"/>
<xsl:template match="id('foo')">
	<fo:block font-weight="bold"><xsl:apply-templates/></fo:block>
</xsl:template>
<xsl:template match="xsl:stylesheet">
	<!-- ignore -->
</xsl:template>
</xsl:stylesheet>
</head>
<body>
<para id="foo">
...
</para>
</body>
</doc>

Note: A stylesheet that is embedded in the document to which it is to be applied or that may be included or imported
into an stylesheet that is so embedded typically needs to contain a template rule that specifies that xsl:stylesheet
elements are to be ignored.

3 Data Model

The data model used by XSLT is the same as that used by XPath with the additions described in this section.
XSLT operates on source, result and stylesheet documents using the same data model. Any two XML documents that
have the same tree will be treated the same by XSLT.

Processing instructions and comments in the stylesheet are ignored: the stylesheet is treated as if neither processing
instruction nodes nor comment nodes were included in the tree that represents the stylesheet.

3.1 Root Node Children

The normal restrictions on the children of the root nodes are relaxed for the result tree. The result tree may have any
sequence of nodes as children that would be possible for an element node. In particular, it may have text node children,
and any number of element node children. When writing out using the XML output method (see [16 Output]), it is possible
that a result tree will not be a well-formed XML document, however, it will always be a well-formed external general
parsed entity.

When the source tree is created by parsing a well-formed XML document, the root node of the source tree will automatically
satisfy the normal restrictions of having no text node children and exactly one element child. When the source tree is
created in some other way, for example by using the DOM, the usual restrictions are relaxed for the source tree
as for the result tree.

3.2 Base URI

Every node also has an associated URI called its base URI, which is used for resolving attribute values that represent
relative URIs into absolute URIs. If an element or processing instruction occurs in an external entity, the base 
URI of that element or processing instruction is the URI of the external entity; otherwise, the base URI is the base
URI of the document.

The base URI of the document node is the URI of the document entity. The base URI for a text node, a comment node,
an attribute node or a namespace node is the base URI of the parent of the node.

3.3 Unparsed Entities

The root node has a mapping that gives the URI for each unparsed entity declared in the document's DTD. The URI
is generated from the system identifier and public identifier specified in the entity declaration. The XSLT 
processor may use the public identifier to generate a URI for the entity instead of the URI specified in the
system identifier. If the XSLT processor does not use the public identifier to generate the URI, it must use the
system identifier; if the system identifier is a relative URI, it must be solved into an absolute URI
using the URI of the resource containing the entity declaration as the base URI.

3.4 Whitespace Stripping

After the tree for a source document or stylesheet document has been constructed, but before it is otherwise
processed by XSLT, some text nodes are stripped. A text node is never stripped unless it contains only whitespace
chars. Stripping the text node remvoes the text node from the tree.

The stripping process takes as input a set of element names for which whitespace must be preserved. The stripping
process is applied to both stylesheets and source documents, but the set of whitespace- preserving element names
is determined differently for stylesheets and for source documents.

A text node is preserved if any of the following apply:

The element name of the parent of the text node is in the set of whitespace-preserving element names.

The text node contains at least one non-whitespace char. As in XML, a whitespace char is #x20, #x9, #xD or #xA.

An ancestor element of the text node has an xml:space attribute with a value of preserve, and no closer ancestor
element has xml:space with a value of default.

Otherwise, the text node is stripped.

The xml:space attributes are not stripped from the tree.

NOTE: this implies that if an xml:space attribute is specified on a literal result element, it will be included in the result.

FOr stylesheets, teh set of whitespace-preserving element names consists of just xsl:text.

<!-- Category: top-level-element -->
<xsl:strip-space
	elements = tokens />

<!-- Category: top-level-element -->
<xsl:preserve-space
	elements = tokens />

For source documents, the set of whitespace-preserving element names is specified by xsl:strip-space and xsl:preserve-space
top-level elements. These elements each have an elements attribute whose value is a whitespace-separated list of NameTests.

Initially, the set of whitespace-preserving element names contains all element names. If an element name matches a NameTest
in an xsl:strip-space element, then it is removed from the set of whitespace-preserving element names. If an element name
matches a NameTest in an xsl:preserve-space element, then it is added to the set of whitespace-preserving element names.

An element matches a NameTest if and only if the NameTest would be true for the element as an XPath node test.
Conflicts between matches to xsl:strip-space and xsl:preserve-space elements are resolved the same way as conflicts
between template rules (see [5.5 Conflict Resolution for Template Rules]). Thus, the applicable match for a 
particular element name is determined as follows:

First, any match with lower import precedence than another match is ignored.

Next, any match with a NameTest that has a lower default priority than the default priority of the NameTest
of another match is ignored.

it is an error if this leaves more than one match. An XSLT processor may signal the error, if it does not signal
the error, it must recover by choosing, from amongst the matches that are left, the one that occurs last in
the stylesheet.

4 Expressions:

XSLT uses the expression language defined by XPath [XPath]. Expressions are used in XSLT for a variety of purposes including:

selecting nodes for processing.

specifying conditions for different ways of processing a node.

generating text to be inserted in the result tree.

An expression must match the XPath production Expr.

Expressions occur as the value of certain attributes on XSLT-defined elements and within curly
braces in attribute value templates.

In XSLT, an outermost expression (i.e an expression that is not part of another expression), gets its
context as follows:

the context node comes from the current node

the context position comes from the position of the current node in teh current node list; the first pos is 1

the contest size comes from the size of the current node list

the variable bindings are the bindings in scope on the element which has teh attribute in which the expression occurrs
(see [11 Variables and Parameters])

The set of namespace declarations are those in scope on the element which has the attribute in which the expression
occurs; this includes the implicit declaration of the prefix xml required by the XML Namespaces Recommendation
[XML Names], the default namespace (as declared by xmlns) is not part of this set

The function library consists of the core function library together with the additional functions defined in [12 Additional
Functions] and the extension functions as described in [14 Extensions]; it is an error for expressions to include 
a call to any other function

5 Template Rules

5.1 Processing Model

A list of source nodes is processed to create a result tree fragment. The result tree is constructed by processing a 
list containing just the root node. A list of source nodes is processed by appending the result tree structure
created by processing each of the members of the list in order.

A node is processed by finding all the template rules with patterns that match the node, and choosing the best
amongst them, the chosen rule's template is then instansiated with the node as the current node and with the list
of source nodes as the current node list. A template typically contains instructions that select an additional
list of source nodes for processing.

THe process of matching, instansiation and selection is continued recursively until no new source nodes are
selected for processing.

Implementations are free to process the source document in any way that produces teh same result as if it were
processed using this processing model.

5.2 Patterns

Template rules identify the nodes to which they apply by using a pattern. As well as being used in template rules,
patterns are used for numbering (see [7.7 Numbering]) and for declaring keys (see [12.2 keys]). A pattern specifies
a set of conditions on a node. A node that satisfies the conditions matches the pattern, a node that does not satisfy
the conditions does not match the pattern.

The syntax for patterns is a subset of the syntax for expressions. In particular, location paths that meet certain
restrictions can be used as patterns. An expression that is also a pattern always evaluates to an object of type node-set.

A node matches a pattern if the node is a member of the result of evaluating the pattern as an expression with
respect to some possible context, the possible contexts are those whose context node is the node being matched
or one of its ancestors.

Here are some examples of patterns:

para matches any para element

* matches any element

chapter|appendix matches any chapter element and any appendix element

olist/item matches any item element with an olist parent

appendx//para matches any para element with an appendix ancestor element

/ matches the root node

text() matches any text node

processing-instruction() matches any processing instruction

node() matches any node other than an attribute node and the root node

id("W11") matches the element with unique ID W11

para[1] matches any para element that is the first para child element of its parent

*[position()=1] and self::para] matches any para element that is the first child element of its parent

para[last()=1] matches any para element that is the only para child element of its parent

items/item[position()>1] matches any item element that has a items parent and that is not the first
item child of its parent

item[position() mod 2 = 1]would be true for any element that is an odd-numbered item child of its parent

div[@class="appendix"]//p matches any p element with a div ancestor element that has a class attribute with the value appendix

@class matches any class attribute (not any element that has a class attribute)

@* matches any attribute

A pattern must match, the grammar for Pattern. A Pattern is a set of location path patterns seperated by |.
A location path pattern is a location path whose steps all use only the child of attributes axes. Although
patterns must not use the descendant-or-self axis, patterns may use the // operator as well as the / operator.

Location path patterns can also start with an id or key function call with a literal argument. Predicates in a 
pattern can use arbitrary expressions just like predicates in a location path.

Patterns:

[1] Pattern 						::= LocationPathPattern
										| Pattern '|' LocationPathPattern
[2] LocationPathPattern 			::= '/' RelativePathPattern?
										| IdKeyPattern(('/'|'//') RelativePathPattern)?
										| '//'? RelativePathPattern
[3] IdKeyPattern 					::= 'id''('Literal')'
										| 'key' '(' Literal','Literal')'
[4] RelativePathPattern 			::= StepPattern
										| RelativePathPattern '/' StepPattern
										| RelativePathPattern '//' StepPattern
[5] StepPattern 					::= ChildOrAttributeAxisSpecifier NodeTest Predicate*
[6] ChildOrAttributeAxisSpecifier	::= AbbreviatedAxisSpecifier
										| ('child' | 'attribute')'::'

A pattern is defined to match a node if and only if there is possible context such that when the pattern is
evaluated as an expression with that context, the node is a member of the resulting node-set.

When a node is being matched, the possible contexts have a context node that is the node being matched or any
ancestor of that node, and a context node list containing just the context node.

For example, p matches any p element, because for any p if the expression p is evaluated with the parent of the p element
as context the resulting node-set will contain that p element as one of its members.

NOTE: This matches even a p element that is the document element, since the document root is the parent of the document
element.

Although the semantics of patterns are specified indirectly in terms of expression evaluation, it is easy to understand
the meaning of a pattern directly without thinking in terms of expression evaluation. In a pattern, | indicates alternatives;
a pattern with one or more | separated alternatives matches if any one of the alternatives matches.

A pattern that consists of a sequence of StepPatterns separated by / or // is matched from right to left. The pattern only
matches if the rightmost StepPattern matches and a suitable element matches the rest of the pattern; if the separtor is
/ then only the parent is a suitable element; if the seperator is //, then any ancestor is a suitable element.

A StepPattern that uses the child axis matches if the NodeTest is true for the node and the node is not an attribute node.
A StepPattern that uses the attribute axis matches if the NodeTest is true for the node and the node is an attribute node.

When [] is present, then the first PredicateExpr in a StepPattern is evaluated with the node being matched as the context
node and the siblings of the context node that match the NodeTest as the context node list, unless the node being matched
is an attribute node, in which case the ocntext node list is all the attributes that have the same parent as the
attribute being matched and that match the NameTest.

For example:

appendix//ulist/item[position()=1]

matches a node if and only if all of the following are true:

the NodeTest item is true for the node and the node is not an attribute; in other words, the node is an item element

evaluating the PredicateExpr position()=1 with the nodes as context node and the siblings of the node that are item
elements as the context node list yields true.

the node has a parent that matches appendix//ulist, this will be true if the parent is a ulist element that has an
appendix ancestor element

5.3 Defining Template Rules

<!-- Category: top-level-element -->
<xsl:template
	match = pattern
	name = qname
	priority = number
	mode = qname>
	<!-- Content: (xsl:param*, template) -->
</xsl:template>

A template rule is specified with the xsl:template element. The match attribute is a Pattern that identifies the
source node or nodes to which the rule applies. The match attribute is required unless the xsl:template element has
a name attribute (see [6 Named Templates]). It is an error for the value of the match attribute to contain a VariableReference.

The content of the xsl:template element is the template that is instansiated when the template rule is applied.

For example, an XML document might contain:

This is an <emph>important</emph> point.

The following template rules matches emph elements and produces a fo:inline-sequence formatting object with a 
font-weight property of bold.

<xsl:template match="emph">
	<fo:inline-sequence font-weight="bold">
		<xsl:apply-templates/>
	</fo:inline-sequence>
</xsl:template>

Note: Examples in this document use the fo: prefix for the namespace http://www.w3.org/1999/XSL/Format, 
which is the namespace of the formatting objects defined in [XSL].

As described next, the xsl:apply-templates element recursively processes the children of the source element.

5.4 Applying Template Rules

<!-- Category: instruction -->
<xsl:apply-templates
	select = node-set-expression
	mode = qname>
	<!-- Content: (xsl:sort | xsl:with-param)* -->
</xsl:apply-templates>

This example creates a block for a chapter element and then processes its immediate children.

<xsl:template match="chapter">
	<fo:block>
		<xsl:apply-templates/>
	</fo:block>
</xsl:template>

In the absence of a select attribute, the xsl:apply-templates instruction processes all of the children of
the current node, including text nodes. However, text nodes that have been stripped as specified in
[3.4 Whitespace Stripping] will not be processed. 

If stripping of whitespace nodes has not been enabled for an element, then all whitspace in the content of the
element will be processed as text, and thus whitespace between child elements will count in determining the pos
of a child element as returned by the position function.

A select attribute can be used to process nodes selected by an expression instead of processing all children.
The value of the select attribute is an expression. The expression must evaluate to a node-set. The selected
set of nodes is processed in document order, unless a sorting specification is present (see [10 Sorting]).

The following example processes all of the author Children of the author-group:

<xsl:template match="author-group">
	<fo:inline-sequence>
		<xsl:apply-templates select="author"/>
	</fo:inline-sequence>
</xsl:template>

The following example processes all of the given-nameS of the authorS that are children of
author-group:

<xsl:template match="author-group">
	<fo:inline-sequence>
		<xsl:apply-templates select="author/given-name"/>
	</fo:inline-sequence>
</xsl:template>

This example processes all of the heading descendant elements of the book element.

<xsl:template match="book">
	<fo:block>
		<xsl:apply-templates select=".//heading"/>
	</fo:block>
</xsl:template>

It is also possible to process elements that are not descendants of the current node. This examples
assumes that a department element has group children and employees descendants. It finds an employee's
department and then processes the group children of the department:

<xsl:template match="employee">
	<fo:block>
		Employee <xsl:apply-template select="name"/> belongs to group
		<xsl:apply-templates select="ancestor::department/group"/>
	</fo:block>
</xsl:template>

Multiple xsl:apply-templates elements can be used within a single template to do simple reordering.
THe following example creates two HTML tables. The first table is filled with domestic sales while
the second table is filled with foreign sales.

<xsl:template match="product">
	<table>
		<xsl:apply-templates select="sales/domestic"/>
	</table>
	<table>
		<xsl:apply-templates select="sales/foreign"/>
	</table>
</xsl:template>

NOTE: It is possible for there to be two matching descendants where one is a descendant of the other. 
This case is not treated specially: both descendants will be processed as usual. For example, given
a source document:

<dov><div><div></div></div></doc>

the rule:

<xsl:template match="doc">
	<xsl:apply-templates select=".//div"/>
</xsl:template>

will process both the outer div and inner div elements.

NOTE: Typically, xsl:apply-templates is used to process only nodes that are descendants of the current node.
Such use of xsl:apply-templates cannot result in non-terminating processing loops. However, when xsl:apply-templates
is used to process elements that are not descendants of the current node, the possibility arises of non-terminating
loops. For example:

<xsl:template match="foo">
	<xsl:apply-templates select="."/>
</xsl:template>

Implementations may be able to detect such loops in some cases, but the possibility exists that a stylesheet may
enter a non-terminating loop that an implementation is unable to detect. This may present a denial of service 
security risk.

5.5 Conflict Resolution for Template Rules

It is possible for a source node to match more than one template rule. The template rule to be used is determined
as follows:

1. First, all matching template rules that have lower import precedence than the matching template rule or rules with
the highest import precedence are eliminated from consideration.

2. Next, all matching template rules that have lower priority than the matching rule or rules with the highest priority
are eliminated from consideration. The priority of a template rule is specified by the priority attribute on the template
rule. The value of this must be a real number (positive or negative), matching the production Number with an optional
leading minus sign (-). 

The default priority is computed as follows:

If the pattern contains multiple alternatives separated by |, then it is treated equivalently to a set of template rules,
one for each alternative.

If the pattern has the form of a QName preceded by a ChildOrAttributeAxisSpecifier or has the form processing-instruction
(Literal, preceded by a ChildOrAttributeAxisSpecifier, then the priority is 0.)

If the pattern has the form NCName:* preceded by a ChildOrAttributeAxisSpecifier, then the priority is -0.25

Otherwise, if the pattern consists of just a NodeTest preceded by a ChildOrAttributeAxisSpecifier, then the prio is -0.5

Otherwise, the prio is 0.5

Thus, the most common kind of pattern (a pattern that tests for a node with a particular type and a particular expanded-name)
has priority 0. The next less specific kind of pattern (a pattern that tests for a node with a particular type and an
expanded-name with a particular namespace URI) has priority -0.25.

Patterns less specific than this (patterns that just tests for nodes with particular types) have prio -0.5. Patterns more specific
than the most common kind of pattern have priority 0.5

It is an error if this leaves more tha one matching template rule. An XSLT processor may signal the error, if it does not signal the
error, it must recover by choosing, from amongst the matching template rules that are left, the one that occurs last in the stylesheet.

5.6 Overriding Template Rules

<!-- Category: instruction -->
<xsl:apply-imports />

A template rule that is being used to override a template rule in a imported stylesheet (see [5.5 Conflict Resolution for Template
Rules]) can use the xsl:apply-imports element to invoke the overridden template rule.

At any point in the processing of a stylesheet, there is a current template rule. Whenever a template rule is chosen by matching a
pattern, the template rule becomes the current template rule for the instansiation of the rule's template. When an xsl:for-each
element is instansiated, the current template rule becomes null for the instansiation of the content of the xsl:for-each element.

xsl:apply-imports processes the current node using only template rules that were imported into the stylesheet element containing
the current template rule, the node is processed in the current template rule's mode. It is an error if xsl:apply-imports
is instansiated when the current template rule is null.

For example, suppose the stylesheet doc.xsl contains a template rule for example elements:

<xsl:template match="example">
	<pre><xsl:apply-templates/></pre>
</xsl:template>

Another stylesheet could import doc.xsl and modify the treatment of example elements as follows:

<xsl:import href="doc.xsl"/>

<xsl:template match="example">
	<div style="border: solid red">
		<xsl:apply-imports/>
	</div>
</xsl:template>

The combined effect would be to transform an example into an element of the form:

<div style="border: solid red"><pre>...</pre></div>

5.7 Modes:

Modes allow an element to be processed multiple times, each time producing a different result.

Both xsl:template and xsl:apply-templates have an optional mode attribute. The value of the mode attribute
is a QName, which is expanded as described in [2.4 Qualified Names]. if xsl:template does not have a match
attribute, it must not have a mode attribute.

If an xsl:apply-templates element has a mode attribute, then it applies only to those template rules from xsl:template
elements that have a mode attribute with the same value, if an xsl:apply-templates element does not have a mode
attribute, then it applies only to those template rules from xsl:template element that do not have a mode attribute.

5.8 Built-in Template Rules

There is a built-in template rule to allow recursive processing to continue in the absence of a successful pattern
match by an explicit template rule in teh stylesheet. This template rule applies to both element nodes and the 
root node. The following shows the equivalent of the built-in template rule:

<xsl:template match="*|/">
	<xsl:apply-templates/>
</xsl:template>

There is also a built-in template rule for each mode, which allows recursive processing to continue in the same mode
in the absence of successful pattern match by an explicit template rule in the stylesheet.

This template rule applies to both element nodes and the root node. The following shows the equivalent of the built-in
template rule for mode m.

<xsl:template match="*|/" mode="m">
	<xsl:apply-templates mode="m"/>
</xsl:template>

There is also a built- in template rule for text and attribute nodes that copies text through:

<xsl:template match="text() |@*">
	<xsl:value-of-select="."/>
</xsl:template>

The built-in template rule for processing instructions and comments is to do nothing:

<xsl:template match="processing-instruction() | comment()" />

The built-in template rule for namespace node is also to do nothing. There is no pattern that
can match a namespace node, so, the built-in template rule is the only template that is applied
for namespace nodes.

The built-in template rules are treated as if they were impoorted implicitly before the stylesheet and so have lower
import precedence than all other template rules. Thus, the author can override a built-in template rule by
including an explicit template rule.

6 Named Templates

<!-- Category: instruction -->
<xsl:call-template
	name = qname>
	<!-- Content: xsl:with-param* -->
</xsl:call-template>

Templates can be invoked by name. An xsl:template element with a name attribute specifies a named template.

The value of the of the name attribute is a QName, which is expanded as described in [2.4 Qualified Names].
If an xsl:template element has a name attribute, it may, but need not, also have a match attribute. An xsl:call-template
element invokes a template by name, it has a required name attribute that identifies the template to be invoked.

Unlike xsl:apply-templates, xsl:call-template does not change the current node or the current node list.

The match, mode and priority attributes on an xsl:template element do not affect whether the template is invoked
by an xsl:call-template element. Similarly, the name attribute on an xsl:template element does not affect whether
the template is invoked by an xsl:apply-templates element.

It is an error if a stylesheet contains more than one template with the same name and same import precedence.

7 Creating the Result Tree

This section describes instructions that directly create nodes in the result tree.

7.1 Creating Elements and Attributes

7.1.1 Literal Result Elements

In a template, an element in the stylesheet that does not belong to the XSLT namespace and that is not an extension
element (see [14.1 Extension Element]) is instansiated to create an element node with the same expanded-name.
The content of the element is a template, which is instansiated to give the content of the created element node.

The created element node will have an attribute nodes that were present on the element node in the stylesheet
tree, other than attributes with names in the XSLT namespace.

The created element node will also have a copy of the namespace nodes that were present on the element node 
in the stylesheet tree with the exception of any namespace node whose string value is the XSLT namespace
URI (http://www.w3.org/1999/XSL/Transform), a namespace URI declared as an extension namespace (see [14.1 Extension
Elements]), or a namespace URI designated as an excluded namespace.

A namespace URI is designated as an excluded namespace by using an exclude-result-prefixes attribute on an
xsl:stylesheet element or an xsl:exclude-result-prefixes attribute on a literal result element. The value of both
these attributes is a whitespace-separated list of namespace prefxes.

The default namespace (as declared by xmlns) may be designated as an excluded namespace by including #default in
the list of namespace prefixes. The designation of a namespace as an excluded namespace is effective within the
subtree of the stylesheet rooted at the element bearing the exclude-result-prefixes or xsl:exclude-result-prefixes
attribute; A subtree rooted at an xsl:stylesheet element does not include any stylesheets imported or included
by children of that xsl:stylesheet element.

NOTE: When a stylesheet uses a namespace declaration only for the purposes of addressing the source tree, specifying
the prefix in the exclude-result-prefixes attribute will avoid superfluos namespace declarations in the reuslt
tree.

The value of an attribute of a literal result element is interperted as an attribute value template: it can contain
expressions contained in curly braces ( {} ).

A namespace URI in the stylesheet tree that is being used to specify a namespace URI in the result tree is called
a literal namespace URI. This applies to:

The namespace URI in the expanded-name of a literal result element in the stylesheet

the namespace URI in teh expanded-name of an attribute specified on a literal result element
in the stylesheet

the string-value of a namespace node on a literal result element in the stylesheet

<!-- Category: top-level-element -->
<xsl:namespace-alias
	stylesheet-prefix = prefix | "#default"
	result-prefix = prefix | "#default" />

A stylesheet can use the xsl:namespace-alias element to declare that one namespace URI is an alias
for another namespace URI. When a literal namespace URI has been declared to be an alias for another
namespace URI, then the namespace URI in the result tree will be the namespace URI that the literal
namespace URI is an alias for, instead of the literal namespace URI itself.

The xsl:namespace-alias element declares that the namespace URI bound to the prefix specified by the
stylesheet-prefix attribute is an alias for the namespace URI bound to the prefix specified by the 
result-prefix attribute. Thus, the stylesheet-prefix attribute specifies the namespace URI that will
appear in the stylesheet, and result-prefix attribute specifies the corresponding namespace URI that
will appear in the result tree.

The default namespace (as declared by xmlns) may be specified by using #default instead of a prefix.
If a namespace URI is declared to be an alias for multiple different namespace URIs, then the declaration
with the highest import precedence is used.

It is an error if there is more than one such declaration. An XSLT processor may signal the error;
if it does not signal the error, it must recover by choosing, from amongst the declarations with the
highest import precedence,, the one that occurs last in the stylesheet.

When literal result elements are being used to create element, attribute or namespace nodes that
use the XSLT namespace URI, the stylesheet must use an alias. For example, the stylesheet:

<xsl:stylesheet
	version="1.0"
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
	xmlns:fo="http://www.w3.org/1999/XSL/Format"
	xmlns:axsl="http://www.w3.org/1999/XSL/TransformAlias">

<xsl:namespace-alias stylesheet-prefix="axsl" result-prefix="xsl"/>

<xsl:template match="/">
	<axsl:stylesheet>
		<xsl:apply-templates/>
	</axsl:stylesheet>
</xsl:template>

<xsl:template match="block">
	<axsl:template match="{.}">
		<fo:block><axsl:apply-templates/></fo:block>
	</axsl:template>
</xsl:template>

</xsl:stylesheet>

Will generate an XSLT stylesheet form a document of the form:

<elements>
<block>p</block>
<block>h1</block>
<block>h2</block>
<block>h3</block>
<block>h4</block>
</elements>

NOTE: It may be nessecary also to use aliases for namespaces other than the XSLT namespace URI. For example, literal
elements belonging to a namespace dealing with digital signatures might cause XSLT stylesheets to be mishandled by
general-purpose security software; using an alias for the namespace would avoid the possibility of such mishandling.

7.1.2 Creating Elements with xsl:element

<!-- Category: instruction -->
<xsl:element
	name = { qname }
	namespace = { uri-reference }
	use-attribute-sets = qnames>
	<!-- Content: template -->
</xsl:element>

The xsl:element element allows an element to be created with a computed name. The expanded-name of the element
to be created is specified by a required name attribute and an optional namespace attribute. The content of the
xsl:element element is a template for the attributes and children of the created element.

The name attribute is interpeted as an attribute value template. It is an error if the string that results from 
instansiating the attribute value template is not a QName. An XSLT processor may signal the error; if it does
not signal the error, then it must recover by making the result of instansiating thte xsl:element element to
be the sequence of nodes created by instansiating the content of the xsl:element element, excluding any
intiial attribute nodes.

If the namespace attribute is not present then the QName is expanded into an expanded-name using the namespace declarations
in effect for the xsl:element element, including any default namespace declaration.

If the namespace attribute is present, then it also is interpreted as an attribute value template. The string that results
from instansiating the attribute value template should be a URI reference. It is not an error if the string is not
a syntactically legal URI reference. If the string is empty, then the expanded-name of the element has a null namspace
URI.

otherwise, the string is used as the namespace URI of the expanded-name of the element to be created. The local
part of the QName specified by the name attribute is used as the local part of the expanded-name of the element
to be created.

XSLT processors may make use of the prefix of the QName specified in the name attribute when selecting the prefix
used for outputting the created element as XML; however, they are not required to do so.

7.1.3 Creating Attributes with xsl:attribute

<!-- Category: instruction -->
<xsl:attribute
	name = { qname }
	namespace = { uri-reference }>
	<!-- Content: template -->
</xsl:attribute>

The xsl:attribute element can be used to add attributes to result elements whether created by literal result
elements in the stylesheet or by instructions such as xsl:element. The expanded-name of the attribute to
be created is specified by a required name attribute and an optional namespace attribute.

Instansiating an xsl:attribute element adds an attribute node to the containing result element node. The content
of the xsl:attribute element is a template for the value of the created attribute.

The name attribute is interpreted as an attribute value template. It is an error if the string that results from
the attribute value template is not a QName or is the string xmlns. An XSLT processor may signal the error;
if it does not signal the error, it must recover by not adding the attribute to the result tree. If the namespace
attribute is not present, then the QName is expanded into an expanded-name using the namespace declarations in
effect for the xsl:attribute element, not including any default namespace declaration.

If the namespace attribute is present, then it also is interpreted as an attribute value template. The string that
results from instansiating it should be a URI reference. It is not a error if the string is not a syntactically
legal URI reference. If the string is empty, then the expanded-name of the attribute has a null namespace URI.
Otherwise, the string is used as the namespace URI of the expanded-name of the attribute to be created.

The local part of the QName specified by the name attribute is used as the local part of the expanded-name
of the attribute to be created.

XSLT processors may make use of the prefix of the QName specified in the name attribute when selecting
the prefix used for outputting the created attribute as XML, however, they are not required to do so and,
if the prefix is xmlns, they must not do so.

Thus, although it is not an error to do:

<xsl:attribute name="xmlns:xsl" namespace="whatever">http://www.w3.org/1999/XSL/Transform</xsl:attribute>

it will not result in a namespace declaration being output.

Adding an attribute to an element replaces any existing attribute of that element with the same
expanded-name.

The following are all errors:

Adding an attribute to an element after children have been added to it, implementations may either signal
the error, or ignore the attribute.

Adding an attribute to a node that is not an element, implementations may either signal the error or
ignore the attribute

Creating nodes other than text nodes during the instansiation of the content of the xsl:attribute
element, implementations may either signal the error or ignore the offending nodes.

Note: When an xsl:attribute contains a text node with a newline, then the XML output must contain
a character reference. For example:

<xsl:attribute name="a">x
y</xsl:attribute>

will result in output:

a="x&#xA;y"

(or with any equivalent char reference). The XML output cannot be

a="x
y"

This is because XML 1.0 reuqires newline chars in attribute values to be normalized into spaces but requires
character references to newline chars not ot be normalized. The attribute values in the data model represent
the attribute value after normalization.

If a newline occurring in an attribute value in the tree were output as a newline char rather than as character
reference, then the attribute value in the tree created by reparsing the XML would contain a space not a newline,
which would mean that the tree had not been output correctly.

7.1.4 Named Attribute Sets

<!-- Category: top-level-element --->
<xsl:attribute-set
	name = qname
	use-attribute-sets = qnames>
	<!-- Content: xsl:attribute* -->
</xsl:attribute-set>

The xsl:attribute-set element defines a named set of attributes. The name attribute specifies the name of the attribute
set. The value of the name attribute is a Qname, which is expanded as described in [2.4 Qualified Names]. The content of
the xsl:attribute-set element consists of zero or more xsl:attribute elements that specify the attributes in the set.

Attribute sets are used by specifying a use-attribute-sets attribute on xsl:element, xsl:copy (see [7.5 Copying])
or xsl:attribute-set elements. The value of the use-attribute-sets attribute is a whitespace-separated list of names
of attribute sets.

Each name is specified as a QName, which is expanded as described in [2.4 Qualified Names]. Specifying a user-attribute-sets
attribute is equivalent to adding xsl:attribute elements for each of the attributes in each of the named 
attribute sets to the beginning of the content of the element with the use-attribute-sets attribute, in the same order
in which the names of the attribute sets are specified in the use-attribute-sets attribute.

It is an error if use of use-attribute-sets attributes on xsl:attribute-set elements causes an attribute set to directly
or indirectly use itself.

Attribute sets can also be used by specifying an xsl:use-attribute-sets attribute on literal result element.
The value of the xsl:use-attribute-sets attribute is a whitespace-separated list of names of attribute sets.
The xsl:use-attribute-sets attribute has the same effect as the use-attribute-sets attribute on xsl:element
with the additional rule that attributes specified on the literal result element itself are treated as if
they were specified by xsl:attribute elements before any actual xsl:attribute elements but after any
xsl:attribute elements implied by the xsl:use-attribute-sets attribute.

Thus, for a literal result element, attributes from attribute sets named in an xsl:use-attribute-sets attribute
will be added first, in the order listed in the attribute; next, attributes specified on the literal result
element will be added; finally any attributes specified by xsl:attribute elements will be added.

Since adding an attribute to an element replaces any existing attribute of that element with the same name,
this means that attributes specified in attribute sets can be overriden by attributes specified on the literal
result element itself.

The template within each xsl:attribute element in an xsl:attribute-set element is instansiated each time the
attribute set is used; it is instansiated using the same current node and current node list as is used
for instansiating the element bearing the use-attribute-sets or xsl:use-attribute-sets attribute.

HOwever, it is the position in the stylesheet of the xsl:attribute element rather than of the element
bearing the use-attribute-sets or xsl:use-attribute-sets attribute that determines which variable
bindings are visible (see [11 Variables and Parameters]); thus, only variables and parameters
declared by top level xsl:variables and xsl:param elements are visible.

The following example creates a named attribute set title-style and uses it in a template rule.

<xsl:template match="chapter/heading">
	<fo:block quadding="start" xsl:use-attribute-sets="title-style">
		<xsl:apply-templates/>
	</fo:block>
</xsl:template>

<xsl:attribute-set name="title-style">
	<xsl:attribute name="font-size">12pt</xsl:attribute>
	<xsl:attribute name="font-weight">bold</xsl:attribute>
</xsl:attribute-set>

Multiple definitions of an attribute set with the same expanded-name are merged. An attribute from a 
definition that has higher import predecence takes predecence over an attribute from a definition
that has lower import precedence. It is an error if there are two attribute sets that have the same
expanded-name and equal import precedence and that both contain the same attribute, unless there is
a definition of the attribute set with higher import predecence that also contains the attribute.

An XSLT processor may signal the error, if it does not signal the error, it must recover by choosing
from amongst the definitions that specify the attribute that have the highest import precedence
the one that was specified last in the stylesheet. Where the attributes in an attribute set were
specified is relevant only in merging the attributes into the attribute set; it makes no 
difference where the attribute set is used.

7.2 Creating Text

A template can also contain text nodes. Each text node in a template remaining after whitespace
has been stripped as specified in [3.4 Whitespace Stripping] will create a text node with the
same string-value in the result tree. Adjacent text nodes in the result tree are automatically
merged.

Note that text is processed at the tree level. Thus, markup of &lt; in a template will be represented
in the stylesheet tree by a text node that includes the character <. This will create a text node in
the result tree that contains a < character, which will be represented by the markup &lt; (or an
equivalent character reference) when the result tree is externalized as an XML document (unless output
escaping is disabled as described in [16.4 Disabling Output Escaping]).

<!-- Category: instruction -->
<xsl:text
	disable-output-escaping = "yes" | "no">
	<!-- Content: #PCDATA -->
</xsl:text>

Literal data characters may also be wrapped in an xsl:text element. This wrapping may change what
whitespace characters are stripped (see [3.4 Whitespace Stripping]) but does not affect how the
characters are handled by the XSLT processor thereafter.

NOTE: The xml:lang and xml:space attributes are not treated specially by XSLT. In particular:

It is the responsibility of the stylesheet author explicitly to generate any xml:lang or xml:space
attributes that are needed in the result.

specifying an xml:lang or xml:space attribute on an element in the XSLT namespace will not cause
any xml:lang or xml:space attribute to appear in the result.

7.3 Creating Processing Instructions

<!-- Category: instruction -->
<xsl:processing-instruction
	name = { ncname }>
	<!-- Content: template -->
</xsl:processing-instruction>

The xsl:processing-instruction element is instansiated to create a processing instruction node.
The content of the xsl:processing-instruction element is a template for the string-value of the
processing instruction node. The xsl:processing-instruction element has a required name attribute
that specifies the name of hte processing instruction node.

The value of the name attribute is interpreted as an attribute value template.

For example, this:

<xsl:processing-instruction name="xml-stylesheet">href="book.css" type="text/css"</xsl:processing-instruction>

would create the processing instruction:

<?xml-stylesheet href="book.css" type="text/css"?>

It is an error if the string that results from instansiating the name attribute is not both an NCName and
a PITarget. An XSLT processor may signal the error, if it does not signal the error, it must recover by not 
adding the processing instruction to the result tree.

NOTE: This means that xsl:processing-instruction canot be used to output an XML declaration. The xsl:output
element should be used instead (see [16. Output]).

It is an error if instansiating the context of xsl:processing-instruction creates nodes other than text nodes.
An XSLT processor may signal the error, if it does not signal the error, it must recover by ignoring the
offending nodes together with their content.

It is an error if the result of instansiating the content of the xsl:processing-instruction contains the
string ?>. An XSLT processor may signal the error, if it does not signal the error, it must recover
by inserting a space after any occurrence of ? that is followed by a >.

7.4 Creating Comments

<!-- Category: instruction -->
<xsl:comment>
	<!-- Content: template -->
</xsl:comment>

The xsl:comment element is instansiated to create a comment node in the result tree. The content of the
xsl:comment element is a template for the string-value of the comment node.

For example, this:

<xsl:comment>This file is automatically generated. Do not edit</xsl:comment>

would create the comment:

<!-- This file is automatically generated. Do not edit!-->

It is an error if instansiating the content of xsl:comment creates nodes other than text nodes. An XSLT
processor may signal the error; if it does not signal the error, it must recover by ignoring the offending
nodes together with their content.

It is an error if the result of instansiating the content of the xsl:comment contains the string - or ends with -
an XSLT processor may signal the error; if it does not signal the error, it must recover by inserting a space
after any occurence of - that is followed by another - or that ends the comment.

7.5 Copying

<!-- Category: instruction -->
<xsl:copy
	use-attribute-sets = qnames>
	<!-- Content: template -->
</xsl:copy>

The xsl:copy element provides an easy way of copying the current node. Instansiating  the xsl:copy
element creates a copy of the current node. The namespace nodes of the current node are automatically
copied as well, but the attributes and children of the node are not automatically copied.

The content of the xsl:copy element is a template for the attributes and children of the created node;
the content is instansiated only for nodes of types that can have attributes or children (i.e root
nodes and element nodes).

The xsl:copy element may have a use-attribute-sets attribute (see [7.1.4 Named Attribute Sets]). This is used
when copying element nodes.

The root node is treated specially because the root node of the result tree is created implicitly. When the
current node is the root node, xsl:copy will not create a root node, but will just use the content template.

For example, the identity transformation can be written using xsl:copy as follows:

<xsl:template match="@*|node()">
	<xsl:copy>
		<xsl:apply-templates select="@*|node()"/>
	</xsl:copy>
</xsl:template>

When the current node is an attribute, then if it would be an error to use xsl:attribute to create an
attribute with the same name as the current node, then it is also an error to use xsl:copy (see [7.1.3 Creating Attributes
with xsl:attribute]).

The following example shows how xml:lang attributes can be easily copied through from source to result. If a stylesheet
defines the following named template:

<xsl:template name="apply-templates-copy-lang">
	<xsl:for-each select="@xml:lang">
		<xsl:copy/>
	</xsl:for-each>
	<xsl:apply-templates/>
</xsl:template>

Then it can simply do:

<xsl:call-template name="apply-templates-copy-lang"/>

instead of:

<xsl:apply-templates/>

When it wants to copy the xml:lang attribute

7.6 Computing Generated Text

Within a template, the xsl:value-of element can be used to compute generated text, for example by extracting
text from the source tree or by inserting the value of a variable. The xsl:value-of element does this with an
expression that is specified as the value of the select attribute. Expressions can also be used inside attribute
values of literal result elements by enclosing the expression in curly braces ({}).

7.6.1 Generating Text with xsl:value-of

<!-- Category: instruction -->
<xsl:value-of
	select = string-expression
	disable-output-escaping = "yes" | "no" />

The xsl:value-of element is instansiated to create a text node in the result tree. The required select attribute
is an expression; this expression is evaluated and the resulting object is converted to a string as if by a call
to the string function.

The string specifies the string-value of the created text node. If the string is empty, no text node will be created.
The created text node will be merged with any adjacent text nodes.

The xsl:copy-of element can be used to copy a node-set over to the result tree without converting it to a string.
See [11.3 Using Values of Variables and Parameters with xsl:copy-of].

For example, the following creates an HTML paragraph from a person element with given-name and family-name attributes.
The paragraph will contain the value of the given-name attribute of the current node followed by a space and the
value of the family-name attribute of hte current node:

<xsl:template match="person">
	<p>
		<xsl:value-of select="@given-name"/>
		<xsl:text></xsl:text>
		<xsl:value-of select="@family-name"/>
	</p>
</xsl:template>

For another example, the following creates an HTML paragraph from a person element with given-name and family-name
children elements. The paragraph will contain the string-value of the first given-name child element of the current
node followed by a space and the string-value of the first family-name child element of the current node.

<xsl:template match="person">
	<p>
		<xsl:value-of select="given-name"/>
		<xsl:text> </xsl:text>
		<xsl:value-of select="family-name"/>
	</p>
</xsl:template>

The following precedes each procedure element with a paragraph containing the security level of hte procedure.
It assumes that the security level that applies to a procedure is determined by a security attribute on the
procedure element or on an ancestor element of the procedure. It also assumes that if more than one such
element has a security attribute then the security level is determined by the element that is closest to the
procedure.

<xsl:template match="procedure">
	<fo:block>
		<xsl:value-of select="ancestor-or-self::*[@security][1]/@security"/>
	</fo:block>
	<xsl:apply-templates/>
</xsl:template>

7.6.2 Attribute Value Templates

In an attribute value that is interpreted as an attribute value template, such as an attribute of a literal
result element, an expression can be used by surrounding the expression with curly braces ({}). The attribute
value template is instansiated by replacing the expression together with surrounding curly braces by the result
of evaluating the expression and converting the resulting object to a string as if by a call to teh string
function.

Curly braces are not recognized in an attribute value in an XSLT stylesheet unless the attribute is specifically
stated to be one that is interpreted as an attribute value template; in an element syntax summary, the value
of such attributes is surrounded by curly braces.

NOTE: Not all attributes are interpreted as attribute value templates. Attributes whose value is an expression
or pattern, attributes of top-level elements and attributes that refer to named XSLT objects are not interpreted
as attribute value templates. In addition, xmlns attributes are not interpreted as attribute value templates;
it would not be conformant with the XML Namespaces Recommendation to do this.

The following example creates an img result element from a photograph element in the source; the value of the
src attribute of the img element is computed from the value of the image-dir variable and the string-value
of the href child of the photograph element; the value of the width attribute of the img element is computed
from the value of the width attribute of the size child of the photograph element:

<xsl:variable name="image-dir">/images</xsl:variable>

<xsl:template match="photograph">
<img src="{$image-dir}/{href}" width="{size/@width}"/>
</xsl:template>

With this source:

<photograph>
	<href>headquarters.jpg</href>
	<size width="300"/>
</photograph>

the result would be:

<img src="/images/headquarters.jpg" width="300"/>

When an attribute value template is instansiated, a double left or right curly brace outside an expression
will be replaced by a single curly brace. It is an error if a right curly brace occurs in an attribute value
template outside an expression without being followed by a second right curly brace.

A right curly brace inside a Literal in an expression is not recognized as terminating the expression.

Curly braces are not recognized recursively inside expressions. For example:

<a href="#{id({@ref})/title}">

is not allowed, instead, use simply:

<a href="#{id(@ref)/title}">

7.7 Numbering

<!-- Category: instruction -->
<xsl:number
	level = "single" | "multiple" | "any"
	count = pattern
	from = pattern
	value = number-expression
	format = { string }
	lang = { nmtoken }
	letter-value = { "alphabetic" | "traditional" }
	grouping-separator = { char }
	grouping-size = { number } />

The xsl:number element is used to insert a formatted number into the result tree. THe number to be inserted may be specified
by an expression. The value attribute contains an expression. The expression is evaluated and the resulting object is
converted to a number as if by a call to the number function. The number is rounded to an integer and then converted
to a string using the attributes specified in [7.7.1 Number to String Conversion Attributes].

In this context, the value of each of these attributes is interpreted as an attribute value template. After conversion,
the resulting string is inserted in teh result tree. For example, the following example numbers a sorted list:

<xsl:template match="items">
	<xsl:for-each select="item">
		<xsl:sort select="."/>
		<p>
			<xsl:number value="position()" format="1.  "/>
			<xsl:value-of select="."/>
		</p>
	</xsl:for-each>
</xsl:template>

If no value attribute is specified, then the xsl:number element inserts a number based on the position of the current
node in the source tree. THe following attributes control how the current node is to be numbered:

The level attribute specifies what levels of the source tree should be considered; it has the values single, multiple or
any. The default is single.

The count attribute is a pattern that specifies what nodes should be counted at those levels. If count attribute is not
specified, then it defaults to the pattern that matches any node with the same node type as the current node and, if the
current node has an expanded-name, with the same expanded-name as the current node.

The from attribute is a pattern that specifies where counting starts.

In addition, the attributes specified in [7.7.1 Number to String Conversion Attributes] are used for number to string
conversion, as in the case when the value attribute is specified.

The xsl:number element first constructs a list of positive integers using the level, count and from attributes:

When level="single", it goes up to the first node in the ancestor-or-self axis that matches the count pattern, and
constructs a list of length one containing one plus the number of preceding siblings of that ancestor that match
the count pattern.

If there is no such ancestor, it constructs an empty list. If the from attribute is specified, then the only ancestors
that are searched are those that are descendants of the nearest ancestor that matches the from pattern. Preceding
siblings has the same meaning here as with the preceding-sibling axis.

When level="multiple", it constructs a list of all ancestors of the current node in document order followed by the
element itself; it then selects from the list those nodes that match the count pattern; it then maps each node
in the list to one plus the number of preceding siblings of that node that match the count pattern.

If the from attribute is specified, then the only ancestors that are searched are those that are descendants of the
nearest ancestor that matches the from pattern. Preceding siblings has the same meaning here as with the
preceding-siblings axis.

When level="any", it constructs a list of length one containing the number of nodes that match the count pattern and
belong to the set containing the current node and all nodes at any level of the document that are before the current
node in document order, excluding any namespace and attribute nodes (in other words the union of the members of the
preceding and ancestor-or-self axes). If the from attribute is specified, then only nodes after the first node
before the current node that match the from pattern are considered.

The list of numbers is then converted into a string using the attributes specified in [7.7.1 Number to String Conversion Attributes].
In this context, the value of each of these attributes is interpreted as an attribute value template. After conversion,
the resulting string is inserted in the result tree.

The following would number the items in an ordered list:

<xsl:template match="ol/item">
	<fo:block>
		<xsl:number/><xsl:text>. </xsl:text><xsl:apply-templates/>
	</fo:block>
</xsl:template>

The following two rules would number title elements. This is intended for a document that contains a sequence of chapters
followed by a sequence of appendices, where both chapters and appendices contain sections, which in turn contain subsections.

Chapters are numbered 1, 2, 3; appendices are numbered A, B, C; sections in chapters are numbered 1.1, 1.2, 1.3; sections
in appendices are numbered A.1,A.2,A.3

<xsl:template match="title">
	<fo:block>
		<xsl:number level="multiple"
					count="chapter|section|subsection"
					format="1.1 "/>
		<xsl:apply-templates/>
	</fo:block>
</xsl:template>

<xsl:template match="appendix//title" priority="1">
	<fo:block>
		<xsl:number level="multiple"
					count="appendix|section|subsection"
					format="A.1 "/>
		<xsl:apply-templates/>
	</fo:block>
</xsl:template>

The following example numbers notes sequentially within a chapter:

<xsl:template match="note">
	<fo:block>
		<xsl:number level="any" from="chapter" format="(1) "/>
		<xsl:apply-templates/>
	</fo:block>
</xsl:template>

the following example would number H4 elements in HTML with a three-part label:

<xsl:template match="H4">
	<fo:block>
		<xsl:number level="any" from="H1" count="H2"/>
		<xsl:text>.</xsl:text>
		<xsl:number level="any" from="H2" count="H3"/>
		<xsl:text>.</xsl:text>
		<xsl:number level="any" from="H3" count="H4"/>
		<xsl:text> </xsl:text>
		<xsl:apply-templates/>
	</fo:block>
</xsl:template>

7.7.1 Number to String Conversion Attributes

the following attributes are used to control conversion of a list of numbers into a string. The numbers
are integers greater than 0. The attributes are all optional.

The main attribute is format. The default value for the format attribute is 1. The format attribute is split
into a sequence of tokens where each token is a maximal sequence of alphanumeric chars or a maximal sequence
of non-alphanumeric chars. Alphanumeric means any character that has a Unicode category of Nd, Nl, No, Lu, Ll, Lt, Lm
or Lo. The alphanumeric tokens (format tokens) specify the format to be used for each number in the list.

If the first token is a non-alphanumeric token, then the constructed string will start with that token, if the last
token is a non-alphanumeric token, then the constructed string will end with that token. Non-alphanumeric tokens
that occur between two format tokens are separator tokens that are used to join numbers in the list.

The nth format token will be used to format the nth number in the list. If there are more numbers than format tokens,
then the last format token will be used to format remaining numbers. If there are no format tokens, then a format
token of 1 is used to format all numbers. The format token specifies the string to be used to represent the number
1.

Each number after the first will be separated from the preceding number by the separator token preceding the format
token used to format that number, or, if there are no separator tokens, then by . (a period char).

Format tokens are a superset of hte allowed values for the type attribute for the OL element in HTML 4.0 and
are interpreted as follows:

Any token where the last character has a decimal digit value of 1 (as specified in the Unicode character property
database), and the Unicode value of preceding characters is one less than the Unicode value of the last character
generates a decimal representation of the number where each number is at least as long as the format token.

Thus, a format token 1 generates the sequence 1 2 ... 10 11 12 ..., and a format token 01 generates the sequence
01 02 ... 09 10 11 12 ... 99 100 101.

A format token A generates the sequence A B C ... Z AA AB AC ...

A format token a generates the sequence a b c ... z aa ab ac ...

A format token i generates the sequence i ii iii iv v vi vii viii ix x ...

A format token I generates the sequence I II III IV V VI VII VIII IX X ...

Any other format token indicates a number sequence that starts with that token. If an implementation does not support
a numbering sequence that starts with that token, it must use a format token of 1.

When numbering with an alphabetic sequence, the lang attribute specifies which language's alphabet is to be used;
it has the same range of values as xml:lang [XML]; if no lang value is specified, the language should be determined
from the system environment. Implementers should document for which languages they support numbering.

Note: implementers should not make any assumptions about how numbering works in particular languages and should
properly research the languages that they wish to support. THe number conventions of many languages are
very different from English.

The letter-value attribute disambiguates between numbering sequences that use letters. In many languages
there are two commonly used number sequences that use letters. One number sequence assigns numeric values
to letters in alphabetic sequence, and other assigns numeric values to each letter in some other manner
traditional in that language.

In English, these would correspond to the numbering sequences specified by the format tokens a and i.
In some languages, the first member of each sequence is the same, and so the format token alone would
be ambigious.

A value of alphabetic specifies the alphabetic sequence; a value of traditional specifies the other
sequence. If the letter-value attribute is not specified, then it is implementation-dependent
how any amibguity is resolved.

NOTE: It is possible for two conforming XSLT processors not to convert a number to exactly the same
string. Some XSLT processors may not support some languages. Furthermore, there may be variations
possible in the way conversions are performed for any particular language that are not specifable
by the attributes on xsl:number. Future versions of XSLT may provide additional attributes to provide
control over these variations. Implementations may also use implementation-specific namespaced
attributes on xsl:number for this.

The grouping-separator attribute gives the separator used as a grouping (e.g, thousands) separator in decimal
numbering sequences, and the optional grouping-size specifies the size (normally 3) of the grouping.
For example, grouping-separator="," and grouping-size="3" would produce numbers of the form
1,000,000. If only one of the grouping-separator and grouping-size attributes is specified, then it is ignored.

Here are some examples of conversion specifications:

format="&#x30A2;" specifies Katakana numbering

format="&#x30A4;" specifies Katakana numbering in the "iroha" order

format="&#x0E51;" specifies numbering with Thai digits

format="&#x05D0;" letter-value="traditional" specifies "traditional" Hebrew numbering

format="&#x10D0;" letter-value="traditional" specifies Georgian numbering

format="&#x03B1;" letter-value="traditional" specifies "classical" Greek numbering

format="&#x0430;" letter-value="traditional" specifies Old Slavic numbering

8 Repetition

<!-- Category: instruction -->
<xsl:for-each
	select = node-set-expression>
	<!-- Content: (xsl:sort*, template) -->
</xsl:for-each>

When the result has a known regular structure, it is useful to be able to specify directly the template
for selected nodes. The xsl:for-each instruction contains a template, which is instansiated for each node
selected by the expression specified by the select attribute. The select attribute is required.


The expression must evaluate to a node-set. The template is instansiated with the selected node as the
current node, and with a list of all of the selected nodes as the current node list. The nodes are
processed in document order, unless a sorting specification is present. (see [10 Sorting]).

For example, given an XML document with this structure:

<customers>
	<customer>
		<name>...</name>
		<order>...</order>
		<order>...</order>
	</customer>
	<customer>
		<name>...</name>
		<order>...</order>
		<order>...</order>
	</customer>
</customers>

The following would create an HTML document containing a table with a row for each customer element

<xsl:template match="/">
	<html>
		<head>
			<title>Customers</title>
		</head>
		<body>
			<table>
				<tbody>
					<xsl:for-each select="customers/customer">
						<tr>
							<th>
								<xsl:apply-templates select="name"/>
							</th>
							<xsl:for-each select="order">
								<td>
									<xsl:apply-templates/>
								</td>
							</xsl:for-each>
						</tr>
					</xsl:for-each>
				</tbody>
			</table>
		</body>
	</html>
</xsl:template>

9 Conditional Processing

There are two instructions in XSLT that support conditional processing in a template: xsl:if and xsl:choose.
The xsl:if instruction provides simple if-then conditionality, the xsl:choose instruction supports selection
of one choice when there are several possibilities.

9.1 Conditional Processing with xsl:if

<!-- Category: instruction -->
<xsl:if
	test = boolean-expression>
	<!-- Content: template -->
</xsl:if>

The xsl:if element has a test attribute, which specifies an expression. The content is a template. The expression
is evaluated and the resulting object is converted to a boolean as if by a call to the boolean function.

If the result is true, then the content template is instansiated; otherwise, nothing is created. In the following
example, the names in a group of names are formatted as a comma separated list:

<xsl:template match="namelist/name">
	<xsl:apply-templates/>
	<xsl:if test="not (position()=last())">, </xsl:if>
</xsl:template>

The following colors every other table row yellow:

<xsl:template match="item">
	<tr>
		<xsl:if test="position() mod 2 = 0">
			<xsl:attribute name="bgcolor">yellow</xsl:attribute>
		</xsl:if>
		<xsl:apply-templates/>
	</tr>
</xsl:template>

9.2 Conditional Processing with xsl:choose

<!-- Category: instruction -->
<xsl:choose>
	<!-- Content: (xsl:when+, xsl:otherwise?) -->
</xsl:choose>

<xsl:when
	test = boolean-expression>
	<!-- Content: template -->
</xsl:when>

<xsl:otherwise>
	<!-- Content: template -->
</xsl:otherwise>

The xsl:choose element selects one among a number of possible alternatives. It consists of a sequence of xsl:when
elements followed by an optional xsl:otherwise element.

Each xsl:when element has a single attribute, test, which specifies an expression. The content of the xsl:when
and xsl:otherwise elements is a template. When an xsl:choose element is processed, each of the xsl:when elements
is tested in turn, by evaluating the expression and converting the resulting object to a boolean as if by a call
to the boolean function.

The content of the first, and only the first, xsl:when element whose test is true is instansiated. if no xsl:when
is true, the content of the xsl:otherwise element is instansiated. If no xsl:when element is true and no xsl:otherwise
element is present, nothing is created.

The following example enumerates items in an ordered list using arabic numerals, letters, or roman numerals depending
on the depth to which the ordered lists are nested:

<xsl:template match="orderlist/listitem">
	<fo:list-item indent-start='2pi'>
		<fo:list-item-label>
			<xsl:variable name="level"
						  select="count (ancestor::orderedlist) mod 3"7>
			<xsl:choose>
				<xsl:when test='$level=1'>
					<xsl:number format="i"/>
				</xsl:when>
				<xsl:when test='$level=2'>
					<xsl:number format="a"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:number format="1"/>
				</xsl:otherwise>
			</xsl:choose>
			<xsl:text>. </xsl:text>
		</fo:list-item-label>
		<fo:list-item-body>
			<xsl:apply-templates/>
		</fo:list-item-body>
	</fo:list-item>
</xsl:template>

10 Sorting

<xsl:sort
	select = string-expression
	lang = { nmtoken }
	data-type = { "text" | "number" | qname-but-not-ncname }
	order = { "ascending" | "descending" }
	case-order = { "upper-first" | "lower-first" } />

Sorting is specified by adding xsl:sort elements as children of an xsl:apply-templates or xsl:for-each element.
The first xsl:sort child specifies the primary sort key, the second xsl:sort child specifies the secondary
sort key and so on.

When an xsl:apply-templates or xsl:for-each element has one or more xsl:sort children, then instead of processing
the selected nodes in document order, it sorts the nodes according to the specified sort keys and then processes
them in sorted order.

xsl:sort has a select attribute whose value is an expression. For each node to be processed, the expression is
evaluated with that node as the current node and with the complete list of nodes being processed in unsorted
order as the current node list.

The resulting object is converted to a string as if by a call to the string function; this string is used as
the sort key for that node. The default value of the select attribute is ., which will cause the string-value
of the current node to be used as the sort key.

This string serves as a sort key for the node. The following optional attributes on xsl:sort control how the
list of sort keys are sorted; the values of all of these attributes are interpreted as attribute value templates.

order specifies whether the strings should be sorted in ascending or descending order, ascending specifies ascending
order, descending specifies descending order. The default is ascending

lang specifies the language of the sort keys, it has the same range of values as xml:lang [XML], if no lang value is
specified, the language should be determined from the system environment 

data-type specifies the data type of the strings; the following values are allowed:

text specifies that the sort keys should be sorted lexicographically in the culturally correct manner for the language
specified by lang.

number specifies that the sort keys should be converted to numbers and then sorted according to the numeric value;
the sort key is converted to a number as if by a call to the number function; the lang attribute is ignored.

a QName with a prefix is expanded into an expanded-name as described in [2.4 Qualified Names]; the expanded-name
identifies the data-type; the behavior in this case is not specified by this document.

The default value is text. 

NOTE: The XSL Working Group plans that future versions of XSLT will leverage XML Schemas to define further values
for this attribute.

case-order has the value upper-first or lower-first; this applies when data-type="text", and specifies that upper-case
letters should sort before lower-case letters or vice-versa respectively. For example, if lang="en", then A a B b are
sorted with case-order="upper-first" and a A b B are sorted with case-order="lower-first". The default value is language
dependent.

NOTE: It is possible for two conforming XSLT processors not to sort exactly the same. Some XSLT processors may not support
some languages. Furthermore, there may be variations possible in teh sorting of any particular language that are not specified
by teh attributes on xsl:sort, for example, whether Hiragana or Katakana is sorted first in Japanese.

Further versions of XSLT may provide additional attributes to provide control over these variations. Implementations may also
use implementation-specific namespaced attributes on xsl:sort for this.

NOTE: It is recommended that implementers consult [UNICODE TR10] for information on internationalized sorting.

The sort must be stable: in the sorted list of nodes, any sub list that has sort keys that all compare equal
must be in document order.

For example, suppose an employee database has the form:

<employee>
	<employee>
		<name>
			<given>James</given>
			<family>Clark</family>
		</name>
		...
	</employee>
</employee>

Then a list of employees sorted by name could be generated using:

<xsl:template match="employees">
	<ul>
		<xsl:apply-templates select="employee">
			<xsl:sort select="name/family"/>
			<xsl:sort select="name/given"/>
		</xsl:apply-templates>
	</ul>
</xsl:template>

<xsl:template match="employee">
	<li>
		<xsl:value-of select="name/given"/>
		<xsl:text> </xsl:text>
		<xsl:value-of select="name/family"/>
	</li>
</xsl:template>

11 Variables and Parameters

<!-- Category: top-level-element -->
<!-- Category: instruction -->
<xsl:variable
	name = qname
	select = expression>
	<!-- Content: template -->
</xsl:variable>

<!-- Category: top-level-element -->
<xsl:param
	name = qname
	select = expression>
	<!-- Content: template -->
</xsl:param>

A variable is a name that may be bound to a value. The value to which a variable is bound (the value of the variable)
can be an object of any of the types that can be returned by expressions. There are two elements that can be used to
bind variables: xsl:variable and xsl:param.

The difference is that the value specified on the xsl:param variable is only a default value for the binding; when
the template or stylesheet within which the xsl:param element occurs is invoked, parameters may be passed that are
used in place of the default values.

Both the xsl:variable and xsl:param have a required name attribute, which specifies the names of the variable.
The value of the name attribute is a QName, which is expanded as described in [2.4 Qualified Names].

For any use of these variable-binding elements, there is a region of teh stylesheet within which the binding is
visible; within this region, any binding of the variable that was visible on the variable-binding element itself
is hidden. Thus, only the innermost binding of a variable is visible. The set of variable bindings in scope for
an expression consists of those bindings that are visible at the point in the stylesheet where the expression
occurs.

11.1 Result Tree Fragments

Variables introduce an additional data-type into the expression language. This additional data type is called result
tree fragment. A variable may be bound to a result tree fragment instead of one of the four basic XPath data-types
(string, number, boolean, node-set). A result tree fragment represents a fragment of the result tree.

A result tree fragment is treated equivalently to a node-set that contains just a single root node. However, the 
operations permitted on a result tree fragment are a subset of those permitted on a node-set. An operation is permitted
on a result tree fragment only if the that operation would be permitted on a string (the operation on the string may
involve first converting the string to a number or boolean).

In particular, it is not permitted to use the /, //, and [] operators on result tree fragments. When a permitted
operation is performed on a result tree fragment, it is performed exactly as it would be on the equivalent
node-set.

When a result tree fragment is copied into the result tree (see [11.3 Using Values of Variables and Parameters with xsl:copy-of]),
then all the nodes that are children of the root node in teh equivalent node-set are added in sequence to the result
tree.

Expressions can only return values of type result tree fragment by referencing variables of type result tree fragment
or calling extension functions that return a result tree fragment or getting a system property whose value is a 
result tree fragment.

11.2 Values of Variables and Parameters

A variable-binding element can specify the value of the variable in three alternative ways:

If the variable-binding element has a select attribute, then the value of the attribute must be an expression
and the value of the variable is the object that results from evaluating the expression. In this case, the content
must be empty.

If the variable-binding element does not have a select attribute and has non-empty content (i.e the variable-binding
element has one or more children nodes), then the content of the variable-binding element specifies the value.
The content of the variable-binding element is a template, which is instansiated to give the value of the variable.

The value is a result tree fragment equivalent to a node-set containing just a single root node having as children
the sequence of nodes produced by instansiating the template. The base URI of the nodes in the result tree fragment
is the base URI of the variable-binding element.

It is an error if a member of the sequence of nodes created by instansiating the template is an attribute node or
a namespace node, since a root node cannot have an attribute node or a namespace node as a child. 
An XSLT processor may signal the error, if it does not signal the error, it must recover by not adding the
attribute node or namespace node.

If the variable-binding element has empty content and does not have a select attribute, then the value of the
variable is an empty string. Thus

<xsl:variable name="x"/>

is equivalent to:

<xsl:variable name="x" select="''"/>

NOTE: When a variable is used to select nodes by position, be careful not to do:

<xsl:variable name="n">2</xsl:variable>
...
<xsl:value-of select="item[$n]"/>

This will output the value of the first item element, because the variable n will be bound to
a result tree fragment, not a number. instead, do either:

<xsl:variable name="n" select="2"/>
...
<xsl:value-of select="item[$n]"/>

or

<xsl:variable name="n">2</xsl:varaible>
...
<xsl:value-of select="item[position()=$n]"/>

NOTE: One convenient way to specify the empty node-set as the default value of a parameter is:

<xsl:param name="x" select="/.."/>

11.3 Using Values of Variables and Parameters with xsl:copy-of

<!-- Category: instruction -->
<xsl:copy-of
	select = expression />

The xsl:copy-of element can be used to insert a result tree fragment into the result tree, without first
converting it to a string as xsl:value-of does (see [7.6.1 Generating Text with xsl:value-of]).
The required select attribute contains an expression. When the result of evaluating the expression is a
result tree fragment, the complete fragment is copied into the result tree.

When the result is a node-set, all the nodes in the set are copied in document order into the result
tree; copying an element node copies the attribute nodes, namespace nodes and children of the element
node as well as the element node itself; a root node is copied by copying its children.

When the result is neither a node-set nor a result tree fragment, the result is converted to a string
and then inserted into the result tree, as with xsl:value-of.

11.4 Top-level Variables and Parameters

Both xsl:variable and xsl:param are allowed as top-level parameters. A top-level variable-binding element
declares a global variable that is visible everywhere. A top-level xsl:param element declares a parameter
to the stylesheet; XSLT does not define the mechanism by which parameters are passed to the stylesheet.

It is an error if a stylesheet contains more than one binding of a top-level variable with the same name
and same import precedence. At the top-level, the expression or template specifying the variable value is
evaluted with the same context as that used to process the root node of the source document: the current node
is the root node of the source document and the current node list is a list containing just the root node
of the source document.

If the template or expression specifying the value of a global variable x references a global variable y,
then the value for y must be computed before the value of x. It is an error if it is impossible to do this
for all global variable definitions; in other words, it is an error if the definitions are circular.

This example declares a global variable para-font-size, which it references in an attribute value template.

<xsl:variable name="para-font-size">12pt</xsl:variable>

<xsl:template match="para">
	<fo:block font-size="{$para-font-size}">
		<xsl:apply-templates/>
	</fo:block>
</xsl:template>

11.5 Variables and Parameters within Templates

As well as being allowed at the top-level, both xsl:variable and xsl:param are also allowed in templates.
xsl:variables is allowed anywhere within a template that an instruction is allowed. In this case, the binding
is visible for all following siblings and their descendants. Note that the binding is not visible for the
xsl:variable element itself.

xsl:param is allowed as a child at the beginning of an xsl:template element. In this context, the binding is
visible for all the following siblings and their descendants. Note that hte binding is not visible
for the xsl:param element itself.

A binding shadows another binding if the binding occurs at a point where the other binding is visible,
and the bindings have the same name. It is an error if a binding established by an xsl:variable or
xsl:param element within a template shadows another binding established by an xsl:variable or xsl:param
top-level element. thus the following is an error:

<xsl:template name="foo">
<xsl:param name="x" select="1"/>
<xsl:variable name="x" select="2"/>
</xsl:template>

However, the following is allowed:

<xsl:param name="x" select="1"/>
<xsl:template name="foo">
<xsl:variable name="x" select="2"/>
</xsl:template>

NOTE: the nearest equivalent in Java to an xsl:variable element in a template is a final local variable
declaration within an initializer. For example:

<xsl:variable name="x" select="'value'"/>

has similar semantics to

final Object x = "value";

XSLT does not provide an equivalent to the Java assignment operator:

x = "value";

Because this would make it harder to create an implementation that processes a document other than 
a batch-like way, starting at the beginning and continuing through to the end.

11.6 Passing Parameters to Templates

<xsl:with-param
	name = qname
	select = expression>
	<!-- Content: template -->
</xsl:with-param>

Parameters are passed to templates using the xsl:with-param element. The required name attribute specifies
the name of the parameter (the variable the value of whose binding is to be replaced). The value of the name
attribute is a QName, which is expanded as described in [2.4 Qualified Names] xsl:with-params is allowed 
within both xsl:call-template and xsl:apply-templates.

The value of the parameter is specified in the same way as for xsl:variable and xsl:param. The current node
and current node list is used for computing the value specified by xsl:with-param element is the same as that
used for the xsl:apply-templates or xsl:call-templates element within which it occurs. It is not an error to
pass a parameter x to a template that does not have an xsl:param element for x; the param is simply ignored.

This example defines a named template for a numbered-block with an argument to control the format of the number.

<xsl:template name="numbered-block">
	<xsl:param name="format">1. </xsl:param>
	<fo:block>
		<xsl:number format="{$format}"/>
		<xsl:apply-templates/>
	</fo:block>
</xsl:template>

<xsl:template match="ol//ol//li">
	<xsl:call-template name="numbered-block">
		<xsl:with-param name="format">a. </xsl:with-param>
	</xsl:call-template>
</xsl:template>

12 Additional Functions:

This section describes XSLT-specific additions to the core XPath function library. Some of tehse additional
functions also make use of information specified by top-level elements in the stylesheet; this section also
describes these elements.

12.1 Multiple Source Documents

Function: node-set document(object, node-set?)

The document function allows access to XML documents other than the main source document.

When the document function has exactly one argument and the argument is a node-set, then the result is the union,
for each node in teh argument node-set, of the result of calling the document function with the first argument
being the string-value of that node.

The second argument being a node-set with the node as its only member. When the document function has two arguments
and the first argument is a node-set; then the result is the union, for each node in the argument node-set, of the
result of calling the document function with the first argument being the string-value of the node, and with the
second argument being the second argument passed to the document function.

When the first argument to the document function is not a node-set, the first argument is converted to a string
as if by a call to the string function. This string is treated as a URI reference; the resource identified by
the URI is retrieved. The data resulting from the retrieval action is parsed as an XML document and a tree is
constructed in accordance with the data model (see [3 Data Model]).

If there is an error retrieving the resource, then the XSLT processor may signal an error, if it does not signal
an error, it must recover by returning an empty node-set. One possible kind of retrieval error is that the XSLT
processor does not support the URI scheme used by the URI. An XSLT processor is not required to support any
particular URI schemes. The documentation for an XSLT processor should specify which URI schemes the XSLT
processor supports.

If the URI reference does not contain a fragment identifier, then a node-set containing just the root node
of the document is returned. If the URI reference does contain a fragment identifier, this function returns
a node-set containing the nodes in the tree identified by the fragment identifier of the URI reference.

The semantics of the fragment identifier is dependent on the media type of the result of retrieving the URI.
if there is an error in processing the fragment identifier, teh XSLT processor may signal the error; if it
does not signal the error, it msut recover by returning an empty node-set. Possible errors include:

The fragment identifier identifies something that cannot be represented by an XSLT node-set (such as a range of 
characters within a text node).

The XSLT processor does not support fragment identifiers for the media-type of the retreival result. An XSLT processor
is not required to support any particular media types. The documentation for an XSLT processor should specify
for which media types the XSLT processor supports fragment identifiers.

The data resulting from the retrieval action is parsed as an XML document regardless of the media type of the
retrieval result; if the top-level media type is text, then it is parsed in the same way as if the media
type were text/xml; otherwise, it is parsed in the same way as if the media type were application/xml.

NOTE: Since there is no top level xml media type, data with a media type other than text/xml or application/xml
may in fact be XML.

The URI reference may be relative. The base URI (see [3.2 Base URI]) of the node in teh second argument node-set
that is first in document order is used as the base URI for resolving the relative URI into an absolute URI.
If the second argument is omitted, then it defaults to the node in the stylesheet that contains the expression
that includes the call to the document function.

Note that a zero-length URI reference is a reference to the document relative to which the URI reference is
being resolved; thus document("") refers to the root node of the stylesheet; the tree representation of the
stylesheet is exactly the same as if the XML document containing the stylesheet was the initial source
document.

Two documents are treated as the same document if they are identified by teh same URI. The URI used for
the comparison is the absolute URI into which any relative URI was resolved and does not include any
fragment identifier. One root node is treated as the same node as another root node if the two nodes are
from the same document. Thus, the following expression will always be true:

generate-id(document("foo.xml"))=generate-id(document("foo.xml"))

The document function gives rise to the possibility that a node-set may contain nodes from more than one
document. With such a node-set, the relative document order of two nodes in the same document is the normal
document order defined by XPath [XPath].

The relative document order of two nodes in different documents is determined by an implementation-dependent
ordering of the documents containing the two nodes. There are no constraints on how the implementation orders
documents other than that it must do so consistently. An implementation must always use the same order
for the same set of documents.

12.2 Keys

Keys provide a way to work with documents that contain an implicit cross-reference structure. The ID, IDREF
and IDREFS attribute types in XML provide a mechanism to allow XML documents ot make their cross-reference
explicit. XSLT supports this through the XPath id function. However, this mechanism has a number of limitations:

ID attributes must be declared as such in the DTD. If an ID attribute is declared as an ID attribute only in
the external DTD subset, then it will be recognized as an ID attribute only if the XML processor reads the
external DTD subset. However, XML does not require XML processors to read the external DTD, and they may 
well choose to not do so, especially if the document is declared standalone="yes".

A docuemnt can contain only a single set of unique IDs. There cannot be seperate independent sets of unique IDs.

The ID of an element can only be specified in an attribute; it cannot be specified by the content of the element,
or by a child element.

An ID is constrained to be an XML name. For example, it cannot contain spaces.

An element can have at most one ID.

At most one element can have a particular ID.

Because of these limitations XML documents sometimes can contain a cross-reference structure that is
not explicitly declared by ID/IDREF/IDREFS attributes.

A key is a triple containing:

1. the node which has the key

2. the name of the key (an expanded-name)

3. The value of the key (a string)

A stylesheet declares a set of keys for each document using the xsl:key element. When this set of
keys contains a member with node x, name y and value z, we say that node x has a key with name y 
and value z.

Thus, a key is kind of a generalized ID, which is not subject to the same limitations as an XML ID:

Keys are declared in the stylesheet using xsl:key elements.

Ak ey has a name as well as a value; each key name may be thought of as distinguishing a separate,
independent space of identifiers.

The value of a named key for an element may be specified in any convenient place; for example, in an attribute,
in a child element or in content. An XPath expression is used to specify where to find the value
for a particular named key.

The value of a key can be an arbitrary string; it is not constrained to be a name.

There can be multiple keys in a document with the same node, same key name, but different key values.

There can be multiple keys in a document with the same key name, same key value but different nodes.

<!-- Category: top-level-element -->
<xsl:key
	name = qname
	match = pattern
	use = expression />

The xsl:key element is used to declare keys. The name attribute specifies the name of the key. The value of
the name attribute is a QName, whic his expanded as described in [2.4 Qualified Names]. The match attribute
is a Pattern, an xsl:key element gives information about the keys of any node that matches the pattern
specified in the match attribute.

The use attribute is an expression specifying the values of the key; the expression is evaluated once for
each node that matches the pattern. If the result is a node-set, then for each node in teh node-set,
the node that matches the pattern has a key of the specified name whose value is the string-value
of the node in the node-set, otherwise, the result is converted to a string, and the node that matches
the pattern has a key of the specified name with value equal to that string.

Thus, a node x has a key with name y and value z if and only if there is an xsl:key element such that:

x matches the pattern specified in teh match attribute of the xsl:key element,

the value of the name attribute of the xsl:key element is equal to y, and

when the expression specified in the use attribute of the xsl:key element is evaluated with x as
the current node and with a node list containing just x as the current node list resulting in
an object u, then either z is equal to the result of converting u to a string as if by a call to
the string function, or u is a node-set and z is equal to the string-value of one or more of the nodes
in u.

Note also, that there may be more than one xsl:key element that matches a given node, all of the matching
xsl:key elements are used, even if they do not have the same import precedence.

It is an error for the value of either the use attribute or the match attribute to contain a 
VariableReference.

Function: node-set key(string, object)

The key function does for keys what the id function does for IDs. The first argument specifies the name
of the key. The value of the argument must be a QName, which is expanded as described in [2.4 Qualified Names].
When the second argument to the key function is of type node-set, then the result is the union of the
result of applying the key function to the string value of each of the nodes in teh argument node-set.

When the second argument to key is of any other type, the argument is converted to a string as if by a call
to the string function; it returns a node-set containing the nodes in the same document as the context node
that have a value for the named key equal to this string.

For example, given a declaration:

<xsl:key name="idkey" match="div" use="@id"/>

an expression key("idkey",@ref) will return the same node-set as id(@ref), assuming that only the ID
attribute declared in teh XML source document is:

<!ATTLIST div id ID #IMPLIED>

and that the ref attribute of the current node contains no whitespace.

Suppose a document describing a function library uses a prototype element to define functions

<prototype name="key" return-type="node-set">
<arg type="string"/>
<arg type="object"/>
</prototype>

And a function element to refer to function names

<function>key</function>

Then the stylesheet could generate hyperlinks between the references and defenitions as follows:

<xsl:key name="func" match="prototype" use="@name"/>

<xsl:template match="function">
<b>
	<a href="#{generate-id(key('func',.))}">
		<xsl:apply-templates/>
	</a>
</b>
</xsl:template>

<xsl:template match="prototype">
<p><a name="{generate-id()}">
<b>Function: </b>
...
</a></p>
</xsl:template>

The key can be used to retrieve ak ey from a document other than the document containing the
context node. For xample, suppose a document contains bibliographic references in form of
<bibref>XSLT</bibref>, and tehre is a separate XML document bib.xml containing a bibliographic DB with entires
in the form:

<entry name="XSLT">...</entry>

Then the stylesheet could use the following to transform the bibref elements:

<xsl:key name="bib" match="entry" user="@name"/>

<xsl:template match="bibref">
	<xsl:variable name="name" select="."/>
	<xsl:for-each select="document('bib.xml')">
		<xsl:apply-templates select="key('bib',$name)"/>
	</xsl:for-each>
</xsl:template>

12.3 Number Formatting:

Function: string format-number(number, string, string?)

The format-number function converts its first argument to a string using the format pattern
string specified by the second argument and the decimal-format named by the third argument,
or the default decimal-format, if there is no third argument.

The format pattern string is the syntax specified by the JDK 1.1 DecimalFormat class. The
format pattern string is in a localized notation: the decimal-format determines what characters
have a special meaning in the pattern (with the exception of the quote character, which is not
localized).

The format pattern must not contain the currency sign (#x00A4); support for this feature was added
after the initial release of JDK 1.1. The decimal-format name must be a QName, which is expanded as
described in [2.4 Qualified Names]. It is an error if the stylesheet does not contain a declaration
of the decimal-format with the specified expanded-name.

NOTE: Implementations are not required to use the JDK 1.1 implementation, nor are implementations
required to be implemented in Java.

NOTE: Stylesheets can use other facilities in XPath to control rounding.

<!-- Category: top-level-element -->
<xsl:decimal-format
	name = qname
	decimal-separator = char
	grouping-separator = char
	infinity = string
	minus-sign = char
	NaN = string
	percent = char
	per-mille = char
	zero-digit = char
	digit = char
	pattern-separator = char />

The xsl:decimal-format element declares a decimal-format, which controls the interpretation of a format
pattern used by the format-number function. If there is a name attribute, then the element declares a 
named decimal-format; otherwise, it declares the default decimal-format.

The value of the name attribute is a QName, which is expanded as described in [2.4 Qualified Names].
It is an error to declare either the default decimal-format or a decimal-format with a given name more
than once (even with different import precedence), unless it is declared every time with the same value
for all attributes (taking into account any default values).

The other attributes on xsl:decimal-format correspond to the methods on the JDK 1.1 DecimalFormatSymbols
class. For each get/set method pair there is an attribute defined for the xsl:decimal-format element.

The following attributes both control the interpretation of characters in the format pattern and
specify characters that may appear in the result of formatting the number:

decimal-separator specifies teh character used for the decimal sign; the default value is the period char (.)

grouping-separator specifies the character used as a grouping (e.g. thousands) separator, the default is the comma 
character (,)

percent specifies the character used as a percent sign; the default value is the percent char (%)

per-mille specifies the char used as a per mille sign; the default value is the Unicode per-mille
character (#x2030)

zero-digit specifies the character used as the digit zero; the default value is the digit zero (0)

THe following attributes control the interpretation of characters in the format pattern:

digit specifies the character used for a digit in the format pattern; the default value is the number
sign char (#)

pattern-separator specifies the character used to separate positive and negative sub patterns in a 
pattern; the default value is the semi-colon character (;)

The following attributes specify characters or strings that may appear in the result of formatting
the number:

infinity specifies the string used to represent infinity; the default value is the string Infinity

NaN specifies the string used to represent the NaN value; the default value is the string NaN

minus-sign specifies the character used as the default minus sign; the default value is the hypen-minus
char (-, #x2D)

12.4 Miscellaneous Additional Functions

Function: node-set current()

The current function returns a node-set that has the current node as its only member. For an outermost
expression (an expression not occurring within another expression), the current node is always the
same as the context node. Thus, 

<xsl:value-of select="current()"/>

Means the same as:

<xsl:value-of select="."/>

However, within square brackets the current node is usually different from the context node. For example:

<xsl:apply-templates select="//glossary/item[@name=current()/@ref]"/>

will process all item elements that have a glossary parent element and that have a name attribute with
value equal to the value of the current node's ref attribute. This is different from

<xsl:apply-templates select="//glossary/item[@name=@ref]"/>

And so would process all item elements that have a glossary parent element and that have a name attribute
and a ref attribute with the same value.

It is an error to use the current function in a pattern.

Function: string unparsed-entity-uri(string)

The unparsed-entity-uri returns the URI of the unparsed entity with the specified name in the same document
as the context node (see [3.3 Unparsed Entities]). It returns the empty string if there is no such entity.

Function: string generate-id(node-set?)

The generate-id function returns a string that uniquely identifies the node in the argument node-set that is
first in document order. The unique identifier must consist of ASCII alphanumeric characters and must start
with an alphabetic character.

Thus, the string is syntactically an XML name. An implementation is free to generate an identifier in any 
convenient way provided that it always generates the same identifier for the same node and that different
identifiers are always generated from different nodes.

An implementation is under no obligation to generate the same identifiers each time a document is transformed.
There is no guarantee that a generated unique identifier will be distinct from any unique IDs specified
in the source document.

If the argument node-set is empty, the empty string is returned. If the argument is omitted, it defaults
to the context node.

Function: object system-property(string)

The argument must evaluate to a string that is a QName. The QName is expanded into a name using the 
namespace declarations in scope for the expression. The system-property function returns an object
representing the value of the system property identified by the name.

If there is no such system property, the empty string should be returned.

Implementations must provide the following system properties, which are all in the XSLT namespace:

xsl:version, a number giving the version of XSLT implemented by the processor; for XSLT processors
implementing the version of XSLT specified by this document, this is the number 1.0

xsl:vendor, a string identifying the vendor of the XSLT processor

xsl:vendor-url, a string containing a URL identifying the vendor of the XSLT processor; typically
this is the host page (home page) of the vendor's Web site.

13 Messages.

<!-- Category: instruction -->
<xsl:message
	terminate = "yes" | "no">
	<!-- Content: template -->
</xsl:message>

The xsl:message instruction sends a message in a way that is dependent on the XSLT processor.
The content of the xsl:message instruction is a template. The xsl:message is instansiated by
instansiating the content to create an XML fragment.

This XML fragment is the content of the message.

NOTE: An XSLT processor might implement xsl:message by popping up an alert box or by writing
to a log file.

If the terminate attribute has the value yes, then the XSLT processor should terminate processing
after sending the message. The default value is no.

One convenient way to do localization is to put the localized information (message text, etc.) in an
XML document, which becomes an additional inpuit file to the stylesheet. For example, suppose messages
for a language L are stored in an XML file resources/L.xml in the form:

<messages>
	<message name="problem">A problem was detected.</message>
	<message name="error">An error was detected.</message>
</messages>

Then a stylesheet could use the following approach to localize messages:

<xsl:param name="lang" select="en"/>
<xsl:variable name="messages"
	select="document(concat('resources/', $lang, '.xml'))/messages"/>

<xsl:template name="localized-message">
	<xsl:param name="name"/>
	<xsl:message>
		<xsl:value-of select="$messages/message[@name=$name]"/>
	</xsl:message>
</xsl:template>

<xsl:template name="problem">
	<xsl:call-template name="localized-message"/>
		<xsl:with-param name="name">problem</xsl:with-param>
	</xsl:call-template>
</xsl:template>

14 Extensions

XSLT allows two kinds of extension, extension elements and extension functions.

This version of XSLT does not provide a mechanism for defining implementations of extensions.
Therefore, an XSLT stylesheet that must be portable between XSLT implementations cannot rely
on particular extensions being available.

XSLT provides mechanisms that allow an XSLT stylesheet to determine whether the XSLT processor
by which it is being processed has implementations of particular extensions available, and to 
specify what should happen if those extensions are not available.

If an XSLT stylesheet is careful to make use of these mechanisms, it is possible for it to take
advantage of extensions and still work with any XSLT implementation.

14.1 Extension Elements

The element extension mechanism allows namespaces to be designed as extension namespaces. When
a namespace is designated as an extension namespace and an element with a name from that namespace
occurs in a template, then the element is treated as an instruction rather than as a literal
result element.

The namespace determines the semantics of the instruction.

NOTE: Since an element that is a child of an xsl:stylesheet element is not occurring in a template,
non-XSLT top-level elements are not extension elements as defined here, and nothing in this
section applies to them.

A namespace is designated as an extension namespace by using an extension-element-prefixes attribute
on an xsl:stylesheet element or an xsl:extension-element-prefixes attribute on a literal result
element or extension element.

The value of both these attributes is a whitespace-separated list of namespace prefixes. The namespace
bound to each of the prefixes is designated as an extension namespace. It is an error if there is no
namespace bound to the prefix of the element bearing the extension-element-prefixes or xsl:extension-element-prefixes
attribute.

The default namespace (as declared by xmlns) may be designated as an extension namespace by including 
#default in the list of namespace prefixes. The designation of a namespace as an extension namespace
is effective within the subtree of the stylesheet rooted at the element bearing the extension-element-prefixes
or xsl-extension-prefixes attribute; a subtree rooted at an xsl:stylesheet element does not include any
stylesheets imported or included by children of that xsl:stylesheet element.

If the XSLT processor does not have an implementation of a particular extension element available, then
the element-available function must return false for the name of the element. 

When such an extension element is instansiated, then the XSLT processor must perform fallback for the
element as specified in [15 Fallback]. An XSLT processor must not signal an error merely because a 
template contains an extension element for which no implementation is available.

If the XSLT processor has an implementation of a particular extension element available, then the
element-available function must return true for the name of the element.

14.2 Extension Functions

If a FunctionName in a FunctionCall expression is not an NCName (i.e, if it contains a colon), then it
is treated as a call to an extension function. The FunctionName is expanded to a name using the namespace
declarations from the evaluation context.

If the XSLT processor does not have an implementation of an extension function of a particular name
available, then the function-available function must return false for that name. If such an extension
function occurs in an expression and the extension function is actually called, the XSLT processor
must signal an error.

An XSLT processor must not signal an error merely because an expression contains an extension
function for which no implementation is available.

If the XSLT processor has an implementation of an extension function of a parituclar name available,
then the function-available function must return true for that name. If such an extension is called,
then the XSLT processor must call the implementation passing it the function call arguments;
the result returned by the implementation is returned as the result of the function call.

15 Fallback

<!-- Category: instruction -->
<xsl:fallback>
	<!-- Content: template -->
</xsl:fallback>

Normally, instansiating an xsl:fallback element does nothing. However, when XSLT processor performs
fallback for an instruction element, if the instruction element has one or more xsl:fallback children,
then the content of each of the xsl:fallback children must be instansiated in sequence; otherwise,
an error must be signaled.

The content of an xsl:fallback element is a template.

The following functions cna be used with the xsl:choose and xsl:if instructions to explicitly control
how a stylesheet should behave if particular elements or functions are not available.

Function: boolean element-available(string)

The argument must evaluate to a string that is a QName. The QName is expanded into an expanded-name
using the namespace declarations in scope for the expression. The element-available function returns
true if and only if the expanded-name is the name of an instruction.

If the expanded-name has a namespace URI equal to the XSLT namespace URI, then it refers to an element
defined by XSLT. Otherwise, it refers to an extension element. If the expanded-name has a null
namespace URI, the element-available function will return false.

Function: boolean function-available(string)

The argument must evaluate to a string that is a QName. The QName is expanded into an expanded-name
using the namespace declarations in scope for the expression. The function-available function
true if and only if the expanded-name is the name of a function in the function library. If the
expanded-name has a non-null namespace URI, then it refers to an extension function; otherwise,
it refers to a function defined by XPath or XSLT.

16 Output:

<!-- Category: top-level-element -->
<xsl:output
	method = "xml" | "html" | "text" | qname-but-not-ncname
	version = nmtoken
	encoding = string
	omit-xml-declaration = "yes" | "no"
	standalone = "yes" | "no"
	doctype-public = string
	doctype-system = string
	cdata-section-elements = qnames
	indent = "yes" | "no"
	media-type = string />

An XSLT processor may output the result tree as a sequence of bytes, although it is not required
to be able to do so (see [17 Conformance]). The xsl:output element allows stylesheet authors to
specify how they wish the result tree to be output.

If an XSLT processor outputs the result tree, it should do so as specified by the xsl:output element;
however, it is not required to do so.

The xsl:output element is only allowed as a top-level element.

The method attribute on xsl:output identifies the overall method that should be used for outputting
the result tree. The value must be a QName. If the QName does not have a prefix, then it identifies
a method specified in this document and must be one of xml, html or text.

If the QName has a prefix, then the QName is expanded into an expanded-name as described in [2.4 Qualified
Names]; the expanded-name identifies the output method; the behavior in this case is not specified by
this document.

The default for the method attribute is chosen as follows. If

the root node of the result tree has an element child.

the expanded-name of the first element child of the root node (i.e the document element) of the result tree
has a local part html (in any combination of upper and lower case) and a null namespace URI, and 

any text nodes preceding the first element child of the root node of the result tree contain only whitespace
chars,

then the default output method is html; otherwise, the default output method is xml. The default output method
should be used if there are no xsl:output elements or if none of the xsl:output elements specifies a value
for the method attribute.

The other attributes on xsl:output provide parameters for the output method. The following attributes 
are allowed:

version specifies the version of the output method

indent specifies whether the XSLT processor may add additional whitespace when outputting the result tree;
the value must be yes or no.

encoding specifies the preferred character encoding that the XSLT processor should use to encode sequences
of characters as sequence of bytes; the value of the attribute should be treated case-insensitively;
the value must contain only characters in teh range #x21 to #x7E (i.e printable ASCII chars); the value
should either be a charset registered with the Internet Assigned Numbers Authority [IANA], [RFC2278] or start
with x-

media-type specifies the media type (MIME content type) of the data that results from outputting the result
tree; the charset parameter should not be specified explicitly, instead, when the top-level media type is
text, a charset parameter should be added according to the character encoding actually used by the output method.

doctype-system specifies the system identifier to be used in the document type declaration

doctype-public specifies the public identifier to be used in the document type declaration

omit-xml-declaration specifies whether the XSLT processor should output an XML declaration;
the value must be yes or no

standalone specifies whether the XSLT processor should output a standalone document declaration;
the value must be yes or no

cdata-section-elements specifies a list of the names of elements whose text node children should be output
using CDATA sections

The detailed semantics of each attribute will be described seperately for each output method for which
it is applicable. If the semantics of an attribute are not described for an output method, then it is not
applicable to that output method.

A stylesheet may contain multiple xsl:output elements and may include or import stylesheets that also contain
xsl:output elements. All the xsl:output elements occurring in a stylesheet are merged into a single effective
xsl:output element. For the cdata-section-elements attribute, the effective value is the union of the specified
values.

For other attributes, the effective value is the specified value with the highest import precedence. It is 
an error if there is more than one such value for an attribute. An XSLT processor may signal the error;
if it does not signal the error, it should recover by using the value that occurs last in the stylesheet.

The values of attributes are defaulted after the xsl:output elements have been merged; different output
methods may have different default values for an attribute.

16.1 XML Output Method

The xml output method outputs the result tree as a well-formed XML external general parsed entity.
If the root node of the result tree has a single element node child nad no text node children, then
the entity should also be a well-formed XML document entity.

When the entity is referenced within a trivial XML document wrapper like this

<!DOCTYPE doc [
<!ENTITY e SYSTEM "entity-URI">
]>
<doc>&e;</doc>

where entity-URI is a URI for the entity, then the wrapper document as a whole should be a well-formed
XML document conforming to the XML Namespaces Recommendation [XML Names]. 

In addition, the output
should be such that if a new tree was constructed by parsing the wrapper as an XML document as specified
in [3 Data Model], and then removing the document element, making its children insteadb e children
of the root node, then the new tree would be teh same as the result tree, with the following possible
exceptions:

The order of attributes in the two trees may be different

The new tree may contain namespace nodes that were not present in the result tree.

NOTE: An XSLT processor may need to add namespace declarations in the course of outputting the
result tree as XML.

If the XSLT processor generated a document type declaration because of the doctype-system attribute, then
the above requirements apply to the entity with the generated document type declaration removed.

The version attribute specifies the version of XML to be used for outputting the result tree. If the XSLT
processor does not support this version of XML, it should use a version of XML that it does support.
The version output in the XML declaration (if an XML declaration is output) should correspond to the version
of XML that the processor used for outputting the result tree.

The value of the version attribute should match the VersionNum production of the XML Recommendation
[XML]. The default value is 1.0

The encoding attribute specifies the preferred encoding to use for outputting the result tree. XSLT processors
are required to respect values of UTF-8 and UTF-16. For other values, if the XSLT processor does not support
the specified encoding it may signal an error; if it does not signal an error it should use UTF-8 or UTF-16 instead.

The XSLT processor must not use an encoding whose name does not match the EncName production of the XML Recommendation
[XML]. If no encoding attribute is specified, then the XSLT processor should use either UTF-8 or UTF-16. It is possible
that the result tree will contain a character that cannot be represented in the encoding that the XSLT processor
is using for output. 

In this case, if the character occurs in a context where XML recognizes character references
(i.e in the value of an attribute node or text node), then the character should be output as a character reference;
otherwise (for example if the character occurs in the name of an element) the XSLT processor should signal an error.

If the indent attribute has the value yes, then the xml output method may output whitespace in additon to the 
whitespace in the result tree (possible based on whitespace stripped from either the source document or the
stylesheet) in order to indent the result nicely; if the indent attribute has the value no, it should not
output any additional whitespace. The default value is no.

The xml output method should use an algorithm to output additional whitespace that ensures that the result
if whitespace were to be stripped from the output using hte process described in [3.4 Whitespace Stripping]
with the set of whitespace-preserving elements consisting of just xsl:text would be the same when additional
whitespace is output as when additional whitespace is not output.

NOTE: It is usually not safe to use indent="yes" with document types that include element types with mixed content.

THe cdata-section-elements attribute contains a whitespace-separated list of QNames. Each QName is expanded into an
expanded-name using the namespace declarations in effect on the xsl:output element in which the QName occurs; if there
is a default namespace, it is used for QNames that do not have a prefix. The expansion is preformed before the merging
of multiple xsl:output elements into a single effective xsl:output element.

If the expanded-name of the parent of a text node is a member of the list, then the text node should be output as a 
CDATA section. For example,

<xsl:output cdata-section-elements="example"/>

would cause a literal result element written in the stylesheet as

<example>&lt;foo></example>

or as

<example><![CDATA[<foo>]]></example>

to be output as

<example><![CDATA[<foo>]]></example>

if the text node contains the sequence of characters ]]>, then the currently open CDATA section should be
closed following the ]] and a new CDATA section opened before the >. For example, a literal result element
written in the stylesheet as

<example>]]&gt;</example>

would be output as:

<example><![CDATA[]]]]><![CDATA[>]]></example>

If the text node contains a character that is not representable in the character encoding being used to output the
result tree, then the currently open CDATA section should be closed before the character, the character should be
output using a character reference or entity reference, and a new CDATA section should be opened for any further
characters in teh text node.

CDATA sections should not be used except for text nodes that the cdata-section-elements attribute explicitly
specifies should be output using CDATA sections.

The xml output method should output an XML declaration unless the omit-xml-declaration attribute has the value
yes. The XML declaration should include both version information and an encoding declaration. If the standalone
attribute is specified, it should include a standalone document declaration with the same value as the value as
as the value of the standalone attribute.

Otherwise, it should not include a standalone document declaration; this ensures that it is both a XML
declaration (allowed at the beginning of a document entity) and a text declaration (allowed at the beginning
of an external general parsed entity).

If the doctype-system attribute is specified, the xml output method should output a document type declaration
immediately before the first element. The name following <!DOCTYPE should be the name of the first element.
If doctype-public attribute is also specified, then the xml output method should output PUBLIC followed by the
public identifier and then the system identifier; otherwise, it should output SYSTEM followed by the system
identifier.

The internal subset should be empty. The doctype-public attribute should be ignored unless the doctype-system
attribute is specified.

The media-type attribute is applicable for the xml output method. The default value for the media-type attribute
is text/xml.

16.2 HTML Output Method

The html output method outputs the result tree as HTML; for example,

<xsl:stylesheet version="1.0"
				xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

<xsl:output method="html"/>

<xsl:template match="/">
	<html>
		<xsl:apply-templates/>
	</html>
</xsl:template>

...

</xsl:stylesheet>

The version attribute indicates the version of the HTML. The default value is 4.0,
which specifies that the result should be output as HTML conforming to the HTML 4.0
Recommendation [HTML].

The html output method should not output an element differently from the xml output method
unless the expanded-name of the element has a null namespace URI; an element whose expanded-name
has a non-null namespace URI should be output as XML. If the expanded-name of the element has a null
namespace URI, but the local part of the expanded-name is not recognized as name of an HTML element,
the element should output in the same way as a non-empty, inline element such as span.

The html output method should not output an end-tag for empty elements. For HTML 4.0, teh empty elements
are area, base, basefont, br, col, frame, hr, img, input, isindex, link, meta and param. For example,
an element written as <br/> or <br></br> in the stylesheet should be output as <br>.

The html output method should recognize the names of HTML elements regardless of case. For example, elements
named br, BR or Br should all be recognized as the HTML br element and output without an end-tag.

The html output method should not perform escaping for the content of the script and the style elements.
For example, a literal result element written in the stylesheet as 

<script>if (a &lt; b) foo()</script>

or

<script><![CDATA[if (a < b) foo()]]></script>

should be output as

<script>if (a < b) foo()</script>

The html output method should not escape < characters occuring in attribute values

If the indent attribute has teh value yes, then the html output may add or remove whitespace as it
outputs the result tree, so long as it does not change how an HTML user agent would render the
output. The default value is yes.

The html output method should escape non-ASCII characters in URI attribute values using the method
recommended in Section B.2.1 of the HTML 4.0 Recommendation

The html output method may output a character using a character entity reference, if one is defined
for it in the version of HTML that the output method is using.

The html output method should terminate processing instructions with > rather than ?>

The html output method should output boolean attributes (that is attributes with only a single allowed
value that is equal to the name of the attribute) in minimized form. For example, a start-tag written in
the stylesheet as:

 <OPTION selected="selected">

 should be output as 

 <OPTION selected>

 The html output method should not escape a & character occurring in an attribute value immediately
 followed by a ( character (see section B.7.1 of the HTML 4.0 Recommendation). For example, a start-tag
 written in the stylesheet as:

 <BODY bgcolor='&amp;{{randomrbg}};'>

 should be output as:

 <BODY bgcolor='&{randomrbg};'>

 The encoding attribute specifies the preferred encoding to be used. If there is a HEAD element, then the
 html output method should add a META element immediately after the start-tag of the HEAD element specifying
 the character encoding actually used. For example,

 <HEAD>
 <META http-equiv="Content-Type" content="text/html; charset=EUC-JP">
 ...

 It is possible that teh result tree will contain a character that cannot be represented in teh encoding that the
 XSLT processor is using for output. In this case, if the character occurs in a context where HTML recognzies
 character references, then the character should be output as a character entity reference or decimal numeric
 character reference; otherwise (for example, in a script or style element or in a comment), the XSLT processor
 should signal an error.

 If the doctype-public or doctype-system attributes are specified, then the HTML output method should output a document
 type declaration immediately before the first element. The name following <!DOCTYPE should be HTML or html.
 
 If the doctype-public attribute is specified, then the output method should output PUBLIC followed by the specified
 public identifier; if the doctype-system attribute is also specified, it should also output the specified system
 identifier following the public identifier.

 If the doctype-system attribute is specified but the doctype-public attribute is not specified, then the output
 method should output SYSTEM followed by the specified system identifier.

The media-type attribute is applicable for the html output method. The default value is text/html.

16.3 Text Output Method

The text output method outputs the result tree by outputting the string-value of every text node in teh result
tree in document order without any escaping.

The media-type attribute is applicable for the text output method. The default value for the media-type
attribute is text/plain.

The encoding attribute identifies the encoding that the text output method should use to convert sequences
of characters to sequences of bytes. The default is system-dependent. If the result tree contains a character
that cannot be represented in the encoding that the XSLT processor is using for output, the XSLT processor
should signal an error.

16.4 Disabling Output Escaping

Normally, the xml output method escapes & and < ( and possibly other characters) when outputting text nodes.
This ensures that the output is well-formed XML. However, it is sometimes convenient to be able to produce
output that is almost , but not quite well-formed XML; for example, the output may include ill-formed sections
which are intended to eb transformed into well-formed XML by a subsequent non-XML aware process.

For this reason, XSLT provides a mechanism for disabling output escaping. An xsl:value-of or xsl:text element
may have a disable-output-escaping attribute; the allowed values are yes or no; the default is no; if the value
is yes, then a text node generated by instansiating the xsl:value-of or xsl:text element should be
output without any escaping. For example,

<xsl:text disable-output-escaping="yes">&lt;</xsl:text>

should generate the single character <.

It is an error for output escaping to be disabled for a text node that is used for something other than a 
text node in the result tree. Thus, it is an error to disable output escaping for an xsl:value-of
or xsl:text element that is used to generate the string-value of a comment, processing instruction or
attribute node; it is also an error to convert a result tree fragment to a number or a string if the
result tree fragment contains a text node for which escaping was disabled.

In both cases, an XSLT processor may signal the error; if it does not signal teh error, it must recover
by ignoring the disable-output-escaping attribute.

The disable-output-escaping attribute may be used with the html output method as well as with the xml
output method. The text output method ignores the disable-output-escaping attribute, since it does not
perform any output escaping.

An XSLT processor will only be able to disable output escaping if it controls how the result tree is
output. This may not always be the case. For example, the result tree may be used as the source tree
for another XSLT transformation instead of being output. An XSLT processor is not required to support
disabling output escaping. If an xsl:value-of or xsl:text specifies that output escaping should be
disabled and the XSLT Processor does not support this, the XSLT Processor may signal an error;
if it does not signal an error, it must recover by not disabling output escaping.

If output escaping is disabled for a character that is not representable in the encoding that hte XSLT
processor is using for output, then the XSLT processor may signal an error; if it does not signal
an error, it must recover by not disabling output escaping.

Since disabling output escaping may not work with all XSLT processors and can result in XML that is
not well-formed, it should be used only when there is no alternative.

17 Conformance

A conforming XSLT processor must be able to use a stylesheet to transform a source tree into a result
tree as specified in this document. A conforming XSLT processor need not be able to output the
result in XML or in any other form.

NOTE: Vendors of XSLT processors are strongly encouraged to provide a way to verify that their processor
is behaving conformingly by allowing the result tree to be output as XML or by providing access to the
result tree through a standard API such as the DOM or SAX.

A conforming XSLT processor must signal any errors except for those that this document specifically allows
an XSLT processor not to signal. A conforming XSLT processor may but need not recover from any errors
that it signals.

A conforming XSLT processor may impose limits on the processing resources consumed by the processing
of a stylesheet.

18 Notation

The specification of each XSLT-defined element type is preceded by a summary of its syntax in the 
form of a model for elements of that element type. The meaning of syntax summary notation is as
follows:

An attribute is required if and only if its name is in bold.

The string that occurs in the place of an attribute value specifies the allowed values of the attribute.
IF this is surrounded by curly braces, then the attribute value is treated as an attribute value template,
and the string occuring within curly braces specifies the allowed values of the result of instansiating the
attribute value template.

Alternative allowed values are separated by |. A quoted string indicates a value equal to that specific string.
An unquoted, italicized name specifies a particular type of value.

If the element is allowed not to be empty, then the element contains a comment specifying the allowed
content. The allowed content is specified in a similar way to an element type declaration in XML;
template means that any mixture of text nodes, literal result elements, extension elements, and XSLT
elements from the instruction category is allowed; top-level-elements means that any mixture of
XSLT elements from the top-level-element category is allowed.

The element is prefaced by comments indicating if it belongs to the instruction category or top-level-element
category or both. The category of an element just affects whether it is allowed in teh content of elements
that allow a template or top-level-elements.

A References

A.1 Normative References

XML
	World Wide Web Consortium. Extensible Markup Language (XML) 1.0. W3C Recommendation. See http://www.w3.org/TR/1998/REC-xml-19980210
XML Names
	World Wide Web Consortium. Namespace in XML. W3C Recommendation. See http://www.w3.org/TR/REC-xml-names
XPath
	World Wide Web Consortium. XML Path Language. W3C Recommendation. See http://www.w3.org/TR/xpath

A.2 Other References

CSS2
	World Wide Web Consortium. Cascading Style Sheets, level 2 (CSS2). W3C Recommendation. See http://www.w3.org/TR/1998/REC-CSS2-19980512
DSSSL
	International Organization for Standardization, International Electrotechnical Comission. ISO/IEC 10179:1996. Document Style
	Semantics and Specification Language (DSSSL). International Standard.
HTML
	World Wide Web Consortium. HTML 4.0 specification. W3C Recommendation. See http://www.w3.org/TR/REC-html40
IANA
	Internet Assigned Numbers Authority. Character Sets. See ftp://ftp.isi.edu/in-notes/iana/assignments/character-sets.
RFC2278
	N. Freed, J. Postel. IANA Charset Registration Procedures. IETF RFC 2278. See http://www.ietf.org/rfc/rfc2278.xt.
RFC2376
	E. Whitehead, M. Murata. XML Media Types. IETF RFC 2376. See http://www.ietf.org/rfc/rfc2376.txt
RFC2396
	T. Bernes-Lee, R. Fielding, and L. Masinter. Uniform Resource Identifiers (URI): Generic Syntax. IETF RFC 2396.
	See http://www.ietf.org/rfc/rfc2396.txt
UNICODE TR10
	Unicode Consortium. Unicode Technical Report #10. Unicode Collation Algorithm. Unicode Technical Report. 
	See http://www.unicode.org/unicode/reports/tr10/index.hmtl
XHTML
	World Wide Web Consortium. XHTML 1.0: The Extensible Hyper Text Markup Language. W3C Proposed Recommendation.
	See http://www.w3.org/TR/xhtml1
XPointer
	World Wide Web Consortium. XML Pointer Language (XPointer). W3C Working Draft. See http://www.w3.org/TR/xptr
XML Stylesheet
	World Wide Web Consortium. Associating stylesheets with XML documents. W3C Recommendation. See http://www.w3.org/TR/xml-stylesheet
XSL
	World Wide Web Consortium. Extensible Stylesheet Language (XSL). W3C Working Draft. See http://www.w3.org/TR/WD-xsl

B Element Syntax Summary

<!-- Category: instruction -->
<xsl:apply-imports />

<!-- Category: instruction -->
<xsl:apply-templates
	select = node-set-expression
	mode = qname>
	<!-- Content: (xsl:sort | xsl:with-param)* -->
</xsl:apply-templates>

<!-- Category: instruction -->
<xsl:attribute
	name = { qname }
	namespace = { uri-reference }>
	<!-- Content: template -->
</xsl:attribute>

<!-- Category: top-level-element -->
<xsl:attribute-set
	name = qname
	use-attribute-sets = qnames>
	<!-- Content: xsl:attribute* -->
</xsl:attribute-set>

<!-- Category: instruction -->
<xsl:call-template
	name = qname>
	<!-- Content: xsl:with-param* -->
</xsl:call-template>

<!-- Category: instruction -->
<xsl:choose>
	<!-- Content: (xsl:when+, xsl:otherwise?) -->
</xsl:choose>

<!-- Category: instruction -->
<xsl:comment>
	<!-- Content: template -->
</xsl:comment>

<!-- Category: instruction -->
<xsl:copy
	use-attribute-sets = qnames>
	<!-- Content: template -->
</xsl:copy>

<!-- Category: instruction -->
<xsl:copy-of
	select = expression />

<!-- Category: top-level-element -->
<xsl:decimal-format
	name = qname
	decimal-separator = char
	grouping-separator = char
	infinity = string
	minus-sign = char
	NaN = string
	percent = char
	per-mille = char
	zero-digit = char
	digit = char
	pattern-separator = char />

<!-- Category: instruction -->
<xsl:element
	name = { qname }
	namespace = { uri-reference }
	use-attribute-sets = qnames>
	<!-- Content: template -->
</xsl:element>

<!-- Category: instruction -->
<xsl:fallback>
	<!-- Content: template -->
</xsl:fallback>

<!-- Category: instruction -->
<xsl:for-each
	select = node-set-expression>
	<!-- Content: (xsl:sort*, template) -->
</xsl:for-each>

<!-- Category: instruction -->
<xsl:if
	test = boolean-expression>
	<!-- Content: template -->
</xsl:if>

<xsl:import
	href = uri-reference />

<!-- Category: top-level-element -->
<xsl:include
	href = uri-reference />

<!-- Category: top-level-element -->
<xsl:key
	name = qname
	match = pattern
	use = expression />

<!-- Category: instruction -->
<xsl:message
	terminate = "yes" | "no">
	<!-- Content: template -->
</xsl:message>

<!-- Category: top-level-element -->
<xsl:namespace-alias
	stylesheet-prefix = prefix | "#default"
	result-prefix = prefix | "#default" />

<!-- Category: instruction -->
<xsl:number
	level = "single" | "multiple" | "any"
	count = pattern
	from = pattern
	value = number-expression
	format = { string }
	lang = { nmtoken }
	letter-value = { "alphabetic" | "traditional" }
	grouping-separator = { char }
	grouping-size = { number } />

<xsl:otherwise>
	<!-- Content: template -->
</xsl:otherwise>

<!-- Category: top-level-element -->
<xsl:output
	method = "xml" | "html" | "text" | qname-but-not-ncname
	version = nmtoken
	encoding = string
	omit-xml-declaration = "yes" | "no"
	standalone = "yes" | "no"
	doctype-public = string
	doctype-system = string
	cdata-section-elements = qnames
	indent = "yes" | "no"
	media-type = string />

<!-- Category: top-level-element -->
<xsl:param
	name = qname
	select = expression>
	<!-- Content: template -->
</xsl:param>

<!-- Category: top-level-element -->
<xsl:preserve-space
	elements = tokens />

<!-- Category: instruction -->
<xsl:processing-instruction
	name = { ncname }>
	<!-- Content: template -->
</xsl:processing-instruction>

<xsl:sort
	select = string-expression
	lang = { nmtoken }
	data-type = { "text" | "number" | qname-but-not-ncname }
	order = { "ascending" | "descending" }
	case-order = { "upper-first" | "lower-first" } />

<!-- Category: top-level-element -->
<xsl:strip-space
	elements = tokens />

<xsl:stylesheet
	id = id
	extension-element-prefixes = tokens
	exclude-result-prefixes = tokens
	version = number>
	<!-- Content: (xsl:import*, top-level-elements) -->
</xsl:stylesheet>

<!-- Category: top-level-element -->
<xsl:template
	match = pattern
	name = qname
	priority = number
	mode = qname>
	<!-- Content: (xsl:param*, template) -->
</xsl:template>

<!-- Category: instruction -->
<xsl:text
	disable-output-escaping = "yes" | "no">
	<!-- Content: #PCDATA -->
</xsl:text>

<xsl:transform
	id = id
	extension-element-prefixes = tokens
	exclude-result-prefixes = tokens
	version = number>
	<!-- Content: (xsl:import*, top-level-elements) -->
</xsl:transform>

<!-- Category: instruction -->
<xsl:value-of
	select = string-expression
	disable-output-escaping = "yes" | "no" />

<!-- Category: top-level-element -->
<!-- Category: instruction -->
<xsl:variable
	name = qname
	select = expression>
	<!-- Content: template -->
</xsl:variable>

<xsl:when
	test = boolean-expression
	<!-- Content: template -->
</xsl:when>

<xsl:with-param
	name = qname
	select = expression>
	<!-- Content: template -->
</xsl:with-param>

C DTD Fragment for XSLT Stylesheets (Non-Normative)

NOTE: This DTD Fragment is not normative because XML 1.0 DTDs do not support XML Namespaces
and thus cannot correctly describe the allowed structure of an XSLT stylesheet.

The following entity can be used to construct a DTD for XSLT stylesheets that create instances of 
a particular result DTD. Before referencing the entity, the stylesheet DTD must define a result-elements
parameter entity listing the allowed result element types. For example:

<!ENTITY % result-elements "
	| fo:inline-sequence
	| fo:block
">

Such result elements should be declared to have xsl:use-attribute-sets and xsl:extension-element-prefixes
attributes. The following entity declares the result-element-atts parameter for this purpose. The content
that XSLT allows for result elements is the same as it allows for the XSLT elements that are declared in the
following entity with a content model of %template;

The DTD may use a more restrictive content model than %template; to reflect the constraints of the result
DTD.

The DTD may define the non-xsl-top-level parameter entity to allow additional top-level elements from namespaces
other than the XSLT namespace.

The use of the xsl: prefix in this DTD does not imply that XSLT stylesheets are required to use this prefix.
Any of the elements declared in this DTD may have attributes whose name starts with xmlns: or is equal to
xmlns in addition to the attributes declared in this DTD.

<!ENTITY % char-instructions "
	| xsl:apply-templates
	| xsl:call-template
	| xsl:apply-imports
	| xsl:for-each
	| xsl:value-of
	| xsl:copy-of
	| xsl:number
	| xsl:choose
	| xsl:if
	| xsl:text
	| xsl:copy
	| xsl:variable
	| xsl:message
	| xsl:fallback
">

<!ENTITY % instructions "
	%char-instructions;
	| xsl:processing-instruction
	| xsl:comment
	| xsl:element
	| xsl:attribute
">

<!ENTITY % char-template "
	(#PCDATA
	 %char-instructions;)*
">

<!ENTITY % template "
	(#PCDATA
	%instructions;
	%result-elements;)*
">

<!-- Used for the type of an attribute value that is a URI reference. -->
<!ENTITY % URI "CDATA">

<!-- Used for the type of an attribute value that is a pattern. -->
<!ENTITY % pattern "CDATA">

<!-- Used for the type of an attribute value that is an
	attribute value template.-->
<!ENTITY % avt "CDATA">

<!-- Used for the type of an attribute value that is a QName; the prefix
	gets expanded by the XSLT processor. -->
<!ENTITY % qname "NMTOKEN">

<!-- Like qname but a whitespace-separated list of QNames. -->
<!ENTITY % qnames "NMTOKENS">

<!-- Used for the type of an attribute value that is an expression. -->
<!ENTITY % expr "CDATA">

<!-- used for the type of an attribute value that consists of a single character. -->
<!ENTITY % char "CDATA">

<!-- Used for the type of an attribute value that is a priority -->
<!ENTITY % priority "NMTOKEN">

<!ENTITY % space-att "xml:space (default|preserve) #IMPLIED">

<!-- This may be overriden to customize the set of elements allowed
at the top-level. -->

<!ENTITY % non-xsl-top-level "">

<!ENTITY % top-level "
	(xsl:import*,
		(xsl:include
		| xsl:strip-space
		| xsl:preserve-space
		| xsl:output
		| xsl:key
		| xsl:decimal-format
		| xsl:attribute-set
		| xsl:variable
		| xsl:param
		| xsl:template
		| xsl:namespace-alias
		%non-xsl-top-level;)*)
">

<!ENTITY % top-level-atts '
	extension-element-prefixes CDATA #IMPLIED
	exclude-result-prefixes CDATA #IMPLIED
	id ID #IMPLIED
	version NMTOKEN #REQUIRED
	xmlns:xsl CDATA #FIXED "http://www.w3.org/1999/XSL/Transform"
	%space-att;
'>

<!-- This entity is defined for use in the ATTLIST declaration
for result elements. -->

<!ENTITY % result-element-atts '
	xsl:extension-element-prefixes CDATA #IMPLIED
	xsl:exclude-result-prefixes CDATA #IMPLIED
	xsl:use-attribute-sets %qnames; #IMPLIED
	xsl:version NMTOKEN #IMPLIED
'>

<!ELEMENT xsl:stylesheet %top-level;>
<!ATTLIST xsl:stylesheet %top-level-atts;>

<!ELEMENT xsl:transform %top-level;>
<!ATTLIST xsl:transform %top-level-atts;>

<!ELEMENT xsl:import EMPTY>
<!ATTLIST xsl:import href %URI; #REQUIRED>

<!ELEMENT xsl:include EMPTY>
<!ATTLIST xsl:include href %URI, #REQUIRED>

<!ELEMENT xsl:strip-space EMPTY>
<!ATTLIST xsl:strip-space elements CDATA #REQUIRED>

<!ELEMENT xsl:preserve-space EMPTY>
<!ATTLIST xsl:preserve-space elements CDATA #REQUIRED>

<!ELEMENT xsl:output EMPTY>
<!ATTLIST xsl:output
	method %qname; #IMPLIED
	version NMTOKEN #IMPLIED
	encoding CDATA #IMPLIED
	omit-xml-declaration (yes|no) #IMPLIED
	standalone (yes|no) #IMPLIED
	doctype-public CDATA #IMPLIED
	doctype-system CDATA #IMPLIED
	cdata-section-elements %qnames; #IMPLIED
	indent (yes|no) #IMPLIED
	media-type CDATA #IMPLIED
>

<!ELEMENT xsl:key EMPTY>
<!ATTLIST xsl:key
	name %qname; #REQUIRED
	match %pattern; #REQUIRED
	use %expr; #REQUIRED
>

<!ELEMENT xsl:decimal-format EMPTY>
<!ATTLIST xsl:decimal-format
	name %qname; #IMPLIED
	decimal-separator %char; "."
	grouping-separator %char; ","
	infinity CDATA "Infinity"
	minus-sign %char; "-"
	NaN CDATA "NaN"
	percent %char; "%"
	per-mille %char; "&#x2030;"
	zero-digit %char; "0"
	digit %char; "#"
	pattern-separator %char; ";"
>

<!ELEMENT xsl:namespace-alias EMPTY>
<!ATTLIST xsl:namespace-alias 
	stylesheet-prefix CDATA #REQUIRED
	result-prefix CDATA #REQUIRED
>

<!ELEMENT xsl:template
	(#PCDATA
	%instructions;
	%result-elements;
	| xsl:param)*
>

<!ATTLIST xsl:template
	match %pattern; #IMPLIED
	name %qname; #IMPLIED
	priority %priority; #IMPLIED
	mode %qname; #IMPLIED
	%space-att;
>

<!ELEMENT xsl:value-of EMPTY>
<!ATTLIST xsl:value-of
	select %expr; #REQUIRED
	disable-output-escaping (yes|no) "no"
>

<!ELEMENT xsl:copy-of EMPTY>
<!ATTLIST xsl:copy-of select %expr; #REQUIRED>

<!ELEMENT xsl:number EMPTY>
<!ATTLIST xsl:number
	level (single|multiple|any) "single"
	count %pattern; #IMPLIED
	from %pattern; #IMPLIED
	value %expr; #IMPLIED
	format %avt; '1'
	lang %avt; #IMPLIED
	letter-value %avt; #IMPLIED
	grouping-separator %avt; #IMPLIED
	grouping-size %avt; #IMPLIED
>

<!ELEMENT xsl:apply-templates (xsl:sort|xsl:with-param)*>
<!ATTLIST xsl:apply-templates
	select %expr; "node()"
	mode %qname; #IMPLIED
>

<!ELEMENT xsl:apply-imports EMPTY>

<!-- xsl:sort cannot occur after any other elements or
any non-whitespace character -->

<!ELEMENT xsl:for-each
	(#PCDATA
	%instructions;
	%result-elements;
	| xsl:sort)*
>

<!ATTLIST xsl:for-each
	select %expr; #REQUIRED
	%space-att;
>

<!ELEMENT xsl:sort EMPTY>
<!ATTLIST xsl:sort
	select %expr; "."
	lang %avt; #IMPLIED
	data-type %avt; "text"
	order %avt; "ascending"
	case-order: %avt; #IMPLIED
>

<!ELEMENT xsl:if %template;>
<!ATTLIST xsl:if
	test %expr; #REQUIRED
	%space-att;
>

<!ELEMENT xsl:choose (xsl:when+, xsl:otherwise?)>
<!ATTLIST xsl:choose %space-att;>

<!ELEMENT xsl:when %template;>
<!ATTLIST xsl:when
	test %expr; #REQUIRED
	%space-att;
>

<!ELEMENT xsl:otherwise %template;>
<!ATTLIST xsl:otherwise %space-att;>

<!ELEMENT xsl:attribute-set (xsl:attribute)*>
<!ATTLIST xsl:attribute-set
	name %qname; #REQUIRED
	use-attribute-sets %qnames; #IMPLIED
>

<!ELEMENT xsl:call-template (xsl:with-param)*>
<!ATTLIST xsl:call-template
	name %qname; #REQUIRED
>

<!ELEMENT xsl:with-param %template;>
<!ATTLIST xsl:with-param
	name %qname #REQUIRED
	select %expr; #IMPLIED
>

<!ELEMENT xsl:varaible %template;>
<!ATTLIST xsl:variable
	name %qname; #REQUIRED
	select %expr; #IMPLIED
>

<!ELEMENT xsl:param %template;>
<!ATTLIST xsl:param
	name %qname; #REQUIRED
	select %expr; #IMPLIED
>

<!ELEMENT xsl:text (#PCDATA)>
<!ATTLIST xsl:text
	disable-output-escaping (yes|no) "no"
>

<!ELEMENT xsl:processing-instruction %char-template;>
<!ATTLIST xsl:processing-instruction
	name %avt; #REQUIRED
	%space-att;
>

<!ELEMENT xsl:element %template;>
<!ATTLIST xsl:element
	name %avt; #REQUIRED
	namespace %avt; #IMPLIED
	use-attribute-sets %qnames; #IMPLIED
	%space-att;
>

<!ELEMENT xsl:attribute %char-template;>
<!ATTLIST xsl:attribute
	name %avt; #REQUIRED
	namesapce %avt; #IMPLIED
	%space-att;
>

<!ELEMENT xsl:comment %char-template;>
<!ATTLIST xsl:comment %space-att;>

<!ELEMENT xsl:copy %template;>
<!ATTLIST xsl:copy
	%space-att;
	use-attribute-sets %qnames; #IMPLIED
>

<!ELEMENT xsl:message %template;>
<!ATTLIST xsl:message
	%space-att;
	terminate (yes|no) "no"
>

<!ELEMENT xsl:fallback %template;>
<!ATTLIST xsl:fallback %space-att;>

D Examples (Non-Normative)

D.1 Document Example

This example is a stylesheet for transforming document that conform to a simple
DTD into XHTML [XHTML]. The DTD is:


curl

gd, ImageMagick 6.3.7 (or later) or both

intl

mbstring

mcrypt

mhash

openssl

PDO/MySQL

SimpleXML

soap

xml

xsl

zip

PHP 7 only:

json

iconv

