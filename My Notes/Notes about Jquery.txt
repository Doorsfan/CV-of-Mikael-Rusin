Basically, jQuery is JS integrated into HTML to have a script. What follows, is an example:

<html>
<head>
	<title>Example</title>
	<link rel="stylesheet" type="text/css" href="style.css"/> //Relate it to the stylesheet
	<script src="jquery-2.0.2.js" type="text/javascript"></script> //denote what the script source it
	<script type="text/javascript"> //Define the script type
		$(document).ready(function() {
			$("img:odd").mouseenter(function (e) { //Designate that when the mouse goes out, trigger function with arg(e), turn the css for this file to 0.5
				$(this).css("opacity", 0.5);
			}).mouseout(function (e) { //Designate that when mouse goes out, trigger function with arg (e), turn the css for this file to 1.0
				$(this).css("opacity", 1.0);
			});
		});
	</script>
</head>
//Rest is HTML

In HTML, we can use relative links, based on the link section we are in: //assume we have a website followed by /jquery

snowdrop.png  //http://www.jacquisflowershop.com/jquery/snowdrop.png

/snowdrop.png //http://www.jacquisflowershop.com/snowdrop.png

/ 			  //http://www.jacquisflowershop.com/jquery/

//www.mydomain.com/index.html //http://www.mydomain.com/index.html //Useful for getting data in same context as html was defined to retrieve it, ensuring that regarldess of https or http connection of retrieve data, this copies that way of doing it

In HTML, all of the objects derive from something called a HTMLElement

These elements, have the following basic properties, amongst others:

name 		Desc 															Returns

className //Gets or sets the list of classes that the element belongs to 	String

id 		  //Gets or sets the value of the id attribute 						String

lang 	  //Gets or sets the value of the lang attribute 					String

tagName   //Returns the tag name(indicating the element type) 				String

To access specific HTML elements, there is a wide array of methods to aquire them, but some of the following, are the general ones:

Property 						Desc 								Returns

getElementById(<id>) 			Returns element by ID 				HTMLElement

getElementsByClassName(<class>) Returns elements with said value 	HTMLElement[]

getElementsByTagName(<tag>) 	Returns the elements of said tag 	HTMLElement[]

querySelector(<selector>) 		Returns first match of CSS selector HTMLElement

querySelectorAll(<selector>) 	As above, but returns all 			HTMLElement[]

A simple example of a JS that logs out elements by tagname and source:

<script>
	var elements = document.getElementsByTagName("img");
	for (var i = 0; i < elements.length; i++) {
		console.log("Element: " + elements[i].tagName + " " + elements[i].src);
	} 
</script>

The elements of the DOM are live. Meaning that if we change a source of an item or change designation of it, it is instantly represented to the browser.
An example follows, of changing the source for elements:

<script>
	var elements = document.getElementsByTagName("img");
	for (var i = 0; i < elements.length; i++) {
		elements[i].src = "snowdrop.png";
	}
</script>

Further more, by virtue of the DOM, we can change things such as CSS attributes:

<script>
	var elements = document.getElementsByTagName("img");
	for (var i = 0; i < elements.length; i++) {
		if(i > 0){
			elements[i].style.opacity = 0.5; //Accesses CSS attributes to change the opacity of respective elements that are not hte first
		}
	}
</script>

Further more, we can designate event related programming to stuff in the DOM, as follows:

<script>
	var elements = document.getElementByTagName("img");
	for (var i = 0; i < elements.length; i++) {
		elements[i].onmouseover = handleMouseOver; //Assign the related function of mousing over to be said function
		elements[i].onmouseout = handleMouseOut; //Assign mouseout related function to be said function
	}

	function handleMouseOver(e) { //Declare the function to handle respective interaction and pass said event to it
		e.target.style.opacity= 0.5; //Access the events target and access attributes of the said target to change them
	}

	function handleMouseOut(e) {
		e.target.style.opacity = 1;
	}
</script>

The e (event object) has the following properties that we can access:

name 							Desc 											Returns

type 							The name of the event (ex. mouseover)   		string

target 							The target of the event 						HTMLElement

currentTarget 					The current target 								HTMLElement

eventPhase 						The phase in the event life cycle 				number

bubbles 						true if event bubbles document 					Boolean

cancelable 						True if default action is cancelable 			Boolean

stopPropagation() 				Stops the flow after current event fired 		void

stopImmediatePropagation() 		Instantly stops flow, ignores untriggered 		void
								events 	

preventDefault() 				Prevents default action of said event 			void

defaultPrevented 				Returns true if preventDefault() has been run 	boolean

An event has three phases of it's life:

capture //If any event trigger is designated to be related upon occurance of an event of it's descendants, the ascendants take predecence  in order

target //Activates triggers associated to said event

bubbling //Chains back up, to see for events that are not capture-enabled

Some events have associated default actions, such as the click event, where it has displaying the associated href URL content 

If an event has a default action, the cancelable property is true.

if the preventDefault() is run on an event, it won't be triggered at the end of the bubble event

//Skipped CSS Chapter, can go back if relevant

There are two ways to refer to JS documents in HTML, by external reference or internal. An example of a internal one follows:

<html>
<head>
	<title>Example</title>
	<script type="text/javascript">
		console.log("Hello"); //Acts much akin to Print, prints to the Console
	</script>
</head>

Example of making a function in JS:

<head>
	<title>Example</title>
	<script type="text/javascript">
		function myFunc() {
			console.log("This is a statement");
		};

		myFunc();
	</script>
</head>
etc..

In JS, we don't have to specify types for parameters, as shown:

<head>
	<title>Some shit</title>
	<script type="text/javascript">
		function myFunc(name, weather) {
			console.log("Hello " + name + ".");
			console.log("It is " + weather + " today");
		};

		myFunc("Adam", "sunny");
	</script>
</head>
etc.

IMPORTANT NOTE: JS does not distinguish amount of args. If less args are provided, then the rest is left undefined. Further more, JS does NOT support function overloading,
which means that we end up with having so that when we write two functions with the same name, the latter becomes the current one.

To return stuff from a Function, we could do as follows:

<head>
	<title>Example</title>
	<script type="text/javascript">
		function myFunc(name) {
			return ("Hello" + name + ".");
		};

		console.log(myFunc("Adam"));
	</script>
</head>
etc.

In the above example, the result is implicitly returned, meaning we don't have to explicitly define the variable to hold the result or to access the returned value

In JS, we have two levels of scope just akin to Python, Global and Local, anything directly in the Script segment is Global, stuff in Functions are local.
An example of utilizing global var vs local:

<html>
	<head>
		<title>Example</title>
		<script type="text/javascript">
			var myGlobalVar = "apples";

			function myFunc(name) {
				var myLocalVar = "something";
				return ("SHIT OF + " name + " GONE DOPE WITH A SMACK OF" + myLocalVar);
			};
			console.log(myFunc("adam"));
		</script>
		<script type="text/javascript">
			console.log("I like " + myGlobalVar);
		</script>
	</head>
	<body>
		This is a example
	</body>
</html>

In JS, the types are implicit, since it's dynamically typed. Which means that it assumes whatever the type is based on the declaration.

In JS, we can define properties of objects after having created them, without actually accessing it's constructor or defining it:

<head>
	<title>Example</title>
	<script type="text/javascript">
		var myData = new Object();
		myData.name = "Adam";
		myData.weather = "sunny";

		console.log("Hello " + myData.name + ".");
		console.log("Today is" + myData.weather);
	</script
</head>
etc..

We can, however, in JS, also declare Objects by virtue of creating something akin to a constructor of said Object: //called a Object Literal

<head>
	<title>Shit</title>
	<script type="text/javascript">
		var myData = {
			name: "Adam",
			weather: "sunny"
		};

		console.log("Hello" + myData.name + myData.weather); etc.
	</script>
</head>
etc.

To add functions to objects, we assign them as variables part of the object, except we have to declare them as functions:

<head>
	<title>Some shit</title>
	<script type="text/javascript">
		var myData = {
			name: "Adam",
			weather: "Sunny",
			printMessages: function() {
				console.log("Some shit" + this.name); //Akin to Java, self reference in terms of Object attributes is done with this.<attribute name>
				console.log("Today is " + this.weather);
			}
		};
	</script>
	myData.printMessages(); //call the function from the object
</head>
etc.

There are two ways to acess and set attributes of a object, in terms of JS, as follows:

<head>
	<title>some shit</title>
	<script type="text/javascript">
		var myData = {
			name: "Adam",
			weather: "sunny",
		};

		myData.name = "Joe";//Traditional way
		myData["weather"] = "raining"; //This way is when we variable expand whatever is within the []'s to access the attribute of the class called that and then assign said attribute with a value

		console.log("Hello" + myData.name + ".");
		console.log("It is" + myData["weather"]); //The [<var name>] can be used to access attributes of said class. Can also contain variables that expand to become that name later. An example:

		var someshit = "weather";
		myData[someshit] = "Raining"; //Same thing as having accessed by myData["weather"];
	</script>
</head>

in JS, we can iterate over all the properties of a Object, with a for loop, as follows:

<html>
<head>
	<title>Example</title>
	<script type="text/javascript">
		var myData = {
			name : "Adam",
			weather: "sunny",
			printMessages: function() {
				console.log("Hello" + this.name + ".");
				console.log("THE WEATHER IS " + this.weather);
			}
		};

		for (var prop in myData) {
			console.log("Name: " + prop " Value: " + myData[prop]); //Accesses the name of the vars by virtue of prop, accesses value by virtue of <class>[prop], where prop acts    like i, where we iterate over all of the variables of the respective class
		}
	</script>
</head>
etc.

In Javascript, we can add properties and functions easily, as follows:

<head>
	<title>Example</title>
	<script type="text/javascript">
		var myData = {
			name: "Adam",
			weather: "sunny",
		};

		myData.dayOfWeek = "Monday"; //adds a property to myData, called dayOfWeek
	</script>
</head>
etc.

<head>
	<title>Example</title>
	<script type="text/javascript">
		var myData = {
			name: "Adam",
			weather: "sunny",
		};

		myData.SayHello = function() {
			console.write("Hello");
		};
	</script>
</head>
etc.

We can also delete properties from Objects and their related methods, by simple virtue of the delete keyword:

<head>
	<title>Example</title>
	<script type="text/javascript">
		var myData = {
			name: "Adam",
			weather: "sunny",
		};

		delete myData.name; //deletes the name attribute of myData
		delete myData["weather"]; //Delete the implicit attribute of weather
		delete myData.SayHello; //Attempt to delete a Attribute called SayHello
	</script>
</head>

etc.

We can also check to see if a Object has a property, by virtue of using the in keyword:

<head>
	<title>Example</title>
	<script type="text/javascript">
		var myData = {
			name = "Adam",
			weather: "sunny",
		};

		var hasName = "name" in myData; //Checks to see if the myData object has the name var, is a boolean
		var hasDate = "date" in myData; //Checks to see if the myData object has the date var, is a boolean
	</script>
</head>
etc.

Most of the usual suspects in terms of operators in JS, are as follows:

++, -- //Pre/Post increment and decrement

+, -, *, /, % //normal arithmetics

<, <=, >, >= //As per normal

==, != //as per normal, compares values

===, !=== //Identity and nonidentity tests, compares values AND type

&&, || //Logical AND and OR

= 	// Assignment

+ //Concatenation

?: //Three operand conditional statement

Switch also exists as per normal

In case of concatenation in terms of <int> + <str> , implicit conversion does not occur

In JS, we can convert strings in a number of different manners, as is expected:

toString() //normal to string

toString(2) //binary
toString(8) //octa
tostring(16)//hexa

toFixed(n) //Represents a real number with n digits after decimal

toPrecision(n) //represents number with n significant digits, uses scientific notation if needed

To convert str to number:

Number(str) //converst to int or real value

parseInt(str) //parses a int

parseFloat(str) //Parse string to create int or real value

Arrays in JS, are as per lists in Python.

Some array methods:

concat(<otherArray>) //Returns array concatenated to the second

join(<seperator>) //Joins all the elements in said array to a string, using seperator to denote delimeter to split by

pop() //Treat an array like a stack, remove and return the last item in the array

push(item) //Treat an array like a stack, appending said item to array

reverse() //Reverses Array

shift() //Like pop, but works on the first item

slice(start, end) //Returns section of the array based on start and end

sort() //Sorts the items in the array

splice(index, count) //Removes count items from the array, starting at index

unshift(item) //Like push, but inserts the new item at the start of the array

Try, catch and finally work as per usual in JS

In JS, both Null and undefined exist, undefined is when a value is unassigned, Null is when it's not a valid representation of anything

if we check against a value with the ! operator, as per !<attribute> or akin, we find it to be true if NULL or undefined, false otherwise

To setup jQuery to a HTML, you could do as follows:

<head>
	<title>Example</title>
	<link rel="stylesheet" type="text/css" href="style.css" /> //Links the CSS
	<script src="jquery-2.0.2.js" type="text/javascript"></script> //adds the jquery library to the html
</head>

If we wish, we can use something called a CDN, which connects to a local server to get the latest jQuery services, instead of having them natively to the website

We can cause conditional comments in jQuery, as follows:

<head>
	<title>Example</title>
	<link rel="stylesheet" type="text/css" href="style.css"/>
	<!--[if lt IE 9]>
		<script src="jquery-1.10.1.js" type="text/javascript"></script>
	<![endif]-->
	<!--[if gte IE 9]>
		<script src="jquery-2.0.2.js" type="text/javascript"></script>
	<!--<![endif]-->
</head>

In jQuery, we can use the $ as a shorthand for jQuery, and acts as a main actor for jQuery functions 

It can also be replaced by the jq designation, as follows:

<script type="text/javascript">
	var jq = jQuery.noConflict();
	jq(document).ready(function() {
		jq("img:odd").mouseenter(function(e)) {
			jq(this).css("opacity", 0.5);
		}).mouseout(function(e) {
			jq(this).css("opacity", 1.0);
		})
	});
</script>

In jQuery, we have the following structure of things:

$(function)  //Specifies the designated function to execute when the DOM is ready

$(selector) or $(selector, context) //Selects elements from the document

$(HTMLElement) or $(HTMLElement[]) //Creates a jQuery object from a HTMLElement or an array of HTMLElement Objects

$() //Creates an empty selection

$(HTML) or $(HTML, map) //Creates new elements from a Fragment of HTML, with an optional map object to define attributes.

The $(document).ready(function(){}) function in jQuery makes certain that the script is only run when the dom is ready, meaning no pre-mature fire is done

We can run the $(document).ready by simply re-writing it:

<script type="text/javascript">
	$(function() {
		//stuff..
	});
</script>

If we wish, we can put a delay lock with $.holdReady(true); in the following example:

<script type="text/javascript">
	
	$.holdReady(true); //Delay the ready function, can be called several times, but must always be balanced out by amount of .holdReady() functions
	//1 holdReady(true) requires one with false, two with two, etc.

	$(document).ready(function(){
		console.log("Ready event triggered");
	});

	setTimeout(function() { 
		console.log("Releasing hold!");
		$.holdReady(false); //Declare that the hold should release
	}, 5000); //Causes 5 seconds timeout

</script>

jQuery supports all the CSS selector combined with a number of jQuery selectors, as follows:

:animated //All elements being animated

:contains(text) //Selects elements that contains specified text

:eq(n) 		// Selects the n:th element

:even 		// Selects all the even numbered events

:first 		// Selects the first matched element 

:gt(n) 		// Selects all elements with greater index than n

:has(selector) //Selects elements that has at least one element that matches the selector

:last 		// Selects the last matched element

:lt(n) 		// Selects all elements with less than specified index

:odd 		// Selects odd numbered indexes

:text 		// Selects all text elements

Beyond this, jQuery offers a list of other selectors, that extends their reach:

:button 	//Selects all buttons

:checkbox 	//Selects all checkboxes

:file 		//Selects all file elements

:header 	//selects all headers

:hidden 	//Selects all hidden elements

:image 		//Selects all image elements

:input 		//Selects all input elements

:last 		//Selects the last matched element

:parent 	//Selects all parent elements

:password 	//Selects all password elements

:radio 		//Selects all radio elements

:reset 		//Selects all elements that reset a form

:selected 	//Selects all elements that are selected

:submit 	//Selects all submission elements

:visible 	//Selects all visible elements

We can further narrow down the search context, as follows:

<script type="text/javascript">
	$(document).ready(function() {
		$("img:odd", $(".drow")).mouseenter(function(e) { //Matches against every odd img element and then selects only drow class extensions
			$(this).css("opacity", 0.5);
		}).mouseout(function(e) {
			$(this).css("opacity", 1.0);
		})
	});
</script>

We could also narrow down the search to be every odd image, related to be a descendant of a certain id:ed block:

<script type="text/javascript">
	$(document).ready(function() {
		var elem = document.getElementById("oblock");

		$("img:odd", elem).mouseenter(function(e) {
			$(this).css("opacity", 0.5);
		}).mouseout(function(e) {
			$(this).css("opacity", 1.0);
		})
	});
</script>

When we select a set of elements, we clump them up to become something called a jQuery object, which we can interact with, as follows:

Selector 						Desc 												Returns

context 						Returns the set of elements used as the search
								context												HTMLElement

each(function) 					Performs the function on each of the selected
								elements 											jQuery

get(index) 						Gets the HTMLElement object at given index 			HTMLElement

index(HTMLElement) 				Returns index of said element 						number

index(jQuery) 					Returns index of first element in jQuery obj 		number

index(selector) 				Returns index of first element in jQuery obj 		number
								in set of elements matched by selector 

length 							Returns number of elems in the jQuery object 		number

size() 							Returns number of elements in the jQuery obj 		number

toArray() 						Returns the HTMLElement objects contained by 		HTMLElement[] 
								jQuery obj as an array

If we wish to determine context of variables, we can use the .context.tagname of elements, as follows:

<script type="text/javascript">
	$(document).ready(function() {
		var jq1 = $("img:odd");
		console.log("No context: " + jq1.context.tagName); //prints out undefined context, Due to that every odd img has no context

		var jq2 = $("img:odd", $(".drow")); //has no multiple context elements
		console.log("Multiple context elements: " + jq2.context.tagName); //also undfiend due to no multiple contexts 

		var jq3 = $("img:odd", document.getElementById("oblock"));
		console.log("Single context element: " + jq3.context.tagName); //Will print out Div, due to oblock being the Context 
	});
</script>

Note: jQuery objects don't replace DOM objects.

If we wish to create jQuery objects from DOM objects, we can do as follows:

<script type="text/javascript">
	$(document).ready(function(){
		var elems = document.getElementByTagName("img");

		$(elems).mouseenter(function(e) {
			$(this).css("opacity", 0.5);
		}).mouseout(function(e){
			$(this).css("opacity", 1.0);
		})
	});
</script>

The above example gets the DOM elements by TagName and converts them to jQuery objects

If we wish to extract the DOM objects out of a jQuery object as an array, we can use the toArray() method:

An example of iterating over a jQuery array:

<script type="text/javascript">
	$(document).ready(function(){
		var elems = $("img:odd");
		for (var i = 0; i < elems.length; i++) {
			console.log("Element: " + elems[i].tagName + " " + elems[i].src);
		}
	});
</script>

The above code prints out the tagname and source of the images, in a fashion of printing out every odd element due to selection being img:odd

An example of creating a for each loop in JS:

<script type="text/javascript">
	$(document).ready(function(){
		$("img:odd").each(function(index, elem) { //Run a for each loop on each elem with their respective index
			console.log("Element: " + elem.tagName + " " + elem.src);
		});
	});
</script>

We can find the indexes of specific objects both in terms of using the DOM API and using jQuery objects:

<script type="text/javascript">
	$(document).ready(function(){
		var elems = $("body *"); //Select everything in the body

		//Find an index using the DOM API

		var index = elems.index(document.getElementsById("oblock"));
		console.log("Index using DOM element is: " + index);

		//Find an index using another jQuery object
		index = elems.index($("#oblock")); //Give the ID of the element as a argument to selecting it in jQuery, then running the index of it
		console.log("Index using jQuery object is: " + index); 

	});
</script>

If we wish to reverse the order, having the last object be first, we can instead using string arguments:

<script type="text/javascript">
	$(document).ready(function() {
		var imgElems = $("img:odd");
		//Find an index using a selector

		index = imgElems.index("body *");
		console.log("Index using selector is: " + index);

		//perform the same task using a jQuery object 
		index = $("body *").index(imgElems); //Could be re-written as index = imgElems.index("body *");
		console.log("Index using jQuery object is: " + index);
	});
</script>

We have of course getters:

<script type="text/javascript">
	$(document).ready(function() {
		var elem = $("img:odd").get(1);
		console.log("Element: " + elem.tagName + " " + elem.src);
	});
</script>

An example of interacting with several Elements with the DOM API:

<script type="text/javascript">
	$(document).ready(function() {
		var labelElems = document.getElementsByTagName("label");
		for (var i = 0; i < labelElems.length; i++) {
			labelElems[i].style.color = "blue";
		}
	});
</script>

An example of interacting with several Elements with the jQuery API:

<script type="text/javascript">
	$(document).ready(function() {
		$("label").css("color", "blue"); //Selects all label #id's and uses css to access their color attribute and designate blue
	});
</script>

We can also chain method calls on objects in JS, as follows:

<script type="text/javascript">
	$(document).ready(function() {
		$("label").css("color", "blue").css("font-size", ".75em"); //Chains two methods calls unto the same object selection

		var labelElems = document.getElementsByTagName("Label");
		for (var i = 0; i < labelElems.length; i++) { //Version of chaining method callds by using the DOM API
			labelElems[i].style.color = "blue";
			labelElems[i].style.fontSize = ".75em";
		}
	});
</script>

An example of having a more sophisticated way of chaining methods:

<script type="text/javascript">
	$(document).ready(function() {
		$("label").css("color", "blue").add("input[name!='rose']").filter("[for!='snowdrop']").css("font-size", ".75em"); //add the relevant attribute to all elements except
		//Thoose named rose, filter out the selection form with a for loop where it skips the iteration step of snowdrop

		var elems = document.getElementByTagName("label");
		for (var i = 0; i < elems.length; i++) {
			elems[i].style.color = "blue";
			if (elems[i].getAttribute("for") != "snowdrop") { //Run an if check to see that the attribute for the respective for element in the loop is not snowdrop
				elems[i].style.fontSize = ".75em";
			}
		}

		elems = document.getElementByTagName("input");
		for (var i = 0; i < elems.length; i++) {
			if (elems[i].getAttribute("name") != "rose"){
				elems[i].style.fontSize = ".75em";
			}
		}
	});
</script>

An example of handling events in terms of chaining:

<scipt type="text/javascript">
	$(document).ready(function() {
		$("img:odd").mouseenter(function(e) {
			$(this).css("opacity", 0.5);
		}).mouseout(function(e) {
			$(this).css("opacity", 1.0);
		})
	});
</script>

In jQuery, we can add to objects, by virtue of the add method as follows:

add(selector) or add(selector, context) //Adds all of the elements that are matched by the selector with or without a context

add(HTMLElement) 						//Adds a single HTMLElement or an array of HTMLElement objects

add(jQuery) 							//Adds the contents of the specified jQuery object

The add methods in question, return a jQuery object which we can further add to, which an example of follows:

<!DOCTYPE html>
<html>
<head>
	<title>Example</title>
	<script src="jquery-2.0.2.js" type="text/javascript"></script>
	<link rel="stylesheet" type="text/css" href="styles.css"/>
	<script type="text/javascript">
		$(document).ready(function() {

			var labelElems = document.getElementsByTagName("label");
			var jq = $("img[src*=daffodil]"); //assign jq to be images with the source involving daffodil

			$("img:even").add("img[src*=primula").add(jq).add(labelElems).css("border", "thick double red"); //Add to the list of every even img object, the objects of primula and 
			//daffodil assigned in the jq var, and add a thick double red border to all respective label elements from the selected things
		});
	</script>
</head>
<body>
	<h1>Jacqui's Flower Shop</h1>
	<form method="post">
		<div id="oblock">
			<div class="dtable">
				<div id="row1" class="drow">
					<div class="dcell">
						<img src="aster.png"/><label for="aster">Aster:</label>
						<input name="aster" value="0" required">
					</div>
					<div class="dcell">
						<img src="daffodil.png"/><label for="daffodil">Daffodil:</label>
						<input name="daffodil" value="0" required>
					</div>
					<div class="dcell">
						<img src="rose.png"/><label for="rose">Rose:</label>
						<input name="rose" value="0" required>
					</div>
				</div>
				<div id="row2" class="drow">
					<div class="dcell">
						<img src="peony.png"/><label for="peony">Peony:</label>
						<input name="peony" value="0" required>
					</div>
					<div class="dcell">
						<img src="primula.png"/><label for="primula">Primula:</label>
						<input name="primula" value="0" required>
					</div>
					<div class="dcell">
						<img src="snowdrop.png"/><label for="snowdrop">Snowdrop:</label>
						<input name="snowdrop" value="0" required>
					</div>
				</div>
			</div>
		</div>
		<div id="buttonDiv"><button type="submit">Place Order</button></div>
	</form>
</body>
</html>

NOTE: The remove method does not remove elements, it is NOT the opposite of add, in terms of selection, it instead reshapes the DOM

If we wish to narrow down the selection, we can use the following methods in jQuery:

eq(index) //Removes all of the elements from said object except for the one at said index

filter(condition) //Removes elements that don't match the criteria of which is required

first() 		  //Removes all elements except the first

has(selector) 	  //Removes elements that don't have descendant matched by the specified selector or jQuery object or who's descendants don't have the specified HTML objects
has(jQuery)
has(HTMLElement)
has(HTMLElement[])

last() 			//Removes all but the last element

not(condition) 	//Removes all elements that fits the condition

slice(start, end) //Removes the specified range of elements

Example of using specifications of ranges in selections:

<script type="text/javascript">
	$(document).ready(function() {
		var jq = $("label");

		jq.first().css("border", "thick double red");
		jq.last().css("border", "thick double green");
		jq.eq(2).css("border", "thick double black"); //index selection
		jq.eq(-2).css("border", "thick double black"); //index selection
	})
add(HTMLElement[])

Example of slicing:

<script type="text/javascript">
	$(document).ready(function() {
		var jq = $("label");

		jq.slice(0, 2).css("border", "thick double black");
		jq.slice(4).css("border", "thick solid red"); //if second argument is ommitted, we go from specified index until the end
	});
</script>

If we wish to use the filter mechanic, we can use the following modifiers:

filter(selector) 	//Removes elements that don't match the selector

filter(HTMLElement) //Removes all but the specified element

filter(jQuery) 	//Removes elements that are not contained in the specified jQuery object

filter(function(index)) //Function is called for each element, the ones that return false on this are removed

<script type="text/javascript">
	$(document).ready(function() {
		$("img").filter("[src*=s"]).css("border", "thick double red");

		var jq = $("[for*=p]" );
		$("label").filter(jq).css("color", "blue");

		var elem = document.getElementsByTagName("label")[1];
		$("label").filter(elem).css("font-size", "1.5em");

		$("img").filter(function(index){
			return this.getAttribute("src") == "peony.png" || index == 4;
		}).css("border", "thick solid red") //Run a filter on all img elements and keep them only where the source is peony.png or where index is 4
	});
</script>

NOTE: The difference between using the src property and getAttribute, is that getAttribute returns a relative URL, src would return a absolute

We can invert the use of filters, by defining which ones we do not want, with not:

not(selector)

not(HTMLElement[])
not(HTMLElement)

not(jQuery)

not(function(index))

An example of using not selections:

<script type="text/javascript">
	$(document).ready(function() {
		$("img").not("[src*=s]").css("border", "thick double red"); //Everything that does not have s in it

		var jq = $("[for*=p]");
		$("label").not(jq).css("color", "blue"); //Everything that does not start with p

		var elem = document.getElementsByTagName("label")[1];
		$("label").not(elem).css("font-size", "1.5em"); //Take everything except this element

		$("img").not(function(index) {
			return this.getAttribute("src") == "peony.png" || index == 4;
		}).css("border", "thick solid red")
	});
</script>

If we wish to access divs and further differentiate based on source names, we can do as follows:

<script type="text/javascript">
	$(document).ready(function() {
		$("div.dcell").has("img[src*=aster]").css("border", "thick solid red");
		var jq = $("[for*=p]");
		$"div.dcell").has(jq).css("border", "thick solid blue");
	});
</script>

If we wish to retrieve attributes, based on a function, we can use mapping:

<script type="text/javascript">
	$(document).ready(function() {
		$("div.dcell").map(function(index, elem) {
			return elem.getElementsByTagName("img")[0]; //Return first element of each div.dcell section
		}).css("border", "thick solid red");

		$("div.dcell").map(function(index, elem) { 
			return $(elem).children()[1]; //Returns the children 
		}).css("border", "thick solid blue");
	});
</script>

If we wish to confirm what something is, we can use the is method, with the following modifiers:

is(selector) 			//Returns true if the jQuery object contains at least one of the elements matched by the selector

is(HTMLElement[]) 		//Returns true if the jQuery object contains the specified element, or at least one of the elements in the specified array
is(HTMLElement) 		

is(jQuery) 				//Returns true if the jQuery object contains at least one of the elements in the argument object

is(function(index)) 	//Returns true if the function returns true at least once

An example of using the is method:

<script type="text/javascript">
	$(document).ready(function() {
		var isResult = $("img").is(function(index) {
			return this.getAttribute("src") == "rose.png";
		});
		console.log("Result: " + isResult);
	});
</script>

jQuery uses a stack to trace all of the selections made, and what follows is a list of said methods that allows modifications for this:

end() 		// Pops the current Selection off the stack and returns to the previous selection

addBack() 	// adds the previous selection to the current selection, with an optional selector that filters the previous selection
addBack(selector)

An example of using one of these stack modifiers:

<script type="text/javascript">
	$(document).ready(function() {
		$("label").first().css("border", "thick solid blue").end().css("font-size", "1.5em"); //Select first element, call border on it, cancel selection of only first of 
		//label elements, leaving selection at every label, and then call font-size on said elements
	});
</script>

We can also use the addBack() method to define so that we add to the previous selection:

<script type="text/javascript">
	$(document).ready(function() {
		$("div.dcell").children("img").addBack().css("border", "thick solid blue"); //Traces back selection to all the div's who's ID corespond to dcell
	});
</script>

in jQuery, we can navigate down the hierarchy by virtue of selections of children and what not, as follows:

children() 		//Selects all the children of all elements in the jQuery object

children(selector) //Selects all of the elements that match the selector and that are children of the elements in the jQuery object

contents() 		//Returns the children and text content of all the elements in the jQuery object

find() 			//Selects descendants of the elements in the jQuery objects

find(selector) 	//Selects descendants of the elements matching the selector  in the jQuery objects

find(jQuery) 	//Selects the intersection between children of the jQuery object selected, and the argument object
find(HTMLElement)
find(HTMLElement[])

Examples of using the children() and find() methods:

<script type="text/javascript">
	$(document).ready(function() {
		var childCount = $("div.drow").children().each(function(index, elem) {
			console.log("Child " + elem.tagName + " " + elem.className);
		}).length; //Lists out all of the children and summarizes the total amount of children
		console.log("There are " + childCount + " children"); //prints out the amount of children

		var descCount = $("div.drow").find("img").each(function(index, elem) { //loop through the results of each element found by the img tag, log it, then summarize length
			console.log("Descendant: " + elem.tagName + " " + elem.src);
		}).length; 
		console.log("There are " + descCount + " img descendants"); //print out how many there are
	});
</script>

NOTE: In jQuery, duplication does not occur upon selection of children, as follows:

<script type="text/javascript">
	$(document).ready(function() {
		$("div.drow").add("div.dcell").find("img").each(function(index, elem) { //Despite adding the dcells to drow, causing duplication, this duplication is ignored due to
		//being descendants
			console.log("Element: " + elem.tagName + " " + elem.src);
		});
	});
</script>

An example of interacting based on intersections:

<script type="text/javascript">
	$(document).ready(function() {
		var jq = $("label").filter("[for*=p").not("[for=peony]"); //Select all label elements that have p in their name, exclude peony in iteration
		$("div.drow").find(jq).css("border", "thick solid bar"); //select div rows, find said elements, run css modification on them
	});
</script>

If we wish to navigate through the DOM hierarchy, we can use the following selectors, as follows:

closest(selector) 		//Selects the nearest ancestor for each element in the jQuery object that intersects with the specified selector
closest(selector, context)

closest(jQuery) 		//Selects the nearest ancestor for each element in the jQuery object that intersects with the elements contained in the argument object
closest(HTMLElement)

offsetParent() 			//Finds the nearest ancestor that has a value for the CSS position property of fixed, absolute or relative.

parent() 				//Selects the parent for each element in the jQuery object, or filtered by the selector
parent(selector)

parents() 				//Selects the parents for each element in the jQuery object, or filtered by the selector
parents(selector)

parentsUntil(selector) 				//Selects the ancestors for each element in the jQuery object until a match against the selector occurrs
parentsUntil(selector, selector)

parentsUntil(HTMLElement) 			//Selects the ancestor for each element in the jQuery object until one of the specified elements is encountered
parentsUntil(HTMLElement, selector)
parentsUntil(HTMLElement[])
parentsUntil(HTMLElement[], selector)

Examples of interacting with the parents of objects:

<script type="text/javascript">
	$(document).ready(function(){
		$("div.dcell").parent().each(function(index, elem) {
			console.log("Element: " + elem.tagName + " " + elem.id);
		});

		$("div.dcell").parent("#row1").each(function(index, elem) {
			console.log("Filtered element: " + elem.tagName + " " + elem.id);
		});
	});
</script>

An example of selecting all of the parents for different objects:

<script type="text/javascript">
	$(document).ready(function() {
		$("img[src*=peony], img[src*=rose]").parents().each(function(index, elem) { //Write the ancestors for the two image elements of peony and rose
			console.log("Element: " + elem.tagName + " " + elem.className + " " + elem.id);
		});
	});
</script>

If we wish, we can define the search a bit more, with parentsUntil():

<script>
	$(document).ready(function() {
		$("img[src*=peony], img[src*=rose]").parentsUntil("form").each(function(index, elem) { //Selects parents, omits form parent elements
			console.log("Element: " + elem.tagName + " " + elem.className + " " + elem.id);
		});
	});
</script>

We can further more cause filters on the results, if we wish, as follows:

<script type="text/javascript">
	$(document).ready(function() {
		$("img[src*=peony], img[src*=rose]").parentsUntil("form", ":not(.dcell)").each(function(index, elem) { //Omits .dcell elements
			console.log("Element: " + elem.tagName + " " + elem.className + " " + elem.id);
		});
	});
</script>

Examples of using the closest parent, follows:

<script type="text/javascript">
	$(document).ready(function() {
		$("img").closest(".drow").each(function(index, elem) {
			console.log("Element: " + elem.tagName + " " + elem.className + " " + elem.id);
		});

		var contextElem = document.getElementById("row1");
		$("img").closest(".drow", contextElem).each(function(index, elem) {
			console.log("Context element " + elem.tagName + " " + elem.className + " " + elem.id);
		});
	});
</script>

The above script, showcases the closest element based on said identifiers and relative constraints

An example of doing closest on context where we check against the closest to said references:

<script type="text/javascript">
	$(document).ready(function() {
		var jq = $("#row1, #row2, form");

		$("img[src*=rose]").closest(jq).each(function(index, elem) { //run a check to declare which one is the closest of the specified elements
			console.log("Context Element: " + elem.tagName + " " + elem.className + " " + elem.id);
		});
	});
</script>

If we wish to select the closest CSS element aligned element with absolute, relative or fixed, we can use offsetParent:

<html>
<head>
	<title>Example</title>
	<script src="jquery-2.0.2.js" type="text/javascript"></script>
	<link rel="stylesheet" type="text/css" href="styles.css"/>
	<style type="text/css">
		#oblock {position: fixed; top: 120px; left: 50px}
	</style>
	<script type="text/javascript">
		$(document).ready(function() {
			$("img[src*=aster]").offsetParent().css("background-color", "lightgrey");
		});
	</script>
</head>
html stuff proceeds

We can of course, also, if we wish, select all the next coming elements in different ways as follows:

next() 					//Selects the immediate next sibling for each element in the jQuery object, optionally filtered by a selector
next(selector)

nextAll() 				//Selects all of the next siblings for each element in the jQuery object, optionally filtered by a selector
nextAll(selector)

nextUntil(selector) 			//Selects the next siblings for each element up to (and excluding) an element that matches the selector
nextUntil(selector, selector)	//or an element in the jQuery object or HTMLElement Array. The results can optionally be filtered by a 
								//selector as the second argument to the method
nextUntil(jQuery)
nextUntil(jQuery, selector)

nextUntil(HTMLElement[])
nextUntil(HTMLElement[], selector)

prev() 							//Selects the immediate previous sibling for each element in the jQuery object, optionally filtered by a selector
prev(selector)

prevAll() 						//Selects all of the previous siblings for each element in the jQuery object, optionally filtered by a selector
prevAll(selector)

prevUntil(selector) 			//Selects the previous siblings for each element up to (and excluding) an element that matches the selector or an element
								//in the jQuery object or the HTMLElement Array. Can be sorted out by a second selector
prevUntil(selector, selector)
prevUntil(jQuery)
prevUntil(jQuery, selector)
prevUntil(HTMLElement[])
prevUntil(HTMLElement[], selector)

siblings() 						//Selects all siblings for each of the elements in the jQuery object, can be filtered by a second selector
siblings(selector)

An example of using siblings() call:

<head>
	<title>Example</title>
	<script src="jquery-2.0.2.js" type="text/javascript"></script>
	<link rel="stylesheet" type="text/css" href="styles.css"/>
	<script type="text/javascript">
		$(document).ready(function() {
			$("img[src*=aster], img[src*=primula]").parent().siblings().css("border", "thick solid blue"); //Chains onto siblings of said elements
		});
	</script>
</head>
etc.

an example of calling siblings on a DOM element:

<script type="text/javascript">
	$(document).ready(function() {
		$("#row1 div.dcell").siblings().css("border", "thick solid blue"); //Call siblings to the row1 div.dcell
	});
</script>

We can of course call calls to all next coming elements and previous ones:

<script type="text/javascript">
	$(document).ready(function() {
		$("img[src*=aster]").parent().nextAll().css("border", "thick solid blue");
		$("img[src*=primula").parent().prevAll().css("border", "thick double red");
	});
</script>

If we wish, we can actually manipulate the DOM, by virtue of creating elements using the $ function:

<head>
	<title>Example</title>
	<script src="jquery-2.0.2js" type="text/javascript"></script>
	<link rel="stylesheet" type="text/css" href="styles.css"/>
	<script type="text/javascript">
		$(document).ready(function() {
			var newElems = $("<div class='dcell'><img src='lily.png'/></div>"); //Create a div with the class dcell and put in the lily.png into it

			newElems.each(function (index, elem) {
				console.log("New element: " + elem.tagName + " " + elem.className);
			});

			newElems.children().each(function(index, elem) {
				console.log("Child: " + elem.tagName + " " + elem.src);
			});
		});
	</script>
</head>

NOTE: the jQuery object returned by the $ contains only the top layer of the HTML elements from said HTML fragments. You can still navigate them as per usual, of course

In jQuery, we can also clone objects, which clones the object in question and all of the descendants of said object, with clone():

<script type="text/javascript">
	$(document).ready(function() {
		var newElems = $("div.dcell").clone();

		newElems.each(function (index, elem) {
			console.log("New element: " + elem.tagName + " " + elem.className);
		});

		newElems.children("img").each(function(index, elem) {
			console.log("Child: " + elem.tagName + " " + elem.src);
		});
	});
</script>

NOTE: If we wish to clone the event handlers and data associated with said object, we could give a true argument to the clone() method

If we wish to create HTML elements with the DOM API, we can do so, as follows:

<script type="text/javascript">
	$(document).ready(function() {
		var divElem = document.createElement("div"); //Create a div
		divElem.classList.add("dcell"); //add dcell to it's classlist

		var imgElem = document.createElement("img"); //Declare a img element
		imgElem.src = "lily.png"; //declare the source to be lily.png

		divElem.appendChild(imgElem);

		var newElems = $(divElem);

		newElems.each(function (index, elem){ //loop through each of the attributes for the element
			console.log("New element: " + elem.tagName + " " + elem.className); //print out the new element attributes
		});
	});
</script>

We can also, in jQuery, insert child and descendant elements, with the following methods:

append(HTML) 				//Inserts the specified elements as the last children of all of the elements in the DOM
append(jQuery)
append(HTMLElement[])

prepend(HTML) 				//Inserts the specified element as the first children of all of the elements in the DOM
prepend(jQuery)
prepend(HTMLElement[])

appendTo(jQuery) 			//Inserts elements in the jQuery object as the last children of the elements specified by the arguments
appendTo(HTMLElement[])

prependTo(HTML) 			//Inserts elements in the jQuery object as the first children of the elements specified by the arguments
prependTo(jQuery)
prependTo(HTMLElement[])

append(function) 			//Appends or prepends the result of a function to the elements in the jQuery object
prepend(function)

When we use the append method, we have to specify all the elements to said element, in order, as is shown:

<script type="text/javascript">
	$(document).ready(function() {
		var newElems = $("<div class='dcell'></div>").append("<img src='lily.png'/>").append("<label for='lily'>Lily</label>").append("<input name='lily' value='0' required />");
		//build the element with relevant attributes
		newElems.css("border", "thick solid red"); //run css on the element

		$("#row1").append(newElems); //append the element to a existing element
	});
</script>

If we wish, we could use the prepend methods, which act much akin to the ones above, the only difference being that the elements are put at the BEGINNING, instead of after,
which prepend refers to.

Note: You can pass multiple arguments to prepend methods

NOTE: If we were to append to one row and prepend the same designated element to another row, we'd effectively just move them, not actually duplicate them.

To cause duplication, you must pass the argument followed by .clone() call, to actually clone the attribute you are passing, as to not just cause a 
moving call.

If we use the appendTo() call, we technically do it reverse, with having the order being:

<element>.appendTo(<relevant place>);

An example:

$("img").appendTo(newElems);

To use functions to append stuff is a bit different, where we use the returned result to append it to the relevant place, as follows:

//assume jQuery code b4 here

var orchidElems = $("<div class='dcell'/>").append("<img src='orchid.png'/>").append("<label for='orchid'>Orchid:</label>").append("<input name='orchid' value='0' required />");

var lilyElems = $("<div class='dcell'/>").append("<img src='lily.png'/>").append("<label for='orchid'>Orchid:</label>").append("<input name='orchid' value='0' required />");

$("div.drow").append(function(index, html) {
	if (this.id == "row1") { //Conditional to see if the id of the element related is row1
		return orchidElems; //if it is, add orchiElems
	} else {
		return lilyElems; //Else, add lilyElems
	}
});

//assume jQuery continues here

We can also insert parent and ancestor elements, which in jQuery, is called wrapping: //since one element is wrapped by another

wrap(HTML) 				//Wraps the specified elements around each of the elements in the jQuery object
wrap(jQuery)
wrap(HTMLElement[])

wrapAll(HTML) 			//Wraps the specified elements around the set of elements in the jQuery object (as a group)
wrapAll(jQuery)
wrapAll(HTMLElement[])

wrapInner(HTML)			//Wraps the specified elements around the content of the elements in the jQuery object
wrapInner(jQuery)
wrapInner(HTMLElement[])

wrap(function) 			//Wraps with a function
warpInner(function)

NOTE: The counterpart to wrap to unwrap

We can use wrapping to assign a parent or ancestor to something, an example follows:

<script type="text/javascript">
	$(document).ready(function() {
		var newElem = $("<div/>").css("border", "thick solid red");
		$("div.drow").wrap(newElem); //assigns a div with css modified border to wrap the entirety of the drow elements, causing wrapping around every entire row
	});
</script>

To wrap everything into one element, you just gotta call wrapAll() instead of wrap()

If we wish to wrap the inner elements of a jQuery object, we can use the wrapInner():

<script type="text/javascript">
	$(document).ready(function() {
		var newElem = $("<div/>").css("border", "thick solid red");

		$(".dcell").wrapInner(newElem);
	});
</script>

We could achieve the above code of wrapping inner elements, with append and clone, as follows:

<script type="text/javascript">
	$(document).ready(function() {

		var newElem = $("<div/>").css("border", "thick solid red");
		$(".dcell").each(function(index, elem) {
			$(elem).append(newElem.clone().append($(elem).children()));
		});
	});
</script>

We can also, of course, use wrapping by virtue of functions:

<script type="text/javascript">
	$(document).ready(function() {
		$(".drow").wrap(function(index) {
			if ($(this).has("img[src*=rose]").length > 0 {
				return $("<div/>").css("border", "thick solid blue");;
			} else {
				return $("<div/>").css("border", "thick solid red");;
			}
		});
	});
</script>

We can of course, insert sibling elements, as well, with:

after(HTML) 			//Inserts the specified elements as siblings to each element in the jQuery object
after(jQuery)
after(HTMLElement[])

before(HTML) 			//Inserts the specified elements as previous siblings to each element in the jQuery object
before(jQuery)
before(HTMLElement[])

insertAfter(HTML) 		//Inserts the elements in the jQuery object as the next siblings for each element specified in the argument
insertAfter(jQuery)
insertAfter(HTMLElement[])

insertBefore(HTML) 		//Inserts the elements in the jQuery object as the previous siblings for each element specified in the argument
insertBefore(jQuery)
insertBefore(HTMLElement[])

after(function) 		//inserts dynamically with a function
before(function)

example of after and before:

<script type="text/javascript">
	$(document).ready(function() {
		var orchidElems = $("<div class='dcell'/>").append("<img src='orchid.png'/>").append("<label for='orchid' value='0' required />");
	

	var lilyElems = $("<div class='dcell' />").append("<img src='lilypng'/>").append("<label for='orchid' value='0' required />");

	$(orchidElems).add(lilyElems).css("border", "thick solid red");

	$("#row1 div.dcell").after(orchidElems); //After each element of row1's div.dcells, put in a orchidElems div dcell
	$("#row2 div.dcell").before(lilyElems); //Same as above, but before, and put in lilys instead
	});
</script>

We can do the same as above, in the reverse order, with insertAfter or insertBefore

To insert with a function, we declare the object and then return it:

<script type="text/javascript">
	$(document).ready(function() {
		$("#row1 div.dcell").after(function(index, html) {
			if (index == 0) {
				return $("<div class='dcell'/>").append("<img src='orchid.png'/>").append("<label for='orchid'>Orchid:</label>").append("<input name='orchid' value='0' required />").css("border", "thick solid red");
			} else if(index == 1){
				same as above with return statement of declared object
			}
		});
	});
</script>

To replace objects, we can use the replaceWith method calls:

replaceWith(HTML) 			//Replace the elements in the jQuery object with the specified content
replaceWith(jQuery)
replaceWith(HTMLElement[])

replaceAll(jQuery) 			//Replace the elements specified by the argument with the elements in the jQuery object
replaceAll(HTMLElement[])

replaceWith(function) 		//Replaces the elements in the jQuery object dynamically using a function

//assume declarion has been done

$("#row1").children().first().replaceWith(newElems);

$("<img src='carnation.png'/>").replaceAll("#row2 img").css("border", "thick solid red");

//etc

To replace with a function, we return a specific object that has been designed for it, as follows:

<script type="text/javascript">
	$(document).ready(function() {
		$("div.drow img").replaceWith(function(){
			if (this.src.indexOf("rose") > -1) {
				return $("<img src='carnation.png'/>").css("border", "thick solid red"); //return the modified rose
			} else if (this.src.indexOf("peony") > -1) {
				return $("<img src='lily.png'/>").css("border", "thick solid red"); //return the modified peony
			} else{
				return $(this).clone(); //To assure that the element is not removed, if it's not caught up by the other things.
				//by default, jQuery removes things that are not a hit, so we add this clause ot ensure they are kept.
			}
		});
	});
</script>

To remove things, we can use the following functions:

detach() 				//Removes elements from the DOM. The data associated with the elemetns is preserved
detach(selector)

empty() 				//Removes all of the child nodes from each element in the jQuery object

remove() 				//Removes elements from the DOM. As the elements are removed, the data associated with the elements is destroyed
remove(selector)

unwrap() 				//Removes the parent of each of the elements in the jQuery object

An example of using the remove method:

<script type="text/javascript">
	$(document).ready(function() {
		$("img[src*=daffodil], img[src*=snow]").parent().remove();  //Removes the parents of daffodil and snow src img elements
	});
</script>

An example of removing using a selector:

<script type="text/javascript">
	$(document).ready(function() {
		$("div.dcell").remove(":has(img[src*=snow], img[src*=daffodil])");
	});
</script>

Both of the above scripts have the same result, the difference being by the virtue of using a selector allows us to select that they have certain elements,
in this case that they are img elements with a src of snow or daffodil

NOTE: The returned set of using remove, is the original selection of elements. Thus, the result of removal is not in fact coming from the returned value of
said methods.

If we wish to remove, except we wish to preserve the associated data, we can use the detach():

<script type="text/javascript">
	$(document).ready(function() {
		$("#row2").append($("img[src*=aster]").parent().detach());
	});
</script>

If we wish to empty a element, we can use the empty() method:

<script type="text/javascript">
	$(document).ready(function() {
		$("#row1").children.().eq(1).empty().css("border", "thick solid red");
	});
</script>

If we wish to remove the parent classes or parent elements (the wrapper classes or wrapper elements), we can use unwrap():

<script type="text/javascript">
	$(document).ready(function() {
		$("div.dcell").unwrap();
	});
</script>

The above code will remove the containing rows elements, as the rows are parents of the div class="dcell" elements

What follows, is a listing of the methods we can use for working with attributes:

Name 								Desc

attr(name) 							Gets the value of the attribute with the specified name for the first element in the jQuery object

attr(name, value) 					Sets the value of the attribute with the specified name of the specified value for all of the elements in the jQuery object

attr(map) 							Sets the attributes specified in the map object for all of the elements in the jQuery object

attr(name, function) 				Sets the specified attribute for all of the elements in the jQuery object using a function

removeAttr(name) 					Remove the attribute from all of the elements in the jQuery object
removeAttr(name[])

prop(name) 							Returns the value of the specified property for the first element in the jQuery object

prop(name, value) 					Sets the value for one or more properties for all of the elements in the jQuery object
prop(map) 							

prop(name, function) 				Sets the value of the specified property for all of the elements in the jQuery object using a function

removeProp(name) 					Removes the specified property from all of the elements in the jQuery object

To get the first attribute of a jQuery object:

var srcValue = $("img").attr("src"); //returns a string of the first attribute that is related to src of img elements

To get all, for said attribute:

<script type="text/javascript">
	$(document).ready(function() {
		$("img").each(function(index, elem) {
			var srcValue = $(elem).attr("src");
			console.log("Attribute Value : " + srcValue);
		});
	});
</script>

To set a value, we could do as follows:

<script type="text/javascript">
	$(document).ready(function() {
		$("img").attr("src", "lily.png");
	});
</script>

To set multiple values, we could do as follows:

<script type="text/javascript">
	$(document).ready(function(){
		var attrValues = {
			src: "lily.png",
			style: "border: thick solid red"
		};

		$("img").attr(attrValues);
	});
</script>

If we wish to set elements dynamically, we could use a function as follows:

<script type="text/javascript">
	$(document).ready(function() {
		$("img").attr("src", function(index, oldVal) { //Assign the oldVal to be each element that we wish to operate upon
			if (oldVal.indexOf("rose") > -1) { //if said elements index of rose is greater than -1 (i.e it exists)
				return "lily.png"; //Then set it to lily.png
			} else if ($(this).closest("#row2").length > 0) { 	//Else if the closest element of row2's length is greater than 0
				return "carnation.png"; //make it into another flower
			}
		});
	});
</script>

To remove attributes, we could do as follows:

<script type="text/javascript">
	$(document).ready(function() {
		$("img").attr("style", "border: thick solid red"); //asign an attribute to every img
		$("img:odd").removeAttr("style"); //remove the attribute for every odd picture
	});
</script>

The difference between running prop methods and attrb methods, is that prop runs for the attributes defined by the HTML, instead of jQuery related attributes, as follows:

<script type="text/javascript">
	$(document).ready(function() {
		$("*[class]").each(function(index, elem) {
			console.log("Element: " + elem.tagName + " " + $(elem).prop("className"));
		});
	});
</script>

The above prints out classes related to the HTML definitions of stuff

in jQuery, we can off course work with classes as well:

name 						desc

addClass(name name) 		Adds all of the elements in a jQuery object to the specified class

addClass(function) 			Assigns the elements in a jQuery object to classes dynamically

hasClass(name) 				Returns true if at least one of the elements in the jQuery object is a member of the specified class

removeClass(name name) 		Removes the elements in the jQuery object from the specified class

removeClass(function) 		Removes dynamically from a specified class

toggleClass() 				Toggles all of the classes that the jQuery object belongs to

toggleClass(boolean) 		Toggles all of the classes that the elements in the jQuery object belong to in one direction

toggleClass(name) 			Toggles one or more named classes for all of the elements in the jQuery object
toggleClass(name name)

toggleClass(name, boolean) 	Toggles a named class for all of the elements in the jQuery object in one direction

toggleClass(function, boolean) Toggles classes dynamically for all of the elements in a jQuery object

An example of manipulating class relations and testing membership:

<style type="text/css">
	img.redBorder {border: thick solid red}
	img.blueBorder {border: thick solid blue}
</style>
<script type="text/javascript">
	$(document).ready(function() {
		$("img").addClass("redBorder");
		$("img:even").removeClass("redBorder").addClass("blueBorder"); //Remove the redborder class and add a blueborder class to each even class

		console.log("All elements: " + $("img").hasClass("redborder"));
		$("img").each(function(index, elem) {
			console.log("Element: " + $(elem).hasClass("redBorder") +  " " + elem.src);
		});
	});
</script>

To add classes with a function, we could do as follows:

<script type="text/javascript">
	$(document).ready(function() {
		$("img").addClass(function(index, currentClasses)) {
			if (index % 2 == 0) {
				return "blueBorder";
			} else {
				return "redBorder";
			}
		});
	});
</script>

if we wish to remove classes, we can also do so dynamically with functions:

<script type="text/javascript">
	$(document).ready(function() {
		$("img").filter(":odd").addClass("redBorder").end().filter(":even").addClass("blueBorder");

		$("img").removeClass(function(index, currentClasses) {
			if ($(this).closest("#row2").length > 0 && currentClasses.indexOf("redBorder") > -1) {
				return "redBorder";
			} else {
				return "";//Removes the redborder from elements that are descendants of row2 and have a red border
			}
		});
	});
</script>

Toggle, means to add to elements that are not members and remove from ones that are. An example of this follows:

<script type="text/javascript">
	$(document).ready(function() {
		$("img").filter(":odd").addClass("redBorder").end().filter(":even").addClass("blueBorder");

		$("<button>Toggle</button>").appendTo("#buttonDiv").click(doToggle);

		function doToggle(e){
			$("img").toggleClass("redBorder");
			e.preventDefault();
		};
	});
</script>

We could of course, switch around how the placement of the different placements occurs, and create stuff so that it applies to only a certain set of 
elements based on ordering

If we wish to modify several classes at once, we just lump together their names in the toggleClass call:

$("img").toggleClass("redBorder blueBorder");

To toggle all classes, we simply call toggleClass();

if we add a second argument, true, to toggleClass, we turn on said class

if we add a second arg with false, we toggle said class off

To do dynamic interaction with toggles, we could do as follows:

<script type="text/javascript">
	$(document).ready(function() {
		$("img").addClass("blueBorder");
		$("img:even").addClass("redBorder");

		$("<button>Toggle</button>").appendTo("#buttonDiv").click(doToggle); //add a click class for doToggle on the button that is sett to a Div with Toggle

		function doToggle(e){
			$("img").toggleClass(function(index, currentClass) {
				if (index % 2 == 0) {
					return "redBorder";
				} else {
					return "";
				}
			});
			e.preventDefault();
		};
	});
</script>

To set CSS values, just make a function call with CSS on the respective object.

We can also chain functions calls to the css.

But we can also do it by virtue of a map:

<script type="text/javascript">
	$(document).ready(function() {
		var cssVals = {
			"font-size": "1.5em",
			"color": "blue"
		};

		$("label").css(cssVals);
	});
</script>

Further more, we can do relative values, as in increment and decrement assignments of CSS ground values:

<script type="text/javscript">
	$(document).ready(function() {
		$("label:odd").css("font-size", "+=5")
		$("label:even").css("font-size", "-=5")
	});
</script>

We can of course do it with functions:

<script type="text/javascript">
	$(document).ready(function() {
		$("label").css("border", function(index, currentValue) {
			if($(this).closest("#row1").length > 0) {
				return "thick solid red";
			} else if (index % 2 == 1) {
				return "thick double blue";
			}
		});
	});
</script>

Beyond this, we have a wide array of normalized CSS methods to aquire values regarding stuff:

Name 									Desc

height() 								Gets the height in pixels for the first element in the jQuery object

height(value) 							Sets the height for all of the elements in the jQuery object

innerHeight() 							Gets the inner height of the first element in the jQuery object (height + padding NO BORDER OR MARGIN)

innerWidth() 							Gets inner width of the first element in the jQuery object (width + padding NO BORDER OR MARGIN)

offset() 								Returns the co-ordinates of the first element in the jQuery object relative to the document

outerHeight(boolean) 					Gets height of first element in the jQuery object, including padding and border; boolean for margin

outerWidth(boolean) 					as above, but for width

position() 								Returns the coordinates of the first element in the jQuery object relative to the offset

scrollLeft() 							gets horizontal or vertical pos of first element in jQuery object 							
scrollTop()

scrollLeft(value) 						Sets the horizontal or vertical pos of all elements in the jQuery object 
scrollTop(value) 

width() 								Gets width of first Element in the jQuery object
width(value) 							Sets width of all elements in the jquery object

height(function) 						sets height or width for all elements in the jQuery object using functions
width(function)

We can retrieve the pos of an element and then get it's values: top and left:

<script type="text/javascript">
	$(document).ready(function() {
		var pos = $("img").position();
		console.log("position top: " + pos.top + " left: " + pos.left);
	});
</script>

To set values with a function, we could do as follows:

<script type="text/javascript">
	$(document).ready(function() {
		$("#row1.png").css("border", "thick solid red").height(function(index, currentValue) {
			return (index + 1) * 25;
		});
	});
</script>

We can of course, if we wish, manipulate Element Contents if we wish:

name 						Desc

text() 						gets the combined text contents of all the elements in the jQuery object and their descendants

text(value) 				Sets the content of each element in the jQuery object

html() 						gets the HTML contents of the first element in the jQuery object

html(value) 				sets the content for each element in the jQuery object

text(function) 				sets the text or HTML content using a function
html(function)

an example of getting HTML structure:

<script type="text/javascript">
	$(document).ready(function() {
		var html = $("div.dcell").html();
		console.log(html);
	});
</script>

The above thing logs out the related HTML elements of said variable

An example of setting HTML elements:

<script type="text/javascript">
	$(document).ready(function() {
		$("#row2 div.dcell").html($("div.dcell").html()); //Defines the row2 div.dcell's to be the first div.dcell's HTML contents
	});
</script>

To set contents using a function, we could do as follows:

<script type="text/javascript">
	$(document).ready(function() {
		$("label").css("border", "thick solid red").text(function(index, currentValue) { //Access the label element and run to replace it's text to be the function
			return "Index " + index; //assigns the text to be the index of the respective element
		});
	});
</script>

To aquire values from Form Elements, we can use the following set of methods:

val() 				//Returns the value of the first element in the jQuery object

val(value) 			//Sets the value of all of the elements in the jQuery object

val(function) 		//Sets the values for the elements in the jQuery object using a function

an example:

<script type="text/javascript">
	$(document).ready(function() {
		$("input").each(function(index, elem) {
			console.log("Name: " + elem.name + " Val: " + $(elem).val());
		});
	});
</script>

We can also set values of forms, with event driven functions:

<script type="text/javascript">
	$(document).ready(function() {
		$("<button>Set values</button>").appendTo("#buttonDiv").click(function (e) {
			$("input").val(100);
			e.preventDefault();
		})
	});
</script>

We can of course, also make a custom function to reflect the values we wish to obtain or have:

<script type="text/javascript">
	$(document).ready(function() {
		$("input").val(function(index, currentVal) {
			return (index + 1) * 100;
		});
	});
</script>

The above code makes a incrementing range of values with 100 for each index

We can also associate data with jQuery objects, as follows:

name 						Desc

data(key, value) 			Associates one or more key/value pairs with the elements in a jQuery object
data(map)

data(key) 					Retrives the value associated with the specified key from the first element in the jQuery object

data() 						Retrieves the key/value pair from the first element in the jQuery Object

removeData(key) 			Removes the data associated with the specified key from all of the elements in the jQuery object

removeData() 				Removes all of the data items from all of the elements in the jQuery object

An example of setting, testing for, and deleting data values:

<script type="text/javascript">
	$(document).ready(function() {
		//Set the data
		$("img").each(function() {
			$(this).data("product", $(this).siblings("input[name]").attr("name")); //Aquire the name attribute for every sibling and store it in the data related to the img
		});

		//find elements with the data and read the values
		$("*").filter(function() { //filter based on a function
			return $(this).data("product") != null; //Return the value of the data if the value is not null
		}).each(function() { //Run a loop on all the values
			console.log("Elem: " + this.tagName + " " + $(this).data("product")); //Log out the tagNames and the values of the product 
		}); 

		//Remove all data
		$("img").removeData(); //remove the data associated with the images
	});
</script>

in jQuery, we can bind events that triggers specific functions on interactions to certian objects:

name 								desc

bind(eventType, function) 			Adds an event handler to the elements in a jQuery object with an optional data item
bind(eventType, data, function) 	

bind(eventType, boolean) 			Creates a default handler that always returns false, preventint default action: the boolean controls event bubbling

bind(map) 							Adds a set of event handlers based on a map object to all elements in the jQuery object

one(eventType, function) 			Adds an event handler to each element in a jQuery object with an optional data item: the handler will be unregistered
one(eventType, data, function) 		from an element once it has been executed

unbind() 							Removes all event handlers on all elements in a jQuery object

unbind(eventType) 					Removes a previously registered event handler from all elements in the jQuery object

unbind(eventType, boolean) 			Removes a previously registered always-false handler from all elements in a jQuery object

unbind(Event) 						Removes an event handler using an Event object

An example of binding mouseEvents to a img object:

<script type="text/javascript">
	$(document).ready(function() {
		function handleMouseEnter(e) {
			$(this).css({
				"border": "Thick solid red", "opacity": "0.5"
			});
		};

		function handleMouseOut(e){
			$(this).css({
				"border": "";
				"opacity": ""
			});
		}

		$("img").bind("mouseenter", handleMouseEnter).bind("mouseout", handleMouseOut);
	});
</script>

The event object itself, has a set of methods, as follows:

name 									desc 															returns

currentTarget 							Gets the element whose listeners are currently being invoked 	HTMLElement

Data 									gets the optional data passed to the bind method when the 		Object
										handler was registered

isDefaultPrevented() 					Returns true if the preventDefault method has been called 		Boolean

isImmediatePropagationStopped() 		Returns true if the stopImmediatePropagation method has  		Boolean
										been called

isPropagationStopped() 					Returns true if the stopPropagation method has been called 		Boolean

originalEvent 							Returns the original DOM event object 							Event

pageX 									Returns the mouse position relative to the left edge of 		number
pageY									the document

preventDefault() 						prevents the Default action associated with the event from 		void
										being performed

relatedTarget 							for mouse events; returns related element 						HTMLElement

Result 									Returns the result from the last event handler that processed 	Object
										this event

stopImmediatePropagation() 				Prevents any other event handlers being called for this event 	void

stopPropagation() 						Stops bubbling, but allows current target event 				void

Target 									Gets the element that triggered the event 						HTMLElement

timeStamp 								Gets the time at which the event was triggered 					number

Type 									Gets the type of event 											string

Which 									Returns the button or key that was pressed for mouse and 		number
										keyboard events

An example of registering a function to handle multiple event types:

<script type="text/javascript">
	$(document).ready(function() {
		function handleMouse(e) {
			var cssData = {
				"border": "thick solid red",
				"opacity": "0.5"
			}
			if (event.type == "mouseout") {
				cssData.border = "";
				cssData.opacity = "";
			}
			$(this).css(cssData);
		}

		$("img").bind("mouseenter mouseout", handleMouse);
	});
</script>

We can use map objects to register Event Handlers as well:

<script type="text/javascript">
	$(document).ready(function() {
		$("img").bind({
			mouseenter: function() {
				$(this).css("border", "thick solid red");
			},
			mouseout: function() {
				$(this).css("border", "");
			}
		});
	});
</script>

We can provide data to the event handler functions, as well, if we wish:

<script type="text/javascript">
	$(document).ready(function() {
		function handleMouse(e) {
			var cssData = {
				"border": "thick solid" + e.data,
			}

			if(event.type == "mouseout"){
				cssData.border = "";
			}
			$(this).css(cssData);
		}

		$("img:odd").bind("mouseenter mouseout", "red", handleMouse);
		$("img:even").bind("mouseenter mouseout", "blue", handleMouse);
	});
</script>

We can prevent default actions on events:

<script type="text/javascript">
	$(document).ready(function() {
		$("button:submit").bind("click", function(e) {
			e.preventDefault();
		});
	});
</script>

We can also use the bind method to define which default action we wish to block and wether it is allowed to bubble:

<script type="text/javascript">
	$(document).ready(function() {
		$("button:submit").bind("click", false);
	});
</script>

We can also remove event handler functions:

<script type="text/javascript">
	$(document).ready(function() {

		function handleMouse(e) {
			var cssData = {
				"border": "thick solid red",
				"opacity": "0.5"
			}

			if (event.type == "mouseout") {
				cssData.border = "";
				cssData.opacity = "";
			}
			$(this).css(cssData);
		}

		$("img").bind("mouseenter mouseout", handleMouse);

		$("img[src*=rose]").unbind();
	});
</script>

We could further specify the unbinding, if we wish as follows:

$("img[src*=rose]").unbind("mouseout");

We can also do unbindings from within the event handler, which can cause us to have interaction logic to define how it should behave:

<script type="text/javascript">
	$(document).ready(function() {
		var handledCount = 0;

		function handleMouseEnter(e) {
			$(this).css("border", "thick solid red");
		}
		function handleMouseExit(e) {
			$(this).css("border", "");
			handledCount ++; //incremeent each time the vent is fired
			if(handledCount == 2) { //unbind upon twice triggered
				$(this).unbind(e);
			}
		}
		$("img").bind("mouseenter", handleMouseEnter).bind("mouseout", handleMouseExit)
	});
</script>

We can also make a explicit function call to one() to assert that the event will trigger once:

<script type="text/javscript">
	$(document).ready(function() {
		function handleMouseEnter(e) {
			$(this).css("border", "thick solid red");
		};

		function handleMouseOut(e) {
			$(this).css("border", "");
		};

		$("img").one("mouseenter", handleMouseEnter).one("mouseout", handleMouseOut);
	})
</script>

A problem with event binding, is that it's not live, per say, which means that further stuff can be added and then not 
register to be tied to the event handlers.

To support live binding, we have the following methods available:

name 									desc

on(events, selector, data, function) 	Defines handlers for events for elements that exist now or in the future
on(map, selector, data)

off(events, selector, function) 		Removes event handlers created using the on method
off(map, selector)

delegate(selector, eventType, function) Adds an event handler to the elements that match the selector (now or in the future) 
delegate(selector, eventType, data, 	attached to the elements in the jQuery object
		function)
delegate(selector, map)

undelegate() 							Removes delegated event handlers
undelegate(selector, eventType)

An example of using the on method:

<script type="text/javascript">
	$(document).ready(function() {
		$(document).on({
			mouseenter: function() {
				$(this).css("border", "thick solid red");
			},
			mouseout: function() {
				$(this).css("border", "");
			}
		}, "img");

		$("#row1").append($("<div class='dcell'/>").append("<img src='lily.png'/>").append("<label for='lily'>Lily:</label>").append("<input name='lily' value='0' required />"));
	});
</script>

Note: On is actually a event handler appended unto the document itself that matches against event types matching said elements

WE can specify multiple events using the on Method:

<script type="text/javascript">
	$(document).ready(function() {
		function handleMouse(event){
			if(event.type == "mouseenter"){
				$(this).css("border", "thick solid red");
			} else if (event.type == "mouseout"){
				$(this).css("border", "");
			}
		}

		$("#row1").on("mouseenter mouseout", "img", handleMouse);

		etc.
	});
</script>

We can of course also use off:

$("#row1").off("mouseout", "img"); //Turns off mouseout event input handler for images on row1

If we wish to specify in a more specified manner, where the event handlers for said elements should be, we could use .delegate:

<script type="text/javascript">
	$(document).ready(function() {
		$("#row1").delegate("img", {
			mouseenter: function() {
				$(this).css("border", "thick solid red");
			},
			mouseout: function() {
				$(this).css("border", "");
			}
		});

		etc.
	});
</script>

We can of course, cause manual triggers, as well:

<script type="text/javascript">
	$(document).ready(function() {
		$("img").bind({mouseenter: function() {
				$(this).css("border", "thick solid red");
			}, mouseout: function(){
				$(this).css("border", "");
			
		}
	});

	$("<button>Trigger</button>").appendTo("#buttonDiv").bind("click", function (e) {
		$("#row1 img").trigger("mouseenter");
		e.preventDefault();
	});
</script>

We can also trigger stuff manually with event objects:

<script type="text/javascript">
	$(document).ready(function() {
		$("#row1 img").bind("mouseenter", function() {
			$(this).css("border", "thick solid red");
		});

		$("#row2 img").bind("mouseenter", function(e) {
			$(this).css("border", "thick solid blue");
			$("#row1 img").trigger(e); //Causes manual trigger to #row1's images upon entering of second row
		});
	});
</script>

If we wish, we can use the triggerHandler method, to not enable default actions, skip bubbling and only act on the first element of the jQuery object:

//assume declared
$("#row2 img").bind("mouseenter", function(e) {
	$(this).css("border", "thick solid blue");
	$("#row1 img").triggerHandler("mouseenter");
});
//continue

We can also make shorthands for event handling:

$("img").mouseenter(function() { //is the same as calling bind for mouseenter
	$(this).css("border", "thick solid red");
});

A shorthand for calling the event triggers, is also as follows:

$("img").mouseenter(); //assuming that the mouseenter() has already been declared

Could use the shorthand for triggers as well:

$("img").trigger("mouseenter");

The document has a few event shorthand methods:

load(function) 				//Coresponds to the loaded event in the DOM

ready(function) 			//Corresponds to when the DOM is ready

unload(function) 			//Corresponds to unload, triggers upon exiting page

The browser has a few event shorthands as well:

error(function) 			//Corresponds to error event, triggered when error is met
 
resize(function) 			//corresponds to resize event, triggered when resize occurs

scroll(function) 			//Corresponds to scroll event, triggered when the scrollbars are used

The mouse event had some shorthands as well:


click(function) 			//Corresponds to click event

dbclick(function) 			//Coresponds to double click

focusin(function) 			//Corresponds to focus in

focusout(function) 			//Corresponds to focus out

hover(function) 			//Triggered when the mouse enters or leaves an element: When one function is specified, it is used for both
hover(function, function) 	//enter and exit events

mousedown(function) 		//Corresponds to the mousedown event, triggered when the mouse button is pressed over an element

mouseenter(function) 		//Corresponds to the mouseenter event, triggered when mouse enters element

mouseleave(function) 		//Corresponds to the mouseleave event, triggered when the mouse leaves an element

mousemove(function) 		//Corresponds to mousemove event, triggered when mouse moves in a given element

mouseout(function) 		//Corresponds to mouseout event, triggered when the mouse leaves the region of screen ovvupied by an element

mouseover(function) 		//Corresponds to mouseover event, triggered when mouse is moved over element

mouseup(function) 			//Corresponds to moseup event, triggered when mouse button is pressed over an element

When it comes to hover, the first responds to enter, the second to exit

Of course, we have the shorthand for the usual events as well:

blur(function) //Triggered on focus loss

change(function) //value changes

focus(function) //focus

select(function) //selected

submit(function) //submit of form

keydown(function) //key pressed

keyup(function) //key released

keypress(function) //Press and release of a key

We have the basic setup of effect methods in jQuery:

hide() 			//Hides all of the elements in the jQuery object

hide(time) 		//Hides elements for a time, in the jQuery object
hide(time, easing)

hide(time, function) 			//Hides elements for a specific time and optionally a function upon completion
hide(time, easing, function)

show() 						//Shows all of the elements in a jQuery object

show(time) 		 			//opposite of hide
show(time, easing)

show(time, function)			//same as before
show(time, easing, function) 

toggle() 					 	//toggle visibility

toggle(time) 					//Toggle with time and optional easing
toggle(time, easing)

toggle(time, function) 			//Toggle with time, function and easing
toggle(time, easing, function)

toggle(boolean) 			//one direction toggle

The arguments for times, is as follows:

<number> 			//mili seconds
 	
slow 				//Shorthand for 600 mili

fast 				//shorthand for 200 mili

If we wish, we can cause recursive function calls, which causes looping effects:

<script type="text/javascript">
	$(document).ready(function() {
		$("<button>Toggle</button>").insertAfter("#buttonDiv button").click(function(e) { 
				performEffect();
				e.preventDefault();
			});

		function performEffect() {
			$("h1").toggle("slow", performEffect) //Recursive function call that switches between being visible and non-visible
		}
	}):
</script>


In jQuery, we have a call stack, that we can exhaust if animations are left up for a long time. Thus, it can be caution and good advice to use:

$("h1").toggle("slow", setTimeout( performEffect, 1)) //The setTimeout is the one that makes it so that there is a timeout

We can use slide revealing effects as well, in jQuery:

slidedown() 					//Shows elements by sliding them down
slideDown(time,function) 
slideDown(time, easing, function)

slideUp() 					//Hides elements by sliding them up
slideUp(time, function)
slideUp(time, easing, function)

slideToggle() 						//Toggle visibility by sliging them up and down
slideToggle(time, function)
slideToggle(time, easing, function)

We can use fading as well:

fadeOut() 							//Fade out
fadeOut(timespan)
fadeOut(timespan, function)
fadeOut(timespan, easing, function)

fadeIn() 							//fade in
fadeIn(timespan)
fadeIn(timespan, function)
fadeIn(timespan, easing, function)

fadeTo(timespan, opacity)			//Change opacity to specified level
fadeTo(timespan, opacity, easing, function)

fadeToggle() 						//Toggle the visibility of elements using opacity
fadeToggle(timespan)
fadeToggle(timespan, function)
fadeToggle(timespan, easing, function)

We can create custom effects as well:

animate(properties) 	 				//Animates one or more CSS properties, with an optional time span, easing style, and callback function
animate(properties, time)
animate(properties, time, function)
animate(properties, time, easing, function)

animate(properties, options) 			//Animates one or more CSS properties, specifying the options as a map

we can use absolute and relative values in terms of height when doing the animations (-= X) and just assigning X etc.

We can queue effects as well, if we wish:

queue() 				//Returns the queue of effects to be performed on the elements in the jQuery object

queue(function) 		//adds a function to the end of the queue

dequeue() 				//remvoes and executes the first item in the queue for the elementsin the jQuery object

stop() 					//stops current animation
stop(clear)
stop(clear, jumpToEnd)

finish() 				//Stops the current animation and clears any queued animations

delay(time)				//Inserts a delay between effects in the queue

We can create Effect queues, by virtue of cycling effects and then performing a recursive function call

if we wish to have a script that inspects the queue of something, we could do as follows:

<script type="text/javascript">
	$(document).ready(function() {
		$("h1").css({ "position": "fixed", "z-index": "1", "min-width": "0"});
		$("form").remove();
		$("<table border=1></table>").appendTo("body").css({
				position: "fixed", "z-index": "2", "border-collapse": "collapse", top: 100
		});

		var timespan = "slow";

		cycleEffects();
		printQueue();

		function cycleEffects(){
			$("h1")
			.animate({ left: "+=100" }, timespan)
			.animate({ left: "-=100"}, timespan)
			.animate({ height: 223, width: 700 }, timespan)
			.animate({ height: 30, width: 500 }, timespan)
			.slideUp(timespan)
			.slideDown(timespan, cycleEffects);
		}
		function printQueue() {
			var q = $("h1").queue();
			var qtable = $("table");
			qtable.html("<tr><th>Queue Length:</th><td>" + q.length + "</td></tr>");
			for (var i = 0; i < q.length; i++) {
				var baseString = "<tr><th>" + i + ":</th><td>";
				if (q[i] == "inprogress") {
					$("table").append(baseString + "In progress</td></tr>");
				} else{
					$("table").append(baseString + q[i] + "</td></tr>");
				}
			}
			setTimeout(printQueue, 500);
		}
	});
</script>

If we wish to stop or finish animations, we can do so with stop and finish.

stop(boolean, boolean) //The first clears queue if true, second finished current anim to final form if set to true

An example of some code that uses the stop Method

<script type="text/javascript">
	$(document).ready(function() {
		$("h1").css({ "position": "fixed", "z-index": "1", "min-width": "0"});
		$("form").remove();

		$("<table border=1></table>")
			.appendTo("body").css({
				position: "fixed", "z-index": "2", 
				"border-collapse": "collapse", top: 100
		});

		$("<button>Stop</button><button>Start</button>")
		.appendTo($("<div/>").appendTo("body")
		 .css({
		 	position: "fixed", "z-index": "2",
		 	"border-collapse": "collapse", top: 100, left: 200
		 })).click(function(e){
		 	$(this).text() == "Stop" ? $("h1").stop(true, true) : cycleEffects(); //If The button says stop, it stops and clears queue, if not, it causes cycelEffects() call
		 });

		var timespan = "slow";

		cycleEffects();
		printQueue();

		function cycleEffects() {
			$("h1")
			.animate({ left: "+=100"}, timespan)
			.animate({ left: "-=100"}, timespan)
			.animate({ height: 223, width: 700 }, timespan)
			.animate({ height: 30, width: 500 }, timespan)
			.slideUp(timeSpan)
			.slideDown(timespan, cycleEffects);
		}

		function printQueue() {
			var q = $("h1").queue();
			var qtable = $("table");
			qtable.html("<tr><th>Queue Length:</th><td>" + q.length + "</td></tr>");

			for (var i = 0; i < q.length; i++) {
				var baseString = "<tr><th>" + i ":</th><td>";
				if (q[i] == "inprogress") {
					$("table").append(baseString + "In progress</td></tr>");
				} else {
					$("table").append(baseString + q[i] + "</td></tr>");
				}
			}
			setTimeout(printQueue, 500);
		}
	});
</script>

The difference between running stop(true, true) and finish, is that finish finishes all of the queued elements as well

We can insert delays into the queue, as well, if we wish, with .delay(<time>)

We can further inject functions into the queued setup if we wish:

//assume queue has been declared
.queue(function() {
	$("body").fadeTo(timespan, 0).fadeTo(timespan, 1);
	$(this).dequeue();
})
//etc.

We could also pass the next function in the queue, to the queue function, as follows:

.queue(function (nextFunction) {
	$("body").fadeTo(timespan, 0).fadeTo(timespan, 1);
	nextFunction(); //has to be called, if not, stalls the queue
})

if we wish to disable animations, we can use:

$.fx.off = true;

An example of a result site with pictures, input, carousell arrows and what not, follows:

<script type="text/javascript">
	$(document).ready(function() {
		var fNames = ["Carnation", "Lily", "Orchid"];
		var fRow = $("<div id=row3 class=drow/>").appendTo("div.dtable");
		var fTemplate = $("<div class=dcell><img/><label/><input/></div>";
		for (var i = 0; i < fNames.length; i++) {
			fTemplate.clone().appendTo(fRow).children() 
				.filter("img").attr("src", fNames[i] + ".png").end()
				.filter("label").attr("for", fNames[i]).text(fNames[i]).end()
				.filter("input").attr({name: fNames[i], value: 0, required: "required"})
		}

		$("<a id=left></a><a id=right></a>").prependTo("form")
			.css({
				"background-image": "url(leftarrows.png)",
				"float": "left",
				"margin-top": "15px",
				display: "block", width: 50, height: 50
			}).click(handleArrowPress).hover(handleArrowMouse)

		$("#right").css("background-image", "url(rightarrows.png)").appendTo("form");

		$("h1").css({"min-width": "0", width: "95%",});
		$("#row2, #row3").hide();
		$("#oblock").css({float: "left", display: "inline", border: "thin black solid"});
		$("form").css({"margin-left": "auto", "margin-right": "auto", width: 885});

		var total = $('#buttonDiv')
			.prepend("<div>Total items: <span id=total>0</span></div>")
			.css({clear: "both", padding: "5px"});
		$("<div id=bbox />").appendTo("body").append(total).css("clear: left");

		$("input").change(function (e) {
			var total = 0;
			$("input").each(function(index, elem) {
				total += Number($(elem).val());
			});
			$("#total").text(total);
		});

		function handleArrowMouse(e) {
			var propValue = e.type == "mouseenter" ? "-50px 0px" : "0px 0px";
			$(this).css("background-position", propValue);
		}

		function handleArrowPress(e) {
			var elemSequence = ["row1, row2, row3"];

			var visibleRow = $("div.drow:visible");
			var visibleRowIndex = jQuery.inArray(visibleRow.attr("id"), elemSequence);

			var targetRowIndex;

			if (e.target.id == "left") {
				targetRowIndex = visibleRowIndex - 1;
				if (targetRowIndex < 0) {targetRowIndex = elemSequence.length -1};
			} else {
				targetRowIndex = (visibleRowIndex + 1) % elemSequence.length;
			}
			visibleRow.fadeOut("fast", function() {
				$("#" + elemSequence[targetRowIndex]).fadeIn("fast");
		}
	});
</script>


If we wish to integrate Templates with jQuery syntax, we can set it up in the handlebars-jquery.js file:

(function ($) {
	var compiled = {};
	$.fn.template = function (data) {
		var template = $.trim($(this).first().html());
		if (compiled[template] == undefined) {
			compiled[template] = Handlebars.compile(template);
		}
		return $(compiled[template](data));
	};
})(jQuery);

We can then include it, in the html:

<!DOCTYPE html>
<html>
<head>
	<title>Example</title>
	<script src="jquery-2.0.2js" type="text/javascript"></script>
	<script src="handlebars.js" type="text/javascript"></script>
	<script src="handlebars-jquery.js" type="text/javascript"></script>
	<link rel="stylesheet" type="text/css" href="styles.css"/>
	<script type="text/javascript">
		$(document).ready(function() {
			//Some code
		});
	</script>
</head>
<body>
	//blah
</body>
</html>

An example of defining a template to create from:

<!DOCTYPE HTML>
<html>
<head>
	<title>Example</title>
	<script src="jquery-2.0.2js" type="text/javascript"></script>
	<script src="handlebars.js" type="text/javascript"></script>
	<link rel="stylesheet" type="text/css" href="styles.css"/>
	<script id="flowerTmpl" type="text/x-handlebars-template"> //Include a template where we can just feed in values, declared in template to stop browsers from interpeting values
		{{#each flowers}}
			<div class="dcell">
			<img src="{{product}}.png"/>
			<label for="{{product}}.png"/>
			<input names="{{product}}" data-price="{{price}}" data-stock="{{stock}}" value="0" required />
		</div>
		{{each}}
	</script>
	<script type="text/javascript">
		$(document).ready(function() { //use the said template to feed in values
			var data = {
				flowers: [
				{ name: "Aster", product: "aster", stock: "10", price: 2.99 },
				{ name: "Flower2", product: "shit", stock: "100", price: 5000},
				etc.

				}]
			};
			var template = $("#flowerTmpl").template(data).appendTo("#row1");
		});
	</script>
</head>
etc.

Note: Since the handlebars templating handles objects, we have to wrap the entire list in to be an array

We can further tweak the result, by tweaking the template:

$("#flowerTmpl").template(data).slice(0,3).appendTo("#row1").end().end().slice(3).appendTo("#row2"); //Slice the template, append, back upx2, slice, append

The above causes slicing on the template to sort out where the stuff goes.

However, whereever there are splits, there occurs Text Nodes, which takes up space, to solve this, we can filter them away:

$("#flowerTmpl").template(data).filter("*").slice(0, 3).appendTo("#row1").end().end().slice(3).appendTo("#row2");

The above will filter the template based on selecting all HTML elements but excluding text nodes, which filters away the empty space.

Handlebars has a couple of Built-in helpers, as follows:

#if //evaluates true if property exists and is not null

#unless //inverse of if

#each //for each loop of attributes on object or array of objects

#with //Sets a context for a section of the template

An example of how we could modify the template:

<script id="flowerTmpl" type="text/x-handlebars-template">
	{{#flowers}}
	<div class="dcell">
		<img src="{{product}}.png"/>
		<label for="{{product}}">{{name}}:</label>
		<input name="{{product}}" data-price="{{price}}" data-stock="{{stock}}" value="{{#if stock}}1{{else}}0{{/if}}" required />
		//The above modify changes so that it checks against if stock exists and it's not null, then it's set to 1, otherwise it's set to 0
		//This clears out null and erases undeclared stock attributes
	</div>
	{{/flowers}}
</script>

There are a few special properties supplied by the #each modifier:

this //returns said object

@index //returns current index if the #helper is done on an array

@key //Returns the name of the current property when used on an object

An example would be as simple as adding a label with @index:

<label>Position: {{@index}}</label>

An example of accounting for how many there are in stock:

<script id="flowerListTmpl" type="text/x-handlebars-template">
	<ul>
		{{#each stockData}}
			<li>{{@key}} ({{this}} in stock)</li>
		{{/each}}
	</ul>
</script>
<script type="text/javascript">
	$(document).ready(function() {
		var data = {
			stockData: {
				Aster: 10, Daffodil: 12, Rose: 2,
				Peony: 0, Primula: 1, Snowdrop: 15
			}
		};
		$("#flowerListTmpl").template(data).appendTo("form");
	});
</script>

If we wish, we could re-write the template part:

<script id="flowerListTmpl" type="text/x-handlebars-template">
	<ul>
		{{#each stockData}} //iterate over each stockData object, having iteration be relative to said object
			<li>{{description.Name}} ({{description.Stock}} in stock)</li> //access the objects name and stock
		{{/each}}
	</ul>
</script>
<script type="text/javascript">
	$(document).ready(function() {
		var data = {
			title: "Stock List",
			stockData: {
				aster: {
					description: { Name: "Aster", Stock: 10 } //Create objects with name and stock attributes
				},
				daffodil {
					description: { Name: "Daffodil", Stock: 12 }
				},
				rose: {
					description: { Name: "Rose", Stock: 2 }
				}
			}
		};
		$("#flowerListTmpl").template(data).appendTo("form");
	});
</script>

if we wish to forgoe the fact of having to write out the idea of accessing common attributes shared by all iterating elements, we could just use #with:

<script id="flowerListTmpl" type="text/x-handlebars-template">
	<ul>
		<h3>{{title}}</h3>
		{{#each stockData}}
			{{#with description}}
				<li>{{Name}} ({Stock} in stock)</li>
			{{/with}}
		{{/each}}
	</ul>
</script>

if we wish to navigate to the parent object, we can do the ../ access in terms of akin to Linux:

<script id="flowerListTmpl" type="text/x-handlebars-template">
	<ul>
		<h3>{{title}}</h3>
		{{#each stockData}}
			{{#with description}}
				<li>{{Name}}{{../../prefix}}{{Stock}}{{../../suffix}}</li> //Since prefix is top level, we need to step up two levels to access it, equal range of suffix
			{{/with}}
		{{/each}}
	</ul>
</script>
<script type="text/javascript">
	$(document).ready(function() {
		var data = {
			title: "Stock List",
			prefix: " (",
			suffix: " in stock)",
			stockData: {
				aster: {
					description: { Name: "Aster", Stock: 10 }
				},
				daffodil: {
					description: { Name: "Daffodil", Stock: 12 }
				}
			}
		};
		$("#flowerListTmpl").template(data).appendTo("form");
	});
</script>

Example of a template where we prepare data:

<head>
	<script id="flowerTmpl" type="text/x-handlebars-template">
		{{#flowers}}
		<div class="dcell">
			<img src="{{product}}.png"/>
			<label for="{{product}}">{{name}}:</label>
			<input name="{{product}}" data-price="{{price}}" data-stock="{{stock}}" value="{{#if stock}}1{{else}}0{{/if}}" required/>
		</div>
		{{/flowers}}
	</script>
	<script type="text/javascript">
		$(document).ready(function() {
			var data = {
				flowers: [
				{ name: "Aster", product: "aster", stock: "10", price: 2.99}]
			};
			for (var i = 0; i < data.flowers.length; i++) {
				if (data.flowers[i].stock == 0) {
					data.flowers[i].stock = null;
				}
			}
			var tElem = $("#flowerTmpl");
			tElem.template({ flowers: data.flowers.slice(0, 3) }).appendTo("#row1");
			tElem.template({ flowers: data.flowers.slice(3) }).appendTo("#row2");
		});
	</script>
</head>

if we wish to define helper functions in the handlebars-jquery.js file, we could do as follows:


(function ($) {
	
	handlebars.registerHelper('gt', function (a, b, options) { //register a helper in handlebars template, called gt, contains a function with 2 options
		return (a > b) ? options.fn(this) : options.inverse(this); //return a if it's greater than b, otherwise reverse the arg list and return b
		//the options part is the object that is provided by the handleBars, that we operate upon and return
	});

	var compiled = {};
	$.fn.template = function (data) {
		var template = $.trim($(this).first().html());
		if (compiled[template] == undefined) {
			compiled[template] = Handlebars.compile(template);
		} 
		return $(compiled[template](data));
	};
})(jQuery);

an example of the helper being used:

<script id="flowerTmpl" type="text/x-handlebars-template">
	{{#flowers}}
	<div class="dcell">
		<img src="{{product}}.png"/>
		<label for="{{product}}" data-price="{{price}}" data-stock="{{stock}}" value="{{#gt stock 0}}1{{else}}0{{/gt}}" required /> //run the template with arguments of if
		//stock is defined, then 1 it, otherwise, 0 it
	</div>
	{{/flowers}}
</script>

The properties and methods we have in the options object,is as follows:

fn(data) 			//Called to get the content that has been defined for the true outcome of a conditional helper,
					//or the sole content for helpers that don't have an else directive

inverse(data) 		//Called to get content that has been defined in the else clause of a helper

Hash 				//Used to recieve optional arguments into the helper function

Data 				//used to provide templates with special properties

if we wish to further modify the template in terms of functions and what not, in the handlebars-jquery.js file, we can do as follows:

(function ($) {
	
	Handlebars.registerHelper('gt', function (a, b, options) {
		return (a > b) ? options.fn(this) : options.inverse(this);
	});

	Handlebars.registerHelper("gtValAttr", function() {
		return "values='" + (this.stock > 0 ? "1" : "0") + "'"; //Allows us to have the interaction be direct instead of having to use gt
		//Albeit the problem is that the code can be broken easily and is not flexible to account for dynamic values etc.
	});

	var compiled = {};
	$.fn.template = function (data) {
		var template = $.trim($(this).first().html());
		if (compiled[template] == undefined) {
			compiled[template] = Handlebars.compile(template);
		}
		return $(compiled[template](data));
	};
})(jQuery);


An example of then using it:

<script id="flowerTmpl" type="text/x-handlebars-template">
	{{#flowers}}
	<div class="dcell">
		<img src="{{product}}.png"/>
		<label for="{{product}}">{{name}}:</label>
		<input name="{{product}}" data-price="{{price}}" data-stock="{{stock}}" {{#gtValAttr}}{{//gtValAttr}} required />
	</div>
	{{/flowers}}
</script>

If we wish to define a handler that can accept optional arguments, we could do as follows:

(function ($) {
	
	Handlebars.registerHelper('gt', function (a, b, options) {
		return (a > b) ? options.fn(this) : options.inverse(this);
	});

	Handlebars.registerHelper("gtValAttr", function() {
		return "value='" + (this.stock > 0 ? "1" : "0") + "'"; 
	});

	Handlebars.registerHelper("inputElem", function (product, stock, options) {
		options.hash.namn = product;
		options.hash.value = stock > 0 ? "1" : "0";
		options.hash.required = "required";
		return $("<input>", options.hash[0].outerHTML); //use outerHTML to hash the options and return a HTML string totalling the attributes
	});

	var compiled = {};
	$.fn.template = function (data) {
		var template = $.trim($(this).first().html());
		if(compiled[template] == undefined) {
			compiled[template] = Handlebars.compile(template);
		}
		return $(compiled[template](data));
	};
})(jQuery);

And we can then apply the helper:

<script id="flowerTmpl" type="text/x-handlebars-template">
	{{#flowers}}
	<div class="dcell">
		<img src="{{product}}.png"/>
		<label for="{{product}}">{{name}}:</label>
		{{#input product stock data-stock=stock data-price=price}}{{/inputElem}}
	</div>
	{{/flowers}}
</script>

An example of simplifying by virtue of declaring customized helper functions:

Handlebars.registerHelper("stockValue", function (options) {
	options.data.attributeValue = this.stock > 0 ? "1" : "0";
	return options.fn(this);
});

Later using that same above new defined helper function for the Template:

{{#stockValue}}
	<input name="{{product}}" data-price="{{price}}" data-stock="{{stock}}" value="{{@attributeValue}}" required />
{{/stockValue}}

The above code will call upon the helper function of stockValue and returns the value defined by the options.data.AttributeValue

What follows is a example of a serverside JS script using Node.js:

var http = require("http");
var querystring = require("querystring");

var port = 80;

http.createServer(function (req, res) {
	console.log("[200 OK] " + req.method + " to " + req.url);

	if (req.method == "POST") {
		var dataObj = new Object();
		var cType = req.headers["content-type"];
		var fullBody = "";

		if (cType && cType.indexOf("application/x-www-form-urlencoded") > -1 {
			req.on("data", function(chunk) { fullBody += chunk.toString();});
			req.on("end", function() {
				res.writeHead(200, "OK", {"Content Type": "text/html"});
				res.write("<html><head><title>Post data</title></head></body>");
				res.write("<style>th, td {text-align:left; padding:5px; color:black}\n");
				res.write("th {background-color:grey; color:white; min-width:10em}\n");
				res.write("td {background-color:lightgrey}\n");
				res.write("caption {font-weight:bold}</style>");
				res.write("<table border='1'><caption>Form data</caption>");
				res.write("<tr><th>Name</th><th>Value</th>");
				var dBody = queryString.parse(fullBody);
				for (var prop in dBody) {
					res.write("<tr><td>" + prop + "</td><td>" + dBody[prop] + "</td></tr>");
				}
				res.write("</table></body></html>");
				res.end();
			});
		}
	}
}).listen(port);
console.log("Ready on port " + port);

The document that we use in this document:

<!DOCTYPE html>
<html>
<head>
	<title>Example</title>
	<script src="jquery-2.0.2js" type="text/javascript"></script>
	<script src="handlebars.js" type="text/javascript"></script>
	<script src="handlebars-jquery.js" type="text/javascript"></script>
	<link rel="stylesheet" type="text/css" href="styles.css"/>
	<script id="flowerTmpl" type="text/x-handlebars-template">
		{{#each flowers}}
		<div class="dcell">
			<img src="{{product}}.png"/>
			<label for="{{product}}">{{name}}: </label>
			<input name="{{product}}" value="0" required/>
		</div>
		{{each}}
	</script>
	<script tpye="text/javascript">
		$(document).ready(function() {
			var data = { flowers: [
				{	name: "Aster, product: "aster", stock: "10", price: "2.99"},
				etc.

				}]
			};

			var templResult = $("flowerTmpl").template(data).filter("*");
			templResult.slice(0,3).appendTo("#row1");
			templResult.slice(3).appendTo("#row2");
		});
 	</script>
 </head>
 <body>
 	<h1>Jacqui's flower shop</h1>
 	<form method="post" action="htttp://node.jacquisflowershop.com/order">
 		<div id="oblock">
 			<div class="dtable">
 				<div id="row1" class="drow">
 				</div>
 				<div id="row2" class="drow">
 				</div>
 			</div>
 		</div>
 		<div id="buttonDiv"><button type="subtmit">Place Order</button></div>
 	</form>
 </body>
 </html>

 We can of course involve the good old focus and blur etc. for form handling:

 function handleFocus(e) {
 	var borderVal = e.type == "focus" ? "medium solid green" : "";
 	$(this).css("border", borderVal);
 }
 $("input").focus(handleFormFocus).blur(handleFormFocus);

 We can handle adding up to total as well:

 var total = $("#buttonDiv")
 	.prepend("<div>Total Items: <span id=total>0</span></div>")
 	.css({clear: "both", padding: "5px"});
 $("<div id=bbox />").appendTo("body").append(total).css("clear: left");

 $("input").change(function(e) {
 	var total = 0;
 	$("input").each(function (index, elem) {
 		total += Number($(elem).val());
 	});
 	$("#total").text(total);
 });

 Example of declaring a submit handler:

 $("form").submit(function (e) {
 	if ($("input").val() == 0) {
 		e.preventDefault();
 	}
 });

 Note: The submit handler inheritly have a default action of submitting to the Server, albeit we can declare to prevent it if we have conditions that we wish to prevent

 An example of appending the submit functions to buttons:

 $("<button>jQuery Method</button>").appendTo("#buttonDiv").click(function (e) {
 	$("form").submit(); //uses the declared submit funciton, only accepting > 0 val
 	e.preventDefault();
 });

 $("<button>DOM API</button>").appendTo("#buttonDiv").click(function (e) { //using the DOM, circumvents earlier declared functions
 	document.getElementsByTagName("form")[0].submit();
 	e.preventDefault();
 });

if we wish to incorporate validation, we could do as follows:

<script src="jquery.validate.js" type="text/javascript"></script>
<style type="text/css">
	.errorMsg {color: red}
	.invalidElem {border: medium solid red}
</style>

//assume HTML here 

//after slicing and placing

$("form").validate({ //handle on the validate trigger what to do
	highlight: function (element, errorClass) {
		$(element).add($(element).parent()).addClass("invalidElem");
	},
	unhighlight: function (element, errorClass) {
		$(element).add($(element).parent()).removeClass("invalidElem");
	},
	errorElement: "div",
	errorClass: "errorMsg"
});

$.validator.addClassRules({ //The rules
	flowerValidation: {
		min: 0
	}
})

$("input").addClass("flowerValidation").change(function (e) { //append the validation to the changed element
	$("form").validate().element($(e.target)); //run validate on the element
});

Validation checks supports a wide array of things to validate against:

creditcard: true //creditcard number

date: true //must be a valid JS date

digits: true //Must contain only digits

email: true //must be a email

max: maxVal //must be max val

maxlength: length //must be max length

min: minVal //must be min value

minlength: length; //must be min length of specified length

number: true //Must be decimal

raneg: [minVal, maxVal] //value must be between these two

rangelength: [minLen, maxLen] //range of length

required : true;  //Required value

url: true //Must be a URL

Note: There are more checks, such as IpV4 checks, ipv6, landbased numbers etc.

Note: We could also cause remote Validation to have validation towards other servers

We can of course, strengthen the validation:

$.validator.addClassRules({
	flowerValidation: {
		required: true,
		digits: true,
		min: 0,
		max: 100
	}
});

If we change the ordering, it will pass the error upon the point of where it is triggered.

We can also apply the rules to elements, if we wish:

$("#row1 input").each(function (index, elem) {
	$(elem).rules("add", {
		min: 10,
		max: 20
	})
});

The above will apply to all descendants of row1's input elements

we can remove them by just replacing add with remove

We can further more make rules into a object and then define that a set and apply it:

$("input").each(function (index, elem) {
	var rules = {
		required: true,
		min: 0,
		max: data.flowers[index].stock,
		digits: true
	}
	if (Number(data.flowers[index].price) > 3.00) {
		rules.max--;
	}
	$(elem).rules("add", rules);
});

We can also declare the rulelist to be a object that consists of a lot of rules:

var rulesList = new Object();
for (var i = 0; i < data.flowers.length; i++) {
	rulesList[data.flowers[i].product] = {
		min: 0,
		max: Number(data.flowers[i].stock),
	}
}

The above can later be declared to be the rules in the validate call:

rules: rulesList

The last way to do validation, is through element attribute validation:

<script type="text/javascript">
	{{#each flowers}}
	<div class="dcell">
		<img src="{{product}}.png"/>
		<label for="{{product}}">{{name}}:</label>
		<input name="{{product}}" value="0" required min="0" max="{{stock}}"/>
	</div>
	{{/each}}
</script>

If we wish to define messages for validations, we can add this part to the validation:

messages: {
	rose: { max: "Shit lol"},
	primula: { max: "Shit 2"}
}

Custom messages can also take form in form of a object and then applied to respective elements:

var customMessages = new Object();
for (var i = 0; i < data.flowers.length; i++) {
	customMessages[data.flowers[i].product] = {
		max: "Shit lol" + data.flowers[i].stock + " we have these many in stock"
	}
}


And then put the object as the messages:

messages: customMessages

in the validation part

We can further more add a function to elements, in terms of validation if we wish:

$("input").change(function (e) {
	$("form").validate().element($(e.target));
}).each(function (index, elem) {
	$(elem).rules("add", {
		messages: {
			max: "We only have " + data.flowers[index].stock + " in stock"
		}
	})
});

We can create custom checks as well:

<div class="dcell">
	<input name="{{product}}" value="0" required />
</div>

and later

$.validator.addMethod("stock", function (value, elem, args) {
	return Number(value) < Number(args);
}, "We don't have that many in stock");

$("input").each(function (index, elem) {
	$(elem).rules("add", {
		stock: data.flowers[index].stock
	})
}).change(function(e) {
	$("form").validate().element($(e.target));
});
etc.

We can also define the message of something by virtue of adding methods to the validator method:

$.validator.addMethod("stock", function (value, elem, args) {
	return Number(value) < Number(args);
}, function(args) {
	return "We only have " + args + " in stock"
});

If we wish to create a validation summary, we can do so, as follows:

<script type="text/javascript">
	$(document).ready(function() {
		var data = {
			flowers: [
			{	name: "Aster", product: "aster", stock: "10", price: "2.99"},
			{	name: "Daffodil", product: "daffodil", stock: "12", price: "1.99"}
			etc.]
		};

		var plurals = {
			aster: "Asters", daffodil: "Daffodils", rose: "Roses",
			peony: "Peonies", primula: "Primulas", snowdrop: "Snowdrops"
		};

		var tempResult = $("#flowerTmpl").template(data).filter("*");
		tempResult.slice(0,3).appendTo("#row1");
		tempResult.slice(3).appendTo("#row2");

		$("<div id='errorSummary'>Please correct the following errors:</div>")
			.addClass("errorMsg invalidElem")
			.append("<ul id='errorList'></ul>").hide().insertAfter("h1");

		$("form").validate({
			highlight: function (element, errorClass) {
				$(element).addClass("invalidElem");
			},
			unhighlight: function (element, errorClass) {
				$(element).removeClass("invalidElem");
			},
			errorContainer: "#errorSummary",
			errorLabelContainer: "#errorsList",
			wrapper: "li",
			errorElement: "div"
		});

		$.validator.addMethod("stock", function (value, elem, args) {
			return Number(value) <= Number(args.data.stock);
		}, function (args) {
			return "You requested " + $(args.element).val() + " " //You requested val() amount
				+ plurals[args.data.product] + " but we only have " //access plurals product name
				+ args.data.stock + " in stock"; //access stock from args.data
		});

		$("input").each(function (index, elem) {
			$(elem).rules("add", {
				stock: {
					index: index,
					data: data.flowers[index],
					element: elem
				}
			})
		}).change(function (e) {
			$("form").validate().element($(e.target)):
		});
	});
</script>

In terms of Ajax, we have shorthands for GETS and POST:

$.get() //Makes a ajax request using the HTTP Get Method

$.post() //Performs a ajax request using the HTTP POST method

An example of using the $.get() method to get the previous structure that we could get from the HTML:

<script type="text/javascript">
	$(document).ready(function() {
		$.get("flowers.html", function (data) {
			var elems = $(data).filter("div").addClass("dcell");
			elems.slice(0,3).appendTo("#row1");
			elems.slice(3).appendTo("#row2");
		});
	});
</script>

What follows, is an example where we request data and process it:

<script id="flowerTmpl" type="text/x-handlebars-template">
	{{#flowers}}
	<div class="dcell">
		<img src="{{product}}.png"/>
		<label for="{{product}}">{{name}}</label>
		<input name="{{product}}" data-price="{{price}}" data-stock="{{stock}}" value="0" required />
	</div>
	{{/flowers}}
</script>
<script type="text/javascript">
	$(document).ready(function(){
		$("<button>Ajax</button>").appendTo("#buttonDiv").click(function (e) {
			$.get("mydata.json", function (data) {
				var tmplData = $("#flowerTmpl").template({flowers: data}).filter("*");
				tmplData.slice(0,3).appendTo("#row1");
				tmplData.slice(3).appendTo("#row2");
			});
			e.preventDefault();
		});
	});
</script>

We can send data as part of a GET request, if we wish, as well:

<script type="text/javascript">
	$(document).ready(function() {
		var requestData = {
			country: "US",
			state: "New York"
		};

		$("<button>Ajax</button>").appendTo("#buttonDiv").click(function (e) {
			$.get("mydata.json", requestData, function (data) {
				var tmplData = $("#flowerTmpl").template({flowers: data}).filter("*");
				tmplData.slice(0,3).appendTo("#row1");
				tmplData.slice(3).appendTo("#row2");
			});
			e.preventDefault();
		});
	});
</script>

To access the section of where we send data to the website, we can press F12

NOTE: Use GET for getting info. POST for changing states. 

If we wish to use a js script that allows for POST interaction, we can define a JS script as follows:

var http = require("http");
var queryString = require("queryString");
var url = require("url");

var port = 80;

http.createServer(function (req, res) {
	console.log("[200 OK] " + req.method + " to " + req.url);

	if (req.method == "OPTIONS") {
		req.writeHead(200, "OK", {
			"Access-Control-Allow-Headers": "Content-Type",
			"Access-Control-Allow-Methods": "*",
			"Access-Control-Allow-Origin": "http://www.jacquisflowershop.com"
		});
		res.end();
	} else if (req.method == "POST") {
		var dataObj = new Object();
		var contentType = req.headers["content-type"];
		var fullBody = "";

		if (contentType) {
			if (contentType.indexOf("application/x-www-form-urlencoded" > -1) {
				req.on("data", function (chunk) { fullBody += chunk.toString(); });
				req.on("end", function() {
					var dBody = queryString.parse(fullBody);
					writeResponse(req, res, dBody, url.parse(req.url, true).query["callback"])
				});
			} else {
				req.on("data", function, (chunk) { fullBody += chunk.toString(); });
				req.on("end", function() {
					dataObj = JSON.parse(fullBody);
					var dprops = new Object();
					for (var i = 0; i < dataObj.length; i++) {
						dprops[dataObj[i].name] = dataObj[i].value;
					}
					writeResponse(req, res, dprops);
				});
			}
		}
	} else if (req.method == "GET") {
		var data = url.parse(req.url, true).query;
		writeResponse(req, res, data, data["callback"])
	}

	function writeResponse(req, res, data, jsonp) {
		var total = 0;
		for (item in data) {
			if (item != "_" && data[item] > 0) {
				total += Number(data[item]);
			} else{
				delete data[item];
			}
		}
		data.total = total;
		jsonData = JSON.stringify(data);
		if (jsonp) {
			jsonData = jsonp + "(" + jsonData + ")";
		}

		res.writeHead(200, "OK", {
			"Content-Type": "application/json",
			"Access-Control-Allow-Origin": "*"
		});

		res.write(jsonData);
		res.end();
	}
}).listen(port);
console.log("Ready on port: " + port);

The above code, unlike the earlier version, only returns one object with the different elements and their quantitites

Generally, in Ajax, you can do either same Origin requests or cross-origin requests.

Cross-origin requests means that you attempt to access a different domain:

The differences could be the port, host, protocol etc.

Note: It is possible to do Cross-origin requests with CORS, which sends a request with a header that must trace back to the Site. If it's accepted, it works.

If we wish to create parts that allows for sending data to the server, we could do as follows:


//Assume earlier parts of x-handlebars have been defined in terms of templating
<script id="totalTmpl" type="text/x-handlebars-template">
	<div id="totalDiv" style="clear: both; padding: 5px">
		<div style="text-align: center">Total items: <span id=total>{{total}}</span></div>
	</div>
</script>
<script type="text/javascript">
	$(document).ready(function() {
		$.get("flowers.html", function(data) {
			var elems = $(data).filter("div").addClass("dcell");
			elems.slice(0,3).appendTo("#row1");
			elems.slice(3).appendTo("#row2");
		});

		$("button").click(function (e){
			var formData = $("form").serialize(); //Serialize it so that the Server can understand the data sent
			$.post("http://node.jacquisflowershop.com/order", formData, processServerResponse); //send it to this specific place
			e.preventDefault(); //prevent default to not cause the response to be rendered in a seperate HTML elemenet
		});

		function processServerResponse(data) {
			var inputElems = $("div.dcell").hide(); //Hide the previous ones
			for (var prop in data) {
				var filtered = inputElems.has("input[name=" + prop + "]").appendTo("#row1").show(); //get the inputelementers
			}
			$("#buttonDiv").remove();
			$("#totalTmpl").template(data).appendTo("body"); //add the data recieved
		}
	});
</script>
//HTML elements follows

We can of course, if we wish, send data that is not form dependant:

<script type="text/javascript">
	$(document).ready(function() {
		$("button").click(function (e) {
			var requestData = {
				apples: 2,
				oranges: 10
			};

			$.post("http://node.jacquisflowershop.com/order", requestData,
				function (responseData) {
					console.log(JSON.stringify(responseData));
				})
			e.preventDefault();
		})
	});
</script>

If we wish to specify what kind of data jQuery is to expect in their GET or POST methods, we can use one of the following arguments:

xml

json

jsonp

script

html

text

An example:

<script type="text/javascript">
	$(document).ready(function() {
		$.get("mydata.json", function (responseData) {
			console.log(JSON.stingify(responseData));
		}, "json");
	});
</script>

NOTE: if the data you attempt to retrieve is different form the data you specify, that will cause issues.

The following is an error showcase of Ajax, of making a asyncrhonous call but trying to operate it on instantly:

<script type="text/javascript">
	$(document).ready(function() {
		var elems;

		$.get("flowers.html", function (data) {
			elems = $(data).filter("div").addClass("dcell");
		});

		elems.slice(0,3).appendTo("#row1");
		elems.slice(3).appendTo("#row2");
	});
</script>

The above code will crash, due to making a asyncrhonous get request and then attempting to instantly operate on the uninitialized elems.

THere are a few methods we can use to process elements as well, in jQuery:

load() 				//Loads HTML elements and inserts them into the elements in the jQuery object on which the method has been called

$.getScript() 		//Gets and executes JS code

$.getJSON() 		//Gets JSON data

An example of using load:

<script type="text/javascript">
	$(document).ready(function() {
		$("#row1").load("flowers.html"); //Adds the elements into the #row1
	}):
</script>

Note: The load is best for when we wish to ignore CSS layouts

if we wish to handle the fact of that load is a asyncrhonous call, we can do as follows:

<script type="text/javascript">
	$(document).ready(function() {
		var targetElems = $("#row1"); //Define the target
		targetElems.load("flowers.html", function () { //assert that the function is called upon completion of the load
			targetElems.children().addClass("dcell"); //add the elements
		});
	});
</script>

We can also make calls to call and execute Javascripts with getScript:

//THE JS

var flowers = [
	["Aster", "Daffodil", "Rose"],
	["Peony", "Primula", "Snowdrop"],
	["Carnation", "Lily", "Orchid"]
]

$("<div id=row3 class=drow/>").appendTo("div.dtable");

var fTemplate = $("<div class=dcell><img/><label/><input/></div>");

for (var row = 0; row < flowers.length; row++) {
	var fNames = flowers[row];

	for (var i = 0; i < fNames.length; i++){
		fTemplate.clone().appendTo("#row" + (row + 1)).children()
			.filter("img").attr("src", fNames[i] + ".png").end()
			.filter("label").attr("for", fNames[i]).text(fNames[i]).end()
			.filter("input").attr({name: fNames[i], value: 0})
	}
}

To call the above JS with getscript:

<script type="text/javascript">
	$(document).ready(function() {
		$.getScript("myscript.js");
	});
</script>

We can also get and process JSON data:

<script type="text/javascript">
	$(document).ready(function() {
		$.getJSON("mydata.json", function (data) {
			var tmplElems = $("#flowerTmpl").template({ flowers: data }).filter("*");
			tmplElems.slice(0,3).appendTo("#row1");
			tmplElems.slice(3).appendTo("#row2");
		});
	});
</script>

Note: Conversion from JSON to Object, is handeled by the jQuery automatically

We can also load Javascript from other servers, using JSONP.

An example of making JSONP Requests using the getJSON method:

<script type="text/javascript">
	$(document).ready(function() {
		$.getJSON("mydata.json", function (data) {
			var tmplElems = $("#flowerTmpl").template({ flowers: data }).filter("*");
			tmplElems.slice(0,3).appendTo("#row1");
			tmplElems.slice(3).appendTo("#row2");
		});

		$("button").click(function (e) {
			var formData = $("form").serialize();
			$.getJSON("http://node.jacquisflowershop.com/order?callback=?", formData, processServerResponse) //include the callback=? to autohandle getJSON requests
			e.preventDefault();
		})

		function processServerResponse(data) {
			var inputElems = $("div.dcell").hide();
			for (var prop in data) {
				var filtered = inputElems.has("input[name=' + prop + ']").appendTo("#row1").show();
			}
			$("#buttonDiv, #totalDiv").remove();
			$("#totalTmpl").template(data).appendTo("body");
		}
	});
</script>

If we wish to use the AJAX Forms plug-in we could do as follows:

<!DOCTYPE html>
<html>
<head>
	<title>Example</title>
	<script src="jquery-2.0.2js" type="text/javascript"></script>
	<script src="handlebars.js" type="text/javascript"></script>
	<script src="handlebars-jquery.js" type="text/javascript"></script>
	<script src="jquery.validate.js" type="text/javascript"></script>
	<script src="jquery.form.js" type="text/javascript"></script>
	<link rel="stylesheet" type="text/css" href="styles.css"/>
	<script id="flowerTmpl" type="text/x-handlebars-template">
		{{#flowers}}
		<div class="dcell">
			<img src="{{product}}.png"/>
			<label for="{{product}}">{{name}}</label>
			<input name="{{product}}" data-price="{{price}}" data-stock="{{stock}}" value="0" required />
		</div>
		{{/flowers}}
	</script>
	<script id="totalTmpl" type="text/x-handlebars-template">
		<div id="totalDiv" style="clear: both; padding: 5px">
			<div style="text-align: center">Total Items:
				<span id=total>{{total}}</span></div>
		</div>
	</script>
	<script type="text/javascript">
		$(document).ready(function() {
			$.getScript("myScript.js");

			$("form").ajaxForm(function (data) {
				var inputElems = $("div.dcell").hide();
				for (var prop in data) {
					var filtered = inputElems.has("input[name=' + prop ' ]" ).appendTo("#row1").show();
				}
				$("#buttonDiv, #totalDiv").remove();
				$("#totalTmpl").template(data).appendTo("body");
			});
		});
	</script>
</head>
//HTML elements follows

If we wish to use AJAX with a bit more of detail, we can use the low-level API of it:

//assume earlier parts been declared

<script type="text/javascript">
	$(document).ready(function() {
		$.ajax("mydata.json", { //Access ajax, provide the json you wish to run
			success: function (data) { //only trigger the following function on success
				var tmplElems = $("#flowerTmpl")
					.template({flowers: data}).filter("*");
				tmplElems.slice(0,3).appendTo("#row1");
				tmplElems.slice(3).appendTo("#row2");
			}
		});
	});
</script>

The object returned by the $.ajax call, is called a jqXHR object.

it has the following attributes:

readyState 				//Lifecycle state: 0 (unsent) to 4(complete)

status 					//Returns the HTTP code sent back by the server

statusText 				//Returns the text desc of the status code

responseXML 			//Returns the response if it is an XML document

responseText 			//Returns the response as a string

setRequestHeader(name, value) //Sets a header on the request

getAllResponseHeaders() 	//Returns all of the headers in the response as a single string

getResponseHeader(name) 	//Returns value of specified response header

abort() 					//Terminates the request

An example of using the jqXHR object in combination of printing out the life cycles state every 100 miliseconds to the console:

<script type="text/javascript">
	$(document).ready(function() {
		var jqhxr = $.ajax("mydata.json", {
			success: function (data) {
				var tmplElems = $("#flowerTmpl").template({flowers: data}).filter("*");
				tmplElems.slice(0,3).appendTo("#row1");
				tmplElems.slice(3).appendTo("#row2");
			}
		});

		var timerID = setInterval(function() {
			console.log("Status:" + jqxhr.status + " " + jqxhr.statusText);
			if (jqxhr.readyState == 4) {
				console.log("Request completed: " + jqxhr.responseText);
				clearInterval(timerID);
			}
		}, 100);
	});
</script>

If we wish, we can circumvent the fact of having to provide a request URL to ajax and instead put it in a map:

<script type="text/javascript">
	$(document).ready(function() {
		$.ajax({
			url: "mydata.json",
			success: function (data) {
				var tmplElems = $("#flowerTmpl").template({flowers: data}).filter("*");
				tmplElems.slice(0,3).appendTo("#row1");
				tmplElems.slice(3).appendTo("#row2");
			}
		});
	});
</script>

What follows, is an example of how to make a POST request using ajax:

<script id="totalTmpl" type="text/x-handlebars-template">
	<div id="totalDiv" stytle="clear: both; padding: 5px">
		<div style="text-align: center">Total Items:<span id=total>{{total}}</span</div>
	</div>
</script>
<script type="text/javascript">
	$(document).ready(function() {
		$.ajax({
			url: "mydata.json",
			success: function (data) {
				var tmplElems = $("#flowerTmpl").template({flowers: data}).filter("*");
				tmplElems.slice(0,3).appendTo("#row1");
				tmplElems.slice(3).appendTo("#row2");
			}
		});

		$("button").click(function(e) {
			$.ajax({
				url: $("form").attr("action"),
				data: $("form").serialize(),
				type: "post",
				success: processServerResponse
			})
			e.preventDefautlt();
		})

		function processServerResponse(data) {
			var inputElems = $("div.dcell").hide();
			for (var prop in data) {
				var filtered = inputElems.has("input[name=' + prop + ']").appendTo("#row1").show();
			}

			$("#buttonDiv").remove();
			$("#totalTmpl").template(data).appendTo("body");
		}
	});
</script>

We can also, of course, handle the AJAX callbacks, if we wish:

beforeSend //Specifies a Function that is to be called before Ajax request is started

complete //Specifies a function that is called when the Ajax request completes

error //specifies a Function that is called when the ajax request fails

success //Specifies a function that is called upon ajax success 

An example of using the success status and all of the related attributes of a function call:

<script type="text/javascript">
	$(document).ready(function() {
		$.ajax({
			url: "mydata.json",
			success: function (data, status, jqxhr) {
				console.log("Status: " + status); //the current status, as in success etc.
				console.log("jxHR status: " + jqhxr.status + " " + jqhxr.statusText); //print out status and status text, numbers and OK status
				console.log(jqxhr.getAllResponseHeaders()); //Get all the headers

				var tmplElems = $("#flowerTmpl").template({flowers: data}).filter("*");
				tmplElems.slice(0,3).appendTo("#row1");
				tmplElems.slice(3).appendTo("#row2");
			}
		});
	});
</script>


an example of handling errors in terms of ajax requests:

<style type="text/css">
	.error {color: red; border: medium solid red; padding: 4px; margin: auto; width: 200px; text-align: center}
</style>
<script type="text/javascript">
	$(document).ready(function() {
		$.ajax({
			url: "NoSuchFile.json",
			success: function (data, status, jqxhr) {
				var tmplElems = $("#flowerTmpl").template({flowers: data}).filter("*");
				tmplElems.slice(0,3).appendTo("#row1");
				tmplElems.slice(3).appendTo("#row2");
			},
			error: function (jqxhr, status, errorMsg) {
				$("<div>").addClass("error")
					.text("Status: " + status + " Error: " + errorMsg)
					.insertAfter("h1");
			}
		});
	});
</script>

We can further more, define the type of error we wish to parse:

abort //Indicates request was aborted

error //general error

parseerror //parsing error

timeout //request timeout before server responded

To use the complete status, is just as we can use the error status:

//assume script defined

complete: function (jqxhr, status) {
	console.log("Completed: " + status);
}

The status of complete, which can be called upon after all the other things, are as follows:

abort 		//Request aborted

error 		//General error, usually reported by the server

notmodified //Indicates that the request content has not been modified since it was last requested 

parseerror //Returned data could not be parsed

success 	//Successfull 

timeout 	//timeout

What follows, is an example of a script that handles all request outcomes:

<script type="text/javascript">
	$(document).ready(function() {
		$.ajax({
			url: "mydata.json",
			success: function (data, status, jqhxr) {
				handleResponse(status, data, null, jqxhr);
			},
			error: function (jqxhr, status, errorMsg) {
				handleResponse(status, null, errorMsg, jqxhr);
			}
		});

		function handleResponse(status, data, errorMsg, jqxhr) {
			if (status == "success") {
				var tmplElems = $("#flowerTmpl").template({ flowers: data }).filter("*");
				tmplElems.slice(0,3).appendTo("#row1");
				tmplElems.slice(3).appendTo("#row2");
			} else {
				$("<div>").addClass("error")
					.text("Status: " + status + "Error: " + errorMsg)
					.insertAfter("h1");
			}
		}
	});
</script>

If we wish to config requests before they are sent, we could do as follows:

<script type="text/javascript">
	$(document).ready(function() {
		$.ajax({
			url: "NoSuchFile.json",
			success: function (data, status, jqxhr) {
				handleResponse(status, data, null, jqxhr);
			},
			error: function (jqxhr, status, errorMsg) {
				handleResponse(status, null, errorMsg, jqxhr);
			},
			beforeSend: function (jqxhr, settings) {
				settings.url = "mydata.json";
			}
		});

		function handleResponse(status, data, errorMsg, jqxhr) {
			if (status == "success") {
				var tmplElems = $("#flowerTmpl").template({ flowers: data }).filter("*");
				tmplElems.slice(0,3).appendTo("#row1");
				tmplElems.slice(3).appendTo("#row2");
			} else {
				$("<div>").addClass("error")
					.text("Status: " + status + " Error: " + errorMsg)
					.insertAfter("h1");
			}
		}
	});
</script>

If we wish to specify multiple handling functions, we can just put the methods in an array of the related action:

success: [processData, reportStatus],

If we wish to assign the related element of what the process should be related to, we can use the context:

$.ajax({
	url: "mydata.json",
	context: $("h1"),	
	etc.
})

//etc.

complete: function(jqxhr, status) {
	var color = status == "success" ? "green" : "red";
	this.css("border", "thick solid" + color);
}

We can, also, globally keep track of all the events running from Ajax in your application, with the following calls, which we put in the Document section:

ajaxComplete(function) 				//register function to run on ajax completion

ajaxError(function) 				//Register a function to run on ajax upon encountering a error

ajaxSend(function) 					//Fregister function to be called before an ajax request commences

ajaxStart(function) 				//Register function to be called when a ajax request starts

ajaxStop(function) 					//Register a function to be called when all ajax requsts complete

ajaxSuccess(function) 				//Register function to when a Ajax request succeeds

What follows, is a script that utilizes the ajax trackers:

<script type="text/javascript">
	$(document).ready(function() {
		$("<div").append("<label>Events:<label>")
		.append("<input type='checkbox' id='globalevents' name='globalevents' checked>").insertAfter("h1"); //checkbox for asserting that globals are registered

		$("<ol id='info' class='ajaxinfo'>").insertAfter("h1").append("<li>Ready</li>");

		function displayMessage(msg) {
			$("#info").append($("<li>".text(msg)));
		}

		$(document)
			.ajaxStart(function() {
				displayMessage("Ajax start")
			})
			.ajaxSend(function (event, jqhxr, settings) {
				displayMessage("Ajax send: " + settings.url)
			})
			.ajaxSuccess(function (event, jqxhr, settings) {
				displayMessage("Ajax success: " + settings.url)
			})
			.ajaxError(function (event, jqxhr, settings, errorMsg){
				displayMessage("Ajax error: " + settings.url)
			})
			.ajaxComplete(function (event, jqxhr, settings) {
				displayMessage("Ajax complete: " + settings.url)
			})
			.ajaxStop(function() {
				displayMessage("Ajax Stop")
			});

		$("button").click(function (e) {
			$("#row1, #row2, #info").empty();
			$.ajax({
				url: "mydata.json",
				global: $("#globalevents:checked").length > 0, //if it's true
				success: function (data, status, jqxhr) {
					var tmplElems = $("#flowerTmpl")
						.template({ flowers: data }).filter("*");
					tmplElems.slice(0,3).appendTo("#row1");
					tmplElems.slice(3).appendTo("#row2");
				}
			});
			e.preventDefault();
		});
	});
</script>

The above code, will track the processing of the ajax methods

What follows, is a listing of the attributes of which we can use in terms of configuring Ajax:

accepts 			//Sets the value of the accept request header, which specifies the MIME type to accept. defaults to dataType setting

cache 				//Determines wether content is cached or not by server. If set to false, is not cached. Default is false

contentType 		//Sets content-type header for the request

dataType 			//Specifies dataType expected from the Server. If used, ignore info about Server provided info regarding return types

headers 			//Additional headers and values to add to the request

jsonp 				//Specifies string to use instead of callback when making JSONP requests. Requires co-ordination with the server

jsonpCallback 		//Specifies the name for the callback function, replacing the randomly generated name that jQuery uses by default.

password 			//Specifies a password to use in response to an authentication challenge

scriptCharset 		//When requesting JS content, tells jQuery that the script is encoded with  the specified char set

timeout 			//Specifies the timeout (in miliseconds) for the request. if the request times out, then the function specified by the
					//error setting will be called with a status of timeout

username 			//Specifies a username to use in response to an authentication challenge

An example of using the timeout:

$.ajax("mydata.json", {
	timeout: 5000,
	etc.
})

//assume rest is defined

error: function(jqxhr, status, errorMsg) {
	console.log("Error: " + status);
}

//etc

NOTE: Most browsers put a limit on concurrent requests, which means that we can't just spam check all kinds of timeout requests, which could make the timeout occur
before the request even is done

If we wish to send the data as JSON formatted data, we can do as follows:

//presume other code defined

$("button").click(function (e){
	$.ajax({
		url: $("form").attr("action"),
		contentType: "application/json",
		data: JSON.stringify($("form").serializeArray()), //Serializes the objects into an array, then cause it to be a string, that is then sent to the server
		type: "post",
		success: processServerResponse
	})
	e.preventDefault();
})

//etc.

Note: We can turn of asyncrhonous attribute in usage of ajax, by virtue of setting it as follows:

//assume earlier code

$.ajax("flowers.html", {
	async.false,
	etc.
});

NOTE: use it for debug

If we want, we can ignore unmodified data:

<script type="text/javascript">
	$(document).ready(function() {
		$("button").click(function (e) {
			$.ajax("mydata.json", {
				ifModified: true, //Defines so that we can access the status on wether it's modified or not
				success: function (data, status) {
					if (status == "success") { //if changes occur
						$("#row1, #row2").children().remove();
						var tmplElems = $("#flowerTmpl")
							.template({ flowers: data }).filter("*");
						tmplElems.slice(0,3).appendTo("#row1");
						tmplElems.slice(3).appendTo("#row2");
					} else if (status == "unmodified"){ //if the status of the request is unmodified
						$("img").css("border", "thick solid green");
					}
				}
			});
			e.preventDefault();
		})
	});
</script>


We can also use interactions to interact with response data, as follows:

<style type="text/css">
	.error {color: red; border: medium solid red; padding: 4px;
			margin: auto; width: 200px; text-align: center}
</style>
<script type="text/javascript">
	$(document).ready(function() {
		$.ajax({
			url: "mydata.json",

			statusCode: { //Map response codes to functions
				304: temp, //only sent if ifModified is set to true and it is true
				200: handleSuccessfulRequest, //Case of succesful request, 
				404: handleFailedRequest, //case of error
				302: handleRedirect //Redirection
			}
		});

		function handleSuccessfulRequest(data, status, jqxhr) {
			$("#row1, #row2").children().remove();
			var template = $("#flowerTmpl");
			template.tmpl(data.slice(0,3)).appendTo("#row1");
			template.tmpl(data.slice(3)).appendTo("#row2");
		}

		function handleRedirect() {
			//Won't be called, due to jQuery automatically following reDirects until error or content
		}

		function handleFailedRequest(jqxhr, status, errorMsg) {
			$("<div class=error>Code: " + jqxhr.status + " Message: " + errorMsg + "</div>").insertAfter("h1");
		}
		
	});
</script>

NOTE: Success and error callbacks are done before the ones defined in statusCode

If we wish, we can apply dataFilters to the returend data:

//assume success and such has been defined

dataType: "json",
dataFilter: function (data, dataType) {
	if (dataType == "json") { //if the data type is json
		var filteredData = $.parseJSON(data); //parse the JSOn data
		filteredData.shift(); //shift it, so one element is removed
		return JSON.stringify(filteredData.reverse()); //return the string version, as it needs to be, but reverse it before doing so
	} else {
		return data;
	}
}


If we wish, we can convert the data returned by the server:

//assume ajax and everything defined already

converters: {
	"text html": function(data) { //if the data is html, the MIME type is text/html, but it's oftenly written as without the /
		return $(data); //convert it to be a jQuery object
	}
}

If we wish to setup default settings for Ajax, we can do as follows:

<script type="text/javascript">
	$(document).ready(function() {
		$.ajaxSetup({
			timeout: 15000,
			global: false,
			error: function(jqxhr, status, errorMsg) {
				$("<div class=error/>")
					.text("Status: " + status + " Error: " + errorMsg)
					.insertAfter("h1");
			},
			converters: {
				"text html": function(data) {
					return $(data);
				}
			}
		});

		//etc.

We can further more define the flow of ajax requests, as follows:

//assume ajax has been defined etc.

$.ajaxPreFilter("json html", function (settings, originalSettings, jqhxr) { //if a dataType has been set for json and html requests, trigger
	if(originalSettings.dataType == "html") { //if the settings of the said dataType is html
		settings.timeout = 2000; //put a timeout of 2 seconds
	} else {
		jqxhr.abort(); //Abort it, if the request is not a HTML request
	}
});


What follows, is a complete setup of the Webpage without any proper UI applied:

<!DOCTYPE html>
<html>
<head>
	<title>Example</title>
	<script src="jquery-2.0.2js" type="text/javascript"></script>
	<script src="handlebars.js" type="text/javascript"></script>
	<script src="handlebars-jquery.js" type="text/javascript"></script>
	<script src="jquery.validate.js" type="text/javascript"></script>
	<link rel="stylesheet" type="text/css" href="styles.css"/>
	<style type="text/css">
		a.arrowButton {
			background-image: url(leftarrows.png); float: left;
			margin-top: 15px; display: block; width: 50px; height: 50px;
		}
		#right {background-image: url(rightarrows.png)}
		h1 { min-width: 0px; width: 95%;}
		#oblock { float: left; display: inline; border: thin black solid; }
		#orderForm { margin-left: auto; margin-right: auto; width: 885px; }
		#bbox {clear: left}
		#error {color: red; border: medium solid red; padding: 4px; margin: auto;
			width: 300px; text-align: center; margin-bottom: 5px}
		.invalidElem {border: medium solid red}
		#errorSummary {border: thick solid red; color: red; width: 350px; margin: auto; 
			padding: 4px; margin-bottom: 5px}
		#popup {
			text-align: center; position: absolute; top: 100px;
			left: 0px; width: 100%; height: 1px; overflow: visible; visibility: visible;
			display: block }
		#popupContent { color: white; background-color: black; font-size: 14px; 
			font-weight: bold; margin-left: -75px; position: absolute; top: -55px;
			left: 50%; width: 150px; height: 60px; padding-top: 10px; z-index: 2; }
		#summary {text-align: center}
		table {border-collapse: collapse; border: medium solid black; font-size: 18px;
			margin: auto; margin-bottom: 5px;}
		th {text-align: left}
		th, td {padding: 2px}
		tr > td:nth-child(1) {text-align: left}
		tr > td:nth-child(2) {text-align: right}
	</style>
	<script id="flowerTmpl" type="text/x-handlebars-template">
		{{#flowers}}
		<div class="dcell">
			<img src="{{product}}.png"/>
			<label for="{{product}}">{{name}}:</label>
			<input name="{{product}}" value="0" />
		</div>
		{{/flowers}}
	</script>
	<script id="productRowTmpl" type="text/x-handlebars-template"> //Template to populate later on for selection
		{{#rows}}
			<tr><td>{{name}}</td><td>{{quantity}}</td></tr> 
		{{/rows}}
	</script>
	<script type="text/javascript">
		$(document).ready(function() {
			$("<div id='popup'><div id='popupContent'><img src='progress.gif'"
				+ "alt='progress'/><div>Placing Order</div></div></div>")
			.appendTo("body");

			$.ajaxSetup({
				timeout: 5000,
				converters: {"text html": function (data) { return $(data); }}
			});

			$(document).ajaxError(function (e, jqxhr, settings, errorMsg) {
				$("#error").remove();
				var msg = "An error occured. please try again"
				if (errorMsg == "timeout") {
					msg = "The request timed out. Please try again"
				} else if(jqxhr.status == 404) {
					msg = "The file could not be found";
				}
				$("<div id=error/>").text(msg).insertAfter("h1");
			}).ajaxSuccess(function() {
				$("#error").remove();
			});

			$("<a id=left></a><a id=right></a>").prependTo("#orderForm")
				.addClass("arrowButton").click(handleArrowPress).hover(handleArrowMouse);
			$("#row2, #row3, #popup, #summaryForm").hide();

			var flowerReq = $.get("flowers.html", function (data) {
				var elems = data.filter("div").addClass("dcell");
				elems.slice(0,3).appendTo("#row1");
				elems.slice(3).appendTo("#row2");
			});

			var jsonReq = $.getJSON("additionalflowers.json", function (data) {
				$("#flowerTmpl").template({ flowers: data }).appendTo("#row3");
			});

			$("<div id=errorSummary>").text("Please correct the following errors:")
				.append("<ul id='errorsList'></ul>").hide().insertAfter("h1");


			$("#orderForm").validate({
				highlight: function(element, errorClass) {
					$(element).addClass("invalidElem");
				},
				unhighlight: function(element, errorClass) {
					$(element).removeClass("invalidElem");
				},
				errorContainer: "#errorSummary",
				errorLabelContainer: "#errorList",
				wrapper: "li",
				errorElement: "div"
			});

			var plurals = {
				aster: "Asters", daffodil: "Daffodils", rose: "Roses",
				peony: "Peonies", primula: "Primulas", snowdrop: "Snowdrops",
				carnation: "Carnations", lily: "Lillies", orchid: "Orchids"
			};

			$.when(flowerReq, jsonReq).then(function() {
				$("input").each(function(index,elem) {
					$(elem).rules("add", {
						required: true,
						min: 0,
						digits: true,
						remote: {
							url: "http://node.jacquisflowershop.com/stockcheck",
							type: "post",
							global: false
						},
						messages: {
							required: "Please enter a number of " + plurals[elem.name],
							digits: "Please enter a number of " + plurals[elem.name],
							min: "Please enter a positive number of "
								+ plural[elem.name]
						}
					})
				}).change(function(e) {
					if ($("#orderForm").validate().element($(e.target))) {
						var total = 0;
						$("input").each(function(index, elem){
							total += Numbers($(elem).val());
						});

						$("#total").text(total);
					}
				});
			});

			$("#orderForm button").click(function (e){
				e.preventDefault();
				var formData = $("orderForm").serialize();
				$("body *").not("#popup, #popup *").css("opacity", 0.5);
				$("input").attr("disabled", "disabled");
				$("#popup").show();

				$.ajax({
					url: "http://node.jacquisflowershop.com/order",
					type: "post",
					data: formData,
					dataType: "json",
					dataFilter: function (data, dataType) { //Declare a filter function
						data = $.praseJSON(data); //parse the JSON data into Javascript object
						var cleanData = { //the data in a clean format
							totalItems: data.totalItems,
							totalPrice: data.totalPrice
						};
						delete data.totalPrice; delete data.totalItems; //delete the totalPrice and totalItems for cleanup
						cleanData.products = []; //intiailize the products
						for (prop in data) { //go through the data to add props
							cleanData.products.push({ //push the products to create structure
								name: plurals[prop], //access plurals and declare the name to be this
								quantity: data[prop] //declare quantity to be respective props amount
							})
						}
						return cleanData; //return the data which has been cleaned up
					},
					converters: { "text json": function (data) { return data; } }, //make custom converter that just passes the data to circumvent built-in converters
					//since we already made our own, and this removes the redundancy of the jQuery attempting to double up the parsing
					success: function (data) { //Upon a successful ajax request, process the serverResponse
						processServerResponse(data);
					},
					complete: function() { //Hide the popup and remove the disabled attribute from input upon completion
						$("body *").not("#popup, #popup *").css("opacity", 1);
						$("input").removeAttr("disabled");
						$("#popup").hide();
					}
				})
			});

			function processServerReponse(data) {
				if (data.products.length > 0) { //if there is any data retrieved from the server
					$("body > *:not(h1)").hide(); //hide everything that is not the header
					$("#summaryForm").show(); //show the summaryForm
					$("#productRowTmpl") //populate the productRowtemplate
						.template({ rows: data.products }).appendTo("tbody");
					$("#totalitems").text(data.totalItems); //populate total items with the totalitems from Data object
					$("#totalprice").text("$" + data.totalPrice); //populate price with price from data object
				} else { //No data was retrieved
					var elem = $("input").get(0); //Select first element to allow injection of custom error
					var err = new Object(); //Start an object to produce the error
					err[elem.name] = "No products Selected"; //access the name and set it to no products selected
					$("#orderForm").validate().showErrors(err); //validate the orderForm and show the errors with the error object
					$(elem).removeClass("invalidElem"); //remove the class of invalid Elem to remove selection of first element, so error is percieved as "General"
				}
			}

			var total = $("#buttonDiv")
				.prepend("<div>Total items: <span id=total>0</span></div>")
					.css({ clear: "both", padding: "5px "});
				$("<div id=bbox />").appendTo("body").append(total).css("clear: left");

				$("input").change(function (e) {
					var total = 0;
					$("input").each(function (index, elem){
						total += Number($(elem).val());
					});
					$("#total").text(total);
				});

				function handleArrowMouse(e) {
					var propValue = e.type == "mouseenter" ? "-50px 0px" : "0px 0px";
					$(this).css("background-position", propValue);
				}

				function handleArrowPress(e) {
					var elemSequence = ["row1", "row2", "row3"];
					var visibleRow = $("div.drow:visible");
					var visibleRowIndex = 
						jQuery.inArray(visibleRow.attr("id").elemSequence);


					var targetRowIndex;
					if (e.target.id == "left") {
						targetRowIndex = visibleRowIndex - 1;
						if (targetRowIndex < 0) { targetRowIndex = elemSequence.length - 1 };
					} else {
						targetRowIndex = (visibleRowIndex + 1) % elemSequence.length;
					}

					visibleRow.fadeOut("fast", function() {
						$("#" + elemSequence[targetRowIndex]).fadeIn("fast")
					});
			}
		});
	</script>
</head>
<body>
	<h1>Jacqui's Flower Shop</h1>
	<form id="orderForm" method="post" action="http://node.jacquisflowershop.com/order">
		<div id="oblock">
			<div class="dtable">
				<div id="row1" class="drow"></div>
				<div id="row2" class="drow"></div>
				<div id="row3" class="drow"></div>
			</div>
		</div>
		<div id="buttonDiv"><button type="submit">Place Order</button></div>
	</form>
	<form id="summaryForm" method="post" action=""> //Responsible for Ajax answers in terms of selections
		<div id="summary">
			<h3>Order Summary</h3>
			<table border="1">
				<thead>
					<tr><th>Product</tr><th>Quantity</th>
				</thead>
				<tbody>
				</tbody>
				<tfoot>
					<tr><th>Number of Items: </th><td id="totalitems"></td></tr>
					<tr><th>Total Price:</th><td id="totalprice"></td></tr>
				</tfoot>
			</table>
			<div id="buttonDiv2"><button type="submit">Complete Order</button></div>
		</div>
	</form>
</body>
</html>


There are two versions of jQuery UI, one for development and one for deployment.

To get stuff for the dev version (bigger, easier to read regarding debug):

Put the following in the respective HTML file:

js\jquery-ui-1.10.3.custom.js

the theme file (\sunny\jquery-ui-1.10.3.custom.css)

themes\sunny\images folder

to add a jQuery ui to a project, we just src it like we do with JS scripts:

<head>
	//stuff
	<script src="jquery-ui-1.8.16.custom.js" type="text/javascript"></script>
	<link rel="stylesheet" type="text/css" href="jquery-ui-1.8.16.custom.css"/>
</head>

The smaller version, is the following files:

js\jquery-ui-1.10.3.custom.min.js

themes\sunny\jquery-ui-1.10.3.custom.css

themes\sunny\images folder

You can also use the UI from a CDN, navigate to their site and access the URL to link it in the html

NOTE: distributers include Microsoft and Google

Example:

<head>
	<script src="http://ajax.aspnetcdn.com/ajax/jquery.ui/1.10.3/jquery-ui.min.js" type="text/javascript"></script>
	<link href="http://ajax.aspnetcdn.com/ajax/jquery.ui/1.10.3/themes/sunny/jquery-ui.css" rel="stylesheet" />
</head>

To apply the jQuery UI to buttons, we simply put it in the JS section with a function call to button:

$("button").button();

We can interact with the button, in the following matters:

disabled 			//Turns disabled on/off, does not care for underlying HTML

text 				//defines wether it will display text, is ignored if icon is false

icons 				//defines wether it will display a icon or not

label 				//gets or sets the text displayed by the button

Example of interacting with the button:

$("button").button({ //creation of button to set attributes
	label: "place your order",
	disabled: true
});

$("button").button("option", "disabled", false); //config after it's been created

We can also define primary and secondary icons for buttons:

$("button").button({
	icons: {
		primary: "ui-icon-star",
		secondary: "ui-icon-circle-arrow-e"
	}
});

If we wish to put in custom images, we can do as follows:

$("button")
	.text("")
	.append("<img src=rightarrow.png width=100 height=10 />")
	.button();
});

There is further methods related to the button:

button("destroy") //returns the HTML object to it's original state

button("disable") //disables the button

button("enable") //enables the button

button("option") //Sets one or more options

button("refresh") //refreshes the button

Example of removal:

$("button").button().click(function (e){
	$("button").button("destroy");
	e.preventDefault();
});

Example of making checkbox for enable/disable of said button:

$("<span>Enabled:<span><input type=checkbox checked />").prependTo("#buttonDiv");
$(":checkbox").change(function (e) {
	$("button").button(
		$(":checked").length == 1 ? "enable" : "disable"
	)
});

$("button").button();

An example of using refresh to check wether the button is to be disabled or not (jQuery UI does not do it by itself):

$("<span>Enabled<span><input type=checkbox checked />").prependTo("#buttonDiv");
$(":checkbox").change(function (e) {
	var buttons = $("button");
	if ($(":checked").length == 1) {
		buttons.removeAttr("disabled");
	} else {
		buttons.attr("disabled", "disabled");
	}
	buttons.button("refresh");
});

$("button").button();

An example of creating events with the button:

$("button").button({
	create: function (e) {
		$(e.target).click(function (e) {
			alert("button was pressed");
			e.preventDefault();
		})
	}
});


We can convert buttons to the jQuery UI type by the following:

$(".jqButton").click(function(e) {
	e.preventDefault();
	$(this).button();
});

A toggle button is just a checkbox with a button applied to it:

In head, in JS section:

$(document).ready(function() {
	$(".jqButton").button();
});


in html:

<input class="jqButton" type="checkbox" id="toggle">
<label for="toggle">Toggle Me</label>

To create a button set:

In head, in JS section:

$("#radioDiv").buttonSet();

in html:

<div id="radioDiv">
	<input type="radio" name="flower" id="rose" checked />
	<label for="rose">Rose</label>
	<input type="radio" name="flower" id="lily"/><label for="lily">Lily</label>
	<input type="radio" name="flower" id="iris"/><label for="iris">Iris</label>
</div>

To create button sets from buttons, just declare a div with a id and then have respective id selected in the JS section and buttonSet() it.

We can create progress bars, if we want:

In head, JS section:

$("#progressDiv").progressbar({
	value: 21
});

in Html:

<div id="progressDiv"></div>

There are a number of attributes we can put to the progress bar:

disabled 	//Default is false, if true, disables it

value 		//Default 0, presents % done. false to cause it ot be indeterminate

max 		//max of the bar, default is 100

We of course have the listing of methods for it as well:

progressbar("destroy") 		//Returns the div element to its original state

progressbar("disable") 		//disables it

progressbar("enable") 		//enables it

progressbar("option") 		//options

progressbar("value", value) 	//gets and sets value, switches between indeterminate and determinate progress bar

Example of creating 3 buttons with increment, decrement and indeterminate:

//assume bar example since before

$("button").click(function (e) {
	var divElem = $("#progressDiv");
	if (this.id == "mode"){
		divElem.progressbar("value",false);
	} else {
		var currentProgress = divElem.progressbar("value"); //attempt to retrieve value
		if (!currentProgress) { //if there is no currentProg, switch the bar over to increment and decrement mode and set default value of 21
			divElem.progressbar("value", 21);
		} else {
			divElem.progressbar("value", //check to see what id the button is in, if it's decr, decrease, if its incr, increase
				this.id == "decr" ? currentProgress - 10 : currentProgress + 10)
		}
	}
});

html:

<button id="decr">Decrease</button>
<button id="incr">Increment</button>
<button id="mode">Indeterminate</button>


Progress bars has 3 events:

create //Triggers when created

change //triggers when changed

complete //triggers when reaches 100

Example of using them:

$("#progressDiv").progressbar({
	value: 21,
	create: function (e) {
		$("#progVal").text($("#progressDiv").progressbar("value"));
	},
	complete: function (e) {
		$("#incr").button("disable")
	},
	change: function (e) {
		var currentValue = $("#progressDiv").progressbar("value");
		if (!currentValue){
			$("#progWrapper").hide();
		} else{
			if ($(this).progressBar("value") < 100 {
				$("#incr").button("enable")
			}
			$("#progVal").text(currentValue);
			$("#progWrapper").show();
			)
		}
	}
});

in the html:

<span id="progWrapper">Progress: <span id="progVal"></span>%</span>

To create a slider, we can do as follows:

in head:

<style>
	#slider { margin: 10px; }
</style>
<script type="text/javascript">
	$(document).ready(function() {
		$("#slider").slider();
	});
</script>

in html:

<div id="slider"></div>

Of course, we have the listing of related attributes to sliders:

animate 		//if true, animates slider when the user clicks a position outside the handle

disabled 		//Disables slider when set to true. Default is false

max 			//Defines the max for slider, default is 100

min 			//Defines min of slider, default is 0

orientation 	//Defines orientation

range 			//Used with values setting to create a multihandle slider

step 			//Defines the interval that the slider moves between the min and max values

value 			//Defines the value that the slider represents

values 			//Used with the range setting to create a multihandle slider

We can make horizontal and vertail sliders:

in head:

<style>
	#hslider, #vslider { margin: 10px }
</style>

<script type="text/javascript">
	$(document).ready(function() {
		$("#hslider").slider({
			value: 35
		});

		$("#vslider").slider({
			orientation: "vertical",
			value: 35
		});
	});
</script>

in body:

<div id="hslider"></div>
<div id="vslider"></div>

It could also just staright up be written in the JS section:

<script type="text/javascript">
	$(document).ready(function() {
		$("#hslider, #vslider").slider({
			value: 35,
			orientation: "vertical"
		}).filter("#hslider").slider("option", "orientation", "horizontal");
	});
</script>

Html remains the same

Animation can simply be set by:

<script type="text/javascript">
	$(document).ready(function() {
		$("#slider").slider({
			animate: "fast"
		});
	});
</script>

the HTML:

<div id="slider"></div>

We can also create a range slider, between two points:

JS part:

<script type="text/javascript">
	$(document).ready(function() {
		$("#slider").slider({
			values: [35, 65],
			range: true,
			create: displaySliderValues,
			slide: displaySliderValues
		});

		function displaySliderValues(){
			$("#lower").text($("#slider").slider("values", 0)); //index of values to access
			$("#upper").text($("#slider").slider("values", 1)); //index of values to access
		}
	});
</script>

in html:

<div id="slider"></div>
<div>Lower value: <span id="lower">
</span>Upper Value: <span id="upper"></span></div>


We have, of course, the usual suspects line up of methods:

slider("destroy") //returns its to underlying HTML

slider("disable") //Disables slider

slider("enable") //Enables slider

slider("option") //sets options

slider("value", value) //Gets or sets values for a normal slider

slider("value", [values]) //Gets or sets values for a range slider


Examples regarding sliders:

<style>
	#slider, #rangeslider, *.inputDiv { margin: 10px }
	label {width: 80px; display: inline-block; margin: 4px}
</style>
<script type="text/javascript">
	$(document).ready(function() {
		$("#slider").slider({
			value: 50,
			create: function() {
				$("#slideVal").val($("#slider").slider("value"));
			}
		});

		$("#rangeslider").slider({
			values: [35, 65],
			range: true,
			create: function() {
				$("#rangeMin").val($("#rangeslider").slider("values", 0));
				$("#rangeMax").val($("#rangeslider").slider("values", 1));
			}
		})

		$("input").change(function (e) {
			switch (this.id){
				case "rangeMin":
				case "rangeMax":
					var index = (this.id == "rangeMax") ? 1 : 0;
					$("#rangeslider").slider("values", index, $(this).val())
					break;
				case "slideVal":
					$("#slider").slider("value", $(this).val())
					break;
			}
		})
	});
</script>

HTML part:

<div id="rangeSlider"></div>
<div class="inputDiv">
	<label for="rangeMin">Range Min: </label><input id="rangeMin" />
	<label for="rangeMax">Range Max: </label><input id="rangeMax" />
</div>
<div id="slider"></div>
<div class="inputDiv">
	<label for="slideVal">Slide Val: </label><input id="slideVal" />
</div>

There are a number of events related to sliders:

create 		//Upon creation

start 		//Upon start of sliding

slide 		//every mouse move upon slide

change 		//upon changed

stop 		//upon stoping the sliding of handle

What follows is an example of interacting with the said events:

<html>
<head>
	<title>Example</title>
	<script src="jquery-2.0.2js"></script>
	<script src="jquery-ui-1.10.3.custom.js"></script>
	<link href="jquery-ui-1-10-3.custom.css" rel="stylesheet" />
	<style>
		#rangeslider, *.inputDiv { margin: 10px}
		label {width: 80px; display: inline-block; margin: 4px}
	</style>
	<script type="text/javascript">
		$(document).ready(function() {
			$("#rangeslider").slider({
				values: [35, 65],
				range: true,
				create: setInputsFromSlider,
				slide: setInputFromSlider,
				stop: setInputFromSlider
			});

			function setInputsFromSlider(){
				$("#rangeMin").val($("#rangeslider").slider("values", 0));
				$("#rangeMax").val($("#rangeslider").slider("values", 1));
			}

			$("input").change(function (e) {
				var index = (this.id == "rangeMax") ? 1 : 0;
				$("#rangeslider").slider("values", index, $(this).val())
			});
		});
	</script>
</head>
<body>
	<div id="rangeslider"></div>
	<div class="inputDiv">
		<label for="rangeMin">Range Min: </label><input id="rangeMin" />
		<label for="rangeMax">Range Max: </label><input id="rangeMax" />
	</div>
</body>
</html>

jQuery UI also allows for Autocompletion:

in JS part:

var flowers = ["Aster", "Daffodil", "Rose", "Peony", "Primula", "Snowdrop", "Poppy", "Primrose", "Petuna", "Pansy"];

$("#acInput").autocomplete({
	source: flowers
})

in html:

<div class="ui-widget">
	<label for="acInput">Flower Name: </label><input id="acInput"/>
</div>

If we wish to map against an array of objects, we can do so:

var flowers = [{label: "Aster (Purple)", value: "Aster"}, {label: "Daffodil (White)", value: "Daffodil"}] //etc

The label part is just to display what comes up in the pop-up meny, the value is the actual value.

Theres a number of attributes we can use with autoComplete, as follows:

appendTo 		//Specifies the element that the pop-up menu should be appended to. Default is body

autoFocus 		//if true, first item is focused. Default is false. FOcused items can be selected with enter

delay 			//delay of autocomplete data

disabled 		//Disables the autocomplete features when set to true. This setting does not affect the underlying
				//input element. Default: false

minLength 		//Default 1, amount of chars that must be written b4 autocomplete suggests

position 		//Sets position of pop-up menu relative to input element

source 			//Specifies the source of items to be added to the autocomplete menu. There is no default to this.

Example of using a remote source:

$("#acInput").autoComplete({
	source: "http://node.jacquisflowershop.com/auto"
})


Note: The source causes automated get requests to url search against the specified adresses, adding input to after the search url:

http://node.jacquisflowershop.com/auto?term=<userinput goes here>

The node.js script to support remote autocompletion is as follows:

var http = require("http");
var querystring = require("querystring");
var input = require("url");

var port = 80;

http.createServer(function (req, res) {
	console.log("[200 OK] " + req.method + " to " + req.url);

	var flowers = ["Aster", "Daffodil", "Rose", "Peony", "Primula", "Snowdrop", "Poppy", "Primrose", "Petuna", "Pansy"];

	var matches = [];

	var term = url.parse(req.url, true).query["term"];

	if (term) {
		var pattern = new RegExp("^" + term, "i"); //the pattern is beginning with term, declared as i
		for (var i = 0; i < flowers.length; i++) {
			if (pattern.test(flowers[i])) { //if the regex matches the string
				matches.push(flowers[i]); //Push the matches onto the array
			}
		}
	} else {
		matches = flowers;
	}

	res.writeHead(200, "OK", {
		"Content-Type": "application/json",
		"Access-Control-Allow-Origin": "*"
	});
	res.write(JSON.stringify(matches));
	res.end();
}).listen(port);
console.log("Ready on port: " + port);

To optimize the amount of requests, we simply limit it:

$("#acInput").autoComplete({
	source: "http://node.jacquisflowershop.com/auto",
	minLength: 3,
	delay: 1000
})

We can also, of course, define a method related to autocomplete:

$("#acInput").autoComplete({
	source: function(request, response) {
		var term = request.term;
		var pattern = new RegExp("^" + term, "i");

		var results = $.map(flowers, function(elem) {
			if (pattern.test(elem) {
				return elem;
			})
			response(results);
		})
	}
});

An example of using it with a remote source:

$("#acInput").autocomplete({
	source: function (request, response) {
		$.getJSON("http://node.jacquisflowershop.com/auto", function(flowers) {
			var term = request.term;
			var pattern = new RegExp("^" + term, "i");

			var results = $.map(flowers, function (elem) {
				if (pattern.test(elem)) {
					return elem;
				}
			})
			response(results);
		});
	}
})

We can declare the position of the pop-up:

in the head:

<style>
	#target { margin-top: 40px; display: inline-block }
</style>

in JS part:

$("#acInput").autocomplete({
	source: flowers,
	position: {
		my: "left top",
		at: "right bottom+20",
		of: "#target",
		collision: "fit"
	}
})

in body:

<span id="target">Target</span>

Autocomplete has a list of attributes as follows:

my 			//Specifies part of the pop-up that will be used to determine placement

at 			//Specifies the part of the target element that the pop-up will be positioned relative to

of 			//Specifies the target element that the pop-up will be positioned relative to

collission 	//Specifies how to handle overflow

flip 		//Decides what side to use overflow

fit 		//moves the pop-up away from edge of screen

flipfit 	//Combines the behaviour of both the flip and fit values

none 		//Stops adjustement of position

Generally they are declared as:

my: "left top",
at: "right bottom+20",
of: "#target",

etc.

Of course, Autocomplete has a list of related methods:

autocomplete("close") 		//Closes the autocomplete menu

autocomplete("destroy") 	//Removes the autocomplete funct from input element

autocomplete("disable") 	//Disables autocomplete

autocomplete("enable") 		//Enables autocomplete

autocomplete("option") 		//Sets one or more options

autocomplete("search", value) 	//Triggers autocomplete on said value, if no value is defined, the contents of input element is used

example of using these:

$(document).ready(function() {
	var flowers = ["Aster", "Daffodill", "Rose", "Peony", "Primula", "Snowdrop", "Poppy", "Primrose", "Petuna", "Pansy"];

	$("#acInput").autocomplete({
		source: flowers
	});

	$("button").click(function(e) {
		e.preventDefault();
		switch (this.id) {
			case "close":
				$("#acInput").autocomplete("close");
				break;
			case "input":
				$("#acInput").autocomplete("search");
				break;
			default:
				$("#acInput").autocomplete("search", this.id);
				break;
		}
	});
</script>

Html part:

<body>
	<form>
		<button id="s">S</button>
		<button id="p">P</button>
		<button id="input">Input</button>
		<button id="close">Close</button>
		<div class="ui-widget">
			<label for="acInput">Flower Name: </label><input id="acInput">
		</div>
	</form>
</body>

There is a list of autocomplete events that we can access, of course:

change 		//When focus leaves the element after value has changed

close 		//when pop-up menu is closed

create 		//when autocomplete is created

focus 		//when the menu gains focus

open 		//when menu is displayed

response 	//After search completed, but before results are shown

search 		//before list of autocomplete items is generated or requested

select 		//when an item is selected from the menu

We can apply extra info to items, by virtue of ui.item.<attribute>

Example:

$("#acInput").autocomplete({
	source: flowers,
	focus: displayItem,
	select: displayItem,
	change: displayItem
})


function displayItem(event, ui) {
	$("#itemLabel").text(ui.item.label)
}

in html:

Item Label: <span id="itemLabel"></span>

We could modify results before they are displayed:

$("#acInput").autocomplete({
	source: flowers,
	response: filterResults
});

function filterResults(event, ui) {
	for (var i=0; i < ui.content.length; i++) {
		if (ui.content[i].label == "Peony") {
			ui.content.splice(i, 1);
		}
	}
}


We can use functions to modify the interaction of select events to cause manipulation of other fields:

$("#acInput").autocomplete({
	source: flowers,
	select: function(event, ui) {
		$("#sku").val(skus[ui.item.value]); //Access a second field to set it's value, assuming a field with the label sku and input id sku has been set
	}
})


If we wish to do a accordion, we can do so by virtue of the accordion() method:

in JS:

$("#accordion").accordion();


in html:

<div id="accordion"> //Assigns top value to be accordion
	<h2><a href="#">Row 1</a></h2> //adapt the other elements to be accordion elemenets
	<div id="row1"></div>
	<h2><a href="#">Row 2</a></h2>
	<div id="row2"></div>
	<h2><a href="#">Row 3</a></h2>
	<div id="row3"></div>
</div>


We have, of course, a number of settings for the accordion:

active 			//Gets or sets the element to be displayed. The default is to display the first

animate 		//Specifies the animation that will be used during the transition from one content element to another

collapsible 	//When true, all of the content sections can be collapsed. default: false

disabled 		//Default is false. if true, the accordion is disabvled

event 			//Specifies the event from the header element that triggers the transition to another content element

header 			//Specifies which elements will be used as headers

heightStyle 	//Controls the height of the accordion and its panels 
{
auto 		//height of tallest panel

fill 		//Expands accordion to fill teh parents elements height

content 	//Each panel will be as high as its content	

}

icons 			//Specifies the icons to be used in the accordion


An example of a accordion with a high height:

in the CSS:

<style type="text/css">
	#accordion {margin: 5px}
	.dcell img {height: 60px}
</style>

in the JS:

$("<h2><a href=#">All</a></h2><div id=row0></div>").prependTo("#accordion").filter("div").append($("#row1, #row2, #row3").clone());

$("#accordion").accordion();

$("button").button();

etc.

If we wish to set the height to the content, we can:

$("#accordion").accordion({
	heightStyle: "content"
});

We could just wrap the accordion as well and modify it:

$("#accordion").wrap("<div style='height:300px'></div>");

$("#accordion").accordion({
	heightStyle: "fill"
});

We can change the event trigger for the accordion, as well, if we wish:

$("#accordion").accordion({
	event: "mouseover"
});

If we wish to default the index of which it is to display, we can use the active attribute:

$("#accordion").accordion({
	active: 1
});

We could also rule out that one element must always be visible:

$("#accordion").accordion({
	active: false,
	collapsible: true
});

We can change the icons:

$("#accordion").accordion({
	collapsible: true,
	icons: {
		header: "ui-icon-zoomin",
		activeHeader: "ui-icon-zoomout"
	}	
});

The accordion has a number of methods as well, of course:

accordion("destroy") //destroys the accordion from input

accordion("disable") //disables it

accordion("enable") //enables it

accordion("option") //options

accordion("refresh") //refreshes the size of the widget panels

The acordion has a number of events, ofc:

activate  //When its activated

beforeActivate 	//Before content panel is activated

create //when accordion is created

The ui object attributes that Accordion has, is as follows:

newHeader //header of newly active content elemenet

oldHeader //header of previous active content elemenet

newPanel //newly active content elemenet

oldPanel //the previous active content elemenet

Examples:

$("#accordion").accordion({
	active: false,
	collapsible: true,
	activate: handleAccordionChange
})

function handleAccordionChange(event, ui) {
	if (ui.oldHeader.length) {
		console.log("Old header: " + ui.oldHeader[0].innerText);
	}
	if (ui.newHeader.length) {
		console.log("New header: " + ui.newHeader[0].innerText);
	}
}


etc.

To create tabs:

in JS:

$("#tabs").tabs();

in HTML:

<div id="tabs">
	<ul>
		<li><a href="#tab1">Row 1</a> //tab
		<li><a href="#tab2">Row 2</a> //tab
		<li><a href="#tab3">Row 3</a> //tab
	</ul>
	<div id="tab1"></div> //Content
	<div id="tab2"></div> //content
	<div id="tab3"></div> //Content
</div>

To get contents from a tab through Ajax, we can simply use href links:

<form method="post" action"http://node.jacquisflowershop.com/order">
	<div id="tabs">
		<ul>
			<li><a href="tabflowers.html">Ajax Contents</a> //ajax tab
			etc.


The tabs, of course, have their own settings:

active 			//Gets or sets currently displayed tab. Referenced by index, can close all by false if Collapsible is true

collapsible 	//if true, all tabs are closed

disabled 		//enable/disable individual tabs

event 		//set the event that triggers the transition between tabs

heightStyle 		//Specifies how high 

hide 		//Specifies how tabs are animated when they are closed. 

show 		//Specifies animation of opening

Example of selecting the active tab:

in head:

<style>
	#radioDiv { text-align: center; margin-top: 10px;}
</style>

in JS:

$("#radioDiv").buttonSet().change(function (e) {
	$("#tabs").tabs("option", "active", e.target.value);
});

in HTML:

<div id="radioDiv">
	<input type="radio" name="tabNo" id="one" value="1" />
		<label for="one">1</label>
	<input type="radio" name="tabNo" id="two" value="2" />
		<label for="two">2</label>
	<input type="radio" name="tabNo" id="three" value="3" />
		<label for="three">3</label>
</div>

We can disable individual tabs, ofc:

in CSS:

<style type="text/css">	
	#buttonDiv {margin: 5px}
</style>

in JS:

$("input:checkbox").button().click(function() {
	var disabledPositions = [];
	$("input:checked").each(function (index, elem) {
		disabledPositions.push(Number(elem.value));
	})

	$("#tabs").tabs("option", "disabled", disabledPositions)
});

in the HTML:

<div id="buttonDiv">
	<label for="cb0">Tab 1</label><input type="checkbox" id="cb0" value=0>
	<label for="cb1">Tab 2</label><input type="checkbox" id="cb1" value=1>
	<label for="cb2">Tab 3</label><input type="checkbox" id="cb2" value=2>
</div>

We can of course change the triggering event:
$("#tabs").tabs({
	event: "mouseover"	
});

The tabs, has of course, the usual lineup of methods:

tabs("destroy") 		//Destroys it, revealing the html element

tabs("disable") 		//Disables all or one

tabs("enable") 			//enables all or one

tabs("option") 			//Changes one or more settings

tabs("load") 			//loads contents of a tab using ajax

tabs("refresh") 		//refreshes the tab

We can of course, add and remove tabs:

in css:

<style type="text/css">
	#buttons {margin: 5px 0}
</style>

in JS:

$("button").button().click(function(e) {
	var tabsElem = $("#tabs");
	if (this.id == "add") {
		var tabId = tabsElem.children("div").length + 1; //declare id
		tabsElem.children("ul").append($("<li>").append($("<a>").attr("href", "#tab" + tabID).text("Tab " + tabID))); //append element
		$("<div>").attr("id", "tab" + tabID).text("This is the contents for a tab " + tabID).appendTo(tabsElem); //assign attributes to the div and contents
	} else {
		tabsElem.find("li").first().remove(); //find the li element with the tab and remove it
		tabsElem.children("div").first().remove(); //remove the div from the children of div 
	}
	tabsElem.tabs("refresh");
})

In HTML:

<div id="buttons" class="ui-widget">
	<button id="add">Add tab</button>
	<button id="remove">Remove tab</button>
</div>


To trigger Tab AJAX requests, we could do as follows:

<script type="text/javascript">
	$(document).ready(function() {
		$("#tabs").tabs();

		$("#load").button().click(function (e) {
			var tabsElem = $("#tabs"); 

			tabsElem.find("a").each(function (index, elem) { //find the a links
				if (elem.href.indexOf("example.html") == -1) { //access the hrefs
					tabsElem.tabs("load", index); //load the tab
				}
			});
		});
	});
</script>

Of course, tabs have events as well:

create 		//When applied to a HTML element

beforeActivate //before is shown to user

activate //after a tab panel is shown to the user

beforeLoad //remote tab about to be loaded

load //when remote tab has been loaded

handler functions in terms of the events, comes with a ui object, has the following attributes:

tab 		//returns jQuery object containing the tab element
 
panel 		//returns jQuery object containing the panel element for the remote tab

jqHXR 		//returns the jqHXR object that is used for the ajax request

ajaxsettings 	//returns a map object that is passed to $.ajax to make the request

Example of beforeload:

in JS:


$(document).ready(function() {
	$("#tabs".tabs({
		beforeLoad: function (e, ui) {
			ui.ajaxSettings.url = "flowers.html";
		}
	});
});


The attributes of the ui object that is passed to the load function with ajax regarding tabs has two attributes:

tab 		//Returns jQuery object that contains the tab element

panel 		//returns jQuery object that contains the element into which the content was loaded

An example of rendering the stuff in the loaded tab:

$(document).ready(function() {
	$("#tabs").tabs({
		load: function (e, ui) {
			ui.tab.find("a").text("Loaded!");
			ui.panel.children().first().remove();
		}
	});
});

NOTE: No refresh is needed with the load event

What follows, is an example of using tabs to display forms and to further down the line create validation for the form:

<html>
<head>
	<title>Example</title>
	<script src="jquery-2.0.2.js" type="text/javascript"></script>
	<script src="handlebars.js"></script>
	<script src="handlebars-jquery.js"></script>
	<script src="jquery-ui-1.10.3.custom.js" type="text/javascript"></script>
	<link rel="stylesheet" type="text/css" href="styles.css"/>
	<link rel="stylesheet" type="text/css" href="jquery-ui-1.10.3.custom.css"/>
	<style type="text/css">
		#tab2 input, #tab3 input {width: 200px; text-align: left}
		#tab1, #tab2, #tab3 {padding:10px}
		.fl {float: left}
		#buttonDiv {clear: both}
		#tabs, h1 {margin: 10px}
		.regLabel {width: auto}
	</style>
	<script id="flowerTmpl" type="text/x-jquery-tmpl">
		{{#flowers}}
			<div class="dcell ui-widget">
				<img src="{{product}}.png"/>
				<label for="{{product}}">{{name}}:</label>
				<input name="{{product}}" value="0"/>
			</div>
		{{/flowers}}
	</script>
	<script id="detailsTmpl" type="text/x-jquery-tmpl">
		{{#details}}
			<div class="ui-widget">
				<label for="{{name}}">{{name}}:</label>
				<input name="{{name}}" placeholder="{{hint}}"/>
			</div>
		{{/details}}
	</script>
	<script type="text/javascript">
		$(document).ready(function() {
			var data = [{ "name": "Aster", "product": "aster"}, { "name": "Daffodil", "product": "daffodil"} etc.];

			var elems = $("#flowerTmpl").template({ flowers: data }).filter("*");
			elems.slice(0, 2).appendTo("#row1");
			elems.slice(2,4).appendTo("#row2");

			var detailsData = [{ name: "Name", hint: "Enter your name"}, { name: "Street", hint: "Enter your street"} etc.];

			$("#detailsTmpl").template({ details: detailsData }).filter("*").appendTo("#tab2").clone().appendTo("#tab3")

			$(".fl").removeClass("fl");
			$("#tabs").tabs().find("h2").remove();

			$("button").button();
		});
	</script>
</head>
<body>
	<h1>Jacqui's Flowershop</h1>
	<form method="post" action="http://node.jacquisflowershop.com/order">
		<div id="tabs" class="ui-widget">
			<ul>
				<li><a href="#tab1">1. Select product</a>
				<li><a href="#tab2">2. Your details</a>
				<li><a href="#tab3">3. Your shipping address</a>
			</ul>
			<div id="tab1">
				<h2>.1 select your product</h2>
				<div id="row1"></div>
				<div id="row2"></div>
			</div>
			<div id="tab2" class="fl">
				<h2>2. Your details</h2>
			</div>
			<div id="tab3" class="fl">
				<h2>3. Your shipping adress</h2>
			</div>
		</div>
		<div id="buttonDiv"<button type="submit">Place Order</button></div>
	</form>
</body>
</html>

The above code still needs modifications in terms of validations and other things, but i already have notes on the said things.

<html>
<head>
	<title>Example</title>
	<script src="jquery-2.0.2.js" type="text/javascript"></script>
	<script src="jquery-ui-1.10.3.custom.js" type="text/javascript"></script>
	<link rel="stylesheet" type="text/css" href="styles.css"/>
	<link rel="stylesheet" type="text/css" href="jquery-ui-1.10.3.custom.css"/>
	<style type="text/css">
		input {width: 200px; text-align: left}
	</style>
	<script type="text/javascript">
		$(document).ready(function() {
			$("#datep").datepicker();
		});
	</script>
</head>
<body>
	<h1>Jacqui's flower shop</h1>
	<form method="post" action="http://node.jacquisflowershop.com/order">
		<div class="ui-widget">
			<label for="datep">Date: </label><input id="datep"/>
		</div>
	</form>
</body>
</html>

If we want an inline datepicker, that is visible when the element is visible, we could just declare them both inline:

<script type="text/javascript">
	$(document).ready(function() {
		$("#inline").datepicker();
	});
</script>

and just declare a span with the inline id:

//after input id part
<span id="inline"></span>

The settings of the datepicker is as follows:

altField 		//additional field to update with the data selection

buttonImageOnly //Specifies that the image specified by button Image should be contained in an img element rather than a button. Default is false

buttonImage //Specifies the url of an image to use for the pop-up trigger button. Not used by default

buttonText //Specifies the text for the pop-up trigger button. Default is (...)

defaultDate //sets the date to highlight when the datepicker is displayed

disabled 	//defines wether datepicker is disabled intially. Default is false

showOn 		//Specifies the trigger that triggers the datepicker. Default is focus

The options for defaultDate setting is as follows:

null 		//uses current data

Date object 	//uses the value defined in the date object

+days, -days 	//Defines by relativity to current data. in days, +3 is 3 days from now, -2 is two days ago etc.

+1d +1w +1m +1y //Define a longer set consisting of modifiers on days, weeks, months, years etc.

example of usage:

$("#datep").datepicker({
	defaultDate: "+5y"
});

To link it to a specific datepicker or other element:

$("#inline").datepicker({
	altField: "#datep"
});

We can manage the pop-up trigger as well, if we wish:

$("#datep").datepicker({
	showOn: "both"
});

It can hold three values:

focus //default

button //activates upon button

both //both 

we can modify the buttontext with buttonText:

buttonText: "Select" //for instance, causes button to have text of Select

We can modify it to be a image:

In the css:

#dpcontainer * {vertical-align: middle}
#dpcontainer img {width: 35px;}


in the datepicker place:


buttonImage: "right.png",
buttonImageOnly: true

etc.

in the html:

<div id="dpcontainer" class="ui-widget">
	<label for="datep">Date: </label><input id="datep"/>
</div>
etc.

To manage the date selection, we could use the following settings:

changeMonth 		//allows dropdown for changing months

changeYear 			//allows dropwofn ro changing years

constrainInput 		//Constraints to a valid date. default is true

hideIfNoPrevNext 	//if true, previous and next are hidden, instead of disabled, when there are no selectable dates in the past or future relative to display period.
					default: false

maxDate 			//Specifies the latest date that the user can select. The default is to allow the user to select any date.

minDate 			//specifies earliest date available. Default is any

numberOfMonths 		//Specifies amount of months shown, default is 1

showCurrentAtPos 	//Specifies where the current or default month is displayed in a multiMonth datepicker

stepMonths 			//Defines how many months of a jump occurs at button press.

yearRange 			//Defines year range. Default is 10 back and 10 forward

note: numberOfMonths can take a range in terms of indexes, such as [1,3] etc.

We can use showCurrentAtPos to modify the position of the pop-up window, in such a matter that we avoid overflow etc.

We can manage the appearance of the date picker, as well:

appendText 		//gets put in after the input element

closeText 		//Specifies text of completion

currentText 	//Text for button that returns to current date

duration 		//Specifies the speed or duration for animation specified by the showAnim settings is performed. default is normal.

gotoCurrent 	//Default false, if true, returns to selected date, instead of todays date

selectOtherMonths 	//if true, the dates of showOtherMonths can be selected, defaults to false

showAnim 	//defines animation of showing. Default is show

showButtonPanel 	//if true, allows button to jump to current data. Default is false

showOptions 		//Specifies the options for the defined animation

showOtherMonths 	//if true, shows previous months and dates instead of blanks. default is false

showWeek 		//if true, shows week info column. default is true

weekHeader 		//Sets the header for week column through showWeek setting. default is WK

Example of modifying weeks tab:

$("#datep").datepicker({
	showWeek: true,
	weekHeader: "Week"
});

We can append text afterwards of the box:

$("#datep").datepicker({
	appendText: "(mm/dd/yyyy)"
});

We can also make it a greyed out placeholder:

<script type="text/javascript">
	$(document).ready(function() {
		$("#datep").attr("placeholder", "mm/dd/yyyy").datepicker();
	});
</script>

of course, the datepicker has a set of events related to it:

datepicker("destroy") 		//removes the datepicker element

datepicker("disable") 		//dislabes it

datepicker("enable") 		//enables it

datepicker("option") 		//sets options

datepicker("isDisabled") 	//returns true if disabled

datepicker("hide") 			//hides the pop-up datepicker

datepicker("show") 			//shows the pop-up datepicker

datepicker("refresh") 		//Refreshes a datepicker to reflect changes in the underlying element

datepicker("getDate") 		//gets the selected date from the datepicker

datepicker("setDate", date) 	//sets the date for the picker

There are a bit more interactions, but for sake of berevity, i skip thoose. CAN BE FOUND ON 580ish

We can create dialog windows:

in the JS:

$("#dialog").dialog();

in the HTML:

<div id="dialog" title="Dialog Box">
	This is the shit that appears. it can be <em>styled<em>.
</div>

We can trigger them in functions and responses to stuffs:

in the JS:

$(document).ready(function() {
	$("#dialog").dialog({
		autoOpen: false
	});

	$("button").button().click(function(e) {
		$("#dialog").dialog("open")
	})
});

in the html:

<button>Show Dialog</button>

We can configure the dialog, with the following attributes:

appendTo 	//Specifies element to be appended to

autoOpen 	//if true, is opened upon creation. default is true

buttons 	//Defines the set of buttons to add to the dialog and functions to be invoked when those buttons are clicked. default is no buttons

closeOnEscape 	//if true, dismiss is caused on escape. Default is true

draggable 		//if true, is draggable

height 			//Specifies initial height

hide 			//Specifies the animation effect that is used to hide the dialog

maxHeight 		//specifies max height, default is false (no limit)

maxWidth 		//specifies max width, default is false, no limit

minWidth 		//min width, default is false, no limit

minHeight 		//see above

modal 			//if true, cannot interact with webpage before dialog is dismissed. False by default

position 		//initial position of dialog

resizable 		//Default is true, allows resizing of window

show 			//Specifies opening animation

title 			//Specifies the title of the dialog

width 			//Specifies initial width, default is auto

We can of course add inputs to the dialog:

<div id="dialog">
	This is some text
		<p>Name: <input id="name"/> City: <input id="city" autofocus="autofocus" /></p>
</div>

We can set the position with the following things:

my //determines placement

at 	//specifies part to be relative to

of 	//see above, is body if omitted

collision 	//specifies how to handle overflow

We can add buttons with functions to dialog windows:

buttons: [{text: "OK", click: function() {/* do something */}},
			{text: "Cancel", click: function() {$(this).dialog("close")}}]


We can put icons :

icons: {
	primary: "ui-icon-star",
	secondary: "ui-icon-circle-arrow-e"
}


An example of using a modal approach of handling dialogs:

<html>
<head>
	<title>Example</title>
	<script src="jquery-2.0.2js" type="text/javascript"></script>
	<script src="jquery-ui-1.10.3.custom.js" type="text/javascript"></script>
	<script src="handlebars.js"></script>
	<link rel="stylesheet" type="text/css" href="jquery-ui-1.10.3.custom.css"/>
	<link rel="stylesheet" type="text/css" href="styles.css"/>
	<style type="text/css">
		#dialog input {width: 150px; margin: 5px; text-align: left}
		#dialog label {width: 100px}
		table {border-collapse: collapse; border: thin solid black; margin: 10px}
		#placeholder {text-align: center}
		#show {margin: 10px}
		td, th {padding: 5px; width: 100px}
	</style>
	<script id="rowTmpl" type="text/x-handlebars-template">
		<tr><td>{{product}}</td><td>{{color}}</td><td>{{count}}</td></tr>
	</script>
	<script type="text/javascript">
		$(document).ready(function() {
			$("#dialog").dialog({
				buttons: [{ text: "OK", click: addDataToTable }], 
				modal: true,
				autoOpen: false,
				width: 340
			})

			$("#show").button().click(function () {
				$("#dialog").dialog("open");
			})

			function addDataToTable() {
				var data = {
					product: $("#product").val(),
					color: $("#color").val(),
					count: $("#count").val()
				}
				$("#placeholder").hide();
				$("#rowTmpl").template(data).filter("*").appendTo("#prods tbody");
				$("#dialog").dialog("close");
			}
		});
	</script>
</head>
<body>
	<h1>Jacqui's Flower Shop</h1>
	<div id="dialog" title="Enter Details" class="ui-widget">
		<div><label for="product">Product: </label><input id="product" /></div>
		<div><label for="color">Color: </label><input id="color" /></div>
		<div><label for="count">Quantity: </label><input id="count" /></div>
	</div>
	<table id="prods" class="ui-widget" border="1">
		<tr><th>Product</th><th>Color</th><th>Quantity</th></tr>
		<tr id="placeholder"><td coldspan=3>No products selected</td></tr>
	</table>
	<button id="show">Add Product</button>
</body>
</html>

Of course, there is a set of methods we could use for dialogs as well:

dialog("destroy") 	//Removes said dialog

dialog("option") 	//options

dialog("close") 	//closes

dialog("isOpen") 	//returns true if open

dialog("moveToTop") 	//moves the dialog to the top of the stack

dialog("open") 		//Displays the dialog to the user

Example of handling buttons with events related to closing opening:

in js:

$("#t1, #t2").button().click(function(e) {
	var target = this.id == "t1" ? "#d1" : "#d2";
	if ($(target).dialog("isOpen")) {
		$(target).dialog("close")
	} else {
		$(target).dialog("open")
	}
})

Of course, there is a set of events related to the dialog:

create 	//Triggered when created

beforeClose 	//triggered before about to close, returning false from handler forces dialog to stay open

open 		 //when opens

focus 	//when focused

dragStart 	//start of drag

drag 	//every mouse movement of drag

dragStop //stop of drag

resizeStart //start of resize

resize //mousemovement during resizing

resizeStop //when resizing stops

close 	//when closed

Example of keeping a dialog open:

<script type="text/javascript">
	$(document).ready(function() {
		var canClose = false;
		var delay = 15;

		$("#dialog").dialog({
			modal: true,
			autoOpen: false,
			beforeClose: function() {
				return canClose;
			},
			open: function() {
				var count = delay;
				var intID = setInterval(function() {
					count--;
					$("#time").text(count);
					if (count == 0) {
						clearInterval(intID)
						canClose = true;
						$("#dialog").dialog("close")
					}
				}, 1000)
			}
		})

		$("button").click(function (e) {
			$("#dialog").dialog("open")
		})
	});

</script>

The above code defines a dialog that is triggered upon button clicks. The open function causes a delay that is set to 15 seconds. Each second, it's counted down
and the time counts down.

If count is 0, it clears the interval, clears flag and closes it.

The interval of each tick is 1 seconds

An example of disabling buttons while drag occurs:

<script type="text/javascript">
	$(document).ready(function() {
		$("#dialog").dialog({
			autoOpen: true,
			dragStart: function() {
				$("input, #send").attr("disabled", "disabled") //When drag starts, disable these buttons
			},
			dragStop: function() {
				$("input, #send").removeAttr("disabled") //Enable them again, when drag stops
			}
		})

		$("button").click(function (e) {
			$("#dialog").dialog("open")
		})
	});
</script>



if we wish, we can use spinners:

<script type="text/javascript">
	$(document).ready(function() {
		$("#entry").spinner();
	});
</script>

in html:

<div class="ui-widget">
	Enter value: <input id="entry" value="0" />
</div>

We could do a similar things with HTML 5 elements:

<div class="ui-widget">
	Enter value: <input id="entry" value="0" type="number" />
</div>

Note: We can combine them, but that is not wise, due to not yet developed enough HTML support for it

We can configure the spinner, of course:

culture 		//Specifies the locale settings for parsing and formatting data value

disabled 		//disables the spinner if true

icons 		//Defines icons, default are up and down

incremental 		//if true, increases change rate upon holding down duration. if false, will be constant

max 		//largest allowed value
 	
min 		//smallest allowed value

numberFormat 		//format of the number that the spinner displays

page 		//Specifies the size of the page

step //Defines increment and decrement of pressing up/down buttons

Note: If the user writes something and then clicks up or down, it resets to the min value

to change the icons:

in the JS:

icons: {
	up: "ui-icon-circle-plus",
	down: "ui-icon-circle-minus",
}

An example of setting a custom value of increment amount upon holding button:

<script type="text/javascript">
	$(document).ready(function() {
		$("entry").spinner({
			incremental: function (spins) {
				return Math.pow(spins, 2);
			}
		});
	});
</script>

in html:

<div class="ui-widget">
	Enter value: <input id="entry" value="0" />
</div>

To use culture, we have to access a js called globalize:

In the head part with imports:

<script src="globalize.js"></script>
<script charset="utf-8" src="globalize.cultures.js"></script>

in the JS part:

$("#entry").spinner({
	culture: "fr-FR",
	numberFormat: "C"
});


The spinner has of course methods:

spinner("destroy") //Destroys it

spinner("disable") //disables it

spinner("enable") //enables it

spinner("option") //options

spinner("pageDown", count) //decreases amount by count pageDowns

spinner("pageUp", count) //increases amount by count pageUps

spinner("stepDown", count) //decreases by specified amount of steps

spinner("stepUp", count) //increases by specified amount of steps

spinner("value") //gets or sets current value

Example:

$("#entry").spinner({
	culture: "en-US",
	numberFormat: "C",
	step: 2,
	page: 10
});

$("button").button().click(function () {
	$("#entry").spinner(this.id); //call Spinner with this id, meaning it refers to itself
	console.log("Value: " + $("#entry").spinner("value"));
});

in html:

<div>
	<button id="pageDown">Page Down</button>
	<button id="stepDown">Step Down</button>
	<button id="stepUp">Step Up</button>
	<button id="pageUp">Page Up</button>
</div>

Of course, the spinner has events:

create 	//When created

change 	//when spinner changes and the underlying element has lost focus
 
spin 	//when value is incremented or deceremnted
 
start 	//before value is incrementedo r decremented

stop 	//After value is incremneted or decermented

We can of course, also, Spawn our own menu:

//assume earlier stuff has been defined

In head:

<style>
	.ui-menu{ width: 200px; }
</style>
<script type="text/javascript">
	$(document).ready(function() {
		$("#menu").menu();
	});
</script>

in HTML:

<ul id="menu">
	<li><a>Bouquetes</a></li>
	<li><a>Heirloom Blooms</a></li>
	<li><a>Summer Color</a>
		<ul>
			<li><a>Aster</a></li>
			<li><a>Rose</a></li>
			<li><a>Orchid</a></li>
		</ul>
	</li>
	<li><a>Wedding Classics</a></li>
	<li><a>Exotica</a></li>
</ul>

The above puts in a menu with items and underitems of said sections

We can add seperators by simply making a <li> with - as it's element:

<li>-</li>
<li class="ui-state-disabled"><a>Exotica</a></li>


The above will add a line and add another element that is disabled

We can of course have the li elements be referals to the same HTML document, or just have the li elements be hrefs to other things

Menus have of course settings:

disabled 	//Disables the entire menu when set to true

icons 		//Specifies icons to be used on submenus

menus 		//Specifies the elements to be used for the menu structure

position 	//specifies the position of the submenus relative to the main widget

role 		//sets a custom ARIA role for accessibility

Of course, menus have related methods as well:

All of the following are to be put in menu("<insert here>")


blur 		//Removes focus and triggers blur

collapse 	//Closes current active submenu

collapseAll 	//closes all open submenus

destroy 		//removes menu widget

disable 		//disables menu

enable 			//enables menu

expand 			//opens submenu for selected element in menu

focus 			//focus on menu item

isFirstItem 	//returns true if selected item is first in the menu

isLastItem 		//as above, but for last

next 			//Moves focus to the next menu item

option 			//Changes one or more settings

previous 		//Moves focus to previous item

refresh 		//updates the menu to reflect changes in HTML

select 			//Selects active menu item, closes all open submenus, and triggers select event

Of course, menus have events as well:

blur : when menu loses focus, cause blur

create : when is created

focus : when menu gains focus

select : when menu item is selected

An example of interacting with events:

in JS:

<script type="text/javascript">
	$(document).ready(function() {
		$("#menu").menu({
			focus: function (e, ui) {
				console.log("Focus: " + ui.item.find("a").first().text());
			},
			blur: function() {
				console.log("Blur");
			},
			select: function (e, ui) {
				console.log("Select:" + ui.item.find("a").first().text());
				e.preventDefault();
			}
		});
	});
</script>

in html:

<ul id="menu">
	<li><a>Summer Color</a></li>
	<li><a>Heirloom blooms</a></li>
	<li>-</li>
	<li><a>Summer Color</a>
		<ul>
			<li><a href="http://apress.com">Aster</a></li>
			<li><a>Rose</a></li>
			<li><a>Orchid</a></li>
		</ul>
	</li>
	<li><a>Wedding Classics</a></li>
	<li>-</li>
	<li class="ui-state-disabled"><a>Exotica</a></li>
</ul>

We can of course, define tooltips as well, if we want:

In the CSS and JS:

<style>
	[title] { font-weight: bold; font-style: italic }
</style>
<script type="text/javascript">
	$(document).ready(function() {
		$("[title]").tooltip();
	});
</script>

in the HTML:
<p>some shit
<span title="We are at 200 main st">20 mile radius</span>
</p>

With the above code, the 20 mile radius text gets highlighted with a tooltip

We can of course apply tooltips to other elements as well:

in CSS and JS:

<style>
	input { width: 150px; }
</style>
<script type="text/javascript">
	$(document).ready(function() {
		$("input").tooltip();
	});
</script>

in html:

<div><label>Name:</label><input title="Use lastname, firstname" /></div>
<div><label>City:</label><input title="Don't inluce your state" /></div>

The above will trigger tooltips for the input fields

Of course, we can configure the tooltip:

content 	//Sets content for the tooltip, can be expressed as string of HTML or as function

disabled 	//Disables the tooltip if true

hide 		//Specifies how tooltip is animated when hidden

items 		//Specifies a selector that can narrow the set of elements for which tooltips are created

position 	//Specifies position

show 		//Specifies animation for when it's shown

tooltipClass 	//Specifies a class for the specific tooltip, allowing styling independant on tooltips

track 	//if true, tooltip tracks to mouse movement above the element

Example of styling a tooltip:

In CSS/JS:

<style>
	span.toolTip { font-weight: bold; font-style:italic }
</style>
<script id="tipContent" type="text/html">
	We are at <b>200</b> Main Street
</script>
<script type="text/javascript">
	$(document).ready(function() {
		$("span.toolTip").tooltip({
			content: $("#tipContent").html(),
			items: "span.toolTip"
		});
	});
</script>

In HTML:

<span class="toolTip">20 mile radius</span>

We can of course generate tooltips based on contents, as well:

<script type="text/javascript">
	$(document).ready(function() {
		$("span.toolTip").tooltip({
			content: function () { //Trigger on the content being interacted with
				if (this.id == "address") { //if it's id is address
					return "We are at <b>200</b> Main Street";
				} else { //otherwise
					return "Fee capped at <i>$20</i> during June!"
				}
			},
			items: "span.toolTip"
		});
	});
</script>

in html:

<span id="address" class="toolTip">20 mile radius</span> of the store for free and
<span id="maxPrice" class="toolTip">$1/mile thereafter.</span></p>


We can cause callbacks and retrieve data remotely, from other specified JSON files, as follows:

//assume the following is in a json file:

{"address": "We are at <b>200</b> Main Street",
 "maxPrice": "Fee capped at <i>$20</i> during June!"}

The JS:

<script type="text/javascript">
	$(document).ready(function() {
		var tooltipData;

		$("span.toolTip").tooltip({ //NOTE: The following segment of making callback functions is actually AJAX related, meaning they are not direct
			content: function (callback) { //since callback occurs after content has been rendered, it cannot simply be returned as a html string
				if (tooltipData != null) { //if the data is available
					console.log("Requested serviced locally: " + this.id); //print out that we request locally for this id
					return tooltipData[this.id]; //apply the data 
				} else { //the data is not available
					var elemID = this.id; //bind the id
					$.getJSON("tooltips.json", function (data) { //call $.getJSON to get the data remotely from the json file
						tooltipData = data; //assign the data in calling the JSON file to be in tooltipData
						console.log("Requested serviced remotely: " + elemID); //log that we found it remotely
						callback(tooltipData[elemID]); //assign it from the callback retrieval
					});
				}
			},
			items: "span.toolTip" //assign that their span should be a span with the class toolTip
		});
	});
</script>


We can customize them further with CSS if we wish:

In the CSS: 

<style>
	*.customTip { border-color: red; }
</style>

later in the JS:

tooltipClass: "customTip" //assign classes of tooltips to be customTip

Note: The above code will generate two layers of divs, which can be used to access styling on different levels.

To access the ui tooltip, we can do as follows:

<style>
	span.toolTip { font-weight: bold; font-style: italic }
	*.customTip { border-color: red; }
	*.ui-tooltip-content { border: thick solid black; margin: 10px; padding: 10px; background-color: white; }
</style>

If we wish to track the mouse movements, we can do as follows:

<script type="text/javascript">
	$(document).ready(function() {
		$("span.toolTip").tooltip({ //Define a tooltip 
			content: "Move the mouse", //Contents of the tooltip
			items: "span.toolTip", //the items related 
			track: true //track it
		}).mousemove(function(e) { //react on mouse movement
			$(this).tooltip("option", "content", "X: " + e.pageX + " Y: " + e.pageY); //set the tooltip to track X and Y
		});
	});
</script>

To position the tooltip, we can of course, just position it:

in JS declaration of tooltip:

position: {
	my: "center bottom",
	at: "center top"
}

We can of course, use tooltip related methods as well:

tooltip("close") 		//Closes tooltip if it's open

tooltip("destroy") 		//destroys the tooltip

tooltip("disable") 		//disables it

tooltip("enable") 		//enables it

tooltip("open") 		//opens it, if its closed

tooltip("option") 		//Sets a config option

Example of creating a tooltip that opens and closes based on button interactions:

in JS:

$("button").button().click(function (e){
	$("span.toolTip").tooltip(this.id);
});

in the html:

<div>
	<button id="open">Open</button>
	<button id="close">Close</button>
</div>

Tooltips of course have events:

close 		//When closed

create 		//when created

open 		//when opened

Remember : functions related to events in terms of jquery passes a ui object

We can create draggable elements as well:

<script type="text/javascript">
	$(document).ready(function() {
		$("#draggable").draggable();
	});
</script>

We can of course customize the draggable object if we wish:

axis 		//default to false, can be set to x or y for restriction of x or y co-ords

containment 	//default to false, can be given a area to define where the draggable element can be

delay 			//default to 0, if defined, is amount of seconds user must drag before it moves

distance 		//defines distance to drag before dragging occurs, default is 1

grid 			//default is false, which means no grid. Can be defined to force grid allocation (snapping to a grid)

Examples of constraining drags:

<style type="text/css">
	div.dragElement: {font-size: large; border: thin solid black; width: 5em; text-align: center; background-color: lightgray; margin: 4px }
</style>
<script type="text/javascript">
	$(document).ready(function() {
		$(".dragElement").draggable({
			axis: "x"
		}).filter("#dragV").draggable("option", "axis", "y");
	});
</script>

in the html:

<div id="dragV" class="dragElement">
	Drag Vertically
</div>
<div id="dragH" class="dragElement">
	Drag Horizontally
</div>

For the containment setting, the following values can be used:

Selector 		//Constrained by the first matching string defined by selector

HTMLElement 	//draggable element is contained by virtue of the specified element

string 			//can specify values parent, document and window to restrict dragging

Number Array 	//Can use number array in format of [x1, y1, x2, y2] to restrict regions

Example of using containment:

css:

<style type="text/css">
	#container { border: medium double black; width: 400px; height: 150px}
</style>
<script type="text/javascript">
	$(document).ready(function() {
		$(".dragElement").draggable({
			containment: "parent"
		}).filter("#dragH").draggable("option", "axis", "x");
	});
</script>

in html:

<div id="container">
	<div id="dragH" class="dragElement">
		Drag Horizontally
	</div>
	<div class="dragElement">
		Drag within parent
	</div>
</div>

Example of constraint put on drag element:

in JS:

<script type="text/javascript">
	$(document).ready(function() {
		$("#draggable").draggable({
			grid: [100, 50]
		})
	});
</script>

in html:

<div id="draggable">
	Drag Me
</div>

We can apply delays to draggables as well:

<style type="text/css">
	#time, #distance {font-size: large; border: thin solid black; padding: 4px; 
		width: 100px; text-align: center; background-color: lightgray; margin: 4px; }
</style>
<script type="text/javascript">
	$(document).ready(function() {
		$("#time").draggable({
			delay: 1000 //Delay by 1 second 
		})

		$("#distance").draggable({
			distance: 150
		})
	});
</script>

in html:

<div id="time">Time delay</div>
<div id="distance">Distance</div>

Draggable has some methods:

draggable("destroy") //Destroys dragging from elemenet

draggable("disable") //Disables draggable interaction

draggable("enable")	 //Enables dragging

draggable("option")  //Changes one or more settings

And of course, draggable has events:

create //When created

start 	//when dragging starts

drag 	//mouse movement during dragging

stop 	//When dragging stops

In css:

<style type="text/css">
	#draggable {font-size: large; border: thin solid black; padding: 4px;
		width: 100px; text-align: center; background-color: lightgray; margin: 4px; }
</style>
<script type="text/javascript">
	$(document).ready(function(){
		$("#draggable").draggable({
			start: function() {
				$("#draggable").text("Dragging")
			},
			stop: function() {
				$("#draggable").text("Drag me")
			}
		})
	});
</script>

in html:

<div id="draggable">
	Drag me
</div>

Something we can combine with the draggable, is the droppable.

It has the following events:

create 	//when created

activate //when user starts dragging a dragable element

deactivate 	//when drag stops

over 	//when draggable is dragged over dropable element

out 	//when draggable goes out of dropable element

drop 	//when it's dropped

in css:

<style type="text/css">
	#droppable {padding: 20px; position: absolute; left: 5px; bottom: 5px}
</style>

in JS:

<script type="text/javascript">
	$(document).ready(function() {
		$("#draggable").draggable();

		$("#droppable").droppable({
			drop: function() {
				$("#draggable").text("Dropped")
			}
		});
	});
</script>

in the HTML:

<div id="droppable">
	Drop here
</div>

We can also apply activate and deactive events in tandem with a droppable:

<script type="text/javascript">
	$(document).ready(function() {
		$("#draggable").draggable(); 

		$("#droppable").droppable({
			drop: function(){
				$("#draggable").text("Dropped");
			},
			activate: function() {
				$("#droppable").css({
					border: "medium double green",
					backgroundColor: "lightGreen"
				});
			},
			deactivate: function() {
				$("#droppable").css("border", "").css("background-color");
			}
		});
	});
</script>

We can further more handle events in terms of over and out: //The over triggers on 50% of the element being over, out triggers when the element is out 

<script tpye="text/javascript">
	$(document).ready(function() {
		$("#draggable").draggable();

		$("#droppable").droppable({
			drop: function() {
				$("#draggable").text("Dropped");
			},
			over: function() {
				$("#droppable").css({
					border: "medium double green",
					backgroundColor: "lightgreen"
				});

			},
			out: function() {
				$("#droppable").css("border", "").css("background-color", "");
			}
		});
	});
</script>

Note: The 50% limit is known as tolerance and can be modified

Of course, the droppable has settings as well:

disabled //default false, if true, disables interaction

accept 	//narrows the draggable elements that the droppable will react to. Default is *

activeClass 	//Specifies a class that is applied in responsive to active and removed in respone to inactive

hoverClass 		//Specifies a class that will be applied in response to the over event and removed in response to out event

tolerance 		//% tolerance on overlapping

An example of using multiple droppables and only allowing for one with interaction:

<script type="text/javascript">
	$(document).ready(function() {
		$(".draggable").draggable();

		$("#droppable").droppable({
			drop: function(event, ui) { //the ui object refers to the relevant object in said interaction, instead of refering to all by ID or something
				ui.draggable.text("Dropped");
			},
			activate: function() { //function to activate upon activate status
				$("#droppable").css({ //reform the CSS
					border: "medium double green",
					backgroundColor: "lightGreen"
				});
			},
			deactivate: function() {
				$("#droppable").css("border", "").css("background-color", "");
			},
			accept: "#drag1"
		});
	});
</script>

in HTML:

<div id="drag1" class="draggable">
	Drag 1
</div>
<div id="drag2" class="draggable">
	Drag 2
</div>

We can also access them by classes, assuming we defined thoose:

in css:

#droppable.active {border: thick solid green}
#droppable.hover {background-color: lightgreen}

in JS:

activeClass: "active", //when assigned to droppable or draggable, makes thoose specified types of classes have these specific interactions
hoverClass: "hover"


There are 4 values to overlap tolerances:

fit 		//Must completely overlap droppable element

intersect 	//50% of dragged must overlap, default

pointer 	//The mouse pointer must be above the droppable element, regardless of where grab occured

touch 		//Must overlap by any amount

An example of two drag and drop elements with differing stats:

in JS:

$("div.droppable").droppable({
	drop: function(event, ui) {
		ui.draggable.text("Dropped");
	},
	activeClass: "active",
	hover: "hover",
	tolerance: "fit"
});

$("#touchDrop").droppable("option", "tolerance", "touch");

in html:

<div id="dropContainer">
	<div id="fitDrop" class="droppable">
		<span>Fit</span>
	</div>
	<div id="touchDrop" class="droppable">
		<span>Touch</span>
	</div>
</div>
<div class="draggable">
	<span>Drag Me</span>
</div>

of course, we have the droppable methods:

droppable("destroy")

droppable("disable")

droppable("enable")

droppable("option")

The above thing are self-explanetory at this point

If we wish, we can actually define the scope to which the elements apply to:

in JS:

<script type="text/javascript">
	$(document).ready(function() {
		$("#apple").draggable({
			scope: "fruit"
		});
		$("#orchid").draggable() {
			scope: "flower"
		});

		$("#flowerDrop").droppable({
			activeClass: "active",
			hoverClass: "hover",
			scope: "flower"
		});

		$("#fruitDrop").droppable({
			activeClass: "active",
			hoverClass: "hover",
			scope: "fruit"
		});
	});
</script>

in html:

<div id="dropContainer">
	<div id="flowerDrop" class="droppable">
		<span>Flowers</span>
	</div>
	<div id="fruitDrop" class="droppable">
		<span>Fruit</span>
	</div>
</div>
<div id="orchid" class="draggable">
	<span>Orchid</span>
</div>
<div id="apple" class="draggable">
	<span>Apple</span>
</div>

If we wish to have supplemental functions to draggables, we can for instance copy them, to make an effect where we move another object instead of the original:

in js:

$("div.draggable").draggable({
	helper: "clone"
});

in html:

<div class="draggable">
	<img src="lily.png"/><label for="lily">Lily</label>
</div>

if we wish to adapt the size of the element to the droppable result, we can use the helper function to return the source of the picture:

$("div.draggable").draggable({
	helper: function() {
		return $("<img src=lily.png />") //Now when draggable occurs, we instead used the returned object , which in this case is a smaller lily
	}
});


Further more, we have the helper present in relativity to the ui object passed to managing classes, as follows:

in JS:

//Assume earlier helper has been defined

$("#basket").droppable({
	over: function(event, ui) {
		ui.helper.css("border", "thick solid green")
	},
	out: function(event, ui) {
		ui.helper.css("border", "")
	}
});

We can further more define that it should snap and the attributes of the snapping:

<script type="text/javascript">
	$(document).ready(function() {
		$("div.draggable").draggable({
			snap: "#snapper, .droppable",
			snapMode: "both", //can be inner, outer or both. inner is inner elems edges, outer is outer, both is both
			snapTolerance: 50 //snapping distance in px's
		});
	});
</script>

If we wish to make elements sortable by virtue of dragging, we can use the sortable interaction:

in the JS:

<script type="text/javascript">
	$(document).ready(function() {
		$("#sortContainer").sortable();
	});
</script>

in the HTML:

<div id="sortContainer">
	<div id="item1" class="sortable">Item 1</div>
	<div id="item2" class="sortable">Item 2</div>
	<div id="item3" class="sortable">Item 3</div>
</div>

if we wish to find the order of the different elements, we can loop through them and call the toArray on them:

<script type="text/javascript">
	$(document).ready(function(){
		$("#sortContainer").sortable();

		$("<div id=buttonDiv><button>Get orders</button></div>").appendTo("body");
		$("button").button().click(function() {
			var order = $("#sortContainer").sortable("toArray");
			for (var i = 0; i < order.length; i++) {
				console.log("Position: " + i + " ID: " + order[i]);
			}
		});
	});
</script>

If we wish to parse the ids of elements, we can use the serialize method, as follows:

in JS:

$("button").button().click(function() {
	var formString = $("#sortContainer").sortable("serialize");
	console.log(formstring);
})

in the html:

<div id="sortContainer">
	<div id="item_1" class="sortable">Item 1</div>
	<div id="item_2" class="sortable">Item 2</div>
	<div id="item_3" class="sortable">Item 3</div>
</div>

NOTE: The serialize call generally looks after <key>_<index> patterns, we gotta declare the ID's to be accordingly to usei t

The sortable share some similarities with draggable, such as axis and tolerance, but also employs a few unique patterns as well:

connectWith 		//Connects with another element so elements can be dragged between them. Is false by default, no connections

dropOnEmpty 		//When false, you cannot drop elements into empty squares between connected stuff. Default is true

items 				//Specifies items to be sortable through selector. Default is > *, which is all descendants of chosen element

placeholder 		//Specifies a class that acts as a placeholder while the old element is dragged to a new spot

To connect, just assign connectWith:

<script type="text/javascript">
	$(document).ready(function() {
		$("#fruitContainer").sortable({
			connectWith: "#flowerContainer"
		});
		$("#flowerContainer").sortable({
			connectWith: "#fruitContainer"
		});
	});
</script>

//assume the elements have been defined as divs etc. in the html

We can also connect draggable elements with Sortable elements:

<script type="text/javascript">
	$(document).ready(function() {
		$("#fruit_1").draggable({
			connectToSortable: "#flowerContainer",
			helper: "clone"
		});
		$("#flowerContainer").sortable();
	});

</script>

//assume divs have been declared in the HTML

if we wish to define the items which are to be sortable, we can assign them in items:

in the JS:


$("#flowerContainer").sortable({
	items: ".flower:even"
});

//assume the relevant DIVS has been declared in the HTML, with the flowerContainer being the holding div with said id

To create empty space, we can just declare spaceholders as emptySpace:

<style type="text/css">
	.emptySpace {border: medium dotted red; height: 25px; margin: 4px}
</style>
<script type="text/javascript">
	$(document).ready(function(){
		$("#flowerContainer").sortable({
			placeholder: "emptySpace"
		});
	});
</script>

//assume HTML has been defined with relevant Divs

of course, the sortable has methods:

sortable("destroy")

sortable("disable")

sortable("enable")

sortable("option")

sortable("toArray") //returns array with sorted IDs, based on the formatting of key_index combo

sortable("refresh") //refreshes

sortable("cancel") //cancels a sort operation


An example of performing a cancel:

the JS:

<script type="text/javascript">
	$(document).ready(function() {
		$("#error").dialog({autoOpen: false, modal: true})

		$("#flowerContainer").sortable({
			update: function() {
				var sortedItems = $("#flowerContainer").sortable("toArray");
				if (sortedItems[0] != "item_1"){
					$("#error").dialog("open")
					$("#flowerContainer").sortable("cancel")
				}
			}
		});
	});
</script>

the HTML:

//assume rest is declared
<div id="error">The shit</div>
<h1>some shit</h1>
<div id="flowerContainer" class="sortContainer">
	<div id="item_1" class="sortable ">King</div>
	<div id="item_2" class="sortable ">Queen</div>
	etc.
</div>


An example of using refresh to add new items and showcase them:

<script type="text/javascript">
	$(document).ready(function() {
		$("#flowerContainer").sortable();

		var itemCount = 2;

		$("button").click(function() {
			$("<div id=flower_" + (itemcount++) + " class=sortable>Item" + itemCount + "</div>").appendTo("#flowerContainer");
			$("#flowerContainer").sortable("refresh");
		})
	});
</script>

of course, sortable has events:

change 	//When position changes

recieve //When a item is dragged to this sortable from a connected one

remove 	//When a item is dragged away from this sortable to a connected one

sort 	//Triggered for each mouse movement while sorting

update 	//When drag tops and order changed

In combination with this, jQuery offers the ui object to the function as well, which comes with the following stuff:

helper 		//Returns helper element

position 	//Returns positions of the helper object

item 	//returns a jQuery object containing the current item being dragged 

placeholder 	//returns a jQuery object with placeholder

sender 		//returns jQuery object with connected sortable from which element originates (is null when no sortable is connected)

Examples of implenting the sort:

//assume rest has been defined

$("#flowerContainer").sortable({
	sort: function(event, ui){
		$("#itemId").text(ui.item.attr("id"))
	},
	change: function(event, ui){
		$("#pos").text($("#flowerContainer *").index(ui.placeholder))
	}
});

in html:

<div id="info" class="ui-widget">
	<div>Item ID: <span id="itemId">None</span></div>
	<div>Pos: <span id="pos">None</span></div>
</div>

If we wish to make items selectable, we can combine css and use the selectable attribute:

In the CSS:

div.ui-selected {border: medium solid green; background-color: lightgreen} //When selected
div.ui-selecting {border: medium solid green} //when dragging


in the JS:

<script>
	$(document).ready(function() {
		$("#flowerContainer").selectable();
	});
</script>

in the html:

<div id="flowerContainer">
	<div id="flower_1" class="flower">Aster</div>
	etc.
</div>

if we wish to enable ctrl + click selection, we can enable it in attribute declaration:

<script type="text/javascript">
	$(document).ready(function() {
		$("#flowerContainer")
			.bind("mousedown", function(e) {e.metaKey = true;})
			.selectable();
	});
</script>

Selectable, of course, has attributes:

disabled 	//if true, disables interaction, default is false

autoRefresh 	//if true, refreshes size and pos of each at start of each select operation. Default true

cancel 	//Selector that prevents matching elements from being selected

delay 	//same as for draggable

distance //same as for draggable

filter 	//Filter for selectable elements, defaults to *

Selectable has of course the normal set of methods and events:

methods are:

selectable("destroy")

selectable("disable")

selectable("enable")

selectable("option")

selectable("refresh")

the events:

create

selected

selecting

unselected

unselecting

The interactions of these are self-evident

The ui object in the event allows for getting the HTML element by accessing the ui.selected 

We can also resize elements by the resizable accesser:

in JS:

$(document).ready(function() {
	$("#aster").resizable({
		alsoResize: "#aster img"
	});
});

in the HTML:

<div id="aster" class="ui-widget">
	<img src="aster.png"/>
</div>

Of course, the resizable has settings:

alsoResize  //Selector that adds other elements for resizing, default is false

aspectRatio 	//if true, keeps aspectRatio as resize occurs. Defaults to false

autoHide 		//if true, drag handlers are only visible upon hovering resizable element. Default is false

ghost 			//if true, a semitransparent helper element is drawn to show the user what the new size of the element will be. defaults to true

handles 		//Defines where drag handles are placed on the element

maxHeight 		//Max height limit, default is null, meaning no limit

maxWidth 		//max width limit, default is null, meaning no limit

minHeight 		//Specifies minimum height, default is 10 px

minWidth 		//specifies minimum width, default is 10 px

Example of using resize:

in JS:

$("#aster").resizable();

Example of alsoResize:

in js:

$("#aster").resizable({
	alsoResize: "#aster img, #lily, #lily img"
});

To use attributes:

in js:

$("#aster").resizable({
	alsoResize: "#aster img",
	maxWidth: 200,
	maxHeight: 150
});

To position handles:

$("#lily").resizable({
	alsoResize: "#lilyimg",
	handles: "n, s, e, w"
});

An example of a accordion with inputs, forms and disabling of background etc:

<html>
<head>
	<title>Example</title>
	<script src="jquery-2.0.2.js" type="text/javascript"></script>
	<script src="jquery-ui-1.10.3.custom.js" type="text/javascript"></script>
	<script src="handlebars.js"></script>
	<script src="handlebars-jquery.js"></script>
	<link rel="stylesheet" type="text/css" href="jquery-ui-1.10.3.custom.css"/>
	<link rel="stylesheet" type="text/css" href="styles.css"/>
	<style type="text/css">
		.dcell img {height: 60px}
		#basketTable {border: none; border-collapse: collapse}
		th, td {padding: 4px; width: 50px}
		td:first-child, th:first-child {width: 150px}
		#placeholder {text-align: center}
		#productWrapper {float: left; width: 65%}
		#basket {text-align: left;}
		#buttonDiv {clear: both; margin: 5px}
		#logo {font-size: 1.5em; background-size: contain; margin: 1px;
			border: none; color: inherit}
		#logoWrapper {margin-bottom: 5px}
		#theader {border: none}
		#completeDialog input {width: 150px; margin-left: 5px; text-align: left}
		#completeDialog label {width: 60px; text-align: right}
	</style>
	<script id="flowerTmpl" type="text/x-handlebars-template"> //Define the template
		{{#flowers}}
			<div class="dcell">
				<img src="{{product}}.png"/>
				<label for="{{product}}">{{name}}:</label>
				<input name="{{product}}" value="0" />
			</div>
		{{/flowers}}
	</script> 
	<script id="rowTmpl" type="text/x-handlebars-template"> //Second template
		<tr id="{{name}}"><td>{{product}}</td><td>{{val}}</td>
			<td><a href="#">Remove</a></td>
		</tr>
	</script>
	<script type="text/javascript">
		$(document).ready(function() {
			$.getJSON("mydata.json", function (data) { //get data with getJSON call
				var flowers = $("#flowersTmpl").template({ flowers: data }).filter("*"); //run templates and filter out extra nodes

				var rowCount = 1;
				for (var i = 0; i < flowers.length; i += 2) {
					$("<a>").text(data[i].name + " & " + data[i + 1].name).appendTo("<h2>").parent().appendTo("#products"); //loop through and add the data
					$("<div>").attr("id", "row" + (rowcount++)).appendTo("#products").append(flowers.slice(i, i +2));
				}
				$("#products").accordion(); //put the products into a accordion

				$("#products input").change(function(event) { //activate upon change function event handling
					$("#placeholder").hide(); //Hides the elements
					var fname = $(this).attr("name"); //assign name
					var row = $("tr[id=" + fname + "]"); //assign row

					if (row.length == 0) { //if the row is empty
						$("#rowTmpl").template({ //run template on the row
							name: fname, //Give it a name
							val: $(this).val(), //A value
							product: $(this).siblings("label").text() //a product name
						}).appendTo("#basketTable").find("a").click(function() { //append it to the basket table upon clicking
							removeTableRow($(this).closest("tr")); //remove the closest row
							var iElem = $("#products").find("input[name=" + fname + "]"); //find the input name from products
							$("#products").accordion("option", "active", //Put in the products to the accordion where the element is closest to div beginning with row name
								iElem.closest("div[id^=row]").index("div[id^=row]"));
							iElem.val(0).select();
						});
					} else if($(this).val() != "0" { //if value is not 0
						row.children().eq(1).text($(this).val()); //Set it to this value
					} else { //If all else fails
						removeTableRow(row);
					}
				});
			});

			$("#buttonDiv, #basket").wrapAll("<div>").parent().css({ //wrap all the divs of the basket
				float: "left",
				marginLeft: "2px"
			});

			$("button").button().click(function (e) {
				e.preventDefault();
				if ($("#placeholder:visible").length) { //placeholder is hidden if any products have been selected, thus this is a check against no products selected
					$("<div>Please select products</div>").dialog({  //make a dialog window with prompt
						modal: true, //make it modal, disabling background
						buttons: [{ //Spawn it with buttons
							text: "OK", //Ok button
							click: function() { $(this).dialog("close") } //it's interaction of click event handling is that the dialog runs close
						}]
					})
				} else {
					$("#completeDialog").dialog("open"); //otherwise, run to open the completeDialog window instead
				}
			}); //spawn a button

			$("#completeDialog").dialog({ //Define the completion dialog
				modal: true, //make it modal, rendering background moot
				buttons: [{ text: "OK", click: sendOrder}, { //Define buttons
																text: "Cancel", click: function() { //define buttons
																	$("#completeDialog").dialog("close");
																}
															}]
			});

			function sendOrder() { //empty send order function
				var data = new Object();
				$("input").each(function(index, elem){
					var jqElem = $(elem);
					data[jqElem.attr("name")] = jqElem.val();
				})
				console.log(JSON.stringify(data));

				//The following things, are stuff that reset the tables and accordion etc.

				$("#completeDialog").dialog("close");
				$("#products input").val("0");
				$("#products").accordion("option", "active", 0)
				$("#basketTable tbody").children(":visible").remove();
				$("#placeholder").show();

				//The above code simply clums up the data into a jQuery object and stingifies the data , which we could then just send to the server with AJAX requests
				//if we want
			}

			function removeTableRow(row) { //remove the row of the table
				row.remove(); //remove it
				if ($("#basketTable tbody").children(":visible").length == 0) { //if the length of the visible element is 0, make the placeholder visible
					$("#placeholder").show();
				}
			}
		});
	</script>
</head>
<body>
	<div id="logoWrapper" class="ui-widget ui-widget-content ui-corner-all"> //make a div with the respective id and assign it classes of ui-widgets
		<h1 id="logo">Jacqui's flower shop</h1>
	</div>
	<form method="post" action="http://node.jacquisflowershop.com/order"> //Assign it post functionality
		<div id="productWrapper"> //assign a div with productWrapper id
			<div id="products"></div> //make a div with id of products
		</div>
		<div id="basket" class="ui-widget ui-widget-content ui-corner-all"> //make a div for the basket and assign classes based on ui-widgets
			<table border=0 id="basketTable"> //make a table
				<thead id="theader" class="ui-widget-header"> //make a header
					<tr> //make table row
						<th class="ui-corner-tl">Product</th> //header
						<th>Quantity</th> //header
						<th class="ui-corner-tr">Remove</th></tr> //header and end of row
				</thead> //end of head
				<tr id="placeholder"><td colspan=3>No Products</td></tr> //make a placeholder with no products
			</table>
		</div>
		<div id="buttonDiv"><button type="submit">Place Order</button></div> //Button with submission of order
	</form>
	<div id="completeDialog" title="Complete Purchase"> //to complete purchase
		<div><label for="name">Name: </label><input name="first" /></div> //divs with respective labels
		<div><label for="email">Email: </label><input name="email" /></div> //^
		<div><label for="city">City: </label><input name="city" /></div> // ^
	</div>
</body>
</html>


Of course, we also have support for jQuery mobile, which means that the import declarations are a bit different and the functionality is different:

<html>
<head>
	<title>Example</title>
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<script type="text/javascript" src="jquery-1.10.1js"></script>
	<script type="text/javascript" src="jquery.mobile-1.3.1.js"></script>
	<link rel="stylesheet" href="jquery.mobile-1.3.1.css" type="text/css" />
</head>
<body>
	<div data-role="page">
		<div data-role="header">
			<h1>A header!</h1>
		</div>
		<div data-role="content">
			This is the content!
			<p><button>A button!</button></p>
		</div>
	</div>
</body>
</html>


When it comes to mobile jQuery, there is three tiers of support, which defines how much support jQuery can offer to said devices:

A, B, C

A provides just about most things

B provides what A does, but not Ajax navigation

C provides very basic stuff

Most phones are in the A category

In the MObile version of jQuery, it auto identifies what data-roles they are assigned, and thus, do not require ui-widgets to be expanded upon their functionality or display

Note: Wrappers are automatically inserted for content parts, in terms of jQuery mobile

The difference for websites on phones is that they are virtually simulated, meaning that support for using them is in the way of having so that we don't have to integrate
super specific stuff.

It is also the reason for having the viewport, as we are rendering the stuff in a viewport, running the virtual rendition of the website

NOTE: in jQuery mobile, we define JS integration before actual importing part of jquery mobile.

beyond this, each page is defined to have life cycles with different states, the most important one being the pageinit event, which is the document.ready() of desktop:

<script type="text/javascript">
	$(document).bind("pageinit", function() {
		$("button").click(function() {
			console.log("Button Pressed")
		})
	});
</script>

Generally, phones integrate touch events and then try to synthesize them to convert them into mouseclick events that are then handeled in the mouse event handling:

Example of running a script that monitors the amount of time it takes to register and convert the touch events into mouse events:

<html>
<head>
	<title>Event Testing!</title>
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="jquery.mobile-1.3.1.css" type="text/css" />
	<script type="text/javascript" src="jquery-1.10.1.js"></script>
	<style type="text/css">
		table {border-collapse: collapse; border: medium solid black; padding: 4px}
		#placeholder {text-align: center}
		#countContainer * {display: inline; width: 50px}
		th {width: 100px}
	</style>
	<script type="text/javascript">
		$(document).bind("pageinit", function() {
			var eventList = [
				"mousedown", "mouseup", "click", "mousecancel",
				"touchstart", "touchend", "touchmove", "touchcancel"]

			for (var i = 0; i < eventList.length; i++) {
				$("#pressme").bind(eventList[i], handleEvent) //Binds the events to the button
			}

			$("#reset").bind("tap", function() { //reset resets the timer and removes children of the body
				$("tbody").children().remove();
				$("#placeholder").show();
				startTime = 0;
			})
		});

		startTime = 0;
		function handleEvent(ev) {
			var timeDiff = startTime == 0 ? 0 : (ev.timeStamp - startTime);
			if (startTime == 0) {
				startTime = ev.timeStamp
			}
			$("#placeholder").hide();
			$("<tr><td>" + ev.type + "</td><td>" + timeDiff + "</td></tr>").appendTo("tbody");
		}
	</script>
	<script type="text/javascript" src="jquery.mobile-1.3.1.js"></script>
</head>
<body>
	<div data-role="page">
		<div data-role="content">
			<div id="tcontainer" class="ui-grid-a">
				<div class="ui-block-a">
					<button id="pressme">Press Me</button>
					<button id="reset">Reset</button>
				</div>
				<div class="ui-block-b">
					<table border=1>
						<thead>
							<tr><th>Event</th><th>Time</th></tr>
							<tr id="placeholder"><td colspan=2>No events</td><tr>
						</thead>
						<tbody></tbody>
					</table>
				</div>
			</div>
		</div>
	</div>
</body>
</html>


The above, on Opera, would render a total of delay of 300 miliseconds, which is quite a lot of lag, all things considered

Further more, jQuery implements certain functions to handle gestures in terms of cellphone interactions:

tap 		//Triggered upon tap

taphold 	//Triggered upon tap + hold for 1 sec

swipe 		//Triggers upon >= 30px width and < 20 pix height variation within one second

swipeleft 	//When swiped left

swiperight 	//when swiped right

If we were to add these to the event table, we'd find that the delay of tap is very, very small

Note: gestures are run even on browsers not supporting touch events or touch interfaces

NOTE: Use tap instead of click events, in mobile websites development

Beyond this, jQuery mobile dev setup allows for running virtual mouse events:

vmouseover 		//Triggered upon mouse over

vmousedown 		//in response to touchstart or mousedown events

vmousemove 		//in response to touchmove or mousemove events

vmouseup 		//In response to touchend or mouseup events

vclick 			//in response to click

vmousecancel 	//in response to touchcancel or mousecancel events

NOTE: The important thing, is that jQuery eliminates duplications and removes copies of events that overlap each other. Allowing for setting of makign stuff that is cross-platform

An example of how to account for change in landscape and portrait mode:

<script type="text/javascript">
	$(document).bind("pageinit", function() {
		$(window).bind("orientationchange", function(e) { //bind the orientationchange to a function bound to the window with orientationchange
			$("#status").text(e.orientation) 
		})
		$("#status").text(jQuery.event.special.orientationchange.orientation()) //Defines the current orientation
	});
</script>


We could of course also incorporate media queries

The main difference of the HTMl for cellphones is that it uses data-roles for designation of HTML elements.

Example of running several pages in mobile:

<body>
	<div id="page1" data-role="page">
		<div data-role="header">
			<h1>lol hi</h1>
		</div>
		<div data-role="content">
			<p><a href="#page2">Go to page 2!</a></p>
		</div>
	</div>
	<div id="page2" data-role="page">
		<div data-role="header">
			<h1>LOL IM HERE</h1>
		</div>
		<div data-role="content">
			<p><a href="#page1">Go to page 1!</a></p>
		</div>
	</div>
</body>


jQuery Mobile, further more, provides animations for transitioning between pages:

Default is slide.

slide

pop

slideup

slidedown

slidefade

fade

flip

turn

flow

none (no effect, also expressed as null)

To use them, we just define them to be part of the data-transition part of linking elements:

<p><a href="#page2" data-transition="turn">Go to page 2</a></p>

We could also make it a default setting for all page transfers:

<script type="text/javascript">
	$(document).bind("mobileinit", function() {
		$.mobile.defaultPageTransition = "fade";
	})
</script>

A example of navigating to another HTML element:

<p><a href="document2.html">Go to document2!</a></p>

NOTE: The loading aspects of imports and what not are actually default enabled when refering to other HTMLs, but it's done via AJAX. Thus, we should always include it
anyway, cause Ajax can be turned off.

Note: Due to both Ajax and Jquery mobile refering based on Id, it can get confused on this premise. We can either turn off ajax to prevent transition effects, or just define
one HTML document per jQuery mobile approach.

Generally, we should do option 2, keep one HTML for each jQuery page

If we want, we can disable ajax for that specific link:

<p><a href="document2.html" data-ajax="false">Some shit</a></p>

To turn off ajax default globaly:

<script type="text/javascript">
	$(document).bind("mobileinit", function() {
		$.mobile.ajaxEnable = false
	})
</script>

If we wish, we can give the user an option of prefetching pages to skip load times:

<p><a href="document2.html" data-prefetch="true">Prefetched site!</a></p>

Note: If we wish to assert that stuff works as they should, we could use a HTTP proxy that shows us requests sent from the browser

If we wish, we can of course cause JS to manually changepages to local or remote pages:

<script type="text/javascript">
	$(document).bind("pageinit", function() {
		$("button").bind("tap", function(e) {
			var target = this.id == "local" ? "#page2" : "document2.html";
			$.mobile.changePage(target)
		})
	});
</script>

in the html:

<div data-role="content">
	<fieldset class="ui-grid-a">
		<div class="ui-block-a"><button id="local">Local</button></div>
		<div class="ui-block-b"><button id="remote">Remote</button></div>
	</fieldset>
</div>

The changePage method has quite a few options:

allowSamePage //if false (default), does not allow transition to same page. If true, does, tho
Transition

changeHash 	//if true (default), applies hash to reflect new URL upon arriving to said place

data 		//specifies data to be included in the ajax request

dataUrl 	//Specifies the URL used when updating browser URL bar. Default is no value, which means retrieval of ID of internal page or URL of remote document

loadMsgDelay 	//Defines delay before loading

pageContainer 	//Specifies the element that should contain the new page

reloadPage 		//if true, jQuery will reload pages despite page being cached. default is false

reverse 		//if true, transition plays backwards. Default is false

role 			//Sets the data-role value for the new content

showLoadMsg 		//If true, will show loading image when loading remote documents. Default is true

transition 			//Specifies what transition to use 

type 				//Specifies the HTTP used to request a document. Allowed values are get and post. Default is get

An example of using the reverse effect:

<script type="text/javascript">
	$(document).bind("pageinit", function() {
		$.mobile.defaultPageTransition = "slide"; //Cause default transition to be sliding
		$("button").bind("tap", function(e){
			var target = this.id == "forward" ? "#page2" : "#page1"; //If it's forward, target becomes #page2, otherwise it's #page1
			$.mobile.changePage(target, { //if it's a mobile and you are changing page
				reverse: (target == "#page1") //cause reverse if the target is page1, i.e, you are switching to page one
			});
		})
	});
</script>


in html:

in page 1 div
<button id="forward">Go to Page 2</button>

in page 2 div
<button id="back">Back to page 1</button>

Example of running a loading message and having a delay on it:

In JS:

$(document).bind("mobileinit", function() { //bind to the mobileinit of document handling, run a function
	$.mobile.loadingMessage = "Loading Data..." //where the loadingMessage is loading data
})

$(document).bind("pageinit", function() {
	$("button").bind("tap", function(e) { //bind the button tap to functions
		$.mobile.changePage("document2.html", { //if it's a mobile and we change page, call for document2.html and have a load message delay of 1 second (1 sec before msg)
			loadMsgDelay: 1000
		});
	})
});


An example of disabling said message:

$("button").bind("tap", function(e) {
	$.mobile.changePage("document2.html", {
		showLoadMsg: false
	});
})


An example of using activatePage properties to gain access to what current page it is and change it accordingly:

//assume previous has been defined
<script type="text/javascript">
	
	var eventHandlerCreated = false;

	$(document).bind("pageinit", function() {
		if (!eventHandlerCreated) {
			$("button").bind("tap", function (e) {
				var nextPages = { //Create a map with related values to each value
					page1 : "#page2",
					page2 : "#page3",
					page3 : "#page1"
				}
				var currentPageId = $.mobile.activePage.attr("id"); //retrieve the current active Page by the id attribute
				$.mobile.changePage(nextPages[currentPageId]); //Change the page based on the mapping where we access the value by the curentPageId key
			})
			eventHandlerCreated = true; //We created a eventHandler, thus we do not wish to create several ones - This is basically just a created flag to assert unique existence
		}
	});
</script>
//Assume rest has been defined, and that there are 3 divs with a button each, declared in the HTML

If we wish to load pages in the background, we can do so, as follows:

<script type="text/javascript">
	
	var loadPages = false; //initiate flag

	$(document).bind("pageinit", function() {
		if (!loadedPages) { //if page has not been loaded
			$.mobile.loadPage("document2.html", {}).done(function () { //call a derefered object to be able to call functions upon it when the ajax loading is done
				$("#gobutton").button("enable").bind("tap", function () { //enable the gobutton upon completion of loading, bind the tap to it
					$.mobile.changePage("document2.html"); //assign the changePage function to it
					loadedPages = true; //assign flag as true
				})
			})
		}
	});
</script>


We can, of course, also use page events, if we wish:

pagebeforecreate 	//when page is being initialized

pagecreate 		//when page has been created, but before most automatic enhancements occured

pageinit 		//When page has initialized

pageremove 		//before a page is removed

pagebeforeload 	//before a page is requested via ajax

pageload 		//when a page successfully loaded via ajax

pageloadfailed 	//when a page failed to load via ajax

pagebeforechange 	//before page transition

pagechange 		//after page transition completes

pagechangefailed 	//When a page change fails

pagebeforeshow 		//before a page is displayed to the user

pagebeforehide 		//before a page is removed from the display

pageshow 			//after a page has been displayed to the user

pagehide 			//after page has been hidden from the user

An example of using the pageload event:

<script type="text/javascript">
	$(document).bind("pageload", function(event, data) { //bind the pageload to a function
		if (data.url == "document2.html") { //if the relevant data's url is document2
			$("#gobutton").button("enable").bind("tap", function() { //enable the button, bind the tap function
				$.mobile.changePage("document2.html"); //assign interaction of the bound function
			})
		}
	})

	var loadedPages = false;
	$(document).bind("pageinit", function() { //Bind intialization of the page to a function
		if (!loadedPages) { //if the page not been loaded
			loadedPages = true; //assign that it has been
			$.mobile.loadPage("document2.html", {}); //load the page
		}
	});
</script>

The pageloads Data object, which is passed into the function upon pageload, has the following event properties:

url 		//returns the URL passed to the loadPage method

absUrl 		//The absolute URL that was requested

options 	//The ajax requests options
 	
xhr 		//the jQuery ajax object used for the request

textStatus 	//String description of the requested status

An example of responding to a page being hidden:

<script type="text/javascript">
	
	var registeredHandlers = false;
	$(document).bind("pageinit", function() {
		if (!registeredHandlers) {
			registeredHandlers = true;
			$("#page1").bind("pagehide", function(event, data) { //bind to the id of page1 div a event of pagehide
				$.mobile.changePage($("#page1")); //returns to page 1 upon pagehiding
			})
		}
	});
</script>

In jQuery mobile, we have a set of different themes, ranging from A to E.

To assign these, we simply apply the data-theme to divs:

<div id="page1" data-role="page" data-theme="a">

or

<div id="page2" data-role="page" data-theme="b">

These themes can also be applied to links and buttoned links:

<a href="document2.html" data-role="button" data-theme="b">Press Me</a>

Beyond this, jQuery mobile systems integrates grid systems, with alphabetical assignment:

name 		cols

ui-grid-a  	2 	

ui-grid-b 	3

ui-grid-c 	4

ui-grid-d 	5 	


An example of using the grid system:

<div class="ui-grid-b">
	<div class="ui-block-a">//some content here</div>
	<div class="ui-block-b">//some content here</div>
	<div class="ui-block-c">//Some content here</div>
</div>
<div class="ui-grid-a">
	<div class="ui-block-a">//Some content</div>
	<div class="ui-block-b">//Some content</div>
</div>

We can of course create dialogs, if we wish, as follows:

<div id="page1" data-role="page">
	<div data-role="header">
		<h1>Jacqui's Shop</h1>
	</div>
	<div data-role="content">
		<a href="#dialog1">Show the dialog</a>
	</div>
</div>
<div id="dialog1" data-role="dialog">
	<div data-role="header">
		<h1>You clicked the link</h1>
	</div>
	<div data-role="content">
		This is the content inside of the div of the Dialog! lol!
	</div>
</div>

A secondw ay to make a dialog appear, is by using the data-rel in the a href element:

<div data-role="content">
	<a href="#page2" data-rel="dialog">Show the dialog!</a>
</div>
<div id="page2" data-role="page">
	<div data-role="header">
		<h1>You clicked shit</h1>
	</div>
	<div data-role="content">
		This is the content of the dialog window
	</div>
</div>

If we wish, we could define a dialog widget programmatically:

<script>
	$(document).bind("pageinit", function (event, data) {
		$("#dialogLink").click(function (e) {
			$.mobile.changePage(this.href, {
				role: "dialog"
			});
		});
	});
</script>

in the HTML:

<div data-role="content">
	<p><a id="dialogLink" href="#page2">Show the dialog</a></p>
	<p><a href="#page2">Show the page</a></p>
</div>

NOTE: Doing this, will render the new page as always being a Dialog, this will not change upon changePage calls etc.

To close the dialog, is very simple:

<a href="#" data-role="button" data-rel="back">Close</a>

We could further cause navigation in the dialogs, if we wish:

<div id="page1" data-role="page">
	<div data-role="content">
		<a href="#page2" data-rel="dialog">Show the dialog</a>
	</div>
</div>
<div id="page2" data-role="page" data-overlay-theme="d">
	<div data-role="content">

		<a href="#page3" data-role="button">Ok</a> //Cause referal by putting the a href to another id
		<a href="#" data-role="button" data-rel="back">Close</a> //The # referal means to refer to itself. meaning we return to whoever spawned the dialog
	</div>
</div>
<div id="page3" data-role="page">
	<div data-role="header">
		<h1>Some shit</h1>
	</div>
	<div data-role="content">
		This is page 3. You came here BY THE DIALOGGGGGG
	</div>
</div>


Of course, we have settings for the dialog widget, which comes in two forms - one for assigning in the element definition, the second being 
in form of declaration in JS akin to event handling.

The following ones are available for dialog:

data attribute 					setting 				desc

data-close-btn					closeBtn 				Gets or sets the position of close button in the dialog. The values are left, right and none

data-close-btn-text 			closeBtnText 			gets or sets text in the close button. Not shown to users, but detectable by accessibility software

data-corners 					corners 				Gets or sets wether rounded corners should be used. Default is true.

data-overlay-theme 				overlayTheme 			Gets or sets overlay theme, must be set with lowercase letter


Example of setting theme:

<div id="dialog1" data-role="dialog" data-overlay-theme="d">

We can configure Dialogs as well, if we wish, after they've been created, we can modify them with JS:

<script>
	$(document).bind("pageinit", function() {
		$("#dialog1").dialog({
			corners: false,
			overlayTheme: "e"
		});
	});
</script>


dialog only has one method:

dialog("close") 		//closes dialog

Example of using it:

<script>
	$(document).bind("pageinit", function() {
		$("#page1 a").click(function (e) {
			var duration = 15;
			$("#remaining").text(duration); //initiate the text of the remaining IDed element with the duration
			var interval = setInterval(function() { //set the interval to be found to the results of the function
				$("#remaining").text(--duration); //count down the duration left
				if(duration == 0) { //if the time remaining is 0, clear the interval and close the dialog
					clearInterval(interval);
					$("#dialog1").dialog("close");
				}
			}, 1000); //Have a interval of 1000 mili seconds, 1 second, on each tick
		});
	});
</script>

The only event for dialogs, is create.

We can also use jQuery mobile setup to create popups:

<div data-role="content">
	<a href="#popup" data-rel="popup">Show the popup</a>
</div>
<div id="popup" data-role="popup">
	<p>This is the popup content</p>
</div>

We can modify the element that creates the popup, as follows:

data-position-to 	//Specifies the position of the pop-up relative to the element that spawned it

data-transition 	//Specifies the transition used to display the popup

The values that the data-position-to can have:

origin 		//Centers the popup over the a element

window 		//Centers the popup in the window

selector 	//Centers the popup on the first element that matches the selector. if said element is not visible, then the popup is centered in the window

An example of modifying the pop-up by the link that spawned it:

<a href="#popup" data-rel="popup" data-position-to="#anchor">Show the popup</a> //positions the pop-up on the anchoring element


We can of course, configure the popup directly, if we wish, as follows:

data attribute 				Settings 				desc

data-corners 				corners 				Defines wether corners are round or not. default is true

data-dismissable 			dismissable 			if false, popup won't be dismissed when clicked outside of widgets. Default is true

data-history 				history 				Specifies wether a history item is created before the popup is open. Default is true,
													browser closes upon pressing back

data-overlay-theme 			overlayTheme 			Defines theme for overlay. Default is null, presents transparent background

data-position-to 			positionTo 				Specifies the position of the popup using values

data-shadow 				shadow 					Specifies wether popup has shadow. Default is true

data-tolerance 				tolerance 				Minimum distance between popup and window. defaults are: 30, 15, 30, 15

data-transition 			transition 				Specifies transition to be used upon open/close

An example of using the history setting of pop-ups:

<script>
	var mouseHandlerSet = false;
	$(document).bind("pageinit", function() {
		if (!mouseHandlerSet){
			$("#page1 a").mouseenter(function (e) {
				$("#popup").popup("open", {
					x: e.pageX, y: e.pageY
				});
			});
			$("#popup").mouseleave(function (e) {
				$(this).popup("close");
			});
			mouseHandlerSet = true;
		}
	});
</script>

in the HTML:

<div id="popup" data-roles="popup" data-history="false">

We could also use the popup content to display images, an example of this follows:

<html>
<head>
	<title>Example</title>
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="jquery.mobile-1.3.1.css" type="text/css" />
	<script type="text/javascript" src="jquery-1.10.1.js"></script>
	<script type="text/javascript" src="jquery.mobile-1.3.1.js"></script>
	<style>
		.smallImage { height: 40%; width: 40%; padding: 5px}
	</style>
	<script>
		$(document).bind("pageinit", function() { //bind to the startup of the page
			var data = ["beach.png", "clouds.png", "fishing.png", "storms.png"]; //Define the pictures to display

			for (var i = 0; i < data.length; i++) {
				$("<img>").addClass("smallImage").attr("src", data[i]).appendTo("#contentHolder"); //assign pictures and assign class to the divs
			}

			$("#popup").popup({ //Activate a popup
				corners: false, //keep square form
				overlayTheme: "a" //keep the a overlay theme
			});

			$("#contentHolder img").bind("tap", function (e) {
				var maxHeight = $(window).height() - 10 + "px"; //get height of the window and adjust it a bit
				$("#LgImage").attr("src", e.target.src).css("max-height", maxHeight); //define the pictures max-height to be maxHeight
			});

		});
	</script>
</head>
<body>
	<div id="page1" data-role="page" data-theme="d">
		<div id="contentHolder" data-role="content"></div>
		<div id="popup" data-role="popup" data-history="true"> //Run the div to keep several of said stuff
			<img id="LgImage" class="zoomImg" src="" /> //the img div for when popup occurs
		</div>
	</div>
</body>
</html>

The popup widget defines 3 methods:

popup("open") 		//Opens the popup

popup("close") 		//Closes the popup

popup("reposition") 	//Changes the position of the popup

The "open" method also has 4 optional properties:

x 		//Specifies x position of popup
 
y 		//Specifies y position of popup

transition 	//Specifies transition animation of opening

positionTo 	//specifies relative position

Example of running the popup methods:

<head>
	<script>
		$(document).bind("pageinit", function() { //bind it to the page initialization
			$("button").bind("vmousedown", function (e) { //bind it to mouse down
				var pop = $("#popup"); //assign popup
				switch (e.target.innerText) { //based on text
					case "Open": //if it's open
						pop.popup("open", { //assign co-ords and open it
							x: 10, y: 10, transition: "fade"
						});
						break;
					case "Close": //Closei t
						pop.popup("close");
						break;
					default: //Default is to just reposition it
						pop.popup("reposition", {
							positionTo: e.target.innerText == "Window"
								? "window" : "#page1 button"
						});
						break;
				}
			});
		});
	</script>
</head>
<body>
	<div id="page1" data-role="page" data-theme="d">
		<div data-role="content">
			<button>Open</button>
		</div>
		<div id="popup" data-role="popup" data-history="true" data-dismissable="false"> //dismissable false causes it to only be closable by virtue of close calling it
			<button>Selector</button>
			<button>Window</button>
			<button>Close</button>
		</div>
	</div>
</body>
</html>

Popups has a few related events as well:

create  		//When popup is created

beforeposition 	//before reposition

afteropen 		//after popup is displayed

afterclose 		//after popup is hidden

An example:

<script>
	$(document).bind("pageinit", function() {
		$("#popup").popup({
			afteropen: function (e) {
				setTimeout(function() {
					$("#popup").popup("close");
				}, 5000); //Closes after 5 seconds
			}
		});	
	});
</script>

We can create buttons as well, of course:

in HTML:

<div data-role="content">
	<button>Button</button>
	<input type="submit" value="Input (Submit)" />
	<input type="reset" value="Input (Reset)" />
	<input type="button" value="Input (Button)" />
</div>

We can of course also make other elements into buttons:

<div data-role="content">
	<a href="document2.html" data-role="button">A element</a> //Converts it into a button
	<div data-role="button">Div Element</div> //converts it int oa button
</div>

We can of course, also make groups of buttons:

<div data-role="controlgroup">
	<button>1</button>
	<button>2</button>
	<button>etc</button>
</div>

we can change them to be adjusted for horizontal, if we wish:

<div data-role="content">
	<div data-role="controlgroup" data-type="horizontal">
		<button>Back</button>
		<button>Home</button>
		<button>Next</button>
	</div>
</div>

We can of course configure the buttons:


Data attributes 			Setting 			Desc

data-corners 		 		corners 			if true, buttons are drawn with rounded corners

data-icon 					icon 				Specifies an icon to be used in the button

data-iconpos 				iconpos 			Specifies the pos of an icon, if used

data-iconshadow 			iconshadow 			Applies a shadow to the icon when set to true

data-inline 				inline 				Creates a button that is sized to it's contents

data-mini 					mini 				When set to true, displays compact button

data-shadow 				shadow 				if true, has shadow to buttons. 

Example of defining icons for buttons:

<button data-icon="home">Home</button>

<button data-icon="home" data-iconpos="top">Home</button> //Rounds about text too

<button data-icon="home" data-iconpos="notext"></button> //Cause a button taht just encapsulates the icon itself


By default, the buttons take up the screen width. Example of running with inline and mini:

<div data-role="content">
	<button data-icon="home" data-inline="true">Home</button>
	<button data-icon="home" data-mini="true">Home</button>
	<button data-icon="home" data-inline="true" data-mini="true">Home</button>
</div>

We can also, of course, use mmethods for buttons:

button("disable") 	//Disables button

button("enable") 	//Enables button

button("refresh") 	//Refreshes the widget to reflect changes in the underlying HTML

Example of updating buttons dynamically:

<script>
	$(document).bind("pageinit", function() {
		var counter = 0;
		setInterval(function() {
			var msg = "Counter " + counter++;
			$("#buttonElem").text(msg).button("refresh");
			$("#inputElem").val(msg).button("refresh");
			$("#divElem span.ui-btn-text").text(msg);
		}, 1000); //updates contents every 1 second
	});
</script>

In HTML:

<button id="buttonElem">Button</button>
<input id="inputElem" type="button" value="Input" />
<div id="divElem" data-role="button">Div</div>


An example of running events on a button:

in the JS:

$("button").tap(function (e) {
	$(this).text("Tapped!").button("refresh");
});

If we wish, we could make NavBars:

in the HTML:

<div id="page1" data-role="page">
	<div data-role="header">
		<h1>jacqui's flowers of doom</h1>
		<div data-role="navbar">
			<ul>
				<li><a href="#page1" class="ui-btn-active ui-state-persist">Page 1</a></li>
				<li><a href="#page2">Page 2</a></li>
				<li><a href="#page3">Page 3</a></li>
			</ul>
		</div>
	</div>
	<div data-role="content">This is page 1</div>
</div>

<div id="page2" data-role="page">
	<div data-role="header">
		<h1>Jacqui's flower shit</h1>
		<div data-role="navbar">
			<ul>
				<li><a href="#page1">Page 1</a></li>
				<li><a href="#page2" class="ui-btn-active ui-state-persist">Page 2</a></li> //active marks it as active, persist keeps the effect upon backtracking
				<li><a href="#page3">Page 3</a></li>
			</ul>
		</div>
	</div>
	<div data-role="content">This is page 2</div>
</div>

etc.

We have one data attribute and setting for Navbars:

data-iconpos 	iconpos 		Specifies pos of icon. supports: left, right, top, bottom, notext

Example of positioning icons

in HTML:

<div id="page1" data-role="page">
	<div data-role="header">
		<h1>Shit</h1>
		<div data-role="navbar" data-iconpos="left">
			<ul>
				<li><a href="#page1" data-icon="alert" class="ui-btn-active ui-state-persist">Page 1</a></li>
				<li><a href="#page2" data-icon="info">Page 2</a></li>
				<li><a href="#page3" data-icon="gear">Page 3</a></li>
			</ul>
		</div>
	</div>
	<div data-role="content">This is page 1</div>
</div>

We can define collapsible sections as well, if we wish:

<div data-role="content">
	<div data-role="collapsible">
		<h1>New shit header for collapsible</h1>
		<p>This is the content of the collapsible Shit</p>
	</div>
</div>	

We can define attributes and configs for collapsibles:

Data attribute 				Settings 				Desc

data-collapsed 				collapsed 				if true, block is shown collapsed, reverse if false

data-collapsed-icon 		collapsedIcon 			Specifies icon to display when collapsed

data-content-theme 			contentTheme 			Specifies the theme for the content area of the collapsible block

data-corners 				corners 				if true, rounded corners, if not, square

data-expanded-icon 			expandedIcon 			Specifies icon for when it is expanded

data-iconpos 				iconPos 				Defines pos for icon of collapsible, uses same pos configs as others

data-inset 					inset 					if false, header will fill without padding. Default is true

data-mini 					mini 					When set to true, header is drawn in a compact form

Example of config:

<div data-role="content">
	<div data-role="collapsible" data-content-theme="e" data-collapsed="false" data-inset="false" data-iconpos="top">
		<h1>Header of shit</h1>
		<p>Content inside of collapsible</p>
	</div>
</div>

Collapsibles support the following events:

create 		//When created

collapse 		//when collapsed

expand 			//When expanded

Example of handling status of collapsed or not:

<script type="text/javascript">
	$(document).bind("pageinit", function() {
		$("#colBlock").bind("collapse expand", function(event) { //bind the events to the function calling
			$("#status").text(event.type == "expand" ? "Expanded" : "Collapsed"); //Define the text of the status span to be expanded if expanded or collapsed if collapsed,
			//upon checking the trigger of if the event is to expand or not
		})
	});
</script>

In the HTML:

<div data-role="content">
	The block is <b><span id="status">Expanded</span></b>

	<div id="colBlock" data-role="collapsible" data-content-theme="e" data-collapsed=false>
		etc.
	</div>
</div>


We can also make collapsible accordions:

<div data-role="content">
	<div data-role="collapsible-set" data-content-theme="e"> //setting the theme for hte parent causes inheritance of theme to all children
		<div data-role="collapsible">
			<h1>Shit</h1>
			<p>Some other shit</p>
		</div>
		<div data-role="collapsible" data-collapsed=false>
			<h1>Shit2</h1>
			<p>Some other shit shit</p>
		</div>
	</div>
</div>


We can of course, also refresh collapsibles:

collapsibleset("refresh")	//refreshes widget to reflect HTML changes

To create forms, in jQuery mobile, we could do the following:

In CSS:

<style type="text/css">
	#buttonContainer {text-align: center}
	div[data-role=fieldContain { padding: 0 10px; }]
</style>

in the HTML:


<form method="get">
	<div data-role="fieldcontain">
		<label for="name">Name: </label>
		<input id="name">
	</div>
	<div data-role="fieldcontain">
		<label for="address">Address: </label>
		<textarea id="address"></textarea>
	</div>
	<div id="buttonContainer">
		<input type="submit" data-inline="true" value="Submit"/>
	</div>
</form>



NOTE: Submittal occurs via AJAX, can be disabled with the data-jax attribute 


We can of course, also create text forms for jQuery mobile setups:

Name 						setting 				Desc
data-clear-btn 				clearBtn 				if true, widget is displayed with button that clears the content

data-clear-btn-txt 			clearBtnText 			Sets the text for the clear button for accessibility software

data-mini 					mini 					If true, causes smaller version of widget. default is false

data-prevent-focus-zoom 	preventFocusZoom 		if true, browser is prevented from zooming while widget has focus

An example:

<form method="get">
	<div data-role="fieldcontain">
		<label for="name">Name: </label>
		<input id="name" data-clear-btn="true" data-mini="true">
	</div>
	<div data-role="fieldcontain">
		<label for="address">Address: </label>
		<textarea id="address"></textarea>
	</div>
	<div id="buttonContainer">
		<input type="submit" data-inline="true" value="Submit"/>
	</div>
</form>

We can modify textinput with methods:

textinput("disable")

textinput("enable")

An example of running disable/enable button by ID:

<script>
	$(document).bind("pageinit", function() {
		$("button").tap(function (e) {
			$("#name").textinput(e.target.id); //since the id is disable or enable, we use this to handle the input of the textinput
			e.preventDefault();
		});
	});
</script>

In the HTML:

<div id="buttonContainer">
	<button id="enable">Enable</button>
	<button id="disable">Disable</button>
</div>


If we wish to make a slider widget:

<form method="get">
	<div data-role="fieldcontain">
		<label for="quantity">Quantity: </label>
		<input id="quantity" type="range" value="10" min="1" max="20">
	</div>
</form>

If we wish to make a range widget:

<form method="get">
	<div data-role="fieldcontain">
		<div data-role="rangeslider">
			<label for="quantityLow">Quantity: </label>
			<input id="quantityLow" type="range" value="10" min="1" max="20">
			<input id="quantityHigh" type="range" value="15" min="1" max="20">
		</div>
	</div>
</form>

We can modify range widgets and slider widgets:

name 					setting 				desc

data-highlight 			highlight 				if true, selected value on slider is highlighted. default is false

data-mini 				mini 					if true, it's drawn more compact. Default is false

data-track-theme 		trackTheme 				Specifies the theme for the track part of the slider

To use highlight, just put it by the data-role div section for the rangeslider

Examples of using the themes:

<form method="get">
	<div data-role="fieldcontain">
		<div data-role="rangeslider" data-highlight="true" data-theme="b" data-track-theme="a"> //The themes are on the range of a-e as per usual
			<label for="quantityLow">Quantity: </label>
			<input id="quantityLow" type="range" value="10" min="1" max="20">
			<input id="quantityHigh" type="range" value="15" mmin="1" max="20">
		</div>
	</div>
</form>


Sliders of course have methods:

slider methods 			rangeslider methods 		Desc					

slider("disable") 		rangeslider("disable") 		Disables the widget

slider("enable") 		rangeslider("enable") 		Enables the widget

slider("refresh") 		rangeslider("refresh") 		updates the widget

Example of using the refresh method:

<script>
	$(document).bind("pageinit", function() {
		$("button").tap(function (e) {
			var currentMax = Number($("#quantityLow").attr("max"));
			$("#quantityLow, #quantityHigh").attr("max", currentMax - 1); //reduces the max value
			$("#slider").rangeslider("refresh"); //refresh the slider
			e.preventDefault();
		});
	});
</script>

in the HTML:

<div id="buttonContainer">
	<button>Change Range</button>
</div>


Sliders have 3 events:

create //upon creation

start //when any interaction with slider occurs

stop  //at end of interaction


Example of using the events:

<script>
	$(document).bind("pageinit", function() {
		$("#quantity").slider({
			start: function() {
				$("#message").text("Sliding"); //set text value of the message box to be Sliding
			},
			stop: function() {
				$("#message").text(quantity.value); //Sets the text bos to be quantity
			}
		});
	});
</script>

in the HTML:

<form method="get">
	<div data-role="fieldcontain">
		<label for="quantity">Quantity: </label>
		<input id="quantity" type="range" value="10" min="1" max="20">
	</div>
	Value: <span id="message">Ready</span>
</form>

The range slider has two events:

create

normalize 		//occurs when normalization must occur due to dragging one past the other

Example of using these: //We have to bind them instead of declaring them as events, due to a bug

<script>
	$(document).bind("pageinit", function() {
		$("#slider").bind("rangeslidernormalize", function() {
			alert("Normalized");
		});
	});
</script>

In the HTML:

<form method="get">
	<div id="slider" data-role="rangeslider" data-highlight="true" data-theme="b" data-track-theme="a">
		<label for="quantityLow">Quantity: </label>
		<input id="quantityLow" type="range" value="10" min="1" max="20">
		<input id="quantityHigh" type="range" value="15" min="1" max="20">
	</div>
</form>

We can create selection menus as well, if we wish:

<div data-role="fieldcontain">
	<label for="speed"><span>Speed: </span></label>
	<select id="speed" name="speed">
		<option value="vfast">Very fast</option>
		<option value="fast">Fast</option>
		<option value="normal">Normal</option>
		<option value="slow">Slow</option>
	</select>
</div>

We can modify the Selectmenu widget, with the following attributes:

Data attributes 				Setting 				Desc

data-corners 					corners 				Rounded corners or not, default is true

data-divider-theme 				dividerTheme 			Specifies theme for optgroup when nativeMenu option is false

data-icon 						icon 					Specifies icon for widget button

data-iconpos 					iconPos 				Specifies pos of icon

data-inline 					inline 					Specifies that it gets drawn in a compact style

data-mini 						mini 					Specifies that hte widget will be drawn in a smaller style

data-native-menu 				nativeMenu 				Specifies wether native selectMenu is used. Defautl is true

data-overlay-theme 				overlayTheme 			Specifies theme for selectmenu popup when nativeMenu option set to false


Example of configing the selectMenu button:

<div data-role="fieldcontain">
	<label for="speed"><span>Speed: </span></label>
	<select id="speed" name="speed" data-iconpos="left" data-icon="gear" data-mini="true">
		<option value="vfast">very fast</option>
		<option value="fast">Fast</option>
		<option value="normal">Normal</option>
		<option value="slow">Slow</option>
	</select>
</div>

The native menu is the menu native to that OS, meaning that they differ in graphics. We can disble them for consistency, if we wish, however.

example:

<div data-role="fieldcontain">
	<label for="speed"><span>Speed: </span></label>
	<select id="speed" name="speed" data-native-menu="false" data-overlay-theme="e">
		<option value="vfast">Very fast</option>
	</select
</div>

If we wish to make elements that are displayed but cannot be clicked,we can do placeholders:

<div data-role="fieldcontain">
	<label for="speed"><span>Speed: </span></label>
	<select id="speed" name="speed" data-native-menu="false" data-overlay-theme="e">
		<option value="placeholder" data-placeholder="true">Select a speed</option>
		<option value="vfast">Very fast</option>
		<option value="fast">Fast</option>
	</select>
</div>

We can of course, also specify methods for the selectMenu:

selectmenu("open") 	//open menu

selectmenu("close") //closes

selectmenu("disable") //Dsiables

selectmenu("enable") //enables

selectmenu("refresh") //refreshes

Example of controlling selectmenu in JS format:

in JS:

<script type="text/javascript">
	$(document).bind("pageinit", function() {
		$("button").bind("tap", function (e) {
			e.preventDefault();
			if (this.id == "open") { //if the id of the button is open
				$("#speed").selectmenu("open"); //open the speed menu
				setTimeout(function () { //set the timeout 
					$("#speed").selectmenu("close")  //close it after the timeout
				}, 3000); //3 seconds
			} else {
				$("#speed").selectmenu(this.id) //otherwise, prompt the menu with relevant id
			}
		});
	})
</script>

in css:

<style type="text/css">
	[data-role=fieldcontain], ui-grid-b { margin: 10px; }
</style>

in HTML:

<form method="get">
	<div class="ui-grid-b">
		<div class="ui-block-a">
			<button id="open">Open</button>
		</div>
		etc.
	</div>
	etc.

if we wish, we can also create flipswitches:

In the CSS

<style type="text/css">
	#buttonContainer {text-align: center}
	[data-role=fieldcontain] { margin: 10px; text-align: center }
</style>

in the HTML:

<form method="get">
	<div data-role="fieldcontain">
		<label for="speed"><span>Speed: </span></label>
		<select id="speed" name="speed" data-role="slider">
			<option value="fast">Fast</option>
			<option value="slow">Slow</option>
		</select>
	</div>
	<div data-role="fieldcontain">
		<label for="size"><span>Size: </span></label>
		<select id="size" name="size" data-role="slider">
			<option value="large">Large</option>
			<option value="small" selected>Small</option>
		</select>
	</div>
	<div id="buttonContainer">	
		<input type="submit" data-inline="true" value="Submit"/>
	</div>
</form>

We can of course, also make checkboxes:

In the CSS:

<style type="text/css">
	#buttonContainer {text-align: center}
	form { margin: 10px; }
</style>

in the HTML:

<form method="get">
	<div data-role="fieldcontain">
		<label for="name">Name: </label>
		<input id="name" palceholder="Your Name">
	</div>

	<input type="checkbox" name="check" id="check"/>
	<label for="check">I agree</label>

	<div id="buttonContainer">
		<input type="submit" data-inline="true" value="Submit"/>
	</div>
</form>

If we wish to add text next to the agree box, we can do as follows:

<div data-role="fieldcontain">
	<fieldset data-role="controlgroup">
		<legend>Terms & Conditions:</legend> //The legend tag puts it next to checkboxes etc.
		<input type="checkbox" name="check" id="check"/>
		<label for="check">I agree</label>
	</fieldset>
</div>


To group checkboxes, we can do as follows:

<div data-role="fieldcontain">
	<fieldset data-role="controlgroup">
		<legend>Choose Your Flowers:</legend>
		<input type="checkbox" name="roses" id="roses"/>
		<label for="roses">Roses</label>
		<input type="checkbox" name="orchids" id="orchids"/>
		<label for="orchids">Orcids</label>
		<input type="checkbox" name="asters" id="asters"/>
		<label for="asters">Asters</label>
	</fieldset>
</div>

<div data-role="fieldcontain">
	<fieldset data-role="controlgroup" data-type="horizontal">
		<legend>Font:</legend>
		<input type="checkbox" name="bold" id="bold"/>
		<label for="bold"><b>b</b></label>
		<input type="checkbox" name="italic" id="italic"/>
		<label for="italic"><em>i</em></label>
		<input type="checkbox" name="underline" id="underline">
		<label for="underline"><u>u</u></label>
	</fieldset>
</div>

NOTE: All forms should be preceeded by a get method declaration encapsulating all the forms relevant


We can create radio buttons as well, as follows:

<div data-role="fieldcontain">
	<fieldset data-role="controlgroup">
		<legend>Choose your flowers:</legend>
		<input type="radio" name="flowers" id="roses"/>
		<label for="roses">Roses</label>
		<input type="radio" name="flowers" id="orchids"/>
		<label for="orchids">Orchids</label>
	</fieldset>
</div>
<div data-role="fieldcontain">
	<fieldset data-role="controlgroup" data-type="horizontal"> //can be horizontal as well, but causes it ot be normal buttons
		<input type="radio" name="flowers" id="roses"/>
		<label for="roses">Roses</label>
	</fieldset>
</div>


The only config for radio buttons is:

data-mini 			mini 			if true, makes the widget compact

The methods for radiobuttons are:

checkboxradio("disable") 			Disables

checkboxradio("enable") 			Enables

checkboxradio("refresh") 			Refreshes

if we wish to create a list with a listview, we could do as follows:

<html>
<head>
	<title>Example</title>
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="jquery.mobile.1.3.1.css" type="text/css" />
	<script type="text/javascript" src="jquery-1.10.1.js"></script>
	<script type="text/javascript" src="jquery.mobile-1.3.1.js"></script>
	<style type="text/css">
		.lcontainer {float: left; text-align: center; padding-top: 10px}
		.productData {float: right; padding: 10px; width: 60%}
	</style>
</head>
<body>
	<div id="page1" data-role="page" data-them="b">
		<div data-role="header">
			<h1>Jacqui's Shop</h1>
		</div>

		<ul data-role="listview">
			<li><a href="#roses">Roses</a></li>
			<li><a href="#orchids">Orchids</a></li>
			<li><a href="#asters">Asters</a></li>
		</ul>
	</div>

	<div id="roses" data-role="page" data-theme="b">
		<div data-role="header">
			<h1>Roses</h1>
		</div>
		<div>
			<div class="lcontainer">
				<img src="rose.png">
				<div><a href="#" data-rel="back" data-role="button" data-inline=true data-direction="reverse">Back</a></div>
			</div>
			<div class="productData">
				This here is where the page of the relevant shit for said item goes. This is for Roses page.
				<div><b>Price: $1000</b></div>
			</div>
		</div>
	</div>

	etc. for each page
</body>
</html>

We can use the following modifications for listviews:

Data attribute 				setting 				Desc

data-count-theme 			countTheme 				Specifies the theme for count bubbles.

data-divider-theme 			dividerTheme 			Specifies theme for dividers

data-filter 				filter 					if true, listview is shown as a filter

N/A 						filterCallBack 			Specifies a function invoked by the filter

data-filter-placeholder 	filterPlaceholder 		Specifies a placeholder for filtering

data-filter-theme 			filterTheme 			Specifies theme for the filter bar

data-header-theme 			headerTheme 			Specifies theme for nested headers

data-icon 					icon 					Specifies icon used by headers

data-inset 					inset 					if true, listview is drawn in a style that suits nested lists

data-split-icon 			splitIcon 				Specifies the icon for a split list

data-split-theme 			splitTheme 				Specifies the theme for split list

To create lists that are not the width of the screen, we can do data-inset to true:

<div id="container" style="padding: 20px">
	<ul data-role="listview" data-inset=true>
		<li><a href="#roses">Roses</a></li>
	</ul>
</div>

If we wish to create split lists, that allows for interaction on the level of creating one direction for one seciton and another for another, we could do as follows:

<html>
<head>
	<title>Some shit</title>
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="jquery.mobile-1.3.1.css" type="text/css"/>
	<script type="text/javascript" src="jquery-1.10.1.js"></script>
	<script type="text/javascript" src="jquery.mobile-1.3.1.js"></script>
	<style type="text/css">
		.lcontainer {float: left; text-align: center; padding-top: 10px}
		.productData {float: right; padding: 10px; width: 60%}
		.cWrapper {text-align: center; margin: 20px}
	</style>
</head>
<body>
	<div id="page1" data-role="page" data-theme="b">
		<div data-role="header">
			<h1>Shit</h1>
		</div>

		<div id="container" style="padding: 20px">
			<ul data-role="listview" data-inset=true>
				<li><a href="#basket" class="buy" id="rose">Roses</a><a href="#roses">Roses</a></li>
			</ul>
		</div>
	</div>

	<div id="basket" data-role="page" data-theme="b">
		<div data-role="header">
			<h1>Shit shit</h1>
		</div>
		<div class="cWrapper">
			basket will go here
		</div>
		<div class="cWrapper">
			<a href="#" data-rel="back" data-role="button" data-inline=true data-direction="reverse">Back</a>
		</div>
	</div>

	<div id="roses" data-role="page" data-theme="b">
		<div data-role="header">
			<h1>Roses</h1>
		</div>
		<div>
			<div class="lcontainer">
				<img src="rose.png">
				<div><a href="#" data-rel="back" data-role="button" data-inline=true data-direction="reverse">Back</a>
			</div>
		</div>
		<div class="productData">
			Some explonation of shit of roses here
			<div><b>Price: $4.99</b></div>
		</div>
	</div>
	etc.
</body>
</html>


If we wish to make a filtering list, we can activate data-filters and put in the list elements in the relevant div:

<div data-role="content">
	<ul data-role="listview" data-inset=true data-filter=true> //assign a list with data-role of listview and activate data-filter
		<li><a href="#roses">Roses</a></li> //list the elements the filter is to run regex against
		<li><a href="#orchids">Orchids</a></li>
		<li><a href="#asters">Asters</a></li>
	</ul>
</div>

We can also use a custom filtering function, if we wish, as follows:

<script type="text/javascript">
	$(document).bind("pageinit", function() {
		$("ul").listview("option", "filterCallback", function (listItem, filter) {
			var pattern = new RegExp("^" + filter, "i"); //Run a pattern with a regex of where we check against the beginning + input text for each element in the listing
			return !pattern.test(listItem) //If said item does not corespond to the pattern, hide it
		})
	})
</script>


If we wish, we can add dividers to the list as well, causing dividing boxes:

<div data-role="content">
	<ul data-role="listview" data-inset=true data-theme="c" data-divider-theme="b">
		<li data-role="list-divider">A</li> //divider
		<li><a href="#asters">Asters</a></li> //Can refer to the local id of something in the html 
		<li data-role="list-divider">B</li> //divider
		<li><a href="document2.html">Butts</a></li> //can refer to other html documents
	</ul>
</div>

We can add small count designations as well for list elements:

<div data-role="content">
	<ul data-role="listview" data-inset=true data-filter=true>
		<li><a href="#roses">Roses<div class="ui-li-count">23</div></a></li>
		<li><div class="ui-li-count">7</div><a href="#orchids">Orchids</a></li>
		<li><a href="#asters">Asters</a><div class="ui-li-count">Pink</div></li>
	</ul>
</div>

We can add texts to the ahref elements:

<li>
	<a href="#roses"><h1>Roses</h1>
		<p>A rose is shit</p>
		<div class="ui-li-count">$4.9</div></a>
</li>

If we wish to add an a-side, a side note on the element:

<a href="#roses">
	<h1>Roses</h1>
	<p>Some shit</p>
	<p class="ui-li-aside">(Pink) <strong>$4.99</strong></p> //Ui-li-aside causes designation of said text to be sided
</a>

the only method listview supports is refresh


To create panels, we could do as follows:

<div data-role="content" class="buttonContainer">
	<a data-role="button" data-inline="true" href="#panel">Open Panel</a>
</div>

<div id="panel" data-role="panel" data-theme="a">
	<div data-role="panel-content">
		<h3>Simple panel!</h3>
		<p>SOME CONTENT</p>
		<button data-rel="close" data-inline="true">Close</button>
	</div>
</div>


The data attributes and settings associated with the panel widget:

Data attrb 				Setting 			Desc

data-animate 			animate  			Defines animation or not. Default is true

data-dismissable 		dismissable  		If can be dismissed. Default is true

data-display 			display 			relation between panel and page. values: reveal, push and overlay (pushes page out of way, resized to share, slides over)

data-position 			position 			Where it is shown. values: left and right. default : left

data-position-fixed 	positionFixed 		If fixed or not. Default: false

data-swipe-close 		swipeClose 			if can be closed by swipe. default: true

Example of handling positioning of panels:

In the JS:

<script>
	$(document).bind("pageinit", function() {
		$("#pageContent button").tap(function (e) {
			$("#" + this.id + "Panel").panel({
				display: $("input[type=radio]:checked").attr("id")
			}).panel("open");
		});
	});
</script>

in the HTML:

<body>
	<div id="page1" data-role="page" data-theme="b">
		<div id="pageContent" data-role="content">

			<div class="ui-grid-a">
				<div class="ui-block-a"><button id="left">Left</button></div>
				<div class="ui-block-b"><button id="right">Right</button></div>
			</div>

			<div data-role="fieldcontain">
				<fieldset data-role="controlgroup" data-type="horizontal">
					<input type="radio" name="display" id="reveal" checked="checked"/>
					<label for="reveal">Reveal</label>
					<input type="radio" name="display" id="push"/>
					<label for="push">Push</label>
				</fieldset>
			</div>
		</div>

		<div id="leftPanel" data-role="panel" data-theme="a" data-positon="left">
			<div data-role="panel-content">
				<h3>Left panel</h3>
				<p>Some shit</p>
				<button data-rel="close" data-inline="true">Close</button>
			</div>
		</div>

		<div id="rightPanel" data-role="panel" data-theme="a" data-position="right">
			<div data-role="panel-content">
				<h3>Right Panel</h3>
				<p>Other shit</p>
				<button data-rel="close" data-inline="true">Close</button>
			</div>
		</div>
	</div>
</body>
</html>


if we wish, we can create panels that cannot be dismissed by tapping the page or swiping:

<html>
<head>
	<title>Shit title</title>
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="jquery.mobile-1.3.1.css" type="text/css"/>
	<script type="text/javascript" src="jquery-1.10.1.js"></script>
	<script>
		$(document).bind("pageinit", function() { //bind the functionining to the document upon page initialization
			$("a").tap(function (e) { //upon tapping the link
				var timeRemaining = 15; //A time remaining function
				var intervalId = setInterval (function() { //set the interval of this var bound to a function
					$("#remaining").text(timeRemaining--); //minus the text by 1
					if (timeRemaining == 0){ //if time remaining is 0
						$("#panel").panel("close"); //close the panel
						clearInterval(intervalId); //clear the interval
					} 
				}, 1000); //The tick is 1 second
				$("#panel").panel("open"); //open the panel
			});
		});
	</script>
	<script type="text/javascript" src="jquery.mobile-1.3.1.js"></script>
</head>
<body>
	<div id="page1" data-role="page" data-theme="b">
		<div data-role="header">
			<h1>Shit</h1>
		</div>

		<div data-role="content" class="buttonContainer">
			<a data-role="button" data-inline="true">Open Panel</a>
		</div>

		<div id="panel" data-role="panel" data-theme="a" data-dismissable="false" data-swipe-close="false"> //dismissable set to false
			<h3>Simple panel of doom</h3>
			<p>Content of panel. It will close in <span id="remaining">15</span> seconds.</p>
			<button data-rel="close" data-inline="true">Close</button>
		</div>
	</div>
</body>
</html>


The panel methods:

panel("open")

panel("close")

panel("toggle") //toggle visibility

Using panel events:

create //when widget is created

beforeopen //before panel is shown

beforeclose //before panel closes

open 	//after panel is shown

close //after panel is hidden

What follows is an example of a page that implements a checkout, a basket, elements dynamically updating and stuff, etc.

<html>
<head>
	<title>Example</title>
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="jquery.mobile-1.3.1.css" type="text/css"/>
	<script type="text/javascript" src="jquery-1.10.1.js"></script>
	<script src="handlebars.js"></script>
	<script id="liTmpl" type="text/x-handlebars-template">
		{{#products}}
		<li>
			<a href="#" class="buy" id="{{name}}">{{label}}</a>
			<a class="productLink" data-flower="{{name}}" href="#">{{label}}</a>
		</li>
		{{products}}
	</script>
	<script id="trTmpl" type="text/x-handlebars-template">
		<tr data-theme="b" data-price="{{price}}" id="{{name}}"><td>{{label}}</td>
			<td id="count"><input type=number value=1 min=0 max=10></td>
			<td id="subtotal">0</td>
		</tr>
	</script>
	<script type="text/javascript">
		var initComplete = false;
		$(document).bind("pageinit", function() {
			if (!initComplete) {
				$.getJSON("data.json", function(data) {
					$("ul").append($("#liTmpl").template({ products: data })).listview("refresh");

					$("a.productLink").bind("tap", function() {
						var targetFlower = $(this).attr("data-flower");
						for (var i = 0; i < data.length; i++) {
							if (data[i].name == targetFlower) {
								var page = $("#productPage");
								page.find("#header").text(data[i].label);
								page.find("#image").attr("src", data[i].name + ".png");
								page.find("#description").text(data[i].text);
								page.find("#price").text(data[i].price);
								page.find("#buybutton").attr("data-flower", data[i].name);
								$.mobile.changePage("#productPage");
								break;
							}
						}
					})

					$("#buybutton").bind("tap", function () {
						addProduct($(this).attr("data-flower"));
					})

					$("a.buy").bind("tap", function() {
						addProducts(this.id);
					})

					function addProduct(targetFlower) {
						var row = $("#basketTable tbody #" + targetFlower);
						if (row.length > 0) {
							var countCell = row.find("#count input");
							countCell.val(Number(countCell.val()) + 1);
						} else {
							for (var i = 0; i < data.length; i++) {
								if (data[i].name == targetFlower) {
									$("#trTmpl").template(data[i])
										.appendTo("#basketTable tbody")
										.find("input").textinput();
									break;
								}
							}
						}
						calculateTotals();
						$.mobile.changePage(#basket)
					}

					$(document).on("change click", "input", function (event) {
						calculateTotals();
					})

					$("#submit").bind("tap", function() {
						var dataObject = new Object();
						$("#basketTable tbody").children().each(function (index, elem) {
							dataObject[elem.id] = $(elem).find("#count input").val();
						})
						dataObject["name"] = $("name").val();
						dataObject["wrap"] = $("option:selected").val();
						dataObject["shipping"] = $("input:checked").attr("id")

						console.log("DATA: " + JSON.stingify(dataObject))
					})
				});
				initComplete = true;
			}
		})

		function calculateTotals() {
			var total = 0;
			$("#basketTable tbody").children().each(function (index, elem) {
				var count = Number($(elem).find("#count input").val())
				var price = Number($(elem).attr("data-price").slice(1))
				var subtotal = count * price;
				$(elem).find("#subtotal").text("$" + subtotal.toFixed(2));
				total += subtotal;
			})
			$("#total").text("$" + total.toFixed(2))
		}
	</script>
	<script type="text/javascript" src="jquery.mobile-1.3.1.js"></script>
	<style type="text/css">
		.lcontainer {float: left; text-align: center; padding: 10px}
		.productData {float: right; padding: 10px; width: 60%}
		.cWrapper {text-align: center}
		table {display: inline-block; margin: auto; margin-top: 20px; text-align: left;
			border-collapse: collapse}
		td {min-width: 100px; padding-bottom: 10px}
		td:nth-child(2) {min-width: 75px; width: 75px}
		th, td {text-align: right}
		th:nth-child(1), td:nth-child(1) {text-align: left}
		input[type=number] {background-color: white}
		tfoot tr {border-top: medium solid black}
		tfoot tr td {padding-top: 10px}
	</style>
</head>
<body>
	<div id="page1" data-role="page" data-theme="b">
		<div data-role="header">
			<h1>Fok u</h1>
		</div>
		<div id="container" style="padding: 20px">
			<ul data-role="listview" data-inset=true></ul>
		</div>
	</div>

	<div id="productPage" data-role="page" data-theme="b">
		<div data-role="header">
			<h1 id="header"></h1>
		</div>
		<div>
			<div class="lcontainer">
				<img id="image" src="">
				<div><a href="#" data-rel="back" data-role="button" data-inline=true data-direction="reverse">Back</a>
			</div>
		</div>
		<div class="productData">
			<span id="description"></span>
			<div>
				<b>Price: <span id="price"></span></b>
				<a href="#" id="buybutton" data-flower="" data-role="button" data-inline=true>Buy</a>
			</div>
		</div>
	</div>

	<div id="basket" data-role="page" data-theme="b">
		<div data-role="header">
			<h1>FOK U</h1>
		</div>
		<div class="cWrapper">
			<table id="basketTable" border=0>
				<thead>
					<tr><th>Flower</th><th>Quantity</th><th>Subtotal</th></tr>
				</thead>
				<tbody></tbody>
				<tfoot>
					<tr><th colspan=2>Total:</th><td id="total"></td></tr>
				</tfoot>
			</table>
		</div>
		<div class="cWrapper">
			<a href="#" data-rel="back" data-role="button" data-inline=true data-direction="reverse">Back</a>
			<a href="#checkout" data-role="button" data-inline="true">Checkout</a>
		</div>
	</div>

	<div id="checkout" data-role="page" data-theme="b">
		<div data-role="header">
			<h1>Fok u</h1>
		</div>

		<div data-role="content">
			<label for="name">Name: </label>
			<input id="name" placeholder="Your name">

			<label for="wrap"><span>Gift wrap: </span></label>
			<select id="wrap" name="wrap" data-role="slider">
				<option value="yes" selected>Yes</option>
				<option value="no">No</option>
			</select>

			<fieldset data-role="controlgroup" data-type="horizontal">
				<legend>Shipping:</legend>
				<input type="radio" name="ship" id="overnight" checked />
				<label for="overnight">Overnight</label>
				<input type="radio" name="ship" id="23day"/>
				<label for="23day">2-3 days</label>
				<input type="radio" name="ship" id="710day"/>
				<label for="710day">7-10 days</label>
			</fieldset>

			<div class="cWrapper">
				<a href="#" data-rel="back" data-role="button" data-inline="true"
					data-direction="reverse">Back</a>
				<a href="#" id="submit" data-role="button"
					data-inline="true">Submit Order</a>
			</div>
		</div>
	</div>
</body>
</html>

Queues in jQuery has a number of assorted methods:

clearQueue(<name>) 	//Removes any functions that not yet been run in the specified queue

queue(<name>) 		//Returns the specified queue of functions to be performed on the elements in the jQuery object

queue(<name>, function) 	//Add a function to the end of the queue

dequeue(<name>) 		//Removes and executes the first item in the queue for the elements in the jquery object

delay(<time>, <name>) 	//Insert a delay between effects in the specified queue

If we wish to use queues, we could use the following setup as follows:

<head>
	<title>Fok u</title>
	<script src="jquery-2.0.2js" type="text/javascript"></script>
	<link rel="stylesheet" type="text/css" href="styles.css">
	<script type="text/javascript">
		$(document).ready(function() {
			var elems = $("input");

			elems.queue("gen", function(next) {
				$(this).val(100).css("border", "thin red solid");
				next();
			});

			elems.delay(1000, "gen");

			elems.queue("gen", function(next) {
				$(this).val(0).css("border", "");
				$(this).dequeue("gen");
			});

			$("<button>Process Queue</button>").appendTo("#buttonDiv")
				.click(function(e) {
					elems.dequeue("gen");
					e.preventDefault();
				});
		});
	</script>
</head>
<body>
	<h1>FOK U TITLE</h1>
	<form method="post">
		<div id="oblock">
			<div class="dtable">
				<div id="row1" class="drow">
					<div class="dcell">
						<img src="aster.png"/><label for="aster">Aster:</label>
						<input name="aster" value="0" required />
					</div>
					<div class="dcell">
						<img src="daffodil.png"/><label for="daffodil">Daffodil:</label>
						<input name="daffodil" value="0" required />
					</div>
				</div>
				etc.
			</div>
		</div>
		<div id="buttonDiv"><button type="submit">Place Order</button></div>
	</form>
</body>
</html>


If we wish, we can dequeue elements explicitly, as follows:

<script type="text/javascript">
	$(document).ready(function() {
		$("input").queue("gen", function() {
			$(this).val(100).css("border", "thin red solid");
		}).queue("gen", function() {
			$(this).val(0).css("border", "");
		}).queue("gen", function() {
			$(this).css("border", "thin blue solid");
			$("#dequeue").attr("disabled", "disabled");
		});

		$("<button id=dequeue>Dequeue Item</button>").appendTo("#buttonDiv")
			.click(function (e) {
				$("input").dequeue("gen");
				e.preventDefault();
			});
	});
</script>


Beyond this, we have some utility methods for arrays:

$.grep(<array>, function) 				//Filters contents based on a function
$.grep(<array>, function, <invert>)

$.inArray(<value>, <array>) 			//Determines if a certain item is in the array

$.map(<array>, function) 				//Projects an array or map object using a function
$.map(<array>, <map>)

$.merge(<array>, <array>) 				//Merge two arrays

$.unique(HTMLElement[]) 				//Creates set of HTML elements (unique, ordered)

An example of running a Grep on arrays for a certain regex:

<script type="text/javascript">
	$(document).ready(function() {
		var flowerArray = ["aster", "daffodil", "rose", "peony", "primula", "snowdrop"]; //an array

		var filteredArray = $.grep(flowerArray, function(elem, index) { //run grep, the linux version of regex to find shit
			return elem.indexOf("p") > -1; //if it's greater than -1, then it means it exists in the array and we return that index
		}); 

		for (var i = 0; i < filteredArray.length; i++) {
			console.log("Filtered Element: " + filteredArray[i]);
		}
	});
</script>

If we wish to reverse the effect of the grep, i.e, search for stuff that DOES Not match the regex, just add true on the end:

var filteredArray = $.grep(flowerArray, function(elem, index) {
	return elem.indexOf("p") > -1;
}, true);

To use inArray:

$.inArray("rose", flowerArray); //returns index of element, if found, first occurence

If we "Map" stuff to an array, it means that project the contents to another place:

<script type="text/javascript">
	$(document).ready(function() {
		var flowerArray = ["aster", "daffodil", "rose", "peony", "primula", "snowdrop"];

		var result = $.map(flowerArray, function(elem, index) {
			return index + ": " + elem;
		});

		for (var i = 0; i < result.length; i++) {
			console.log(result[i]);
		}
	});
</script>

We can of course include if statements and what not to change hte processing of the projection of the mapping

Merge is simply as follows:

$.merge(<array1>, <array2>);

The contents gets added on to the first array.

To use unique:

$.unique(selection);

We have utility methods for types:

$.isArray(Object) //true if array

$.isEmptyObject(Object) //True if defines no methods or properties

$.isFunction(Object) //true if a function

$.isNumeric(Object) //true if number

$.isWindow(Object) //true if object is window

$.isXMLDoc(Object) //returns true ifXML object

$.type(Object) 	//returns the type


The type returned by $.type(Object) can be one of the following:

boolean

number

string

function

array

date

regexp

object

We can also use utility methods for data:

serialize() 			//Serializes data to be parsable by server

serializeArray() 		//Serializes an array into data parsable by server

$.parseJSON(<json>) 	//creates JS object from JSON data

$.parseXML(<xml>) 	//creates XMLDocument Object from a XML string

$.trim(String) 	//Removes whitespace before and after


There are two other utility methods as well:

$.contains(HTMLElement, HTMLElement) 		//True if element2 is in element1

$.now() 									//Returns the current time, shorthand for Date().getTime()

jQuery supports the following CSS stuff:

backgroundColor 	//background color

borderTopColor 		//specific side coloring
borderBottomColor
borderLeftColor
borderRightColor

color 			//text color of the elemenet

outlineColor 		//color of the outline

To apply colors, by animation calls:

in the JS:

<script type="text/javascript">
	$(document).ready(function() {
		$("button").click(function() {
			$("#animTarget").animate({
				backgroundColor: "black"
			})

		})
	});
</script>

in the HTML:

<div id=animTarget>
	Hi
</div>


To animate classes:

in CSS:

.myClass {
	font-size: 40px; background-color: black; color: white;
}

in JS:

<script type="text/javascript">
	$(document).ready(function() {
		$("button").click(function() {
			if (this.id == "add") {
				$("#animTarget").addClass("myClass", "fast")
			} else {
				$("#animTarget").removeClass("myClass", "fast")
			}
		})
	});
</script>

In the HTML:

<div id=animTarget class="elemClass">
	Hi
</div>

We can also switch classes with the swithclass call:

in the CSS:

.classOne {
	//some shit
}
.classTwo {
	//some shit
}

In the JS:

$("button").click(function() {
	$("#animTarget").switchClass("classOne", "classTwo", "fast")
})

Examples of running anims on targets:

$("#animTarget").show("fold", "fast");

$("#animTarget").hide("fold", "fast");

We can also use effect to incorporate animations without showing or hiding:

$("#animTarget").effect("pulsate", "fast")

Further more, we can use some CSS classes to create boxing UI:s:

ui-widget //applies to overall container elements

ui-widget-header //Applies to header container elements

ui-widget-content //Applies to content container element

We can also define where we want rounded corners:

ui-corner-all

ui-corner-bl

ui-corner-bottom

ui-corner-br

ui-corner-left

ui-corner-right

ui-corner-tl

ui-corner-top

ui-corner-tr

if we wish, we can relate CSS to different states of elements: //All of these applies to clickable widgets

ui-state-default //default style for clickable widget

ui-state-hover //When hovered

ui-state-focus //When focused

ui-state-active //When active


We can do Ui-states with errors or highlights etc:

ui-state-highlight 		//highlights

ui-state-error 			//showcases error

ui-state-disabled 		//Applies disabled style

Deferred objects in jQuery allows us to callbacks to events without having to relate them to events, making support for asyncrhonous programming:

<script type="text/javascript">
	$(document).ready(function() {
		var def = $.Deferred(); //create a Deferred object

		def.done(function(){ //upon completion, we have stored a function to which is to display the message of callback executed
			displayMessage("Callback Executed");
		})

		$("button").button().click(function() {
			def.resolve(); //The deferred object is not resolved until it is triggered. Here, we resolve it, by adding resolution integrated to a button and clicking it
		})

			displayMessage("Ready")
		})

		function displayMessage(msg) { //the displayMessage function
			$("tbody").append("<tr><td>" + msg + "</td></tr>") //append to the body, the msg in a formatted table
		}
	</script>



What follows, is an example of doing asyncrhonous object handling by running the task in the background and having a async wrapper around a long task:

<html>
<head>
	<title>Example</title>
	<script src="jquery-2.0.2.js" type="text/javascript"></script>
	<script src="jquery-ui-1.10.3.custom.js" type="text/javascript"></script>
	<link rel="stylesheet" type="text/css" href="styles.css"/>
	<link rel="stylesheet" type="text/css" href="jquery-ui-1.10.3.custom.css"/>
	<style type="text/css">
		td {text-align: left; padding: 5px}
		table {width: 200px; border-collapse: collapse; float: left; width: 300px}
		#buttonDiv {text-align: center; margin: 20px; float: left}
	</style>
	<script type="text/javascript">
		$(document).ready(function(){
			function performLongTaskSync() { //calculations task
				var start = $.now();

				var total = 0;
				for (var i = 0; i < 5000000000 ; i++) {
					total += 1;
				}

				var elapsedTime = (($.now() - start/1000).toFixed(1))
				displayMessage("Task Complete. Time: " + elapsedTime + " sec")
				return total;
			}

			function performLongTask(){ //wrap the function in a asyncronous wrapper
				return $.Deferred(function (def) { //return the Deferred object when it has been resolved, after the long task has been performed
					setTimeOut(function() { //set the time out to be 10 miliseconds
						performLongTaskSync(); //perform the sync task
						def.resolve(); //resolve the deferred object
					}, 10)
				})
			}

			$("button").button().click(function() {
				if ($(":checked").length > 0) {
					displayMessage("Calling performLongTask()")
					var observer = performLongTask();
					observer.done(function() {
						displayMessage("Callback Executed");
					});
					displayMessage("performLongTask() Returned")
				} else {
					displayMessage("Calling performLongTaskSync()")
					performLongTaskSync();
					displayMessage("performLongTaskSync() Returned")
				} 
			})

			$(":checkbox").button();
			displayMessage("Ready")
		})

		function displayMessage(msg) {
			$("tbody").append("<tr><td>" + msg + "</td></tr>")
		}
	</script>
</head>
<body>
	<h1>Fok u</h1>
	<table class="ui-widget" border=1>
		<thead class="ui-widget-header">
			<tr><th>Message</th></tr>
		</thead>
		<tbody class="ui-widget-content">
		</tbody>
	</table>

	<div id="buttonDiv">
		<button>Go</button>
		<input type="checkbox" id="async" checked>
		<label for="async">Async</label>
	</div>
</body>
</html>


Once deferred objects have been resolved, they are depleted. Thus, it is good to have a wrapper to always supply a new deferred object to act asyncrhonously on


There are three methods of which a registered callback can be resolved:

Callback registration method 			Triggered by

done 		 							resolve

fail 									reject
 	
always 									resolve or reject

Example of rejecting and resolving deferred objects of such:

<html>
<head>
	<title>Example</title>
	<script src="jquery-2.0.2.js" type="text/javascript"></script>
	<script src="jquery-ui-1.10.3.custom.js" type="text/javascript"></script>
	<link rel="stylesheet" type="text/css" href="styles.css"/>
	<link rel="stylesheet" type="text/css" href="jquery-ui-1.10.3.custom.css"/>
	<style type="text/css">
		td {text-align: left; padding: 5px}
		table {width: 200px; border-collapse: collapse; float: left; width: 300px}
		#buttonDiv {text-align: center; margin: 20px; float: left}
	</style>
	<script type="text/javascript">
		$(document).ready(function() {
			function performLongTaskSync(){
				var start = $.now();

				var total = 0;
				for (var i = 0; i < 5000000 ; i++) {
					total += (i + Number((Math.random() + 1).toFixed(0)));
				}

				var elapsedTime = (($.now() - start)/1000).toFixed(1)
				displayMessage("Task Compelte. Time: " + elapsedTime + " sec")
				return total;
			}

			function performLongTask(){ //perform the task in a async wrapper 
				return $.Deferred(function(def) { //returns the deferred object of the operations upon completion
					setTimeout(function() { //have a timeout on the performance
						var total = performLongTaskSync();
						if (total % 2 == 0) {
							def.resolve(total);
						} else {
							def.reject(total);
						}
					}, 10)}) 
			}

			$("button").button().click(function() {
				displayMessage("Calling performLongTask()") //display the message
				var observer = performLongTask(); //perform the task
				displayMessage("performLongTask() Returned")
				observer.done(function(total) { //if we recieved a successfull deferred object
					displayMessage("Done Callback Executed: " + total);
				});
				observer.fail(function(total) { //if we recieved a rejected deferred object
					displayMessage("Fail Callback Executed: " + total);
				});
			})

			displayMessage("Ready")
		})

		function displayMessage(msg) {
			$("tbody").append("<tr><td>" + msg + "</td></tr>")
		}
	</script>
</head>
<body>
	<h1>Fok u</h1>
	<table class="ui-widget" border=1>
		<thead class="ui-widget-header">
			<tr><th>Message</th></tr>
		</thead>
		<tbody class="ui-widget-content">
		</tbody>
	</table>

	<div id="buttonDiv">
		<button>Async call</button>
	</div>
</body>
<html>


We can chain methods, even in teh case of async tasks.

Or we could handle the outcome in one sweep, as follows:

$("button").button().click(function() {
	displayMessage("Calling performLongTask()")
	var observer = performLongTask();
	displayMessage("performLongTask() Returned")

	observer.then( //The then attribute allows us to define handling of success/failure. Success first, failure second
		function(total){
			displayMessage("Done Callback Executed");
		},
		function(total){
			displayMessage("Fail Callback Executed");
		}
	);
})

If we wish to trigger a event regarldess of outcome, we can use the .always attribute:

$("button").button().click(function() {
	displayMessage("Calling performLongTask()")
	var observer = performLongTask();
	displayMessage("performLongTask() Returned")

	$("#dialog").dialog("open"); //remnant of entire example

	observer.always(function() { //always trigger , regardless of outcome.
		//do something
	});

	observer.done(function(total) { //Specifics executed afterwards, case of success
		displayMessage("Done callback Executed: " + total);
	});

	observer.fail(function(total){ //or if it's a failure
		displayMessage("Fail callback Executed: " + total);
	});


})


We can call multiple callbacks on a deferred object, in succession, if we wish, either by , seperation or by just repeated event callings (.done event repeated)

If we wish, we can compound deferred multiple objects into a single event handling:

//assume 3 tasks of deffered objects has been declared

$.when(ob1, ob2, ob3).
	done(function() {
		displayMessage("Do something")
	})
	.fail(function() {
		displayMessage("Do something else")
	})


NOTE: Even if a event is compounded by several asynch tasks, there is guarantee for that ALL the tasks have succeeded

If we wish to cause updates for completion of each step of asynchronous tasks, we can update the DOM, but the DOM needs time, so we need to apply time intervals.
An example, follows:

<script type="text/javascript">
	$(document).ready(function() {
		function performLongTaskSync(){ //The calculation
			var total = 0;
			for (var i = 0; i < 500000; i++){
				total += (i + Number((Math.random() + 1).toFixed(0)));
			}
			return total;
		}

		function performLongTask(){ //do the task
			function doSingleIteration(){ //put it in a async wrapper
				return $.Deferred(function(innerDef){ //return the Deferred object after calling it upon the def object
					setTimeout(function(){ //set the timeout
						performLongTaskSync(); //perform the calculation
						innerDef.resolve(); //resolve the innerDef
					} 10)
				})
			}

			var def = $.Deferred(); //created a deferred object

			setTimeout(function() { //set the timeout, 10 milisec
				doSingleIteration().done(function() { //Run the first iteration
					def.notify(25);
					doSingleIteration().done(function(){ //Second
						def.notify(50);
						doSingleIteration().done(function(){ //Third
							def.notify(75);
							doSingleIteration().done(function(){ //4th
								def.notfiy(100);
								def.resolve();
							})
						})
					})
				})
			}, 10);

			return def;
		}


		$("button").button().click(function() { //upon clicking
			performLongTask().progress(function(val) { //updatep rogress
				displayMessage("Progress: " + val + "%")
			}).done(function(){ //when done, state resolved
				displayMessage("Task Resolved");
			})
		})

		$("#dialog").dialog({ //stuff for HTML elements that are not included here for brevity
			autoOpen: false,
			modal: true
		})

		displayMessage("Ready")
	})

	function displayMessage(msg){
		$("tbody").append("<tr><td>" + msg + "</td></tr>")
	}
</script>


We can access info about a deferred Object by calling .state() on it and  by the following values returned:

pending 		//Neither resolve or reject has been called on the deferred object yet

resolved 		//Object has been resolved

rejected 		//object was rejected


NOTE: Promises are subsets of deferred objects of AJAX and interaction of deferred objects 

What follows, is the final example of the book, of integrating deferred objects into Ajax:

<html>
<head>
	<title>Example</title>
	<script src="jquery-2.0.2.js" type="text/javascript"></script>
	<script src="jquery-ui-1.10.3.custom.js" type="text/javascript"></script>
	<link rel="stylesheet" type="text/css" href="styles.css"/>
	<link rel="stylesheet" type="text/css" href="jquery-ui-1.10.3.custom.css"/>
	<style type="text/css">
		td {text-align: left; padding: 5px}
		table {width: 200px; border-collapse: collapse; float: left; width: 300px}
		#buttonDiv {text-align: center; margin: 20px; float: left}
	</style>
	<script type="text/javascript">
		$(document).ready(function(){
			function performLongTaskSync(){
				var start = $.now();

				var total = 0;
				for (var i = 0; i < 500000000 ; i++) {
					total += (i + Number((Math.random() + 1).toFixed(0)));
				}

				var elapsedTime = (($.now() - start/1000).toFixed(1))
				displayMessage("Task Complete. Time: " + elapsedTime + " sec")
				return total;
			}

			function performLongTask() {
				return $.Deferred(function(def){
					setTimeout(function(){
						performLongTaskSync();
						def.resolve();
					}, 10)})
			}

			$("button").button().click(function() {
				displayMessage("calling performLongTask()")
				var observer = performLongTask().done(function() {
					displayMessage("Task Complete")
				});

				displayMessage("performLongTask() returned")

				displayMessage("Calling getJSON()")
				var ajaxPromise = $.getJSON("mydata.json").done(function() {
					displayMessage("Ajax Request Completed")
				});
				displayMessage("getJSON() Returned")

				$.when(observer, ajaxPromise).done(function(){
					displayMessage("All done");
				})
			})

			displayMessage("Ready")
		})

		function displayMessage(msg){
			$("tbody").append("<tr><td>" + msg "</td></tr>")
		}
	</script>
</head>
<body>
	<h1>SOME TITLE FUCK YOU</h1>

	<table class="ui-widget" border=1>
		<thead class="ui-widget-header">
			<tr><th>Message</th></tr>
		</thead>
		<tbody class="ui-widget-content">
		</tbody>
	</table>

	<div id="buttonDiv">
		<button>Go</button>
	</div>
</body>
</html>

If we wish to create our own promiseo bjects, we can call the .promise() object on a deferred Object.

This prevents resolving or rejecting said objects and only allows for callbacks on said object.

A promise object can have the following methods used on it: done, fail, then and always.

The promise object, can be used with when methods.